{"version":3,"sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/./src/JitsiConferenceEvents.js","webpack://SariskaMediaTransport/./src/service/xmpp/XMPPEvents.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/index.js","webpack://SariskaMediaTransport/./src/service/RTC/MediaType.js","webpack://SariskaMediaTransport/./src/modules/browser/index.js","webpack://SariskaMediaTransport/./src/dom/var/getProto.js","webpack://SariskaMediaTransport/./src/dom/var/slice.js","webpack://SariskaMediaTransport/./src/dom/var/flat.js","webpack://SariskaMediaTransport/./src/dom/var/hasOwn.js","webpack://SariskaMediaTransport/./src/dom/var/fnToString.js","webpack://SariskaMediaTransport/./src/dom/var/ObjectFunctionString.js","webpack://SariskaMediaTransport/./src/dom/core/DOMEval.js","webpack://SariskaMediaTransport/./src/dom/core.js","webpack://SariskaMediaTransport/./src/dom/var/isWindow.js","webpack://SariskaMediaTransport/./src/dom/var/support.js","webpack://SariskaMediaTransport/./src/modules/statistics/statistics.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./src/service/RTC/RTCEvents.js","webpack://SariskaMediaTransport/./src/service/statistics/AnalyticsEvents.js","webpack://SariskaMediaTransport/./src/service/RTC/MediaDirection.js","webpack://SariskaMediaTransport/./src/modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./src/modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./src/service/RTC/VideoType.js","webpack://SariskaMediaTransport/./src/modules/RTC/RTC.js","webpack://SariskaMediaTransport/./src/JitsiTrackErrors.js","webpack://SariskaMediaTransport/./src/JitsiTrackEvents.js","webpack://SariskaMediaTransport/./src/JitsiConferenceErrors.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDP.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./src/service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./src/modules/util/Listenable.js","webpack://SariskaMediaTransport/./src/modules/flags/FeatureFlags.js","webpack://SariskaMediaTransport/./src/JitsiTrackError.js","webpack://SariskaMediaTransport/./src/modules/detection/DetectionEvents.js","webpack://SariskaMediaTransport/./src/modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/VideoSIPGWConstants.js","webpack://SariskaMediaTransport/./src/JitsiConnectionEvents.js","webpack://SariskaMediaTransport/./src/service/statistics/Events.js","webpack://SariskaMediaTransport/./src/dom/var/document.js","webpack://SariskaMediaTransport/./src/dom/var/arr.js","webpack://SariskaMediaTransport/./src/modules/settings/Settings.js","webpack://SariskaMediaTransport/./src/modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./src/modules/util/MathUtil.js","webpack://SariskaMediaTransport/./src/service/connectivity/ConnectionQualityEvents.js","webpack://SariskaMediaTransport/./src/dom/core/nodeName.js","webpack://SariskaMediaTransport/./src/dom/var/documentElement.js","webpack://SariskaMediaTransport/./src/dom/var/pop.js","webpack://SariskaMediaTransport/./src/dom/selector/var/whitespace.js","webpack://SariskaMediaTransport/./src/dom/var/isIE.js","webpack://SariskaMediaTransport/./src/dom/selector/rbuggyQSA.js","webpack://SariskaMediaTransport/./src/dom/selector/contains.js","webpack://SariskaMediaTransport/./src/dom/selector/escapeSelector.js","webpack://SariskaMediaTransport/./src/dom/var/sort.js","webpack://SariskaMediaTransport/./src/dom/selector/uniqueSort.js","webpack://SariskaMediaTransport/./src/dom/selector.js","webpack://SariskaMediaTransport/./src/dom/core/access.js","webpack://SariskaMediaTransport/./src/dom/var/rnothtmlwhite.js","webpack://SariskaMediaTransport/./src/dom/attributes/attr.js","webpack://SariskaMediaTransport/./src/dom/attributes/prop.js","webpack://SariskaMediaTransport/./src/dom/core/stripAndCollapse.js","webpack://SariskaMediaTransport/./src/dom/core/var/rsingleTag.js","webpack://SariskaMediaTransport/./src/dom/traversing/var/rneedsContext.js","webpack://SariskaMediaTransport/./src/dom/traversing/findFilter.js","webpack://SariskaMediaTransport/./src/dom/core/init.js","webpack://SariskaMediaTransport/./src/dom/attributes/classes.js","webpack://SariskaMediaTransport/./src/dom/attributes/val.js","webpack://SariskaMediaTransport/./src/dom/attributes.js","webpack://SariskaMediaTransport/./src/dom/core/parseXML.js","webpack://SariskaMediaTransport/./src/dom/manipulation.js","webpack://SariskaMediaTransport/./src/dom/jquery.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSessionState.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/constants.js","webpack://SariskaMediaTransport/./src/modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./src/service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./src/dom/var/push.js","webpack://SariskaMediaTransport/./src/service/RTC/SignalingEvents.js","webpack://SariskaMediaTransport/./src/modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./src/JitsiConnectionErrors.js","webpack://SariskaMediaTransport/./src/modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/(webpack)/buildin/global.js","webpack://SariskaMediaTransport/./src/modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./src/dom/var/class2type.js","webpack://SariskaMediaTransport/./src/dom/var/indexOf.js","webpack://SariskaMediaTransport/./src/modules/statistics/constants.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./src/modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./node_modules/process/browser.js","webpack://SariskaMediaTransport/./src/modules/util/Deferred.js","webpack://SariskaMediaTransport/./src/service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./src/JitsiMediaDevicesEvents.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./src/modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./src/modules/connectivity/ParticipantConnectionStatus.js","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./src/modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./src/service/RTC/BridgeVideoType.js","webpack://SariskaMediaTransport/./src/modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./src/SariskaMediaTransport.js","webpack://SariskaMediaTransport/./src/modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./src/config/index.js","webpack://SariskaMediaTransport/./src/modules/e2ee/ExternallyManagedKeyHandler.js","webpack://SariskaMediaTransport/./src/modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/presenter/JitsiStreamPresenterEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/presenter/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./src/dom/var/toString.js","webpack://SariskaMediaTransport/./src/dom/core/toType.js","webpack://SariskaMediaTransport/./src/modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./src/modules/e2ee/KeyHandler.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./src/JitsiTranscriptionStatus.js","webpack://SariskaMediaTransport/./src/modules/xmpp/MediaSessionEvents.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./src/service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./src/modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./src/modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./src/service/e2eping/E2ePingEvents.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./src/modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./src/modules/local-recording/session/index.js","webpack://SariskaMediaTransport/./src/modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./src/JitsiMediaDevices.js","webpack://SariskaMediaTransport/./src/service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./src/modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./src/modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./src/modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./src/modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/rng.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/v4.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/Logger.js","webpack://SariskaMediaTransport/(webpack)/buildin/module.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./src/modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./src/modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./src/JitsiConference.js","webpack://SariskaMediaTransport/./src/JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./src/modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./src/modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./src/modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./src/modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./src/modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./src/JitsiParticipant.js","webpack://SariskaMediaTransport/./src/authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./src/modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./src/modules/e2ee/ManagedKeyHandler.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./src/modules/util/Retry.js","webpack://SariskaMediaTransport/./src/modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./src/modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./src/modules/xmpp/BreakoutRooms.js","webpack://SariskaMediaTransport/./src/modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./src/modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./src/modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleHelperFunctions.js","webpack://SariskaMediaTransport/./src/modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./node_modules/async/lib/async.js","webpack://SariskaMediaTransport/./src/modules/util/StringUtils.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./src/modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./src/modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./src/modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./src/modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./src/modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./src/modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./src/modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./src/modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./src/modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./src/modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./src/modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./src/modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./src/modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./src/modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./src/modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./src/modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./src/modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./src/modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./src/modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./src/modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./src/modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./src/modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./src/modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./src/modules/util/createAnalyticsEvent.js","webpack://SariskaMediaTransport/./src/modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./node_modules/rnnoise-wasm/dist/index.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/tflite.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/tflite-simd.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://SariskaMediaTransport/./src/modules/util/parseURLParams.js","webpack://SariskaMediaTransport/./src/JitsiConnection.js","webpack://SariskaMediaTransport/./src/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://SariskaMediaTransport/./src/dom/exports/global.js","webpack://SariskaMediaTransport/(webpack)/buildin/amd-options.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./src/service/statistics/constants.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-stream-management/lib/strophe.stream-management.js","webpack://SariskaMediaTransport/./node_modules/timers-browserify/main.js","webpack://SariskaMediaTransport/./node_modules/setimmediate/setImmediate.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./src/modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./src/modules/transcription/word.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","SUBTITLES_RECEIVED","ANALYTICS_EVENT_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","FACIAL_EXPRESSION_ADDED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","TRACK_UPDATED","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_FAILED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","LOCAL_ROLE_CHANGED","MEETING_ID_SET","INVITE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOIN_IN_PROGRESS","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_RECEIVED","BREAKOUT_ROOMS_EVENT","START_MUTED_FROM_FOCUS","TRANSPORT_INFO","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","AUDIO","PRESENTER","VIDEO","BrowserCapabilities","flat","array","apply","class2type","hasOwn","fnToString","preservedScriptAttributes","src","noModule","DOMEval","script","head","removeChild","rhtmlSuffix","jQuery","selector","context","fn","isArrayLike","toType","isWindow","jquery","toArray","slice","pushStack","elems","ret","merge","prevObject","each","first","eq","last","even","grep","_elem","odd","end","extend","copy","copyIsArray","clone","target","deep","isPlainObject","expando","isReady","noop","Ctor","getProto","ObjectFunctionString","isEmptyObject","globalEval","makeArray","results","inArray","isXMLDoc","namespace","namespaceURI","docElem","ownerDocument","second","invert","callbackExpect","guid","support","require","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","configParams","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","CALLSTATS_SCRIPT_URL","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","longTasksStatsInterval","analytics","analyticsEventEmitter","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","supportsPerformanceObserver","performanceObserverStats","PerformanceObserverStats","JitsiConferenceEvents","startObserver","stopObserver","getLongTasksStats","removeLongTasksStatsListener","setSpeakerList","speakerList","values","isP2P","dispose","size","emit","callStats","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","addAnalyticsEventListener","removeAnalyticsEventListener","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","find","v","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","numGroups","ssrcGroups","primarySsrc","fidGroup","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferCodec","codecName","matchingPayloadTypes","rtp","codec","payload","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","H264","fmtp","item","config","includes","rtxApts","rtxPts","keepPts","MediaDirection","INACTIVE","rtcpFb","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","RECVONLY","SENDONLY","SENDRECV","usesAdapter","DEFAULT_CONSTRAINTS","video","height","ideal","max","width","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","stereo","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","audio","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","RTCUtils","Listenable","super","origAttachMediaStream","audioQuality","clearInterval","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","getStreamID","getTrackID","srcObject","res","rtcUtils","isDeviceChangeAvailable","getAudioOutputDevice","catch","ex","GlobalOnErrorHandler","callUnhandledRejectionHandler","promise","pcConstraints","isChromiumBased","optional","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","enumerateDevices","ds","supportsDeviceChangeEvent","navigator","mediaDevices","addEventListener","setInterval","then","devices","_getUserMedia","umDevices","Promise","resolve","reject","gumTimeout","timeoutExpired","JitsiTrackErrors","getUserMedia","jitsiError","_getDesktopMedia","isSupported","obtainStream","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","sourceType","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","Resolutions","resolution","isWebKitBased","cameraDeviceId","facingMode","CameraFacingMode","USER","autoGainControl","micDeviceId","echoCancellation","noiseSuppression","assign","channelCount","getConstraints","desktopStream","sourceId","desktopAudioTracks","desktopAudioStream","MediaStream","track","desktopVideoTracks","desktopVideoStream","videoType","VideoType","DESKTOP","avStream","audioTracks","audioStream","effects","videoTracks","videoStream","CAMERA","stopMediaStream","deviceType","isIosBrowser","mediaStream","getTracks","release","isDesktopSharingEnabled","setAudioOutputDevice","setDesktopSharingFrameRate","maxFps","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","some","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","callErrorHandler","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","getSettings","safeCounterIncrement","JitsiLocalTrack","rtcId","RTC","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","NONE","addListener","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","wsUrl","BridgeChannel","logError","msgType","_receiverVideoConstraints","sendNewReceiverVideoConstraintsMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","sendSetLastNMessage","FeatureFlags","isSourceNameSignalingEnabled","sendVideoTypeMessage","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","onCallEnded","setNewReceiverVideoConstraints","isOpen","setReceiverVideoConstraint","maxFrameHeight","setVideoType","sendSourceVideoType","sourceName","sendSourceVideoTypeMessage","selectEndpoints","ids","eventType","createPeerConnection","signaling","pcConfig","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","usesUnifiedPlan","sdpSemantics","forceTurnRelay","iceTransportPolicy","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLocalVideoTrack","localVideo","getLocalTracks","MediaType","getLocalAudioTrack","localAudio","getLocalEndpointId","myUserId","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","setVideoMute","videoTrack","removeLocalTrack","pos","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","sendEndpointStatsMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","msid","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpport","sctpmap","sctpAttrs","number","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","payloadType","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","ReflectOwnKeys","R","Reflect","ReflectApply","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","OPUS","VP8","VP9","removeEventListener","flags","_sourceNameSignaling","sourceNameSignaling","TRACK_ERROR_TO_MESSAGE_MAP","constraint","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","FAILURE_REGEX","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","FEATURE_JIGASI","FEATURE_E2EE","XMPP","token","roomName","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","xmppPing","hosts","enableWebsocketResume","serviceUrl","shard","websocketKeepAlive","websocketKeepAliveUrl","XmppConnection","createConnection","bosh","deploymentInfo","Events","CONN_SHARD_CHANGED","shard_changed","suspend_time","ping","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","caps","Caps","initFeaturesList","addFeature","disableRtx","supportsRTX","enableOpusRed","supportsAudioRed","enableRemb","enableTcc","enableLipSync","rayo","E2EEncryption","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","_maybeSendDeploymentInfoStat","_sysMessageHandler","_stropheConn","sendDiscoInfo","getStunAndTurnCredentials","_resetState","sendDeploymentInfo","getFeaturesAndIdentities","identities","PING","_processDiscoInfoIdentities","errmsg","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","lastFailedRawMessage","getLastFailedMessage","_parseConnectionFailedMessage","identity","avModerationComponentAddress","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","processLobbyFeatures","f","fr","endsWith","breakoutRoomsComponentAddress","_onPrivateMessage","exec","_onSystemMessage","foundIceServers","onReceiveStunAndTurnCredentials","parseDiscoInfo","attaching","anonymousdomain","configDomain","hostname","createRoom","onCreateResource","customDomain","roomjid","getRoomJid","mucNickname","randomHexString","emuc","muc","isRoomCreated","getJid","getJingleLog","getLog","getXmppLog","dial","pingDomain","getSessions","sessions","ev","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","iceConfig","jvb","iceServers","p2p","p2pStunServers","stunServers","MucConnectionPlugin","JingleConnectionPlugin","RayoConnectionPlugin","headersArr","trim","room","sendFacialExpressionEvent","expression","facialExpression","duration","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","force","acceptedStatuses","aprops","logObject","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","WRONG_STATE","DISPLAY_NAME_REQUIRED","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","_callStatsUserName","_machineId","_p8","_storage","jitsiLocalStorage","externalStorage","username","UsernameGenerator","generateUsername","generateCallStatsUserName","amDid","jitsiMeetId","generateJitsiMeetId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","RunningAverage","average","addNext","getAverage","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","rbuggyQSA","isIE","RegExp","whitespace","contains","adown","bup","compareDocumentPosition","rcssescape","fcssescape","ch","asCodePoint","escapeSelector","sel","hasDuplicate","sortOrder","compare","uniqueSort","duplicates","preferredDoc","msMatchesSelector","Expr","outermostContext","documentIsHTML","dirruns","done","classCache","createCache","tokenCache","compilerCache","nonnativeSelectorCache","identifier","pseudos","rwhitespace","rtrim","rcomma","rcombinators","rdescend","rpseudo","ridentifier","matchExpr","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","rinputs","rheader","rquickExpr","rsibling","runescape","funescape","nonHex","high","unloadHandler","setDocument","inDisabledFieldset","addCombinator","disabled","dir","selectorError","seed","nid","newSelector","newContext","getElementById","getElementsByClassName","testContext","tokenize","toSelector","querySelectorAll","qsaError","tokens","compiled","relative","compile","select","cache","cacheLength","markFunction","createInputPseudo","createButtonPseudo","createDisabledPseudo","isDisabled","createPositionalPseudo","argument","matchIndexes","subWindow","defaultView","top","expr","elements","matchesSelector","createPseudo","className","preFilter","excess","unquoted","attrId","nodeNameSelector","expectedNodeName","pattern","operator","check","what","_argument","simple","forward","ofType","_context","xml","outerCache","nodeIndex","parent","useCache","diff","lastChild","pseudo","setFilters","not","input","matcher","unmatched","lang","elemLang","focus","activeElement","hasFocus","href","tabIndex","enabled","checked","selected","selectedIndex","empty","nextSibling","button","_matchIndexes","lt","gt","nth","radio","checkbox","file","image","submit","parseOnly","soFar","preFilters","cached","combinator","base","skip","checkNonElements","doneName","oldCache","newCache","elementMatcher","matchers","condense","newUnmatched","mapped","setMatcher","postFilter","postFinder","postSelector","temp","matcherOut","preMap","postMap","preexisting","contexts","multipleContexts","matcherIn","matcherFromTokens","checkContext","leadingRelative","implicitRelative","matchContext","matchAnyContext","setMatchers","elementMatchers","bySet","byElement","superMatcher","outermost","matchedCount","setMatched","contextBackup","dirrunsUnique","matcherFromGroupMatchers","filters","access","chainable","emptyGet","bulk","_key","removeAttr","hooks","nType","prop","attrHooks","attrNames","rnothtmlwhite","val","isXML","lowercaseName","rfocusable","rclickable","removeProp","propFix","propHooks","tabindex","stripAndCollapse","winnow","qualifier","is","rneedsContext","rootjQuery","getClass","classesToArray","parseHTML","rsingleTag","ready","addClass","classes","cur","curValue","clazz","finalValue","removeClass","toggleClass","stateVal","classNames","hasClass","valueIsFunction","valHooks","option","one","optionSet","parseXML","argsTag","mapTag","objectTag","setTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","IE_PROTO","nativeObjectToString","reIsNative","Buffer","Uint8Array","propertyIsEnumerable","symToStringTag","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","isObject","isMasked","isFunction","baseKeys","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","LARGE_ARRAY_SIZE","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","SS_DEFAULT_FRAME_RATE","ScreenObtainer","_createObtainStreamMethod","isNWJS","JitsiMeetNW","obtainDesktopStream","isElectron","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","getName","_getAudioConstraints","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamType","screenShareAudio","audioConstraints","optionalConstraints","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","errorCallback","getDisplayMedia","frameRate","cursor","errorDetails","errorName","errorMsg","errorStack","getSourceNameForJitsiTrack","endpointId","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","SignalingLayer","getSSRCOwner","getPeerMediaInfo","owner","getPeerSourceInfo","getTrackSourceName","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","applicationVersion","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","isChrome","isOpera","isIExplorer","isSafari","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","configurable","writable","keyName","keyValue","JitsiLocalStorage","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","getConnectionPluginDefinition","ConnectionPluginListenable","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","CONN_STATUS_CHANGED","_options","pingOptions","_usesWebsocket","_rawInputTracker","LastSuccessTracker","startTracking","_resumeTask","ResumeTask","_deferredIQs","PingConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_status","OPEN","disco","_maybeStartWSKeepAlive","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","cancel","startInterval","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","streamManagement","getResumeToken","intervalWithJitter","url","fetch","responseShard","timeLeft","sendIQ2","sendBeacon","schedule","g","randomElement","randomHexDigit","randomAlphanumStr","SPEAKERS_AUDIO_LEVELS","funcTag","genTag","reFlags","cloneableTags","addMapEntry","pair","addSetEntry","arrayReduce","accumulator","initAccum","isHostObject","overArg","getPrototype","objectCreate","isArrayLikeObject","assignValue","baseClone","isDeep","isFull","initCloneArray","copyArray","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","copySymbols","baseAssign","cloneFunc","cloneArrayBuffer","dataView","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","props","arrayEach","subValue","arrayBuffer","newValue","HD_BITRATE","HD_SCALE_FACTOR","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","videoQuality","maxBitratesVideo","standardBitrates","low","standard","videoBitrates","encodingBitrates","localStreamEncodingsConfig","active","maxBitrate","scaleResolutionDownBy","_getStreamEncodings","localTrack","isSimulcastOn","isVideoTrack","ensureCorrectOrderOfSsrcs","description","parsedSdp","reorderedSsrcs","sources","RTCSessionDescription","findTransceiver","getOriginalStream","getTransceivers","sender","getTrackId","insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","findIndex","simulcast_03","simulcast","simulcastLine","addTrack","isInitiator","getTrack","transceiverInit","sendEncodings","addTransceiver","calculateEncodingsActiveState","localVideoTrack","newHeight","encoding","frameHeight","getVideoType","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","_originalStream","getStreamId","replaceTrack","oldTrack","newTrack","transceiver","setAudioTransferActive","setMediaTransferActive","setEncodings","parameters","getParameters","encodings","setParameters","transceivers","setVideoTransferActive","updateEncodingsResolution","every","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","nextTick","title","env","argv","versions","cwd","chdir","umask","Deferred","clearRejectTimeout","_timeout","setRejectTimeout","ms","ENVIRONMENT","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","1","2","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","bandwidth","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","maxMessageSize","sctpPort","sctpMapLines","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","MAIN_THREAD_FINISH","MAIN_THREAD_INIT","MAIN_THREAD_NEW_DATA_ARRIVED","WORKER_LIBFLAC_READY","WORKER_BLOB_READY","RecordingAdapter","exportRecordedData","setMuted","setMicDevice","_getAudioStream","SariskaMediaTransport","createLocalTracks","currentExecutingScript","relativeURL","loadCallback","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ParticipantConnectionStatus","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","isActive","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","internals","firstOptions","reviver","protoAction","scan","nodes","SyntaxError","__proto__","safeParse","ignoreError","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","DESKTOP_HIGH_FPS","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiConnection","ProxyConnectionService","createPresenterEffect","createRnnoiseProcessor","createScreenshotCaptureEffect","createVirtualBackgroundEffect","constants","recording","recordingConstants","sipVideoGW","VideoSIPGWConstants","transcriptionStatus","JitsiTranscriptionStatus","detection","DetectionEvents","JitsiMediaDevicesEvents","connectionQuality","ConnectionQualityEvents","e2eping","E2ePingEvents","JitsiConferenceErrors","errorTypes","logLevels","JitsiMediaDevices","initSDKConfig","Settings","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","emitEvent","mStream","currentlyAvailableMediaDevices","_setRealDeviceIdFromDeviceList","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","sampleRate","vadProcessor","TrackVADEmitter","createAudioMixer","AudioMixer","getActiveAudioDevice","isMultipleAudioInputSupported","isCollectingLocalStats","LocalStatsCollector","isLocalStatsSupported","lineno","colno","setNetworkInfo","createAnalyticsEvent","hint","contentHint","precallTest","util","AuthUtil","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","hasFeature","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","setLocalParticipantProperty","_onParticipantE2EEChannelReady","keyInfo","base64js","fromByteArray","keyIndex","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","toByteArray","lastKey","isEqual","oldValue","isE2EEEnabled","getFeatures","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","supportsUnifiedPlan","enableUnifiedOnChrome","disableSimulcast","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","startSilent","_signalingLayer","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","supportsRestartByTerminate","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","setTrackSourceName","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","addTracks","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","remove","newFingerprint","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","videoActive","setSenderVideoConstraints","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","removeRemoteTracks","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","offerIq","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","setRemoteDescription","createAnswer","answer","offer","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","pcVideoActiveChanged","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","connectionConfig","clientNode","conferenceConfig","enableLocalRecording","enableVirtualBackground","enableNoiseCancellation","enableTalkWhileMuted","enableNoAudioDetection","enableNoisyMicDetection","createVADProcessor","openBridgeChannel","hiddenDomain","enableLayerSuspension","pingInterval","ExternallyManagedKeyHandler","KeyHandler","sharedKey","setKey","e2eeCtx","encryptionKey","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","ManagedKeyHandler","testing","disableE2EE","supportsInsertableStreams","enableEncodedTransformSupport","supportsEncodedTransform","isEnabled","setEnabled","setEncryptionKey","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","timerWorkerScript","URL","createObjectURL","Blob","JitsiStreamPresenterEffect","videoDiv","firstVideoTrack","_canvas","_ctx","getContext","_desktopElement","_videoElement","_frameRate","autoplay","play","display","_onVideoFrameTimer","_renderVideo","_desktopStream","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","jitsiLocalTrack","startEffect","_videoFrameTimerWorker","Worker","postMessage","timeMs","captureStream","stopEffect","MediaStreamTrack","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","pcmSample","HEAPF32","_convertTo16BitPCM","f32Array","_rnnoise_destroy","getSampleLength","getRequiredPCMFrequency","_destroyed","calculateAudioFrameVAD","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","rnnoiseWasmInit","mod","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","_handleWorkerAction","_initScreenshotCapture","_streamWorker","desktopTrack","_streamHeight","_streamWidth","storedCanvasContext","getImageData","_storedImageData","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","ImageData","onloadeddata","models","segmentationDimensions","dispatch","tflite","wasmCheck","feature","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","ok","HEAPU8","_loadModel","downloadBlob","base64Url","download","click","AudioContext","webkitAudioContext","interval","intervalId","intervalMilis","suspend","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","animateLevel","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","cleanupAll","_setEnabled","_restartMediaSessions","_getMediaSessions","_setupSenderE2EEForTrack","findReceiverForTrack","handleReceiver","findSenderForTrack","handleSender","doesVideoMuteByStreamRemove","packet2JSON","children","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","ChatRoom","myroomjid","replaceParticipant","members","presMap","presHandlers","_removeConnListeners","joined","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","Moderator","enableLobby","lobby","Lobby","avModeration","AVModeration","breakoutRooms","BreakoutRooms","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","xns","statsId","userRegion","presenceUpdateTime","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","isBreakoutField","isBreakoutRoom","_setIsBreakoutRoom","breakoutMainRoomField","_setMainRoomJid","membersOnlyEnabled","meetingId","createNonAnonymousRoom","disableDiscoInfo","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","isReplaceParticipant","affiliation","isFocus","getFocusUserJid","isHiddenDomain","isTranscriber","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","botType","nick","statsID","_extractFeatures","newRole","_initFocus","memberOfThis","displayName","displayJids","restartByTerminateSupported","att","phone","pin","processNode","var","focusFeatures","setParticipantPropertyListener","tagHandlers","elementName","sendPrivateMessage","setSubject","subject","onParticipantLeft","skipEvents","onMucMemberLeft","onPresenceUnavailable","destroySelect","reasonSelect","isSelfPresence","isKick","membersKeys","actorSelect","actorNick","onMessage","txt","subjectText","stamp","dateParts","passwordSelect","onPresenceError","lobbyRoomNode","lobbyRoomJid","setAffiliation","grantIQ","kick","kickIQ","lockRoom","onError","onNotSupported","formsubmit","setMembersOnly","formToSubmit","addToPresence","addOrReplaceInPresence","matchingNodes","removeFromPresence","getFromPresence","addPresenceListener","removePresenceListener","handlerIdx","mucJid","isModerator","getMemberRole","peerJid","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","addVideoInfoToPresence","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","isSipGatewayEnabled","hangup","getLobby","getAVModeration","getBreakoutRooms","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","clean","leave","lobbyRoom","onMucLeft","doReject","ON","OFF","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","isWebRTCTrackMuted","isLocalAudioTrack","getTrackLabel","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","supportsReceiverStats","getMSID","trackId","procNodeSampleRate","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","_vadSampleSize","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","vadScore","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","AudioContextImpl","E2E_RTT_CHANGED","AbstractAudioContextAdapter","_sampleRate","_stream","_replaceMic","newStream","newSource","SignalingLayerImpl","ssrcOwners","chatRoom","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","SignalingEvents","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","setTrackMuteStatus","setTrackVideoType","existingName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","_facialExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","getFacialExpressions","setFacialExpressions","facialExpressions","addFacialExpression","_eventEmitter","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","IDENTITY_UPDATED","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","ratchet","material","textEncoder","TextEncoder","crypto","subtle","deriveBits","encode","importKey","keyBytes","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","category","rooms","externalFeatures","_addChatRoom","_removeChatRoom","CAPS","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","_identities","_features","VADAudioAnalyser","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","origin","errorIq","getRandomValues","msCrypto","rnds8","rng","byteToHex","buf","bth","rnds","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","RECORDING_FORMATS","ControllerState","freeze","IDLE","STARTING","RECORDING","STOPPING","FAILED","RecordingController","registerEvents","getParticipantsStats","_onStartCommand","_onStopCommand","_onPingCommand","_doStartRecording","_doStopRecording","_updateStats","_switchToNewSession","_registered","_conference","addCommandListener","sendCommandOnce","delegate","_onStateChanged","_onNotify","_onWarning","startRecording","switchFormat","removeCommand","sendCommand","sessionToken","_getRandomToken","_format","stopRecording","_currentSessionToken","downloadRecordedData","_adapters","filename","_micDeviceId","_state","_isMuted","newFormat","getLocalStats","currentSessionToken","isRecording","recordedBytes","recordedLength","recordingStats","Bourne","getProperty","isSelf","localId","_changeState","sessionManager","beginSegment","endSegment","messageKey","messageParams","_createRecordingAdapter","createSession","OggAdapter","FlacAdapter","WavAdapter","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","shouldEnable","MediaRecorder","ondataavailable","_saveMediaData","_wavBuffers","_wavLength","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","view","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","setUint8","inputBuffers","sampleCount","bufferCount","setInt16","floatTo16BitPCM","lng","_onWorkerMessage","_encoder","_stopPromiseResolver","command","_loadWebWorker","_initWorkerPromiseResolver","bps","blobUrl","webkitURL","revokeObjectURL","highPrecisionTime","timing","navigationStart","SessionEventType","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","_loadMetadata","dataStr","dataObject","_sessionsMetadata","_saveMetadata","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","getCurrentSegmentIndex","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","currentEvent","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","instantiateTrackRecorder","updateNames","originalStream","mimeType","dataEvent","removeTrack","recorderToRemove","getRecordingResults","getFileType","APP","JitsiConference","eventManager","JitsiConferenceEventManager","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","isVideoMutedByFocus","mutedVideoByFocusActor","wasStopped","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","handleSubtitles","recordingController","enableAnalytics","iAmRecorder","robot","_room","getParticipantsWithoutHidden","getStats","localTracksDuration","LocalTracksDuration","resourceCreator","setupXMPPListeners","codecSettings","disabledCodec","enforcePreferredCodec","jvbCodec","p2pCodec","codecSelection","CodecSelection","_statsCurrentId","statisticsId","callStatsUserName","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","E2ePing","setupRTCListeners","_registerRtcListeners","receiveVideoController","ReceiveVideoController","sendVideoController","SendVideoController","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","setupChatRoomListeners","setupStatisticsListeners","supportsVADDetection","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","vadNoiseDetection","VADNoiseDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","getPreferredCodec","transcriptionLanguage","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","_sendBridgeVideoTypeMessage","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getPerformanceStats","longTasksStats","eventId","removeCommandListener","sendTextMessage","sendPrivateTextMessage","nickKey","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","_setConference","muteHandler","audioLevelHandler","oldTrackBelongsToConference","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","videoTypeChanged","_setNewVideoType","_setTrackMuteStatus","_addLocalTrackAsUnmute","addAsUnmutePromises","_removeLocalTrackAsMute","removeAsMutePromises","getRole","isHidden","lock","unlock","selectParticipant","selectParticipants","lastN","isInteger","isVideoActive","_hidden","_properties","features_jigasi","getParticipantCount","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","onMemberJoined","fullJid","JitsiParticipant","setRole","setBotType","setFeatures","setIsReplacing","_updateFeatures","_maybeStartOrStopP2P","_onMucJoined","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","getBotType","mediaSessions","tracksToBeRemoved","onMemberKicked","kickedParticipantId","kickedParticipant","setIsReplaced","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","getConnectionTimes","removeLocalParticipantProperty","getLocalParticipantProperty","overallFeedback","detailedFeedback","getSsrcByTrack","getLocalSSRC","getSSRC","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onConferenceRestarted","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFacialExpression","setReceiverConstraints","videoConstraints","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","approve","avModerationReject","getLocalUser","pastMessage","translationLanguage","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","final","transcript","is_interim","stability","stable","unstable","finalText","fellowParticipantName","_identity","finalPaylaod","startLocalRecording","stopLocalRecording","startSIPVideoCall","stopSIPVideoCall","xmppListeners","chatRoomForwarder","EventEmitterForwarder","actor","recorderSession","AuthenticationEvents","myJid","ts","updated","dominant","previous","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","_onByteSentStatsReceived","maxTouchPoints","platform","isEngine","RTCRtpTransceiver","isTwa","matchMedia","_getSafariVersion","_getChromiumBasedVersion","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","ondevicechange","supportsLocalCandidateRttStatistics","PerformanceObserver","supportedEntryTypes","supportsRTTStatistics","supportsVP9","RTCRtpScriptTransform","RTCRtpSender","createEncodedStreams","ReadableStream","chromium","ua","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","92","93","versionName","94","vendor","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","statsInterval","longTasks","maxDuration","performanceStatsInterval","avgRatePerMinute","maxDurationMs","longTaskEventHandler","getEntries","task","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","localCandidateType","candidateType","remoteCandidateType","networkType","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameWidth","framesPerSecond","bytesSent","codecId","codecShortType","remoteSource","localVideoTracks","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","isReplacing","isReplaced","_jid","_id","_role","_statsID","_connectionStatus","_isReplacing","_isReplaced","getConference","jitsiTrack","isAudioMuted","_isMediaTypeMuted","newIsReplacing","newIsReplaced","newFeatures","_botType","newBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","kJitsiE2EE","E2EEcontext","baseUrl","ljm","workerUrl","workerBlob","_worker","operation","cleanup","receiverStreams","readableStream","readable","writableStream","senderStreams","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","newKey","stropheConnection","_resumeRetryN","_retryDelay","_cancelResume","_networkOnlineListener","_scheduleResume","_resumeTimeout","getJitterDelay","retryDelay","_resumeConnection","resumeToken","oldToken","retry","minDelay","LastRequestTracker","_lastSuccess","_lastFailedMessage","xmppConnection","originalRawInput","rawMessage","ConnectionPlugin","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","_addPingExecutionTimestamp","_lastServerCheck","pingIntervals","maxInterval","previousTS","currentInterval","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","_handleMessages","_rooms","createBreakoutRoom","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","_isBreakoutRoom","_mainRoomJid","getMainRoomJid","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","avatar","invitePassword","mainRoomJid","memberRoomJid","msgToSend","createExpBackoffTimer","step","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","_parseIceCandidates","parseCandidates","candidateAttrs","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","expandSourcesFromJson","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","me","v2Res","v2Err","v1Res","v1Err","iceservers","dict","credential","useTurnUdp","updateLog","_createSourceExtension","sourceCompactJson","_createSsrcGroupExtension","ssrcGroupCompactJson","_getSemantics","_getOrCreateRtpDescription","jsonMessageXml","audioRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","_queue","_processQueueTasks","_stopped","kill","previous_async","only_once","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","idle","priorityQueue","_compareTasks","sequence","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","signalingLayer","getState","addSources","removeSources","StropheLogger","logIncoming","logOutgoing","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","_getCodecMimeType","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","_onMediaSessionStared","mediaSession","currentCodec","selectedCodec","remoteParticipants","remote","peerMediaInfo","peerCodec","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","colibriClass","msgPayload","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","previousSpeakers","jsonObject","_setEffectInProgress","effect","_startStreamEffect","displaySurface","metadata","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","getDuration","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_stopStreamEffect","_switchStreamEffect","setEffect","cont","_queueSetMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","successCallback","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_capScreenshareBitrate","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","_senderVideoMaxHeight","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","stat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_getReceiversByEndpointIds","endpoints","receivers","remoteTrackIds","getReceivers","_setVideoType","setMute","getSynchronizationSources","endpointTrackMap","mediaTrack","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","onaddtrack","onremovetrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedTracks","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","_extractSSRCMap","groupsMap","groupSSRCs","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","_adjustRemoteMediaDirection","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","promiseChain","_assertTrackBelongs","webRtcStream","addStream","_removeStream","removeStream","doesBelong","defaultCodec","lowFps","isMediaStreamInPc","findSenderByKind","getSenders","negotiationNeeded","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","toUnifiedPlan","currentDescription","mungeRemoteDescription","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","interToneGap","rtpSender","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","_processLocalSSRCsMap","handleFailure","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","localEndpointId","_addMutedLocalVideoTracksToSDP","localVideos","isCamera","isInPeerConnection","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","generatedMsid","sessionDesc","audioMLine","_injectSourceNames","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","_sourceName","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","getSourceName","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","kSimulcastFormats","layers","targetRN","getTarget","millisSinceStart","videoQualitySettings","simulcastFormat","targetHeight","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","_rtc","startLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","p2pSession","layerSuspensionEnabled","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","INITIAL_STATE","startedTime","camera","FINAL_STATE","calculateLocalTrackDuration","newDuration","newLocalTracksDuration","createLocalTracksDurationEvent","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFacialExpressionAdd","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","jitsiConnection","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","pcConfigStub","roomStub","BUSY","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","getTokenAuthUrl","urlPattern","roleUpgrade","createNetworkInfoEvent","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","Module","readyPromiseResolve","moduleOverrides","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","arguments_","importScripts","readBinary","scriptDirectory","currentScript","responseType","wasmBinary","wasmMemory","WebAssembly","HEAP32","wasmTable","Table","ABORT","updateGlobalBufferAndViews","Int8Array","Int16Array","Int32Array","Uint16Array","Float64Array","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","Memory","DYNAMICTOP_PTR","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","RuntimeError","isDataURI","wasmBinaryFile","getBinary","emscripten_realloc_buffer","grow","___wasm_call_ctors","calledRun","asmLibraryArg","copyWithin","requestedSize","oldSize","multiple","cutDown","overGrownHeapSize","receiveInstance","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","binary","instantiate","instantiateStreaming","instantiateAsync","createWasm","doRun","postRun","preRun","runCaller","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","delta","colorDelta","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","readbuffer","read","scriptArgs","quit","print","printErr","thisProgram","noExitRuntime","A","E","I","M","TextDecoder","O","subarray","decode","C","HEAP8","HEAP16","HEAPU16","HEAPU32","HEAPF64","INITIAL_MEMORY","S","T","P","H","ne","W","L","onAbort","preloadedImages","preloadedAudios","D","B","N","G","X","hrtime","dateNow","Y","J","te","K","Q","V","strings","LOGNAME","PATH","PWD","HOME","LANG","languages","Z","mappings","printChar","varargs","getStr","get64","ee","onExit","re","hardwareConcurrency","asm","monitorRunDependencies","instantiateWasm","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","___errno_location","ae","onRuntimeInitialized","preInit","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","blacklist","syncWithURL","dontParse","paramStr","paramParts","firstParam","decoded","parseURLParams","jwt","parseJwt","errType","ANALYTICS_CONNECTION_DISCONNECTED","usernameOverride","passwordOverride","setToken","initJitsiConference","getLogs","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","reschedule","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","thrownErr","near","far","strophe_js","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","Timeout","clearFn","_clearFn","scope","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","enableConferenceFlag","order","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","validate","Instance","of","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","compactObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","webkitGetUserMedia","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","Event","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","getConfiguration","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","adapter","commonShim","browserShim","adapterFactory"],"mappings":"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K,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,EAAE,OAAO,IAAI,KAAK,IAAI,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,EAAE,OAAO,GAAG,KAAK,EAAE,OAAO,EAAE,KAAK,GAAG,OAA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","file":"sariska-media-transport.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 188);\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference is in progress of joining.\n */\nexport const CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\n\nexport const SUBTITLES_RECEIVED = 'conference.subtitles.received';\n\nexport const ANALYTICS_EVENT_RECEIVED = 'analytics.event.received'\n\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * Indicates that a message from the local user or from the Prosody backend\n * was received on the data channel.\n */\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n\n/**\n * The local participant was approved to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\n\n/**\n * The local participant was blocked to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_REJECTED = 'conference.av_moderation.rejected';\n\n/**\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n * or undefined if that participant has left the meeting.\n *\n * @param {options} event - {\n *     {boolean} enabled,\n *     {MediaType} mediaType,\n *     {JitsiParticipant} actor\n * }.\n */\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\n\n/**\n * AV Moderation, report for user being approved to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\n\n/**\n * AV Moderation, report for user being blocked to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected';\n\n/**\n * A new facial expression is added with its duration for a participant\n */\nexport const FACIAL_EXPRESSION_ADDED = 'conference.facial_expression.added';\n\n/**\n * Event fired when a participant is requested to join a given (breakout) room.\n */\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room';\n\n/**\n * Event fired when the breakout rooms data was updated.\n */\nexport const BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated';\n\n\nexport const TRACK_UPDATED = 'conference.track.updated';\n\n\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS: 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED: 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED: 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM: 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT: 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED: 'xmpp.breakout-rooms.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","export default Object.getPrototypeOf;\n","import arr from \"./arr.js\";\n\nexport default arr.slice;\n","import arr from \"./arr.js\";\n\n// Support: IE 11+\n// IE doesn't have Array#flat; provide a fallback.\nexport default arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n","import class2type from \"./class2type.js\";\n\nexport default class2type.hasOwnProperty;\n","import hasOwn from \"./hasOwn.js\";\n\nexport default hasOwn.toString;\n","import fnToString from \"./fnToString.js\";\n\nexport default fnToString.call( Object );\n","import document from '../var/document.js';\n\nvar preservedScriptAttributes = {\n\ttype: true,\n\tsrc: true,\n\tnonce: true,\n\tnoModule: true\n};\n\nfunction DOMEval( code, node, doc ) {\n\tdoc = doc || document;\n\n\tvar i,\n\t\tscript = doc.createElement( \"script\" );\n\n\tscript.text = code;\n\tif ( node ) {\n\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\tif ( node[ i ] ) {\n\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t}\n\t\t}\n\t}\n\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n}\n\nexport default DOMEval;\n","import arr from \"./var/arr.js\";\nimport getProto from \"./var/getProto.js\";\nimport slice from \"./var/slice.js\";\nimport flat from \"./var/flat.js\";\nimport push from \"./var/push.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport class2type from \"./var/class2type.js\";\nimport toString from \"./var/toString.js\";\nimport hasOwn from \"./var/hasOwn.js\";\nimport fnToString from \"./var/fnToString.js\";\nimport ObjectFunctionString from \"./var/ObjectFunctionString.js\";\nimport support from \"./var/support.js\";\nimport isWindow from \"./var/isWindow.js\";\nimport DOMEval from \"./core/DOMEval.js\";\nimport toType from \"./core/toType.js\";\n\nvar version = \"@VERSION\",\n\n    rhtmlSuffix = /HTML$/i,\n\n    // Define a local copy of jQuery\n    jQuery = function( selector, context ) {\n\n        // The jQuery object is actually just the init constructor 'enhanced'\n        // Need init if jQuery is called (just allow error to be thrown if not included)\n        return new jQuery.fn.init( selector, context );\n    };\n\njQuery.fn = jQuery.prototype = {\n\n    // The current version of jQuery being used\n    jquery: version,\n\n    constructor: jQuery,\n\n    // The default length of a jQuery object is 0\n    length: 0,\n\n    toArray: function() {\n        return slice.call( this );\n    },\n\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function( num ) {\n\n        // Return all the elements in a clean array\n        if ( num == null ) {\n            return slice.call( this );\n        }\n\n        // Return just the one element from the set\n        return num < 0 ? this[ num + this.length ] : this[ num ];\n    },\n\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function( elems ) {\n\n        // Build a new jQuery matched element set\n        var ret = jQuery.merge( this.constructor(), elems );\n\n        // Add the old object onto the stack (as a reference)\n        ret.prevObject = this;\n\n        // Return the newly-formed element set\n        return ret;\n    },\n\n    // Execute a callback for every element in the matched set.\n    each: function( callback ) {\n        return jQuery.each( this, callback );\n    },\n\n    map: function( callback ) {\n        return this.pushStack( jQuery.map( this, function( elem, i ) {\n            return callback.call( elem, i, elem );\n        } ) );\n    },\n\n    slice: function() {\n        return this.pushStack( slice.apply( this, arguments ) );\n    },\n\n    first: function() {\n        return this.eq( 0 );\n    },\n\n    last: function() {\n        return this.eq( -1 );\n    },\n\n    even: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return ( i + 1 ) % 2;\n        } ) );\n    },\n\n    odd: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return i % 2;\n        } ) );\n    },\n\n    eq: function( i ) {\n        var len = this.length,\n            j = +i + ( i < 0 ? len : 0 );\n        return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n    },\n\n    end: function() {\n        return this.prevObject || this.constructor();\n    }\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n    var options, name, src, copy, copyIsArray, clone,\n        target = arguments[ 0 ] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    // Handle a deep copy situation\n    if ( typeof target === \"boolean\" ) {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[ i ] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if ( typeof target !== \"object\" && typeof target !== \"function\" ) {\n        target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if ( i === length ) {\n        target = this;\n        i--;\n    }\n\n    for ( ; i < length; i++ ) {\n\n        // Only deal with non-null/undefined values\n        if ( ( options = arguments[ i ] ) != null ) {\n\n            // Extend the base object\n            for ( name in options ) {\n                copy = options[ name ];\n\n                // Prevent Object.prototype pollution\n                // Prevent never-ending loop\n                if ( name === \"__proto__\" || target === copy ) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n                    ( copyIsArray = Array.isArray( copy ) ) ) ) {\n                    src = target[ name ];\n\n                    // Ensure proper type for the source value\n                    if ( copyIsArray && !Array.isArray( src ) ) {\n                        clone = [];\n                    } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n                        clone = {};\n                    } else {\n                        clone = src;\n                    }\n                    copyIsArray = false;\n\n                    // Never move original objects, clone them\n                    target[ name ] = jQuery.extend( deep, clone, copy );\n\n                // Don't bring in undefined values\n                } else if ( copy !== undefined ) {\n                    target[ name ] = copy;\n                }\n            }\n        }\n    }\n\n    // Return the modified object\n    return target;\n};\n\njQuery.extend( {\n\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n\n    error: function( msg ) {\n        throw new Error( msg );\n    },\n\n    noop: function() {},\n\n    isPlainObject: function( obj ) {\n        var proto, Ctor;\n\n        // Detect obvious negatives\n        // Use toString instead of jQuery.type to catch host objects\n        if ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n            return false;\n        }\n\n        proto = getProto( obj );\n\n        // Objects with no prototype (e.g., `Object.create( null )`) are plain\n        if ( !proto ) {\n            return true;\n        }\n\n        // Objects with prototype are plain iff they were constructed by a global Object function\n        Ctor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n        return typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n    },\n\n    isEmptyObject: function( obj ) {\n        var name;\n\n        for ( name in obj ) {\n            return false;\n        }\n        return true;\n    },\n\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function( code, options, doc ) {\n        DOMEval( code, { nonce: options && options.nonce }, doc );\n    },\n\n    each: function( obj, callback ) {\n        var length, i = 0;\n\n        if ( isArrayLike( obj ) ) {\n            length = obj.length;\n            for ( ; i < length; i++ ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        } else {\n            for ( i in obj ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        }\n\n        return obj;\n    },\n\n\n    // Retrieve the text value of an array of DOM nodes\n    text: function( elem ) {\n        var node,\n            ret = \"\",\n            i = 0,\n            nodeType = elem.nodeType;\n\n        if ( !nodeType ) {\n\n            // If no nodeType, this is expected to be an array\n            while ( ( node = elem[ i++ ] ) ) {\n\n                // Do not traverse comment nodes\n                ret += jQuery.text( node );\n            }\n        } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n            return elem.textContent;\n        } else if ( nodeType === 3 || nodeType === 4 ) {\n            return elem.nodeValue;\n        }\n\n        // Do not include comment or processing instruction nodes\n\n        return ret;\n    },\n\n\n    // results is for internal usage only\n    makeArray: function( arr, results ) {\n        var ret = results || [];\n\n        if ( arr != null ) {\n            if ( isArrayLike( Object( arr ) ) ) {\n                jQuery.merge( ret,\n                    typeof arr === \"string\" ?\n                        [ arr ] : arr\n                );\n            } else {\n                push.call( ret, arr );\n            }\n        }\n\n        return ret;\n    },\n\n    inArray: function( elem, arr, i ) {\n        return arr == null ? -1 : indexOf.call( arr, elem, i );\n    },\n\n    isXMLDoc: function( elem ) {\n        var namespace = elem.namespaceURI,\n            docElem = ( elem.ownerDocument || elem ).documentElement;\n\n        // Assume HTML when documentElement doesn't yet exist, such as inside\n        // document fragments.\n        return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n    },\n\n    merge: function( first, second ) {\n        var len = +second.length,\n            j = 0,\n            i = first.length;\n\n        for ( ; j < len; j++ ) {\n            first[ i++ ] = second[ j ];\n        }\n\n        first.length = i;\n\n        return first;\n    },\n\n    grep: function( elems, callback, invert ) {\n        var callbackInverse,\n            matches = [],\n            i = 0,\n            length = elems.length,\n            callbackExpect = !invert;\n\n        // Go through the array, only saving the items\n        // that pass the validator function\n        for ( ; i < length; i++ ) {\n            callbackInverse = !callback( elems[ i ], i );\n            if ( callbackInverse !== callbackExpect ) {\n                matches.push( elems[ i ] );\n            }\n        }\n\n        return matches;\n    },\n\n    // arg is for internal usage only\n    map: function( elems, callback, arg ) {\n        var length, value,\n            i = 0,\n            ret = [];\n\n        // Go through the array, translating each of the items to their new values\n        if ( isArrayLike( elems ) ) {\n            length = elems.length;\n            for ( ; i < length; i++ ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n\n        // Go through every key on the object,\n        } else {\n            for ( i in elems ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n        }\n\n        // Flatten any nested arrays\n        return flat( ret );\n    },\n\n    // A global GUID counter for objects\n    guid: 1,\n\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n    jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n    function( _i, name ) {\n        class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n    } );\n\nfunction isArrayLike( obj ) {\n\n    var length = !!obj && obj.length,\n        type = toType( obj );\n\n    if ( typeof obj === \"function\" || isWindow( obj ) ) {\n        return false;\n    }\n\n    return type === \"array\" || length === 0 ||\n        typeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\nexport default jQuery;\n","export default function isWindow( obj ) {\n\treturn obj != null && obj === obj.window;\n}\n","// All support tests are defined in their respective modules.\nexport default {};\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options)  {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\nStatistics.analyticsEventEmitter = new EventEmitter();\n\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\n\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n    Statistics.analyticsEventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, eventName, properties);\n};\n\n\nStatistics.prototype.addAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.on(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\nStatistics.prototype.removeAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.removeListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\n\n\n\n\n\n\n\n\n\n\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * Enumeration of the media direction types.\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\n */\nconst MediaDirection = {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY: 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY: 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV: 'sendrecv'\n};\n\nmodule.exports = MediaDirection;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\n        // Safari.\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/* global $ */\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling}`);\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n}\n\nexport default new FeatureFlags();","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing,\n    name }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}&room=${name}`;\n    }\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard,\n        name\n    });\n}\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token, roomName) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            name: roomName,\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        // $(window).on('beforeunload unload', ev => {\n        //     this.disconnect(ev).catch(() => {\n        //         // ignore errors in order to not brake the unload.\n        //     });\n        // });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends facial expression to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFacialExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('facialExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.facialExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress\n            || from === this.breakoutRoomsComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            logObject.id = 'deployment_info';\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","export default window.document;\n","export default [];\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","function nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\n\nexport default nodeName;\n","import document from \"./document.js\";\n\nexport default document.documentElement;\n","import arr from \"./arr.js\";\n\nexport default arr.pop;\n","// https://www.w3.org/TR/css3-selectors/#whitespace\nexport default \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n","import document from \"./document.js\";\n\nexport default document.documentMode;\n","import isIE from '../var/isIE.js';\nimport whitespace from \"./var/whitespace.js\";\n\nvar rbuggyQSA = isIE && new RegExp(\n\n\t// Support: IE 9 - 11+\n\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\":enabled|:disabled|\" +\n\n\t// Support: IE 11+\n\t// IE 11 doesn't find elements on a `[name='']` query in some cases.\n\t// Adding a temporary attribute to the document before the selection works\n\t// around the issue.\n\t\"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\twhitespace + \"*(?:''|\\\"\\\")\"\n\n);\n\nexport default rbuggyQSA;\n","import jQuery from '../core.js';\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\tbup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\tadown.contains ?\n\t\t\tadown.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n","import jQuery from '../core.js';\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n","import arr from \"./arr.js\";\n\nexport default arr.sort;\n","import jQuery from '../core.js';\nimport document from '../var/document.js';\nimport sort from '../var/sort.js';\n\nlet hasDuplicate;\n\n// Document order sorting\nfunction sortOrder(a, b) {\n\n    // Flag for duplicate removal\n    if (a === b) {\n        hasDuplicate = true;\n\n        return 0;\n    }\n\n    // Sort on method existence if only one input has compareDocumentPosition\n    let compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n    if (compare) {\n        return compare;\n    }\n\n    // Calculate position if both inputs belong to the same document\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    compare = (a.ownerDocument || a) == (b.ownerDocument || b)\n        ? a.compareDocumentPosition(b)\n\n    // Otherwise we know they are disconnected\n        : 1;\n\n    // Disconnected nodes\n    if (compare & 1) {\n\n        // Choose the first element that is related to the document\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (a == document || a.ownerDocument == document\n\t\t\t&& jQuery.contains(document, a)) {\n            return -1;\n        }\n\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (b == document || b.ownerDocument == document\n\t\t\t&& jQuery.contains(document, b)) {\n            return 1;\n        }\n\n        // Maintain original order\n        return 0;\n    }\n\n    return compare & 4 ? -1 : 1;\n}\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function(results) {\n    let elem,\n        duplicates = [],\n        j = 0,\n        i = 0;\n\n    hasDuplicate = false;\n\n    sort.call(results, sortOrder);\n\n    if (hasDuplicate) {\n        while (elem = results[i++]) {\n            if (elem === results[i]) {\n                j = duplicates.push(i);\n            }\n        }\n        while (j--) {\n            results.splice(duplicates[j], 1);\n        }\n    }\n\n    return results;\n};\n","import jQuery from \"./core.js\";\nimport nodeName from \"./core/nodeName.js\";\nimport document from \"./var/document.js\";\nimport documentElement from \"./var/documentElement.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport pop from \"./var/pop.js\";\nimport push from \"./var/push.js\";\nimport whitespace from \"./selector/var/whitespace.js\";\nimport rbuggyQSA from \"./selector/rbuggyQSA.js\";\nimport isIE from \"./var/isIE.js\";\n\n// The following utils are attached directly to the jQuery object.\nimport \"./selector/contains.js\";\nimport \"./selector/escapeSelector.js\";\nimport \"./selector/uniqueSort.js\";\n\nvar preferredDoc = document,\n    matches = documentElement.matches || documentElement.msMatchesSelector;\n\n( function() {\n\nvar i,\n    Expr,\n    outermostContext,\n\n    // Local document vars\n    document,\n    documentElement,\n    documentIsHTML,\n\n    // Instance-specific data\n    expando = jQuery.expando,\n    dirruns = 0,\n    done = 0,\n    classCache = createCache(),\n    tokenCache = createCache(),\n    compilerCache = createCache(),\n    nonnativeSelectorCache = createCache(),\n\n    booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n        \"loop|multiple|open|readonly|required|scoped\",\n\n    // Regular expressions\n\n    // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n    // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n        // Operator (capture 2)\n        \"*([*^$|!~]?=)\" + whitespace +\n\n        // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n        \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n        whitespace + \"*\\\\]\",\n\n    pseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n        // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n        // 1. quoted (capture 3; capture 4 or capture 5)\n        \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n        // 2. simple (capture 6)\n        \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n        // 3. anything else (capture 2)\n        \".*\" +\n        \")\\\\)|)\",\n\n    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n    rtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n    rcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n    rcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n        whitespace + \"*\" ),\n    rdescend = new RegExp( whitespace + \"|>\" ),\n\n    rpseudo = new RegExp( pseudos ),\n    ridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n    matchExpr = {\n        ID: new RegExp( \"^#(\" + identifier + \")\" ),\n        CLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n        TAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n        ATTR: new RegExp( \"^\" + attributes ),\n        PSEUDO: new RegExp( \"^\" + pseudos ),\n        CHILD: new RegExp(\n            \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n                whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n                whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n        bool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n        // For use in libraries implementing .is()\n        // We use this for POS matching in `select`\n        needsContext: new RegExp( \"^\" + whitespace +\n            \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n            \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n    },\n\n    rinputs = /^(?:input|select|textarea|button)$/i,\n    rheader = /^h\\d$/i,\n\n    // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n    rsibling = /[+~]/,\n\n    // CSS escapes\n    // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n    funescape = function( escape, nonHex ) {\n        var high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n        if ( nonHex ) {\n\n            // Strip the backslash prefix from a non-hex escape sequence\n            return nonHex;\n        }\n\n        // Replace a hexadecimal escape sequence with the encoded Unicode code point\n        // Support: IE <=11+\n        // For values outside the Basic Multilingual Plane (BMP), manually construct a\n        // surrogate pair\n        return high < 0 ?\n            String.fromCharCode( high + 0x10000 ) :\n            String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n    },\n\n    // Used for iframes; see `setDocument`.\n    // Support: IE 9 - 11+\n    // Removing the function wrapper causes a \"Permission Denied\"\n    // error in IE.\n    unloadHandler = function() {\n        setDocument();\n    },\n\n    inDisabledFieldset = addCombinator(\n        function( elem ) {\n            return elem.disabled === true && nodeName( elem, \"fieldset\" );\n        },\n        { dir: \"parentNode\", next: \"legend\" }\n    );\n\nfunction selectorError( msg ) {\n    throw new Error( \"Syntax error, unrecognized expression: \" + msg );\n}\n\nfunction find( selector, context, results, seed ) {\n    var m, i, elem, nid, match, groups, newSelector,\n        newContext = context && context.ownerDocument,\n\n        // nodeType defaults to 9, since context defaults to document\n        nodeType = context ? context.nodeType : 9;\n\n    results = results || [];\n\n    // Return early from calls with invalid selector or context\n    if ( typeof selector !== \"string\" || !selector ||\n        nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n        return results;\n    }\n\n    // Try to shortcut find operations (as opposed to filters) in HTML documents\n    if ( !seed ) {\n        setDocument( context );\n        context = context || document;\n\n        if ( documentIsHTML ) {\n\n            // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n            // (excepting DocumentFragment context, where the methods don't exist)\n            if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n                // ID selector\n                if ( ( m = match[ 1 ] ) ) {\n\n                    // Document context\n                    if ( nodeType === 9 ) {\n                        if ( ( elem = context.getElementById( m ) ) ) {\n                            push.call( results, elem );\n                        }\n                        return results;\n\n                    // Element context\n                    } else {\n                        if ( newContext && ( elem = newContext.getElementById( m ) ) &&\n                            jQuery.contains( context, elem ) ) {\n\n                            push.call( results, elem );\n                            return results;\n                        }\n                    }\n\n                // Type selector\n                } else if ( match[ 2 ] ) {\n                    push.apply( results, context.getElementsByTagName( selector ) );\n                    return results;\n\n                // Class selector\n                } else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n                    push.apply( results, context.getElementsByClassName( m ) );\n                    return results;\n                }\n            }\n\n            // Take advantage of querySelectorAll\n            if ( !nonnativeSelectorCache[ selector + \" \" ] &&\n                ( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n                newSelector = selector;\n                newContext = context;\n\n                // qSA considers elements outside a scoping root when evaluating child or\n                // descendant combinators, which is not what we want.\n                // In such cases, we work around the behavior by prefixing every selector in the\n                // list with an ID selector referencing the scope context.\n                // The technique has to be used as well when a leading combinator is used\n                // as such selectors are not recognized by querySelectorAll.\n                // Thanks to Andrew Dupont for this technique.\n                if ( nodeType === 1 &&\n                    ( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n                    // Expand context for sibling selectors\n                    newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n                        context;\n\n                    // Outside of IE, if we're not changing the context we can\n                    // use :scope instead of an ID.\n                    if ( newContext !== context || isIE ) {\n\n                        // Capture the context ID, setting it first if necessary\n                        if ( ( nid = context.getAttribute( \"id\" ) ) ) {\n                            nid = jQuery.escapeSelector( nid );\n                        } else {\n                            context.setAttribute( \"id\", ( nid = expando ) );\n                        }\n                    }\n\n                    // Prefix every selector in the list\n                    groups = tokenize( selector );\n                    i = groups.length;\n                    while ( i-- ) {\n                        groups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n                            toSelector( groups[ i ] );\n                    }\n                    newSelector = groups.join( \",\" );\n                }\n\n                try {\n                    push.apply( results,\n                        newContext.querySelectorAll( newSelector )\n                    );\n                    return results;\n                } catch ( qsaError ) {\n                    nonnativeSelectorCache( selector, true );\n                } finally {\n                    if ( nid === expando ) {\n                        context.removeAttribute( \"id\" );\n                    }\n                }\n            }\n        }\n    }\n\n    // All others\n    return select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *  deleting the oldest entry\n */\nfunction createCache() {\n    var keys = [];\n\n    function cache( key, value ) {\n\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n            // Only keep the most recent entries\n            delete cache[ keys.shift() ];\n        }\n        return ( cache[ key + \" \" ] = value );\n    }\n    return cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n    fn[ expando ] = true;\n    return fn;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n    return function( elem ) {\n        return nodeName( elem, \"input\" ) && elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n    return function( elem ) {\n        return ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n            elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n    // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n    return function( elem ) {\n\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if ( \"form\" in elem ) {\n\n            // Check for inherited disabledness on relevant non-disabled elements:\n            // * listed form-associated elements in a disabled fieldset\n            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n            // * option elements in a disabled optgroup\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n            // All such elements have a \"form\" property.\n            if ( elem.parentNode && elem.disabled === false ) {\n\n                // Option elements defer to a parent optgroup if present\n                if ( \"label\" in elem ) {\n                    if ( \"label\" in elem.parentNode ) {\n                        return elem.parentNode.disabled === disabled;\n                    } else {\n                        return elem.disabled === disabled;\n                    }\n                }\n\n                // Support: IE 6 - 11+\n                // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n                return elem.isDisabled === disabled ||\n\n                    // Where there is no isDisabled, check manually\n                    elem.isDisabled !== !disabled &&\n                        inDisabledFieldset( elem ) === disabled;\n            }\n\n            return elem.disabled === disabled;\n\n        // Try to winnow out elements that can't be disabled before trusting the disabled property.\n        // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n        // even exist on them, let alone have a boolean value.\n        } else if ( \"label\" in elem ) {\n            return elem.disabled === disabled;\n        }\n\n        // Remaining elements are neither :enabled nor :disabled\n        return false;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n    return markFunction( function( argument ) {\n        argument = +argument;\n        return markFunction( function( seed, matches ) {\n            var j,\n                matchIndexes = fn( [], seed.length, argument ),\n                i = matchIndexes.length;\n\n            // Match elements found at the specified indexes\n            while ( i-- ) {\n                if ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n                    seed[ j ] = !( matches[ j ] = seed[ j ] );\n                }\n            }\n        } );\n    } );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n    return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n */\nfunction setDocument( node ) {\n    var subWindow,\n        doc = node ? node.ownerDocument || node : preferredDoc;\n\n    // Return early if doc is invalid or already selected\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( doc == document || doc.nodeType !== 9 ) {\n        return;\n    }\n\n    // Update global variables\n    document = doc;\n    documentElement = document.documentElement;\n    documentIsHTML = !jQuery.isXMLDoc( document );\n\n    // Support: IE 9 - 11+\n    // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( isIE && preferredDoc != document &&\n        ( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n        subWindow.addEventListener( \"unload\", unloadHandler );\n    }\n}\n\nfind.matches = function( expr, elements ) {\n    return find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n    setDocument( elem );\n\n    if ( documentIsHTML &&\n        !nonnativeSelectorCache[ expr + \" \" ] &&\n        ( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n        try {\n            return matches.call( elem, expr );\n        } catch ( e ) {\n            nonnativeSelectorCache( expr, true );\n        }\n    }\n\n    return find( expr, document, null, [ elem ] ).length > 0;\n};\n\nExpr = jQuery.expr = {\n\n    // Can be adjusted by the user\n    cacheLength: 50,\n\n    createPseudo: markFunction,\n\n    match: matchExpr,\n\n    find: {\n        ID: function( id, context ) {\n            if ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n                var elem = context.getElementById( id );\n                return elem ? [ elem ] : [];\n            }\n        },\n\n        TAG: function( tag, context ) {\n            if ( typeof context.getElementsByTagName !== \"undefined\" ) {\n                return context.getElementsByTagName( tag );\n\n                // DocumentFragment nodes don't have gEBTN\n            } else {\n                return context.querySelectorAll( tag );\n            }\n        },\n\n        CLASS: function( className, context ) {\n            if ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n                return context.getElementsByClassName( className );\n            }\n        }\n    },\n\n    relative: {\n        \">\": { dir: \"parentNode\", first: true },\n        \" \": { dir: \"parentNode\" },\n        \"+\": { dir: \"previousSibling\", first: true },\n        \"~\": { dir: \"previousSibling\" }\n    },\n\n    preFilter: {\n        ATTR: function( match ) {\n            match[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n            // Move the given value to match[3] whether quoted or unquoted\n            match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n                .replace( runescape, funescape );\n\n            if ( match[ 2 ] === \"~=\" ) {\n                match[ 3 ] = \" \" + match[ 3 ] + \" \";\n            }\n\n            return match.slice( 0, 4 );\n        },\n\n        CHILD: function( match ) {\n\n            /* matches from matchExpr[\"CHILD\"]\n                1 type (only|nth|...)\n                2 what (child|of-type)\n                3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n                4 xn-component of xn+y argument ([+-]?\\d*n|)\n                5 sign of xn-component\n                6 x of xn-component\n                7 sign of y-component\n                8 y of y-component\n            */\n            match[ 1 ] = match[ 1 ].toLowerCase();\n\n            if ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n                // nth-* requires argument\n                if ( !match[ 3 ] ) {\n                    selectorError( match[ 0 ] );\n                }\n\n                // numeric x and y parameters for Expr.filter.CHILD\n                // remember that false/true cast respectively to 0/1\n                match[ 4 ] = +( match[ 4 ] ?\n                    match[ 5 ] + ( match[ 6 ] || 1 ) :\n                    2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n                );\n                match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n            // other types prohibit arguments\n            } else if ( match[ 3 ] ) {\n                selectorError( match[ 0 ] );\n            }\n\n            return match;\n        },\n\n        PSEUDO: function( match ) {\n            var excess,\n                unquoted = !match[ 6 ] && match[ 2 ];\n\n            if ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n                return null;\n            }\n\n            // Accept quoted arguments as-is\n            if ( match[ 3 ] ) {\n                match[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n            // Strip excess characters from unquoted arguments\n            } else if ( unquoted && rpseudo.test( unquoted ) &&\n\n                // Get excess from tokenize (recursively)\n                ( excess = tokenize( unquoted, true ) ) &&\n\n                // advance to the next closing parenthesis\n                ( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n                // excess is a negative index\n                match[ 0 ] = match[ 0 ].slice( 0, excess );\n                match[ 2 ] = unquoted.slice( 0, excess );\n            }\n\n            // Return only captures needed by the pseudo filter method (type and argument)\n            return match.slice( 0, 3 );\n        }\n    },\n\n    filter: {\n        ID: function( id ) {\n            var attrId = id.replace( runescape, funescape );\n            return function( elem ) {\n                return elem.getAttribute( \"id\" ) === attrId;\n            };\n        },\n\n        TAG: function( nodeNameSelector ) {\n            var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n            return nodeNameSelector === \"*\" ?\n\n                function() {\n                    return true;\n                } :\n\n                function( elem ) {\n                    return nodeName( elem, expectedNodeName );\n                };\n        },\n\n        CLASS: function( className ) {\n            var pattern = classCache[ className + \" \" ];\n\n            return pattern ||\n                ( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n                    \"(\" + whitespace + \"|$)\" ) ) &&\n                classCache( className, function( elem ) {\n                    return pattern.test(\n                        typeof elem.className === \"string\" && elem.className ||\n                            typeof elem.getAttribute !== \"undefined\" &&\n                                elem.getAttribute( \"class\" ) ||\n                            \"\"\n                    );\n                } );\n        },\n\n        ATTR: function( name, operator, check ) {\n            return function( elem ) {\n                var result = jQuery.attr( elem, name );\n\n                if ( result == null ) {\n                    return operator === \"!=\";\n                }\n                if ( !operator ) {\n                    return true;\n                }\n\n                result += \"\";\n\n                if ( operator === \"=\" ) {\n                    return result === check;\n                }\n                if ( operator === \"!=\" ) {\n                    return result !== check;\n                }\n                if ( operator === \"^=\" ) {\n                    return check && result.indexOf( check ) === 0;\n                }\n                if ( operator === \"*=\" ) {\n                    return check && result.indexOf( check ) > -1;\n                }\n                if ( operator === \"$=\" ) {\n                    return check && result.slice( -check.length ) === check;\n                }\n                if ( operator === \"~=\" ) {\n                    return ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n                        .indexOf( check ) > -1;\n                }\n                if ( operator === \"|=\" ) {\n                    return result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n                }\n\n                return false;\n            };\n        },\n\n        CHILD: function( type, what, _argument, first, last ) {\n            var simple = type.slice( 0, 3 ) !== \"nth\",\n                forward = type.slice( -4 ) !== \"last\",\n                ofType = what === \"of-type\";\n\n            return first === 1 && last === 0 ?\n\n                // Shortcut for :nth-*(n)\n                function( elem ) {\n                    return !!elem.parentNode;\n                } :\n\n                function( elem, _context, xml ) {\n                    var cache, outerCache, node, nodeIndex, start,\n                        dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                        parent = elem.parentNode,\n                        name = ofType && elem.nodeName.toLowerCase(),\n                        useCache = !xml && !ofType,\n                        diff = false;\n\n                    if ( parent ) {\n\n                        // :(first|last|only)-(child|of-type)\n                        if ( simple ) {\n                            while ( dir ) {\n                                node = elem;\n                                while ( ( node = node[ dir ] ) ) {\n                                    if ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) {\n\n                                        return false;\n                                    }\n                                }\n\n                                // Reverse direction for :only-* (if we haven't yet done so)\n                                start = dir = type === \"only\" && !start && \"nextSibling\";\n                            }\n                            return true;\n                        }\n\n                        start = [ forward ? parent.firstChild : parent.lastChild ];\n\n                        // non-xml :nth-child(...) stores cache data on `parent`\n                        if ( forward && useCache ) {\n\n                            // Seek `elem` from a previously-cached index\n                            outerCache = parent[ expando ] || ( parent[ expando ] = {} );\n                            cache = outerCache[ type ] || [];\n                            nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                            diff = nodeIndex && cache[ 2 ];\n                            node = nodeIndex && parent.childNodes[ nodeIndex ];\n\n                            while ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n                                // Fallback to seeking `elem` from the start\n                                ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                // When found, cache indexes on `parent` and break\n                                if ( node.nodeType === 1 && ++diff && node === elem ) {\n                                    outerCache[ type ] = [ dirruns, nodeIndex, diff ];\n                                    break;\n                                }\n                            }\n\n                        } else {\n\n                            // Use previously-cached element index if available\n                            if ( useCache ) {\n                                outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n                                cache = outerCache[ type ] || [];\n                                nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                                diff = nodeIndex;\n                            }\n\n                            // xml :nth-child(...)\n                            // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n                            if ( diff === false ) {\n\n                                // Use the same loop as above to seek `elem` from the start\n                                while ( ( node = ++nodeIndex && node && node[ dir ] ||\n                                    ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                    if ( ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) &&\n                                        ++diff ) {\n\n                                        // Cache the index of each encountered element\n                                        if ( useCache ) {\n                                            outerCache = node[ expando ] ||\n                                                ( node[ expando ] = {} );\n                                            outerCache[ type ] = [ dirruns, diff ];\n                                        }\n\n                                        if ( node === elem ) {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        // Incorporate the offset, then check against cycle size\n                        diff -= last;\n                        return diff === first || ( diff % first === 0 && diff / first >= 0 );\n                    }\n                };\n        },\n\n        PSEUDO: function( pseudo, argument ) {\n\n            // pseudo-class names are case-insensitive\n            // https://www.w3.org/TR/selectors/#pseudo-classes\n            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n            // Remember that setFilters inherits from pseudos\n            var args,\n                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n                    selectorError( \"unsupported pseudo: \" + pseudo );\n\n            // The user may use createPseudo to indicate that\n            // arguments are needed to create the filter function\n            // just as jQuery does\n            if ( fn[ expando ] ) {\n                return fn( argument );\n            }\n\n            // But maintain support for old signatures\n            if ( fn.length > 1 ) {\n                args = [ pseudo, pseudo, \"\", argument ];\n                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n                    markFunction( function( seed, matches ) {\n                        var idx,\n                            matched = fn( seed, argument ),\n                            i = matched.length;\n                        while ( i-- ) {\n                            idx = indexOf.call( seed, matched[ i ] );\n                            seed[ idx ] = !( matches[ idx ] = matched[ i ] );\n                        }\n                    } ) :\n                    function( elem ) {\n                        return fn( elem, 0, args );\n                    };\n            }\n\n            return fn;\n        }\n    },\n\n    pseudos: {\n\n        // Potentially complex pseudos\n        not: markFunction( function( selector ) {\n\n            // Trim the selector passed to compile\n            // to avoid treating leading and trailing\n            // spaces as combinators\n            var input = [],\n                results = [],\n                matcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n            return matcher[ expando ] ?\n                markFunction( function( seed, matches, _context, xml ) {\n                    var elem,\n                        unmatched = matcher( seed, null, xml, [] ),\n                        i = seed.length;\n\n                    // Match elements unmatched by `matcher`\n                    while ( i-- ) {\n                        if ( ( elem = unmatched[ i ] ) ) {\n                            seed[ i ] = !( matches[ i ] = elem );\n                        }\n                    }\n                } ) :\n                function( elem, _context, xml ) {\n                    input[ 0 ] = elem;\n                    matcher( input, null, xml, results );\n\n                    // Don't keep the element (issue #299)\n                    input[ 0 ] = null;\n                    return !results.pop();\n                };\n        } ),\n\n        has: markFunction( function( selector ) {\n            return function( elem ) {\n                return find( selector, elem ).length > 0;\n            };\n        } ),\n\n        contains: markFunction( function( text ) {\n            text = text.replace( runescape, funescape );\n            return function( elem ) {\n                return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n            };\n        } ),\n\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // https://www.w3.org/TR/selectors/#lang-pseudo\n        lang: markFunction( function( lang ) {\n\n            // lang value must be a valid identifier\n            if ( !ridentifier.test( lang || \"\" ) ) {\n                selectorError( \"unsupported lang: \" + lang );\n            }\n            lang = lang.replace( runescape, funescape ).toLowerCase();\n            return function( elem ) {\n                var elemLang;\n                do {\n                    if ( ( elemLang = documentIsHTML ?\n                        elem.lang :\n                        elem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n                        elemLang = elemLang.toLowerCase();\n                        return elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n                    }\n                } while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n                return false;\n            };\n        } ),\n\n        // Miscellaneous\n        target: function( elem ) {\n            var hash = window.location && window.location.hash;\n            return hash && hash.slice( 1 ) === elem.id;\n        },\n\n        root: function( elem ) {\n            return elem === documentElement;\n        },\n\n        focus: function( elem ) {\n            return elem === document.activeElement &&\n                document.hasFocus() &&\n                !!( elem.type || elem.href || ~elem.tabIndex );\n        },\n\n        // Boolean properties\n        enabled: createDisabledPseudo( false ),\n        disabled: createDisabledPseudo( true ),\n\n        checked: function( elem ) {\n\n            // In CSS3, :checked should return both checked and selected elements\n            // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n            return ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n                ( nodeName( elem, \"option\" ) && !!elem.selected );\n        },\n\n        selected: function( elem ) {\n\n            // Support: IE <=11+\n            // Accessing the selectedIndex property\n            // forces the browser to treat the default option as\n            // selected when in an optgroup.\n            if ( isIE && elem.parentNode ) {\n                // eslint-disable-next-line no-unused-expressions\n                elem.parentNode.selectedIndex;\n            }\n\n            return elem.selected === true;\n        },\n\n        // Contents\n        empty: function( elem ) {\n\n            // https://www.w3.org/TR/selectors/#empty-pseudo\n            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n            //   but not by others (comment: 8; processing instruction: 7; etc.)\n            // nodeType < 6 works because attributes (2) do not appear as children\n            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n                if ( elem.nodeType < 6 ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        parent: function( elem ) {\n            return !Expr.pseudos.empty( elem );\n        },\n\n        // Element/input types\n        header: function( elem ) {\n            return rheader.test( elem.nodeName );\n        },\n\n        input: function( elem ) {\n            return rinputs.test( elem.nodeName );\n        },\n\n        button: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n                nodeName( elem, \"button\" );\n        },\n\n        text: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"text\";\n        },\n\n        // Position-in-collection\n        first: createPositionalPseudo( function() {\n            return [ 0 ];\n        } ),\n\n        last: createPositionalPseudo( function( _matchIndexes, length ) {\n            return [ length - 1 ];\n        } ),\n\n        eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n            return [ argument < 0 ? argument + length : argument ];\n        } ),\n\n        even: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 0;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        odd: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 1;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        lt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i;\n\n            if ( argument < 0 ) {\n                i = argument + length;\n            } else if ( argument > length ) {\n                i = length;\n            } else {\n                i = argument;\n            }\n\n            for ( ; --i >= 0; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        gt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i = argument < 0 ? argument + length : argument;\n            for ( ; ++i < length; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } )\n    }\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n    Expr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n    Expr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n    var matched, match, tokens, type,\n        soFar, groups, preFilters,\n        cached = tokenCache[ selector + \" \" ];\n\n    if ( cached ) {\n        return parseOnly ? 0 : cached.slice( 0 );\n    }\n\n    soFar = selector;\n    groups = [];\n    preFilters = Expr.preFilter;\n\n    while ( soFar ) {\n\n        // Comma and first run\n        if ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n            if ( match ) {\n\n                // Don't consume trailing commas as valid\n                soFar = soFar.slice( match[ 0 ].length ) || soFar;\n            }\n            groups.push( ( tokens = [] ) );\n        }\n\n        matched = false;\n\n        // Combinators\n        if ( ( match = rcombinators.exec( soFar ) ) ) {\n            matched = match.shift();\n            tokens.push( {\n                value: matched,\n\n                // Cast descendant combinators to space\n                type: match[ 0 ].replace( rtrim, \" \" )\n            } );\n            soFar = soFar.slice( matched.length );\n        }\n\n        // Filters\n        for ( type in Expr.filter ) {\n            if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n                ( match = preFilters[ type ]( match ) ) ) ) {\n                matched = match.shift();\n                tokens.push( {\n                    value: matched,\n                    type: type,\n                    matches: match\n                } );\n                soFar = soFar.slice( matched.length );\n            }\n        }\n\n        if ( !matched ) {\n            break;\n        }\n    }\n\n    // Return the length of the invalid excess\n    // if we're just parsing\n    // Otherwise, throw an error or return tokens\n    if ( parseOnly ) {\n        return soFar.length;\n    }\n\n    return soFar ?\n        selectorError( selector ) :\n\n        // Cache the tokens\n        tokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n    var i = 0,\n        len = tokens.length,\n        selector = \"\";\n    for ( ; i < len; i++ ) {\n        selector += tokens[ i ].value;\n    }\n    return selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n    var dir = combinator.dir,\n        skip = combinator.next,\n        key = skip || dir,\n        checkNonElements = base && key === \"parentNode\",\n        doneName = done++;\n\n    return combinator.first ?\n\n        // Check against closest ancestor/preceding element\n        function( elem, context, xml ) {\n            while ( ( elem = elem[ dir ] ) ) {\n                if ( elem.nodeType === 1 || checkNonElements ) {\n                    return matcher( elem, context, xml );\n                }\n            }\n            return false;\n        } :\n\n        // Check against all ancestor/preceding elements\n        function( elem, context, xml ) {\n            var oldCache, outerCache,\n                newCache = [ dirruns, doneName ];\n\n            // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n            if ( xml ) {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        if ( matcher( elem, context, xml ) ) {\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n                        if ( skip && nodeName( elem, skip ) ) {\n                            elem = elem[ dir ] || elem;\n                        } else if ( ( oldCache = outerCache[ key ] ) &&\n                            oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n                            // Assign to newCache so results back-propagate to previous elements\n                            return ( newCache[ 2 ] = oldCache[ 2 ] );\n                        } else {\n\n                            // Reuse newcache so results back-propagate to previous elements\n                            outerCache[ key ] = newCache;\n\n                            // A match means we're done; a fail means we have to keep checking\n                            if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n}\n\nfunction elementMatcher( matchers ) {\n    return matchers.length > 1 ?\n        function( elem, context, xml ) {\n            var i = matchers.length;\n            while ( i-- ) {\n                if ( !matchers[ i ]( elem, context, xml ) ) {\n                    return false;\n                }\n            }\n            return true;\n        } :\n        matchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n    var i = 0,\n        len = contexts.length;\n    for ( ; i < len; i++ ) {\n        find( selector, contexts[ i ], results );\n    }\n    return results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n    var elem,\n        newUnmatched = [],\n        i = 0,\n        len = unmatched.length,\n        mapped = map != null;\n\n    for ( ; i < len; i++ ) {\n        if ( ( elem = unmatched[ i ] ) ) {\n            if ( !filter || filter( elem, context, xml ) ) {\n                newUnmatched.push( elem );\n                if ( mapped ) {\n                    map.push( i );\n                }\n            }\n        }\n    }\n\n    return newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n    if ( postFilter && !postFilter[ expando ] ) {\n        postFilter = setMatcher( postFilter );\n    }\n    if ( postFinder && !postFinder[ expando ] ) {\n        postFinder = setMatcher( postFinder, postSelector );\n    }\n    return markFunction( function( seed, results, context, xml ) {\n        var temp, i, elem, matcherOut,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n\n            // Get initial elements from seed or context\n            elems = seed ||\n                multipleContexts( selector || \"*\",\n                    context.nodeType ? [ context ] : context, [] ),\n\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n            matcherIn = preFilter && ( seed || !selector ) ?\n                condense( elems, preMap, preFilter, context, xml ) :\n                elems;\n\n        if ( matcher ) {\n\n            // If we have a postFinder, or filtered seed, or non-seed postFilter\n            // or preexisting results,\n            matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n                // ...intermediate processing is necessary\n                [] :\n\n                // ...otherwise use results directly\n                results;\n\n            // Find primary matches\n            matcher( matcherIn, matcherOut, context, xml );\n        } else {\n            matcherOut = matcherIn;\n        }\n\n        // Apply postFilter\n        if ( postFilter ) {\n            temp = condense( matcherOut, postMap );\n            postFilter( temp, [], context, xml );\n\n            // Un-match failing elements by moving them back to matcherIn\n            i = temp.length;\n            while ( i-- ) {\n                if ( ( elem = temp[ i ] ) ) {\n                    matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n                }\n            }\n        }\n\n        if ( seed ) {\n            if ( postFinder || preFilter ) {\n                if ( postFinder ) {\n\n                    // Get the final matcherOut by condensing this intermediate into postFinder contexts\n                    temp = [];\n                    i = matcherOut.length;\n                    while ( i-- ) {\n                        if ( ( elem = matcherOut[ i ] ) ) {\n\n                            // Restore matcherIn since elem is not yet a final match\n                            temp.push( ( matcherIn[ i ] = elem ) );\n                        }\n                    }\n                    postFinder( null, ( matcherOut = [] ), temp, xml );\n                }\n\n                // Move matched elements from seed to results to keep them synchronized\n                i = matcherOut.length;\n                while ( i-- ) {\n                    if ( ( elem = matcherOut[ i ] ) &&\n                        ( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n                        seed[ temp ] = !( results[ temp ] = elem );\n                    }\n                }\n            }\n\n        // Add elements to results, through postFinder if defined\n        } else {\n            matcherOut = condense(\n                matcherOut === results ?\n                    matcherOut.splice( preexisting, matcherOut.length ) :\n                    matcherOut\n            );\n            if ( postFinder ) {\n                postFinder( null, results, matcherOut, xml );\n            } else {\n                push.apply( results, matcherOut );\n            }\n        }\n    } );\n}\n\nfunction matcherFromTokens( tokens ) {\n    var checkContext, matcher, j,\n        len = tokens.length,\n        leadingRelative = Expr.relative[ tokens[ 0 ].type ],\n        implicitRelative = leadingRelative || Expr.relative[ \" \" ],\n        i = leadingRelative ? 1 : 0,\n\n        // The foundational matcher ensures that elements are reachable from top-level context(s)\n        matchContext = addCombinator( function( elem ) {\n            return elem === checkContext;\n        }, implicitRelative, true ),\n        matchAnyContext = addCombinator( function( elem ) {\n            return indexOf.call( checkContext, elem ) > -1;\n        }, implicitRelative, true ),\n        matchers = [ function( elem, context, xml ) {\n            var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n                ( checkContext = context ).nodeType ?\n                    matchContext( elem, context, xml ) :\n                    matchAnyContext( elem, context, xml ) );\n\n            // Avoid hanging onto element (issue #299)\n            checkContext = null;\n            return ret;\n        } ];\n\n    for ( ; i < len; i++ ) {\n        if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n            matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n        } else {\n            matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n            // Return special upon seeing a positional matcher\n            if ( matcher[ expando ] ) {\n\n                // Find the next relative operator (if any) for proper handling\n                j = ++i;\n                for ( ; j < len; j++ ) {\n                    if ( Expr.relative[ tokens[ j ].type ] ) {\n                        break;\n                    }\n                }\n                return setMatcher(\n                    i > 1 && elementMatcher( matchers ),\n                    i > 1 && toSelector(\n\n                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n                        tokens.slice( 0, i - 1 )\n                            .concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n                    ).replace( rtrim, \"$1\" ),\n                    matcher,\n                    i < j && matcherFromTokens( tokens.slice( i, j ) ),\n                    j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n                    j < len && toSelector( tokens )\n                );\n            }\n            matchers.push( matcher );\n        }\n    }\n\n    return elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n    var bySet = setMatchers.length > 0,\n        byElement = elementMatchers.length > 0,\n        superMatcher = function( seed, context, xml, results, outermost ) {\n            var elem, j, matcher,\n                matchedCount = 0,\n                i = \"0\",\n                unmatched = seed && [],\n                setMatched = [],\n                contextBackup = outermostContext,\n\n                // We must always have either seed elements or outermost context\n                elems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n                // Use integer dirruns iff this is the outermost matcher\n                dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 );\n\n            if ( outermost ) {\n\n                // Support: IE 11+\n                // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                // two documents; shallow comparisons work.\n                // eslint-disable-next-line eqeqeq\n                outermostContext = context == document || context || outermost;\n            }\n\n            // Add elements passing elementMatchers directly to results\n            for ( ; ( elem = elems[ i ] ) != null; i++ ) {\n                if ( byElement && elem ) {\n                    j = 0;\n\n                    // Support: IE 11+\n                    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                    // two documents; shallow comparisons work.\n                    // eslint-disable-next-line eqeqeq\n                    if ( !context && elem.ownerDocument != document ) {\n                        setDocument( elem );\n                        xml = !documentIsHTML;\n                    }\n                    while ( ( matcher = elementMatchers[ j++ ] ) ) {\n                        if ( matcher( elem, context || document, xml ) ) {\n                            push.call( results, elem );\n                            break;\n                        }\n                    }\n                    if ( outermost ) {\n                        dirruns = dirrunsUnique;\n                    }\n                }\n\n                // Track unmatched elements for set filters\n                if ( bySet ) {\n\n                    // They will have gone through all possible matchers\n                    if ( ( elem = !matcher && elem ) ) {\n                        matchedCount--;\n                    }\n\n                    // Lengthen the array for every element, matched or not\n                    if ( seed ) {\n                        unmatched.push( elem );\n                    }\n                }\n            }\n\n            // `i` is now the count of elements visited above, and adding it to `matchedCount`\n            // makes the latter nonnegative.\n            matchedCount += i;\n\n            // Apply set filters to unmatched elements\n            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n            // no element matchers and no seed.\n            // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n            // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n            // numerically zero.\n            if ( bySet && i !== matchedCount ) {\n                j = 0;\n                while ( ( matcher = setMatchers[ j++ ] ) ) {\n                    matcher( unmatched, setMatched, context, xml );\n                }\n\n                if ( seed ) {\n\n                    // Reintegrate element matches to eliminate the need for sorting\n                    if ( matchedCount > 0 ) {\n                        while ( i-- ) {\n                            if ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n                                setMatched[ i ] = pop.call( results );\n                            }\n                        }\n                    }\n\n                    // Discard index placeholder values to get only actual matches\n                    setMatched = condense( setMatched );\n                }\n\n                // Add matches to results\n                push.apply( results, setMatched );\n\n                // Seedless set matches succeeding multiple successful matchers stipulate sorting\n                if ( outermost && !seed && setMatched.length > 0 &&\n                    ( matchedCount + setMatchers.length ) > 1 ) {\n\n                    jQuery.uniqueSort( results );\n                }\n            }\n\n            // Override manipulation of globals by nested matchers\n            if ( outermost ) {\n                dirruns = dirrunsUnique;\n                outermostContext = contextBackup;\n            }\n\n            return unmatched;\n        };\n\n    return bySet ?\n        markFunction( superMatcher ) :\n        superMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n    var i,\n        setMatchers = [],\n        elementMatchers = [],\n        cached = compilerCache[ selector + \" \" ];\n\n    if ( !cached ) {\n\n        // Generate a function of recursive functions that can be used to check each element\n        if ( !match ) {\n            match = tokenize( selector );\n        }\n        i = match.length;\n        while ( i-- ) {\n            cached = matcherFromTokens( match[ i ] );\n            if ( cached[ expando ] ) {\n                setMatchers.push( cached );\n            } else {\n                elementMatchers.push( cached );\n            }\n        }\n\n        // Cache the compiled function\n        cached = compilerCache( selector,\n            matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n        // Save selector and tokenization\n        cached.selector = selector;\n    }\n    return cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n    var i, tokens, token, type, find,\n        compiled = typeof selector === \"function\" && selector,\n        match = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n    results = results || [];\n\n    // Try to minimize operations if there is only one selector in the list and no seed\n    // (the latter of which guarantees us context)\n    if ( match.length === 1 ) {\n\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[ 0 ] = match[ 0 ].slice( 0 );\n        if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n                context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n            context = ( Expr.find.ID(\n                token.matches[ 0 ].replace( runescape, funescape ),\n                context\n            ) || [] )[ 0 ];\n            if ( !context ) {\n                return results;\n\n            // Precompiled matchers will still verify ancestry, so step up a level\n            } else if ( compiled ) {\n                context = context.parentNode;\n            }\n\n            selector = selector.slice( tokens.shift().value.length );\n        }\n\n        // Fetch a seed set for right-to-left matching\n        i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n        while ( i-- ) {\n            token = tokens[ i ];\n\n            // Abort if we hit a combinator\n            if ( Expr.relative[ ( type = token.type ) ] ) {\n                break;\n            }\n            if ( ( find = Expr.find[ type ] ) ) {\n\n                // Search, expanding context for leading sibling combinators\n                if ( ( seed = find(\n                    token.matches[ 0 ].replace( runescape, funescape ),\n                    rsibling.test( tokens[ 0 ].type ) &&\n                        testContext( context.parentNode ) || context\n                ) ) ) {\n\n                    // If seed is empty or no tokens remain, we can return early\n                    tokens.splice( i, 1 );\n                    selector = seed.length && toSelector( tokens );\n                    if ( !selector ) {\n                        push.apply( results, seed );\n                        return results;\n                    }\n\n                    break;\n                }\n            }\n        }\n    }\n\n    // Compile and execute a filtering function if one is not provided\n    // Provide `match` to avoid retokenization if we modified the selector above\n    ( compiled || compile( selector, match ) )(\n        seed,\n        context,\n        !documentIsHTML,\n        results,\n        !context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n    );\n    return results;\n}\n\n// Initialize against the default document\nsetDocument();\n\njQuery.find = find;\n\n} )();\n","import jQuery from '../core.js';\nimport toType from './toType.js';\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function(elems, fn, key, value, chainable, emptyGet, raw) {\n    let i = 0,\n        len = elems.length,\n        bulk = key == null;\n\n    // Sets many values\n    if (toType(key) === 'object') {\n        chainable = true;\n        for (i in key) {\n            access(elems, fn, i, key[i], true, emptyGet, raw);\n        }\n\n        // Sets one value\n    } else if (value !== undefined) {\n        chainable = true;\n\n        if (typeof value !== 'function') {\n            raw = true;\n        }\n\n        if (bulk) {\n\n            // Bulk operations run against the entire set\n            if (raw) {\n                fn.call(elems, value);\n                fn = null;\n\n                // ...except when executing function values\n            } else {\n                bulk = fn;\n                fn = function(elem, _key, value) {\n                    return bulk.call(jQuery(elem), value);\n                };\n            }\n        }\n\n        if (fn) {\n            for (; i < len; i++) {\n                fn(\n\t\t\t\t\telems[i], key, raw\n\t\t\t\t\t    ? value\n\t\t\t\t\t    : value.call(elems[i], i, fn(elems[i], key))\n                );\n            }\n        }\n    }\n\n    if (chainable) {\n        return elems;\n    }\n\n    // Gets\n    if (bulk) {\n        return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n};\n\nexport default access;\n","// Only count HTML whitespace\n// Other whitespace should count in values\n// https://infra.spec.whatwg.org/#ascii-whitespace\nexport default ( /[^\\x20\\t\\r\\n\\f]+/g );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport nodeName from \"../core/nodeName.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = elem.getAttribute( name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Support: IE <=11+\n// An input loses its value after becoming a radio\nif ( isIE ) {\n\tjQuery.attrHooks.type = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( value === \"radio\" && nodeName( elem, \"input\" ) ) {\n\t\t\t\tvar val = elem.value;\n\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\tif ( val ) {\n\t\t\t\t\telem.value = val;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tjQuery.attrHooks[ name ] = {\n\t\tget: function( elem ) {\n\t\t\tvar ret,\n\t\t\t\tisXML = jQuery.isXMLDoc( elem ),\n\t\t\t\tlowercaseName = name.toLowerCase();\n\n\t\t\tif ( !isXML ) {\n\t\t\t\tret = elem.getAttribute( name ) != null ?\n\t\t\t\t\tlowercaseName :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\tset: function( elem, value, name ) {\n\t\t\tif ( value === false ) {\n\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t} else {\n\t\t\t\telem.setAttribute( name, name );\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t};\n} );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = elem.getAttribute( \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\n\t\t\t\t\t// href-less anchor's `tabIndex` property value is `0` and\n\t\t\t\t\t// the `tabindex` attribute value: `null`. We want `-1`.\n\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11+\n// Accessing the selectedIndex property forces the browser to respect\n// setting selected on the option. The getter ensures a default option\n// is selected when in an optgroup. ESLint rule \"no-unused-expressions\"\n// is disabled for this code since it considers such accessions noop.\nif ( isIE ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n","import rnothtmlwhite from '../var/rnothtmlwhite.js';\n\n// Strip and collapse whitespace according to HTML spec\n// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\nfunction stripAndCollapse( value ) {\n\tvar tokens = value.match( rnothtmlwhite ) || [];\n\treturn tokens.join( \" \" );\n}\n\nexport default stripAndCollapse;\n","// rsingleTag matches a string consisting of a single HTML element with no attributes\n// and captures the element's name\nexport default ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n","import jQuery from \"../../core.js\";\n\nimport \"../../selector.js\";\n\nexport default jQuery.expr.match.needsContext;\n","import jQuery from \"../core.js\";\nimport indexOf from \"../var/indexOf.js\";\nimport rneedsContext from \"./var/rneedsContext.js\";\n\nimport \"../selector.js\";\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( typeof qualifier === \"function\" ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n","// Initialize a jQuery object\nimport jQuery from '../core.js';\nimport document from '../var/document.js';\n\nimport rsingleTag from './var/rsingleTag.js';\n\nimport '../traversing/findFilter.js';\n\n// A central reference to the root jQuery(document)\nlet rootjQuery,\n\n    // A simple way to check for HTML strings\n    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n    // Strict HTML recognition (#11290: must start with <)\n    // Shortcut simple #id case for speed\n    rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n    init = jQuery.fn.init = function(selector, context, root) {\n        let elem, match;\n\n        // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n        if (!selector) {\n            return this;\n        }\n\n        // Method init() accepts an alternate rootjQuery\n        // so migrate can support jQuery.sub (gh-2101)\n        root = root || rootjQuery;\n\n        // Handle HTML strings\n        if (typeof selector === 'string') {\n            if (selector[0] === '<'\n\t\t\t\t&& selector[selector.length - 1] === '>'\n\t\t\t\t&& selector.length >= 3) {\n\n                // Assume that strings that start and end with <> are HTML and skip the regex check\n                match = [ null, selector, null ];\n\n            } else {\n                match = rquickExpr.exec(selector);\n            }\n\n            // Match html or make sure no context is specified for #id\n            if (match && (match[1] || !context)) {\n\n                // HANDLE: $(html) -> $(array)\n                if (match[1]) {\n                    context = context instanceof jQuery ? context[0] : context;\n\n                    // Option to run scripts is true for back-compat\n                    // Intentionally let the error be thrown if parseHTML is not present\n                    jQuery.merge(this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[1],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n                    ));\n\n                    // HANDLE: $(html, props)\n                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n                        for (match in context) {\n\n                            // Properties of context are called as methods if possible\n                            if (typeof this[match] === 'function') {\n                                this[match](context[match]);\n\n                                // ...and otherwise set as attributes\n                            } else {\n                                this.attr(match, context[match]);\n                            }\n                        }\n                    }\n\n                    return this;\n\n                    // HANDLE: $(#id)\n                }\n                elem = document.getElementById(match[2]);\n\n                if (elem) {\n\n                    // Inject the element directly into the jQuery object\n                    this[0] = elem;\n                    this.length = 1;\n                }\n\n                return this;\n\n\n                // HANDLE: $(expr, $(...))\n            } else if (!context || context.jquery) {\n                return (context || root).find(selector);\n\n                // HANDLE: $(expr, context)\n                // (which is just equivalent to: $(context).find(expr)\n            }\n\n            return this.constructor(context).find(selector);\n\n\n            // HANDLE: $(DOMElement)\n        } else if (selector.nodeType) {\n            this[0] = selector;\n            this.length = 1;\n\n            return this;\n\n            // HANDLE: $(function)\n            // Shortcut for document ready\n        } else if (typeof selector === 'function') {\n            return root.ready !== undefined\n                ? root.ready(selector)\n\n            // Execute immediately if ready is not present\n                : selector(jQuery);\n        }\n\n        return jQuery.makeArray(selector, this);\n    };\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery(document);\n","import jQuery from \"../core.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\n\nimport \"../core/init.js\";\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\t// Toggle individual class names\n\t\t\ti = 0;\n\t\t\tself = jQuery( this );\n\t\t\tclassNames = classesToArray( value );\n\n\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t// Check each className given, space separated list\n\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\tself.removeClass( className );\n\t\t\t\t} else {\n\t\t\t\t\tself.addClass( className );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n","import jQuery from \"../core.js\";\nimport isIE from \"../var/isIE.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport nodeName from \"../core/nodeName.js\";\n\nimport \"../core/init.js\";\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = typeof value === \"function\";\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( option.selected &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery( option ).val(), values ) > -1\n\t\t\t\t\t) ) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\nif ( isIE ) {\n\tjQuery.valHooks.option = {\n\t\tget: function( elem ) {\n\n\t\t\tvar val = elem.getAttribute( \"value\" );\n\t\t\treturn val != null ?\n\t\t\t\tval :\n\n\t\t\t\t// Support: IE <=10 - 11+\n\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t}\n\t};\n}\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n} );\n","import jQuery from './core.js';\n\nimport \"./attributes/attr.js\";\nimport \"./attributes/prop.js\";\nimport \"./attributes/classes.js\";\nimport \"./attributes/val.js\";\n\n// Return jQuery for attributes-only inclusion\nexport default jQuery;\n","import jQuery from '../core.js';\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11+\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n","import jQuery from \"./core.js\";\nimport access from \"./core/access.js\";\nimport \"./core/init.js\";\n\n\njQuery.fn.extend( {\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t}\n} );\n\n\n\nexport default jQuery;\n","import jQuery from './core.js';\n\nimport './selector.js';\nimport './attributes.js';\nimport './core/parseXML.js';\nimport './exports/global.js';\nimport './manipulation.js';\n\n\nexport default jQuery;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import arr from \"./arr.js\";\n\nexport default arr.push;\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {String} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\nexport const CHROME = 'chrome';\nexport const OPERA = 'opera';\nexport const FIREFOX = 'firefox';\nexport const INTERNET_EXPLORER = 'iexplorer';\nexport const SAFARI = 'safari';\nexport const NWJS = 'nwjs';\nexport const ELECTRON = 'electron';\nexport const REACT_NATIVE = 'react-native';\nexport const UNKNOWN = 'unknown';","import Bowser from 'bowser';\nimport { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN } from './browsers';\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\n\nconst bowserNameToJitsiName = {\n  'Chrome': CHROME,\n  'Chromium': CHROME,\n  'Opera': OPERA,\n  'Firefox': FIREFOX,\n  'Internet Explorer': INTERNET_EXPLORER,\n  'Safari': SAFARI\n};\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\n\nfunction _detectChromiumBased() {\n  const userAgent = navigator.userAgent;\n  const browserInfo = {\n    name: UNKNOWN,\n    version: undefined\n  };\n\n  if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n    // Edge is currenly supported only on desktop and android.\n    if (userAgent.match(/Edg(A?)/)) {\n      // Compare the underlying chromium version.\n      const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n      if (Number.parseInt(version, 10) > 72) {\n        browserInfo.name = CHROME;\n        browserInfo.version = version;\n      }\n    } else {\n      browserInfo.name = CHROME;\n      browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n    }\n  }\n\n  return browserInfo;\n}\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\n\n\nfunction _detectElectron() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/Electron/)) {\n    const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n    return {\n      name: ELECTRON,\n      version\n    };\n  }\n}\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\n\n\nfunction _detectNWJS() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/JitsiMeetNW/)) {\n    const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n    return {\n      name: NWJS,\n      version\n    };\n  }\n}\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\n\n\nfunction _detectReactNative() {\n  const match = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n  let version; // If we're remote debugging a React Native app, it may be treated as\n  // Chrome. Check navigator.product as well and always return some version\n  // even if we can't get the real one.\n\n  if (match || navigator.product === 'ReactNative') {\n    let name;\n\n    if (match && match.length > 2) {\n      name = match[1];\n      version = match[2];\n    }\n\n    name || (name = 'react-native');\n    version || (version = 'unknown');\n    return {\n      name: REACT_NATIVE,\n      version\n    };\n  }\n}\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\n\n\nfunction _detect(bowser) {\n  let browserInfo;\n  const detectors = [_detectReactNative, _detectElectron, _detectNWJS]; // Try all browser detectors\n\n  for (let i = 0; i < detectors.length; i++) {\n    browserInfo = detectors[i]();\n\n    if (browserInfo) {\n      return browserInfo;\n    }\n  }\n\n  const name = bowser.getBrowserName();\n\n  if (name in bowserNameToJitsiName) {\n    return {\n      name: bowserNameToJitsiName[name],\n      version: bowser.getBrowserVersion()\n    };\n  } // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n\n\n  browserInfo = _detectChromiumBased();\n\n  if (browserInfo) {\n    return browserInfo;\n  }\n\n  return {\n    name: UNKNOWN,\n    version: undefined\n  };\n}\n/**\n * Implements browser detection.\n */\n\n\nexport default class BrowserDetection {\n  /**\n   * Creates new BrowserDetection instance.\n   *\n   * @param {Object} [browserInfo] - Information about the browser.\n   * @param {string} browserInfo.name - The name of the browser.\n   * @param {string} browserInfo.version - The version of the browser.\n   */\n  constructor(browserInfo) {\n    let name, version;\n    this._bowser = Bowser.getParser(navigator.userAgent);\n\n    if (typeof browserInfo === 'undefined') {\n      const detectedBrowserInfo = _detect(this._bowser);\n\n      name = detectedBrowserInfo.name;\n      version = detectedBrowserInfo.version;\n    } else if (browserInfo.name in bowserNameToJitsiName) {\n      name = bowserNameToJitsiName[browserInfo.name];\n      version = browserInfo.version;\n    } else {\n      name = UNKNOWN;\n      version = undefined;\n    }\n\n    this._name = name;\n    this._version = version;\n  }\n  /**\n   * Gets current browser name.\n   * @returns {string}\n   */\n\n\n  getName() {\n    return this._name;\n  }\n  /**\n   * Checks if current browser is Chrome.\n   * @returns {boolean}\n   */\n\n\n  isChrome() {\n    return this._name === CHROME;\n  }\n  /**\n   * Checks if current browser is Opera.\n   * @returns {boolean}\n   */\n\n\n  isOpera() {\n    return this._name === OPERA;\n  }\n  /**\n   * Checks if current browser is Firefox.\n   * @returns {boolean}\n   */\n\n\n  isFirefox() {\n    return this._name === FIREFOX;\n  }\n  /**\n   * Checks if current browser is Internet Explorer.\n   * @returns {boolean}\n   */\n\n\n  isIExplorer() {\n    return this._name === INTERNET_EXPLORER;\n  }\n  /**\n   * Checks if current browser is Safari.\n   * @returns {boolean}\n   */\n\n\n  isSafari() {\n    return this._name === SAFARI;\n  }\n  /**\n   * Checks if current environment is NWJS.\n   * @returns {boolean}\n   */\n\n\n  isNWJS() {\n    return this._name === NWJS;\n  }\n  /**\n   * Checks if current environment is Electron.\n   * @returns {boolean}\n   */\n\n\n  isElectron() {\n    return this._name === ELECTRON;\n  }\n  /**\n   * Checks if current environment is React Native.\n   * @returns {boolean}\n   */\n\n\n  isReactNative() {\n    return this._name === REACT_NATIVE;\n  }\n  /**\n   * Returns the version of the current browser.\n   * @returns {string}\n   */\n\n\n  getVersion() {\n    return this._version;\n  }\n  /**\n   * Check if the parsed browser matches the passed condition.\n   *\n   * @param {Object} checkTree - It's one or two layered object, which can include a\n   * platform or an OS on the first layer and should have browsers specs on the\n   * bottom layer.\n   * Eg. { chrome: '>71.1.0' }\n   *     { windows: { chrome: '<70.2' } }\n   * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n   * conditions, false if not and undefined when the browser is not defined in the\n   * checktree object or when the current browser's version is unknown.\n   * @private\n   */\n\n\n  _checkCondition(checkTree) {\n    if (this._version) {\n      return this._bowser.satisfies(checkTree);\n    }\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * greater than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionGreaterThan(version) {\n    return this._checkCondition({\n      [this._name]: `>${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * lower than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionLessThan(version) {\n    return this._checkCondition({\n      [this._name]: `<${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * equal to the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   * A loose-equality operator is used here so that it matches the sub-versions as well.\n   */\n\n\n  isVersionEqualTo(version) {\n    return this._checkCondition({\n      [this._name]: `~${version}`\n    });\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\n/**\n * Dummy implementation of Storage interface.\n */\n\nclass DummyLocalStorage extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_storage\", {});\n  }\n\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._storage = {};\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return Object.keys(this._storage).length;\n  }\n  /**\n   * Will return that key's value associated to the passed key name.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {*} - The key value.\n   */\n\n\n  getItem(keyName) {\n    return this._storage[keyName];\n  }\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   *\n   * @param {string} keyName - The key name.\n   * @param {*} keyValue - The key value.\n   * @returns {void}\n   */\n\n\n  setItem(keyName, keyValue) {\n    this._storage[keyName] = keyValue;\n  }\n  /**\n   * When passed a key name, will remove that key from the storage.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {void}\n   */\n\n\n  removeItem(keyName) {\n    delete this._storage[keyName];\n  }\n  /**\n   * When passed a number n, this method will return the name of the nth key in the storage.\n   *\n   * @param {number} idx - The index of the key.\n   * @returns {string} - The nth key name.\n   */\n\n\n  key(n) {\n    const keys = Object.keys(this._storage);\n\n    if (keys.length <= n) {\n      return undefined;\n    }\n\n    return keys[n];\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    return JSON.stringify(this._storage);\n  }\n\n}\n/**\n * Wrapper class for browser's local storage object.\n */\n\n\nclass JitsiLocalStorage extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Storage} storage browser's local storage object.\n   */\n  constructor() {\n    super();\n\n    try {\n      this._storage = window.localStorage;\n      this._localStorageDisabled = false;\n    } catch (ignore) {// localStorage throws an exception.\n    }\n\n    if (!this._storage) {\n      // Handles the case when window.localStorage is undefined or throws an exception.\n      console.warn('Local storage is disabled.');\n      this._storage = new DummyLocalStorage();\n      this._localStorageDisabled = true;\n    }\n  }\n  /**\n   * Returns true if window.localStorage is disabled and false otherwise.\n   *\n   * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n   */\n\n\n  isLocalStorageDisabled() {\n    return this._localStorageDisabled;\n  }\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._storage.clear();\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return this._storage.length;\n  }\n  /**\n   * Returns that passed key's value.\n   * @param {string} keyName the name of the key you want to retrieve\n   * the value of.\n   * @returns {String|null} the value of the key. If the key does not exist,\n   * null is returned.\n   */\n\n\n  getItem(keyName) {\n    return this._storage.getItem(keyName);\n  }\n  /**\n   * Adds a key to the storage, or update key's value if it already exists.\n   * @param {string} keyName - the name of the key you want to create/update.\n   * @param {string} keyValue - the value you want to give the key you are\n   * creating/updating.\n   * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n   */\n\n\n  setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n    this._storage.setItem(keyName, keyValue);\n\n    if (!dontEmitChangedEvent) {\n      this.emit('changed');\n    }\n  }\n  /**\n   * Remove a key from the storage.\n   * @param {string} keyName the name of the key you want to remove.\n   */\n\n\n  removeItem(keyName) {\n    this._storage.removeItem(keyName);\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater\n   * than or equal to the number of key/value pairs in the object.\n   *\n   * @param {number} i - The index of the key in the list.\n   * @returns {string}\n   */\n\n\n  key(i) {\n    return this._storage.key(i);\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    if (this.isLocalStorageDisabled()) {\n      return this._storage.serialize();\n    }\n\n    const length = this._storage.length;\n    const localStorageContent = {};\n\n    for (let i = 0; i < length; i++) {\n      const key = this._storage.key(i);\n\n      localStorageContent[key] = this._storage.getItem(key);\n    }\n\n    return JSON.stringify(localStorageContent);\n  }\n\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","// [[Class]] -> type pairs\nexport default {};\n","import arr from \"./arr.js\";\n\nexport default arr.indexOf;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (this.pc.isSharingLowFpsScreen()\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const transceiver = this.findTransceiver(mediaType, oldTrack);\n        const track = newTrack?.getTrack() ?? null;\n\n        if (!transceiver) {\n            return Promise.reject(new Error('replace track failed'));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track);\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1],\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return SariskaMediaTransport.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import Logger from '@jitsi/logger';\n/* global __filename */\nimport './dom/jquery.js';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as createAnalyticsEvent from './modules/util/createAnalyticsEvent';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {initSDKConfig} from './config';\nimport {createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        createPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options = {}) {\n        options = {...initSDKConfig, ...options};\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Configure the feature flags.\n        FeatureFlags.init({\n            sourceNameSignaling: options.sourceNameSignaling\n        });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n\n        if (window.location.href.indexOf(\"iAmRecorder\") >= 0) {\n           return [];\n        }\n\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // Only set sourceName for non-P2P case\n                    if (ssrcElement.hasAttribute('name')) {\n                        const sourceName = ssrcElement.getAttribute('name');\n\n                        this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                    }\n                }\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                    // the local endpoint is the offerer and starts muted.\n                    const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                    const remoteDescription = new RTCSessionDescription({\n                        type: 'offer',\n                        sdp: remoteSdp\n                    });\n\n                    this._responderRenegotiate(remoteDescription);\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            const promise = typeof maxFrameHeight === 'undefined'\n                ? this.peerconnection.configureSenderVideoEncodings()\n                : this.peerconnection.setSenderVideoConstraints(maxFrameHeight);\n\n            return promise;\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of the remote tracks and SSRCs associated with a remote endpoint.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                this.peerconnection.removeRemoteTracks(id);\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        if (this.isP2P) {\n                            // Do not remove ssrcs from m-line in p2p mode. If the ssrc is removed and added back to\n                            // the same m-line (on source-add), Chrome/Safari do not render the media even if it is\n                            // being received and decoded from the remote peer. The webrtc spec is not clear about\n                            // m-line re-use and the browser vendors have implemented this differently. Currently work\n                            // around this by changing the media direction, that should be enough for the browser to\n                            // fire the \"removetrack\" event on the associated MediaStream. Also, the current direction\n                            // of the transceiver for p2p will depend on whether a local sources is added or not. It\n                            // will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings();\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings();\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info(`${this} Sending source-remove`);\n            logger.debug(remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info(`${this} Sending source-add`);\n            logger.debug(add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: false,\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\nexport const conferenceConfig = {\n    enableLocalRecording: true,\n    enableVirtualBackground: false,\n    enableNoiseCancellation: false,\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true,\n    enableNoisyMicDetection: true,\n    createVADProcessor: true,\n    openBridgeChannel: 'websocket',\n    //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n    hiddenDomain: [\"recorder.sariska.io\",\"pricing.sariska.io\"],\n    // startAudioMuted\n    // startVideoMuted\n    enableLayerSuspension: true, // - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping: {\n        pingInterval: -1 // analyticsInterval: 60000,\n    },\n    analytics: {\n        disabled: false\n        // rtcstatsEnabled: true,\n\n        // In order to enable rtcstats one needs to provide a endpoint url.\n        // rtcstatsEndpoint: wss://rtcstats-server-pilot.jitsi.net/,\n\n        // The interval at which rtcstats will poll getStats, defaults to 1000ms.\n        // If the value is set to 0 getStats won't be polled and the rtcstats client\n        // will only send data related to RTCPeerConnection events.\n        // rtcstatsPolIInterval: 1000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL,\n    timerWorkerScript\n} from './TimeWorker';\n\n/**\n * Represents a modified MediaStream that adds video as pip on a desktop stream.\n * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n * desktop stream.\n */\nexport default class JitsiStreamPresenterEffect {\n    /**\n     * Represents a modified MediaStream that adds a camera track at the\n     * bottom right corner of the desktop track using a HTML canvas.\n     * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n     * video stream.\n     *\n     * @param {MediaStream} videoStream - The video stream which is user for\n     * creating the canvas.\n     */\n    constructor(videoStream: MediaStream) {\n        const videoDiv = document.createElement('div');\n        const firstVideoTrack = videoStream.getVideoTracks()[0];\n        const { height, width, frameRate } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n\n        this._desktopElement = document.createElement('video');\n        this._videoElement = document.createElement('video');\n        videoDiv.appendChild(this._videoElement);\n        videoDiv.appendChild(this._desktopElement);\n        if (document.body !== null) {\n            document.body.appendChild(videoDiv);\n        }\n\n        // Set the video element properties\n        this._frameRate = parseInt(frameRate, 10);\n        this._videoElement.width = parseInt(width, 10);\n        this._videoElement.height = parseInt(height, 10);\n        this._videoElement.autoplay = true;\n        this._videoElement.srcObject = videoStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._videoElement.play();\n\n        // set the style attribute of the div to make it invisible\n        videoDiv.style.display = 'none';\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onVideoFrameTimer = this._onVideoFrameTimer.bind(this);\n    }\n\n    /**\n     * EventHandler onmessage for the videoFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onVideoFrameTimer(response) {\n        if (response.data.id === INTERVAL_TIMEOUT) {\n            this._renderVideo();\n        }\n    }\n\n    /**\n     * Loop function to render the video frame input and draw presenter effect.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderVideo() {\n        // adjust the canvas width/height on every frame incase the window has been resized.\n        const [ track ] = this._desktopStream.getVideoTracks();\n        const { height, width } = track.getSettings() ?? track.getConstraints();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._ctx.drawImage(this._desktopElement, 0, 0, this._canvas.width, this._canvas.height);\n        this._ctx.drawImage(this._videoElement, this._canvas.width - this._videoElement.width, this._canvas.height\n            - this._videoElement.height, this._videoElement.width, this._videoElement.height);\n\n        // draw a border around the video element.\n        this._ctx.beginPath();\n        this._ctx.lineWidth = 2;\n        this._ctx.strokeStyle = '#A9A9A9'; // dark grey\n        this._ctx.rect(this._canvas.width - this._videoElement.width, this._canvas.height - this._videoElement.height,\n            this._videoElement.width, this._videoElement.height);\n        this._ctx.stroke();\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the\n     * specified track, false otherwise.\n     */\n    isEnabled(jitsiLocalTrack: Object) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'desktop';\n    }\n\n    /**\n     * Starts loop to capture video frame and render presenter effect.\n     *\n     * @param {MediaStream} desktopStream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(desktopStream: MediaStream) {\n        const firstVideoTrack = desktopStream.getVideoTracks()[0];\n        const { height, width } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        // set the desktop element properties.\n        this._desktopStream = desktopStream;\n        this._desktopElement.width = parseInt(width, 10);\n        this._desktopElement.height = parseInt(height, 10);\n        this._desktopElement.autoplay = true;\n        this._desktopElement.srcObject = desktopStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._desktopElement.play();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._videoFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Presenter effect worker' });\n        this._videoFrameTimerWorker.onmessage = this._onVideoFrameTimer;\n        this._videoFrameTimerWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: 1000 / this._frameRate\n        });\n\n        return this._canvas.captureStream(this._frameRate);\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._videoFrameTimerWorker.postMessage({\n            id: CLEAR_INTERVAL\n        });\n        this._videoFrameTimerWorker.terminate();\n    }\n\n}\n","// @flow\n\nimport JitsiStreamPresenterEffect from './JitsiStreamPresenterEffect';\n\n/**\n * Creates a new instance of JitsiStreamPresenterEffect.\n *\n * @param {MediaStream} stream - The video stream which will be used for\n * creating the presenter effect.\n * @returns {Promise<JitsiStreamPresenterEffect>}\n */\nexport function createPresenterEffect(stream: MediaStream) {\n    if (!MediaStreamTrack.prototype.getSettings\n        && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('JitsiStreamPresenterEffect not supported!'));\n    }\n\n    return Promise.resolve(new JitsiStreamPresenterEffect(stream));\n}\n","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH: number = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE: number = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY: number = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface: Object) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample: Float32Array) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array: Float32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame: Float32Array) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport rnnoiseWasmInit from 'rnnoise-wasm';\n\nimport RnnoiseProcessor from './RnnoiseProcessor';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport type { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\ndeclare var interfaceConfig: Object;\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback: Function) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream: MediaStream, videoType: string) {\n        return new Promise<void>((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message: Object) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels: number) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback: Function) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model: Object, options: Object) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response: Object) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack: Object) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream: MediaStream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport createTFLiteModule from './tflite';\nimport createTFLiteSIMDModule from './tflite-simd';\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @param {Function} dispatch - The Redux dispatch function.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground: Object, dispatch: Function) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n    let wasmCheck;\n\n    // Checks if WebAssembly feature is supported or enabled by/in the browser.\n    // Conditional import of wasm-check package is done to prevent\n    // the browser from crashing when the user opens the app.\n\n    try {\n        wasmCheck = require('wasm-check');\n        if (wasmCheck?.feature?.simd) {\n            tflite = await createTFLiteSIMDModule();\n        } else {\n            tflite = await createTFLiteModule();\n        }\n    } catch (err) {\n        return;\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","import class2type from \"./class2type.js\";\n\nexport default class2type.toString;\n","import class2type from '../var/class2type.js';\nimport toString from '../var/toString.js';\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\treturn typeof obj === \"object\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n\nexport default toType;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain && this.options.hiddenDomain.indexOf(jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'))) >= 0;\n        const isTranscriber =  pres.getElementsByTagName('nick');\n        if (isTranscriber[0] && isTranscriber[0].innerHTML.toLowerCase() === \"transcriber\") {\n           member.isHiddenDomain  = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                    logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    setVideoMute(mute) {\n        this.sendVideoInfoPresence(mute);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    setAudioMute(mute) {\n        this.sendAudioInfoPresence(mute);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendAudioInfoPresence(mute) {\n        // FIXME resend presence on CONNECTED\n        this.addAudioInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this.clean();\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        }));\n\n        return Promise.all(promises);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport VideoType from '../../service/RTC/VideoType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n        room.addPresenceListener('videoType', this._videoTypeHandler);\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && mediaType === MediaType.AUDIO) {\n                        emitAudioMutedEvent(endpointId, newMutedState);\n                    } else {\n                        emitVideoMutedEvent(endpointId, newMutedState);\n                    }\n                }\n\n                const newVideoType = sourceInfoJSON[sourceName].videoType;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n                    emitEventsFromHere && emitVideoTypeEvent(endpointId, newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.error('Requested peer media info, before room was set');\n        };\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const lastPresence = this.chatRoom.getLastPresence(owner);\n\n            if (!lastPresence) {\n                throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\n            }\n\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        return this._remoteSourceState[owner] ? this._remoteSourceState[owner][sourceName] : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","export * from './SessionManager';\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n        this._facialExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the facial expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFacialExpressions() {\n        return this._facialExpressions;\n    }\n\n    /**\n     * Sets the facial expressions of the user.\n     *\n     * @param {Object} facialExpressions - object with facial expressions.\n     * @returns {void}\n     */\n    setFacialExpressions(facialExpressions) {\n        this._facialExpressions = facialExpressions;\n    }\n\n    /**\n     * Adds a new facial expression to speaker stats.\n     *\n     * @param  {string} facialExpression\n     * @param {number} duration\n     */\n    addFacialExpression(facialExpression, duration) {\n        this._facialExpressions[facialExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(browser.isFirefox() || browser.isIosBrowser());\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        try {\n            appData = JSON.parse(appData)|| {};\n        } catch(e) {\n            appData = {};\n        }\n        \n        appData[\"base_url\"] = appData[\"base_url\"] ? appData[\"base_url\"] : `${window.location.origin}${window.location.pathname}`;\n        appData[\"token\"] =  this._connection.emuc.xmpp.token;\n        \n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nexport default bytesToUuid;","import rng from './rng.js';\nimport bytesToUuid from './bytesToUuid.js';\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    var start = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return bytesToUuid(rnds);\n}\n\nexport default v4;","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\ntype RecordingStats = {\n\n    /**\n     * Current local recording session token used by the participant.\n     */\n    currentSessionToken: number,\n\n    /**\n     * Whether local recording is engaged on the participant's device.\n     */\n    isRecording: boolean,\n\n    /**\n     * Total recorded bytes. (Reserved for future use.)\n     */\n    recordedBytes: number,\n\n    /**\n     * Total recording duration. (Reserved for future use.)\n     */\n    recordedLength: number\n}\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference: * = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken: number = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference: Object) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate: Function) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate: Function) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate: Function) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format: string) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken: number) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId: string) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted: boolean) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat: string) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats(): RecordingStats {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState: Symbol) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return (Promise.resolve(): Promise<void>);\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        const blob = new Blob([\"importScripts('https://sdk.sariska.io/flacEncodeWorker.min.js');\"], {\"type\": 'application/javascript'});\n        const url = window.URL || window.webkitURL;\n        const blobUrl = url.createObjectURL(blob);\n        this._encoder = new Worker(blobUrl);\n        URL.revokeObjectURL(blobUrl);\n    }\n}","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime(): number {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\ntype SessionEvent = {\n\n    /**\n     * The type of the event.\n     * Should be one of the values in {@code SessionEventType}.\n     */\n    type: string,\n\n    /**\n     * The timestamp of the event.\n     */\n    timestamp: number\n};\n\n/**\n * Representation of the metadata of a segment.\n */\ntype SegmentInfo = {\n\n    /**\n     * The length of gap before this segment, in milliseconds.\n     * mull if unknown.\n     */\n    gapBefore?: ?number,\n\n    /**\n     * The duration of this segment, in milliseconds.\n     * null if unknown or the segment is not finished.\n     */\n    duration?: ?number,\n\n    /**\n     * The start time, in milliseconds.\n     */\n    start?: ?number,\n\n    /**\n     * The end time, in milliseconds.\n     * null if unknown, the segment is not finished, or the recording is\n     * interrupted (e.g. browser reload).\n     */\n    end?: ?number\n};\n\n/**\n * Representation of metadata of a local recording session.\n */\ntype SessionInfo = {\n\n    /**\n     * The session token.\n     */\n    sessionToken: string,\n\n    /**\n     * The start time of the session.\n     */\n    start: ?number,\n\n    /**\n     * The recording format.\n     */\n    format: string,\n\n    /**\n     * Array of segments in the session.\n     */\n    segments: SegmentInfo[]\n}\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken: string, format: string) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(): SessionInfo[] {\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo: SessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken: string) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken: string): SegmentInfo[] {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken: string): number {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken: string): number {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken: string) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events: SessionEvent[]): SegmentInfo[] {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment: SegmentInfo = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","const RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { RecordingController } from './modules/local-recording';\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\nwindow.APP = {\n    conference: {\n    }\n};\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A coference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.sessions = {};\n    this.user = options.user;\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    this.handleSubtitles();\n\n    if (options.config.enableLocalRecording) {\n        this.recordingController = new RecordingController();\n        this.recordingController.registerEvents(this);\n    }\n\n    if (options.config.enableAnalytics) {\n        this.enableAnalytics();\n    }\n\n    if (options.config.iAmRecorder) {\n        this.removeCommand('userinfo');\n        this.sendCommand(\n            'userinfo',\n            {\n                attributes: {\n                    xmlns: 'http://jitsi.org/jitmeet/userinfo',\n                    robot: true\n                }\n            });\n    }\n\n    const self = this;\n\n    window.APP = {\n        conference: {\n            _room: this,\n            get membersCount() {\n                return self.getParticipantsWithoutHidden().length + 1;\n            },\n            getStats() {\n                return self.connectionQuality.getStats();\n            }\n        }\n    };\n\n    this.localTracksDuration = new LocalTracksDuration(this);\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid) {\n    return Strophe.getNodeFromJid(jid);\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this._signalingLayer.setChatRoom(null);\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.sendSourceVideoType(\n            getSourceNameForJitsiTrack(this.myUserId(), MediaType.VIDEO, 0),\n            videoType\n        );\n    } else {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (!track) {\n        return;\n    }\n    if (track.isAudioTrack() && this.options.config.startAudioMuted) {\n        track.mute();\n    }\n    if (track.isVideoTrack() && this.options.config.startVideoMuted) {\n        track.mute();\n    }\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrackBelongsToConference) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    let videoTypeChanged = false;\n\n    if (newTrack.isVideoTrack()) {\n        videoTypeChanged = this._setNewVideoType(newTrack);\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (this._setTrackMuteStatus(newTrack, newTrack.isMuted()) || videoTypeChanged) {\n        // send presence if it was changed with vide type or mute status\n        this.room.sendPresence();\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        // FIXME once legacy signaling using 'sendCommand' is removed, signalingLayer.setTrackVideoType must be adjusted\n        // to send the presence (not just modify it).\n        this._signalingLayer.setTrackVideoType(\n            getSourceNameForJitsiTrack(\n                this.myUserId(),\n                track.getType(),\n                0\n            ),\n            track.videoType);\n\n        // TODO: Optimize to detect whether presence was changed, for now always report changed to send presence\n        return true;\n    }\n\n    const videoTypeTagName = 'videoType';\n\n    // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n    if (track.videoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n        // we will not use this.sendCommand here to avoid sending the presence immediately, as later we may also set\n        // and the mute status\n        return this.room.addOrReplaceInPresence(videoTypeTagName, { value: track.videoType });\n    }\n\n    return false;\n};\n\n/**\n * Sets mute status.\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(localTrack, isMuted) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        // TODO When legacy signaling part is removed, remember to adjust signalingLayer.setTrackMuteStatus, so that\n        // it triggers sending the presence (it only updates it for now, because the legacy code below sends).\n        this._signalingLayer.setTrackMuteStatus(\n            getSourceNameForJitsiTrack(this.myUserId(), localTrack.getType(), 0),\n            isMuted\n        );\n    }\n\n    if (!this.room) {\n        return false;\n    }\n\n    if (localTrack.isAudioTrack()) {\n        return this.room.addAudioInfoToPresence(isMuted);\n    }\n\n    return this.room.addVideoInfoToPresence(isMuted);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage(track);\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage();\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return this.options.config.hiddenDomain.indexOf(Strophe.getDomainFromJid(this.connection.getJid())) >= 0;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipantsWithoutHidden = function() {\n    let participants = this.getParticipants().filter(participant => !participant._hidden);\n\n    participants = participants.filter(participant => !participant?._properties?.features_jigasi);\n\n    return participants;\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this._getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a facial expression with its duration to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFacialExpression = function(payload) {\n    this.xmpp.sendFacialExpressionEvent(this.room.roomjid, payload);\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.terminate = function() {\n    this.sendCommand('terminate', {});\n};\n\n\nJitsiConference.prototype.handleSubtitles = function() {\n\n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty('translation_language');\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage.final = json.text;\n                newTranscriptMessage.participantName = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                    newTranscriptMessage = pastMessage;\n                } else {\n                    newTranscriptMessage.participantName = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage.final = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage.stable = text;\n                    newTranscriptMessage.unstable = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage.unstable = text;\n                }\n\n            }\n\n            let finalText = '';\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n\n                finalText = stable + unstable;\n            }\n            const fellowParticipantName =  this.participants[json?.participant?.id]?._identity?.user?.name ||  this?.getLocalUser()?.name;\n            this.eventEmitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, json?.participant?.id, fellowParticipantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n};\n\n// enable analytics\nJitsiConference.prototype.enableAnalytics = function() {\n    this.statistics.addAnalyticsEventListener((eventName, payload) => {\n        let name = '', body = {};\n\n        if (typeof eventName === 'string') {\n            name = eventName;\n            body = payload;\n        } else if (typeof eventName === 'object') {\n            name = eventName.name;\n            body = eventName;\n        }\n\n        const finalPaylaod = {\n            name,\n            action: body.action ? body.action : '',\n            actionSubject: body.actionSubject ? body.actionSubject : '',\n            source: body.source ? body.source : '',\n            attributes: JSON.stringify(payload)\n        };\n\n        this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, finalPaylaod);\n    });\n};\n\nJitsiConference.prototype.startLocalRecording = function(format = 'ogg') {\n    this.recordingController.startRecording(format);\n};\n\nJitsiConference.prototype.stopLocalRecording = function() {\n    this.recordingController.stopRecording();\n};\n\nJitsiConference.prototype.switchFormat = function() {\n    this.recordingController.switchFormat(format);\n};\n\nJitsiConference.prototype.setMuted = function(muted) {\n    this.recordingController.setMuted(muted);\n};\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n    this.recordingController.setMicDevice(micDeviceId);\n};\n\nJitsiConference.prototype.startSIPVideoCall = function(sipAddress, displayName) {\n    if (this.sessions[sipAddress]) {\n        return;\n    }\n    const session = this.createVideoSIPGWSession(sipAddress, displayName);\n\n    this.sessions[sipAddress] = session;\n    session.start();\n};\n\nJitsiConference.prototype.stopSIPVideoCall = function(sipAddress) {\n    if (!this.sessions[sipAddress]) {\n        return;\n    }\n    this.sessions[sipAddress].stop();\n    delete this.sessions[sipAddress];\n};\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n            if (txt.indexOf(\"Transcript\") !== -1 || txt.indexOf(\"Fellow Jitser\") !== -1) {\n                return;\n            }\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            \n            if (conference.participants[dominant]?._hidden) {\n                return;\n            } \n\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"sriska-media-transport\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n        // synchronously load the JS.\n        const workerUrl = `${baseUrl}sariska-media-transport.e2ee-worker.js`;\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage.bind(this));\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages.bind(this));\n\n        this._rooms = {};\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        return this._isBreakoutRoom;\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload.rooms);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const callstatsDisabled\n        = !this.options.callStatsID || !this.options.callStatsSecret || !this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            || (this.options.disableThirdPartyRequests === true);\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            v2Err => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1', v2Err);\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    v1Err => {\n                        logger.warn('getting turn credentials failed', v1Err);\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $build } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                }\n\n                // Log only the first video ssrc per endpoint.\n                ssrcs.push(videoSources[0]?.s);\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                }\n                ssrcs.push(audioSources[0]?.s);\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","import { getLogger } from '@jitsi/logger';\nimport async from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStared(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStared(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: this._usesUnifiedPlan\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video track.\n *\n * @returns {JitsiLocalTrack|undefined} - local video track.\n */\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\n    return this.getLocalTracks(MediaType.VIDEO)[0];\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n\n        // The exisiting track needs to be removed here. We can get here when Jicofo reverses the order of source-add\n        // and source-remove messages. Ideally, when a remote endpoint changes source, like switching devices, it sends\n        // a source-remove (for old ssrc) followed by a source-add (for new ssrc) and Jicofo then should forward these\n        // two messages to all the other endpoints in the conference in the same order. However, sometimes, these\n        // messages arrive at the client in the reverse order resulting in two remote tracks (of same media type) being\n        // created and in case of video, a black strip (that of the first track which has ended) appears over the live\n        // track obscuring it. Removing the existing track when that happens will fix this issue.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(`${this} Removed track not found for stream[id=${streamId},trackId=${trackId}]`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the\n * peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const track = this.getLocalVideoTrack();\n\n    return track && track.videoType === VideoType.DESKTOP;\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        if (webrtcStream) {\n            try {\n                this.tpcUtils.addTrack(track, isInitiator);\n            } catch (error) {\n                logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n                return Promise.reject(error);\n            }\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute operation.\n *\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    logger.info(`${this} Adding track=${track} as unmute`);\n\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => this.isP2P);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\n    // before the source signaling which is undesirable.\n    const negotiationNeeded = Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const stream = newTrack?.getOriginalStream();\n        const promise = newTrack && !stream\n\n            // Ignore cases when the track is replaced while the device is in a muted state.\n            // The track will be replaced again on the peerconnection when the user unmutes.\n            ? Promise.resolve()\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\n        const transceiver = this.tpcUtils.findTransceiver(mediaType, oldTrack);\n\n        return promise\n            .then(() => {\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\n\n                if (transceiver) {\n                    // Set the transceiver direction.\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                // Renegotiate only in the case of P2P. We rely on 'negotiationeeded' to be fired for JVB.\n                return configureEncodingsPromise.then(() => this.isP2P || negotiationNeeded);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function() {\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localSdp = this._mungeOpus(localSdp);\n\n    if (!this._usesUnifiedPlan) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else if (!this.isP2P) {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localSdp = this._mungeCodecOrder(localSdp);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    /* eslint-disable no-param-reassign */\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    description = this._mungeOpus(description);\n\n    /* eslint-enable no-param-reassign */\n\n    if (!this._usesUnifiedPlan) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else if (!this.isP2P) {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    // eslint-disable-next-line no-param-reassign\n    description = this._mungeCodecOrder(description);\n\n    if (this._usesUnifiedPlan) {\n        // eslint-disable-next-line no-param-reassign\n        description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    this._senderVideoMaxHeight = frameHeight;\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    // Set the degradation preference.\n    const preference = this.isSharingLowFpsScreen()\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                // Max bitrates are configured on the encodings only for VP8.\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || this.isSharingLowFpsScreen()\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTrack();\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this.isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport VideoType from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        ssrcLine.value\n                            = this._generateMsidAttribute(\n                                mediaSection.mLine?.type,\n                                streamAndTrackIDs[1],\n                                streamAndTrackIDs[0]);\n                    } else {\n                        logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists) {\n                    const generatedMsid = this._generateMsidAttribute(mediaSection.mLine?.type, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: getSourceNameForJitsiTrack(this.localEndpointId, mediaType, 0)\n                });\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain facial expression.\n */\nconst FACIAL_EXPRESSION_MESSAGE_TYPE = 'facial_expression';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACIAL_EXPRESSION_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACIAL_EXPRESSION_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nexport class ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference._getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference._getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this.conference = conference;\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension ?? true;\n        this.rtc = rtc;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n        this.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => {\n                // Propagate the sender constraint only if it has changed.\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n                    this._senderVideoConstraints = videoConstraints;\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\n            : undefined;\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.FACIAL_EXPRESSION_ADDED,\n            this._onFacialExpressionAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Adds a new facial expression with its duration of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The facial expression with its duration.\n     * @returns {void}\n     * @private\n     */\n    _onFacialExpressionAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.addFacialExpression(data.facialExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            if (speakerStatsToUpdate) {\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n                speakerStatsToUpdate.setFacialExpressions(newStats[userId].facialExpressions);\n            }\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const appData = {};\n        appData[\"base_url\"] = `${window.location.origin}${window.location.pathname}`;\n        appData[\"token\"] =  this.chatRoom.connection.emuc.xmpp.token;\n        \n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n             sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport SignalingLayerImpl from '../xmpp/SignalingLayerImpl';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new SignalingLayerImpl();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","export function createNetworkInfoEvent({ isOnline, networkType, details }) {\n    const attributes = { isOnline };\n\n    // Do no include optional stuff or Amplitude handler will log warnings.\n    networkType && (attributes.networkType = networkType);\n    details && (attributes.details = details);\n\n    return {\n        action: 'network.info',\n        attributes\n    };\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","\nvar Module = (function() {\n  var _scriptDir = \"https://sdk.sariska.io/\";\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\nnull;var Module=typeof Module!==\"undefined\"?Module:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":1,\"maximum\":1+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5340496,DYNAMICTOP_PTR=97456;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile=\"rnnoise.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap,\"memory\":wasmMemory,\"table\":wasmTable};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"c\"]).apply(null,arguments)};var _rnnoise_init=Module[\"_rnnoise_init\"]=function(){return(_rnnoise_init=Module[\"_rnnoise_init\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _rnnoise_create=Module[\"_rnnoise_create\"]=function(){return(_rnnoise_create=Module[\"_rnnoise_create\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _rnnoise_destroy=Module[\"_rnnoise_destroy\"]=function(){return(_rnnoise_destroy=Module[\"_rnnoise_destroy\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=function(){return(_rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff ouput\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","var createTFLiteModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,u={};for(o in a)a.hasOwnProperty(o)&&(u[o]=a[o]);var s,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,s=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!s&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||U(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in u)u.hasOwnProperty(o)&&(a[o]=u[o]);u=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&U(\"no native wasm support detected\");var _=!1;var A,E,R,I,M=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function O(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&M)return M.decode(e.subarray(n,a));for(var o=\"\";n<a;){var u=e[n++];if(128&u){var s=63&e[n++];if(192!=(224&u)){var i=63&e[n++];if((u=224==(240&u)?(15&u)<<12|s<<6|i:(7&u)<<18|s<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(u);else{var c=u-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&u)<<6|s)}else o+=String.fromCharCode(u)}return o}function C(e){A=e,a.HEAP8=E=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=I=new Int32Array(e),a.HEAPU8=R=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var S,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,L=null,k=null;function U(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function j(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var F=\"data:application/octet-stream;base64,\";function D(e){return j(e,F)}var q=\"file://\";function B(e){return j(e,q)}var N,G=\"https://sdk.sariska.io/tflite.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){U(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?S.get(t)():S.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}D(G)||(G=G),N=s?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return I[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),C(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(O(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,I[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?O(R,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){U()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return I[n>>2]=t/1e3|0,I[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){R.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=R.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;I[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)E[n++>>0]=e.charCodeAt(r);t||(E[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();I[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),I[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var u=I[n+8*o>>2],s=I[n+(8*o+4)>>2],i=0;i<s;i++)Z.printChar(e,R[u+i]);a+=s}return I[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,C((v=a.asm.q).buffer),S=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==L&&(clearInterval(L),L=null),k)){var n=k;k=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),U(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||D(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(k=function e(){$||ae(),$||(k=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteModule}):\"object\"==typeof exports&&(exports.createTFLiteModule=createTFLiteModule);","var createTFLiteSIMDModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,s={};for(o in a)a.hasOwnProperty(o)&&(s[o]=a[o]);var u,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!u&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||k(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in s)s.hasOwnProperty(o)&&(a[o]=s[o]);s=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&k(\"no native wasm support detected\");var _=!1;var A,I,M,E,R=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function S(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&R)return R.decode(e.subarray(n,a));for(var o=\"\";n<a;){var s=e[n++];if(128&s){var u=63&e[n++];if(192!=(224&s)){var i=63&e[n++];if((s=224==(240&s)?(15&s)<<12|u<<6|i:(7&s)<<18|u<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(s);else{var c=s-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&s)<<6|u)}else o+=String.fromCharCode(s)}return o}function O(e){A=e,a.HEAP8=I=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=E=new Int32Array(e),a.HEAPU8=M=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var C,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,D=null,L=null;function k(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function U(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var j=\"data:application/octet-stream;base64,\";function F(e){return U(e,j)}var q=\"file://\";function B(e){return U(e,q)}var N,G=\"https://sdk.sariska.io/tflite-simd.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){k(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?C.get(t)():C.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}F(G)||(G=G),N=u?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return E[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),O(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(S(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,E[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?S(M,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){k()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return E[n>>2]=t/1e3|0,E[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){M.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=M.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;E[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)I[n++>>0]=e.charCodeAt(r);t||(I[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();E[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),E[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var s=E[n+8*o>>2],u=E[n+(8*o+4)>>2],i=0;i<u;i++)Z.printChar(e,M[s+i]);a+=u}return E[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,O((v=a.asm.q).buffer),C=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),L)){var n=L;L=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),k(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||F(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(L=function e(){$||ae(),$||(L=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteSIMDModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteSIMDModule}):\"object\"==typeof exports&&(exports.createTFLiteSIMDModule=createTFLiteSIMDModule);","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = (media[type].sources || []).concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","import Bourne from '@hapi/bourne';\n\n/**\n * A list if keys to ignore when parsing.\n * @type {string[]}\n */\n\nconst blacklist = [ '__proto__', 'constructor', 'prototype' ];\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {URL} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\n\nexport function parseURLParams(dontParse = true) {\n    const paramStr = location.search ? location.search : location.hash;\n    const params = {};\n    const paramParts = paramStr && paramStr.substr(1)\n        .split('&') || []; // Detect and ignore hash params for hash routers.\n\n    if (location.hash && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key || blacklist.includes(key.split('.')[0])) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value)\n                    .replace(/\\\\&/, '&');\n                value = decoded === 'undefined' ? undefined : Bourne.parse(decoded);\n            }\n        } catch (e) {\n            console.log(`Failed to parse URL parameter value: ${String(value)}`);\n            return;\n        }\n\n        params[key] = value;\n    });\n    return params;\n}\n\n\nexport function syncWithURL(conferenceConfig) {\n    const params = parseURLParams();\n    Object.keys(params)\n        .forEach(param => {\n            const key = param.replace('config.', '');\n            switch (key) {\n            case 'analytics.disabled':\n                conferenceConfig.analytics.disabled = params[param];\n                break;\n            case 'startWithAudioMuted':\n                conferenceConfig.startAudioMuted = params[param];\n                break;\n            case 'startWithVideoMuted':\n                conferenceConfig.startVideoMuted = params[param];\n                break;\n            case 'p2p.enabled':\n                conferenceConfig.p2p.enabled = params[param];\n                break;\n            default:\n                conferenceConfig[key] = params[param];\n            }\n        });\n    console.log(\"conferenceConfig\",conferenceConfig);    \n    return conferenceConfig;\n}\n\n\n\n\n\n\n\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\nimport {connectionConfig, conferenceConfig} from './config';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\nimport {syncWithURL} from \"./modules/util/parseURLParams\";\nexport const DISCO_JIBRI_FEATURE = 'http://jitsi.org/protocol/jibri';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, options={}) {\n    options = {...connectionConfig, ...options};\n\n    this.token = token;\n    const jwt = this.parseJwt(token);\n    this.name = jwt ? jwt.room : null;\n    this.user = jwt.context.user;\n    this.options = options;\n    this.xmpp = new XMPP(options, token, this.name);\n    this.token = token;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n        return JSON.parse(atob(token.split('.')[1]));\n    }\n    catch (e) {\n        return null;\n    }\n};\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n\n    const usernameOverride\n        = jitsiLocalStorage.getItem('xmpp_username_override');\n    const passwordOverride\n        = jitsiLocalStorage.getItem('xmpp_password_override');\n\n    if (usernameOverride && usernameOverride.length > 0) {\n        options.id = usernameOverride; // eslint-disable-line no-param-reassign\n    }\n    if (passwordOverride && passwordOverride.length > 0) {\n        options.password = passwordOverride; // eslint-disable-line no-param-reassign\n    }\n\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = {...conferenceConfig, ...options};\n    options  = syncWithURL(options);\n    const name  = this.name;\n    if (options.iAmRecorder) {\n        this.addFeature(DISCO_JIBRI_FEATURE);\n    }\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./SariskaMediaTransport').default;\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","import jQuery from \"../core.js\";\n\n(global => {\n    if (typeof global.$ === 'undefined') {\n        global.$ = jQuery;\n    }\n})(global || window || this); // eslint-disable-line no-invalid-this","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(global = global || self, factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\n\t/**\n\t* StropheJS - Stream Management XEP-0198\n\t*\n\t* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n\t* Note: Resumption is not supported in this current implementation.\n\t*\n\t* Reference: http://xmpp.org/extensions/xep-0198.html\n\t*\n\t* @class streamManagement\n\t*/\n\tstrophe_js.Strophe.addConnectionPlugin('streamManagement', {\n\n\t\t/**\n\t\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t\t*/\n\t\tlogging: false,\n\n\t\t/**\n\t\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tautoSendCountOnEveryIncomingStanza: false,\n\n\t\t/**\n\t\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t\t* number of stanzas sent. Set to 0 to disable.\n\t\t* @default 5\n\t\t* @public\n\t\t*/\n\t\trequestResponseInterval: 5,\n\n\t\t/**\n\t\t* @property {Pointer} _c: Strophe connection instance.\n\t\t* @private\n\t\t*/\n\t\t_c: null,\n\n\t\t/**\n\t\t* @property {String} _NS XMPP Namespace.\n\t\t* @private\n\t\t*/\n\t\t_NS: 'urn:xmpp:sm:3',\n\n\t\t/**\n\t\t* @property {Boolean} _isStreamManagementEnabled\n\t\t* @private\n\t\t*/\n\t\t_isStreamManagementEnabled: false,\n\n\t\t/**\n\t\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t\t* from the server.\n\t\t* @private\n\t\t*/\n\t\t_serverProcesssedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t\t* the server.\n\t\t* @private\n\t\t*/\n\t\t_clientProcessedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientSentStanzasCounter\n\t\t* @private\n\t\t*/\n\t\t_clientSentStanzasCounter: null,\n\n\t\t/**\n\t\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t\t* @method _originalXMLOutput\n\t\t* @type {Handler}\n\t\t* @private\n\t\t*/\n\t\t_originalXMLOutput: null,\n\n\t\t/**\n\t\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t\t* @private\n\t\t*/\n\t\t_requestHandler: null,\n\n\t\t/**\n\t\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t\t* @private\n\t\t*/\n\t\t_incomingHandler: null,\n\n\t\t/**\n\t\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t\t*/\n\t\t_requestResponseIntervalCount: 0,\n\n\t\t/**\n\t\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t\t * management namespace.\n\t\t */\n\t\t_isSupported: false,\n\n\t\t/**\n\t\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t\t*/\n\t\t_unacknowledgedStanzas: [],\n\n\t\t/**\n\t\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t\t* Provides the packet id of the stanza as a parameter.\n\t\t* @private\n\t\t*/\n\t\t_acknowledgedStanzaListeners: [],\n\n\t\taddAcknowledgedStanzaListener: function(listener) {\n\t\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t\t},\n\n\t\tenable: function(resume) {\n\t\t\tif (!this._isSupported) {\n\t\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t\t} else if (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._c.send(strophe_js.$build('enable', { xmlns: this._NS, resume }));\n\t\t\tthis._c.flush();\n\t\t\tthis._c.pause();\n\t\t},\n\n\t\tgetResumeToken: function() {\n\t\t\treturn this._resumeToken;\n\t\t},\n\n\t\tisSupported() {\n\t\t\treturn this._isSupported;\n\t\t},\n\n\t\tresume: function() {\n\t\t\tif (!this.getResumeToken()) {\n\t\t\t\tthrow new Error('No resume token');\n\t\t\t}\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t\t}\n\n\t\t\tthis._c.options.explicitResourceBinding = true;\n\t\t\tthis._resuming = true;\n\n\t\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t\t},\n\n\t\trequestAcknowledgement: function() {\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\tthis._c.send(strophe_js.$build('r', { xmlns: this._NS }));\n\t\t},\n\n\t\tgetOutgoingCounter: function() {\n\t\t\treturn this._clientSentStanzasCounter;\n\t\t},\n\n\t\tgetIncomingCounter: function() {\n\t\t\treturn this._clientProcessedStanzasCounter;\n\t\t},\n\n\t\tinit: function(conn) {\n\t\t\tthis._c = conn;\n\t\t\tstrophe_js.Strophe.addNamespace('SM', this._NS);\n\n\t\t\t// Storing original xmlOutput function to use additional logic\n\t\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\t\tthis._originalConnect = this._c.connect;\n\t\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\t\tthis._originalDisconnect = this._c.disconnect;\n\t\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t\t},\n\n\t\t_interceptDisconnect: function() {\n\t\t\tthis._resumeToken = undefined;\n\t\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptDoDisconnect: function() {\n\t\t\tif (this.getResumeToken()\n\t\t\t\t\t&& !this._resuming\n\t\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\t\tthis._resumeState = {\n\t\t\t\t\thandlers: this._c.handlers,\n\t\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t\t};\n\t\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t\t}\n\n\t\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\t\tthis._c._data = [];\n\n\t\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptConnectArgs: function() {\n\t\t\tthis._connectArgs = arguments;\n\n\t\t\tthis._originalConnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t\t},\n\n\t\tstatusChanged: function (status) {\n\t\t\tthis._connectionStatus = status;\n\t\t\tif (!this.getResumeToken()\n\t\t\t\t&& (status === strophe_js.Strophe.Status.CONNECTED || status === strophe_js.Strophe.Status.DISCONNECTED)) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM reset state');\n\n\t\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t\t// FIXME not described in JSDocs\n\t\t\t\tthis._resuming = false;\n\n\t\t\t\tif (status === strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\t\tthis._isSupported = false;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\t\tif (this._requestHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t\t}\n\n\t\t\t\tif (this._incomingHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t\t}\n\n\t\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t\t// FIXME handler instances stored, but never used\n\t\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t\t} else if (status === strophe_js.Strophe.Status.BINDREQUIRED)  {\n\t\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t\t// Restore Strophe handlers\n\t\t\t\tfor (const property in this._resumeState) {\n\t\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t\t}\n\n\t\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\t\tthis._c.send(strophe_js.$build('resume', {\n\t\t\t\t\txmlns: this._NS,\n\t\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\t\tprevid: this._resumeToken\n\t\t\t\t}));\n\t\t\t\tthis._c.flush();\n\t\t\t} else if (status === strophe_js.Strophe.Status.ERROR) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM cleared resume token on error');\n\t\t\t\tthis._resumeToken = undefined;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* This method overrides the send method implemented by Strophe.Connection\n\t\t* to count outgoing stanzas\n\t\t*\n\t\t* @method Send\n\t\t* @public\n\t\t*/\n\t\txmlOutput: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'presence') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'message')) {\n\t\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t\t}\n\n\t\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t\t},\n\n\t\t_handleEnabled: function(elem) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\t// FIXME fail if requested, but not enabled\n\t\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\t\tthis._c.resume();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumeFailed: function(elem) {\n\t\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.ERROR, error, elem);\n\t\t\tthis._c._doDisconnect();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumed: function(elem) {\n\t\t\t// FIXME check if in the correct state\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\tthis._resuming = false;\n\t\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\t\tthis._c.authenticated = true;\n\t\t\tthis._c.restored = true;\n\n\t\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\t\tthis._c.send(stanza);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.CONNECTED, null);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_incomingStanzaHandler: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') || strophe_js.Strophe.isTagEqual(elem, 'presence') || strophe_js.Strophe.isTagEqual(elem, 'message'))  {\n\t\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\t\tif (delta < 0) {\n\t\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < delta; i++) {\n\t\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tstrophe_js.Strophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t},\n\n\t\t_handleServerRequestHandler: function() {\n\t\t\tthis._answerProcessedStanzas();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleServerAck: function(elem){\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_answerProcessedStanzas: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._c.send(strophe_js.$build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t\t}\n\t\t},\n\n\t\t_increaseSentStanzasCounter: function(elem) {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (this._connectionStatus === strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_increaseReceivedStanzasCounter: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t\t}\n\t\t},\n\n\t\t_throwError: function(msg) {\n\t\t\tstrophe_js.Strophe.error(msg);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t});\n\n})));\n//# sourceMappingURL=strophe.stream-management.js.map\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst Word = require('../word');\n\nconst audioRecorder = require('./../audioRecorder');\nconst TranscriptionService = require('./AbstractTranscriptionService');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","\"use strict\";function e(e,r){if(!s)return!1;const n=e.buffer;let u=g.get(n);if(null==u){if((u=t.validate(n))&&r)try{new t.Instance(new t.Module(n)).exports[0]()}catch(e){u=!1}g.set(n,u)}return u}const t=WebAssembly,r=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),n=(...e)=>Uint32Array.of(1836278016,1,...e),u=(...e)=>n(1610679297,33751040,...e,40239360,259),i=(...e)=>r(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),o=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),a=(...e)=>o(...e,2842,4096,28164,28001,357,260,256,560,259,0),s=\"object\"==typeof t,f=e=>s&&\"function\"==typeof e,g=new WeakMap,l=n(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=o(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),p=n(1610679297,33751040,134873089,100664833,185276736),y=r(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),b=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),m=a(3082,2561,17152,0,0,252),A=a(2058,1537,16640,49152),d=u(101318657,301990913,268438272,1835101700,17039717),U=i(5,4,1,3,1,1,10,7,1,5,0,254,3,0),x=u(84344833,6357249,17369600,4259847,186257917,1845758464),w=i(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>s&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return f(t.instantiateStreaming)},feature:{get bigInt(){return e(l,!0)},get bulk(){return e(c)},get exceptions(){return e(p)},get mutableGlobal(){return e(y)},get multiValue(){return e(b)},get saturateConversions(){return e(m)},get signExtensions(){return e(A)},get tailCall(){return e(d)},get threads(){return e(U)},get simd(){return e(x)},get references(){return e(w)},get typeReflection(){return f(t.Memory.type)},get funcReferences(){return f(t.Function)}}};","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}