{"version":3,"file":"sariska-media-transport.min.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAA+B,sBAAID,IAEnCD,EAA4B,sBAAIC,GACjC,CATD,CASGK,MAAM,olMCLF,IAAKC,EAAqB,SAArBA,GAAqB,OAArBA,EAAqB,4DAArBA,EAAqB,kCAArBA,EAAqB,0CAArBA,EAAqB,4CAArBA,EAAqB,4CAArBA,EAAqB,8CAArBA,EAAqB,4CAArBA,EAAqB,0DAArBA,EAAqB,4DAArBA,EAAqB,mEAArBA,EAAqB,kDAArBA,EAAqB,kCAArBA,EAAqB,gDAArBA,EAAqB,kCAArBA,EAAqB,uEAArBA,EAAqB,mDAArBA,EAAqB,yDAArBA,EAAqB,gDAArBA,EAAqB,mCAArBA,EAAqB,gDAArBA,EAAqB,+DAArBA,CAAqB,MAiH1B,MAAMC,EAA0BD,EAAsBC,wBAChDC,EAAaF,EAAsBE,WACnCC,EAAiBH,EAAsBG,eACvCC,EAAuBJ,EAAsBI,qBAC7CC,EAAuBL,EAAsBK,qBAC7CC,EAAmBN,EAAsBM,iBACzCC,EAAuBP,EAAsBO,qBAC7CC,EAAoBR,EAAsBQ,kBAC1CC,EAAqBT,EAAsBS,mBAC3CC,EAA2BV,EAAsBU,yBACjDC,EAAqBX,EAAsBW,mBAC3CC,EAAaZ,EAAsBY,WACnCC,EAAoBb,EAAsBa,kBAC1CC,EAAad,EAAsBc,WACnCC,EAA+Bf,EAAsBe,6BACrDC,EAAsBhB,EAAsBgB,oBAC5CC,EAAyBjB,EAAsBiB,uBAC/CC,EAAoBlB,EAAsBkB,kBAC1CC,EAAanB,EAAsBmB,WACnCC,EAAoBpB,EAAsBoB,kBAC1CC,EAA4BrB,EAAsBqB,0BCrIxD,IAAKC,EAAqB,SAArBA,GAAqB,OAArBA,EAAqB,gEAArBA,EAAqB,+EAArBA,EAAqB,qDAArBA,EAAqB,iEAArBA,EAAqB,oCAArBA,EAAqB,sCAArBA,EAAqB,0DAArBA,EAAqB,sCAArBA,EAAqB,kCAArBA,EAAqB,oDAArBA,EAAqB,0DAArBA,EAAqB,0DAArBA,EAAqB,oDAArBA,EAAqB,mDAArBA,EAAqB,mDAArBA,EAAqB,qDAArBA,EAAqB,sDAArBA,EAAqB,2DAArBA,EAAqB,qDAArBA,EAAqB,iEAArBA,EAAqB,6DAArBA,EAAqB,wCAArBA,EAAqB,2BAArBA,EAAqB,mDAArBA,EAAqB,4DAArBA,EAAqB,+DAArBA,EAAqB,mDAArBA,EAAqB,yDAArBA,EAAqB,0DAArBA,EAAqB,wEAArBA,EAAqB,qDAArBA,EAAqB,8CAArBA,EAAqB,2CAArBA,EAAqB,iCAArBA,EAAqB,+EAArBA,EAAqB,6DAArBA,EAAqB,qEAArBA,EAAqB,uEAArBA,EAAqB,mEAArBA,EAAqB,kCAArBA,EAAqB,qDAArBA,EAAqB,kDAArBA,EAAqB,yDAArBA,EAAqB,6EAArBA,EAAqB,8EAArBA,EAAqB,mEAArBA,EAAqB,yCAArBA,EAAqB,4CAArBA,EAAqB,8CAArBA,EAAqB,+CAArBA,EAAqB,oCAArBA,EAAqB,0DAArBA,EAAqB,iDAArBA,EAAqB,wCAArBA,EAAqB,uDAArBA,EAAqB,qEAArBA,EAAqB,oCAArBA,EAAqB,gCAArBA,EAAqB,2CAArBA,EAAqB,+CAArBA,EAAqB,+EAArBA,EAAqB,+CAArBA,EAAqB,gDAArBA,EAAqB,kDAArBA,EAAqB,4CAArBA,EAAqB,2DAArBA,EAAqB,2DAArBA,EAAqB,yDAArBA,EAAqB,mFAArBA,EAAqB,mFAArBA,EAAqB,qEAArBA,EAAqB,2DAArBA,EAAqB,mDAArBA,EAAqB,oDAArBA,EAAqB,yCAArBA,EAAqB,+CAArBA,EAAqB,qEAArBA,EAAqB,6DAArBA,EAAqB,qEAArBA,CAAqB,MAwd1B,MAAMC,EAA2BD,EAAsBC,yBACjDC,EAAmCF,EAAsBE,iCACzDC,EAAsBH,EAAsBG,oBAC5CC,EAA6BJ,EAAsBI,2BACnDC,EAAmBL,EAAsBK,iBACzCC,EAAoBN,EAAsBM,kBAC1CC,EAA8BP,EAAsBO,4BACpDC,EAAoBR,EAAsBQ,kBAC1CC,EAAkBT,EAAsBS,gBACxCC,EAA2BV,EAAsBU,yBACjDC,GAAyBX,EAAsBW,uBAC/CC,GAAyBZ,EAAsBY,uBAC/CC,GAAsBb,EAAsBa,oBAC5CC,GAAsBd,EAAsBc,oBAC5CC,GAAsBf,EAAsBe,oBAC5CC,GAAuBhB,EAAsBgB,qBAC7CC,GAA2BjB,EAAsBiB,yBACjDC,GAA+BlB,EAAsBkB,6BACrDC,GAAuBnB,EAAsBmB,qBAC7CC,GAA4BpB,EAAsBoB,0BAClDC,GAA0BrB,EAAsBqB,wBAChDC,GAA8BtB,EAAsBsB,4BACpDC,GAA0BvB,EAAsBuB,wBAChDC,GAA8BxB,EAAsBwB,4BACpDC,GAAgBzB,EAAsByB,cACtCC,GAAS1B,EAAsB0B,OAC/BC,GAAqB3B,EAAsB2B,mBAC3CC,GAA6B5B,EAAsB4B,2BACnDC,GAA2B7B,EAAsB6B,yBACjDC,GAA4B9B,EAAsB8B,0BAClDC,GAAqB/B,EAAsB+B,mBAC3CC,GAAwBhC,EAAsBgC,sBAC9CC,GAAyBjC,EAAsBiC,uBAC/CC,GAAgClC,EAAsBkC,8BACtDC,GAAuBnC,EAAsBmC,qBAC7CC,GAAmBpC,EAAsBoC,iBACzCC,GAAiBrC,EAAsBqC,eACvCC,GAAYtC,EAAsBsC,UAClCC,GAAmCvC,EAAsBuC,iCACzDC,GAA2BxC,EAAsBwC,yBACjDC,GAA8BzC,EAAsByC,4BACpDC,GAA+B1C,EAAsB0C,6BACrDC,GAAa3C,EAAsB2C,WACnCC,GAAuB5C,EAAsB4C,qBAC7CC,GAAqB7C,EAAsB6C,mBAC3CC,GAAyB9C,EAAsB8C,uBAC/CC,GAAoC/C,EAAsB+C,kCAC1DC,GAAqChD,EAAsBgD,mCAC3DC,GAA6BjD,EAAsBiD,2BACnDC,GAAgBlD,EAAsBkD,cACtCC,GAAkBnD,EAAsBmD,gBACxCC,GAAmBpD,EAAsBoD,iBACzCC,GAAmBrD,EAAsBqD,iBACzCC,GAActD,EAAsBsD,YACpCC,GAA4BvD,EAAsBuD,0BAClDC,GAAqBxD,EAAsBwD,mBAC3CC,GAAgBzD,EAAsByD,cACtCC,GAAwB1D,EAAsB0D,sBAC9CC,GAA+B3D,EAAsB2D,6BACrDC,GAAc5D,EAAsB4D,YACpCC,GAAY7D,EAAsB6D,UAClCC,GAAoB9D,EAAsB8D,kBAC1CC,GAAsB/D,EAAsB+D,oBAC5CC,GAAmChE,EAAsBgE,iCACzDC,GAAmBjE,EAAsBiE,iBACzCC,GAAoBlE,EAAsBkE,kBAC1CC,GAAqBnE,EAAsBmE,mBAC3CC,GAAkBpE,EAAsBoE,gBACxCC,GAAyBrE,EAAsBqE,uBAC/CC,GAAyBtE,EAAsBsE,uBAC/CC,GAAwBvE,EAAsBuE,sBAC9CC,GAAqCxE,EAAsBwE,mCAC3DC,GAAqCzE,EAAsByE,mCAC3DC,GAA8B1E,EAAsB0E,4BACpDC,GAAyB3E,EAAsB2E,uBAC/CC,GAAqB5E,EAAsB4E,mBAC3CC,GAA2B7E,EAAsB6E,yBACjDC,GAAgB9E,EAAsB8E,cACtCC,GAAmB/E,EAAsB+E,kGC1iB/C,IAAKC,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAgB,oCAAhBA,EAAgB,qDAAhBA,EAAgB,sDAAhBA,EAAgB,4CAAhBA,EAAgB,iDAAhBA,EAAgB,gDAAhBA,EAAgB,sCAAhBA,EAAgB,gEAAhBA,EAAgB,0CAAhBA,EAAgB,8BAAhBA,CAAgB,MAyErB,MAAMC,GAAsBD,GAAiBC,oBACvC1B,GAA4ByB,GAAiBzB,0BAC7C2B,GAA6BF,GAAiBE,2BAC9C1B,GAAqBwB,GAAiBxB,mBACtC2B,GAA0BH,GAAiBG,wBAC3CC,GAAsBJ,GAAiBI,oBACvC/C,GAAiB2C,GAAiB3C,eAClCgD,GAAiCL,GAAiBK,+BAClDC,GAAsBN,GAAiBM,oBACvC7B,GAAgBuB,GAAiBvB,cClFjC8B,GAAuB,sDCI7B,IAAKC,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAgB,0CAAhBA,EAAgB,kEAAhBA,EAAgB,0EAAhBA,EAAgB,sBAAhBA,EAAgB,0BAAhBA,EAAgB,0CAAhBA,EAAgB,8DAAhBA,EAAgB,8DAAhBA,EAAgB,sBAAhBA,EAAgB,4CAAhBA,EAAgB,8CAAhBA,EAAgB,oDAAhBA,CAAgB,MAsErB,MAAMC,GAAoBD,GAAiBC,kBACrCC,GAAgCF,GAAiBE,8BACjDC,GAAoCH,GAAiBG,kCACrDC,GAAUJ,GAAiBI,QAC3BC,GAAYL,GAAiBK,UAC7BC,GAAoBN,GAAiBM,kBACrCC,GAA8BP,GAAiBO,4BAC/CC,GAA8BR,GAAiBQ,4BAC/CC,GAAUT,GAAiBS,QAC3BC,GAAoBV,GAAiBU,kBACrCC,GAAwBX,GAAiBW,sBACzCC,GAAyBZ,GAAiBY,uBCnFjDC,GAA6B,CAAC,EA6CpC,SAASC,GAAgBC,EAAOC,EAASC,GACrC,GAAqB,iBAAVF,QAA4C,IAAfA,EAAMG,KAkB1C,OARAC,KAAKC,IAAM,CACPL,QACAM,YAAaL,EACbC,QAASA,GAAWK,MAAMC,QAAQN,GAC5BA,EAAQO,MAAM,QACdC,GAGFV,EAAMG,MACd,IAAK,kBACL,IAAK,wBACL,IAAK,gBACDC,KAAKD,KAAOlB,GACZmB,KAAKO,QACCb,GAA2BM,KAAKD,OAC3BC,KAAKC,IAAIH,SAAW,IAAIU,KAAK,MACxC,MACJ,IAAK,uBACL,IAAK,gBACDR,KAAKD,KAAOlB,GACZmB,KAAKO,QACCb,GAA2BM,KAAKD,OAC3BC,KAAKC,IAAIH,SAAW,IAAIU,KAAK,MACxC,MACJ,IAAK,8BACL,IAAK,uBAAwB,CACzB,MAAMC,EAAiBb,EAAMa,gBAAkBb,EAAMc,WAKjDb,GACOA,EAAQc,SACNb,GAAWA,EAAQc,QAAQ,UAAY,KACrB,aAAnBH,GACsB,aAAnBA,GACmB,cAAnBA,GACmB,cAAnBA,GACmB,UAAnBA,GACmB,WAAnBA,GACmB,aAAnBA,IACXT,KAAKD,KAAOlB,GACZmB,KAAKO,QACCb,GAA2BM,KAAKD,MA6CtD,SAA2Cc,EAAsBX,GAC7D,GAAIA,GAAeA,EAAYS,OAAST,EAAYS,MAAMG,UACtD,OAAQD,GACR,IAAK,QACD,OAAOX,EAAYS,MAAMG,UAAUC,SACvC,IAAK,SACD,OAAOb,EAAYS,MAAMG,UAAUE,UACvC,QACI,OAAOd,EAAYS,MAAMG,UAAUD,IAAyB,GAIpE,MAAO,EACX,CAzD0BI,CACER,EACAZ,KAEZG,KAAKD,KAAOlB,GACZmB,KAAKO,QACCb,GAA2BM,KAAKD,MAC5BH,EAAMa,gBAEpB,KACJ,CAEA,QACIT,KAAKD,KAAOlB,GACZmB,KAAKO,QACCX,EAAMW,SAAWb,GAA2BM,KAAKD,UAGxD,IAAqB,iBAAVH,EAWd,MAAM,IAAIsB,MAAM,qBAVZxB,GAA2BE,IAC3BI,KAAKD,KAAOH,EACZI,KAAKO,QAAUV,GAAWH,GAA2BE,IAKrDI,KAAKO,QAAUX,CAIvB,CAEAI,KAAKmB,MAAQvB,EAAMuB,QAAS,IAAID,OAAQC,KAC5C,CAnIAzB,GAA2Bb,IACrB,sCACNa,GAA2Bb,IACrB,sCACNa,GAA2Bb,IACrB,mCACNa,GAA2Bb,IACrB,mCACNa,GAA2Bb,IACrB,kCACNa,GAA2Bb,IACrB,6BACNa,GAA2Bb,IACrB,4CACNa,GAA2Bb,IACrB,2CACNa,GAA2Bb,IACrB,sCACNa,GAA2Bb,IACrB,iDACNa,GAA2Bb,IACrB,kCACNa,GAA2Bb,IACrB,iDA8GNc,GAAgByB,UAAYC,OAAOC,OAAOJ,MAAME,WAChDzB,GAAgByB,UAAUG,YAAc5B,GAuBxC,YCzIO,IAAK6B,GAAe,SAAfA,GAAe,OAAfA,EAAe,+BAAfA,EAAe,iBAAfA,EAAe,mBAAfA,EAAe,aAAfA,EAAe,gCAAfA,EAAe,kDAAfA,EAAe,sDAAfA,EAAe,oDAAfA,EAAe,oCAAfA,EAAe,uDAAfA,EAAe,qDAAfA,EAAe,8BAAfA,EAAe,qCAAfA,EAAe,2BAAfA,EAAe,yCAAfA,EAAe,oCAAfA,EAAe,kDAAfA,EAAe,oBAAfA,EAAe,4BAAfA,EAAe,kEAAfA,EAAe,sCAAfA,EAAe,oCAAfA,EAAe,8BAAfA,CAAe,MAiMpB,MAAMC,GAAmBD,GAAgBC,iBACnCC,GAAYF,GAAgBE,UAC5BC,GAAaH,GAAgBG,WAC7BC,GAAUJ,GAAgBI,QAC1BC,GAAwBL,GAAgBK,sBACxCC,GAA2BN,GAAgBM,yBAC3CC,GAA4BP,GAAgBO,0BAC5CC,GAA2BR,GAAgBQ,yBAC3CC,GAA0BT,GAAgBS,wBAC1CC,GAA4BV,GAAgBU,0BAC5CC,GAA2BX,GAAgBW,yBAC3CC,GAAsBZ,GAAgBY,oBACtCC,GAAyBb,GAAgBa,uBACzCC,GAAoBd,GAAgBc,kBACpCC,GAA2Bf,GAAgBe,yBAC3CC,GAAmBhB,GAAgBgB,iBACnCC,GAA0BjB,GAAgBiB,wBAC1CC,GAAWlB,GAAgBkB,SAC3BC,GAAenB,GAAgBmB,aAC/BC,GAAkCpB,GAAgBoB,gCAClDC,GAAoBrB,GAAgBqB,kBACpCC,GAAgBtB,GAAgBsB,cAChCC,GAAgBvB,GAAgBuB,cAkChCC,GAAwBA,CAAEC,EAAgBC,KAAkB,CACrED,SACAC,aACAC,OAAQ,aACRC,KAAM5B,GAAgBC,mBAcb4B,GAAoCA,CAAEC,EAAgBJ,KAAkB,CACjFD,OAAQ,2BACRM,cAAeD,EACfJ,aACAC,OAAQ,2BACRC,KAAM5B,GAAgBC,mBAoCb+B,GAA0B,SAAEP,GAAgD,IAAEC,EAAkBO,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAAQ,CACtHL,KAAM5B,GAAgBC,iBACtB0B,OAAQ,iBACRF,SACAC,aACH,EA+BYS,GAAoB,SAAEV,GAAe,IAAEC,EAAkBO,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAAQ,CAC/EL,KAAM5B,GAAgBC,iBACtBwB,SACAE,OAAQ,SACRD,aACH,EAuBYU,GAAiB,SAAEX,GAAe,IAAEC,EAAkBO,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAAQ,CAC5EL,KAAM5B,GAAgBC,iBACtBwB,SACAE,OAAQ,MACRD,aACH,EAKYW,GAA6BC,IAAkB,CACxDV,KAAM5B,GAAgBC,iBACtBwB,OAAQ,iBACRa,cA8CSC,GAAwBb,IAAkB,CACnDE,KAAM5B,GAAgBC,iBACtBwB,OAAQ,YACRC,eC1cG,IAAKc,GAAM,SAANA,GAAM,OAANA,EAAM,oCAANA,EAAM,6CAANA,EAAM,6CAANA,EAAM,8CAANA,EAAM,+CAANA,CAAM,MAyCX,MAAMC,GAAcD,GAAOC,YACrBC,GAAkBF,GAAOE,gBACzBC,GAAkBH,GAAOG,gBACzBC,GAAmBJ,GAAOI,iBAC1BC,GAAmBL,GAAOK,mDC1ChC,MAAMC,GAAS,SACTC,GAAQ,QACRC,GAAU,UACVC,GAAoB,YACpBC,GAAS,SACTC,GAAO,OACPC,GAAW,WACXC,GAAe,eACfC,GAAU,UCJjBC,GAAwB,CAC5B,OAAUT,GACV,SAAYA,GACZ,MAASC,GACT,QAAWC,GACX,oBAAqBC,GACrB,OAAUC,IA4CZ,SAASM,KACP,MAAMC,EAAYC,UAAUD,UAE5B,GAAIA,EAAUE,MAAM,YAAa,CAC/B,MAAMC,EAAUH,EAAUE,MAAM,6BAA6B,GAC7D,MAAO,CACLpF,KAAM6E,GACNQ,UAEJ,CACF,CAQA,SAASC,KACP,MAAMJ,EAAYC,UAAUD,UAE5B,GAAIA,EAAUE,MAAM,eAAgB,CAClC,MAAMC,EAAUH,EAAUE,MAAM,yBAAyB,GACzD,MAAO,CACLpF,KAAM4E,GACNS,UAEJ,CACF,CAOA,SAASE,KACP,MAAMH,EAAQD,UAAUD,UAAUE,MAAM,wCACxC,IAAIC,EAIJ,GAAID,GAA+B,gBAAtBD,UAAUK,QAA2B,CAChD,IAAIxF,EASJ,OAPIoF,GAASA,EAAMzB,OAAS,IAC1B3D,EAAOoF,EAAM,GACbC,EAAUD,EAAM,IAGlBpF,IAASA,EAAO,gBAChBqF,IAAYA,EAAU,WACf,CACLrF,KAAM8E,GACNO,UAEJ,CACF,CA8Ce,MAAMI,GAQnBjE,YAAYkE,GACV,IAAI1F,EAAMqF,EAGV,GAFApF,KAAK0F,QAAUC,KAAAA,UAAiBT,UAAUD,gBAEf,IAAhBQ,EAA6B,CACtC,MAAMG,EAnDZ,SAAiBC,GACf,IAAIJ,EACJ,MAAMK,EAAY,CAACR,GAAoBN,GAAiBK,IAExD,IAAK,IAAIU,EAAI,EAAGA,EAAID,EAAUpC,OAAQqC,IAGpC,GAFAN,EAAcK,EAAUC,KAEpBN,EACF,OAAOA,EAIX,MAAM1F,EAAO8F,EAAOG,iBAEpB,OAAIjG,KAAQgF,GACH,CACLhF,KAAMgF,GAAsBhF,GAC5BqF,QAASS,EAAOI,sBAKpBR,EAtHF,WACE,MAAMR,EAAYC,UAAUD,UACtBQ,EAAc,CAClB1F,KAAM+E,GACNM,aAAS9E,GAGX,GAAI2E,EAAUE,MAAM,YAAcF,EAAUE,MAAM,QAEhD,GAAIF,EAAUE,MAAM,WAAY,CAE9B,MAAMC,EAAUH,EAAUE,MAAM,oBAAoB,GAEhDe,OAAOC,SAASf,EAAS,IAAM,KACjCK,EAAY1F,KAAOuE,GACnBmB,EAAYL,QAAUA,EAE1B,MACEK,EAAY1F,KAAOuE,GACnBmB,EAAYL,QAAUH,EAAUE,MAAM,oBAAoB,GAI9D,OAAOM,CACT,CA8FgBW,GAEVX,GAIG,CACL1F,KAAM+E,GACNM,aAAS9E,GAEb,CAmBkC+F,CAAQrG,KAAK0F,SAEzC3F,EAAO6F,EAAoB7F,KAC3BqF,EAAUQ,EAAoBR,OAChC,MAAWK,EAAY1F,QAAQgF,IAC7BhF,EAAOgF,GAAsBU,EAAY1F,MACzCqF,EAAUK,EAAYL,UAEtBrF,EAAO+E,GACPM,OAAU9E,GAGZN,KAAKsG,MAAQvG,EACbC,KAAKuG,SAAWnB,CAClB,CAOAoB,UACE,OAAOxG,KAAKsG,KACd,CAOAG,WACE,OAAOzG,KAAKsG,QAAUhC,EACxB,CAOAoC,UACE,OAAO1G,KAAKsG,QAAU/B,EACxB,CAOAoC,YACE,OAAO3G,KAAKsG,QAAU9B,EACxB,CAOAoC,cACE,OAAO5G,KAAKsG,QAAU7B,EACxB,CAOAoC,WACE,OAAO7G,KAAKsG,QAAU5B,EACxB,CAOAoC,SACE,OAAO9G,KAAKsG,QAAU3B,EACxB,CAOAoC,aACE,OAAO/G,KAAKsG,QAAU1B,EACxB,CAOAoC,gBACE,OAAOhH,KAAKsG,QAAUzB,EACxB,CAOAoC,aACE,OAAOjH,KAAKuG,QACd,CAgBAW,gBAAgBC,GACd,GAAInH,KAAKuG,SACP,OAAOvG,KAAK0F,QAAQ0B,UAAUD,EAElC,CAYAE,qBAAqBjC,GACnB,OAAOpF,KAAKkH,gBAAgB,CAC1B,CAAClH,KAAKsG,OAAS,IAAGlB,KAEtB,CAYAkC,kBAAkBlC,GAChB,OAAOpF,KAAKkH,gBAAgB,CAC1B,CAAClH,KAAKsG,OAAS,IAAGlB,KAEtB,CAaAmC,iBAAiBnC,GACf,OAAOpF,KAAKkH,gBAAgB,CAC1B,CAAClH,KAAKsG,OAAS,IAAGlB,KAEtB,EClVF,MAAMoC,WAA0BC,MAC9BlG,cARF,IAA8BmG,EAAKC,EAS/BC,SAAMnE,WATyBkE,EAWG,CAAC,GAXTD,EAWJ,cAAN1H,KAX0CqB,OAAOwG,eAWjD7H,KAXqE0H,EAAK,CAAEC,MAAOA,EAAOG,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAW1IhI,KAXgK0H,GAAOC,CAYzL,CAOAM,QACEjI,KAAKkI,SAAW,CAAC,CACnB,CAQIxE,aACF,OAAOrC,OAAO8G,KAAKnI,KAAKkI,UAAUxE,MACpC,CASA0E,QAAQC,GACN,OAAOrI,KAAKkI,SAASG,EACvB,CAWAC,QAAQD,EAASE,GACfvI,KAAKkI,SAASG,GAAWE,CAC3B,CASAC,WAAWH,UACFrI,KAAKkI,SAASG,EACvB,CASAX,IAAIe,GACF,MAAMN,EAAO9G,OAAO8G,KAAKnI,KAAKkI,UAE9B,KAAIC,EAAKzE,QAAU+E,GAInB,OAAON,EAAKM,EACd,CAQAC,YACE,OAAOC,KAAKC,UAAU5I,KAAKkI,SAC7B,EAQF,MAAMW,WAA0BpB,MAK9BlG,cACEqG,QAEA,IACE5H,KAAKkI,SAAWY,OAAOC,aACvB/I,KAAKgJ,uBAAwB,CAC/B,CAAE,MAAOC,GAAS,CAGbjJ,KAAKkI,WAERgB,QAAQC,KAAK,8BACbnJ,KAAKkI,SAAW,IAAIV,GACpBxH,KAAKgJ,uBAAwB,EAEjC,CAQAI,yBACE,OAAOpJ,KAAKgJ,qBACd,CAQAf,QACEjI,KAAKkI,SAASD,QAEdjI,KAAKqJ,KAAK,UACZ,CAQI3F,aACF,OAAO1D,KAAKkI,SAASxE,MACvB,CAUA0E,QAAQC,GACN,OAAOrI,KAAKkI,SAASE,QAAQC,EAC/B,CAUAC,QAAQD,EAASE,GAAwC,IAA9Be,EAAoB7F,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GAC7CzD,KAAKkI,SAASI,QAAQD,EAASE,GAE1Be,GACHtJ,KAAKqJ,KAAK,UAEd,CAOAb,WAAWH,GACTrI,KAAKkI,SAASM,WAAWH,GAEzBrI,KAAKqJ,KAAK,UACZ,CAUA3B,IAAI3B,GACF,OAAO/F,KAAKkI,SAASR,IAAI3B,EAC3B,CAQA2C,YACE,GAAI1I,KAAKoJ,yBACP,OAAOpJ,KAAKkI,SAASQ,YAGvB,MAAMhF,EAAS1D,KAAKkI,SAASxE,OACvB6F,EAAsB,CAAC,EAE7B,IAAK,IAAIxD,EAAI,EAAGA,EAAIrC,EAAQqC,IAAK,CAC/B,MAAM2B,EAAM1H,KAAKkI,SAASR,IAAI3B,GAE9BwD,EAAoB7B,GAAO1H,KAAKkI,SAASE,QAAQV,EACnD,CAEA,OAAOiB,KAAKC,UAAUW,EACxB,EAIK,MAAMC,GAAoB,IAAIX,GCpO/BY,IAASC,EAAAA,EAAAA,qDCDf,ODiBe,cAAkClE,GAI7CjE,cACIqG,QACA6B,GAAOE,KAAM,sBAAqB3J,KAAKwG,mBAAmBxG,KAAKiH,eACnE,CASA2C,8BACI,OAAO5J,KAAK6J,mBAAqB7J,KAAK8J,iBAAmB9J,KAAK2G,WAClE,CAcAkD,kBACI,OAAQ7J,KAAKyG,YACNzG,KAAK+G,cACL/G,KAAK8G,UACL9G,KAAK0G,aACJ1G,KAAK8J,eACjB,CAOAC,eACI,MAAM,UAAE9E,EAAS,eAAE+E,EAAc,SAAEC,GAAa/E,UAEhD,OAAOgF,QAAQjF,EAAUE,MAAM,qBACvB6E,GAAkBA,EAAiB,GAAK,WAAWG,KAAKF,EACpE,CAUAH,gBAEI,OAAO9J,KAAK0F,QAAQ0E,SAAS,gBACY,IAA3BlF,UAAUmF,mBAC8B,IAAxCnF,UAAUmF,aAAaC,mBACM,IAA7BxB,OAAOyB,mBAEdlJ,OAAO8G,KAAKoC,kBAAkBnJ,WAAWR,QAAQ,qBAAuB,CACnF,CAOA4J,QACI,MAAO,eAAgB1B,QAAUA,OAAO2B,WAAW,6BAA6BC,OACpF,CAOAC,cACI,QAAI3K,KAAK6G,YAAc7G,KAAK4K,oBAjGA,MAqGpB5K,KAAK6J,mBAAqB7J,KAAK6K,4BAtGX,IAuGrB7K,KAAK2G,aACL3G,KAAKgH,iBACLhH,KAAK8J,gBAChB,CAMAgB,4BACI,OAAO9K,KAAK6J,mBAAqB7J,KAAK2G,WAC1C,CAMAoE,wBACI,OAAO/K,KAAKgL,kBAvHa,EAwH7B,CAQAC,qCACI,OAAOjL,KAAK2G,aAAe3G,KAAKsH,kBAAkB,KACtD,CAQA4D,qCACI,OAAOlL,KAAK6J,mBAAqB7J,KAAKgH,eAC1C,CAOAmE,8BAGI,OAAQnL,KAAK2G,cAAgB3G,KAAK8J,eACtC,CAMAsB,2BACI,OAAOlB,QAAQpB,OAAOyB,mBACf,wBAAyBzB,OAAOyB,kBAAkBnJ,WAClD0H,OAAOuC,qBAC0C,IAA1CvC,OAAOuC,eAAeC,mBAI5BtL,KAAK8J,eACjB,CAMAyB,4BACI,OAAOrG,UAAUmF,mBACuC,IAA1CnF,UAAUmF,aAAamB,qBACqB,IAA5CtG,UAAUmF,aAAaoB,gBACzC,CAOAC,8BACI,YAA6C,IAA/B5C,OAAO6C,qBACdA,oBAAoBC,oBAAoBhL,QAAQ,aAAe,CAC1E,CAKAiL,wBACI,YAAwC,IAA1B/C,OAAOuC,gBACdhK,OAAO8G,KAAKkD,eAAejK,WAAWR,QAAQ,8BAAgC,CACzF,CAOAkL,wBASI,OAAQ9L,KAAK2G,WACjB,CAOAoF,0BACI,OAAO/L,KAAK6J,mBAAqB7J,KAAKsH,kBAAkB,IAC5D,CAOA0E,cACI,OAAOhM,KAAK6J,mBAAqB7J,KAAKgH,eAC1C,CAOAiF,6BACI,OAAOjM,KAAK6J,mBAAqB7J,KAAKgH,iBAAmBhH,KAAK8J,eAClE,CAMAoC,uBACI,OAAO,CACX,CAMAC,0BACI,YAA4C,IAA9BjH,UAAUkH,sBACkB,IAA3BlH,UAAUmF,mBAET,IADEnF,UAAUmF,aAAa+B,eAE7C,CAWAC,2BACI,OAAOnC,QAAQpB,OAAOwD,sBAC1B,CAMAC,4BACI,QAAqC,IAAxBzD,OAAO0D,eACb1D,OAAO0D,aAAapL,UAAUqL,qBACjC,OAAO,EAKX,MAAMC,EAAS,IAAIC,eAEnB,IAGI,OAFA7D,OAAO8D,YAAYF,EAAQ,IAAK,CAAEA,KAE3B,CACX,CAAE,MACE,OAAO,CACX,CACJ,CAKAG,mBACI,OAAO3C,QAAQpB,OAAO0D,cACf1D,OAAO0D,aAAalB,iBACpBxC,OAAO0D,aAAalB,gBAAgB,SAASwB,OAAOC,MAAKC,GAA4B,cAAnBA,EAAMC,YACxEnE,OAAOuC,gBACPvC,OAAOuC,eAAeC,iBACtBxC,OAAOuC,eAAeC,gBAAgB,SAASwB,OAAOC,MAAKC,GAA4B,cAAnBA,EAAMC,WACrF,CAOAC,sBAGI,QAASlN,KAAK+G,cAAiB/G,KAAK6K,2BAA6B,GACrE,CAOAsC,uBACI,OAAOnN,KAAK6J,iBAChB,CAOAuD,cAGI,QAASpN,KAAK2G,aAAe3G,KAAKsH,kBAAkB,MACxD,CAOAuD,2BACI,GAAI7K,KAAK6J,kBAAmB,CAExB,GAAI7J,KAAK8G,SAEL,OAAOZ,OAAOC,SAASkH,QAAQC,SAASC,SAAU,IAQtD,MAAMC,EAAKtI,UAAUD,UAErB,GAAIuI,EAAGrI,MAAM,UAIT,OAFMe,OAAOC,SAASqH,EAAGrI,MAAM,oBAAoB,GAAI,GAI/D,CAEA,OAAQ,CACZ,CAOAyF,oBACI,OAAI5K,KAAK6G,WACEX,OAAOC,SAASnG,KAAKiH,aAAc,KAGtC,CACZ,CAOA+D,iBACI,OAAIhL,KAAK8J,gBACE5D,OAAOC,SAASnG,KAAKiH,aAAc,KAGtC,CACZ,4BEpYJ,MAGMwC,IAASC,EAAAA,EAAAA,qDAoVf,OAxSA,MAIInI,cACIvB,KAAKyN,OACT,CAOAA,QAOIzN,KAAK0N,UAAW,EAMhB1N,KAAK2N,kBAAoB,IAAIC,IAO7B5N,KAAK6N,MAAQ,GAMb7N,KAAK8N,oBAAsB,CAAC,EAO5B9N,KAAK+N,eAAiB,GAEtB/N,KAAKgO,uBAAuB,CACxB,WAAc9I,UAAUD,UACxB,aAAgBgJ,GAAQzH,WAEhC,CAKA0H,UACIzE,GAAON,KAAK,mCAERnJ,KAAK2N,mBAAqB3N,KAAK2N,kBAAkBQ,KAAO,GACxDnO,KAAK2N,kBAAkBS,SAAQC,IACI,mBAApBA,EAAQH,SACfG,EAAQH,SACZ,IAIRlO,KAAKsO,qBAAqB,IAC1BtO,KAAK0N,UAAW,CACpB,CAOAY,qBAAqBC,GACjB,GAAIvO,KAAK0N,SACL,OAGJ1N,KAAK2N,kBAAoB,IAAIC,IAAIW,GAEjCvO,KAAKwO,qBAGL,MAAMX,EAAQ7N,KAAK6N,MAEnB7N,KAAK6N,MAAQ,KACTA,GACAA,EAAMO,SAAQK,GAASzO,KAAK0O,WAAWD,IAE/C,CAOAD,qBACIxO,KAAK2N,kBAAkBS,SAAQC,IAC3B,IACIA,EAAQM,kBAAkB3O,KAAK8N,oBACnC,CAAE,MAAOlO,GACL6J,GAAON,KACA,uEAAsBvJ,IACjC,IAER,CAYAoO,uBAAuBY,GACnB5O,KAAK8N,oBAAsB,IACpB9N,KAAK8N,uBACLc,GAGP5O,KAAKwO,oBACT,CAOAK,kBAAkB9O,GACdC,KAAK+N,eAAiBhO,EACtBC,KAAKgO,uBAAuB,CAAE,gBAAmBjO,GACrD,CAeA+O,UAAUC,GAA4B,IAAjBH,EAAUnL,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/B,GAAIzD,KAAK0N,SACL,OAGJ,IAAIe,EAAQ,KAEa,iBAAdM,EACPN,EAAQ,CACJrL,KAAM3B,GACNwB,OAAQ8L,EACRxL,cAAewL,EACf5L,OAAQ4L,EACR7L,WAAY0L,GAEY,iBAAdG,IACdN,EAAQM,GAGP/O,KAAKgP,sBAAsBP,GAOhCzO,KAAK0O,WAAWD,GANZhF,GAAO7J,MACF,mCAAkC+I,KAAKC,UAAU6F,KAM9D,CAcAO,sBAAsBP,GAClB,IAAKA,EACD,OAAO,EAGNA,EAAMrL,OACPqL,EAAMrL,KAAO3B,IAGjB,MAAM2B,EAAOqL,EAAMrL,KAEnB,OAAIA,IAAS3B,IAAoB2B,IAAS1B,IACnC0B,IAASxB,IAAWwB,IAASzB,IAChC8H,GAAO7J,MAAO,uBAAsBwD,MAE7B,GAGPA,IAAS1B,GACFwI,QAAQuE,EAAM1O,OAKzB0O,EAAMxL,OAASwL,EAAMxL,QAAUwL,EAAM1O,MAAQ0O,EAAMlL,cACnDkL,EAAMlL,cAAgBkL,EAAMlL,eAAiBkL,EAAM1O,MAAQ0O,EAAMxL,OACjEwL,EAAMtL,OAASsL,EAAMtL,QAAUsL,EAAM1O,MAAQ0O,EAAMxL,QAC5CwL,EAAMlL,cAERkL,EAAMxL,QAAWwL,EAAMlL,eAAkBkL,EAAMtL,UAQhDC,IAASzB,KACT8M,EAAMQ,WAAaR,EAAMQ,YAAc,sBACvCR,EAAMS,cAAgBT,EAAMS,eAAiB,aACjB,eAAxBT,EAAMS,eAAmCT,EAAMU,cAC/CV,EAAMU,YAAcnP,KAAK+N,gBAIxBU,EAAMQ,YAAeR,EAAMW,UACxBX,EAAMS,eAAkBT,EAAMU,gBAClC1F,GAAO7J,MACH,gFAGG,IArBX6J,GAAO7J,MACH,6DAEG,GAuBf,CASAyP,iBAAiBZ,GACb,QAAIzO,KAAK6N,QACL7N,KAAK6N,MAAMyB,KAAKb,GAIZzO,KAAK6N,MAAMnK,OAxTJ,KAyTP1D,KAAK6N,MAAM0B,OAAO,EAAG,IAGlB,EAKf,CAOAb,WAAWD,GACHzO,KAAKqP,iBAAiBZ,IAGtBzO,KAAK2N,kBAAkBS,SAAQC,IAC3B,IACIA,EAAQS,UAAUL,EACtB,CAAE,MAAOe,GACL/F,GAAON,KAAM,kCAAiCqG,IAClD,IAGZ,6BC5VJ,MAAM/F,GAASgG,EAAAA,MAAAA,6CAQTC,GASc,iBAmCdC,GACK,QADLA,GAEK,QAFLA,GAGe,gBAOrB,IAAIC,GAcW,MAAMC,GAOjBC,6BAA6BlQ,EAAOmQ,GAC5BF,GAAUG,SAAqB,YAAVpQ,GACrB6J,GAAO7J,MAAO,sBAAqBA,UAAcmQ,IAEzD,CAQAD,qBAAqBlQ,EAAOmQ,GAIxB,GAHAtG,GAAOwG,IAAK,yBAAwBrQ,SAAamQ,KAGnC,YAAVnQ,EACA,OAGJiQ,GAAUK,oBAAqB,EAG/B,IAAIC,GAAmB,EACnBC,EAAkB,KAEtB,IAAK,MAAMC,KAAqBR,GAAUS,QAAQC,SACzCF,EAAkBG,YACnB/G,GAAOgH,MAAM,+BACTJ,EAAkBK,kBAClBP,GAAmB,EACdC,IACDA,EAAkBC,KAM7BF,GAILN,GAAUc,kBAAkBP,EAChC,CAQAN,yBAAyBc,GAIrB,MAAMC,EAAgBD,EAAWE,OAC3BC,EAAYH,EAAWI,eAG7B,IAAK,MAAMC,KAAUpB,GAAUqB,aAC3B,GAAID,EAAO7N,OAASuM,GAAkB,CAClC,MAAMwB,EAAYF,EAAOG,KAEzBvB,GAAUwB,aACNT,EACAO,EAAU/N,KACV+N,EAAUvR,MACVuR,EAAUG,IAAMP,EACxB,MAAO,GAAIE,EAAO7N,OAASuM,GAAkB,CAIzC,MAAM4B,EAAYN,EAAOG,KAEzBvB,GAAUG,QAAQwB,gBACdP,EAAOK,IAAMP,EACbQ,EAAU9C,MACVoC,EACAU,EAAUA,UAClB,MAAO,GAAIN,EAAO7N,OAASuM,GAA4B,CACnD,MAAMyB,EAAOH,EAAOG,KAEpBvB,GAAUG,QAAQyB,uBACdR,EAAOK,IAAMP,EACbK,EAAKM,YACLb,EACAO,EAAKO,KACLP,EAAKQ,WACLR,EAAKjC,YAEb,CAEJU,GAAUqB,aAAaxN,OAAS,CACpC,CAYAoM,oBAAoB+B,EAAIzO,EAAMxD,EAAO0R,GACjC,IAAIQ,EAASlS,EAERkS,IACDrI,GAAON,KAAK,uBACZ2I,EAAS,IAAI5Q,MAAM,kBAEnB2O,GAAUK,oBAAsB2B,EAChChC,GAAUG,QAAQ+B,YAAYT,EAAIO,EAAGf,OAAQ1N,EAAM0O,GAEnDjC,GAAUqB,aAAa5B,KAAK,CACxBlM,KAAMuM,GACNyB,KAAM,CACFxR,MAAOkS,EACPR,KACAlO,SAMhB,CAYA0M,oBAAoB+B,EAAIpD,EAAO8C,GAC3B,MAAMD,EAAKO,GAAMA,EAAGb,eACdF,EAASe,GAAMA,EAAGf,OAEpBjB,GAAUK,oBAAsB2B,EAChChC,GAAUG,QAAQwB,gBAAgBF,EAAI7C,EAAOqC,EAAQS,GAErD1B,GAAUqB,aAAa5B,KAAK,CACxBwB,SACAQ,KACAlO,KAAMuM,GACNyB,KAAM,CAAE3C,QACJ8C,cAGhB,CAUAzB,kCAAkCkC,GAC9B,MAAMC,EAAkB,CACpB,yBACA,kBACA,oBAKJ,IAAK,MAAMC,KAAcD,EAAiB,CACtC,MAAME,EAAiBH,EAAWE,GAElCF,EAAWE,GAAc,WACrB,IAAI,QAAAE,EAAA3O,UAAAC,OAD6B2O,EAAY,IAAAlS,MAAAiS,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAZD,EAAYC,GAAA7O,UAAA6O,GAEzC,OAAOH,EAAeI,MAAMP,EAAYK,EAC5C,CAAE,MAAO7C,GACLgD,KAAAA,iBAAsChD,EAC1C,CACJ,CACJ,CACA,MAAMiD,EAAe,CACjB,yBACA,kBACA,oBAKJ,IAAK,MAAMP,KAAcO,EAAc,CACnC,MAAMN,EAAiBH,EAAWE,GAElCF,EAAWE,GAAc,WAA0B,QAAAQ,EAAAjP,UAAAC,OAAd2O,EAAY,IAAAlS,MAAAuS,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAZN,EAAYM,GAAAlP,UAAAkP,GAC7ClJ,GAAOgH,MAAMyB,EAAYG,GACzBF,EAAeI,MAAMP,EAAYK,EACrC,CACJ,CACA,MAAMO,EAAsBZ,EAAWD,YAGvCC,EAAWD,YAAc,SAAST,EAAIO,EAAIzO,GAAe,QAAAyP,EAAApP,UAAAC,OAANoP,EAAI,IAAA3S,MAAA0S,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJD,EAAIC,EAAA,GAAAtP,UAAAsP,GAI/C3P,IAASsM,GAQJzB,GAAQjH,iBACTkC,SAAWA,QAAQuH,MAAM,cAAea,EAAIO,EAAIzO,GAGpDqG,GAAOgH,MAAM,cAAea,EAAIO,EAAIzO,KAAS0P,GAEjD,IACIF,EAAoBI,KAAKhB,EAAYV,EAAIO,EAAIzO,KAAS0P,EAC1D,CAAE,MAAOG,GACD7P,IAASsM,GACTxG,SAAWA,QAAQtJ,MAAM,cAAeqT,GAExCT,KAAAA,iBAAsCS,EAE9C,CACJ,CAGJ,CAOW3C,qBAKP,OAJKV,KACDA,GAAW,IAAIhC,KAGZgC,EACX,CAgBAE,mBAAmBjQ,GACf,GAAIgQ,GAAUG,QACV,MAAM,IAAI9O,MAAM,mDAEpB,IACI,MAAMgS,EAAmBC,UAEzBtD,GAAUG,QAAU,IAAIkD,EACxBrD,GAAUuD,2BAA2BvD,GAAUG,SAC/CH,GAAUwD,OAAS,CACfC,UAAWzT,EAAQyT,UACnBC,SAAU1T,EAAQ0T,UAEtB1D,GAAU2D,YAAc3T,EAAQ2T,YAChC3D,GAAU4D,gBAAkB5T,EAAQ4T,gBAEpC,MAAMC,EAAe,IAAK7T,EAAQ6T,cAMlC,GAJI7T,EAAQ8T,kBACRD,EAAaE,mBAAsB,GAAE/T,EAAQ8T,oBAAoB1F,GAAQzH,cAGzE3G,EAAQiR,OAAQ,CAEhB,MAAM3L,EAAQtF,EAAQiR,OAAO3L,MAAM,gBAGnCuO,EAAaG,OAAShU,EAAQgU,QAAW1O,GAASA,EAAM,IAAO,GACnE,CAWA,OARA0K,GAAUG,QAAQ8D,WACdjE,GAAU2D,YACV3D,GAAU4D,gBACV5D,GAAUwD,OACVxD,GAAUkE,mBACVzT,EACAoT,IAEG,CACX,CAAE,MAAOlE,GAQL,OAJAgD,KAAAA,iBAAsChD,GACtCK,GAAUG,QAAU,KACpBvG,GAAO7J,MAAM4P,IAEN,CACX,CACJ,CASAM,8BACI,OAAO5F,QAAQ2F,GAAUG,QAC7B,CAQAF,iCAAiCkE,EAAanC,GAC1ChC,GAAUoE,aAAapC,EAvXT,mBAuX2CmC,EAC7D,CAQAlE,0BAA0BN,EAAGqC,GACzB,IACIhC,GAAUwB,aACNQ,EACAnC,GACAF,EACAqC,GAAMA,EAAGb,eACjB,CAAE,MAAOpR,GAIDsJ,SAAqC,mBAAlBA,QAAQtJ,OAE3BsJ,QAAQtJ,MAAM,4BAA6BA,EAEnD,CACJ,CAWAkQ,oBAAoBoE,EAAcC,EAASC,GACvC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,GAAI1E,GAAUG,QACVH,GAAUG,QAAQwE,iBACdN,EACA,CACIb,OAAQxD,GAAUwD,OAClBc,UACAC,YAEJ,CAACK,EAAQlU,KACU,YAAXkU,EACAH,EAAQ/T,GAERgU,EAAOhU,EACX,QAEL,CACH,MAAMmU,EAAS,sDAEfjL,GAAO7J,MAAM8U,GACbH,EAAOG,EACX,IAER,CAQA5E,8BAA8BN,EAAGqC,GAC7BhC,GAAUwB,aAAaQ,EArdb,eAqd6CrC,EAAG,KAC9D,CAQAM,qBAAqB6E,EAAMvR,EAAMyO,GAC7B,IAAIpD,EAGAA,EADS,UAATrL,EACQuR,EAjdJ,aACC,cAkdGA,EArdL,YACE,cAudT9E,GAAUoE,aAAapC,EAAIpD,EAC/B,CAcAlN,YAAYqT,EAAK/U,GACbG,KAAK8Q,OAASjR,EAAQiR,OACtB9Q,KAAK4U,IAAMA,EACX5U,KAAKgR,eAAiB4D,EAAI5D,eAC1BhR,KAAK6U,aAAehV,EAAQgV,cA1dR,QA2dpB7U,KAAKwQ,WAAY,EAEjBX,GAAUS,QAAQwE,IAAI9U,MAElB6P,GAAUK,qBACVlQ,KAAK0Q,gBAK0B,IAA3Bb,GAAUS,QAAQnC,MAClB0B,GAAUc,kBAAkB3Q,MAGxC,CAOA0Q,gBACIjH,GAAOE,KAAK,eAAgB3J,KAAK6U,cACjC,IACI,MAAME,EAAmB,CACrBC,mBACIhV,KAAK4U,IAAIK,MACHpF,GAAUG,QAAQkF,aAAaC,KAC/BtF,GAAUG,QAAQkF,aAAaE,QAEvCC,EACAxF,GAAUG,QAAQsF,aAChBtV,KAAKgR,eACLhR,KAAK6U,aACLhF,GAAUG,QAAQuF,YAAYC,UAC9BxV,KAAK8Q,OACLiE,EACAlF,GAAU4F,uBAElBzV,KAAKwQ,WAAY,EAEjB,MAAMkF,EAAyB,YAAfL,EAAIZ,OAMpB,OAJKiB,GACDjM,GAAO7J,MAAM,kCAAmCyV,EAAI9U,SAGjDmV,CAEX,CAAE,MAAO9V,GAGL,OAFA4S,KAAAA,iBAAsC5S,IAE/B,CACX,CACJ,CAkBA+V,4BACQhE,EACAiE,EACAC,EACAjE,EACAzC,GACJ,IAAKU,GAAUG,QACX,OAGJ,MAAM0B,EAAckE,EAAU/F,GAAUwD,OAASwC,EAE7ChG,GAAUK,mBACVL,GAAUG,QAAQyB,uBACdzR,KAAKgR,eACLU,EACA1R,KAAK8Q,OACLa,EACAC,EACAzC,GAEJU,GAAUqB,aAAa5B,KAAK,CACxBlM,KAAMuM,GACN2B,GAAItR,KAAKgR,eACTI,KAAM,CACFM,cACAvC,cACAwC,OACAC,eAIhB,CAQAkE,2BACIjG,GAAUoE,aAAajU,KAplBV,kBAqlBjB,CAMA+V,qBACQlG,GAAUK,oBACVL,GAAUG,QAAQwB,gBACdxR,KAAKgR,eACLnB,GAAUG,QAAQgG,YAAYC,iBAC9BjW,KAAK8Q,QAEbjB,GAAUS,QAAQ4F,OAAOlW,KAC7B,CAKAmW,+BACItG,GAAUwB,aACNrR,KAjoBc,uBAmoBd,KACAA,KAAKgR,eACb,CAOAoF,sBAAsB5G,GAClBK,GAAUwB,aACNrR,KAppBK,cAopB4BwP,EAAGxP,KAAKgR,eACjD,CAOAqF,uBAAuB7G,GACnBK,GAAUwB,aACNrR,KA7pBM,eA6pB4BwP,EAAGxP,KAAKgR,eAClD,CAOAsF,sBAAsBC,GAClB1G,GAAUoE,aACNjU,KACAuW,EAtpBM,eADF,aAwpBZ,CASAC,uBAAuBC,EAAO9E,GAC1B,IAAIJ,EAEAI,IACAJ,EAAY,CAAEI,SAGlB9B,GAAUoE,aACNjU,KACAyW,EAjqBU,mBACD,kBAiqBTlF,EACR,CAOAmF,uBAAuBlH,GACnBK,GAAUwB,aACNrR,KArsBa,sBAqsB4BwP,EAAGxP,KAAKgR,eACzD,CAOA2F,wBAAwBnH,GACpBK,GAAUwB,aACNrR,KA9sBc,uBA8sB4BwP,EAAGxP,KAAKgR,eAC1D,CAOA4F,0BAA0BpH,GACtBK,GAAUwB,aACNrR,KAvtBS,kBAutB4BwP,EAAGxP,KAAKgR,eACrD,EAOJnB,GAAUG,QAAU,KAKpBH,GAAUqB,aAAe,GAOzBrB,GAAUK,oBAAqB,EAM/BL,GAAU2D,YAAc,KAMxB3D,GAAU4D,gBAAkB,KAS5B5D,GAAUwD,OAAS,KC9wBnB,MAAM5J,GAASgG,EAAAA,MAAAA,uDAcf3G,OAAO+N,aAAe/N,OAAO+N,cAAgB/N,OAAOgO,mBAMpD,IAAIC,GAAU,KAqDC,SAASC,GAAoBtK,EAAQuK,EAAUC,GAC1DlX,KAAK0M,OAASA,EACd1M,KAAKmX,WAAa,KAClBnX,KAAKoX,cAAgBH,EACrBjX,KAAKqX,WAAa,EAClBrX,KAAKkX,SAAWA,EAChBlX,KAAKmD,OAAS,KACdnD,KAAKsX,SAAW,IACpB,CC5EO,SAASC,GAAqBC,GACjC,IAAIC,EAAYD,EAMhB,OAJIA,GAAUtR,OAAOwR,mBACjBD,EAAY,GAGTA,EAAY,CACvB,CAQO,SAASE,GAAiBC,GAC7B,OAAOA,EAAWlU,OAAS,EAAIkU,EAAWC,QAAO,CAACC,EAAGC,IAAMD,EAAIC,IAAKH,EAAWlU,OAAS,CAC5F,CA4BO,SAASsU,GAAqBJ,GACjC,OAAOA,EAAWK,QAAOtQ,GAASA,GAAS,GAC/C,CDiCAqP,GAAoB5V,UAAUqV,MAAQ,WAC7BO,GAAoBkB,0BAIzBnB,GAAQoB,SACRnY,KAAKsX,SAAWP,GAAQqB,iBAExBpY,KAAKsX,SAASe,sBAlFsB,GAmFpCrY,KAAKsX,SAASgB,QAzFiB,KA2F/BtY,KAAKmD,OAAS4T,GAAQwB,wBAAwBvY,KAAK0M,QAEnD1M,KAAKmD,OAAOqV,QAAQxY,KAAKsX,UAEzBtX,KAAKmX,WAAasB,aACd,KACI,MAAMC,EAAQ,IAAIC,WAAW3Y,KAAKsX,SAASsB,mBAE3C5Y,KAAKsX,SAASuB,sBAAsBH,GACpC,MAAMrB,EA9ElB,SAAoCyB,GAEhC,IAAIC,EAAY,EAEhB,MAAMrV,EAASoV,EAAQpV,OAEvB,IAAK,IAAIqC,EAAI,EAAGA,EAAIrC,EAAQqC,IACpBgT,EAAYD,EAAQ/S,KACpBgT,EAAYD,EAAQ/S,IAI5B,OAAOiT,aAAaD,EAAY,KAAO,KAAKE,QAAQ,GACxD,CAiE+BC,CAA2BR,GAM9C1Y,KAAKqX,WA/DjB,SAAsB8B,EAAUC,GAC5B,IAAIzR,EAAQ,EACZ,MAAM0R,EAAOD,EAAYD,EAUzB,OAPIxR,EADA0R,EAAO,GACCD,EAAY,GACbC,GAAQ,GACPD,EAAY,GAEZD,EAGLH,WAAWrR,EAAMsR,QAAQ,GACpC,CAkD8BK,CAAajC,EAAYrX,KAAKqX,YAChDrX,KAAKkX,SAASlX,KAAKqX,WAAW,GAElCrX,KAAKoX,eAEb,EAKAJ,GAAoB5V,UAAUmY,KAAO,WAAW,IAAAC,EAAAC,EACxCzZ,KAAKmX,aACLuC,cAAc1Z,KAAKmX,YACnBnX,KAAKmX,WAAa,MAGT,QAAbqC,EAAAxZ,KAAKsX,gBAAQ,IAAAkC,GAAbA,EAAeG,aACf3Z,KAAKsX,SAAW,KACL,QAAXmC,EAAAzZ,KAAKmD,cAAM,IAAAsW,GAAXA,EAAaE,aACb3Z,KAAKmD,OAAS,IAClB,EAQA6T,GAAoBkB,sBAAwB,WAAW,IAAA0B,EACnD,OAAO1P,QAAc,QAAP0P,EAAC9Q,cAAM,IAAA8Q,OAAA,EAANA,EAAQ/C,aAC3B,EAKAG,GAAoB6C,uBAAyBC,iBACrC/C,KACAtN,GAAOE,KAAK,qCACNoN,GAAQgD,QACdhD,GAAU,KAElB,EAKAC,GAAoBgD,oBAAsB,WACjChD,GAAoBkB,0BAIzBzO,GAAOE,KAAK,4BACZoN,GAAU,IAAIF,aAEdE,GAAQkD,UACZ,EAKAjD,GAAoBgD,sBCjHb,MAAME,GAIT3Y,cACIvB,KAAKma,QAAU,EACfna,KAAKyI,EAAI,CACb,CAQA2R,QAAQzS,GACiB,iBAAVA,IAGX3H,KAAKyI,GAAK,EACVzI,KAAKma,QAAUna,KAAKma,SAAYxS,EAAQ3H,KAAKma,SAAWna,KAAKyI,EACjE,CAMA4R,aACI,OAAOra,KAAKma,OAChB,ECtFJ,MAAM1Q,IAASC,EAAAA,EAAAA,6DAUR,MAAM4Q,GAOT/Y,YAAYgZ,EAASC,GACjBxa,KAAKya,aAAeF,EACpBva,KAAK0a,UAAY,EACjB1a,KAAK2a,YAAc,EACnB3a,KAAK4a,yBAA2BJ,EAChCxa,KAAK6a,MAAQ,IAAIX,EACrB,CAOAY,oBACI,MAAO,CACHC,kBA9BI,GA8Be/a,KAAK6a,MAAMR,cAAwBpB,QAAQ,GAC9D+B,cAAehb,KAAK2a,YAE5B,CAOAM,gBAEIjb,KAAKkb,qBAAuBC,IACxB,MAAMC,EAAUD,EAAKE,aAErB,IAAK,MAAMC,KAAQF,EACfpb,KAAK0a,YACL1a,KAAK2a,YAAcY,KAAKC,IAAIxb,KAAK2a,YAAaW,EAAKG,UAAUxC,QAAQ,EACzE,EAIJxP,GAAOE,KAAK,6DACZ3J,KAAK0b,SAAW,IAAI/P,oBAAoB3L,KAAKkb,sBAC7Clb,KAAK0b,SAASC,QAAQ,CAAEvY,KAAM,WAC1BwY,UAAU,IACd,MAAMC,EAAYC,KAAKC,MAGvB/b,KAAKgc,oBAAsBvD,aAAY,KACnC,MAAMsD,EAAMD,KAAKC,MACX9E,EAAWjX,KAAKic,gBACfF,EAAM/b,KAAKic,gBA/DR,KAgEHF,EAAMF,GAhEH,IAiEJK,EAAOlc,KAAK0a,UAAYzD,EAE9BjX,KAAK6a,MAAMT,QAAQ8B,GACnBlc,KAAKya,aAAapR,KACd8S,GAAmCnc,KAAK8a,qBAG5C9a,KAAK0a,UAAY,EACjB1a,KAAKic,eAAiBH,KAAKC,KAAK,GACjC/b,KAAK4a,yBACZ,CAMAwB,eACIpc,KAAK0b,UAAY1b,KAAK0b,SAAS/B,aAC/B3Z,KAAKkb,qBAAuB,KACxBlb,KAAKgc,sBACLtC,cAAc1Z,KAAKgc,qBACnBhc,KAAKgc,oBAAsB,KAEnC,EC/FG,IAAKK,GAAS,SAATA,GAAS,OAATA,EAAS,cAATA,EAAS,cAATA,CAAS,MC0DrB,aApDA,MASIC,KAAKC,GAAO,IAAAC,EACRxc,KAAKyc,eAAiBvS,QAAQqS,EAAMG,eACpC1c,KAAK2c,eAAiBzS,QAAQqS,EAAMK,sBACpC5c,KAAK6c,eAAiB3S,QAAiC,QAA1BsS,EAACD,EAAMO,2BAAmB,IAAAN,GAAAA,EAC3D,CAOAO,kCACI,OAAO9O,GAAQf,qBACnB,CASA8P,yBACI,OAAOhd,KAAKyc,gBAAkBxO,GAAQ1B,2BAC1C,CAMA0Q,2BACI,OAAOjd,KAAK2c,cAChB,CAMAO,2BACI,OAAOld,KAAK6c,cAChB,GClDErK,GAAuB/C,EAAQ,MAC/BhG,IAASC,EAAAA,EAAAA,sDAQf,SAASyT,GAAoBC,EAAaC,GACtC,OAAKA,GAAgBA,GAAgB,IAC7BD,GAAeA,GAAe,EAC3B,EAEJ7B,KAAK+B,MAAOF,EAAcC,EAAgB,IACrD,CAKA,SAASE,KACLvd,KAAKwd,KAAO,CAAC,EACbxd,KAAKyd,QAAU,CACXC,SAAU,EACVC,OAAQ,GAEZ3d,KAAK4d,WAAa,CAAC,EACnB5d,KAAK6d,UAAY,EACjB7d,KAAKgN,MAAQ,EACjB,CA6CA,SAAS8Q,KAKL9d,KAAK+d,UAAY,CAAC,EAKlB/d,KAAKyd,QAAU,CAAC,EAKhBzd,KAAKge,WAAa,KAKlBhe,KAAKie,UAAY,EACrB,CAee,SAASC,GAAelN,EAAgBmN,EAAqB3D,EAAeC,GACvFza,KAAKgR,eAAiBA,EACtBhR,KAAKoe,0BAA4B,KACjCpe,KAAKqe,yBAA2B,KAChCre,KAAKse,mBAAqB,KAC1Bte,KAAKue,oBAAsB,KAC3Bve,KAAKwe,wBAA0B,CAAC,EAChCxe,KAAKye,sBAAwB,KAC7Bze,KAAKya,aAAeA,EACpBza,KAAK0e,gBAAkB,IAAIZ,GAE3B9d,KAAK2e,yBAA2BR,EAChCne,KAAK4e,YAAc,GACnB5e,KAAK6e,gBAAkB,KACvB7e,KAAK8e,mBAAqBtE,EAK1Bxa,KAAK+e,WAAa,IAAIC,GAC1B,CAhGAzB,GAAUnc,UAAU6d,QAAU,SAAUzB,GACpCxd,KAAKwd,KAAOA,GAAQ,CAAC,CACzB,EAKAD,GAAUnc,UAAU8d,cAAgB,SAAUtB,GAC1C5d,KAAK4d,WAAaA,GAAc,CAAC,CACrC,EAMAL,GAAUnc,UAAU+d,WAAa,SAAU1B,GACvCzd,KAAKyd,QAAQC,UAAYD,EAAQC,SACjC1d,KAAKyd,QAAQE,QAAUF,EAAQE,MACnC,EAKAJ,GAAUnc,UAAUge,aAAe,WAC/Bpf,KAAKyd,QAAQC,SAAW,EACxB1d,KAAKyd,QAAQE,OAAS,CAC1B,EAKAJ,GAAUnc,UAAUie,aAAe,SAAUxB,GACzC7d,KAAK6d,UAAYA,GAAa,CAClC,EACAN,GAAUnc,UAAUke,SAAW,SAAUtS,GACrChN,KAAKgN,MAAQA,GAAS,EAC1B,EAmEAkR,GAAe9c,UAAUme,eAAiB,SAAUX,GAChD5e,KAAK4e,YAAcA,CACvB,EAIAV,GAAe9c,UAAUmY,KAAO,WACxBvZ,KAAKye,wBACL/E,cAAc1Z,KAAKye,uBACnBze,KAAKye,sBAAwB,MAE7Bze,KAAK6e,kBACLnF,cAAc1Z,KAAK6e,iBACnB7e,KAAK6e,gBAAkB,KAE/B,EAKAX,GAAe9c,UAAUoe,cAAgB,SAAU5f,GAC/C4S,GAAqBiN,iBAAiB7f,GACtC6J,GAAO7J,MAAM,kBAAmBA,GAChCI,KAAKuZ,MACT,EAIA2E,GAAe9c,UAAUqV,MAAQ,SAAUiJ,GACnCA,IACIzR,GAAQpC,yBACRpC,GAAOE,KAAK,6DAEhB3J,KAAKye,sBAAwBhG,aAAY,KACrC,GAAIxK,GAAQpC,wBAAyB,CACjC,MAAM8T,EAAc3f,KAAKgR,eAAe4O,eAAe5f,KAAK4e,aAC5D,IAAK,MAAMjN,KAAQgO,EACf,GAAIA,EAAYE,eAAelO,GAAO,CAGlC,MAAM0F,EAAiC,IAApBsI,EAAYhO,GAC/B3R,KAAKya,aAAapR,KAAK8S,GAA8Bnc,KAAKgR,eAAgB9K,OAAOC,SAASwL,EAAM,IAAK0F,GAAY,EACrH,CAER,MAGIrX,KAAKgR,eAAe8O,WACfC,MAAK9O,IACNjR,KAAKqe,yBAAsG,mBAAnEpN,aAAuC,EAASA,EAAO+O,QACzF/O,EAAO+O,SACP/O,EACNjR,KAAKigB,0BACLjgB,KAAKoe,0BAA4Bpe,KAAKqe,wBAAwB,IAE7D6B,OAAMtgB,GAASI,KAAKwf,cAAc5f,IAC3C,GACDI,KAAK2e,2BAEZ,MAAMwB,EAAeA,KACjBjX,QAAQ+G,IAAI,YAEZjQ,KAAKgR,eAAe8O,WACfC,MAAK9O,IACNjR,KAAKse,mBAAgG,mBAAnErN,aAAuC,EAASA,EAAO+O,QACnF/O,EAAO+O,SACP/O,EACN,IACIjR,KAAKogB,oBACT,CACA,MAAOxgB,GACH4S,GAAqBiN,iBAAiB7f,GACtC6J,GAAO7J,MAAM,kCAAmCA,EACpD,CACAI,KAAKue,oBAAsBve,KAAKse,kBAAkB,IAEjD4B,OAAMtgB,GAASI,KAAKwf,cAAc5f,IAAO,EAElDugB,IACAngB,KAAK6e,gBAAkBpG,YAAY0H,EAAcngB,KAAK8e,mBAC1D,EAMA,IAAIuB,GAA4B,EAC5BC,GAA6B,EAC7BC,GAA4B,EAC5BC,GAA8B,EAE7BC,GAA2B3G,eAAee,GAE3C,IAAI6F,EAA0B,EAC1BC,EAAyB,EACzBC,EAA0B,EAC1BC,EAAyB,EAEzBhG,GAAkC,mBAAlBA,EAAMzM,SACtByM,EAAMzM,SAAQ0S,IACQ,iBAAdA,EAAK1d,KACgB,UAAnB0d,EAAKhd,UACP4c,GAA2BI,EAAKC,UACJ,UAAnBD,EAAKhd,YACd8c,GAA2BE,EAAKC,WAEX,gBAAdD,EAAK1d,OACS,UAAnB0d,EAAKhd,UACP6c,GAA0BG,EAAKE,cACH,UAAnBF,EAAKhd,YACd+c,GAA0BC,EAAKE,eAEnC,IAIR,IAAIvD,EAAU,CAAC,EAEXwD,EAAcP,EAA0BL,GACxCa,EAAgBP,EAAyBL,GACzCa,EAAcP,EAA2BL,GACzCa,EAAgBP,EAAyBL,GAmB7C,OAjBA/C,EAAQA,QAAU,CACd,OAAUlC,KAAK+B,OAAO2D,EAAcE,GAAe,KACnD,SAAY5F,KAAK+B,OAAO4D,EAAgBE,GAAiB,MAE7D3D,EAAQ4D,MAAQ,CACZ,OAAU9F,KAAK+B,MAAM2D,EAAc,KACnC,SAAY1F,KAAK+B,MAAM4D,EAAgB,MAE3CzD,EAAQ9c,MAAQ,CACZ,OAAU4a,KAAK+B,MAAM6D,EAAc,KACnC,SAAY5F,KAAK+B,MAAM8D,EAAgB,MAG3Cf,GAA4BK,EAC5BJ,GAA6BK,EAC7BJ,GAA4BK,EAC5BJ,GAA8BK,EACvBpD,CACX,EAIAS,GAAe9c,UAAUkgB,sBAAwBxH,iBAE7C,MAAMuD,EAAe,CACjBK,SAAU,EACVC,OAAQ,GAENP,EAAc,CAChBM,SAAU,EACVC,OAAQ,GAEZ,IAAI4D,EAAkB,EAClBC,EAAgB,EACpB,MAAMC,EAAc,CAAC,EACfC,EAAa,CAAC,EACd5U,EAAS,CAAC,EAChB,IAEI6U,EAGAC,EALAC,EAAuB,EACvBC,EAAqB,EAErBC,EAAuB,EACvBC,EAAqB,EAGzB,IAAK,MAAOrQ,EAAMsQ,KAAcjiB,KAAK+e,WAAY,CAE7C,MAAMvB,EAAOyE,EAAUzE,KACjBpa,EAAOoa,EAAK0E,iBAAmB,WAAa,SAClD7E,EAAaja,IAASoa,EAAK2E,aAC3B/E,EAAYha,IAASoa,EAAK4E,YAE1Bb,GAAmBU,EAAUxE,QAAQC,SACrC8D,GAAiBS,EAAUxE,QAAQE,OAEnC,MAAM0E,EAAQriB,KAAKgR,eAAesR,eAAe3Q,GACjD,GAAI0Q,EAWA,GAVIA,EAAME,gBACNV,GAAwBI,EAAUxE,QAAQC,SAC1CoE,GAAsBG,EAAUxE,QAAQE,OACxCgE,EAAaM,EAAUjV,QAGvB+U,GAAwBE,EAAUxE,QAAQC,SAC1CsE,GAAsBC,EAAUxE,QAAQE,OACxCiE,EAAaK,EAAUjV,OAEvBwV,GAAAA,+BAA6C,CAC7C,MAAMC,EAAaJ,EAAMK,gBACzB,GAAID,EAAY,CACZ,MAAM7E,EAAaqE,EAAUrE,WAU7B,GATIA,EAAW+E,OACR/E,EAAWgF,SACW,IAAtBhF,EAAW+E,QACY,IAAvB/E,EAAWgF,SACdnB,EAAYgB,GAAc7E,GAEF,IAAxBqE,EAAUpE,YACV6D,EAAWe,GAAcR,EAAUpE,WAEnC8D,GAAcC,EAAY,CAC1B,MAAMiB,EAAY,CACd,MAASlB,EACT,MAASC,GAEb9U,EAAO2V,GAAcI,CACzB,CACJ,MAEIpZ,GAAO7J,MAAO,8BAA6ByiB,IAEnD,KACK,CACD,MAAMS,EAAgBT,EAAMU,mBAC5B,GAAID,EAAe,CACf,MAAMlF,EAAaqE,EAAUrE,WAC7B,GAAIA,EAAW+E,OACR/E,EAAWgF,SACW,IAAtBhF,EAAW+E,QACY,IAAvB/E,EAAWgF,OAAe,CAC7B,MAAMI,EAAkBvB,EAAYqB,IAAkB,CAAC,EACvDE,EAAgBrR,GAAQiM,EACxB6D,EAAYqB,GAAiBE,CACjC,CACA,GAA4B,IAAxBf,EAAUpE,UAAiB,CAC3B,MAAMoF,EAAiBvB,EAAWoB,IAAkB,CAAC,EACrDG,EAAetR,GAAQsQ,EAAUpE,UACjC6D,EAAWoB,GAAiBG,CAChC,CACA,GAAItB,GAAcC,EAAY,CAC1B,MAAMiB,EAAY,CACd,MAASlB,EACT,MAASC,GAEPsB,EAAapW,EAAOgW,IAAkB,CAAC,EAC7CI,EAAWvR,GAAQkR,EACnB/V,EAAOgW,GAAiBI,CAC5B,CACJ,MACIzZ,GAAO7J,MAAO,iCAAgCyiB,IAEtD,CAEJJ,EAAU7C,cACd,CACApf,KAAK0e,gBAAgBjB,QAAU,CAC3B,OAAU+D,EACV,SAAYD,GAEhBvhB,KAAK0e,gBAAgBjB,QAAQ4D,MAAQ,CACjC,OAAUS,EACV,SAAYD,GAEhB7hB,KAAK0e,gBAAgBjB,QAAQ9c,MAAQ,CACjC,OAAUqhB,EACV,SAAYD,GAEhB/hB,KAAK0e,gBAAgBV,WAAa,CAC9BmF,MAAOhG,GAAoBC,EAAYM,SAAWN,EAAYO,OAAQN,EAAaK,SAAWL,EAAaM,QAC3GD,SAAUP,GAAoBC,EAAYM,SAAUL,EAAaK,UACjEC,OAAQR,GAAoBC,EAAYO,OAAQN,EAAaM,SAEjE,MAAMyF,EAAiB,CAAC,EACxB,IAAIC,EACJhiB,OAAO8G,KAAKnI,KAAKwe,yBAAyBpQ,SAAQuD,IAC9C,MAAM,KAAEP,EAAI,QAAEwE,GAAY5V,KAAKwe,wBAAwB7M,GACjD2R,EAAgBlS,EAAKyG,QAAO,CAAC0L,EAAKC,IAAiBD,EAAMC,IAAgBpS,EAAK1N,OACpF,GAAIkS,EACAyN,EAAsBC,MAErB,CACD,MAAMjB,EAAQriB,KAAKgR,eAAesR,eAAepc,OAAOyL,IACxD,GAAI0Q,EAAO,CACP,MAAMS,EAAgBT,EAAMU,mBACxBD,IACAM,EAAeN,GAAiBQ,EAExC,CACJ,KAEJtjB,KAAKwe,wBAA0B,CAAC,EAGhCxe,KAAKya,aAAapR,KAAK8S,GAAmCnc,KAAKgR,eAAgB,CAC3E,UAAahR,KAAK0e,gBAAgBX,UAClC,cAAiB0C,SAA+BzgB,KAAKgR,eAAe8O,YACpE,WAAc9f,KAAK0e,gBAAgBV,WACnC,WAAcyD,EACd,UAAaC,EACb,MAAS5U,EACT,UAAa9M,KAAK0e,gBAAgBT,UAClCoF,sBACAD,mBAEJpjB,KAAK0e,gBAAgBT,UAAY,EACrC,EAQAC,GAAe9c,UAAUqiB,oBAAsB,SAAUC,GACrD,IAAI/b,EAAQ+b,EAIZ,MAHqB,iBAAV/b,IACPA,EAAQzB,OAAOyB,IAEfgc,MAAMhc,GACC,EAEJ4T,KAAKC,IAAI,EAAG7T,EACvB,EAWAuW,GAAe9c,UAAUwiB,kBAAoB,SAAU7H,EAAK8H,EAAQC,GAChE,MAAMC,EAAW/jB,KAAKyjB,oBAAoB1H,EAAI+H,IACxCE,EAAchkB,KAAKyjB,oBAAoBI,EAAOC,IAC9CG,EAAiB1I,KAAKC,IAAI,EAAGuI,EAAWC,GACxCE,EAASnI,EAAIoI,UAAYN,EAAOM,UACtC,IAAIC,EAAc,EAKlB,OAJIF,EAAS,IAETE,EAAc7I,KAAK+B,MAAwB,EAAjB2G,EAAsBC,IAE7CE,CACX,EAIAlG,GAAe9c,UAAUgf,mBAAqBtG,iBAC1C,IAAK9Z,KAAKue,oBACN,OAEJ,MAAM8F,EAAgB,CAAC,EACvBrkB,KAAKse,mBAAmBlQ,SAAQ2N,IAG5B,GAAiB,mBAAbA,EAAI3Y,MAA6B2Y,EAAIuI,WAA2B,cAAdvI,EAAIwI,MAAuB,CAC7E,MAAMC,EAA2BzI,EAAIyI,yBAC/BC,EAA2B1I,EAAI0I,0BACjCD,GAA4BC,KAC5BzkB,KAAK0e,gBAAgBX,UAAY,CAC7B,SAAYxC,KAAK+B,MAAMkH,EAA2B,KAClD,OAAUjJ,KAAK+B,MAAMmH,EAA2B,OAGxD,MAAMC,EAAsB1kB,KAAKse,mBAAmBqG,IAAI5I,EAAI6I,mBACtDC,EAAqB7kB,KAAKse,mBAAmBqG,IAAI5I,EAAI+I,kBAG3D,GAAIJ,GAAuBG,EAAoB,CAC3C,MAIME,EAAM,GAJY9W,GAAQpE,kBAC1B6a,EAAoBK,GACpBL,EAAoBM,WACPN,EAAoBO,OAMjCC,EAAW,GAJMjX,GAAQpE,kBACzBgb,EAAmBE,GACnBF,EAAmBG,WACPH,EAAmBI,OAE/B7hB,EAAOshB,EAAoBS,SAE3BC,EAA2BplB,KAAK0e,gBAAgBT,UACjDmH,EAAyBrY,MAAKsY,GAAKA,EAAEN,KAAOA,GAC1CM,EAAEjiB,OAASA,GACXiiB,EAAEH,UAAYA,KACjBE,EAAyB9V,KAAK,CAC1ByV,KACA3hB,OACA8hB,UACAI,IAAKtlB,KAAKgR,eAAeiE,MACzBsQ,mBAAoBV,EAAmBW,cACvCC,oBAAqBf,EAAoBc,cACzCE,YAAab,EAAmBa,YAChCC,IAAgC,IAA3B5J,EAAI6J,sBAGrB,CAKJ,MACK,GAAiB,gBAAb7J,EAAI3Y,MAAuC,iBAAb2Y,EAAI3Y,KAAyB,CAChE,MAAMygB,EAAS7jB,KAAKue,oBAAoBoG,IAAI5I,EAAI8J,IAC1ClU,EAAO3R,KAAKyjB,oBAAoB1H,EAAIpK,MAC1C,IAAKkS,IAAWlS,EACZ,OAEJ,IAAIsQ,EAAYjiB,KAAK+e,WAAW4F,IAAIhT,GAC/BsQ,IACDA,EAAY,IAAI1E,GAChBvd,KAAK+e,WAAW+G,IAAInU,EAAMsQ,IAE9B,IAAIC,GAAmB,EACnBxa,EAAM,kBACO,iBAAbqU,EAAI3Y,OACJ8e,GAAmB,EACnBxa,EAAM,eAEV,IAAIqe,EAAahK,EAAIrU,KAChBqe,GAAcA,EAAa,KAC5BA,EAAa,GAEjB,MAAMC,EAAgBhmB,KAAKyjB,oBAAoBI,EAAOnc,IAChDue,EAAc1K,KAAKC,IAAI,EAAGuK,EAAaC,GACvCE,EAAiBlmB,KAAKyjB,oBAAoB1H,EAAIqG,aAC9C+D,EAAoBnmB,KAAKyjB,oBAAoBI,EAAOzB,aACpDgE,EAAkB7K,KAAKC,IAAI,EAAG0K,EAAiBC,GAWrD,GAVAlE,EAAUhD,QAAQ,CACdkD,aAAc8D,EAAcG,EAC5BhE,YAAagE,EACblE,qBAOa,gBAAbnG,EAAI3Y,KAAwB,CAC5B,MAAMwa,EAAa,CACfgF,OAAQ7G,EAAIsK,YACZ1D,MAAO5G,EAAIuK,YAETC,EAAYxK,EAAIyK,gBAClB5I,EAAWgF,QAAUhF,EAAW+E,OAChCV,EAAU/C,cAActB,GAE5BqE,EAAU5C,aAAa9D,KAAK+B,MAAMiJ,GAAa,IAC/CtE,EAAU9C,WAAW,CACjB,SAAYnf,KAAK4jB,kBAAkB7H,EAAK8H,EAAQ,iBAChD,OAAU,GAElB,MAEIQ,EAAc1S,GAAQ3R,KAAKyjB,oBAAoB1H,EAAIgF,WACnDkB,EAAU9C,WAAW,CACjB,SAAY,EACZ,OAAUnf,KAAK4jB,kBAAkB7H,EAAK8H,EAAQ,eAGtD,MAAM7W,EAAQhN,KAAKse,mBAAmBqG,IAAI5I,EAAI0K,SAC9C,GAAIzZ,EAAO,CAMP,MAAM0Z,EAAiB1Z,EAAMC,SAAS0Z,MAAM,KAAK,GACjDD,GAAkBzE,EAAU3C,SAASoH,EACzC,CAIJ,MACK,GAAiB,UAAb3K,EAAI3Y,MAAoB2Y,EAAI6K,OAASvK,GAAUwK,QAAU9K,EAAI+K,aAAc,CAChF,MAAMlJ,EAAa,CACfgF,OAAQ7G,EAAIsK,YACZ1D,MAAO5G,EAAIuK,YAETS,EAAmB/mB,KAAKgR,eAAegW,eAAe3K,GAAUwK,OACtE,KAAME,aAA2D,EAASA,EAAiBrjB,QACvF,OAEJ,MAAMiO,EAAO3R,KAAKgR,eAAeiW,iBAAiBlL,EAAImL,iBACtD,IAAKvV,EACD,OAEJ,IAAIsQ,EAAYjiB,KAAK+e,WAAW4F,IAAIhT,GAC/BsQ,IACDA,EAAY,IAAI1E,GAChBvd,KAAK+e,WAAW+G,IAAInU,EAAMsQ,IAE1BrE,EAAWgF,QAAUhF,EAAW+E,OAChCV,EAAU/C,cAActB,GAI5B,IAAI2I,EAAYxK,EAAIyK,gBACpB,IAAKD,EAAW,CACZ,MAAM1C,EAAS7jB,KAAKue,oBAAoBoG,IAAI5I,EAAI8J,IAChD,GAAIhC,EAAQ,CACR,MAAMK,EAASnI,EAAIoI,UAAYN,EAAOM,UAClCD,EAAS,GAAKnI,EAAIoL,aAElBZ,GADkCxK,EAAIoL,WAAatD,EAAOsD,YACjBjD,EAAU,IAE3D,CACA,IAAKqC,EACD,MAER,CAEA,MAAMa,EAAwBpnB,KAAKgR,eAAeqW,4BAElDd,EAAYa,EAAwB7L,KAAK+B,MAAMiJ,EAAYa,GAAyB,EACpFnF,EAAU5C,aAAakH,EAC3B,KAEJvmB,KAAKya,aAAapR,KAAK8S,GAAkCnc,KAAKgR,eAAgBqT,SACxErkB,KAAKshB,uBACf,EAIApD,GAAe9c,UAAU6e,wBAA0B,WAC1CjgB,KAAKoe,2BAIVpe,KAAKqe,yBAAyBjQ,SAAQ2N,IAClC,GAAiB,UAAbA,EAAI3Y,KACJ,OAGJ,MAAMiU,EAAa0E,EAAI1E,WACvB,IAAKA,EACD,OAEJ,MAAM6P,EAAkBnL,EAAImL,gBACtBvV,EAAO3R,KAAKgR,eAAeiW,iBAAiBC,GAClD,GAAIvV,EAAM,CACN,MAAMiE,EAAUjE,IAAS3R,KAAKgR,eAAesW,aAAatnB,KAAKgR,eAAegW,eAAe3K,GAAUkL,QACvGvnB,KAAKya,aAAapR,KAAK8S,GAA8Bnc,KAAKgR,eAAgBW,EAAM0F,EAAYzB,EAChG,IAER,ECppBA,MAAMnM,GAASgG,EAAAA,MAAAA,8CAMf,IAAI+X,GAKAC,IAAoB,EAkCxB,SAASC,GAAsB7nB,GACvBgQ,GAAU8X,wBAIT9X,GAAU+X,YAAY,CACvBpU,YAAa3T,EAAQ2T,YACrBC,gBAAiB5T,EAAQ4T,gBACzBF,SAAU1T,EAAQ0T,SAClBD,UAAWzT,EAAQyT,UACnBK,gBAAiB9T,EAAQ8T,gBACzB7C,OAAQjR,EAAQiR,OAChB+C,OAAQhU,EAAQgU,OAChBH,aAAc7T,EAAQ6T,gBAEtBjK,GAAO7J,MAAM,8CAErB,CA0Ee,SAASioB,GAAWC,EAAMjoB,GAMrCG,KAAK+nB,YAAc,IAAI/I,IACvBhf,KAAKya,aAAe,IAAIhT,MACxBzH,KAAK8nB,KAAOA,EACZ9nB,KAAKH,QAAUA,GAAW,CAAC,EAE3BG,KAAKgoB,4BACChoB,KAAKH,QAAQ2T,aAAexT,KAAKH,QAAQ4T,kBAKM,IAAzCoU,GAAWI,0BACnBjoB,KAAKgoB,8BACLhoB,KAAKkoB,iCACCloB,KAAKH,QAAQqoB,iCACfja,GAAQjH,gBACR0gB,GAAsB1nB,KAAKH,SArIvC,SAA0BA,GACjB4nB,KACDU,KAAAA,WACItoB,EAAQuoB,iBAAmBxpB,IACf,GACE,OACI0B,GACC,IAAMonB,GAAsB7nB,KAEnD4nB,IAAoB,EAE5B,CA4HYY,CAAiBroB,KAAKH,SAGrBG,KAAKH,QAAQiR,QACdrH,GAAON,KAAK,4BAUpBnJ,KAAKsoB,oBAAsB,IAAItJ,IAE/B6I,GAAWU,UAAUzT,IAAI9U,KAC7B,CAhFA6nB,GAAWvL,KAAO,SAASzc,GACvBgoB,GAAWW,oBAAsB3oB,EAAQ4oB,mBACF,iBAA5B5oB,EAAQ6oB,kBACfb,GAAWa,gBAAkB7oB,EAAQ6oB,iBAGE,iBAAhC7oB,EAAQse,sBACf0J,GAAW1J,oBAAsBte,EAAQse,qBAGC,iBAAnCte,EAAQ8oB,yBACfd,GAAWc,uBAAyB9oB,EAAQ8oB,wBAGhDd,GAAWI,0BAA4BpoB,EAAQooB,yBACnD,EAkEAJ,GAAWW,oBAAqB,EAChCX,GAAW1J,oBAAsB,IACjC0J,GAAWa,gBAAkB,IAC7Bb,GAAWI,2BAA4B,EACvCJ,GAAWe,UAAYA,GACvBf,GAAWgB,sBAAwB,IAAIphB,MAEvCpG,OAAOwG,eAAeggB,GAAY,YAAa,CAM3ClD,IAAGA,KACM6C,KACDA,GAAa,IAAI5Z,KAGd4Z,MAQfK,GAAWzmB,UAAU0nB,iBAAmB,SAAS9X,GAC7ChR,KAAK+oB,gBAAgB/X,GAErB,IACI,MAAMgY,EACA,IAAIC,GACFjY,EACA6W,GAAW1J,oBACX0J,GAAWa,gBACX1oB,KAAKya,cAEbuO,EAASvS,MAAMoR,GAAWW,oBAC1BxoB,KAAK+nB,YAAYjC,IAAI9U,EAAe6U,GAAImD,EAC5C,CAAE,MAAOxZ,GACL/F,GAAO7J,MAAO,iDAAgD4P,IAClE,CACJ,EAEAqY,GAAWqB,WAAa,GAExBrB,GAAWsB,gBAAkB,SAAS9G,EAAOnL,GA8BzC,GA7BIjJ,GAAQlE,gBAKRsY,EAAM5W,iBACNpN,GAAiBI,qBAOjBqb,UACI,GAAInS,EAAO,CACP,IAAK,MAAMyhB,KAAavB,GAAWqB,WAC/BE,EAAU7P,aAGR8P,GAAAA,wBACV,KAAO,CACHA,GAAAA,sBACA,IAAK,MAAMD,KAAavB,GAAWqB,WAC/BE,EAAU3S,OAElB,MAIHoR,GAAWW,mBACZ,OAGJnG,EAAM5W,iBACFpN,GAAiBC,qBACjB,KACIupB,GAAWyB,eAAejH,EAAM,IAGxC,MACM6G,EAAa,IAAIG,GADRhH,EAAMkH,oBACqB1B,GAAW1J,oBACjDjH,GAEJlX,KAAKkpB,WAAW5Z,KAAK4Z,GACrBA,EAAWzS,OACf,EAEAoR,GAAWzmB,UAAUooB,sBAAwB,SAASC,GAC7C5B,GAAWW,oBAGhBxoB,KAAKya,aAAaiP,GAAGvN,GAA8BsN,EACvD,EAEA5B,GAAWzmB,UAAUuoB,yBAA2B,SAASF,GAChD5B,GAAWW,oBAGhBxoB,KAAKya,aAAamP,eAAezN,GAA8BsN,EACnE,EAEA5B,GAAWzmB,UAAUyoB,0BAA4B,SAASJ,GACtDzpB,KAAKya,aAAaiP,GAAGvN,GAAkCsN,EAC3D,EAEA5B,GAAWzmB,UAAU0oB,6BAA+B,SAASL,GACzDzpB,KAAKya,aAAamP,eACdzN,GAAkCsN,EAC1C,EAEA5B,GAAWzmB,UAAU2oB,2BAA6B,SAASN,GACvDzpB,KAAKya,aAAaiP,GAAGvN,GAAmCsN,EAC5D,EAEA5B,GAAWzmB,UAAU4oB,8BAAgC,SAASP,GAC1DzpB,KAAKya,aAAamP,eACdzN,GACAsN,EACR,EAEA5B,GAAWzmB,UAAU6oB,yBAA2B,SAASR,GACrDzpB,KAAKya,aAAaiP,GAAGvN,GAAkCsN,EAC3D,EAEA5B,GAAWzmB,UAAU8oB,4BAA8B,SAAST,GACxDzpB,KAAKya,aAAamP,eAAezN,GAC7BsN,EACR,EAQA5B,GAAWzmB,UAAU+oB,0BAA4B,SAASV,GACtDzpB,KAAKya,aAAaiP,GAAGvN,GAAmCsN,EAC5D,EAQA5B,GAAWzmB,UAAUgpB,qBAAuB,SAASC,GAC5Cpc,GAAQvC,+BAMb1L,KAAKsqB,yBAA2B,IAAIhQ,GAChCta,KAAKya,aACLoN,GAAWc,wBAEf0B,EAAWX,GACPrwB,GACA,IAAM2G,KAAKsqB,yBAAyBrP,kBACxCoP,EAAWX,GACPrwB,GACA,IAAM2G,KAAKsqB,yBAAyBlO,kBAdpC3S,GAAON,KAAK,gEAepB,EAQA0e,GAAWzmB,UAAU0Z,kBAAoB,WACrC,OAAO9a,KAAKsqB,yBACNtqB,KAAKsqB,yBAAyBxP,oBAC9B,IACV,EAQA+M,GAAWzmB,UAAUmpB,6BAA+B,SAASd,GACzDzpB,KAAKya,aAAamP,eAAezN,GAAmCsN,EACxE,EAQA5B,GAAWzmB,UAAUme,eAAiB,SAASX,GAC3C,IAAK,MAAMoK,KAAY7oB,MAAMqqB,KAAKxqB,KAAK+nB,YAAYxX,UAC1CyY,EAAShY,eAAeiE,OACzB+T,EAASzJ,eAAeX,EAGpC,EAEAiJ,GAAWzmB,UAAU8M,QAAU,WAC3B,IAQSlO,KAAKsoB,oBAAoBna,MAC1BnO,KAAKya,aAAapR,KAAK8S,IAE3B,IAAK,MAAMsO,KAAazqB,KAAKsoB,oBAAoB/X,SAC7CvQ,KAAK0qB,cAAcD,EAAU7V,KAEjC,IAAK,MAAM+V,KAAS3qB,KAAK+nB,YAAY5f,OACjCnI,KAAK4qB,iBAAiBD,GAEtB3qB,KAAKya,cACLza,KAAKya,aAAaoQ,oBAE1B,CAAE,QACEhD,GAAWU,UAAUrS,OAAOlW,KAChC,CACJ,EAEA6nB,GAAWyB,eAAiB,SAASjH,GACjC,IAAKwF,GAAWW,mBACZ,OAGJ,MAAM9b,EAAS2V,EAAMkH,oBAErB,IAAK,IAAIxjB,EAAI,EAAGA,EAAI8hB,GAAWqB,WAAWxlB,OAAQqC,IAC9C,GAAI8hB,GAAWqB,WAAWnjB,GAAG2G,SAAWA,EAAQ,CACzBmb,GAAWqB,WAAW3Z,OAAOxJ,EAAG,GAExC,GAAGwT,OACd,KACJ,CAER,EAOAsO,GAAWzmB,UAAUwpB,iBAAmB,SAASD,GAC7C,MAAM3B,EAAWhpB,KAAK+nB,YAAYpD,IAAIgG,GAElC3B,IACAA,EAASzP,OACTvZ,KAAK+nB,YAAY7R,OAAOyU,GAEhC,EAMA9C,GAAWzmB,UAAU2nB,gBAAkB,SAASnU,GAC5C5U,KAAK4qB,iBAAiBhW,EAAIiR,GAC9B,EAUAgC,GAAWzmB,UAAU0pB,eAAiB,SAASlW,EAAKC,GAChD,IAAK7U,KAAKgoB,4BACN,OACG,GAAIhoB,KAAKsoB,oBAAoByC,IAAInW,EAAIiR,IAGxC,YAFApc,GAAO7J,MAAM,gDAIjB,IAAIkR,EAAS9Q,KAAKH,QAAQiR,OAMrBA,EAAOka,SAAShrB,KAAKH,QAAQorB,YAC9Bna,EAAU,GAAE9Q,KAAKH,QAAQiR,OAAOzQ,MAAM,EAAGL,KAAKH,QAAQiR,OAAOoa,YAAY,SAASlrB,KAAKH,QAAQorB,YAGnGxhB,GAAOE,KAAM,0BAAyBiL,QACtC,MAAMuW,EACA,IAAItb,GACF+E,EACA,CACI9D,SACA+D,iBAGZ7U,KAAKsoB,oBAAoBxC,IAAIlR,EAAIiR,GAAIsF,EACzC,EAQAtD,GAAWuD,0BAA4B,WACnC,MAAMC,EAAc,IAAIzd,IAExB,IAAK,MAAM0d,KAAczD,GAAWU,UAChC,IAAK,MAAM1W,KAAMyZ,EAAWhD,oBAAoB/X,SAC5C8a,EAAYvW,IAAIjD,GAIxB,OAAOwZ,CACX,EAKAxD,GAAWzmB,UAAUspB,cAAgB,SAAS9V,GAC1C,MAAMvE,EAAoBrQ,KAAKsoB,oBAAoB3D,IAAI/P,EAAIiR,IAEvDxV,IAUsC,IAAlCrQ,KAAKsoB,oBAAoBna,MACzBnO,KAAKya,aAAapR,KAAK8S,IAE3Bnc,KAAKsoB,oBAAoBpS,OAAOtB,EAAIiR,IAGpCxV,EAAkB0F,qBAE1B,EASA8R,GAAWzmB,UAAUmqB,mBAAqB,WACtC,OAAOvrB,KAAKgoB,2BAChB,EAQAH,GAAWzmB,UAAUoqB,gCAAkC,SAAS5W,EAAK2B,GACjE,MAAMkV,EAAWzrB,KAAKsoB,oBAAoB3D,IAAI/P,EAAIiR,IAE9C4F,GACAA,EAASnV,sBAAsBC,EAEvC,EAMAsR,GAAWzmB,UAAU+U,6BAA+B,SAASvB,GACzD,MAAM6W,EAAWzrB,KAAKsoB,oBAAoB3D,IAAI/P,EAAIiR,IAE9C4F,GACAA,EAAStV,8BAEjB,EAQA0R,GAAWzmB,UAAUsqB,cAAgB,SAAS9W,EAAK+W,EAAOvoB,GACtD,MAAMqoB,EAAW7W,GAAO5U,KAAKsoB,oBAAoB3D,IAAI/P,EAAIiR,IAEzDhW,GAAU6b,cAAcC,EAAOvoB,EAAMqoB,EACzC,EASA5D,GAAWzmB,UAAUoV,uBACf,SAASC,EAAO9E,GACd,IAAK,MAAME,KAAM7R,KAAKsoB,oBAAoB/X,SACtCsB,EAAG2E,uBAAuBC,EAAO9E,EAEzC,EAQJkW,GAAWzmB,UAAU0U,yBAA2B,SAAS8V,EAASC,GAC9D,IAAK,MAAMha,KAAM7R,KAAKsoB,oBAAoB/X,SACtCsB,EAAGiE,2BAIP9V,KAAK8nB,KAAKhS,yBAAyB8V,EAASC,EAChD,EAOAhE,GAAWiE,0BAA4B,SAAS9X,GAC5C,MAAM+X,EAAYlE,GAAWuD,4BAE7B,GAAIW,EAAU5d,KACV,IAAK,MAAM0D,KAAMka,EACblc,GAAUic,0BAA0B9X,EAAanC,QAGrDhC,GAAUic,0BAA0B9X,EAAa,KAEzD,EAiBA6T,GAAWzmB,UAAUuU,4BAA8B,SAC3Cf,EACAjD,EACAiE,EACAoW,EACApa,EACAzC,GACJ,MAAMsc,EAAWzrB,KAAKsoB,oBAAoB3D,IAAI/P,EAAIiR,IAE9C4F,GACAA,EAAS9V,4BACLhE,EACAiE,EACAoW,EACApa,EACAzC,EAEZ,EASA0Y,GAAWoE,uBAAyB,SAASzc,GACzC,MAAM5P,EACA4P,aAAa7P,GAvlBvB,SAA2CC,GACvC,MAAMssB,EAAM,IAAIhrB,MAkBhB,OAfAgrB,EAAI/qB,MAAQvB,EAAMuB,MAGlB+qB,EAAInsB,MAAQH,EAAMG,MAAQ,kBAAoBH,EAAMK,KAAOL,EAAMK,IAAIL,OAC9DA,EAAMK,IAAIL,MAAMG,KAAQ,MAAKH,EAAMK,IAAIL,MAAMG,OAAS,IAK7DmsB,EAAIzrB,eAAiBb,EAAMK,KAAOL,EAAMK,IAAIC,YACtCyI,KAAKC,UAAUhJ,EAAMK,IAAIC,aAAe,GAG9CgsB,EAAI3rB,QAAUX,EAAMW,QAEb2rB,CACX,CAokBcC,CAAkC3c,GAAKA,EAC3Cuc,EAAYlE,GAAWuD,4BAE7B,GAAIW,EAAU5d,KACV,IAAK,MAAM0D,KAAMka,EACblc,GAAUoc,uBAAuBrsB,EAAOiS,QAG5ChC,GAAUoc,uBAAuBrsB,EAAO,KAEhD,EAQAioB,GAAWzmB,UAAUgV,sBAAwB,SAAS5G,EAAGoF,GACrD,MAAM6W,EAAWzrB,KAAKsoB,oBAAoB3D,IAAI/P,EAAIiR,IAE9C4F,GACAA,EAASrV,sBAAsB5G,EAEvC,EAQAqY,GAAWzmB,UAAUiV,uBAAyB,SAAS7G,EAAGoF,GACtD,MAAM6W,EAAWzrB,KAAKsoB,oBAAoB3D,IAAI/P,EAAIiR,IAE9C4F,GACAA,EAASpV,uBAAuB7G,EAExC,EAQAqY,GAAWzmB,UAAUsV,uBAAyB,SAASlH,EAAGoF,GACtD,MAAM6W,EAAWzrB,KAAKsoB,oBAAoB3D,IAAI/P,EAAIiR,IAE9C4F,GACAA,EAAS/U,uBAAuBlH,EAExC,EAQAqY,GAAWzmB,UAAUuV,wBAA0B,SAASnH,EAAGoF,GACvD,MAAM6W,EAAWzrB,KAAKsoB,oBAAoB3D,IAAI/P,EAAIiR,IAE9C4F,GACAA,EAAS9U,wBAAwBnH,EAEzC,EAQAqY,GAAWzmB,UAAUwV,0BAA4B,SAASpH,EAAGoF,GACzD,MAAM6W,EAAWzrB,KAAKsoB,oBAAoB3D,IAAI/P,EAAIiR,IAE9C4F,GACAA,EAAS7U,0BAA0BpH,EAE3C,EAOAqY,GAAWuE,QAAU,SAASC,GAC1B,MAAMC,EAAe,IAAI1e,IAMzB,IAAK,MAAMiN,KAASgN,GAAWU,UAAW,CACtC,GAAI1N,EAAMqN,iCACN,OAGArN,EAAMyN,oBAAoBna,MAC1Bme,EAAaxX,IAAI+F,EAAMyN,oBAAoB/X,SAASgc,OAAO5kB,MAEnE,CAEA,GAAI2kB,EAAane,KACb,IAAK,MAAMqe,KAAcF,EACrBzc,GAAU4c,mBAAmBJ,EAAGG,QAGpC3c,GAAU4c,mBAAmBJ,EAAG,KAExC,EAUAxE,GAAWzmB,UAAUsrB,aAAe,SAASvY,EAASC,GAUlD,OAPAyT,GAAWe,UAAU9Z,UACjBpM,GACA,CACIiqB,OAAQxY,EACRC,YAGDvE,GAAU6c,aAAa1sB,KAAKH,QAAQiR,OAAQqD,EAASC,EAChE,EAEAyT,GAAW+E,UAAYnd,EAAAA,MAAAA,EAOvBoY,GAAWgF,kBAAoB,SAASjtB,GAChCA,aAAiBD,IAAmBC,EAAMK,IAC1C4nB,GAAWoE,uBAAuBrsB,GAElCioB,GAAWuE,QAAQxsB,EAE3B,EAWAioB,GAAWiF,oBAAsB,SAASre,GAAwB,IAO1Dse,EAPyCne,EAAUnL,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtDgL,GAUDse,EADiB,iBAAVte,EACMA,EAEA,CACT1O,KAAM0O,EACNG,cAIRnF,GAAOwG,IAAItH,KAAKC,UAAUmkB,IAG1B/sB,KAAK4oB,UAAU9Z,UAAUL,EAAOG,IApB5BnF,GAAON,KAAK,gCAqBpB,EAUA0e,GAAWmF,cAAgB,SAASje,GAA4B,IAAjBH,EAAUnL,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzDzD,KAAK4oB,UAAU9Z,UAAUC,EAAWH,GACpCiZ,GAAWgB,sBAAsBxf,KAAKhQ,GAAgD0V,EAAWH,EACrG,EAGAiZ,GAAWzmB,UAAU6rB,0BAA4B,SAASxD,GACtD5B,GAAWgB,sBAAsBa,GAAGrwB,GAAgDowB,EACxF,EAGA5B,GAAWzmB,UAAU8rB,6BAA+B,SAASzD,GACzD5B,GAAWgB,sBAAsBe,eAAevwB,GAAgDowB,EACpG,kFCv2BA,MAAMhgB,IAASC,EAAAA,EAAAA,6CAMA,SAASyjB,GAA4B9C,GAChDrqB,KAAKqqB,WAAaA,EAClBrqB,KAAKotB,cAAgB,CAAC,EAGtB/C,EAAWX,GAAGrwB,IACVgpB,IACI,IAAKA,EAAMzM,YAAcyU,EAAWiB,WAChC,OAEJ,MAAM+B,EACAhL,EAAMpN,MACFoV,EAAWiD,iBAAmBjD,EAAWkD,iBAI7C3Y,EAAOyY,GAAWA,EAAQrc,gBAAmB,KAEnDqZ,EAAWiB,WAAWI,cAClB9W,EACAyN,EAAMmL,UACNnL,EAAMoL,UAAU,GAEhC,CAKAN,GAA4B/rB,UAAUssB,uBAAyB,WAC3D,MAAMrD,EAAarqB,KAAKqqB,WAClBsD,EAAWtD,EAAWuD,KAE5B5tB,KAAK6tB,kBAAoB,IAAIC,KAAJ,CAA0BH,EAC/C3tB,KAAKqqB,WAAW5P,cAEpBkT,EAASI,YAAYC,GAAW,WAAXA,gBAA2BC,IACvCA,EAAchZ,OAMfoV,EAAW6D,IAAIC,oBACnB,IAKJR,EAASI,YAAYC,GAAW,WAAXA,8BAAyC,CAACxD,EAAM4D,KACjE,MAAMC,EAAchE,EAAWiE,mBAAmBC,GAAAA,QAAAA,mBAA2B/D,IAEzE6D,IACAA,EAAYG,YAAYJ,GACxB/D,EAAW5P,aAAapR,KAAKhQ,GAAmDg1B,GACpF,IAGJV,EAASI,YACLC,GAAW,WAAXA,qBACA,CAACC,EAAeQ,MAGXR,EAAchZ,OACRoV,EAAWqE,kBACVD,EAASR,EAAcjd,eAAe,IAItD2c,EAASI,YAAYC,GAAW,WAAXA,sBACjBW,IAII9G,GAAWmF,cAAcnpB,GAAyBwY,GAAUkL,QAE5D8C,EAAWuE,kBAAoBD,EAG/BtE,EAAW6D,IAAIW,cAAa,GAAM9O,MAC9B,KACIsK,EAAWyE,gBAAiB,EAC5BzE,EAAWuE,kBAAoB,IAAI,IAEtC1O,OACGtgB,IACIyqB,EAAWuE,kBAAoB,KAC/BnlB,GAAON,KACH,gDAAiDvJ,EAAM,GAC7D,IAIlB+tB,EAASI,YAAYC,GAAW,WAAXA,sBACjBW,IAII9G,GAAWmF,cAAcnpB,GAAyBwY,GAAUwK,QAE5DwD,EAAW0E,uBAAyBJ,EAGpCtE,EAAW6D,IAAIc,cAAa,GAAMjP,MAC9B,KACIsK,EAAW4E,qBAAsB,EACjC5E,EAAW0E,uBAAyB,IAAI,IAE3C7O,OACGtgB,IACIyqB,EAAW0E,uBAAyB,KACpCtlB,GAAON,KACH,gDAAiDvJ,EAAM,GAC7D,IAIlBI,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,gBAC3B30B,IAEJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,WAC3B30B,GAEJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,qBAC3B30B,GAEJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,eAC3B30B,GAGJs0B,EAASI,YAAYC,GAAW,WAAXA,YACjB,KACIhuB,KAAKqqB,WAAW8E,eAEhBnvB,KAAKqqB,WAAW+E,4BAA6B,EAG7C/tB,OAAO8G,KAAKwlB,EAAS0B,iBAAiBjhB,SAAQ1G,IAC1C,MAAM+G,EACApL,GACG,cAAaqE,IACd,CAAEC,MAAOgmB,EAAS0B,gBAAgB3nB,KAE1CmgB,GAAWmF,cAAcve,EAAM,IAInCpN,OAAO8G,KAAKwlB,EAAS7F,KAAKuH,iBAAiBjhB,SAAQ1G,IAC/C,MAAM+G,EACApL,GACG,QAAOqE,IACR,CAAEC,MAAOgmB,EAAS7F,KAAKuH,gBAAgB3nB,KAE/CmgB,GAAWmF,cAAcve,EAAM,GACjC,IAGVkf,EAASI,YAAYC,GAAW,WAAXA,sBAAiC,CAACxe,EAAG6d,KACjDA,EAAQpY,OACToV,EAAW5P,aAAapR,KAAKhQ,EACzBtB,EAA2CyX,EACnD,IAGJme,EAASI,YAAY1vB,IAAgCgkB,IACjDgI,EAAW5P,aAAapR,KAAKhQ,GAAqCgpB,EAAM,IAG5EriB,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,gBAC3B30B,EACAtB,GAEJiI,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,mBAC3B30B,EACAtB,GACJiI,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,+BAC3B30B,EACAtB,GACJiI,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,gCAC3B30B,EACAtB,GAEJiI,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,qBAC3B30B,EACAtB,GACJ41B,EAASI,YAAYC,GAAW,WAAXA,sBAAiC,IAAM3D,EAAWiF,UAEvEtvB,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,kBAC3B30B,EACAtB,GAEJiI,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,wBAC3B30B,EACAtB,GAEJiI,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,WAC3B30B,EACAtB,GACJ41B,EAASI,YAAYC,GAAW,WAAXA,YACjB,IAAM3D,EAAWiF,QAAQpP,OAAM1Q,GAAK/F,GAAOwG,IAAI,8BAA+BT,OAElFxP,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,YAC3B30B,EACAtB,GACJ41B,EAASI,YACLC,GAAW,WAAXA,aACA,IAAMnG,GAAWmF,chBUY,CACjC/pB,OAAQ,cACRM,cAAe,cACfH,KAAM3B,OgBXNksB,EAASI,YAAYC,GAAW,WAAXA,sBACjBC,IACI5D,EAAWkF,uBAAuBtB,EAAc,IAGxDjuB,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,kBAC3B30B,EACAtB,GACJ41B,EAASI,YAAYC,GAAW,WAAXA,mBAA8B,IAAM3D,EAAWiF,UAEpEtvB,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,kBAC3B30B,EACAtB,GAEJ41B,EAASI,YAAYC,GAAW,WAAXA,uBACjBC,IACI5D,EAAWmF,uBAAuBvB,EAAc,IAGxDjuB,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,cAC3B30B,EACAtB,GACJ41B,EAASI,YAAYC,GAAW,WAAXA,eAA0B,IAAM3D,EAAWiF,UAEhEtvB,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,oBAC3B30B,EACAtB,GAEJiI,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,wBAC3B30B,EACAtB,GAEJiI,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,mBAC3B30B,EACAtB,GAEJ41B,EAASI,YAAYC,GAAW,WAAXA,YACjB,KACInG,GAAWmF,chB4Ca,CAChC/pB,OAAQ,aACRM,cAAe,aACfH,KAAM5B,GAAgBC,mBgB9Cd4oB,EAAW5P,aAAapR,KACpBhQ,EACAtB,EAAiC,IAG7C41B,EAASI,YAAYC,GAAW,WAAXA,wBACjBC,IACIpG,GAAWiF,oBACPnpB,GACI7B,GACA,CAAEwjB,IAAK2I,EAAchZ,QAAS,IAG9C0Y,EAASI,YAAYC,GAAW,WAAXA,wBACjB,CAACX,EAASoC,KAEN,GAAIA,EAAK,CACL,MAAMC,EAAWnB,GAAAA,QAAAA,mBAA2BkB,GACtCpB,EAAchE,EAAWiE,mBAAmBoB,IAAaA,EAEnC,QAAxBrC,EAAQsC,YACRtC,EAAQuC,cAAcvB,GACS,OAAxBhB,EAAQsC,aACftC,EAAQwC,aAAaxB,EAE7B,CAEAhE,EAAW5P,aAAapR,KACpBhQ,GACAg0B,EAAQ,IAGpBrtB,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,6BAC3B30B,IAEJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,kCAC3B30B,IAEJ2G,KAAK6tB,kBAAkBqB,QACnBlB,GAAW,WAAXA,mCACA30B,IAEJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,qBAC3B30B,IAEJs0B,EAASmC,gCAA+B,CAACC,EAAMvF,KAC3C,MAAM6D,EAAchE,EAAWiE,mBAAmB9D,GAE7C6D,GAILA,EAAY2B,YACRD,EAAKE,QAAQC,UAAU,IACvBH,EAAKpoB,MAAM,IAGnBgmB,EAASI,YAAYC,GAAW,WAAXA,OACjB3D,EAAW8F,eAAeC,KAAK/F,IACnCsD,EAASI,YAAYC,GAAW,WAAXA,iBACjB3D,EAAWgG,kBAAkBD,KAAK/F,IAEtCrqB,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,iBAC3B30B,IAEJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,yBAC3B30B,IAEJs0B,EAASI,YAAYC,GAAW,WAAXA,kBACjB3D,EAAWiG,eAAeF,KAAK/F,IACnCrqB,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,wBAC3B30B,IACJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,yBAC3B30B,IACJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,sBAC3B30B,IACJs0B,EAASI,YAAYC,GAAW,WAAXA,4BACjB3D,EAAWkG,wBAAwBH,KAAK/F,IAC5CsD,EAASI,YAAYC,GAAW,WAAXA,gBACjB3D,EAAWmG,aAAaJ,KAAK/F,IACjCrqB,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,SAC3B30B,GACJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,kBAC3B30B,EACAtB,GAEJ41B,EAASI,YAAYC,GAAW,WAAXA,qBACjB3D,EAAWoG,qBAAqBL,KAAK/F,IAEzCsD,EAASI,YAAYC,GAAW,WAAXA,oBAA+B0C,IAChDrG,EAAWsG,mBAAmBD,GAG1BrG,EAAWiB,YAAcjB,EAAWuG,eACpCvG,EAAWX,GAAGrwB,IACVw3B,IACI,MAAMC,EAAY,CACdlxB,MAAOixB,EAAgBE,WACvBlL,GAAI,kBACJpR,OAAQoc,EAAgBlB,aAG5B9H,GAAWuE,QAAQzjB,KAAKC,UAAUkoB,GAAW,GAEzD,IAGJnD,EAASI,YAAYC,GAAW,WAAXA,iBACjB3D,EAAW2G,kBAAkBZ,KAAK/F,IAEtCsD,EAASI,YAAYkD,KAAAA,kBACjB,CAACC,EAAaC,KACV9G,EAAW6G,YAAcA,EACzB7G,EAAW8G,aAAeA,EAC1B9G,EAAW5P,aAAapR,KACpBhQ,EAA2C63B,EAC3CC,EAAa,IAGzBxD,EAASI,YACLC,GAAW,WAAXA,kBAGA,CAACyB,EAAK2B,EAAKC,EAAOC,EAAIC,EAAMC,KACxB,MAAM3L,EAAK0I,GAAAA,QAAAA,mBAA2BkB,IACH,IAA/B2B,EAAIxwB,QAAQ,gBAA0D,IAAlCwwB,EAAIxwB,QAAQ,kBAIpDypB,EAAW5P,aAAapR,KACpBhQ,GACAwsB,EAAIuL,EAAKE,EAAIC,EAAMC,EAAQ,IAGvC7D,EAASI,YACLC,GAAW,WAAXA,0BAGA,CAACyB,EAAK2B,EAAKC,EAAOC,KACd,MAAMzL,EAAK0I,GAAAA,QAAAA,mBAA2BkB,GAEtCpF,EAAW5P,aAAapR,KACpBhQ,GACAwsB,EAAIuL,EAAKE,EAAG,IAGxB3D,EAASI,YAAYC,GAAW,WAAXA,iBACjB,CAACyB,EAAKhb,KACF,MAAMoR,EAAK0I,GAAAA,QAAAA,mBAA2BkB,GAChCpB,EAAchE,EAAWiE,mBAAmBzI,GAE7CwI,GAAeA,EAAYoD,UAAYhd,IAG5C4Z,EAAYoD,QAAUhd,EACtB4V,EAAW5P,aAAapR,KACpBhQ,GAA2CwsB,EAAIpR,GAAO,IAGlEkZ,EAASI,YAAYC,GAAW,WAAXA,uBACjB,CAACxD,EAAMkH,KACH,MAAM7L,EAAK0I,GAAAA,QAAAA,mBAA2B/D,GAChC6D,EAAchE,EAAWiE,mBAAmBzI,GAE9CwI,EACAhE,EAAW5P,aAAapR,KACpBhQ,GACAg1B,EAAaqD,GAEjBrH,EAAW5P,aAAapR,KACpBhQ,GACAwsB,EAAI6L,EACZ,IAGR/D,EAASgE,oBAAoB,cAAc,CAACvgB,EAAMoZ,KAG9C,GAAIH,EAAWuH,aAAepH,EAC1B,OAEJ,MAAM6D,EAAchE,EAAWiE,mBAAmB9D,GAElD,IAAK6D,IAAgBA,EAAYuC,cAC7B,OAEJ,MAAMiB,EAA4C,SAA1BzgB,EAAKlO,WAAWme,MAClCyQ,EAA4C,SAA1B1gB,EAAKlO,WAAWvC,MAExC,IAAIoxB,GAAU,EAEVF,IAAoBxH,EAAW2H,iBAAiB3Q,QAChDgJ,EAAW2H,iBAAiB3Q,MAAQwQ,EACpCE,GAAU,GAGVD,IAAoBzH,EAAW2H,iBAAiBrxB,QAChD0pB,EAAW2H,iBAAiBrxB,MAAQmxB,EACpCC,GAAU,GAGVA,GACA1H,EAAW5P,aAAapR,KACpBhQ,GACAgxB,EAAW2H,iBAEnB,IAGA3H,EAAWiB,aAEXqC,EAASI,YAAYC,GAAW,WAAXA,uBACjBX,IACIhD,EAAWiB,WAAWnV,6BAClBkX,EAAQrc,eAAe,IAInC2c,EAASI,YAAYC,GAAW,WAAXA,0BACjB,CAACxe,EAAG8B,KACA+Y,EAAWiB,WAAW1U,0BAA0BpH,EAAG8B,EAAG,KAKlEtR,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,4BAC3B30B,IACJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,uBAC3B30B,IAGJ2G,KAAK6tB,kBAAkBqB,QAAQlB,GAAW,WAAXA,sBAC3B30B,GACR,EAKA8zB,GAA4B/rB,UAAU6wB,kBAAoB,WACtD,MAAM5H,EAAarqB,KAAKqqB,WAClB6D,EAAM7D,EAAW6D,IAEvBA,EAAIH,YACAmE,GAAAA,QAAAA,mBACA7H,EAAW8H,mBAAmB/B,KAAK/F,IAEvC6D,EAAIH,YACAmE,GAAAA,QAAAA,qBACA7H,EAAW+H,qBAAqBhC,KAAK/F,IAEzC6D,EAAIH,YAAYmE,GAAAA,QAAAA,0BACZ,CAACG,EAAUC,EAAUzG,KACjB,IAAKxB,EAAWkI,sBAAwBF,GAAYhI,EAAWmI,0BAA4B3G,IAChFxB,EAAWuD,OAClBvD,EAAWkI,oBAAsBF,EACjChI,EAAWmI,wBAA0B3G,EACrCxB,EAAW5P,aAAapR,KACpBhQ,GAAgDg5B,EAAUC,EAAUzG,GACpExB,EAAWiB,YAAcjB,EAAWuH,aAAeS,GAEnDhI,EAAWiB,WAAWxV,yBAAyBuU,EAAWuD,KAAK6E,QAAS5G,GAExExB,EAAWkI,sBAAwBF,GAC/BC,GAAYA,EAAS5uB,QAAQ,CAC7B,MAAMkb,EAAc0T,EAASjyB,MAAM,GAG/BgqB,EAAWuH,WAAaS,GACxBzT,EAAYrP,OAAO,EAAG,EAAG8iB,GAIzBzT,EAAYlb,OnB7hBH,GmB8hBTkb,EAAYrP,OnB9hBH,EmB8hBiCqP,EAAYlb,OnB9hB7C,GmBgiBb2mB,EAAWiB,YAAcjB,EAAWiB,WAAW/L,eAAeX,EAClE,CAER,IAGRsP,EAAIH,YAAYmE,GAAAA,QAAAA,mBAA6B,KACzC,MAAMnW,EAAMjT,OAAO4pB,YAAY3W,MACzBrU,EAAM,sBAGZ+B,GAAOwG,IAAK,UAASvI,OAAUqU,GAC/BsO,EAAWuD,KAAKyB,gBAAgB3nB,GAAOqU,EACvC8L,GAAWmF,cACP3pB,GAAkCqE,EAAK,CAAEC,MAAOoU,KAEpDsO,EAAW5P,aAAapR,KAAKhQ,GAA0C,IAG3E60B,EAAIH,YAAYmE,GAAAA,QAAAA,qBAA+BS,IAC3CtI,EAAW5P,aAAapR,KAAKhQ,GAA2Cs5B,EAAG,IAG/EzE,EAAIH,YAAYmE,GAAAA,QAAAA,sBAAgCniB,IAC5C,IAAK,MAAMsd,KAAWrtB,KAAKqqB,WAAWuI,mBAClCvF,EAAQwF,iBAAiB9iB,EAAKsM,GAAUwK,MAC5C,IAGJqH,EAAIH,YAAYmE,GAAAA,QAAAA,sBAAgCniB,IAC5C,IAAK,MAAMsd,KAAWrtB,KAAKqqB,WAAWuI,mBAClCvF,EAAQwF,iBAAiB9iB,EAAKsM,GAAUkL,MAC5C,IAGJ2G,EAAIH,YAAYmE,GAAAA,QAAAA,2BACZ,CAAC1H,EAAMkH,KACH,MAAMrD,EAAchE,EAAWiE,mBAAmB9D,GAE9C6D,EACAhE,EAAW5P,aAAapR,KACpBhQ,GACAg1B,EAAaqD,GAEjBjoB,GAAON,KAEI,mEAAeqhB,IACtBkH,EACR,IAGRxD,EAAIH,YAAYmE,GAAAA,QAAAA,yBACZ,CAAC1H,EAAMkH,KACH,MAAMrD,EAAchE,EAAWiE,mBAAmB9D,GAE9C6D,EACAhE,EAAW5P,aAAapR,KAAKhQ,GAA+Cg1B,EAAaqD,GAEzFjoB,GAAON,KAAM,oEAAmEqhB,IACpF,IAGR0D,EAAIH,YAAYmE,GAAAA,QAAAA,qBACZ,CAACtd,EAAKke,KACGle,EAAIK,OACL4S,GAAWuE,QACPzjB,KAAKC,UAAU,CACXid,GAAI,cACJle,MAAOmrB,IAEnB,IAER5E,EAAIH,YAAYmE,GAAAA,QAAAA,sBACZ,CAACtd,EAAKke,KACGle,EAAIK,OACL4S,GAAWuE,QACPzjB,KAAKC,UAAU,CACXid,GAAI,eACJle,MAAOmrB,IAEnB,IAGR5E,EAAIH,YAAYmE,GAAAA,QAAAA,sBACZ,CAAC1iB,EAAGoF,KACAyV,EAAWiB,WAAWjV,uBAAuB7G,EAAGoF,GAC3CA,EAAIK,OACLoV,EAAW5P,aAAapR,KAAKhQ,EACzBtB,EAA2CyX,EACnD,IAGR0e,EAAIH,YAAYmE,GAAAA,QAAAA,qBACZ,CAAC1iB,EAAGoF,KACAyV,EAAWiB,WAAWlV,sBAAsB5G,EAAGoF,GAC1CA,EAAIK,OACLoV,EAAW5P,aAAapR,KAAKhQ,EACzBtB,EAA2CyX,EACnD,IAGR0e,EAAIH,YAAYmE,GAAAA,QAAAA,8BACZ,CAAC1iB,EAAGoF,KACAyV,EAAWiB,WAAW5U,uBAAuBlH,EAAGoF,GAC3CA,EAAIK,OACLoV,EAAW5P,aAAapR,KAAKhQ,EACzBtB,EAA2CyX,EACnD,IAGR0e,EAAIH,YAAYmE,GAAAA,QAAAA,+BACZ,CAAC1iB,EAAGoF,KACAyV,EAAWiB,WAAW3U,wBAAwBnH,EAAGoF,GAC5CA,EAAIK,OACLoV,EAAW5P,aAAapR,KAAKhQ,EACzBtB,EAA2CyX,EACnD,IAGR0e,EAAIH,YAAYmE,GAAAA,QAAAA,0BACZ,CAAC7P,EAAO1Q,KAKA0Q,EAAM0Q,gBAAkB1Q,EAAM2Q,YAAcC,GAAU,UAAVA,SAC5C5I,EAAWiB,WAAW9U,wBAAuB,EAAM7E,EACvD,GAEZ,EAKAwb,GAA4B/rB,UAAU8xB,oBAAsB,WACxD,MAAM7I,EAAarqB,KAAKqqB,WAExBhpB,OAAO8G,KAAKnI,KAAKotB,eAAehf,SAAQW,IACpCsb,EAAWvC,KAAK8B,eACZ7a,EACA/O,KAAKotB,cAAcre,GAAW,IAEtC/O,KAAKotB,cAAgB,CAAC,CAC1B,EAMAD,GAA4B/rB,UAAU+xB,mBAAqB,WACvD,MAAM9I,EAAarqB,KAAKqqB,WAExBrqB,KAAKozB,2BACDpF,GAAW,WAAXA,cACA3D,EAAWgJ,eAAejD,KAAK/F,IACnCrqB,KAAKozB,2BACDpF,GAAW,WAAXA,cACA3D,EAAWiJ,eAAelD,KAAK/F,IACnCrqB,KAAKozB,2BACDpF,GAAW,WAAXA,eACA3D,EAAWkJ,gBAAgBnD,KAAK/F,IACpCrqB,KAAKozB,2BACDpF,GAAW,WAAXA,WACA3D,EAAWmJ,YAAYpD,KAAK/F,IAEhCrqB,KAAKozB,2BAA2BpF,GAAW,WAAXA,wBAC5B,CAACyF,EAAYC,KACLrJ,EAAWxqB,QAAQ8zB,OAAOC,mBAI9BvJ,EAAWwH,gBAAkB4B,EAC7BpJ,EAAWyH,gBAAkB4B,EAEzBD,IACApJ,EAAWyE,gBAAiB,GAG5B4E,IACArJ,EAAW4E,qBAAsB,GAKrC5E,EAAWrD,iBAAiB5Y,SAAQiU,IAChC,OAAQA,EAAMoL,WACd,KAAKpR,GAAUkL,MACX8C,EAAWwH,iBAAmBxP,EAAM1N,OACpC,MACJ,KAAK0H,GAAUwK,MACXwD,EAAWyH,iBAAmBzP,EAAM1N,OAExC,IAGJ0V,EAAW5P,aAAapR,KAAKhQ,IAAoC,IAGzE2G,KAAKozB,2BAA2BpF,GAAW,WAAXA,+BAC5B6F,IACIxJ,EAAW5P,aAAapR,KAAKhQ,GAAoDw6B,EAAiB,IAG1G7zB,KAAKozB,2BAA2BpF,GAAW,WAAXA,uBAC5B,CAACrmB,EAAO7D,EAAWgwB,KACf,MAAMC,EAAmB1J,EAAW2J,kBAAkBC,MAAKC,GAAKA,EAAEC,WAAaL,IAE/EzJ,EAAW5P,aAAapR,KAAKhQ,GAA6C,CACtE+6B,QAASzsB,EACT7D,YACA6qB,MAAOoF,GACT,IAEV/zB,KAAKozB,2BAA2BpF,GAAW,WAAXA,oCAC5B,CAAClqB,EAAW2rB,KACR,MAAMpB,EAAchE,EAAWiE,mBAAmBC,GAAAA,QAAAA,mBAA2BkB,IAEzEpB,GACAhE,EAAW5P,aAAapR,KAAKhQ,GAA0D,CACnFg1B,cACAvqB,aAER,IAER9D,KAAKozB,2BAA2BpF,GAAW,WAAXA,oCAC5B,CAAClqB,EAAW2rB,KACR,MAAMpB,EAAchE,EAAWiE,mBAAmBC,GAAAA,QAAAA,mBAA2BkB,IAEzEpB,GACAhE,EAAW5P,aAAapR,KAAKhQ,GAA0D,CACnFg1B,cACAvqB,aAER,IAER9D,KAAKozB,2BAA2BpF,GAAW,WAAXA,wBAC5BrmB,GAAS0iB,EAAW5P,aAAapR,KAAKhQ,GAA8C,CAAEyK,UAAW6D,MACrG3H,KAAKozB,2BAA2BpF,GAAW,WAAXA,wBAC5BrmB,IACI0iB,EAAW5P,aAAapR,KAAKhQ,GAA8C,CAAEyK,UAAW6D,GAAQ,GAE5G,EAKAwlB,GAA4B/rB,UAAUgyB,2BAA6B,SAC3DrkB,EAAW0a,GACfzpB,KAAKotB,cAAcre,GAAa0a,EAChCzpB,KAAKqqB,WAAWvC,KAAKiG,YAAYhf,EAAW0a,EAChD,EAKA0D,GAA4B/rB,UAAUizB,yBAA2B,WAC7D,MAAMhK,EAAarqB,KAAKqqB,WAEnBA,EAAWiB,aAKhBjB,EAAWiB,WAAW9B,uBAAsB,CAAC5U,EAAKjD,EAAM2iB,EAAO1e,KAC3DyU,EAAW6D,IAAIqG,cAAc3f,EAAKjD,EAAM2iB,EAAO1e,EAAQ,IAM3DyU,EAAWiB,WAAWzB,2BAA0B,KAC5CQ,EAAW5P,aAAapR,KACpBhQ,EAAiD,IAIpDgxB,EAAWxqB,QAAQ8zB,OAAOa,aAC3BnK,EAAWiB,WAAWrB,0BAAyB,CAACrV,EAAKiG,KACjDwP,EAAWrD,eAAe3K,GAAUkL,OAAOnZ,SAAQiU,IAC/C,MAAM1Q,EAAOiD,EAAI0S,aAAajF,GAEzB1Q,GAASkJ,EAAMgF,eAAelO,IAInC0Q,EAAMoS,wBAAwB7f,EAAKiG,EAAMlJ,GAAM,GACjD,IAGd,EC9zBe,MAAM+iB,GAmBjBnzB,YAAYkuB,EAAKpF,EAAYsK,EAAaC,EAAQC,EAASpgB,EAAQqgB,EAAUC,EAAaC,GACtFh1B,KAAKi1B,KAAOxF,EACZzvB,KAAKk1B,IAAM3G,GAAAA,QAAAA,mBAA2BkB,GACtCzvB,KAAKm1B,YAAc9K,EACnBrqB,KAAKo1B,aAAeT,EACpB30B,KAAKq1B,eAAgB,EACrBr1B,KAAKs1B,QAAU,GACft1B,KAAKu1B,MAAQ,OACbv1B,KAAKyxB,QAAUhd,EACfzU,KAAKw1B,QAAUZ,EACf50B,KAAKy1B,SAAWZ,EAChB70B,KAAK01B,YAAc,CAAC,EACpB11B,KAAK21B,UAAYb,EACjB90B,KAAK41B,aAAeb,EACpB/0B,KAAK61B,YAAcb,EACnBh1B,KAAK81B,UAAY,IAAIloB,IAarB5N,KAAK+1B,SAAW,IAAI/W,GACxB,CAWAgX,kBAAkBlyB,GACd,OAAO9D,KAAKi2B,YAAYpe,QACpB,CAAC8T,EAAOtJ,IACJsJ,IAAUtJ,EAAMoL,YAAc3pB,GAAaue,EAAMmL,aACrD,EACR,CAUA0I,YAAYpyB,EAAW6nB,EAAOlJ,EAAYuQ,GAAW,IAAAmD,EACjD,IAAIC,EAAoBp2B,KAAK+1B,SAASpR,IAAI7gB,GAC1C,MAAMuyB,EAAa,CACf1K,QACAqH,aAGiB,QAArBmD,EAAIC,SAAiB,IAAAD,GAAjBA,EAAmBhoB,KACnBioB,EAAkBtQ,IAAIrD,EAAY4T,IAKtCD,EAAoB,IAAIpX,IACxBoX,EAAkBtQ,IAAIrD,EAAY4T,GAClCr2B,KAAK+1B,SAASjQ,IAAIhiB,EAAWsyB,GACjC,CAOAE,aACI,OAAOt2B,KAAKu2B,QAChB,CAMAC,gBACI,OAAOx2B,KAAKm1B,WAChB,CAOAsB,mBACI,OAAOz2B,KAAK02B,cAChB,CAKAC,iBACI,OAAO32B,KAAKo1B,YAChB,CAMAwB,cACI,OAAOviB,QAAQC,QAAQtU,KAAK81B,UAChC,CAKAe,QACI,OAAO72B,KAAKk1B,GAChB,CAKAf,SACI,OAAOn0B,KAAKi1B,IAChB,CAKA6B,YAAY/2B,GACR,OAAOC,KAAK01B,YAAY31B,EAC5B,CAKAg3B,UACI,OAAO/2B,KAAKu1B,KAChB,CAMAyB,aACI,OAAOh3B,KAAK+1B,QAChB,CAKAkB,aACI,OAAOj3B,KAAKy1B,QAChB,CAKA9F,YACI,OAAO3vB,KAAKyxB,OAChB,CAMAwE,YACI,OAAOj2B,KAAKs1B,QAAQj1B,OACxB,CAOA62B,qBAAqBpzB,GACjB,OAAO9D,KAAKi2B,YAAYhe,QAAOoK,GAASA,EAAMoL,YAAc3pB,GAChE,CAQAqzB,WAAWC,GACP,OAAOp3B,KAAK81B,UAAU/K,IAAIqM,EAC9B,CAKAC,eACI,OAAOr3B,KAAKg2B,kBAAkB3Z,GAAUkL,MAC5C,CAOA+P,WACI,OAAOt3B,KAAKw1B,OAChB,CAOA+B,uBAAuB,IAAAC,EAAAC,EACnB,MAA0D,UAArC,QAAdD,EAAAx3B,KAAK21B,iBAAS,IAAA6B,GAAM,QAANC,EAAdD,EAAgBE,YAAI,IAAAD,OAAN,EAAdA,EAAuB,wBAClC,CAKA7G,cACI,MAAsB,cAAf5wB,KAAKu1B,KAChB,CAMAP,aACI,OAAOh1B,KAAK61B,WAChB,CAMAd,cACI,OAAO/0B,KAAK41B,YAChB,CAKA+B,eACI,OAAO33B,KAAKg2B,kBAAkB3Z,GAAUwK,MAC5C,CAMA+Q,WAAWC,GACP73B,KAAKu2B,SAAWsB,CACpB,CAMAC,iBAAiBC,GACb/3B,KAAK02B,eAAiBqB,CAC1B,CAMAvJ,YAAYwJ,GACRh4B,KAAK81B,UAAYkC,GAAe,IAAIpqB,GACxC,CAMAqqB,cAAcC,GACVl4B,KAAK61B,YAAcqC,CACvB,CAMAC,eAAeC,GACXp4B,KAAK41B,aAAewC,CACxB,CAQApI,YAAYjwB,EAAM4H,GACd,MAAM0wB,EAAWr4B,KAAK01B,YAAY31B,GAE9B4H,IAAU0wB,IACVr4B,KAAK01B,YAAY31B,GAAQ4H,EACzB3H,KAAKm1B,YAAY1a,aAAapR,KAC1BhQ,GACA2G,KACAD,EACAs4B,EACA1wB,GAEZ,CAMA2wB,QAAQC,GACJv4B,KAAKu1B,MAAQgD,CACjB,CAKAC,eACI,OAAOx4B,KAAKq1B,aAChB,ECxVG,IAAKoD,GAAqB,SAArBA,GAAqB,OAArBA,EAAqB,4DAArBA,EAAqB,0DAArBA,EAAqB,gDAArBA,EAAqB,oCAArBA,EAAqB,yDAArBA,CAAqB,MA+C1B,MAAMh2B,GAA0Bg2B,GAAsBh2B,wBAChDzI,GAAyBy+B,GAAsBz+B,uBAC/C0+B,GAAoBD,GAAsBC,kBAC1CC,GAAcF,GAAsBE,YACpCC,GAAwBH,GAAsBG,8BCnDpD,IAAKC,GAAqB,SAArBA,GAAqB,OAArBA,EAAqB,mDAArBA,EAAqB,oCAArBA,EAAqB,gDAArBA,EAAqB,sCAArBA,CAAqB,MAgC1B,MAAMC,GAA2BD,GAAsBC,yBACjDC,GAAcF,GAAsBE,YACpC9/B,GAAoB4/B,GAAsB5/B,kBAC1C+/B,GAAeH,GAAsBG,aC/BnC,MAAMC,GAIjB13B,cAAc,IAAA23B,EAAA,KACVl5B,KAAKm5B,QAAU,IAAI9kB,SAAQ,CAACC,EAASC,KACjCvU,KAAKsU,QAAU,WACX4kB,EAAKE,qBACL9kB,KAAQ7Q,UACZ,EACAzD,KAAKuU,OAAS,WACV2kB,EAAKE,qBACL7kB,KAAO9Q,UACX,CAAC,IAELzD,KAAK+f,KAAO/f,KAAKm5B,QAAQpZ,KAAKqQ,KAAKpwB,KAAKm5B,SACxCn5B,KAAKkgB,MAAQlgB,KAAKm5B,QAAQjZ,MAAMkQ,KAAKpwB,KAAKm5B,QAC9C,CAKAC,qBACIC,aAAar5B,KAAKs5B,SACtB,CAKAC,iBAAiBC,GACbx5B,KAAKs5B,SAAWG,YAAW,KACvBz5B,KAAKuU,OAAO,IAAIrT,MAAM,WAAW,GAClCs4B,EACP,EClCW,MAAME,GAMjBn4B,cAA+C,IAAnCkZ,EAAYhX,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,IAAIgE,MAC3BzH,KAAKya,aAAeA,EAGpBza,KAAKyL,iBAAmBzL,KAAK0pB,GAAK1pB,KAAK+tB,YACvC/tB,KAAK25B,oBAAsB35B,KAAK45B,IAAM55B,KAAK4pB,cAC/C,CAQAmE,YAAYhf,EAAW0a,GAGnB,OAFAzpB,KAAKya,aAAasT,YAAYhf,EAAW0a,GAElC,IAAMzpB,KAAK25B,oBAAoB5qB,EAAW0a,EACrD,CAQAG,eAAe7a,EAAW0a,GACtBzpB,KAAKya,aAAamP,eAAe7a,EAAW0a,EAChD,ECrCJ,MAAMhgB,IAASC,EAAAA,EAAAA,0CAITmwB,GAAaC,OAAO,cAcX,MAAMC,GAKjBx4B,cAAgC,IAApB,UAAEy4B,GAAWv2B,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAGrBw2B,EAAU,GACd,MAAMC,EAAMC,SAASC,cAAc,iCAEnC,GAAIF,EAAK,CACL,MAAMG,EAAMH,EAAII,IAAIpP,YAAY,KAEhC+O,EAAW,GAAEC,EAAII,IAAIpK,UAAU,EAAGmK,KACtC,CAEA,IAAIE,EAAa,GAAEN,iCAKnB,GAAIA,GAAuB,MAAZA,EAAiB,CAG5B,MAAMO,EACA,IAAIC,KAAK,CAAG,kBAAiBF,QAAkB,CAAEn3B,KAAM,2BAE7Dm3B,EAAYzxB,OAAO4xB,IAAIC,gBAAgBH,EAC3C,CAEAx6B,KAAK46B,QAAU,IAAIC,OAAON,EAAW,CAAEx6B,KAAM,gBAE7CC,KAAK46B,QAAQE,QAAUtrB,GAAK/F,GAAO7J,MAAM4P,GAEzCxP,KAAK46B,QAAQhuB,YAAY,CACrBmuB,UAAW,aACXf,aAER,CAQAgB,QAAQlY,GACJ9iB,KAAK46B,QAAQhuB,YAAY,CACrBmuB,UAAW,UACXjY,iBAER,CAMAmY,aACIj7B,KAAK46B,QAAQhuB,YAAY,CACrBmuB,UAAW,cAEnB,CAUAG,eAAeC,EAAUvU,EAAM9D,GAC3B,IAAIqY,EAAStB,IAKb,GAFAsB,EAAStB,KAAc,EAEnB/wB,OAAOwD,sBAAuB,CAC9B,MAAMzM,EAAU,CACZk7B,UAAW,SACXjY,iBAGJqY,EAASC,UAAY,IAAI9uB,sBAAsBtM,KAAK46B,QAAS/6B,EACjE,KAAO,CACH,MAAMw7B,EAAkBF,EAAS1uB,uBAEjCzM,KAAK46B,QAAQhuB,YAAY,CACrBmuB,UAAW,SACXO,eAAgBD,EAAgBE,SAChCC,eAAgBH,EAAgBrzB,SAChC8a,iBACD,CAAEuY,EAAgBE,SAAUF,EAAgBrzB,UACnD,CACJ,CAUAyzB,aAAaC,EAAQ9U,EAAM9D,GACvB,IAAI4Y,EAAO7B,IAKX,GAFA6B,EAAO7B,KAAc,EAEjB/wB,OAAOwD,sBAAuB,CAC9B,MAAMzM,EAAU,CACZk7B,UAAW,SACXjY,iBAGJ4Y,EAAON,UAAY,IAAI9uB,sBAAsBtM,KAAK46B,QAAS/6B,EAC/D,KAAO,CACH,MAAM87B,EAAgBD,EAAOjvB,uBAE7BzM,KAAK46B,QAAQhuB,YAAY,CACrBmuB,UAAW,SACXO,eAAgBK,EAAcJ,SAC9BC,eAAgBG,EAAc3zB,SAC9B8a,iBACD,CAAE6Y,EAAcJ,SAAUI,EAAc3zB,UAC/C,CACJ,CASA4zB,OAAO9Y,EAAepb,EAAKm0B,GACvB77B,KAAK46B,QAAQhuB,YAAY,CACrBmuB,UAAW,SACXrzB,MACAm0B,WACA/Y,iBAER,EC5JJ,MAAMrZ,IAASC,EAAAA,EAAAA,yCAKR,MAAMoyB,WAAmBpC,GAM5Bn4B,YAAY8oB,GAA0B,IAAdxqB,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/BmE,QAEA5H,KAAKqqB,WAAaA,EAClBrqB,KAAK+7B,QAAU,IAAIC,GAAYn8B,GAE/BG,KAAKo0B,SAAU,EACfp0B,KAAKi8B,eAAY37B,EAOjBN,KAAKqqB,WAAWX,GACZrwB,GACA2G,KAAKk8B,uBAAuB9L,KAAKpwB,OACrCA,KAAKqqB,WAAWX,GACZrwB,IACAgpB,GAASA,EAAMzM,WAAa5V,KAAKm8B,mBAAmB9Z,KACxDriB,KAAKqqB,WAAW6D,IAAIxE,GAChBwI,GAAAA,QAAAA,oBACA,CAAC7P,EAAOzN,IAAQ5U,KAAKo8B,2BAA2BxnB,EAAKyN,KACzDriB,KAAKqqB,WAAWX,GACZrwB,GACA2G,KAAKq8B,kBAAkBjM,KAAKpwB,MACpC,CAOAs8B,YACI,OAAOt8B,KAAKo0B,OAChB,CAQAta,iBAAiBsa,GACbp0B,KAAKi8B,iBAAmBj8B,KAAKi8B,UAEzB7H,IAAYp0B,KAAKo0B,UAIrBp0B,KAAKi8B,UAAY,IAAIhD,GAErBj5B,KAAKo0B,QAAUA,EAEVA,GACDp0B,KAAK+7B,QAAQd,aAGjBj7B,KAAKu8B,mBAAqBv8B,KAAKu8B,YAAYnI,GAE3Cp0B,KAAKqqB,WAAWmS,4BAA4B,eAAgBpI,GAE5Dp0B,KAAKqqB,WAAWoS,wBAEhBz8B,KAAKi8B,UAAU3nB,UACnB,CAOAooB,mBACI,MAAM,IAAIx7B,MAAM,8BACpB,CAOAi7B,mBAAmB9Z,GACf,IAAK,MAAMgL,KAAWrtB,KAAKqqB,WAAWuI,mBAClC5yB,KAAK28B,yBAAyBtP,EAAShL,EAE/C,CAOA6Z,uBAAuB7O,GACnB,MAAMuP,EAAc58B,KAAKqqB,WAAWrD,iBAEpC,IAAK,MAAM3E,KAASua,EAChB58B,KAAK28B,yBAAyBtP,EAAShL,EAE/C,CAOA+Z,2BAA2BxnB,EAAKyN,GAC5B,IAAKriB,KAAKo0B,QACN,OAGJ,MAAM+G,EAAWvmB,EAAIioB,qBAAqBxa,EAAMA,OAE5C8Y,EACAn7B,KAAK+7B,QAAQb,eAAeC,EAAU9Y,EAAMoL,UAAWpL,EAAMU,oBAE7DtZ,GAAON,KAAM,6BAA4BkZ,6BAAiCzN,IAElF,CASA+nB,yBAAyBtP,EAAShL,GAC9B,IAAKriB,KAAKo0B,QACN,OAGJ,MAAM9iB,EAAK+b,EAAQrc,eACb0qB,EAASpqB,GAAMA,EAAGwrB,mBAAmBza,EAAMA,OAE7CqZ,EACA17B,KAAK+7B,QAAQN,aAAaC,EAAQrZ,EAAMoL,UAAWpL,EAAMU,oBAEzDtZ,GAAON,KAAM,6BAA4BkZ,0BAA8B/Q,IAE/E,CAOA+qB,kBAAkBha,GACd,GAAIpU,GAAQrE,+BAAiCyY,EAAMzM,WAAayM,EAAM0Q,iBAAmB1Q,EAAMmL,UAC3F,IAAK,MAAMH,KAAWrtB,KAAKqqB,WAAWuI,mBAClC5yB,KAAK28B,yBAAyBtP,EAAShL,EAGnD,ECxKG,MAAM0a,WAAoCjB,GAK7Cv6B,YAAY8oB,GACRziB,MAAMyiB,EAAY,CAAE2P,WAAW,GACnC,CASA4B,OAAOoB,GACHh9B,KAAK+7B,QAAQH,YAAOt7B,EAAW,CAAE28B,cAAeD,EAAQC,eAAiBD,EAAQE,MACrF,kDCtBc,MACA,MADX,MAEMC,GAAK,MACA,MCJX,IAAKC,GAAU,SAAVA,GAAU,OAAVA,EAAU,wDAAVA,EAAU,8CAAVA,EAAU,4CAAVA,EAAU,gEAAVA,EAAU,4EAAVA,EAAU,sEAAVA,CAAU,MC0BtB,MAAMC,GAAe,CACjB,CAAE,KAAM,OACR,CAAE,KAAM,OACR,CAAE,KAAM,QACR,CAAE,KAAM,SACR,CAAE,KAAM,WACR,CAAE,KAAM,OACR,CAAE,KAAM,YACR,CAAE,KAAM,UACR,CAAE,KAAM,SACR,CAAE,KAAM,WACR,CAAE,KAAM,WACR,CAAE,KAAM,UACR,CAAE,KAAM,QACR,CAAE,KAAM,WACR,CAAE,KAAM,aACR,CAAE,KAAM,UACR,CAAE,KAAM,QACR,CAAE,KAAM,UACR,CAAE,KAAM,YACR,CAAE,KAAM,SACR,CAAE,KAAM,QACR,CAAE,KAAM,SACR,CAAE,KAAM,QACR,CAAE,KAAM,UACR,CAAE,KAAM,SACR,CAAE,KAAM,cACR,CAAE,KAAM,QACR,CAAE,KAAM,SACR,CAAE,KAAM,QACR,CAAE,KAAM,SACR,CAAE,KAAM,UACR,CAAE,KAAM,SACR,CAAE,KAAM,OACR,CAAE,KAAM,WACR,CAAE,KAAM,WACR,CAAE,KAAM,SACR,CAAE,KAAM,aACR,CAAE,KAAM,YACR,CAAE,IAAK,aACP,CAAE,IAAK,SACP,CAAE,KAAM,QACR,CAAE,KAAM,cACR,CAAE,KAAM,QACR,CAAE,KAAM,UACR,CAAE,KAAM,aACR,CAAE,KAAM,YACR,CAAE,KAAM,QACR,CAAE,KAAM,OACR,CAAE,KAAM,UACR,CAAE,KAAM,aACR,CAAE,KAAM,QACR,CAAE,KAAM,SACR,CAAE,KAAM,WACR,CAAE,KAAM,aACR,CAAE,KAAM,UACR,CAAE,KAAM,UACR,CAAE,IAAK,QACP,CAAE,KAAM,UACR,CAAE,KAAM,WACR,CAAE,KAAM,QACR,CAAE,KAAM,UACR,CAAE,KAAM,cACR,CAAE,KAAM,UACR,CAAE,KAAM,QAyBNC,GAAgB,CAClBC,QA1GJ,SAA4BC,GASxB,MAAO,CACqC,KAAvCA,EAAS,IAAM,EAAIA,EAAS,IAAM,GACiC,MAApD,EAAdA,EAAS,KAAa,GAAKA,EAAS,IAAM,EAAIA,EAAS,IAAM,GACd,MAAjC,GAAdA,EAAS,KAAc,EAAIA,EAAS,IAAM,GAEpD,EA6FIC,MAjBJ,SAA0BD,GAYtB,MAVe,CACXA,EAAS,IAAM,GACA,EAAdA,EAAS,KAAa,EAAIA,EAAS,IAAM,GAC3B,GAAdA,EAAS,KAAa,EAAIA,EAAS,IAAM,EAC5B,GAAdA,EAAS,GACTA,EAAS,IAAM,GACA,EAAdA,EAAS,KAAa,EAAIA,EAAS,IAAM,GAC3B,GAAdA,EAAS,KAAa,EAAIA,EAAS,IAAM,GAGhCE,KAAIC,GAAON,GAAaM,IAC1C,GClGMl0B,IAASC,EAAAA,EAAAA,yCAETk0B,GAAc,IACdC,GAAmB,MACnBC,GACK,QADLA,GAEQ,WAFRA,GAGY,eAHZA,GAIW,cAJXA,GAKY,eALZA,GAMS,YANTA,GAOU,aAPVA,GAQO,UARPA,GASO,UAIPC,GAAgC,6BAChCC,GAAmC,gBAEnCC,GAAWnE,OAAO,WAElBoE,GAAmB,CACrBC,+BAAgC,qCAChCC,0BAA2B,gCAC3BC,sBAAuB,4BACvBC,wBAAyB,8BACzBC,mCAAoC,0CAuBjC,MAAMC,WAAmB9E,GAI5Bn4B,YAAY8oB,GACRziB,QAEA5H,KAAKy+B,MAAQpU,EACbrqB,KAAK0+B,MAAQ,IAAIzF,GACjBj5B,KAAK2+B,eAAYr+B,EACjBN,KAAK4+B,gBAAkB,EACvB5+B,KAAK6+B,MAAQ,IAAI7f,IACjBhf,KAAK8+B,4BAAyBx+B,EAE1Bk+B,GAAW7zB,eACX3K,KAAK++B,gBAEL/+B,KAAKy+B,MAAM/U,GAAGrwB,GAAiD2G,KAAKg/B,2BAA2B5O,KAAKpwB,OACpGA,KAAKy+B,MAAM/U,GAAGrwB,EAAuC2G,KAAKi/B,kBAAkB7O,KAAKpwB,OACjFA,KAAKy+B,MAAM/U,GAAGrwB,GAAiC2G,KAAKk/B,mBAAmB9O,KAAKpwB,OAC5EA,KAAKy+B,MAAM/U,GAAGrwB,GACV2G,KAAKm/B,8BAA8B/O,KAAKpwB,QAE5CA,KAAK0+B,MAAMnqB,OAAO,IAAIrT,MAAM,qBAEpC,CAOIk+B,WACA,OAAOp/B,KAAKy+B,MAAM7M,UACtB,CAKA9X,qBACI,GAAI9Z,KAAK8+B,uBACL,MAAM,IAAI59B,MAAM,iDACb,CACHlB,KAAK8+B,uBAAyB,IAAI7F,SAE5Bj5B,KAAK0+B,MAEX,MAAMW,EAAW,GACXC,EAAqBt/B,KAAKy+B,MAAM7M,WAEtC,IAAK,MAAMvD,KAAeruB,KAAKy+B,MAAMzK,kBAC7B3F,EAAY8I,WAAWoI,KAAiBD,EAAqBjR,EAAYwI,SACzEwI,EAAS/vB,KAAKtP,KAAKw/B,iBAAiBnR,UAItCha,QAAQorB,WAAWJ,GAIzBr/B,KAAK8+B,uBAAuBxqB,UAC5BtU,KAAK8+B,4BAAyBx+B,CAClC,CACJ,CAOAwP,qBACI,YAA6B,IAAfhH,OAAO42B,GACzB,CASA5lB,gBAAgBpS,GAEZ1H,KAAK2+B,UAAYj3B,EACjB1H,KAAK4+B,iBAGL,MAAMS,EAAW,GAEjB,IAAK,MAAMhR,KAAeruB,KAAKy+B,MAAMzK,kBAAmB,CACpD,MAAM2L,EAAMtR,EAAYwI,QAClB+I,EAAU5/B,KAAK6/B,uBAAuBxR,GAG5C,IAAKuR,EAAQvS,QAAS,CAClB5jB,GAAON,KAAM,oCAAmCw2B,4BAGhD,QACJ,CAEA,MAAMG,EAAOC,KACP3uB,EAAO,CACT,CAAC4uB,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAM,CACF8uB,WAAYlgC,KAAKmgC,gBAAgBP,EAAQvS,SACzCyS,UAINM,EAAI,IAAInH,GAEdmH,EAAE7G,iBAAiBqE,IACnBwC,EAAElgB,OAAM,KACJlgB,KAAK6+B,MAAM3oB,OAAO4pB,EAAK,IAE3B9/B,KAAK6+B,MAAM/Y,IAAIga,EAAMM,GACrBf,EAAS/vB,KAAK8wB,GAEdpgC,KAAKqgC,aAAajvB,EAAMuuB,EAC5B,CAMA,aAJMtrB,QAAQorB,WAAWJ,GAIlBr/B,KAAK4+B,cAChB,CAOA0B,sBAAsB54B,GAGlB,OAFA1H,KAAK2+B,UAAYj3B,EAEV1H,KAAK4+B,cAChB,CAMA2B,wBAAwBlS,GACpB,MAAMuR,EAAU5/B,KAAK6/B,uBAAuBxR,GAExCuR,EAAQvS,UACRuS,EAAQvS,QAAQmT,OAChBZ,EAAQvS,aAAU/sB,EAE1B,CAMAmgC,+BACI,IAAK,MAAMpS,KAAeruB,KAAKy+B,MAAMzK,kBACjCh0B,KAAKugC,wBAAwBlS,EAErC,CAMAqS,wBAAwBrS,EAAasS,GACjC,MAAMf,EAAU5/B,KAAK6/B,uBAAuBxR,GAEtCsR,EAAMtR,EAAYwI,QAExB,IAAK8J,EASD,OARAf,EAAQgB,qBAAkBtgC,EAC1BmJ,GAAON,KAAM,uCAAsCw2B,UACnD3/B,KAAKya,aAAapR,KACd60B,GAAiBK,mCACjBoB,GACA,EACAvC,GAAWyD,sCAKnB,IAAKjB,EAAQgB,gBAQT,OAPAn3B,GAAON,KAAM,eAAcw2B,8CAC3B3/B,KAAKya,aAAapR,KACd60B,GAAiBK,mCACjBoB,GACA,EACAvC,GAAW0D,mCAKnB,MAAM,IAAEC,EAAG,WAAEC,GAAepB,EAAQgB,gBAEhCG,GAAOA,EAAIE,qBAAuBD,IAClChhC,KAAKkhC,YAAY7S,GAGjBuR,EAAQgB,gBAAgBI,YAAa,EAE7C,CAQAlnB,sBACIrQ,GAAOgH,MAAM,uBAEb,UACUivB,IAAIpjB,OAEVtc,KAAKmhC,YAAc,IAAIzB,IAAI0B,QAC3BphC,KAAKmhC,YAAY7/B,SAEjBtB,KAAKqhC,QAAU14B,KAAK24B,MAAMthC,KAAKmhC,YAAYI,iBAE3C93B,GAAOgH,MAAO,OAAMivB,IAAI8B,sBAAsBhhC,KAAK,oBACnDR,KAAK0+B,MAAMpqB,UACXtU,KAAKyhC,eAAezhC,KAAKqhC,QAC7B,CAAE,MAAO7xB,GACL/F,GAAO7J,MAAM,2BAA4B4P,GACzCxP,KAAK0+B,MAAMnqB,OAAO/E,EACtB,CACJ,CA8BAkyB,kBAAkBrT,GACd,MAAMsR,EAAMtR,EAAYwI,QAClB+I,EAAU5/B,KAAK6/B,uBAAuBxR,GAE5C,IAAKuR,EAAQvS,QAGT,YAFA5jB,GAAON,KAAM,gDAA+Cw2B,4BAKhE,GAAIC,EAAQgB,gBAGR,YAFAn3B,GAAON,KAAM,gEAA+Dw2B,KAKhFC,EAAQgB,gBAAkB,CACtBG,IAAK,IAAIrB,IAAIiC,IACbC,cAAe7B,MAGnB,MAAM8B,EAAe,CACjBD,cAAehC,EAAQgB,gBAAgBgB,eAG3ChC,EAAQgB,gBAAgBiB,aAAeA,EACvCjC,EAAQgB,gBAAgBkB,aAAc,EAEtC,MAAMC,EAAe,CACjB,CAAC/B,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAMywB,IAId7hC,KAAKqgC,aAAa0B,EAAcpC,EACpC,CAMA8B,eAAeO,GACXv4B,GAAOgH,MAAO,qBAAoBuxB,KAGlC,IAAK,MAAMC,KAAWD,EAClB,GAAIA,EAAOniB,eAAeoiB,GAAU,CAChC,MAAMv6B,EAAMs6B,EAAOC,GAEnBjiC,KAAKy+B,MAAMjC,4BAA6B,cAAayF,IAAWv6B,EACpE,CAER,CAMAw6B,+BAA+Brc,GAC3Bpc,GAAOgH,MAAO,iCAAgCoV,aAClD,CASAsa,gBAAgB9S,GACZ,MAAM2P,EAAU,CAAC,EAOjB,YALuB18B,IAAnBN,KAAK2+B,YACL3B,EAAQt1B,MAAM1H,KAAK2+B,WAAYwD,GAAAA,cAAuBniC,KAAK2+B,WAC3D3B,EAAQnB,SAAW77B,KAAK4+B,gBAGrBvR,EAAQ+U,QAAQz5B,KAAKC,UAAUo0B,GAC1C,CASA6C,uBAAuBxR,GAGnB,OAFAA,EAAY4P,IAAY5P,EAAY4P,KAAa,CAAC,EAE3C5P,EAAY4P,GACvB,CAOAnkB,0BACIrQ,GAAOgH,MAAM,yBAEPzQ,KAAK0+B,MAEX,IAAK,MAAMrQ,KAAeruB,KAAKy+B,MAAMzK,kBACjCh0B,KAAKk/B,mBAAmB7Q,EAAYwI,QAASxI,GAG7CruB,KAAKmhC,cACLnhC,KAAKmhC,YAAYX,OACjBxgC,KAAKmhC,iBAAc7gC,EAE3B,CAQAwZ,iCAAiCuU,EAAaqD,GAC1C,GAAIA,EAAQsO,MAAyBnC,GACjC,OAGJ,IAAKnM,EAAQuO,IAGT,YAFAx2B,GAAON,KAAK,uCAKVnJ,KAAK0+B,MAEX,MAAM3uB,EAAM2hB,EAAQuO,IACdN,EAAMtR,EAAYwI,QAClB+I,EAAU5/B,KAAK6/B,uBAAuBxR,GAE5C,OAAQte,EAAI3M,MACZ,KAAK06B,GACD,GAAI8B,EAAQvS,QACR5jB,GAAON,KAAM,eAAcw2B,2BAE3B3/B,KAAKqiC,WAAWhU,EAAa,mCAC1B,CAGH,MAAMhB,EAAU,IAAIqS,IAAI4C,QAExBjV,EAAQkV,gBAAgBviC,KAAKmhC,YAAapxB,EAAIqB,KAAKoxB,MAAOzyB,EAAIqB,KAAKqxB,OACnE7C,EAAQvS,QAAUA,EAGlB,MAAMqV,EAAM,CACR,CAAC1C,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAM,CACF8uB,WAAYlgC,KAAKmgC,gBAAgB9S,GACjCyS,KAAM/vB,EAAIqB,KAAK0uB,QAK3B9/B,KAAKqgC,aAAaqC,EAAK/C,GACvB3/B,KAAKkiC,+BAA+BvC,EACxC,CACA,MAEJ,KAAK7B,GACD,GAAI8B,EAAQvS,QACR5jB,GAAON,KAAM,eAAcw2B,2BAE3B3/B,KAAKqiC,WAAWhU,EAAa,yBAC1B,GAAIte,EAAIqB,KAAK0uB,OAASF,EAAQ+C,mBAAoB,CACrD,MAAM,WAAEzC,GAAenwB,EAAIqB,KACrBgvB,EAAIpgC,KAAK6+B,MAAMla,IAAI5U,EAAIqB,KAAK0uB,MAC5BzS,EAAU,IAAIqS,IAAI4C,QAExBjV,EAAQuV,eAAe5iC,KAAKmhC,YAAajB,EAAW2C,MAGpD7iC,KAAKmhC,YAAY2B,qBAAqBzV,GAGtC,MAAMjc,EAAOic,EAAQ0V,QAAQ7C,EAAW98B,KAAM88B,EAAW2C,MAEzDjD,EAAQvS,QAAUA,EAClBuS,EAAQ+C,wBAAqBriC,EAE7BN,KAAKkiC,+BAA+BvC,GAEpC3/B,KAAK6+B,MAAM3oB,OAAOnG,EAAIqB,KAAK0uB,MAC3BM,EAAE9rB,UAEF,MAAM0uB,EAAOC,GAAc7xB,GAE3B,GAAI4xB,EAAKt7B,IAAK,CACV,MAAMA,EAAMy6B,GAAAA,YAAqBa,EAAKt7B,KAChCm0B,EAAWmH,EAAKnH,SAEtB+D,EAAQsD,QAAUx7B,EAClB1H,KAAKya,aAAapR,KAAK60B,GAAiBI,wBAAyBqB,EAAKj4B,EAAKm0B,EAC/E,CACJ,MACIpyB,GAAON,KAAK,oCAEZnJ,KAAKqiC,WAAWhU,EAAa,gBAEjC,MAEJ,KAAKyP,GACDr0B,GAAO7J,MAAMmQ,EAAIqB,KAAKxR,OAEtB,MAEJ,KAAKk+B,GACD,GAAI8B,EAAQvS,QAAS,CACjB,MAAM,WAAE6S,GAAenwB,EAAIqB,KAErB4xB,EAAOC,GADArD,EAAQvS,QAAQ0V,QAAQ7C,EAAW98B,KAAM88B,EAAW2C,OAGjE,QAAiBviC,IAAb0iC,EAAKt7B,UAAuCpH,IAAlB0iC,EAAKnH,SAAwB,CACvD,MAAMn0B,IAAMs7B,EAAKt7B,KAAMy6B,GAAAA,YAAqBa,EAAKt7B,KAC3Cm0B,EAAWmH,EAAKnH,SAEjBsH,KAAQvD,EAAQsD,QAASx7B,KAC1Bk4B,EAAQsD,QAAUx7B,EAClB1H,KAAKya,aAAapR,KAAK60B,GAAiBI,wBAAyBqB,EAAKj4B,EAAKm0B,IAI/E,MAAM6G,EAAM,CACR,CAAC1C,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAM,CACF8uB,WAAYlgC,KAAKmgC,gBAAgBP,EAAQvS,SACzCyS,KAAM/vB,EAAIqB,KAAK0uB,QAK3B9/B,KAAKqgC,aAAaqC,EAAK/C,EAC3B,CACJ,MACIl2B,GAAOgH,MAAO,kCAAiCkvB,sCAE/C3/B,KAAKqiC,WAAWhU,EAAa,8CAEjC,MAEJ,KAAKyP,GACD,GAAI8B,EAAQvS,QAAS,CACjB,MAAM,WAAE6S,GAAenwB,EAAIqB,KAErB4xB,EAAOC,GADArD,EAAQvS,QAAQ0V,QAAQ7C,EAAW98B,KAAM88B,EAAW2C,OAGjE,QAAiBviC,IAAb0iC,EAAKt7B,UAAuCpH,IAAlB0iC,EAAKnH,SAAwB,CACvD,MAAMn0B,IAAMs7B,EAAKt7B,KAAMy6B,GAAAA,YAAqBa,EAAKt7B,KAC3Cm0B,EAAWmH,EAAKnH,SAEjBsH,KAAQvD,EAAQsD,QAASx7B,KAC1Bk4B,EAAQsD,QAAUx7B,EAClB1H,KAAKya,aAAapR,KAAK60B,GAAiBI,wBAAyBqB,EAAKj4B,EAAKm0B,GAEnF,CAEA,MAAMuE,EAAIpgC,KAAK6+B,MAAMla,IAAI5U,EAAIqB,KAAK0uB,MAElC9/B,KAAK6+B,MAAM3oB,OAAOnG,EAAIqB,KAAK0uB,MAC3BM,EAAE9rB,SACN,MACI7K,GAAOgH,MAAO,sCAAqCkvB,sCAEnD3/B,KAAKqiC,WAAWhU,EAAa,kDAEjC,MAEJ,KAAKyP,GAA6B,KAAAsF,EAC9B,IAAKxD,EAAQvS,QAKT,OAJA5jB,GAAOgH,MAAO,kCAAiCkvB,2CAE/C3/B,KAAKqiC,WAAWhU,EAAa,8CAKjC,GAA2B,QAA3B+U,EAAIxD,EAAQgB,uBAAe,IAAAwC,GAAvBA,EAAyBrC,IAQzB,OAPAt3B,GAAON,KAAM,uCAAsCw2B,UACnD3/B,KAAKya,aAAapR,KACd60B,GAAiBK,mCACjBoB,GACA,EACAvC,GAAW0D,mCAKnB,MAAM,cAAEc,GAAkB7xB,EAAIqB,KAExB2vB,EAAM,IAAIrB,IAAIiC,IAEpB/B,EAAQgB,gBAAkB,CACtBG,MACAa,gBACAE,aAAa,GAGjB,MAAMuB,EAASzD,EAAQgB,gBAAgBG,IAAIuC,aACrCC,EAAavjC,KAAKwjC,mBAAmBH,EAAQtzB,EAAIqB,MAKjDqyB,EAAgB,CAClB,CAACzD,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAM,CACFwwB,gBACA2B,gBAKZvjC,KAAKqgC,aAAaoD,EAAe9D,GACjC,KACJ,CACA,KAAK7B,GAA8B,CAC/B,IAAK8B,EAAQvS,QAKT,OAJA5jB,GAAOgH,MAAO,oCAAmCkvB,2CAEjD3/B,KAAKqiC,WAAWhU,EAAa,gDAKjC,MAAM,WAAEkV,EAAU,cAAE3B,GAAkB7xB,EAAIqB,KAG1C,IAAKwuB,EAAQgB,gBAQT,OAPAn3B,GAAON,KAAM,0BAAyBw2B,8CACtC3/B,KAAKya,aAAapR,KACd60B,GAAiBK,mCACjBoB,GACA,EACAvC,GAAW0D,mCAKnB,GAAIlB,EAAQgB,gBAAgB8C,cAKxB,OAJAj6B,GAAOgH,MAAO,gDAA+CkvB,WAE7D3/B,KAAKqiC,WAAWhU,EAAa,wDAKjCuR,EAAQgB,gBAAgB8C,cAAgBH,EAExC,MAAMF,EAASzD,EAAQgB,gBAAgBG,IAAIuC,aAGrCK,EAAa,CACf,CAAC3D,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAM,CACF1J,IAAK27B,EACLzB,mBAKZ5hC,KAAKqgC,aAAasD,EAAYhE,GAE9BC,EAAQgB,gBAAgBgD,SAAU,EAClC,KACJ,CACA,KAAK9F,GAA2B,CAC5B,IAAK8B,EAAQvS,QAKT,OAJA5jB,GAAOgH,MAAO,iCAAgCkvB,2CAE9C3/B,KAAKqiC,WAAWhU,EAAa,6CAKjC,IAAKuR,EAAQgB,gBAQT,OAPAn3B,GAAON,KAAM,uBAAsBw2B,8CACnC3/B,KAAKya,aAAapR,KACd60B,GAAiBK,mCACjBoB,GACA,EACAvC,GAAW0D,mCAKnB,MAAM,YAAEgB,EAAW,IAAEf,EAAG,cAAE2C,EAAa,aAAE7B,EAAY,QAAE+B,GAAYhE,EAAQgB,gBAE3E,GAAIG,EAAIE,mBAGJ,YAFAx3B,GAAON,KAAK,8BAKhB,MAAQzB,IAAKm8B,EAAQ,cAAEjC,GAAkB7xB,EAAIqB,KAE7C,GAAIsyB,GAGIA,IAFe1jC,KAAKwjC,mBAAmBK,EAAUhC,GAWjD,OARA7hC,KAAKqiC,WAAWhU,EAAa,qCAC7BruB,KAAKya,aAAapR,KACd60B,GAAiBK,mCACjBoB,GACA,EACAvC,GAAW0G,qCACflE,EAAQgB,gBAAgBJ,OAMhCO,EAAIgD,cAAcF,GAElB,MAAMR,EAAStC,EAAIuC,aAEbU,EAAU,GAAEhkC,KAAKo/B,QAAQiE,IACzBY,EAAa,GAAEtE,KAAOkE,IAEtBl6B,EAAOm4B,EAAe,GAAEkC,KAAUC,IAAe,GAAEA,KAAaD,IAGhEE,ED7nBX,SAAqB1G,GACxB,MAAMuD,EAAM,CAAC,EAEb,IAAK,MAAMoD,KAAU7G,GACbA,GAAczd,eAAeskB,KAC7BpD,EAAIoD,GAAU7G,GAAc6G,GAAQ3G,IAI5C,OAAOuD,CACX,CCmnBiCqD,CADJrD,EAAIsD,eAAe16B,EA3tBtB,IAguBd,GAFA3J,KAAKya,aAAapR,KAAK60B,GAAiBG,sBAAuBsB,EAAKuE,GAEhEN,EACA,OAGJ,MAAMD,EAAa,CACf,CAAC3D,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAM,CACF1J,IAAK27B,EACLzB,mBAKZ5hC,KAAKqgC,aAAasD,EAAYhE,GAE9BC,EAAQgB,gBAAgBgD,SAAU,EAClC,KACJ,CACA,KAAK9F,GAA2B,CAC5B,IAAK8B,EAAQvS,QAKT,OAJA5jB,GAAOgH,MAAO,iCAAgCkvB,2CAE9C3/B,KAAKqiC,WAAWhU,EAAa,6CAKjC,MAAM,KAAElmB,EAAI,IAAEm8B,EAAG,cAAE1C,GAAkB7xB,EAAIqB,KAEzC,IAAKkzB,IAAQn8B,EAGT,YAFAsB,GAAON,KAAK,2BAKhB,IAAKy2B,EAAQgB,gBAGT,YAFAn3B,GAAON,KAAM,uBAAsBw2B,yCAKvC,MAAMoB,EAAMnB,EAAQgB,gBAAgBG,IAG9BwD,EAAY,GAAExG,KAAgC4B,IAAM3/B,KAAKo/B,OAAOwC,IAMtE,GALgBb,EAAIyD,cAChBnjC,OAAO8G,KAAKm8B,GAAKG,OAAOjkC,KAAK,KAC7B+jC,EAAWvG,MAGC71B,EAQZ,OAPAsB,GAAO7J,MAAM,kDACbI,KAAKya,aAAapR,KACd60B,GAAiBK,mCACjBoB,GACA,EACAvC,GAAWsH,4BAKnB,IAAK9E,EAAQ+E,QAST,OARAl7B,GAAON,KAAK,oDAEZnJ,KAAKya,aAAapR,KACd60B,GAAiBK,mCACjBoB,GACA,EACAvC,GAAWwH,sBAKnB,IAAK,MAAQ5H,EAAS6H,KAAiBxjC,OAAO+Z,QAAQkpB,GAMlD,GAAIO,IALmB9D,EAAIyD,cACvB5E,EAAQ+E,QACRJ,EAAWvH,GAWX,OAPAvzB,GAAO7J,MAAM,6CACbI,KAAKya,aAAapR,KACd60B,GAAiBK,mCACjBoB,GACA,EACAvC,GAAW0H,uBAMvBr7B,GAAOE,KAAM,oCAAmCg2B,KAChD3/B,KAAKya,aAAapR,KAAK60B,GAAiBK,mCAAoCoB,GAAK,GAEjF,KACJ,EAEJ,CAOAT,mBAAmBrZ,EAAIwI,GACnB5kB,GAAOgH,MAAO,eAAcoV,UAE5B7lB,KAAKugC,wBAAwBlS,EACjC,CAWAvU,oCAAoCuU,EAAatuB,EAAMs4B,EAAU0M,GAC7D,MAAMjiB,EAAgBuL,EAAYwI,QAC5B+I,EAAU5/B,KAAK6/B,uBAAuBxR,GAE5C,OAAQtuB,GACR,IAAK,eACD,GAAIglC,GAAY/kC,KAAKy+B,MAAMuG,gBAAiB,CACxC,MAAM1F,EAAqBt/B,KAAKy+B,MAAM7M,WAGtC,UAFkCvD,EAAYuI,eAEtB7L,IAAIwU,KAAiBD,EAAqBxc,EAAe,CACzE9iB,KAAK8+B,8BACC9+B,KAAK8+B,6BAET9+B,KAAKw/B,iBAAiBnR,GAE5B,MAAMyR,EAAOC,KAEPK,EAAI,IAAInH,GAEdmH,EAAE7G,iBAAiBqE,IACnBwC,EAAElgB,OAAM,KACJlgB,KAAK6+B,MAAM3oB,OAAO4pB,GAClBF,EAAQ+C,wBAAqBriC,CAAS,IAE1CN,KAAK6+B,MAAM/Y,IAAIga,EAAMM,GAErB,MAAMhvB,EAAO,CACT,CAAC4uB,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAM,CACF8uB,WAAYlgC,KAAKmgC,gBAAgBP,EAAQvS,SACzCyS,UAKZ9/B,KAAKqgC,aAAajvB,EAAM0R,EAC5B,CACJ,CACA,MACJ,IAAK,qBACD8c,EAAQ+E,QAAUI,EAClB/kC,KAAKya,aAAapR,KAAK60B,GAAiBE,0BAA2Btb,GAG3E,CASAuf,WAAWhU,EAAazuB,GACpB,MAAM+/B,EAAMtR,EAAYwI,QAClB3K,EAAM,CACR,CAAC8T,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAM,CACFxR,WAKZI,KAAKqgC,aAAanU,EAAKyT,EAC3B,CAUAU,aAAajvB,EAAM0R,GACf9iB,KAAKy+B,MAAMwG,YAAY7zB,EAAM0R,EACjC,CASA0c,iBAAiBnR,GACb,MAAMsR,EAAMtR,EAAYwI,QAClB+I,EAAU5/B,KAAK6/B,uBAAuBxR,GAE5C,GAAIuR,EAAQvS,QAGR,OAFA5jB,GAAON,KAAM,iCAAgCw2B,mCAEtCtrB,QAAQE,SAGnB,QAAmCjU,IAA/Bs/B,EAAQ+C,mBAGR,OAFAl5B,GAAON,KAAM,iCAAgCw2B,2CAEtCtrB,QAAQE,SAInBvU,KAAKmhC,YAAY+D,uBAAuB,GAExC,MAAMC,EAASx8B,KAAK24B,MAAMthC,KAAKmhC,YAAYiE,iBACrC3C,EAAQphC,OAAOkP,OAAO40B,EAAOE,YAAY,GAE/C,IAAK5C,EACD,OAAOpuB,QAAQE,OAAO,IAAIrT,MAAM,+BAIpClB,KAAKmhC,YAAYmE,yBAEjB,MAAMxF,EAAOC,KACPzjB,EAAO,CACT,CAAC0jB,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAM,CACFoxB,MAAOxiC,KAAKqhC,QAAQgE,WACpB5C,QACA3C,UAKNM,EAAI,IAAInH,GAcd,OAZAmH,EAAE7G,iBAAiBqE,IACnBwC,EAAElgB,OAAM,KACJlgB,KAAK6+B,MAAM3oB,OAAO4pB,GAClBF,EAAQ+C,wBAAqBriC,CAAS,IAE1CN,KAAK6+B,MAAM/Y,IAAIga,EAAMM,GAErBpgC,KAAKqgC,aAAa/jB,EAAMqjB,GAGxBC,EAAQ+C,mBAAqB7C,EAEtBM,CACX,CAOAc,YAAY7S,GACR,MAAMsR,EAAMtR,EAAYwI,QAClB+I,EAAU5/B,KAAK6/B,uBAAuBxR,IACtC,IAAE0S,EAAG,cAAEa,GAAkBhC,EAAQgB,gBAGjC0D,EAAM,CAAC,EACPiB,EAAU,GACVhB,EAAY,GAAExG,KAAgC/9B,KAAKo/B,OAAOO,IAAMiC,IAEhE4D,EAAe,WAAU7F,IAE/B2E,EAAIkB,GAAezE,EAAIyD,cACnBxkC,KAAKqhC,QAAQsD,QACbJ,EAAWiB,GACfD,EAAQj2B,KAAKk2B,GAEb,MAAMr9B,EAAO44B,EAAIyD,cACbe,EAAQd,OAAOjkC,KAAK,KACpB+jC,EAAWvG,IAGTyH,EAAa,CACf,CAACzF,IAAsBnC,GACvBoC,IAAK,CACD78B,KAAM06B,GACN1sB,KAAM,CACFjJ,OACAm8B,MACA1C,mBAKZ5hC,KAAKqgC,aAAaoF,EAAY9F,EAClC,CAKA6D,mBAAmBH,EAAQjyB,GACvB,MAAMs0B,EAAU,IAAIhG,IAAIiG,QAClBpC,EAAamC,EAAQE,OAAOvC,EAAS16B,KAAKC,UAAUwI,IAI1D,OAFAs0B,EAAQlF,OAED+C,CACX,EASJ,SAASN,GAAc7xB,GACnB,IACI,OAAOzI,KAAK24B,MAAMlwB,EACtB,CAAE,MAAO5B,GACL,MAAO,CAAC,CACZ,CACJ,CAEAgvB,GAAWqH,OAAS3H,GCzkCpB,MAAMz0B,IAASC,EAAAA,EAAAA,gDASR,MAAMo8B,WAA0BhK,GAInCv6B,YAAY8oB,GACRziB,MAAMyiB,GAENrqB,KAAKsS,UAAOhS,EACZN,KAAK+lC,mBAAoB,EAEzB/lC,KAAKgmC,YAAc,IAAIxH,GAAWnU,GAElCrqB,KAAKimC,WAAaC,KAASlmC,KAAKmmC,eAjBhB,KAkBhBnmC,KAAKomC,YAAcF,KAASlmC,KAAKqmC,gBAlBjB,KAqBhBrmC,KAAKgmC,YAAYtc,GACb8U,GAAWqH,OAAOvH,wBAClBt+B,KAAKsmC,yBAAyBlW,KAAKpwB,OAEvCA,KAAKgmC,YAAYtc,GACb8U,GAAWqH,OAAOxH,sBAClBr+B,KAAKumC,uBAAuBnW,KAAKpwB,OAErCA,KAAKgmC,YAAYtc,GACb8U,GAAWqH,OAAOzH,0BAClBp+B,KAAKwmC,2BAA2BpW,KAAKpwB,OAEzCA,KAAKgmC,YAAYtc,GACb8U,GAAWqH,OAAOtH,mCAClBv+B,KAAKymC,oCAAoCrW,KAAKpwB,OAElDA,KAAKqqB,WAAWX,GACZrwB,GACA2G,KAAKm/B,8BAA8B/O,KAAKpwB,OAC5CA,KAAKqqB,WAAWX,GACZrwB,GACA2G,KAAK0mC,qBAAqBtW,KAAKpwB,OACnCA,KAAKqqB,WAAWX,GACZrwB,GACA2G,KAAKk/B,mBAAmB9O,KAAKpwB,OACjCA,KAAKqqB,WAAWX,GACRrwB,GACA,KACI2G,KAAK+lC,mBAAoB,CAAI,GAE7C,CAOInF,sBACA,OAAO5gC,KAAKgmC,WAChB,CASAlsB,kBAAkBsa,GACVA,QACMp0B,KAAKgmC,YAAYW,eAEvB3mC,KAAKgmC,YAAYvF,+BAIrBzgC,KAAKsS,OAAO8hB,GAAUp0B,KAAK4mC,eAG3B,MAAM1J,QAAcl9B,KAAKgmC,YAAYa,UAAU7mC,KAAKsS,MAGpDtS,KAAK+7B,QAAQH,OAAO57B,KAAKqqB,WAAWuH,WAAY5xB,KAAKsS,KAAM4qB,EAC/D,CAWApjB,oCAAoCuU,EAAatuB,EAAMs4B,EAAU0M,GAC7D,OAAQhlC,GACR,IAAK,aACD0J,GAAOgH,MAAO,eAAc4d,EAAYwI,iCAAiCkO,KACzE,MACJ,IAAK,gBACIA,GAAY/kC,KAAKo0B,SAClBp0B,KAAKgmC,YAAYzF,wBAAwBlS,GAIrD,CAMAqY,uBACQ1mC,KAAK+lC,mBAAqB/lC,KAAKo0B,SAC/Bp0B,KAAKomC,aAEb,CAMAlH,mBAAmBrZ,GACf7lB,KAAK+7B,QAAQf,QAAQnV,GAEjB7lB,KAAKo0B,SACLp0B,KAAKimC,YAEb,CAQAnsB,uBACIrQ,GAAOgH,MAAM,gBAEbzQ,KAAKsS,KAAOtS,KAAK4mC,eACjB,MAAM1J,QAAcl9B,KAAKgmC,YAAYa,UAAU7mC,KAAKsS,MAEpDtS,KAAK+7B,QAAQH,OAAO57B,KAAKqqB,WAAWuH,WAAY5xB,KAAKsS,KAAM4qB,EAC/D,CAOApjB,wBACIrQ,GAAOgH,MAAM,mBAEb,MAAMq2B,QCjHPhtB,eAAyBitB,GAE5B,OAAOC,OAAOC,OAAOC,UAAU,MAAOH,EAAU,QAAQ,EAAO,CAAE,aAAc,aACnF,CD8G+BG,CAAUlnC,KAAKsS,MAChC60B,QCrIPrtB,eAAuBgtB,GAC1B,MAAMM,EAAc,IAAIC,YAGxB,OAAOL,OAAOC,OAAOK,WAAW,CAC5BvnC,KAAM,OACNwnC,KAAMH,EAAYI,OAAO,oBACzBC,KAAM,UACN99B,KAAM,IAAI+9B,aACXZ,EAAU,IACjB,CD2H6Ba,CAAQb,GAE7B9mC,KAAKsS,KAAO,IAAIqG,WAAWwuB,GAE3B,MAAMjK,EAAQl9B,KAAKgmC,YAAY1F,sBAAsBtgC,KAAKsS,MAE1DtS,KAAK+7B,QAAQH,OAAO57B,KAAKqqB,WAAWuH,WAAY5xB,KAAKsS,KAAM4qB,EAC/D,CAUAoJ,yBAAyBzgB,EAAIne,EAAKw1B,GAC9BzzB,GAAOgH,MAAO,eAAcoV,uBAE5B7lB,KAAK+7B,QAAQH,OAAO/V,EAAIne,EAAKw1B,EACjC,CASAqJ,uBAAuB5G,EAAKoB,GACxB/gC,KAAKqqB,WAAW5P,aAAapR,KAAKhQ,GAA+CsmC,EAAKoB,EAC1F,CAQAyF,2BAA2B7G,GACvB3/B,KAAKqqB,WAAW5P,aAAapR,KAAKhQ,GAAmDsmC,EACzF,CAUA8G,oCAAoC9G,EAAKjqB,EAASnV,GAC9CP,KAAKqqB,WAAW5P,aAAapR,KAAKhQ,GAAmDsmC,EAAKjqB,EAASnV,EACvG,CAQAqmC,eACI,OAAO99B,OAAOk+B,OAAOY,gBAAgB,IAAIjvB,WAAW,IACxD,EE9NG,MAAMkvB,GAKTtmC,YAAY8oB,GACR,MAAM,KAAEyd,EAAO,CAAC,GAAMzd,EAAWxqB,QAAQ8zB,OAEzC3zB,KAAK+nC,mBAAqBD,EAAKE,qBAE3BhoC,KAAK+nC,mBACL/nC,KAAKioC,YAAc,IAAIlL,GAA4B1S,GAEnDrqB,KAAKioC,YAAc,IAAInC,GAAkBzb,EAEjD,CAQAva,mBAAmB6jB,GACf,MAAM,KAAEmU,EAAO,CAAC,GAAMnU,EAEtB,SAAKmU,EAAKE,uBAAyBxJ,GAAW7zB,kBAIrCgpB,EAAOuU,SAAWvU,EAAOuU,QAAQC,eAClCl6B,GAAQ1B,6BACJonB,EAAOyU,+BAAiCn6B,GAAQ5B,2BAChE,CAOAiwB,YACI,OAAOt8B,KAAKioC,YAAY3L,WAC5B,CAQAxiB,iBAAiBsa,SACPp0B,KAAKioC,YAAYI,WAAWjU,EACtC,CASAsI,iBAAiBM,GACbh9B,KAAKioC,YAAYrM,OAAOoB,EAC5B,CAQA0E,kBAAkBrT,GAAa,IAAAia,EACK,QAAhCA,EAAAtoC,KAAKioC,YAAYrH,uBAAe,IAAA0H,GAAhCA,EAAkC5G,kBAAkBrT,EACxD,CASAqS,wBAAwBrS,EAAasS,GAAY,IAAA4H,EACb,QAAhCA,EAAAvoC,KAAKioC,YAAYrH,uBAAe,IAAA2H,GAAhCA,EAAkC7H,wBAAwBrS,EAAasS,EAC3E,4BC3BJ,SAAS6H,GAASnjB,EAAGtN,EAAG0wB,EAAGrI,GACvB,OAAI/a,EAAI,GAActN,EAAI0wB,GAAQ1wB,EAAKqoB,EACnC/a,EAAI,GAAatN,EAAI0wB,EAAIrI,EACzB/a,EAAI,GAActN,EAAI0wB,EAAM1wB,EAAIqoB,EAAMqI,EAAIrI,EACvCroB,EAAI0wB,EAAIrI,CACnB,CAKA,SAASsI,GAAQrjB,GACb,OAAQA,EAAI,GAAO,WAAcA,EAAI,GAAO,WAAcA,EAAI,IAAO,YAAc,SACvF,CAyBA,SAASsjB,GAASC,EAAGC,GACjB,IAAIC,GAAW,MAAJF,IAAmB,MAAJC,GAE1B,OADWD,GAAK,KAAOC,GAAK,KAAOC,GAAO,KAC3B,GAAa,MAANA,CAC1B,CAKA,SAASC,GAAIpL,EAAKqL,GACd,OAAQrL,GAAOqL,EAAQrL,IAAS,GAAKqL,CACzC,CAmDA,MAAMC,GAEc,SAAUC,GAAK,OAnCnC,SAAmBC,GAIf,IAHA,IAEIC,EAASC,EADTC,EAAM,GAEDvjC,EAAI,EAAGA,EAAsB,EAAlBojC,EAASzlC,OAAYqC,GAAK,EAK1C,IAJAqjC,GAAaD,EAASpjC,GAAO,IAAM,GAAK,EAAKA,EAAK,GAAM,MAAS,IACpDojC,EAASpjC,EAAE,GAAK,IAAM,GAAK,GAAKA,EAAE,GAAG,GAAM,MAAS,EACrDojC,EAASpjC,EAAE,GAAK,IAAM,GAAK,GAAKA,EAAE,GAAG,GAAM,IAElDsjC,EAAI,EAAGA,EAAI,EAAGA,IACP,EAAJtjC,EAAY,EAAJsjC,EAA0B,GAAlBF,EAASzlC,OAAe4lC,GAAO,IAC5CA,GAVL,mEAUgBC,OAAQH,GAAW,GAAG,EAAEC,GAAM,IAGxD,OAAOC,CACX,CAoB0CE,CAtJ1C,SAAmBZ,EAAGa,GAElBb,EAAEa,GAAO,IAAM,KAAS,GAAKA,EAAM,GACnCb,EAA2B,IAAvBa,EAAM,IAAM,GAAM,IAAWA,EAEjC,IAOI1jC,EAAGsjC,EAAGhkB,EAAGqkB,EAAMC,EAAMC,EAAMC,EAAMC,EAPjCC,EAAI,IAAI5pC,MAAM,IACd2X,EAAK,WACLC,GAAK,UACL0wB,GAAK,WACLrI,EAAK,UACL5wB,GAAK,WAGT,IAAKzJ,EAAI,EAAGA,EAAI6iC,EAAEllC,OAAQqC,GAAK,GAAI,CAO/B,IANA2jC,EAAO5xB,EACP6xB,EAAO5xB,EACP6xB,EAAOnB,EACPoB,EAAOzJ,EACP0J,EAAOt6B,EAEF65B,EAAI,EAAGA,EAAI,GAAIA,IAEZU,EAAEV,GADFA,EAAI,GACGT,EAAE7iC,EAAIsjC,GAENN,GAAIgB,EAAEV,EAAE,GAAKU,EAAEV,EAAE,GAAKU,EAAEV,EAAE,IAAMU,EAAEV,EAAE,IAAK,GAGpDhkB,EAAIsjB,GAASA,GAASI,GAAIjxB,EAAG,GAAI0wB,GAAQa,EAAGtxB,EAAG0wB,EAAGrI,IACrCuI,GAASA,GAASn5B,EAAGu6B,EAAEV,IAAKX,GAAQW,KACjD75B,EAAI4wB,EACJA,EAAIqI,EACJA,EAAIM,GAAIhxB,EAAG,IACXA,EAAID,EACJA,EAAIuN,EAGRvN,EAAI6wB,GAAS7wB,EAAG4xB,GAChB3xB,EAAI4wB,GAAS5wB,EAAG4xB,GAChBlB,EAAIE,GAASF,EAAGmB,GAChBxJ,EAAIuI,GAASvI,EAAGyJ,GAChBr6B,EAAIm5B,GAASn5B,EAAGs6B,EACpB,CACA,MAAO,CAAChyB,EAAGC,EAAG0wB,EAAGrI,EAAG5wB,EACxB,CA2GmDw6B,CA/CnD,SAAkBV,GAGd,IAFA,IAAIW,EAAM,GAEDlkC,EAAI,EAAGA,EAAiB,EAAbujC,EAAI5lC,OAAYqC,GAAK,EACrCkkC,EAAIlkC,GAAG,KAFA,IAEOujC,EAAIY,WAAWnkC,EAAI,KAAe,GAAKA,EAAE,GAE3D,OAAOkkC,CACX,CAwC6DE,CAASjB,GAAc,EAAXA,EAAExlC,QAAc,EC5JnF0mC,GAAsB,CAAE,WAAY,OAAQ,OAAQ,QACpDC,GAAkC,CAAE,WAAY,OAAQ,QAQ9D,SAASC,GAAkBxyB,EAAGC,GAC1B,IAAIwyB,EAAM,EAMV,OAJAF,GAAgCt9B,MAAKrF,GACiC,KAAjE6iC,EAAQzyB,EAAEpQ,GAAOqQ,EAAErQ,GAAS,EAAQoQ,EAAEpQ,GAAOqQ,EAAErQ,KAAU,KAGvD6iC,CACX,CA8BO,SAASC,GAAeza,GAC3B,MAAM3B,EAAW,IAAIxgB,IACf68B,EAAa,IAAI78B,IAWvB,OATA88B,KAAE3a,GAAMkE,KAAK,kBACR0W,MAAK,CAACC,EAAGC,IAAOzc,EAAStZ,IAAI+1B,EAAGC,aAAa,UAClDJ,KAAE3a,GAAMkE,KAAK,mBACR0W,MAAK,CAACC,EAAGC,IAAOJ,EAAW31B,IAAI,CAC5B1R,KAAMynC,EAAGC,aAAa,QACtB/qC,KAAM8qC,EAAGC,aAAa,QACtBC,SAAUF,EAAGC,aAAa,gBAG3B,CACH1c,WACAqc,aAER,CAKe,MAAMO,WAAatR,GAO9Bn4B,cAAkE,IAAtD0pC,EAAUxnC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGssB,EAAItsB,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,6BAIhC,GAHAmE,QACA5H,KAAK+vB,KAAOA,EACZ/vB,KAAKkrC,MAAQD,EAAWC,OACnBlrC,KAAKkrC,MACN,MAAM,IAAIhqC,MACN,uDAIRlB,KAAKoF,QAAU,GACfpF,KAAKmrC,MAAQ,IAAIv9B,IAIjB5N,KAAKorC,iBAAmB,IAAIx9B,IAE5B,MAAMy9B,EAAOJ,EAAWI,KAExBA,EAAKtd,YAAYC,GAAW,WAAXA,iBACbJ,GAAQ5tB,KAAKsrC,aAAa1d,KAC9Byd,EAAKtd,YAAYC,GAAW,WAAXA,mBACbJ,GAAQ5tB,KAAKurC,gBAAgB3d,KACjCvsB,OAAO8G,KAAKkjC,EAAKF,OAAO/8B,SAAQqhB,IAC5BzvB,KAAKsrC,aAAaD,EAAKF,MAAM1b,GAAK,IAGtClB,GAAAA,QAAAA,aAAqB,OAAQ,mCAC7BvuB,KAAKkrC,MAAMM,WAAWjd,GAAAA,QAAAA,GAAAA,KAC1B,CAYAid,WAAWpU,GAA2C,IAAlCqU,EAAMhoC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GAAUioC,EAAQjoC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GACxCzD,KAAKkrC,MAAMM,WAAWpU,GACtBp3B,KAAK2rC,mBAEDD,IAAa1rC,KAAKorC,iBAAiBrgB,IAAIqM,KACvCp3B,KAAKorC,iBAAiBt2B,IAAIsiB,GAC1Bp3B,KAAKmrC,MAAM/8B,SAAQwf,GAAQ5tB,KAAK4rC,gCAAgChe,MAGhE6d,GACAzrC,KAAKyrC,QAEb,CAUAI,cAAczU,GAA2C,IAAlCqU,EAAMhoC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GAAUioC,EAAQjoC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GAC3CzD,KAAKkrC,MAAMW,cAAczU,GACzBp3B,KAAK2rC,mBAEDD,GAAY1rC,KAAKorC,iBAAiBrgB,IAAIqM,KACtCp3B,KAAKorC,iBAAiBl1B,OAAOkhB,GAC7Bp3B,KAAKmrC,MAAM/8B,SAAQwf,GAAQ5tB,KAAK4rC,gCAAgChe,MAGhE6d,GACAzrC,KAAKyrC,QAEb,CAKAA,SACIzrC,KAAKmrC,MAAM/8B,SAAQwf,GAAQA,EAAKke,gBACpC,CAOAF,gCAAgChe,GAC5B,GAAmC,IAA/B5tB,KAAKorC,iBAAiBj9B,KACtByf,EAAKme,mBAAmB,gBACrB,CACH,MAAMC,EAAW,GAEjBhsC,KAAKorC,iBAAiBh9B,SAAQ69B,IAC1BD,EAAS18B,KAAK,CACV,QAAW,UACXpM,WAAY,CAAE,IAAO+oC,IACvB,IAGNre,EAAKse,uBAAuB,WAAY,CAAEF,YAC9C,CACJ,CAQAG,yBAAyB1c,EAAKM,GAAsB,IAAhBqc,EAAO3oC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,IAC1C,OAAOzD,KAAKqsC,cAAc5c,EAAKM,EAAMqc,EACzC,CAUAC,cAAc5c,EAAKM,EAAMqc,GACrB,OAAO,IAAI/3B,SAAQ,CAACC,EAASC,IACzBvU,KAAKkrC,MAAMvhC,KAAK8lB,EAAKM,GAAMuc,IACvBh4B,EAAQk2B,GAAe8B,GAAU,GAClC/3B,EAAQ63B,IAEnB,CAOAd,aAAa1d,GACT5tB,KAAKmrC,MAAMr2B,IAAI8Y,GACf5tB,KAAKusC,wBAAwB3e,GAE7B5tB,KAAK4rC,gCAAgChe,EACzC,CAOA2d,gBAAgB3d,GACZ5tB,KAAKmrC,MAAMj1B,OAAO0X,EACtB,CAMA2e,wBAAwB3e,GACpBA,EAAKse,uBAAuB,IAAK,CAC7BhpC,WAAY,CACRspC,MAAOje,GAAAA,QAAAA,GAAAA,KACPkZ,KA3OH,QA4OG1X,KAAM/vB,KAAK+vB,KACX0c,IAAKzsC,KAAKoF,UAGtB,CAKAsnC,wBAEI1sC,KAAKmrC,MAAM/8B,SAAQwf,GAAQ5tB,KAAKusC,wBAAwB3e,IAC5D,CAKA+d,mBACI3rC,KAAKoF,QAtOb,SAAqBqlC,EAAYrc,GAC7B,MAAMue,EAAmBlC,EAAWhG,KAAK6F,IAAmBzyB,QACxD,CAAC+0B,EAAkB9X,IAAc,GAC7BsV,GAAoBvyB,QAChB,CAACg1B,EAAKnlC,EAAK2yB,IACPwS,GACe,IAARxS,EAAY,GAAK,MACjBvF,EAASptB,GAAOotB,EAASptB,GAAO,KAC3C,QACH,IACHolC,EAAiB1e,EAASqW,OAAO5sB,QACnC,CAACg1B,EAAKzV,IAAa,GAAEyV,EAAMzV,MAAY,IAE3C,OAAO2V,GAAcJ,EAAmBG,EAC5C,CAyNcE,CAAYhtC,KAAKkrC,MAAM+B,YAAajtC,KAAKkrC,MAAMpV,WAErD91B,KAAK0sC,uBACT,UC3QG,MAAMQ,GAAqB,uBAE5BzjC,IAASC,EAAAA,EAAAA,kDAiDf,GAFoB,IAtCb,cAA0BgwB,GAI7Bn4B,cACIqG,QACA5H,KAAKmtC,SAAW,CACZC,UAAU,EAElB,CASAC,kBAAiBC,GAAe,IAAd,SAAEF,GAAUE,EAC1B7jC,GAAOgH,MAAM,oBAAqB,CAAE28B,aACpCptC,KAAKmtC,SAAW,CACZC,UAAuB,IAAbA,GAEdptC,KAAKya,aAAapR,KAAK6jC,GAAoBltC,KAAKmtC,SACpD,CASAC,WACI,OAAkC,IAA3BptC,KAAKmtC,SAASC,QACzB,GC1CE3jC,IAASC,EAAAA,EAAAA,yCAQA,MAAM6jC,GAKjBhsC,YAAYisC,GACRxtC,KAAKytC,aAAeD,EAOpBxtC,KAAK0tC,cAAgB,EAErB1tC,KAAK2tC,iBAAcrtC,CACvB,CAMIstC,iBACA,OAAO5tC,KAAK2tC,WAChB,CAOAE,WACI7tC,KAAK8tC,gBAEL9tC,KAAK0tC,eAAiB,EAEtB1tC,KAAK+tC,uBACCC,GAAAA,iBACEd,IACAI,IAAkB,IAAjB,SAAEF,GAAUE,EACLF,EACAptC,KAAKiuC,kBAELjuC,KAAK8tC,eACT,IAGZE,GAAAA,YAA0BhuC,KAAKiuC,iBACnC,CAOAA,kBACQjuC,KAAKkuC,iBAUTluC,KAAK0tC,cAAgBnyB,KAAK4yB,IAAI,EAAGnuC,KAAK0tC,eACtC1tC,KAAK2tC,YCxEN,SAAwBS,GAAiC,IAA1BC,EAAQ5qC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,IAAK6qC,EAAI7qC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,EACzD,OAAO8X,KAAKgzB,MAAOhzB,KAAKizB,UAAqC,IAAxBjzB,KAAKkzB,IAAIH,EAAMF,GAAiBC,GAAaA,EACtF,CDsE2BK,CACH1uC,KAAK0tC,cACmB,KAArB1tC,KAAK0tC,cACpB,GAEJjkC,GAAOE,KAAM,6CAA4C3J,KAAK4tC,gBAE9D5tC,KAAKkuC,eAAiBzU,YAAW,IAAMz5B,KAAK2uC,qBAAqB3uC,KAAK4tC,YAC1E,CAQAE,gBACQ9tC,KAAKkuC,iBACLzkC,GAAOE,KAAK,oCACZ0vB,aAAar5B,KAAKkuC,gBAClBluC,KAAKkuC,oBAAiB5tC,EACtBN,KAAK2tC,iBAAcrtC,EAE3B,CAQAquC,oBACI,MAAM,iBAAEC,GAAqB5uC,KAAKytC,aAC5BoB,EAAcD,EAAiBE,iBAGrC,IAAKD,EACD,OAGJplC,GAAOE,KAAK,wCAEZ,MAAMolC,EAAM,IAAIrU,IAAI16B,KAAKytC,aAAauB,SACtC,IAAI,OAAEC,GAAWF,EACjB,MAAMG,EAAU,oBACVC,EAAWF,EAAO9pC,MAAM+pC,GAG1BC,IAA+C,IAAnCA,EAASvuC,QAAQiuC,GAC7BI,EAASA,EAAOG,QAAQF,EAAU,KAAIL,KAG9BM,IACRF,IAAmC,IAAzBA,EAAOruC,QAAQ,KAAe,WAAUiuC,IAAiB,WAAUA,KAGjFE,EAAIE,OAASA,EAEbjvC,KAAKytC,aAAauB,QAAUD,EAAIM,WAEhCT,EAAiBz2B,QACrB,CAQAm3B,SACItvC,KAAK8tC,gBACL9tC,KAAK0tC,cAAgB,EACjB1tC,KAAK+tC,yBACL/tC,KAAK+tC,yBACL/tC,KAAK+tC,uBAAyB,KAEtC,EE5JW,MAAMwB,GAIjBhuC,cACIvB,KAAKwvC,aAAe,KACpBxvC,KAAKyvC,mBAAqB,IAC9B,CAQAC,cAAcC,EAAgBnC,GAAmB,IAAAtU,EAAA,KAC7C,MAAM0W,EAAmBpC,EAAkBqC,SAE3CrC,EAAkBqC,SAAW,WAAa,QAAAz9B,EAAA3O,UAAAC,OAAToP,EAAI,IAAA3S,MAAAiS,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJQ,EAAIR,GAAA7O,UAAA6O,GACjC,MAAMw9B,EAAah9B,EAAK,GAEpBg9B,EAAWC,SAAS,aACpB7W,EAAKuW,mBAAqBK,GAK1BH,EAAeK,YACf9W,EAAKsW,aAAe1zB,KAAKC,OAE7B6zB,EAAiBr9B,MAAMi7B,EAAmB16B,EAC9C,CACJ,CAOAm9B,uBACI,OAAOjwC,KAAKyvC,kBAChB,CAOAS,0BACI,OAAOlwC,KAAKwvC,aACN1zB,KAAKC,MAAQ/b,KAAKwvC,aAClB,IACV,EChDJ,SAASW,KAA+C,IAAjB7B,EAAI7qC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,QAI1C,OAAO,cAAc6qC,EAIjB/sC,cACIqG,SAAMnE,WACNzD,KAAKirC,WAAa,IACtB,CAMA3uB,KAAK2uB,GACDjrC,KAAKirC,WAAaA,CACtB,EAER,CAKA,SAAekF,KAKFC,GACPD,GAA8BzW,IC/B9BjwB,IAASC,EAAAA,EAAAA,2CAwBA,MAAM2mC,WAA6BC,GAW9C/uC,YAAW+rC,GAAgF,IAA/E,+BAAEiD,EAA8B,wBAAEC,EAAuB,YAAEC,EAAc,CAAC,GAAGnD,EACrF1lC,QACA5H,KAAK0wC,YAAc,EACnB1wC,KAAK2wC,yBAA2BH,EAChCxwC,KAAK4wC,gCAAkCL,EAEvCvwC,KAAK6wC,aAA+C,iBAAzBJ,EAAYx5B,SAAwBw5B,EAAYx5B,SApCrD,IAqCtBjX,KAAK8wC,YAA6C,iBAAxBL,EAAYrE,QAAuBqE,EAAYrE,QAhCpD,IAiCrBpsC,KAAK+wC,cAAiD,iBAA1BN,EAAYO,UAClCP,EAAYO,UA3BK,EA+BvBhxC,KAAKixC,qBAAuB11B,KAAK+B,MAAM,KAAStd,KAAK6wC,cACrD7wC,KAAKkxC,kBAAoB,IAAI/wC,MAAMH,KAAKixC,qBAC5C,CAMA30B,KAAK2uB,GACDrjC,MAAM0U,KAAK2uB,GACX1c,GAAAA,QAAAA,aAAqB,OAAQ,gBACjC,CAYA4iB,KAAK1hB,EAAK/Z,EAAS9V,EAAOwsC,GACtBpsC,KAAKoxC,6BAEL,MAAMC,GAAKC,EAAAA,GAAAA,KAAI,CACXluC,KAAM,MACNmuC,GAAI9hB,IAGR4hB,EAAG5I,EAAE,OAAQ,CAAE+D,MAAOje,GAAAA,QAAAA,GAAAA,OACtBvuB,KAAKirC,WAAWuG,QAAQH,EAAI,CAAEjF,YACzBrsB,KAAKrK,EAAS9V,EACvB,CAUA6xC,cAAcC,GACVh4B,cAAc1Z,KAAKmX,YACnBnX,KAAKmX,WAAarO,OAAO2P,aAAY,KAKjC,MAAMsD,EAAMD,KAAKC,MAEjB,GAAI/b,KAAK4wC,kCAAoC70B,EAAM/b,KAAK2xC,iBAOpD,OALA3xC,KAAKoxC,6BAELpxC,KAAK2xC,iBAAmB51B,OACxB/b,KAAK0wC,YAAc,GAKvB1wC,KAAKmxC,KAAKO,GAAW,KAIjB1xC,KAAK2xC,iBAAmB3xC,KAAK4wC,kCAAoC90B,KAAKC,MAEtE/b,KAAK0wC,YAAc,CAAC,IACrB9wC,IACCI,KAAK0wC,aAAe,EACpB,MAAMkB,EAAU,SAAOhyC,EAAQ,QAAU,WAErCI,KAAK0wC,aAAe1wC,KAAK+wC,eACzBv+B,KAAAA,iBAAsC,IAAItR,MAAM0wC,IAChDnoC,GAAO7J,MAAMgyC,EAAQhyC,GACrBI,KAAK2wC,0BAA4B3wC,KAAK2wC,4BAEtClnC,GAAON,KAAKyoC,EAAQhyC,EACxB,GACDI,KAAK8wC,YAAY,GACrB9wC,KAAK6wC,cACRpnC,GAAOE,KAAM,iCAAgC3J,KAAK6wC,kBACtD,CAKAgB,eACQ7xC,KAAKmX,aACLrO,OAAO4Q,cAAc1Z,KAAKmX,YAC1BnX,KAAKmX,WAAa,KAClBnX,KAAK0wC,YAAc,EACnBjnC,GAAOE,KAAK,yBAEpB,CAMAynC,6BACIpxC,KAAKkxC,kBAAkB5hC,MAAK,IAAIwM,MAAOg2B,WAGnC9xC,KAAKkxC,kBAAkBxtC,OAAS1D,KAAKixC,sBACrCjxC,KAAKkxC,kBAAkBa,OAE/B,CAUAC,qBACI,MAAMC,EAAgBjyC,KAAKkxC,kBAAkB7wC,QAM7C4xC,EAAc3iC,MAAK,IAAIwM,MAAOg2B,WAE9B,IAAII,EAAc,EACdC,EAAaF,EAAc,GAkB/B,OAhBAA,EAAc7jC,SAAQoB,IAClB,MAAM4iC,EAAkB5iC,EAAI2iC,EAExBC,EAAkBF,IAClBA,EAAcE,GAGlBD,EAAa3iC,CAAC,IAMlB0iC,GAAelyC,KAAK6wC,aAGbt1B,KAAKC,IAAI02B,EAAa,EACjC,EClMJ,MAAMzoC,IAASC,EAAAA,EAAAA,6CAKA,MAAM2oC,WAAuB3Y,GAM7B11B,oBACP,MAAO,CACHsuC,oBAAqB,sBACrBC,mBAAoB,qBAE5B,CAOWC,oBACP,OAAOjkB,GAAAA,QAAAA,MACX,CAkBAhtB,YAAW+rC,GAAoG,IAAnG,sBAAEmF,EAAqB,mBAAEC,EAAkB,sBAAEC,EAAqB,WAAEC,EAAU,MAAEC,EAAK,SAAEC,GAAUxF,EACzG1lC,QACA5H,KAAK+yC,SAAW,CACZN,2BAAwD,IAA1BA,GAA+CA,EAC7EhC,YAAaqC,EACbD,QACAH,wBAAkD,IAAvBA,EAAqC,IAAYxsC,OAAOwsC,GACnFC,yBAGJ3yC,KAAKytC,aAAe,IAAIlf,GAAAA,QAAAA,WAAmBqkB,GAC3C5yC,KAAKgzC,eAAiBJ,EAAWK,WAAW,QAAUL,EAAWK,WAAW,QAG5EjzC,KAAKytC,aAAayF,WAAa,EAE/BlzC,KAAKmzC,iBAAmB,IAAIC,GAC5BpzC,KAAKmzC,iBAAiBzD,cAAc1vC,KAAMA,KAAKytC,cAE/CztC,KAAKqzC,YAAc,IAAI9F,GAAWvtC,KAAKytC,cAcvCztC,KAAKszC,aAAe,GAIpBtzC,KAAKuzC,oBACD,OACA,IAAIlD,GAAqB,CACrBE,+BAAgCA,IAAMvwC,KAAKkwC,0BAC3CM,wBAAyBA,IAAMxwC,KAAKwzC,gCACpC/C,YAAaqC,KAIrB9yC,KAAKyzC,uBAAwB,CACjC,CAOIzD,gBACA,MAAM0D,EAAY1zC,KAAKytC,cAAgBztC,KAAKytC,aAAakG,QAAU3zC,KAAKytC,aAAakG,OAAOC,OAE5F,OAAQ5zC,KAAKyxB,UAAYlD,GAAAA,QAAAA,OAAAA,WAA4BvuB,KAAKyxB,UAAYlD,GAAAA,QAAAA,OAAAA,aAC7DvuB,KAAK6zC,kBAAqBH,GAAaA,EAAUI,aAAeC,UAAUC,KACvF,CAOI9I,YACA,OAAOlrC,KAAKytC,aAAavC,KAC7B,CAOI+I,oBACA,OAA2C,IAApCj0C,KAAKytC,aAAawG,aAC7B,CAOIC,aACA,OAAOl0C,KAAKytC,aAAayG,MAC7B,CAOIL,uBACA,OAAO7zC,KAAKgzC,cAChB,CAOIvjB,UACA,OAAOzvB,KAAKytC,aAAahe,GAC7B,CAOI0kB,0BACA,OAAOn0C,KAAKytC,aAAakG,QAAU3zC,KAAKytC,aAAakG,OAAOQ,mBAChE,CAOI1qC,aACA,OAAOzJ,KAAKytC,aAAahkC,MAC7B,CAOI5J,cACA,OAAOG,KAAKytC,aAAa5tC,OAC7B,CAKIu0C,iBAAa,IAAAC,EACb,OAAgC,QAAzBA,EAAAr0C,KAAK+yC,SAAStC,mBAAW,IAAA4D,OAAA,EAAzBA,EAA2BH,SAAUl0C,KAAKk0C,MACrD,CAOIlF,cACA,OAAOhvC,KAAKytC,aAAauB,OAC7B,CAMI6D,UAAMlrC,GACN3H,KAAK+yC,SAASF,MAAQlrC,EAGlB3H,KAAKyzC,uBACLzzC,KAAKs0C,wBAEb,CAOI7/B,aACA,OAAOzU,KAAKyxB,OAChB,CASA8hB,oBAAoBxzC,EAAMw0C,GACtBv0C,KAAKD,GAAQw0C,EACbA,EAAOj4B,KAAKtc,KAChB,CAOAw0C,aACI,OAAOx0C,KAAKytC,aAAa+G,cAAW/wC,UACxC,CAOAgxC,gBACIz0C,KAAKytC,aAAagH,iBAAchxC,UACpC,CASAixC,OAAOjlB,EAAKklB,EAAKC,EAAK19B,GAAmB,QAAA9E,EAAA3O,UAAAC,OAANoP,EAAI,IAAA3S,MAAAiS,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJQ,EAAIR,EAAA,GAAA7O,UAAA6O,GACnCtS,KAAKytC,aAAaiH,OAAOjlB,EAAKklB,EAAKC,EAAK50C,KAAK60C,qBAAqBzkB,KAAKpwB,KAAMkX,MAAcpE,EAC/F,CAQA0F,QAAQiX,EAAKqlB,EAAM59B,GAAmB,QAAAxE,EAAAjP,UAAAC,OAANoP,EAAI,IAAA3S,MAAAuS,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJG,EAAIH,EAAA,GAAAlP,UAAAkP,GAChC3S,KAAKytC,aAAaj1B,QAAQiX,EAAKqlB,EAAM90C,KAAK60C,qBAAqBzkB,KAAKpwB,KAAMkX,MAAcpE,EAC5F,CAaA+hC,qBAAqBE,EAAgBtgC,GACjCzU,KAAKyxB,QAAUhd,EAEf,IAAIugC,GAAgB,EAE2D,IAAAC,EAwB/E,GAxBIxgC,IAAW8Z,GAAAA,QAAAA,OAAAA,WAA4B9Z,IAAW8Z,GAAAA,QAAAA,OAAAA,UAClDvuB,KAAKk1C,2BAIDl1C,KAAKgzC,gBAAkBhzC,KAAKyzC,uBAC5BzzC,KAAKm1C,0BAETn1C,KAAKyzC,uBAAwB,EAE7BzzC,KAAKs0C,yBACLt0C,KAAKo1C,sBACLp1C,KAAKqzC,YAAY/D,SACjBtvC,KAAKmxC,KAAKM,eAAuC,QAAzBwD,EAAAj1C,KAAK+yC,SAAStC,mBAAW,IAAAwE,OAAA,EAAzBA,EAA2Bf,SAAUl0C,KAAKk0C,SAC3Dz/B,IAAW8Z,GAAAA,QAAAA,OAAAA,eAClBvuB,KAAKmxC,KAAKU,eAGVmD,EAAgBh1C,KAAKq1C,yBAChBL,GACD3b,aAAar5B,KAAKs1C,gBAIrBN,EAAe,SAAAniC,EAAApP,UAAAC,OA7BwBoP,EAAI,IAAA3S,MAAA0S,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJD,EAAIC,EAAA,GAAAtP,UAAAsP,GA8B5CgiC,EAAetgC,KAAW3B,GAC1B9S,KAAKya,aAAapR,KAAKgpC,GAAeruC,OAAOsuC,oBAAqB79B,EACtE,CACJ,CAOA8gC,oBACI,IAAK,MAAMC,KAAYx1C,KAAKszC,aACxBkC,EAASjhC,OAAO,IAAIrT,MAAM,eAE9BlB,KAAKszC,aAAe,EACxB,CAOAmC,iBACQz1C,KAAKytC,cAAgBztC,KAAKytC,aAAakG,SACvC3zC,KAAKytC,aAAakG,OAAO+B,eACzB11C,KAAKytC,aAAakG,OAAOgC,SAAS,MAE1C,CAOAh8B,aACI3Z,KAAKqzC,YAAY/D,SACjBjW,aAAar5B,KAAKs1C,cAClBt1C,KAAKu1C,oBACLv1C,KAAKytC,aAAa9zB,cAAWlW,UACjC,CAOAmyC,QACI51C,KAAKytC,aAAamI,SAAMnyC,UAC5B,CAOAysC,0BACI,OAAOlwC,KAAKmzC,iBAAiBjD,yBACjC,CAOAD,uBACI,OAAOjwC,KAAKmzC,iBAAiBlD,sBACjC,CAOAiF,2BACI,IAAKl1C,KAAK+yC,SAASN,sBAEf,OAGJ,MAAM,iBAAE7D,GAAqB5uC,KAAKytC,aAE7BztC,KAAK6zC,iBAEEjF,EAECA,EAAiBjkC,aAAeikC,EAAiBjkC,cAElDikC,EAAiBE,mBACzBrlC,GAAOE,KAAK,uCACZilC,EAAiBiH,QAAoB,IAHrCpsC,GAAON,KAAK,sEAFZM,GAAON,KAAK,+EAFZM,GAAON,KAAK,wDASpB,CAQAmrC,yBACI,MAAM,mBAAE5B,GAAuB1yC,KAAK+yC,SAEpC,GAAI/yC,KAAKgzC,gBAAkBN,EAAqB,EAAG,CAC/C1yC,KAAKs1C,cAAgB7rC,GAAOE,KAAM,kCAAiC+oC,OACnErZ,aAAar5B,KAAKs1C,cAElB,MAAMQ,EAAgCpD,EAAmD,GAAhBn3B,KAAKizB,SAAgB,IAE9F/kC,GAAOgH,MAAO,2CAA0CqlC,OAExD91C,KAAKs1C,aAAe7b,YAChB,IAAMz5B,KAAKm1C,0BACNp1B,MAAK,IAAM/f,KAAKs0C,4BACrBwB,EACR,CACJ,CAQAX,0BACI,MAAM,MAAEtC,EAAK,sBAAEF,GAA0B3yC,KAAK+yC,SACxChE,EAAM4D,GACN3yC,KAAKgvC,QAAQI,QAAQ,SAAU,YAAYA,QAAQ,QAAS,WAElE,OAAO2G,MAAMhH,GACRhvB,MAAKusB,IAGF,IAAKuG,EACD,OAGJ,MAAMmD,EAAgB1J,EAAS2J,QAAQtxB,IAAI,iBAEvCqxB,IAAkBnD,IAClBppC,GAAO7J,MACF,oCAAmCizC,QAAYmD,KACpDh2C,KAAKya,aAAapR,KAAKgpC,GAAeruC,OAAOuuC,oBACjD,IAEHryB,OAAMtgB,IACH6J,GAAO7J,MAAO,wCAAuCmvC,IAAO,CAAEnvC,SAAQ,GAElF,CAQAw1C,sBACI,IAAK,MAAMI,KAAYx1C,KAAKszC,aACxB,GAAIkC,EAASnE,GAAI,CACbhY,aAAamc,EAASpJ,SAEtB,MAAM8J,EAAWp6B,KAAKC,MAAQy5B,EAAS/+B,MAEvCzW,KAAKm2C,OACDX,EAASnE,IACTrxB,GAAUw1B,EAASlhC,QAAQ0L,KAC3BpgB,GAAS41C,EAASjhC,OAAO3U,IACzBs2C,EACR,CAGJl2C,KAAKszC,aAAe,EACxB,CAQA8C,KAAKC,GACoB,IAAAC,EAAAC,EAAAC,EAArB,IAAKx2C,KAAKgwC,UAIN,MAHAvmC,GAAO7J,MAAO,qDAAoDI,KAAKyxB,iBACnEzxB,KAAK6zC,iBAAoC,QAApByC,EAAGt2C,KAAKytC,oBAAY,IAAA6I,GAAQ,QAARC,EAAjBD,EAAmB3C,cAAM,IAAA4C,GAAQ,QAARC,EAAzBD,EAA2B3C,cAAM,IAAA4C,OAAhB,EAAjBA,EAAmC1C,WAAa,UAEtE,IAAI5yC,MAAM,iBAEpBlB,KAAKytC,aAAa2I,KAAKC,EAC3B,CAYAF,OAAOM,EAAMv/B,EAAUw/B,EAAStK,GAC5B,GAAKpsC,KAAKgwC,UAMV,OAAOhwC,KAAKytC,aAAa0I,OAAOM,EAAMv/B,EAAUw/B,EAAStK,GALrDsK,EAAQ,gBAMhB,CAUAlF,QAAQH,EAAEsF,GAAe,IAAb,QAAEvK,GAASuK,EACnB,OAAO,IAAItiC,SAAQ,CAACC,EAASC,KACzB,GAAIvU,KAAKgwC,UACLhwC,KAAKm2C,OACD9E,GACArxB,GAAU1L,EAAQ0L,KAClBpgB,GAAS2U,EAAO3U,IAChBwsC,OACD,CACH,MAAMoJ,EAAW,CACbnE,KACA/8B,UACAC,SACAkC,MAAOqF,KAAKC,MACZqwB,QAAS3S,YAAW,KAEhB+b,EAASnE,QAAK/wC,EAGdiU,OAAOjU,EAAU,GAClB8rC,IAGPpsC,KAAKszC,aAAahkC,KAAKkmC,EAC3B,IAER,CAOAhC,gCACQxzC,KAAK6zC,mBACLpqC,GAAON,KAAK,yDACZnJ,KAAKy1C,iBAEb,CAaA3J,aAAa2K,EAAMv/B,EAAUw/B,EAAStK,GAC7BpsC,KAAKgwC,UAKVhwC,KAAKytC,aAAa3B,aAAa2K,EAAMv/B,EAAUw/B,EAAStK,GAJpDsK,EAAQ,gBAKhB,CAOAE,wBACI,IAAK1xC,UAAU2xC,YAAc72C,KAAKytC,aAAawG,gBAAkBj0C,KAAKytC,aAAauC,UAC/E,OAAO,EAGXhwC,KAAKytC,aAAaqJ,qBAAqBvoB,GAAAA,QAAAA,OAAAA,eACvCvuB,KAAKytC,aAAawG,eAAgB,EAElC,MAAMpR,EAAO7iC,KAAKytC,aAAakG,OAAOoD,aACjCC,MAAM,CACH5zC,KAAM,cAER6zC,GAAOC,EAAAA,GAAAA,OAAM,CACf1K,MAAOje,GAAAA,QAAAA,GAAAA,OACPnrB,KAAM,gBAGVy/B,EAAKsU,MAAMF,EAAKG,QAEhB,MAAM7M,EAAMrlC,UAAU2xC,YACoB,IAAtC72C,KAAKgvC,QAAQpuC,QAAQ,YAAsB,SAAQZ,KAAKgvC,UAAYhvC,KAAKgvC,QACzEzgB,GAAAA,QAAAA,UAAkBsU,EAAKuU,SAO3B,OALA3tC,GAAOE,KAAM,wCAAuC4gC,KAEpDvqC,KAAKytC,aAAakG,OAAO0D,oBACzBr3C,KAAKytC,aAAa6J,iBAEX,CACX,CAUAjC,yBACI,MAAM,iBAAEzG,GAAqB5uC,KAAKytC,aAGlC,SAFoBmB,IAAoBA,EAAiBE,mBAGrD9uC,KAAKqzC,YAAYxF,WAEV,GAIf,ECxoBG,IAAK0J,GAAwB,SAAxBA,GAAwB,OAAxBA,EAAwB,QAAxBA,EAAwB,UAAxBA,CAAwB,MAa7B,MAAMC,GAAKD,GAAyBC,GAC9BC,GAAMF,GAAyBE,ICRtChuC,IAASC,EAAAA,EAAAA,2CAKA,MAAMguC,GAOjBn2C,YAAYqsB,GACR5tB,KAAK23C,MAAQ/pB,EAAK9F,KAElB9nB,KAAK43C,UAAYhqB,EAEjB5tB,KAAK63C,yBAA2B,CAC5B,CAACx7B,GAAUkL,QAAQ,EACnB,CAAClL,GAAUwK,QAAQ,GAGvB7mB,KAAK83C,gBAAkB,GACvB93C,KAAK+3C,gBAAkB,GAEvB/3C,KAAKg4C,WAAah4C,KAAKg4C,WAAW5nB,KAAKpwB,MACvCA,KAAK23C,MAAM5pB,YAAYC,GAAW,WAAXA,uBAAmChuB,KAAKg4C,WACnE,CAKA9pC,UACIlO,KAAK23C,MAAM/tB,eAAeoE,GAAW,WAAXA,uBAAmChuB,KAAKg4C,WACtE,CAOArtC,cACI,OAAOT,QAAQlK,KAAK23C,MAAMM,6BAC9B,CAKApC,OAAOtxB,EAAOzgB,GACV,IAAK9D,KAAK2K,gBAAkB3K,KAAK43C,UAAUhnB,cAIvC,YAHAnnB,GAAO7J,MAAO,iBAAgB2kB,6BAAiCvkB,KAAK2K,6CACpD3K,KAAK43C,UAAUhnB,iBAKnC,GAAIrM,IAAUvkB,KAAK63C,yBAAyB/zC,GAGxC,YAFA2F,GAAON,KAAM,+BAA8Bob,mBAAuBzgB,KAMtE,MAAMiM,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAIvxC,KAAK23C,MAAMM,+BAElCloC,EAAI04B,EAAE,gBAAiB,CACnBoN,OAAQtxB,EACRzgB,cACDq0C,KAEHn4C,KAAK23C,MAAM1M,WAAWmL,KAAKrmC,EAC/B,CAKAqoC,QAAQt0C,EAAW2rB,GACf,IAAKzvB,KAAK2K,gBAAkB3K,KAAK43C,UAAUhnB,cAIvC,YAHAnnB,GAAO7J,MAAO,6CAA4CI,KAAK2K,6CAC/C3K,KAAK43C,UAAUhnB,iBAMnC,MAAM7gB,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAIvxC,KAAK23C,MAAMM,+BAElCloC,EAAI04B,EAAE,gBAAiB,CACnB3kC,YACAu0C,eAAgB5oB,IAAO0oB,KAE3Bn4C,KAAK23C,MAAM1M,WAAWmL,KAAKrmC,EAC/B,CAKAwE,OAAOzQ,EAAW2rB,GACd,IAAKzvB,KAAK2K,gBAAkB3K,KAAK43C,UAAUhnB,cAIvC,YAHAnnB,GAAO7J,MAAO,4CAA2CI,KAAK2K,6CAC9C3K,KAAK43C,UAAUhnB,iBAMnC,MAAM7gB,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAIvxC,KAAK23C,MAAMM,+BAElCloC,EAAI04B,EAAE,gBAAiB,CACnB3kC,YACAw0C,eAAgB7oB,IACjB0oB,KAEHn4C,KAAK23C,MAAM1M,WAAWmL,KAAKrmC,EAC/B,CAOAioC,WAAWO,GACP,MAAM,QAAEC,EAAS10C,UAAW20C,EAAK,QAAErkB,EAAO,SAAEskB,EAAQ,MAAE/pB,EAAOgqB,WAAYC,GAAkBL,EAE3F,GAAIK,EAAe,CACf,MAAMC,EAAUJ,IAAUp8B,GAAUkL,MAC9BvnB,KAAK83C,gBACL93C,KAAK+3C,gBACLe,EAAU34C,MAAMC,QAAQw4C,EAAcH,IAAUG,EAAcH,GAAS,GAEzED,EACAK,EAAQ5gC,QAAO2wB,IAAMkQ,EAAQ/I,SAASnH,KACjCx6B,SAAQqhB,GAAOzvB,KAAK23C,MAAMl9B,aACtBpR,KAAK2kB,GAAW,WAAXA,mCAA+CyqB,EAAOhpB,KAEpEqpB,EAAQ7gC,QAAO2wB,IAAMiQ,EAAQ9I,SAASnH,KACjCx6B,SAAQqhB,GAAOzvB,KAAK23C,MAAMl9B,aACtBpR,KAAK2kB,GAAW,WAAXA,mCAA+CyqB,EAAOhpB,KAGpEgpB,IAAUp8B,GAAUkL,MACpBvnB,KAAK83C,gBAAkBgB,EAEvB94C,KAAK+3C,gBAAkBe,CAE/B,WAAuBx4C,IAAZ8zB,GAAyBp0B,KAAK63C,yBAAyBY,KAAWrkB,GACzEp0B,KAAK63C,yBAAyBY,GAASrkB,EAEvCp0B,KAAK23C,MAAMl9B,aAAapR,KAAK2kB,GAAW,WAAXA,sBAAkCoG,EAASqkB,EAAO9pB,IACxE6pB,EACPx4C,KAAK23C,MAAMl9B,aAAapR,KAAK2kB,GAAW,WAAXA,uBAAmCyqB,GACzDC,GACP14C,KAAK23C,MAAMl9B,aAAapR,KAAK2kB,GAAW,WAAXA,uBAAmCyqB,EAExE,EC3JJ,MAAMM,GAAc,0BACdC,GAAwB,CAC1BC,IAAM,GAAEF,SACRG,OAAS,GAAEH,YACXI,aAAe,GAAEJ,mBAEfK,GACa,GAAEL,kBADfK,GAEO,GAAEL,YAGTtvC,IAASC,EAAAA,EAAAA,4CAKA,MAAM2vC,GAOjB93C,YAAYqsB,GACR5tB,KAAK4tB,KAAOA,EAEZ5tB,KAAKs5C,gBAAkBt5C,KAAKs5C,gBAAgBlpB,KAAKpwB,MACjDA,KAAK4tB,KAAK9F,KAAKiG,YAAYC,GAAW,WAAXA,qBAAiChuB,KAAKs5C,iBAEjEt5C,KAAKu5C,OAAS,CAAC,CACnB,CAKArrC,UACIlO,KAAK4tB,KAAK9F,KAAK8B,eAAeoE,GAAW,WAAXA,qBAAiChuB,KAAKs5C,gBACxE,CAOAE,mBAAmBC,GACf,IAAKz5C,KAAK2K,gBAAkB3K,KAAK4tB,KAAKgD,cAIlC,YAHAnnB,GAAO7J,MAAO,2CAA0CI,KAAK2K,6CAC7C3K,KAAK4tB,KAAKgD,iBAK9B,MAAMrwB,EAAU,CACZ6C,KAAM41C,GAAsBC,IAC5BQ,WAGJz5C,KAAKqgC,aAAa9/B,EACtB,CAOAm5C,mBAAmBC,GACf,IAAK35C,KAAK2K,gBAAkB3K,KAAK4tB,KAAKgD,cAIlC,YAHAnnB,GAAO7J,MAAO,2CAA0CI,KAAK2K,6CAC7C3K,KAAK4tB,KAAKgD,iBAK9B,MAAMrwB,EAAU,CACZ6C,KAAM41C,GAAsBE,OAC5BS,mBAGJ35C,KAAKqgC,aAAa9/B,EACtB,CAQAq5C,sBAAsBC,EAAgBjuB,GAClC,IAAK5rB,KAAK2K,gBAAkB3K,KAAK4tB,KAAKgD,cAIlC,YAHAnnB,GAAO7J,MAAO,+CAA8CI,KAAK2K,6CACjD3K,KAAK4tB,KAAKgD,iBAK9B,MAAMrwB,EAAU,CACZ6C,KAAM41C,GAAsBG,aAC5BU,iBACAjuB,WAGJ5rB,KAAKqgC,aAAa9/B,EACtB,CAKAoK,cACI,OAAOT,QAAQlK,KAAK85C,sBACxB,CAOAA,sBACI,OAAO95C,KAAK4tB,KAAK9F,KAAKiyB,6BAC1B,CAOAC,mBAAmBC,GACfj6C,KAAKk6C,gBAAkBD,CAC3B,CAOAA,iBACI,YAAoC,IAAzBj6C,KAAKk6C,gBACLl6C,KAAKk6C,gBAIT3rB,GAAAA,QAAAA,iBAAyBvuB,KAAK4tB,KAAKusB,aAAen6C,KAAK85C,qBAClE,CAQAM,gBAAgB3qB,GACZzvB,KAAKq6C,aAAe5qB,CACxB,CAOA6qB,iBACI,OAAOt6C,KAAKq6C,YAChB,CAOAf,gBAAgB5nB,GACZ,OAAQA,EAAQjjB,OAChB,KAAK2qC,GACDp5C,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,4BAAwC0D,EAAQ9F,SAC5E,MACJ,KAAKwtB,GAA6B,CAC9B,MAAMmB,EAAkBv6C,KAAKw6C,qBAAqB9oB,GAElD1xB,KAAKu5C,OAASgB,EAAgBpP,MAC9BnrC,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,uBAAmCusB,GAC/D,KACJ,EAEJ,CAQAC,qBAAqB9oB,GACjB,MAAM+oB,EAAez6C,KAAK4tB,KAAK/tB,QAAQ46C,cACjC,MAAEtP,GAAUzZ,EACZgpB,EAAgB,CAAC,EAkBvB,OAhBAr5C,OAAO+Z,QAAQ+vB,GAAO/8B,SAAQk/B,IAAmB,IAAhB5lC,EAAKkmB,GAAM0f,EACxC,MAAM,aAAEqN,EAAe,CAAC,GAAM/sB,EACxBgtB,EAAuB,CAAC,EAE9Bv5C,OAAO+Z,QAAQu/B,GAAcvsC,SAAQuoC,IAAwB,IAArBkE,EAAGxsB,GAAasoB,EAChDpoB,GAAAA,QAAAA,iBAAyBF,EAAYoB,OAASgrB,IAC9CG,EAAqBC,GAAKxsB,EAC9B,IAGJqsB,EAAchzC,GAAO,IACdkmB,EACH+sB,aAAcC,EACjB,IAGE,IACAlpB,EACHyZ,MAAOuP,EAEf,CAOAra,aAAa9/B,GACT,MAAMwP,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAIvxC,KAAK85C,wBAE5B/pC,EAAI04B,EAAE,iBAAkBloC,GAAS43C,KAEjCn4C,KAAK4tB,KAAK9F,KAAKmjB,WAAWmL,KAAKrmC,EACnC,EClOJ,MAAMtG,IAASC,EAAAA,EAAAA,oCAOToxC,GAAgB,QAMP,MAAMC,GAOjBx5C,YAAYqsB,GACR5tB,KAAK8nB,KAAO8F,EAAK9F,KACjB9nB,KAAKg7C,SAAWptB,EAEhB,MAAMqtB,EAAqBj7C,KAAKk7C,oBAAoB9qB,KAAKpwB,MAEzDA,KAAKg7C,SAASvvC,iBACVuiB,GAAW,WAAXA,mBACAitB,GAEJj7C,KAAKg7C,SAASvvC,iBACVuiB,GAAW,WAAXA,yBACAitB,GAEJj7C,KAAKg7C,SAASvvC,iBACVuiB,GAAW,WAAXA,iCACAyB,IACIzvB,KAAKm7C,aAAe1rB,CAAG,GAEnC,CAOA9kB,cACI,OAAO3K,KAAK8nB,KAAKszB,cACrB,CAOAvF,SACI,OAAK71C,KAAK2K,cAIH,IAAI0J,SAAQ,CAACC,EAASC,KACzBvU,KAAKg7C,SAASK,gBAAe,EAAM/mC,EAASC,EAAO,IAJ5CF,QAAQE,OAAO,IAAIrT,MAAM,wBAMxC,CAOAo6C,UACSt7C,KAAK2K,eAAkB3K,KAAKg7C,SAASpqB,eAC9B5wB,KAAKu7C,WAAcv7C,KAAKg7C,SAASQ,oBAI7Cx7C,KAAKg7C,SAASK,gBAAe,EACjC,CAQApW,YAAY1kC,GACJP,KAAKu7C,WACLv7C,KAAKu7C,UAAUtW,YAAYt8B,KAAKC,UAAUrI,GAAU,eAE5D,CASAk7C,mBAAmB51B,EAAItlB,GACfP,KAAKu7C,WACLv7C,KAAKu7C,UAAUE,mBAAmB51B,EAAIld,KAAKC,UAAUrI,GAAU,eAEvE,CAQAm7C,aACI,GAAI17C,KAAKu7C,UACL,OAAOhtB,GAAAA,QAAAA,mBAA2BvuB,KAAKu7C,UAAUpB,UAEzD,CASAwB,mBAAmBlyB,GACf,GAAIzpB,KAAKu7C,UAAW,CAChB,MAAMltC,EAAUA,CAACyU,EAAeviB,KAC5BkpB,EAASlpB,EAASguB,GAAAA,QAAAA,mBAA2BzL,GAAe,EAKhE,OAFA9iB,KAAKu7C,UAAU7xB,GAAGsE,GAAW,WAAXA,sBAAkC3f,GAE7CA,CACX,CACJ,CAQAutC,qBAAqBvtC,GACbrO,KAAKu7C,WACLv7C,KAAKu7C,UAAU3hB,IAAI5L,GAAW,WAAXA,sBAAkC3f,EAE7D,CAOAihB,QACI,OAAItvB,KAAKu7C,UACEv7C,KAAKu7C,UAAUjsB,QACjBvP,MAAK,KACF/f,KAAKu7C,eAAYj7C,EACjBmJ,GAAOE,KAAK,mBAAmB,IAElCuW,OAAM,SAGR7L,QAAQE,OACP,IAAIrT,MAAM,mCACtB,CAOA26C,gBAAgBpsB,GACZzvB,KAAKm7C,aAAe1rB,CACxB,CAMAyrB,sBACSl7C,KAAK2K,eAIU3K,KAAKg7C,SAASc,QAAU97C,KAAKg7C,SAASpqB,eAEvC5wB,KAAKg7C,SAASQ,qBAAuBx7C,KAAKu7C,WAEzDv7C,KAAKQ,OACAuf,MAAK,IAAMtW,GAAOE,KAAK,uBACvBuW,OAAM1Q,GAAK/F,GAAO7J,MAAM,uBAAwB4P,IAE7D,CASAhP,KAAKm0B,EAAaonB,GACd,MAAMnrB,EAAc5wB,KAAKg7C,SAASc,QAAU97C,KAAKg7C,SAASpqB,cAE1D,IAAK5wB,KAAKm7C,aACN,OAAO9mC,QAAQE,OAAO,IAAIrT,MAAM,kDAGpC,MAAM+pB,EAAWsD,GAAAA,QAAAA,eAAuBvuB,KAAKm7C,cACvCa,EAAeztB,GAAAA,QAAAA,iBAAyBvuB,KAAKm7C,cAuHnD,OArHAn7C,KAAKu7C,UAAYv7C,KAAK8nB,KAAKm0B,WACvBhxB,EAAU,CACN+wB,eACAE,kBAAkB,EAClBC,cAAc,EACdC,aAAa,IAIjBznB,GAEA30B,KAAKu7C,UAAUrP,uBAAuB,OAAQ,CAC1ChpC,WAAY,CAAEspC,MAAO,mCACrB7kC,MAAOgtB,IAIX/D,GACA5wB,KAAKu7C,UAAU5pB,oBAAoBmpB,IAAe,CAAC/qB,EAAMvF,KACrDxqB,KAAKg7C,SAASvgC,aAAapR,KAAK2kB,GAAW,WAAXA,yBAAqCxD,EAAM,CAAEuxB,MAAOhsB,EAAKpoB,OAAQ,IAErG3H,KAAKu7C,UAAU9vC,iBACXuiB,GAAW,WAAXA,mBAEA,CAACxD,EAAM+G,EAAMb,EAAM2rB,EAAgBxnB,EAASpgB,EAAQqgB,EAAUwnB,EAAS7sB,KAEnE,IAAIpuB,OAAOkP,OAAOvQ,KAAKg7C,SAASuB,SAAStoB,MAAK5H,GAAKA,EAAEoD,MAAQA,IAA7D,CAKA,IAAK,MAAM7B,KAAQvsB,OAAOkP,OAAOvQ,KAAKg7C,SAASwB,mBAAmBjD,QAC9D,GAAIl4C,OAAOkP,OAAOqd,EAAK+sB,cAAc1mB,MAAKC,GAAKA,EAAEzE,MAAQA,IACrD,OAMRzvB,KAAKg7C,SAASvgC,aAAapR,KACvB2kB,GAAW,WAAXA,wBACAO,GAAAA,QAAAA,mBAA2B/D,GAC3B+G,EACAuD,EAAWA,EAAS2nB,YAASn8C,EAfjC,CAgBC,IAETN,KAAKu7C,UAAU9vC,iBACXuiB,GAAW,WAAXA,iBAA4BxD,IAGxBxqB,KAAKg7C,SAASvgC,aAAapR,KACvB2kB,GAAW,WAAXA,sBACAO,GAAAA,QAAAA,mBAA2B/D,GAC9B,IAETxqB,KAAKu7C,UAAU9vC,iBACXuiB,GAAW,WAAXA,eACA,KAEI3sB,OAAO8G,KAAKnI,KAAKu7C,UAAUgB,SACtBnuC,SAAQi7B,GAAKrpC,KAAKg7C,SAASvgC,aAAapR,KACrC2kB,GAAW,WAAXA,sBAAkCO,GAAAA,QAAAA,mBAA2B8a,MAErErpC,KAAKu7C,UAAUmB,QAEf18C,KAAKu7C,eAAYj7C,EACjBmJ,GAAOE,KAAK,8BAA8B,MAIlD3J,KAAKu7C,UAAU9vC,iBAAiBuiB,GAAW,WAAXA,QAAmB2uB,IAC/C,GAAIA,EAKA,OAJA38C,KAAKg7C,SAASvgC,aAAapR,KAAK2kB,GAAW,WAAXA,wBAEhChuB,KAAKu7C,UAAUmB,OAGnB,IAMJ18C,KAAKg7C,SAASvvC,iBACVuiB,GAAW,WAAXA,yBACA,CAACpC,EAASpB,EAAM4G,EAAKwrB,KACjBnzC,GAAOgH,MAAO,6BAA4Bmb,KAAWpB,KAAQ4G,KACzDxF,IAAY5rB,KAAKg7C,SAASvoB,SAE1BzyB,KAAKg7C,SAASx6C,KAAKo8C,EACvB,IAER58C,KAAKu7C,UAAU9vC,iBACXuiB,GAAW,WAAXA,eACA,CAACtZ,EAAQ+a,KAGDA,EACAzvB,KAAKg7C,SAASx6C,QAKlBR,KAAKu7C,UAAUmB,QAEf18C,KAAKg7C,SAASvgC,aAAapR,KAAK2kB,GAAW,WAAXA,cAA0BtZ,GAAO,IAKzE1U,KAAKg7C,SAASvvC,iBACVuiB,GAAW,WAAXA,YACA,KACIhuB,KAAKsvB,OAAO,KAIjB,IAAIjb,SAAQ,CAACC,EAASC,KACzBvU,KAAKu7C,UAAU9vC,iBAAiBuiB,GAAW,WAAXA,YAAuB,KACnD1Z,IAGIynC,IAAUnrB,GACV5wB,KAAKu7C,UAAUrP,uBAAuB4O,GAAe,CAAEnzC,MAAOo0C,KACvD/7C,KAAKu7C,UAAUzP,cAC1B,IAEJ9rC,KAAKu7C,UAAU9vC,iBAAiBuiB,GAAW,WAAXA,gBAA4BzZ,GAC5DvU,KAAKu7C,UAAU9vC,iBAAiBuiB,GAAW,WAAXA,+BAA2CzZ,GAC3EvU,KAAKu7C,UAAU9vC,iBAAiBuiB,GAAW,WAAXA,mBAA+BzZ,GAE/DvU,KAAKu7C,UAAU/6C,MAAM,GAG7B,CAMAq8C,WAAWh3B,GACP,IAAK7lB,KAAK2K,gBAAkB3K,KAAKg7C,SAASpqB,cACtC,OAGJ,MAAMnB,EAAMpuB,OAAO8G,KAAKnI,KAAKu7C,UAAUgB,SAClCtoB,MAAKoV,GAAK9a,GAAAA,QAAAA,mBAA2B8a,KAAOxjB,IAE7C4J,EACAzvB,KAAKu7C,UAAUuB,KAAKrtB,GAEpBhmB,GAAO7J,MAAO,wBAAuBimB,mBAE7C,CAMAk3B,cAAcl3B,GACV,IAAK7lB,KAAK2K,gBAAkB3K,KAAKg7C,SAASpqB,cACtC,OAKJ,IAAIosB,EAAch9C,KAAKg7C,SAASvoB,QAE5BzyB,KAAKg7C,SAASwB,mBAAmBvC,mBACjC+C,EAAch9C,KAAKg7C,SAASwB,mBAAmBlC,kBAGnD,MAAM2C,EAAgB57C,OAAO8G,KAAKnI,KAAKu7C,UAAUgB,SAC5CtoB,MAAKoV,GAAK9a,GAAAA,QAAAA,mBAA2B8a,KAAOxjB,IAEjD,GAAIo3B,EAAe,CACf,MAAMxtB,EAAMzvB,KAAKu7C,UAAUgB,QAAQU,GAAextB,IAC5CytB,GACAhF,EAAAA,GAAAA,MAAK,CAAE3G,GAAIyL,IACRvU,EAAE,IAAK,CAAE+D,MAAO,wCAChB/D,EAAE,SAAU,CAAE8I,GAAI9hB,IAE3BzvB,KAAK8nB,KAAKmjB,WAAWkL,OAAO+G,GACxB,SACA1tC,IACI/F,GAAO7J,MAAO,4BAA2B6vB,IAAOjgB,EAAE,GAE9D,MACI/F,GAAO7J,MAAO,wBAAuBq9C,mBAE7C,EC9YJ,MAAMxzC,IAASC,EAAAA,EAAAA,2CAKA,MAAMyzC,GASjB57C,YAAYqsB,GACR5tB,KAAK4tB,KAAOA,EAEZ5tB,KAAKs5C,gBAAkBt5C,KAAKs5C,gBAAgBlpB,KAAKpwB,MACjDA,KAAK4tB,KAAK9F,KAAKiG,YAAYC,GAAW,WAAXA,oBAAgChuB,KAAKs5C,iBAEhEt5C,KAAKo9C,UAAY,CAAC,CACtB,CAKAlvC,UACIlO,KAAK4tB,KAAK9F,KAAK8B,eAAeoE,GAAW,WAAXA,oBAAgChuB,KAAKs5C,gBACvE,CAQA+D,YAAY31C,EAAK0J,GACb,IAAKpR,KAAK2K,gBAAkB3K,KAAK4tB,KAAKgD,cAIlC,YAHAnnB,GAAO7J,MAAO,wCAAuCI,KAAK2K,6CAC1C3K,KAAK4tB,KAAKgD,iBAK9B,MAAMrwB,EAAU,CACZmH,MACA0J,QAGJpR,KAAKqgC,aAAa9/B,EACtB,CAOA+8C,cACI,OAAOt9C,KAAKo9C,SAChB,CAKAzyC,cACI,OAAOT,QAAQlK,KAAK85C,sBACxB,CAOAA,sBACI,OAAO95C,KAAK4tB,KAAK9F,KAAKy1B,4BAC1B,CAOAjE,gBAAgB5nB,GACZ,MAAM,SAAE8rB,GAAa9rB,EAEhB8rB,IAAYra,KAAQnjC,KAAKo9C,UAAWI,KAIzCx9C,KAAKo9C,UAAYI,EACjBx9C,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,sBAAkCwvB,GAClE,CAOAnd,aAAa9/B,GACTA,EAAQy/B,IAAuB,gBAE/B,MAAMjwB,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAIvxC,KAAK85C,wBAE5B/pC,EAAI04B,EAAE,gBAAiB,CACnB7a,KAAM5tB,KAAK4tB,KAAK6E,QAChB+Z,MAAO,4BACR7jC,KAAKC,UAAUrI,IAAU43C,KAE5Bn4C,KAAK4tB,KAAK9F,KAAKmjB,WAAWmL,KAAKrmC,EACnC,4BClHJ,MAAMtG,IAASC,EAAAA,EAAAA,2CAIf,IAAI+zC,GAEAC,GAKJ,UAKIx1C,SAAUsB,GAQV8S,KAAKqhC,GACD39C,KAAKkI,SAAWy1C,GAAmBn0C,EACvC,EAMIo0C,wBASA,OARKH,KACDA,GAAqBz9C,KAAKkI,SAASE,QAAQ,qBACtCq1C,KACDA,GAwDhB,WACI,MAAMI,EAAWC,KAAAA,mBAIjB,OAFAr0C,GAAOwG,IAAI,0BAA2B4tC,GAE/BA,CACX,CA9DqCE,GACrB/9C,KAAKkI,SAASI,QAAQ,oBAAqBm1C,MAI5CA,EACX,EAMIO,gBACA,IAAKN,GAAY,CACb,MAAMO,EAAQj+C,KAAKkI,SAASE,QAAQ,aAEpCs1C,GAAaO,GAASj+C,KAAKkI,SAASE,QAAQ,eAExC61C,EACAj+C,KAAKkI,SAASI,QAAQ,cAAe21C,GAC7BP,KACRA,GA+ChB,WACI,MAAMQ,EAWCC,KAAQA,KAAQA,KAAQA,KAP/B,OAFA10C,GAAOwG,IAAI,eAAgBiuC,GAEpBA,CACX,CArD6BE,GACbp+C,KAAKkI,SAASI,QAAQ,cAAeo1C,IAE7C,CAEA,OAAOA,EACX,EAMIW,gBAGA,OAAOr+C,KAAKkI,SAASE,QAAQ,YACjC,EAMIi2C,cAAUA,GACNA,EACAr+C,KAAKkI,SAASI,QAAQ,YAAa+1C,GAEnCr+C,KAAKkI,SAASM,WAAW,YAEjC,GAqCJ,SAAS21C,KACL,MAAQ,GAAE5iC,KAAKizB,SAASa,SAAS,eAAeiP,OAAO,EAAG,EAC9D,CCvHA,MAAMrtB,GACAxhB,EAAQ,OACNue,WAAUA,IAAKve,EAAQ,KACzB+C,GAAuB/C,EAAQ,MAE/BhG,IAASC,EAAAA,EAAAA,wCAMf,SAAS60C,GAAsBC,GAC3B,IAAIC,EAAQ,EAGZ,OAAO,SAAShxC,GAEZ,GAAIA,EAGA,YAFAgxC,EAAQ,GAMZ,MAAMrS,EAAU7wB,KAAKkzB,IAAI,EAAGgQ,EAAQ,GAIpC,OAFAA,GAAS,EAEFljC,KAAK4yB,IAAI/B,EAAUoS,EAfX,KAgBnB,CACJ,CASe,SAASE,GAAUzzB,EAAUnD,EAAMvN,EAAS1a,GAAS,IAAA8+C,EAqB3CC,EAuBrB,SAASn1B,EAAShb,GACd,GAAIA,EAAM2C,MAAQ3C,EAAM2C,KAAKitC,UAAW,CACpC,GAAI5vC,EAAMowC,SAAW/1C,OAAOg2C,SAASD,OAGjC,YAFAp1C,GAAON,KAAM,6CAA4CsF,EAAMowC,UAInEE,GAASV,UAAY5vC,EAAM2C,KAAKitC,SAGpC,CACJ,CAtDAr+C,KAAKirB,SAAWA,EAChBjrB,KAAKg/C,eAAiBT,GAAsB,KAC5Cv+C,KAAKi/C,oBAAsBV,GAAsB,KACjDv+C,KAAKH,QAAUA,EAGfG,KAAKk/C,qBAAsB,EAI3Bl/C,KAAKm/C,mBAAoB,EAEzBn/C,KAAKya,aAAeF,EAEpBva,KAAKirC,WAAanjB,EAAKmjB,WAGvBjrC,KAAKo/C,UAA8B,QAArBT,EAAG3+C,KAAKH,QAAQw/C,aAAK,IAAAV,OAAA,EAAlBA,EAAoBW,MAGhCt/C,KAAKo/C,YACNp/C,KAAKo/C,UAAa,SAA0B,QAApBR,EAAE5+C,KAAKH,QAAQw/C,aAAK,IAAAT,OAAA,EAAlBA,EAAoB1K,UAGlDl0C,KAAKu/C,UAAYv/C,KAAKH,QAAQ2/C,qBAG9Bx/C,KAAKy/C,KAAOz/C,KAAKu/C,UAAY,OAAS,OACtC91C,GAAOE,KAAM,SAAQ3J,KAAKy/C,iCAI1Bz/C,KAAK0/C,cAAgB,IAAI9xC,IAErB/N,EAAQ8/C,cACR3/C,KAAK0/C,cAAc5qC,IAAIjV,EAAQ8/C,cAsB/B72C,OAAO2C,iBACP3C,OAAO2C,iBAAiB,UAAWge,GAAU,GAE7C3gB,OAAO82C,YAAY,YAAan2B,EAExC,CAEAi1B,GAAUt9C,UAAUy+C,WAAa,SAASpwB,GACtC,IAAKA,EACD,OAAO,EAGX,IAAK,MAAMqwB,KAAY9/C,KAAK0/C,cAExB,GAAoC,IAAhCjwB,EAAI7uB,QAAS,GAAEk/C,MACf,OAAO,EAIf,OAAO,CACX,EAEApB,GAAUt9C,UAAU2+C,sBAAwB,WACxC,OAAO//C,KAAKk/C,mBAChB,EAEAR,GAAUt9C,UAAU4+C,oBAAsB,WACtC,OAAOhgD,KAAKm/C,iBAChB,EAkBAT,GAAUt9C,UAAU6+C,yBAA2B,WAAW,IAAAC,EAAAC,EAGtD,MAAM,UAAE9B,GAAcU,GAChBprB,EAAS3zB,KAAKH,QACd+O,EAAa,CAAC,OAEWtO,IAA3BqzB,EAAO9B,kBACPjjB,EAAWijB,gBAAkB8B,EAAO9B,sBAETvxB,IAA3BqzB,EAAO7B,kBACPljB,EAAWkjB,gBAAkB6B,EAAO7B,iBASkB,QAArCouB,EAAGvsB,SAAiB,QAAXwsB,EAANxsB,EAAQ/K,iBAAS,IAAAu3B,OAAX,EAANA,EAAmBC,uBAAe,IAAAF,GAAAA,IAGtDtxC,EAAWwxC,iBAAkB,GAGjC,MAAMC,EAAoB,CACtBzxC,aACA0xC,WAAYvB,GAASf,UACrBpwB,KAAM5tB,KAAKirB,UAOf,OAJIozB,IACAgC,EAAkBhC,UAAYA,GAG3BgC,CACX,EAKA3B,GAAUt9C,UAAUm/C,oBAAsB,WACtC,MAAMF,EAAoBrgD,KAAKigD,2BAGzBxJ,GAAOnF,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAKo/C,UACxBh8C,KAAM,QAEVqzC,EAAKhO,EAAE,aAAc,CACjB+D,MAAO,kCACP5e,KAAM5tB,KAAKirB,SACX,cAAeo1B,EAAkBC,aAGjCD,EAAkBhC,WAClB5H,EAAKO,MAAM,CAAE,aAAcqJ,EAAkBhC,YAGjD,IAAK,MAAMxD,KAAKwF,EAAkBzxC,WAC1ByxC,EAAkBzxC,WAAWiR,eAAeg7B,IAC5CpE,EAAKhO,EACD,WAAY,CACR1oC,KAAM86C,EACNlzC,MAAO04C,EAAkBzxC,WAAWisC,KACrC1C,KASf,OANI31B,GAAAA,4BACAi0B,EAAKhO,EAAE,WAAY,CACf1oC,KAAM,mBACN4H,MAAO,IAAKwwC,KAGb1B,CACX,EAEAiI,GAAUt9C,UAAUo/C,mBAAqB,SAASC,GAC9C,MAAMJ,EAAoB,CAAEzxC,WAAY,CAAC,GAqBzC,OAnBAyxC,EAAkBP,SAAWpV,KAAE+V,GAAUxsB,KAAK,cAAcysB,KAAK,YACjEL,EAAkBhC,UAAY3T,KAAE+V,GAAUxsB,KAAK,cAAcysB,KAAK,cAClEL,EAAkBvrB,SAAW4V,KAAE+V,GAAUxsB,KAAK,eAAeysB,KAAK,YAClEL,EAAkBM,MAAyD,SAAjDjW,KAAE+V,GAAUxsB,KAAK,cAAcysB,KAAK,SAC9DL,EAAkBO,MAAQlW,KAAE+V,GAAUxsB,KAAK,cAAcysB,KAAK,SAE1DhW,KAAE+V,GAAUxsB,KAAK,6DAAiEvwB,OAAS,IAC3F28C,EAAkBzxC,WAAWiyC,eAAiB,QAG9CnW,KAAE+V,GAAUxsB,KAAK,2DAA+DvwB,OAAS,IACzF28C,EAAkBzxC,WAAWkyC,aAAe,QAI5CpW,KAAE+V,GAAUxsB,KAAK,gEAAoEvwB,OAAS,IAC9F28C,EAAkBzxC,WAAWuwC,kBAAoB,QAG9CkB,CACX,EAYA3B,GAAUt9C,UAAU2/C,sBAAwB,WACxC,OAAO,IAAI1sC,SAAQC,IACG,SAAdtU,KAAKy/C,MACLh2C,GAAOE,KAAM,2CAA0C3J,KAAKo/C,aAE5Dp/C,KAAKirC,WAAWkL,OACZn2C,KAAKugD,uBACLvgC,GAAUhgB,KAAKghD,iBAAiBhhC,EAAQ1L,KACxC1U,GAASI,KAAKihD,eAAerhD,EAAO0U,KAMxCtU,KAAKirC,WAAW2K,UAEhBnsC,GAAOE,KAAM,2CAA0C3J,KAAKu/C,aAC5DxJ,MAAM/1C,KAAKu/C,UAAW,CAClBpb,OAAQ,OACRtB,KAAMl6B,KAAKC,UAAU5I,KAAKigD,4BAC1BhK,QAAS,CAAE,eAAgB,sBAE9Bl2B,MAAKusB,IACGA,EAAS4U,GAgBd5U,EAAStJ,OAAOjjB,MAAKohC,IACjBnhD,KAAKohD,eAAeD,EAAY7sC,EAAQ,IAhBxCg4B,EAAS+U,OAAOthC,MAAKshC,IACjB53C,GAAON,KAAM,iBAAgBmjC,EAAS73B,UAAU63B,EAASgV,qBAAqBD,KAC9E,MAAME,EAAmC,MAApBjV,EAAS73B,QAAkB4sC,EAAKzgD,QAAQ,uBAAyB,EAChF4gD,EAAoC,MAApBlV,EAAS73B,OAE/BzU,KAAKyhD,aAAaF,EAAcC,EAAeltC,EAAQ,IAE1D4L,OAAMtgB,IACH6J,GAAON,KAAM,UAASvJ,KACtBI,KAAKyhD,cAAc,GAQzB,IAELvhC,OAAMtgB,IACH6J,GAAON,KAAM,UAASvJ,KACtBI,KAAKyhD,cAAc,IAE3B,GAER,EAEA/C,GAAUt9C,UAAUggD,eAAiB,SAASf,EAAmBnpC,GAG7DlX,KAAKi/C,qBAAoB,GAErBoB,EAAkBP,UAClBr2C,GAAOE,KAAM,qBAAoB02C,EAAkBP,YACnD9/C,KAAK0/C,cAAc5qC,IAAIurC,EAAkBP,WAEzCr2C,GAAON,KAAK,sDAGhB,MAAMu4C,EAAwE,SAAhDrB,EAAkBzxC,WAAWiyC,eAiB3D,GAfAp3C,GAAOE,KAAM,2BAA0B+3C,KAEvC1hD,KAAKk/C,oBAAoE,SAA9CmB,EAAkBzxC,WAAWkyC,aACxDr3C,GAAOE,KAAM,oCAAmC3J,KAAKk/C,wBAEhDl/C,KAAKk/C,qBAAuBmB,EAAkBhC,YAC/C50C,GAAOE,KAAM,uBAAsB02C,EAAkBhC,aACrDU,GAASV,UAAYgC,EAAkBhC,WAG3Cr+C,KAAKya,aAAapR,KAAK4nB,GAAqB0wB,iBAAkBD,EAAuBrB,EAAkBvrB,UAEvG90B,KAAKm/C,kBAAoBkB,EAAkBzxC,WAAWuwC,kBACtD11C,GAAOE,KAAM,wBAAuB3J,KAAKm/C,qBAErCkB,EAAkBM,MAAO,CAKzB,GAHA3gD,KAAKg/C,gBAAe,GAGhBqB,EAAkBO,QAAU5gD,KAAKH,QAAQ+hD,cAAgB5hD,KAAKH,QAAQgiD,cAKtE,OAJAp4C,GAAON,KAAM,kBAAiBk3C,EAAkBO,uBAAuBP,EAAkBP,mBAEzF9/C,KAAKya,aAAapR,KAAK2kB,GAAW90B,WAAYmnD,EAAkBO,MAAOP,EAAkBP,UAK7Fr2C,GAAOE,KAAK,yDACZuN,GACJ,KAAO,CACH,MAAM4qC,EAAS9hD,KAAKg/C,iBAGpBv1C,GAAOE,KAAM,gCAA+Bm4C,SAC5Ch5C,OAAO2wB,YACH,IAAMz5B,KAAK+gD,wBAAwBhhC,KAAK7I,IACxC4qC,EACR,CACJ,EAEApD,GAAUt9C,UAAUqgD,aAAe,SAASF,EAAcC,EAAetqC,GASrE,GANIqqC,IACA93C,GAAOE,KAAK,+BACZo1C,GAASV,eAAY/9C,GAIrBkhD,EAIA,OAHA/3C,GAAON,KAAK,6CACZnJ,KAAKya,aAAapR,KAAK2kB,GAAWh2B,yBAKtC,MAAM8pD,EAAS9hD,KAAKi/C,sBAEpB,GAAIsC,GAAgBO,EAAS,IAEzBr4C,GAAOE,KAAM,qCAAoCm4C,SACjD9hD,KAAKg/C,gBAAe,GACpBl2C,OAAO2wB,YAAW,IAAMz5B,KAAK+gD,wBAAwBhhC,KAAK7I,IAAW4qC,OAClE,CACH,MAAMlQ,EAAS,kDACThyC,EAAQ,IAAIsB,MAAM0wC,GAExBnoC,GAAO7J,MAAMgyC,EAAQhyC,GACrB4S,GAAqBiN,iBAAiB7f,GAItCI,KAAKya,aAAapR,KAAK2kB,GAAWt1B,mBACtC,CACJ,EAUAgmD,GAAUt9C,UAAU6/C,eAAiB,SAASrhD,EAAOsX,GAIjD,MAAM6qC,EAAiBrX,KAAE9qC,GAAOq0B,KAAK,4BAErC,GAAI8tB,EAAer+C,OAAQ,CAEvB,MAAMs+C,EAAYD,EAAerB,KAAK,cAChCuB,EAAgBvX,KAAE9qC,GAAOq0B,KAAK,eACpC,IAAIiuB,EAUJ,OARID,IACAC,EAAWD,EAAcZ,aAE7BrhD,KAAKya,aAAapR,KACd2kB,GAAW70B,kBACX6oD,EACAE,EAGR,CAEA,MAAMC,EACAj4C,QAAQwgC,KAAE9qC,GAAOq0B,KAAK,0BAA0BvwB,QAC3CgnC,KAAE9qC,GAAOq0B,KAAK,yBAAyBvwB,QAG5C89C,EAAgB9W,KAAE9qC,GAAOq0B,KAAK,yBAAyBvwB,OAAS,EAElE89C,GAAiBjzB,GAAAA,QAAAA,iBAAyB3uB,EAAMkrC,aAAa,SAAW9qC,KAAKH,QAAQw/C,MAAM+C,kBAG3FpiD,KAAKk/C,qBAAsB,GAG/Bl/C,KAAKyhD,aAAaU,EAAgBX,EAAetqC,EACrD,EAUAwnC,GAAUt9C,UAAU4/C,iBAAmB,SAC/BhhC,EACA9I,GAEJ,MAAMmpC,EAAoBrgD,KAAKwgD,mBAAmBxgC,GAElDhgB,KAAKohD,eAAef,EAAmBnpC,EAC3C,EAEAwnC,GAAUt9C,UAAUihD,aAAe,WAC/B,OAAO,IAAIhuC,SAAQ,CAACC,EAASC,KACzBvU,KAAKirC,WAAWkL,OACZn2C,KAAKugD,uBACLvgC,IACI,MAAMq+B,EAAY3T,KAAE1qB,GAAQiU,KAAK,cAAcysB,KAAK,cAEhDrC,GACA50C,GAAOE,KAAM,wBAAuB00C,KACpCU,GAASV,UAAYA,GAErB50C,GAAON,KAAK,yCAGhBmL,GAAS,IAEbguC,GAAW/tC,EAAO,CACd3U,MAAO8qC,KAAE4X,GAASruB,KAAK,mBAAmBsuB,KAAK,WAC/ChiD,QAASmqC,KAAE4X,GAASruB,KAAK,iBAAiBotB,UAEjD,GAET,EAEA3C,GAAUt9C,UAAUohD,YAAc,SAASC,EAAaC,GACpD1iD,KAAK2iD,cAAyB,EAAOF,EAAaC,EACtD,EASAhE,GAAUt9C,UAAUuhD,aAAe,SAASC,EAAOC,EAAOC,GACtD,MAAMzR,GAAKC,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAKo/C,UACtBh8C,KAAM,QACJ4zC,EAAQ,CACVxK,MAAO,kCACP5e,KAAM5tB,KAAKirB,SACX,cAAe8zB,GAASf,WAE5B,IAAI1U,EAAM,WAeV,SAASv3B,EAAY6/B,EAAQ1lB,GACzB1Z,GAAqBiN,iBAAiB,IAAIve,MAAM0wC,IAChDnoC,GAAO7J,MAAMgyC,EAAQ1lB,GACrB42B,EAAU52B,EACd,CAjBI02B,IACA5L,EAAM4L,OAAQ,EACdtZ,EAAO,SAAQA,KAEnB+H,EAAG5I,EAAE,YAAauO,GAclBh3C,KAAKirC,WAAWkL,OACZ9E,GACArxB,IACI,IAAI+uB,EAAMrE,KAAE1qB,GAAQiU,KAAK,aAAaysB,KAAK,OAE3C3R,EAAMgU,mBAAmBhU,GACrBA,GACAtlC,GAAOE,KAAM,OAAM2/B,MAAQyF,KAC3B8T,EAAM9T,IAENh9B,EAAa,iBAAgBu3B,mBAAsBtpB,EACvD,GAEJjO,EAAYqe,UAAK9vB,EAAY,OAAMgpC,WAE3C,EAEAoV,GAAUt9C,UAAU4hD,iBAAmB,SAASP,EAAaC,GACzD1iD,KAAK2iD,cAAyB,EAAMF,EAAaC,EACrD,EAEAhE,GAAUt9C,UAAU6hD,OAAS,SAAS/rC,GAClC,MAAMm6B,GAAKC,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAKo/C,UACtBh8C,KAAM,SACJ,UAAEi7C,GAAcU,GAEjBV,GAKLhN,EAAG5I,EAAE,SAAU,CACX+D,MAAO,kCACP,aAAc6R,IAElBr+C,KAAKirC,WAAWkL,OACZ9E,GACArxB,IACI,IAAIkjC,EAAYxY,KAAE1qB,GAAQiU,KAAK,UAAUysB,KAAK,cAE1CwC,IACAA,EAAYH,mBAAmBG,IAEnCz5C,GAAOE,KAAM,oBAAmBu5C,IAAaljC,GAC7C++B,GAASV,eAAY/9C,EACrB4W,EAASgsC,EAAU,IAEvBtjD,IACI,MAAMgyC,EAAS,eAEfp/B,GAAqBiN,iBAAiB,IAAIve,MAAM0wC,IAChDnoC,GAAO7J,MAAMgyC,EAAQhyC,EAAM,KAxB/BsX,GA2BR,ECvjBA,MAAMzN,IAASC,EAAAA,EAAAA,uCAEFy5C,GAAS,CAClBC,YAAYC,EAAYC,GACpB,IAAK,MAAMC,KAASpjD,MAAMqqB,KAAK64B,EAAWrX,UAAW,CACjD,MAAMjc,EAAO,CACT7sB,WAAY,CAAC,EACb8oC,SAAU,GACV/b,QAASszB,EAAMtzB,SAGnB,IAAK,MAAMywB,KAAQvgD,MAAMqqB,KAAK+4B,EAAMrgD,YAChC6sB,EAAK7sB,WAAWw9C,EAAK3gD,MAAQ2gD,EAAK/4C,MAEtC,MAAM05C,EAAO9yB,GAAAA,QAAAA,QAAgBg1B,GAEzBlC,IAIAtxB,EAAKpoB,MAAQ4mB,GAAAA,QAAAA,YAAoB8yB,IAErCiC,EAAMh0C,KAAKygB,GACX/vB,KAAKojD,YAAYG,EAAOxzB,EAAKic,SACjC,CACJ,EACAwX,YAAYF,EAAOG,GACf,IAAK,IAAI19C,EAAI,EAAGA,EAAIu9C,EAAM5/C,OAAQqC,IAAK,CACnC,MAAMgqB,EAAOuzB,EAAMv9C,GAEfgqB,IACA0zB,EAAOhb,EAAE1Y,EAAKE,QAASF,EAAK7sB,YACxB6sB,EAAKpoB,OACL87C,EAAOp+B,EAAE0K,EAAKpoB,OAEdooB,EAAKic,UACLhsC,KAAKwjD,YAAYzzB,EAAKic,SAAUyX,GAEpCA,EAAOtL,KAEf,CAGJ,GASG,SAASuL,GAA2BzM,EAAM0M,GAC7C,MAAMpZ,EAAM,GAEZ,IAAK,IAAIxkC,EAAI,EAAGA,EAAIkxC,EAAKvzC,OAAQqC,IACzBkxC,EAAKlxC,GAAGkqB,UAAY0zB,GACpBpZ,EAAIj7B,KAAK2nC,EAAKlxC,IAItB,OAAOwkC,CACX,CAUA,MAAMqZ,GAAuB,CAAE,QAAS,QAAS,UAMjD,SAASC,GAA2B9zB,EAAM+zB,GACtC,MAAMhvB,EAAW,CAAC,EACZivB,EAAWh0B,EAAKic,SAAS/X,MAAKwU,GAAmB,SAAdA,EAAExY,UAE3C,GAAI8zB,EAAU,CACVjvB,EAAS4C,KAAO,CAAC,EACjB,MAAMssB,EAAO,CAAE,KAAM,OAAQ,UAEzBF,GACAE,EAAK10C,KAAK,wBAGd,IAAK,MAAM20C,KAAOD,EAAM,CACpB,MAAMT,EACAQ,EAAS/X,SAAS/X,MAAKwU,GAAKA,EAAExY,UAAYg0B,IAE5CV,IACAzuB,EAAS4C,KAAKusB,GAAOV,EAAM57C,MAEnC,CACJ,CACA,MAAMu8C,EAAYn0B,EAAKic,SAAS/X,MAAKwU,GAAmB,UAAdA,EAAExY,UAM5C,OAJIi0B,IACApvB,EAASqvB,MAAQD,EAAUv8C,OAGxBmtB,CACX,CAKe,MAAMsvB,WAAiB1qB,GAmBlCn4B,YAAY0pC,EAAYxb,EAAK40B,EAAUv8B,EAAMjoB,GACzC+H,QACA5H,KAAK8nB,KAAOA,EACZ9nB,KAAKirC,WAAaA,EAClBjrC,KAAKyyB,QAAUlE,GAAAA,QAAAA,kBAA0BkB,GACzCzvB,KAAKm6C,UAAY1qB,EACjBzvB,KAAKqkD,SAAWA,EAChBrkD,KAAKskD,oBAAqB,EAC1B76C,GAAOE,KAAM,kBAAiB3J,KAAKm6C,aACnCn6C,KAAKu8C,QAAU,CAAC,EAChBv8C,KAAKukD,QAAU,CAAC,EAChBvkD,KAAKwkD,aAAe,CAAC,EACrBxkD,KAAKykD,qBAAuB,GAC5BzkD,KAAK87C,QAAS,EACd97C,KAAK0kD,mBAAoB,EACzB1kD,KAAK0wB,KAAO,KACZ1wB,KAAK2kD,YAAc,KACnB3kD,KAAK4kD,mBAAoB,EACzB5kD,KAAKH,QAAUA,GAAW,CAAC,EAC3BG,KAAK6kD,UAAY,IAAInG,GAAU1+C,KAAKyyB,QAASzyB,KAAK8nB,KAAM9nB,KAAKya,aAAcqN,EAAKjoB,eACxC,IAA7BG,KAAKH,QAAQu8C,aAA+Bp8C,KAAKH,QAAQu8C,eAChEp8C,KAAK8kD,MAAQ,IAAI/J,GAAM/6C,OAE3BA,KAAK+kD,aAAe,IAAIrN,GAAa13C,MACrCA,KAAKglD,cAAgB,IAAI3L,GAAcr5C,MACvCA,KAAKilD,aAAe,IAAI9H,GAAan9C,MACrCA,KAAKklD,gBAAgBrlD,GACrBG,KAAKmlD,cAAgB,CAAC,EACtBnlD,KAAKolD,YAAc,KACnBplD,KAAKqlD,SAAW,KAChBrlD,KAAKqvB,gBAAkB,CAAC,EACxBrvB,KAAKslD,4BAA8B,KAEnCtlD,KAAKulD,QAAS,EACdvlD,KAAKwlD,oBAAsBjO,EAC/B,CAOA2N,kBAA8B,IAAdrlD,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvBzD,KAAKukD,QAAQhT,GAAKvxC,KAAKm6C,UACvBn6C,KAAKukD,QAAQkB,IAAM,iCACnBzlD,KAAKukD,QAAQjB,MAAQ,GAEjBzjD,EAAQ6lD,SACR1lD,KAAKukD,QAAQjB,MAAMh0C,KAAK,CACpB,QAAW,WACX,MAASzP,EAAQ6lD,UAIzB1lD,KAAK2lD,mBAAqB7pC,KAAKC,KACnC,CAQAvb,KAAK6jD,EAAUC,GAIX,OAHAtkD,KAAKqkD,SAAWA,EAChBrkD,KAAKskD,mBAAqBA,EAEnB,IAAIjwC,SAAQC,IACftU,KAAKH,QAAQs8C,cACN1yC,GAAOE,KAAM,iCAAgC3J,KAAKyyB,YAInDzyB,KAAKH,QAAQs8C,aACT9nC,QAAQC,UACRtU,KAAK6kD,UAAU9D,yBAEjBhhC,MAAK,KACT/f,KAAK8rC,cAAa,GAClB9rC,KAAKykD,qBAAqBn1C,KACtBtP,KAAKirC,WAAWx/B,iBACZ4mC,GAAeruC,OAAOsuC,oBACtBtyC,KAAK4lD,oBAAoBx1B,KAAKpwB,QAEtCsU,GAAS,GACX,GAEV,CAMAw3B,aAAa+Z,GACT,MAAMtU,EAAKvxC,KAAKukD,QAAQhT,GAExB,IAAKvxC,KAAKirC,aAAejrC,KAAKirC,WAAW+E,YAAcuB,IAAQvxC,KAAK87C,SAAW+J,EAE3E,OAGJ,MAAM5O,GAAOC,EAAAA,GAAAA,OAAM,CAAE3F,OAOjBsU,IACI7lD,KAAKskD,oBACLrN,EAAKxO,EAAE,eAAe0P,KAG1BlB,EAAKxO,EAAE,IAAK,CAAE+D,MAAOxsC,KAAKukD,QAAQkB,MAE9BzlD,KAAKqkD,UACLpN,EAAKxO,EAAE,YAAYpjB,EAAErlB,KAAKqkD,UAAUlM,KAEpCn4C,KAAKH,QAAQimD,WACb7O,EAAKxO,EAAE,aAAapjB,EAAErlB,KAAKH,QAAQimD,WAAW3N,KAGlDlB,EAAKkB,MAGTgL,GAAOK,YAAYxjD,KAAKukD,QAAQjB,MAAOrM,GAGvCj3C,KAAK+lD,iBAAmBjqC,KAAKC,MAE7B/b,KAAKirC,WAAWmL,KAAKa,GACjB4O,GAKA7lD,KAAKirC,WAAW2K,OAExB,CAMAoQ,QAAQtxC,GACJjL,GAAOwG,IAAI,WAAYjQ,KAAKm6C,WAC5B,MAAMlD,GAAOC,EAAAA,GAAAA,OAAM,CACf3F,GAAIvxC,KAAKm6C,UACT/2C,KAAM,gBAGNsR,GACAuiC,EAAKxO,EAAE,UAAUpjB,EAAE3Q,GAAQyjC,KAG/Bn4C,KAAKukD,QAAQ7gD,OAAS,GAerB1D,KAAKirC,WAAW4I,kBAAoB7zC,KAAKirC,WAAW2K,QACrD51C,KAAKirC,WAAWmL,KAAKa,GACrBj3C,KAAKirC,WAAW2K,OACpB,CAKAqQ,gBAGI,MAAMC,GACA5U,EAAAA,GAAAA,KAAI,CACFluC,KAAM,MACNmuC,GAAIvxC,KAAKyyB,UAERgW,EAAE,QAAS,CAAE+D,MAAOje,GAAAA,QAAAA,GAAAA,aAE7BvuB,KAAKirC,WAAWkL,OAAO+P,GAASlmC,IAC5B,MAAMulC,EAGM,IAFN7a,KAAE1qB,GAAQiU,KAAK,+CACZvwB,OAGL6hD,IAAWvlD,KAAKulD,SAChBvlD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,iBAA6Bu3B,GACpDvlD,KAAKulD,OAASA,GAGlB,MAAMY,EACAzb,KAAE1qB,GAAQiU,KAAK,qEAEjBkyB,EAAeziD,OACf1D,KAAKomD,aAAaD,EAAe9E,QAEjC53C,GAAON,KAAK,8BAGhB,MAAMk9C,EAAiF,IAAnE3b,KAAE1qB,GAAQiU,KAAK,yCAAyCvwB,OAEtE4iD,EACA5b,KAAE1qB,GAAQiU,KAAK,qEAEjBj0B,KAAK8kD,OACL9kD,KAAK8kD,MAAMjJ,gBAAgByK,GAAkBA,EAAe5iD,OAAS4iD,EAAejF,YAAS/gD,GAGjG,MAAMimD,EACA7b,KAAE1qB,GAAQiU,KAAK,sEACfgmB,EAAiB/vC,QAAQq8C,aAAe,EAAfA,EAAiBlF,QAEhDrhD,KAAKglD,cAAchL,mBAAmBC,GAEtC,MAAMuM,EACA9b,KAAE1qB,GAAQiU,KAAK,8EAEjBuyB,SAAAA,EAAuB9iD,QACvB1D,KAAKglD,cAAc5K,gBAAgBoM,EAAsBnF,QAGzDgF,IAAgBrmD,KAAKw7C,qBACrBx7C,KAAKw7C,mBAAqB6K,EAC1BrmD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,yBAAqCq4B,IAGhE,MAAMI,EACA/b,KAAE1qB,GAAQiU,KAAK,yEACfyyB,EAAmBD,aAAc,EAAdA,EAAgBpF,OAEzC,GAAIqF,EACA,IACI1mD,KAAKilD,aAAa3L,gBAAgB3wC,KAAK24B,MAAMolB,GACjD,CAAE,MAAOl3C,GACL/F,GAAON,KAAK,8BAA+BqG,EAC/C,CACJ,IACD5P,IACC4S,KAAAA,iBAAsC5S,GACtC6J,GAAO7J,MAAM,4BAA6BA,EAAM,GAExD,CAQAwmD,aAAaO,GACL3mD,KAAK2mD,YAAcA,IACf3mD,KAAK2mD,WACLl9C,GAAON,KAAM,2BAA0BnJ,KAAK2mD,gBAAgBA,KAEhE3mD,KAAK2mD,UAAYA,EACjB3mD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,eAA2B24B,GAE1D,CAKAC,yBAGI,GAAI5mD,KAAKH,QAAQq8C,iBACb,OAGJ,MAAM2K,GAAUvV,EAAAA,GAAAA,KAAI,CAAEluC,KAAM,MACxBmuC,GAAIvxC,KAAKyyB,UACRgW,EAAE,QAAS,CAAE+D,MAAO,yCACpB/D,EAAE,IAAK,CAAE+D,MAAO,gBACbppC,KAAM,WAEdpD,KAAKirC,WAAWkL,OAAO0Q,GAASC,IAC5B,IAAKpc,KAAEoc,GAAM7yB,KACL,qEACwCvwB,OAAQ,CACpD,MAAMkuC,EAAS,oCAKf,OAHAp/B,KAAAA,iBAAsC,IAAItR,MAAM0wC,SAChDnoC,GAAO7J,MAAMgyC,EAGjB,CAEA,MAAMmV,GAAazV,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAKyyB,QAC9BrvB,KAAM,QACLqlC,EAAE,QAAS,CAAE+D,MAAO,yCAEzBua,EAAWte,EAAE,IAAK,CAAE+D,MAAO,gBACvBppC,KAAM,WAEV2jD,EAAWte,EAAE,QAAS,CAAE,IAAO,cAC1BA,EAAE,SACFpjB,EAAE,6CAA6C8yB,KAAKA,KAEzD4O,EAAWte,EAAE,QAAS,CAAE,IAAO,yBAC1BA,EAAE,SAASpjB,EAAE,UAAU8yB,KAAKA,KAEjCn4C,KAAKirC,WAAWkL,OAAO4Q,EAAW,IAEnCnnD,IACC4S,KAAAA,iBAAsC5S,GACtC6J,GAAO7J,MAAM,0CAA2CA,EAAM,GAEtE,CAOAgmD,oBAAoBnxC,GAEZA,IAAW49B,GAAeG,OAAOwU,WAAahnD,KAAK2lD,mBAAqB3lD,KAAK+lD,kBAC7E/lD,KAAK8rC,cAEb,CAMAmb,WAAWhQ,GACP,MAAMzsB,EAAOysB,EAAKnM,aAAa,QACzBoc,EAAS,CAAC,EACVC,EAAWlQ,EAAKmQ,qBAAqB,UAAU,GAEjDD,IACAD,EAAOzyC,OAAS0yC,EAASE,aAAe,IAE5C,IAAIC,GAAkB,EAClBC,GAAmB,EACvB,MAAMC,EACAvQ,EAAKwQ,uBACH,sCAAuC,KAAK,GAC9CC,EACAF,GAAYA,EAASJ,qBAAqB,QAAQ,GAExDF,EAAOS,qBACD1Q,EAAKmQ,qBAAqB,eAAe1jD,OAE/CwjD,EAAOU,YACDF,GAAeA,EAAY5c,aAAa,eAC9Coc,EAAOx2B,KAAOg3B,GAAeA,EAAY5c,aAAa,QAGtD,MAAMrb,EAAMi4B,GAAeA,EAAY5c,aAAa,OAEpDoc,EAAOz3B,IAAMA,EACby3B,EAAOW,QAAU7nD,KAAK6kD,UAAUhF,WAAWpwB,GAC3Cy3B,EAAO7K,eACD5sB,GAAOA,EAAI7uB,QAAQ,KAAO,GACrBZ,KAAKH,QAAQ46C,eACRhrB,EAAIS,UAAUT,EAAI7uB,QAAQ,KAAO,EAAG6uB,EAAI7uB,QAAQ,MAEhE,MAAMknD,EAAgB7Q,EAAKmQ,qBAAqB,QAE5CU,EAAc,IAAmD,gBAA7CA,EAAc,GAAGC,UAAUC,gBAC7Cd,EAAO7K,gBAAiB,GAG9Br8C,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,kBAA8B,CACjDi6B,iBAAkBf,EAAO7K,eACzB6L,SAAUjR,IAGd,MAAMkR,EAAMlR,EAAK7c,cAAc,KAE3B+tB,GACAA,EAAIC,SAGR,MAAM9E,EAAQ,GAEdH,GAAOC,YAAYnM,EAAMqM,GACzBtjD,KAAKmlD,cAAc36B,GAAQ84B,EAE3B,IAAK,IAAIv9C,EAAI,EAAGA,EAAIu9C,EAAM5/C,OAAQqC,IAAK,CACnC,MAAMgqB,EAAOuzB,EAAMv9C,GAEnB,OAAQgqB,EAAKE,SACb,IAAK,MAAO,CACR,MAAM,WAAE/sB,GAAe6sB,EAEvB,IAAK7sB,EACD,MAEJ,MAAM,KAAEE,GAASF,EAEjBgkD,EAAO5K,QAAUl5C,EACjB,KACJ,CACA,IAAK,OACD8jD,EAAO31B,KAAOxB,EAAKpoB,MACnB,MACJ,IAAK,SACDu/C,EAAOrhC,GAAKkK,EAAKpoB,MACjB,MACJ,IAAK,WACDu/C,EAAOryB,QAAU9E,EAAKpoB,MACtB,MACJ,IAAK,WACDu/C,EAAOpyB,SAAW+uB,GAA2B9zB,EAAM/vB,KAAKH,QAAQikD,kCAChE,MACJ,IAAK,WACDoD,EAAO94B,SAAWpuB,KAAKqoD,iBAAiBt4B,GACxC,MAEJ,IAAK,OAAQ,CACT,MAAM,WAAE7sB,GAAe6sB,EAEvB,IAAK7sB,EACD,MAEJ,MAAM,KAAEnD,GAASmD,EAEJ,YAATnD,IACAmnD,EAAO9hD,QAAUlC,EAAWyE,OAEhC,KACJ,EAEJ,CAEA,IAAK3H,KAAK87C,SAAW97C,KAAK0kD,kBAAmB,CACzC,MAAM3oC,EAAM/b,KAAKqvB,gBAAgB,oBAAsBvmB,OAAO4pB,YAAY3W,MAE1EtS,GAAOwG,IAAI,6BAA8B8L,GAEzC/b,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,sBACvBhuB,KAAK0kD,mBAAoB,CAC7B,CAEA,GAAIl6B,IAASxqB,KAAKm6C,UAAW,CACzB,MAAM5hB,EACuB,UAAvB2uB,EAAOU,YAA0BV,EAAOx2B,KAAO,OAQrD,GANI1wB,KAAK0wB,OAAS6H,IACdv4B,KAAK0wB,KAAO6H,EACZv4B,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,mBACAhuB,KAAK0wB,QAER1wB,KAAK87C,OAAQ,CACd97C,KAAK87C,QAAS,EACd,MAAM//B,EAAM/b,KAAKqvB,gBAAgB,cAC3BvmB,OAAO4pB,YAAY3W,MAEzBtS,GAAOwG,IAAI,uBAAwB8L,GAG/B/b,KAAKqkD,WACLrkD,KAAKulD,QAAS,GAMdvlD,KAAK2lD,oBAAsB3lD,KAAK+lD,kBAChC/lD,KAAK8rC,eAGT9rC,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,aAItBhuB,KAAKH,QAAQq8C,kBAAoBl8C,KAAKimD,eAC3C,CACJ,MAAO,QAAY3lD,IAARmvB,EACPhmB,GAAOE,KAAK,2CACT,QAA2BrJ,IAAvBN,KAAKu8C,QAAQ/xB,GAEpBxqB,KAAKu8C,QAAQ/xB,GAAQ08B,EACrBz9C,GAAOwG,IAAI,UAAWua,EAAM08B,GAC5BI,OAAoChnD,IAAlB4mD,EAAOzyC,OACzB8yC,OAAsCjnD,IAAnB4mD,EAAO9hD,QACtB8hD,EAAOW,QACP7nD,KAAKsoD,WAAW99B,EAAM08B,EAAO94B,WAK7BpuB,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,kBACAxD,EACA08B,EAAO31B,KACP21B,EAAOx2B,KACPw2B,EAAO7K,eACP6K,EAAOryB,QACPqyB,EAAOzyC,OACPyyC,EAAOpyB,SACPoyB,EAAO5K,QACP4K,EAAOz3B,IACPy3B,EAAO94B,SACP84B,EAAOS,sBAIXL,GAAkB,OAEnB,CAGH,MAAMiB,EAAevoD,KAAKu8C,QAAQ/xB,GAE9B+9B,EAAa73B,OAASw2B,EAAOx2B,OAC7B63B,EAAa73B,KAAOw2B,EAAOx2B,KAC3B1wB,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,iBAA6BxD,EAAM08B,EAAOx2B,OAI9C63B,EAAaX,cAAgBV,EAAOU,cACpCW,EAAaX,YAAcV,EAAOU,aAIlCW,EAAajM,UAAY4K,EAAO5K,UAChCiM,EAAajM,QAAU4K,EAAO5K,QAC9Bt8C,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,4BACAxD,EACA08B,EAAO5K,UAGX4K,EAAOW,UAePU,EAAaV,SAAU,EACvB7nD,KAAKsoD,WAAW99B,EAAM08B,EAAO94B,WAI7B84B,EAAOvyB,cACP4zB,EAAa5zB,YAAcuyB,EAAOvyB,aAIlC4zB,EAAa9zC,SAAWyyC,EAAOzyC,SAC/B6yC,GAAkB,EAClBiB,EAAa9zC,OAASyyC,EAAOzyC,QAG7B8zC,EAAanjD,UAAY8hD,EAAO9hD,UAChCmiD,GAAmB,EACnBgB,EAAanjD,QAAU8hD,EAAO9hD,SAG7B+9B,KAAQolB,EAAan6B,SAAU84B,EAAO94B,YACvCm6B,EAAan6B,SAAW84B,EAAO94B,SAC/BpuB,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,6BAAyCxD,EAAM08B,EAAO94B,UAErF,CAIA,IAAK,IAAIroB,EAAI,EAAGA,EAAIu9C,EAAM5/C,OAAQqC,IAAK,CACnC,MAAMgqB,EAAOuzB,EAAMv9C,GAEnB,OAAQgqB,EAAKE,SACb,IAAK,OACD,IAAKi3B,EAAOW,QAAS,CACjB,MAAMlzB,EACA30B,KAAK8nB,KAAKjoB,QAAQ2oD,YACdj6B,GAAAA,QAAAA,mBAA2B/D,GAC3B08B,EAAO31B,KAEjBvxB,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,qBACAxD,EACAmK,EACR,CACA,MACJ,IAAK,qBACGuyB,EAAOW,UAAY7nD,KAAK4kD,oBACxB5kD,KAAK4kD,mBAAoB,EACzB5kD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,cAE3B,MACJ,IAAK,wBACD,GAAIk5B,EAAOW,QAAS,CAChB,MAAMj5C,EAAa,CAAC,EAEpB,IAAK,IAAIy6B,EAAI,EAAGA,EAAItZ,EAAKic,SAAStoC,OAAQ2lC,IAAK,CAC3C,MAAM,WAAEnmC,GAAe6sB,EAAKic,SAAS3C,GAEjCnmC,GAAcA,EAAWwE,MACzBkH,EAAW1L,EAAWwE,KAAOxE,EAAWyE,MAEhD,CAEA3H,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,8BAA0Cpf,QAIjB,IAArC5O,KAAKyoD,8BACZzoD,KAAKyoD,4BAA0E,SAA5C75C,EAAW,6BAC9CnF,GAAOE,KAAM,yCAAwC3J,KAAK0oD,gCAElE,CACA,MACJ,IAAK,uBAAwB,CACzB,MAAM,WAAExlD,GAAe6sB,EAEvB,IAAK7sB,EACD,MAGJ,MAAM,OAAEuR,GAAWvR,EAEfuR,GAAUA,IAAWzU,KAAKwlD,sBAC1BxlD,KAAKwlD,oBAAsB/wC,EAC3BzU,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,6BACAvZ,IAKR,KACJ,CACA,IAAK,eAAgB,CACjB,MAAMk0C,EAAM54B,EAAK7sB,WAEjB,IAAKylD,EACD,MAEJ3oD,KAAKolD,YAAcuD,EAAIC,OAAS,KAChC5oD,KAAKqlD,SAAWsD,EAAIE,KAAO,KAC3B7oD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,sBACvB,KACJ,CACA,QACIhuB,KAAK8oD,YAAY/4B,EAAMvF,GAE/B,CAGI88B,GACAtnD,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,gBACAxD,EACA08B,EAAOzyC,QAGX8yC,GACA99C,GAAOE,KAAM,wBAAuB8lB,MAAQy3B,EAAO9hD,UAE3D,CAQAijD,iBAAiBt4B,GACb,MAAM3B,EAAW,IAAIxgB,IAErB,IAAK,IAAIy7B,EAAI,EAAGA,EAAItZ,EAAKic,SAAStoC,OAAQ2lC,IAAK,CAC3C,MAAM,WAAEnmC,GAAe6sB,EAAKic,SAAS3C,GAEjCnmC,GAAcA,EAAW6lD,KACzB36B,EAAStZ,IAAI5R,EAAW6lD,IAEhC,CAEA,OAAO36B,CACX,CAOAk6B,WAAW99B,EAAM4D,GACbpuB,KAAK2kD,YAAcn6B,EACnBxqB,KAAKgpD,cAAgB56B,CACzB,CAMA0B,+BAA+BrG,GAC3BzpB,KAAKslD,4BAA8B77B,CACvC,CAMAi/B,6BACI,OAAO1oD,KAAKyoD,2BAChB,CAOAK,YAAY/4B,EAAMvF,GAGd,IACI,IAAIy+B,EAAcjpD,KAAKwkD,aAAaz0B,EAAKE,SAErCF,EAAKE,QAAQgjB,WAAW,wBACxBgW,EAAc,CAAEjpD,KAAKslD,8BAGrB2D,GACAA,EAAY76C,SAAQC,IAChBA,EAAQ0hB,EAAMxB,GAAAA,QAAAA,mBAA2B/D,GAAOA,EAAK,GAGjE,CAAE,MAAOhb,GACLgD,KAAAA,iBAAsChD,GACtC/F,GAAO7J,MAAO,oBAAmBmwB,EAAKE,gBAAiBzgB,EAC3D,CACJ,CAOAy1B,YAAY1kC,EAAS2oD,GACjB,MAAMn5C,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAIvxC,KAAKyyB,QACxBrvB,KAAM,cAKU,SAAhB8lD,EACAn5C,EAAI04B,EAAEygB,EAAa,CAAC,EAAG3oD,GAEvBwP,EAAI04B,EAAEygB,EAAa,CAAE1c,MAAO,4BAA8BjsC,GAG9DP,KAAKirC,WAAWmL,KAAKrmC,GACrB/P,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,qBAAiCztB,EAC5D,CASAk7C,mBAAmB51B,EAAItlB,EAAS2oD,GAC5B,MAAMn5C,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAK,GAAEvxC,KAAKyyB,WAAW5M,IACtCziB,KAAM,SAKU,SAAhB8lD,EACAn5C,EAAI04B,EAAEygB,EAAa3oD,GAAS43C,KAE5BpoC,EAAI04B,EAAEygB,EAAa,CAAE1c,MAAO,4BAA8BjsC,GACrD43C,KAGTn4C,KAAKirC,WAAWmL,KAAKrmC,GACrB/P,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,6BAAyCztB,EACjD,CAOA4oD,WAAW1P,GACP,MAAM1pC,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAIvxC,KAAKyyB,QACxBrvB,KAAM,cAEV2M,EAAI04B,EAAE,UAAWgR,GACjBz5C,KAAKirC,WAAWmL,KAAKrmC,EACzB,CAOAq5C,sBAAsBnS,EAAMzsB,GAExB,GAAIkgB,KAAEuM,GAAMhjB,KAAK,8CAA8CvwB,OAC3D,OAAO,EAIX,MAAM2lD,EAAgB3e,KAAEuM,GAAMhjB,KAAK,2DAEnC,GAAIo1B,EAAc3lD,OAAQ,CACtB,IAAIgR,EACJ,MAAM40C,EACA5e,KAAEuM,GAAMhjB,KACN,kEAUR,OAPIq1B,EAAa5lD,SACbgR,EAAS40C,EAAajI,QAG1BrhD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,cAA0BtZ,EAAQ20C,EAAc3I,KAAK,QAC5E1gD,KAAKirC,WAAWI,KAAK2a,QAAQhmD,KAAKyyB,UAE3B,CACX,CAGA,MAAMkqB,EACAjS,KAAEuM,GACChjB,KACG,sEAEHvwB,OACH6lD,EACA7e,KAAEuM,GACChjB,KACG,sEAEHvwB,OACH8lD,EAAcnoD,OAAO8G,KAAKnI,KAAKu8C,SAC/BoL,EAAuBjd,KAAEuM,GAAMhjB,KAAK,eAAevwB,OAEzD,GAAI6lD,EAAQ,CACR,MAAME,EACA/e,KAAEuM,GACHhjB,KAAK,8DACV,IAAIy1B,EAMAh1C,EAJA+0C,EAAY/lD,SACZgmD,EAAYD,EAAY/I,KAAK,SAIjC,MAAM4I,EACA5e,KAAEuM,GAAMhjB,KACV,+DAGAq1B,EAAa5lD,SACbgR,EAAS40C,EAAajI,QAM1BrhD,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,OACA2uB,EACA+M,EACAn7B,GAAAA,QAAAA,mBAA2B/D,GAC3B9V,EACAizC,EACR,CAEA,GAAIhL,EAIA6M,EAAYp7C,SAAQqhB,IAChB,MAAMy3B,EAASlnD,KAAKu8C,QAAQ9sB,UAErBzvB,KAAKu8C,QAAQ9sB,UACbzvB,KAAKmlD,cAAc11B,GACrBy3B,EAAOW,SACR7nD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,gBAA4ByB,EACvD,IAEJzvB,KAAKirC,WAAWI,KAAK2a,QAAQhmD,KAAKyyB,SAI7B82B,GACDvpD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,cAExB,CACH,MAAMs7B,EAAe5e,KAAEuM,GAAMhjB,KAAK,WAC5BizB,EAASlnD,KAAKu8C,QAAQ/xB,GAC5B,IAAI9V,EAEA40C,EAAa5lD,SACbgR,EAAS40C,EAAajI,eAGnBrhD,KAAKu8C,QAAQ/xB,UACbxqB,KAAKmlD,cAAc36B,GAG1BxqB,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,gBAA4BxD,EAAM9V,GACrDwyC,SAAAA,EAAQW,UACRp+C,GAAOE,KAAK,gDACZ3J,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,YAE/B,CACJ,CAOA27B,UAAU55C,EAAKya,GACX,MAAMpnB,EAAO2M,EAAI+6B,aAAa,QAE9B,GAAa,UAAT1nC,EAAkB,CAClB,MAAMwmD,EAAmBlf,KAAE36B,GAAKkkB,KAAK,wBAAwBotB,OAE7D,GAAIuI,EAAiBlmD,OAGjB,OAFA1D,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,wBAAoC47B,IAEpD,EAEX,MAAM1H,EAAWxX,KAAE36B,GAAKkkB,KAAK,eAAeotB,OAI5C,OAFArhD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,oBAAgCk0B,IAEhD,CACX,CAEA,MAAM9wB,EAAMsZ,KAAE36B,GAAKkkB,KAAK,SAASotB,OAC3B5H,EAAU/O,KAAE36B,GAAKkkB,KAAK,YAE5B,GAAIwlB,EAAQ/1C,OAAQ,CAChB,MAAMmmD,EAAcpQ,EAAQ4H,QAExBwI,GAA+B,KAAhBA,KACf7pD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,gBAA4B67B,GACnDpgD,GAAOwG,IAAK,yBAAwB45C,KAE5C,CAGA,IAAIC,EAAQpf,KAAE36B,GAAKkkB,KAAK,UAAUysB,KAAK,SAEvC,IAAKoJ,IAEDA,EAAQpf,KAAE36B,GAAKkkB,KAAK,6BAA6BysB,KAAK,SAElDoJ,GAAO,CAEP,MAAMC,EACAD,EAAM3kD,MAAM,2CAElB2kD,EAAS,GAAEC,EAAU,MAAMA,EAAU,MAAMA,EAAU,KACzD,CAGJ,GAAIv/B,IAASxqB,KAAKyyB,QAAS,CACvB,IAAIu3B,EAEJ,GAAItf,KAAE36B,GAAKkkB,KAAK,sEAAsEvwB,OAClF1D,KAAKimD,qBACF,IAAK+D,EAAStf,KAAE36B,GAAKkkB,KAAK,4DAClB+1B,EAAOtmD,OAAQ,CAC1B,MAAMumD,EAAiBvf,KAAE36B,GAAKkkB,KAAK,4DACnC,IAAIowB,EAEA4F,GAAkBA,EAAevmD,SACjC2gD,EAAW4F,EAAe5I,QAG9BrhD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,wBACnBxD,EAAMw/B,EAAOtJ,KAAK,QAAStvB,EAAKizB,EACxC,CACJ,CAEA,MAAM6F,EAAcxf,KAAE36B,GAAKkkB,KAAK,iBAAiBotB,OAEjD,GAAI6I,EAAa,CACb,MAAMC,EAAanqD,KAAK8nB,KAAKsiC,sBAAsBF,GAKnD,GAAIC,QAAwB7pD,IAAVwpD,EAId,YAHA9pD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,sBACnBxD,EAAM2/B,EAIlB,CAEA,GAAI/4B,EACA,GAAa,SAAThuB,EACApD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,yBACfxD,EAAM4G,EAAKpxB,KAAKm6C,UAAW2P,QAChC,GAAa,cAAT1mD,EAAsB,CAC7B,MAAMinD,EAAS3f,KAAE36B,GAAKkkB,KAAK,SAC3B,IAAI1C,EAEA84B,EAAO3mD,OAAS,IAChB6tB,EAAO84B,EAAOhJ,QAMlBrhD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,iBACnBxD,EAAM4G,EAAKpxB,KAAKm6C,UAAW2P,EAAOv4B,EAAMrnB,QAAQqnB,GACxD,CAER,CAOA+4B,gBAAgBrT,EAAMzsB,GAClB,GAAIkgB,KAAEuM,GACGhjB,KACG,mFAGHvwB,OACL+F,GAAOwG,IAAI,uBAAwBua,GACnCxqB,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,wBACpB,GAAI0c,KAAEuM,GACJhjB,KACG,kFAGHvwB,OACY6qB,GAAAA,QAAAA,iBAAyB0oB,EAAKnM,aAAa,SAE3C9qC,KAAK8nB,KAAKjoB,QAAQw/C,MAAM+C,gBAKrCpiD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,kBAGvBvkB,GAAON,KAAK,eAAgB8tC,GAC5Bj3C,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,sCAEL,GAAI0c,KAAEuM,GAAMhjB,KAAK,8BAA8BvwB,OAClD+F,GAAON,KAAK,oDACR8tC,GACJj3C,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,2BACpB,GAAI0c,KAAEuM,GACRhjB,KACG,0FAEkDvwB,OAAQ,CAG9D,MAAM6mD,EAAgB7f,KAAEuM,GAAMhjB,KAAK,iCACnC,IAAIknB,EAEJ,GAAIoP,EAAc7mD,OACdy3C,EAAeoP,EAAclJ,WAC1B,CAGH,MAAMmJ,EAAmB9f,KAAEuM,GAAMhjB,KAAK,cAElCu2B,EAAiB9mD,SACjBy3C,EAAeqP,EAAiBnJ,OAExC,CAEArhD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,gCAA4CmtB,EACvE,MACI1xC,GAAON,KAAK,eAAgB8tC,GAC5Bj3C,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,mBAE/B,CAOAy8B,eAAeh7B,EAAKm4B,GAChB,MAAM8C,GAAUpZ,EAAAA,GAAAA,KAAI,CAChBC,GAAIvxC,KAAKyyB,QACTrvB,KAAM,QAETqlC,EAAE,QAAS,CAAE+D,MAAO,yCACpB/D,EAAE,OAAQ,CACPmf,cACAn4B,IAAKlB,GAAAA,QAAAA,kBAA0BkB,KAElCgZ,EAAE,UAAUpjB,EAAG,yCAAwCuiC,OACvDzP,KAAKA,KAAKA,KAEXn4C,KAAKirC,WAAWkL,OACZuU,GACA1qC,GAAUvW,GAAOwG,IAAI,4CAA6Cwf,EAAK,KAAMm4B,EAAa5nC,KAC1FpgB,GAAS6J,GAAOwG,IAAI,yCAA0CrQ,IACtE,CAOAk9C,KAAKrtB,GAAuC,IAAlC/a,EAAMjR,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,wBACf,MAAMknD,GAASrZ,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAKyyB,QAC1BrvB,KAAM,QACLqlC,EAAE,QAAS,CAAE+D,MAAO,yCACpB/D,EAAE,OAAQ,CAAElX,KAAMhD,GAAAA,QAAAA,mBAA2BkB,GAC1CiB,KAAM,SACT+X,EAAE,UAAUpjB,EAAE3Q,GAAQyjC,KAAKA,KAAKA,KAErCn4C,KAAKirC,WAAWkL,OACZwU,GACA3qC,GAAUvW,GAAOwG,IAAI,8BAA+Bwf,EAAKzP,KACzDpgB,GAAS6J,GAAOwG,IAAI,2BAA4BrQ,IACxD,CAWAgrD,SAASljD,EAAKmjD,EAAWC,EAASC,GAE9B/qD,KAAKirC,WAAWkL,QACZ7E,EAAAA,GAAAA,KAAI,CACAC,GAAIvxC,KAAKyyB,QACTrvB,KAAM,QAELqlC,EAAE,QAAS,CAAE+D,MAAO,0CACzBjC,IACI,GAAIG,KAAEH,GACGtW,KACG,0EAEHvwB,OAAQ,CACb,MAAMsnD,GACA1Z,EAAAA,GAAAA,KAAI,CACFC,GAAIvxC,KAAKyyB,QACTrvB,KAAM,QAELqlC,EAAE,QAAS,CACR+D,MAAO,yCAGnBwe,EAAWviB,EAAE,IAAK,CACd+D,MAAO,gBACPppC,KAAM,WAEV4nD,EACKviB,EAAE,QAAS,CAAE,IAAO,cACpBA,EAAE,SACFpjB,EAAE,6CACF8yB,KACAA,KACL6S,EACKviB,EAAE,QAAS,CAAE,IAAO,8BACpBA,EAAE,SACFpjB,EAAE3d,GACFywC,KACAA,KACL6S,EACKviB,EAAE,QACE,CAAE,IAAO,yCACbA,EAAE,SACFpjB,EAAU,OAAR3d,GAA+B,IAAfA,EAAIhE,OAAe,IAAM,KAC3Cy0C,KACAA,KAGDn4C,KAAKw7C,oBACLwP,EACKviB,EAAE,QAAS,CAAE,IAAO,+BACpBA,EAAE,SACFpjB,EAAE,QACF8yB,KACAA,KAKT6S,EACKviB,EAAE,QAAS,CAAE,IAAO,yBACpBA,EAAE,SACFpjB,EAAE,UACF8yB,KACAA,KAELn4C,KAAKirC,WAAWkL,OACZ6U,GACA,KAIIhrD,KAAKqkD,SAAW38C,EAChBmjD,GAAW,GAEfC,EACR,MACIC,GACJ,GAEJD,EACR,CAWAzP,eAAejnB,EAASy2B,EAAWC,GAC3B12B,GAAW/yB,OAAOkP,OAAOvQ,KAAKu8C,SAAStkC,QAAOoU,IAAMA,EAAEw7B,UAASnkD,QAI/DrC,OAAOkP,OAAOvQ,KAAKu8C,SAASnuC,SAAQie,IAC5BA,EAAEoD,MAAQm0B,GAAqB7T,SAAS1jB,EAAEu7B,cAC1C5nD,KAAK8nB,KAAKmjB,WAAWkL,QACjB7E,EAAAA,GAAAA,KAAI,CACAC,GAAIvxC,KAAKyyB,QACTrvB,KAAM,QACTqlC,EAAE,QAAS,CACR+D,MAAO,yCACV/D,EAAE,OAAQ,CACP,YAAe,SACf,IAAOla,GAAAA,QAAAA,kBAA0BlC,EAAEoD,OACpC0oB,KAAKA,KAChB,IAIR,MAAM34B,EAAgBsrC,GAAoB,SAE1C9qD,KAAK8nB,KAAKmjB,WAAWkL,QACjB7E,EAAAA,GAAAA,KAAI,CACAC,GAAIvxC,KAAKyyB,QACTrvB,KAAM,QACPqlC,EAAE,QAAS,CAAE+D,MAAO,0CACvBjC,IACI,GAAIG,KAAEH,GAAKtW,KAAK,2EAA2EvwB,OAAQ,CAC/F,MAAMunD,GACA3Z,EAAAA,GAAAA,KAAI,CACFC,GAAIvxC,KAAKyyB,QACTrvB,KAAM,QACPqlC,EAAE,QAAS,CAAE+D,MAAO,yCAE3Bye,EAAaxiB,EAAE,IAAK,CAChB+D,MAAO,gBACPppC,KAAM,WAEV6nD,EACKxiB,EAAE,QAAS,CAAE,IAAO,cACpBA,EAAE,SACFpjB,EAAE,6CACF8yB,KACAA,KACL8S,EACKxiB,EAAE,QAAS,CAAE,IAAO,+BACpBA,EAAE,SACFpjB,EAAE+O,EAAU,OAAS,SACrB+jB,KACAA,KAGDn4C,KAAKulD,QACL0F,EACKxiB,EAAE,QACC,CAAE,IAAO,yCACZA,EAAE,SACFpjB,EAAE,KACF8yB,KACAA,KAGTn4C,KAAK8nB,KAAKmjB,WAAWkL,OAAO8U,EAAcJ,EAAWrrC,EACzD,MACIA,EAAc,IAAIte,MAAM,4CAC5B,GAEJse,EACR,CAYA0rC,cAAcxjD,EAAK6I,GACf,OAAOvQ,KAAKksC,uBAAuBxkC,EAAK6I,EAC5C,CASA27B,uBAAuBxkC,EAAK6I,GACxBA,EAAO0f,QAAUvoB,EAEjB,MAAMyjD,EAAgBnrD,KAAKukD,QAAQjB,MAAMrrC,QAAO8X,GAAQroB,IAAQqoB,EAAKE,UAGrE,QAA6B,IAAzBk7B,EAAcznD,QAAgBy/B,KAAQgoB,EAAc,GAAI56C,KAI5DvQ,KAAK+rC,mBAAmBrkC,GACxB1H,KAAKukD,QAAQjB,MAAMh0C,KAAKiB,GACxBvQ,KAAK2lD,mBAAqB7pC,KAAKC,MAExB,GACX,CAQAqvC,gBAAgB1jD,GACZ,OAAO1H,KAAKukD,QAAQjB,MAAMrvB,MAAKlE,GAAQroB,IAAQqoB,EAAKE,SACxD,CAMA8b,mBAAmBrkC,GACf,MAAM47C,EAAQtjD,KAAKukD,QAAQjB,MAAMrrC,QAAO8X,GAAQroB,IAAQqoB,EAAKE,UAE7DjwB,KAAKukD,QAAQjB,MAAQA,EACrBtjD,KAAK2lD,mBAAqB7pC,KAAKC,KACnC,CAOA4V,oBAAoB5xB,EAAMsO,GACtB,GAAuB,mBAAZA,EACP,MAAM,IAAInN,MAAM,+BAEpB,IAAI+nD,EAAcjpD,KAAKwkD,aAAazkD,GAE/BkpD,IACDjpD,KAAKwkD,aAAazkD,GAAQkpD,EAAc,KAEN,IAAlCA,EAAYroD,QAAQyN,GACpB46C,EAAY35C,KAAKjB,GAEjB5E,GAAON,KACF,sDAAqDpJ,IAElE,CAOAsrD,uBAAuBtrD,EAAMsO,GACzB,MAAM46C,EAAcjpD,KAAKwkD,aAAazkD,GAChCurD,EAAarC,EAAcA,EAAYroD,QAAQyN,IAAY,GAG7C,IAAhBi9C,EACArC,EAAY15C,OAAO+7C,EAAY,GAE/B7hD,GAAON,KAAM,gBAAepJ,uBAEpC,CAUA8nD,QAAQ0D,GACJ,MAAMrE,EAASlnD,KAAKu8C,QAAQgP,GAE5B,OAAIrE,EACOA,EAAOW,QAGX,IACX,CAKAj3B,cACI,MAAqB,cAAd5wB,KAAK0wB,IAChB,CAMA86B,YAAYna,GACR,MAAMoa,EAAW/gB,KAAE2G,GAAIpd,KAAK,qCACtBqY,EAAW5B,KAAE2G,GAAIpd,KAAK,sBAExBw3B,EAAS/nD,QAAU4oC,EAAS5oC,QACwB,SAAjDgoD,OAAOpf,EAASoU,KAAK,UAAUsH,gBAClCv+C,GAAON,KAAK,iCAEZnJ,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,gBAAuB1tB,EAAWmrD,EAAS/K,KAAK,YAAapU,EAASoU,KAAK,aAEvF,CAYAiL,qBAAqBC,EAAY9nD,GAE7B,MAAMmzC,EAAOj3C,KAAKmlD,cAAe,GAAEnlD,KAAKyyB,WAAWm5B,KAEnD,IAAK3U,EAED,OAAO,KAEX,MAAM7lC,EAAO,CACTua,OAAO,EACPqH,UAAWlvB,IAAcuY,GAAUwK,MAAQoM,GAAU,UAAVA,YAAmB3yB,GAElE,IAAIurD,EAAY,KAEhB,GAAI/nD,IAAcuY,GAAUkL,MACxBskC,EAAYnI,GAA2BzM,EAAM,kBAC1C,IAAInzC,IAAcuY,GAAUwK,MAc/B,OAFApd,GAAO7J,MAAO,2BAA0BkE,KAEjC,KAd+B,CACtC+nD,EAAYnI,GAA2BzM,EAAM,cAC7C,MAAM6U,EAAgBpI,GAA2BzM,EAAM,+BACjD8U,EAAgBrI,GAA2BzM,EAAM,aAEnD8U,EAAcroD,OAAS,IACvB0N,EAAK4hB,UAAY+4B,EAAc,GAAGpkD,OAElCmkD,EAAcpoD,OAAS,IACvB0N,EAAK46C,UAAYF,EAAc,GAAGnkD,MAE1C,CAIA,CAMA,OAJIkkD,EAAUnoD,OAAS,IACnB0N,EAAKua,MAA+B,SAAvBkgC,EAAU,GAAGlkD,OAGvByJ,CACX,CAMA66C,cAAcC,GACV,OAAIlsD,KAAKu8C,QAAQ2P,GACNlsD,KAAKu8C,QAAQ2P,GAASx7B,KAG1B,IACX,CAOAy7B,gBAAgBC,GACZ,OAAOpsD,KAAKmlD,cAAe,GAAEnlD,KAAKyyB,WAAW25B,IACjD,CAMAC,KAAK70C,GACD,OAAOxX,KAAKirC,WAAWqhB,KAAKD,KAAK70C,EAAQ,aACrC+W,GAAAA,QAAAA,kBAA0BvuB,KAAKm6C,WAAYn6C,KAAKqkD,SAChDrkD,KAAK2kD,YACb,CAKA4H,SACI,OAAOvsD,KAAKirC,WAAWqhB,KAAKC,QAChC,CAMAC,WACI,OAAOxsD,KAAK8kD,KAChB,CAKA2H,kBACI,OAAOzsD,KAAK+kD,YAChB,CAKAvI,mBACI,OAAOx8C,KAAKglD,aAChB,CAKA0H,qBACI,OAAO1sD,KAAKilD,YAChB,CAKA0H,iBACI,OAAO3sD,KAAKolD,WAChB,CAKAwH,cACI,OAAO5sD,KAAKqlD,QAChB,CAOAwH,eACI,OAAO7sD,KAAK2mD,SAChB,CAQAmG,gBAAgBr9B,EAAK9a,EAAM7Q,GACvB2F,GAAOE,KAAK,WAAYgL,EAAM8a,GAC9B,MAAMs9B,GAAYzb,EAAAA,GAAAA,KACd,CAAEC,GAAIvxC,KAAK2kD,YACPvhD,KAAM,QACTqlC,EAAE,OAAQ,CACP+D,MAAQ,4BAA2B1oC,IACnC2rB,QAEHpK,EAAE1Q,EAAK06B,YACP8I,KAELn4C,KAAKirC,WAAWkL,OACZ4W,GACA/sC,GAAUvW,GAAOwG,IAAI,WAAY+P,KACjCpgB,GAAS6J,GAAOwG,IAAI,iBAAkBrQ,IAC9C,CAMAotD,OAAO3b,GAGH,GAFaA,EAAGvG,aAAa,UAEhB9qC,KAAK2kD,YAGd,YAFAl7C,GAAON,KAAK,oCAIhB,MAAMwL,EAAO+1B,KAAE2G,GAAIpd,KAAK,QAEpBtf,EAAKjR,QAA0B,SAAhBiR,EAAK0sC,OACpBrhD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,qBAAiCrZ,EAAK+rC,KAAK,UAKlEj3C,GAAON,KAAK,qFAGpB,CAMA8jD,YAAY5b,GAGR,GAFaA,EAAGvG,aAAa,UAEhB9qC,KAAK2kD,YAGd,YAFAl7C,GAAON,KAAK,oCAIhB,MAAMwL,EAAO+1B,KAAE2G,GAAIpd,KAAK,QAEpBtf,EAAKjR,QAA0B,SAAhBiR,EAAK0sC,OACpBrhD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,qBAAiCrZ,EAAK+rC,KAAK,UAKlEj3C,GAAON,KAAK,qFAGpB,CAKAuzC,QACI18C,KAAKykD,qBAAqBr2C,SAAQg6C,GAAUA,MAC5CpoD,KAAKykD,qBAAuB,GAE5BzkD,KAAK87C,QAAS,EACd97C,KAAK0kD,mBAAoB,CAC7B,CAQAp1B,MAAM5a,GAAQ,IAAAw4C,EAAAh0B,EAAA,KACVl5B,KAAK+kD,aAAa72C,UAClBlO,KAAKglD,cAAc92C,UACnBlO,KAAKilD,aAAa/2C,UAElB,MAAMmxB,EAAW,GAkCjB,OAhCU,QAAV6tB,EAAAltD,KAAK8kD,aAAK,IAAAoI,OAAA,EAAVA,EAAY3R,YAAalc,EAAS/vB,KAAKtP,KAAK8kD,MAAMx1B,SAElD+P,EAAS/vB,KAAK,IAAI+E,SAAQ,CAACC,EAASC,KAChC,IAAI63B,GAAW,EAEf,MAAM+gB,EAAY,WAAsB,IAArBC,EAAQ3pD,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GACvBy1B,EAAKze,aAAamP,eAAeoE,GAAW,WAAXA,SAAqBm/B,GACtD9zB,aAAa+S,GACTghB,GAEAl0B,EAAK+R,WAAWI,KAAK2a,QAAQ9sB,EAAKzG,SAClCle,EAAO,IAAIrT,MAAM,sEAEjBoT,GAER,EAEItU,KAAK87C,QACL1P,EAAU3S,YAAW,IAAM0zB,GAAU,IAAO,KAE5CntD,KAAK08C,QACL18C,KAAKya,aAAaiP,GAAGsE,GAAW,WAAXA,SAAqBm/B,GAC1CntD,KAAKgmD,QAAQtxC,KAKb1U,KAAKirC,WAAWI,KAAK2a,QAAQhmD,KAAKyyB,SAClCzyB,KAAK08C,QACT,KAGGroC,QAAQorB,WAAWJ,EAC9B,CAKAguB,MACI,GAAIrtD,KAAKglD,cAAc/K,iBAGnB,YAFAxwC,GAAON,KAAK,mDAMhB,MAAM4G,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAIvxC,KAAK8nB,KAAKwlC,gCAEjCv9C,EAAI04B,EAAE,kBAAkB0P,KAExBn4C,KAAK8nB,KAAKmjB,WAAWmL,KAAKrmC,EAC9B,EC91DJ,MAAMtG,IAASC,EAAAA,EAAAA,2CAKA,MAAM6jD,WAA4Bnd,GAK7C7uC,YAAYumB,GACRlgB,QACA5H,KAAK8nB,KAAOA,EACZ9nB,KAAKmrC,MAAQ,CAAC,CAClB,CAMA7uB,KAAK2uB,GACDrjC,MAAM0U,KAAK2uB,GAGXjrC,KAAKirC,WAAWuJ,WAAWx0C,KAAKinD,WAAW72B,KAAKpwB,MAAO,KACnD,WAAY,KAAM,KAAM,KAAM,MAClCA,KAAKirC,WAAWuJ,WAAWx0C,KAAKopD,sBAAsBh5B,KAAKpwB,MACvD,KAAM,WAAY,cAAe,MACrCA,KAAKirC,WAAWuJ,WAAWx0C,KAAKsqD,gBAAgBl6B,KAAKpwB,MAAO,KACxD,WAAY,QAAS,MACzBA,KAAKirC,WAAWuJ,WAAWx0C,KAAK2pD,UAAUv5B,KAAKpwB,MAAO,KAClD,UAAW,KAAM,MACrBA,KAAKirC,WAAWuJ,WAAWx0C,KAAKgtD,OAAO58B,KAAKpwB,MACxC,iCAAkC,KAAM,MAAO,KAAM,MACzDA,KAAKirC,WAAWuJ,WAAWx0C,KAAKitD,YAAY78B,KAAKpwB,MAC7C,iCAAkC,KAAM,MAAO,KAAM,MACzDA,KAAKirC,WAAWuJ,WAAWx0C,KAAKwtD,WAAWp9B,KAAKpwB,MAC5C,iBAAkB,KAAM,MAAO,KAAM,KAC7C,CAQAi8C,WAAWxsB,EAAK40B,EAAUxkD,GACtB,MAAM+rB,EAAU2C,GAAAA,QAAAA,kBAA0BkB,GAE1C,GAAIzvB,KAAKytD,cAAc7hC,GAAU,CAC7B,MAAMgmB,EAAS,+BAGf,MADAnoC,GAAO7J,MAAMgyC,GACP,IAAI1wC,MAAM0wC,EACpB,CAMA,OALA5xC,KAAKmrC,MAAMvf,GAAW,IAAIw4B,GAASpkD,KAAKirC,WAAYxb,EAChD40B,EAAUrkD,KAAK8nB,KAAMjoB,GACzBG,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,gBAA4BhuB,KAAKmrC,MAAMvf,IAEpC5rB,KAAKmrC,MAAMvf,EACtB,CAQA6hC,cAAc7hC,GACV,OAAOA,KAAW5rB,KAAKmrC,KAC3B,CAMA6a,QAAQv2B,GACJzvB,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,kBAA8BhuB,KAAKmrC,MAAM1b,WACtCzvB,KAAKmrC,MAAM1b,EACtB,CAMAw3B,WAAWhQ,GACP,MAAMzsB,EAAOysB,EAAKnM,aAAa,QAG/B,GAAImM,EAAKnM,aAAa,QAClB,OAAO,EAGX,MAAMld,EAAO5tB,KAAKmrC,MAAM5c,GAAAA,QAAAA,kBAA0B/D,IAElD,OAAKoD,IAKD8c,KAAEuM,GAAMhjB,KAAK,sEACYvwB,QACzBkqB,EAAKg5B,yBAGTh5B,EAAKq5B,WAAWhQ,IAET,EACX,CAMAmS,sBAAsBnS,GAClB,MAAMzsB,EAAOysB,EAAKnM,aAAa,QACzBld,EAAO5tB,KAAKmrC,MAAM5c,GAAAA,QAAAA,kBAA0B/D,IAElD,OAAKoD,IAILA,EAAKw7B,sBAAsBnS,EAAMzsB,IAE1B,EACX,CAMA8/B,gBAAgBrT,GACZ,MAAMzsB,EAAOysB,EAAKnM,aAAa,QACzBld,EAAO5tB,KAAKmrC,MAAM5c,GAAAA,QAAAA,kBAA0B/D,IAElD,OAAKoD,IAILA,EAAK08B,gBAAgBrT,EAAMzsB,IAEpB,EACX,CAMAm/B,UAAU55C,GAEN,MAAMya,EAAOza,EAAI+6B,aAAa,QACxBld,EAAO5tB,KAAKmrC,MAAM5c,GAAAA,QAAAA,kBAA0B/D,IAElD,OAAKoD,IAILA,EAAK+7B,UAAU55C,EAAKya,IAEb,EACX,CAMAwiC,OAAO3b,GACH,MAAM7mB,EAAO6mB,EAAGvG,aAAa,QACvBld,EAAO5tB,KAAKmrC,MAAM5c,GAAAA,QAAAA,kBAA0B/D,IAGlD,OAAKoD,IAILA,EAAKo/B,OAAO3b,IAEL,EACX,CAMA4b,YAAY5b,GACR,MAAM7mB,EAAO6mB,EAAGvG,aAAa,QACvBld,EAAO5tB,KAAKmrC,MAAM5c,GAAAA,QAAAA,kBAA0B/D,IAGlD,OAAKoD,IAILA,EAAKq/B,YAAY5b,IAEV,EACX,CAOAmc,WAAWnc,GACP,MAAM7mB,EAAO6mB,EAAGvG,aAAa,QACvBld,EAAO5tB,KAAKmrC,MAAM5c,GAAAA,QAAAA,kBAA0B/D,IAIlD,OAFAoD,SAAAA,EAAM49B,YAAYna,IAEX,CACX,ECvNJ,MAAM5nC,IAASC,EAAAA,EAAAA,oDAQf,SAASgkD,GAAuBC,EAAOC,GACnC,MAAM79B,GAAO89B,EAAAA,GAAAA,QAAO,SAAU,CAC1BrhB,MAAO,kCACP76B,KAAMi8C,EAAkB1kB,EACxBnpC,KAAM6tD,EAAkBnlD,IAc5B,OAXImlD,EAAkBvhC,GAClB0D,EAAK0Y,EAAE,YAAa,CAChB1oC,KAAM,OACN4H,MAAOimD,EAAkBvhC,IAC1B8rB,KAEPpoB,EAAK0Y,EAAE,YAAa,CAChB+D,MAAO,2BACPmhB,UACDxV,KAEIpoB,EAAKA,IAChB,CAOA,SAAS+9B,GAA0BC,GAC/B,MAAMh+B,GAAO89B,EAAAA,GAAAA,QAAO,aAAc,CAC9BrhB,MAAO,kCACPwhB,WAwDe1kB,EAxDUykB,EAAqB,GAyDtC,MAARzkB,EACO,MACQ,MAARA,EACA,MAGJ,QAPX,IAAuBA,EArDnB,IAAK,IAAIvjC,EAAI,EAAGA,EAAIgoD,EAAqBrqD,OAAQqC,IAC7CgqB,EAAK0Y,EAAE,SAAU,CACb+D,MAAO,kCACP76B,KAAMo8C,EAAqBhoD,KAC5BoyC,KAGP,OAAOpoB,EAAKA,IAChB,CASA,SAASk+B,GAA2B5c,EAAIvtC,GACpC,MAAMoqD,EAASxjB,KAAE2G,GAAIpd,KAAK,UAAU,GACpC,IACIk6B,EADAC,EAAU1jB,KAAEwjB,GAAQj6B,KAAM,iBAAgBnwB,OAyB9C,OAtBIsqD,EAAQ1qD,OACR0qD,EAAUA,EAAQ,IAGlBA,GAAUP,EAAAA,GAAAA,QAAO,UAAW,CACxB9tD,KAAM+D,IACPisB,KACHm+B,EAAOG,YAAYD,IAGvBD,EAAczjB,KAAE0jB,GAASn6B,KAAK,eAE1Bk6B,EAAYzqD,OACZyqD,EAAcA,EAAY,IAE1BA,GAAcN,EAAAA,GAAAA,QAAO,cAAe,CAChCrhB,MAAO,6BACPiM,MAAO30C,IACRisB,KACHq+B,EAAQC,YAAYF,IAGjBA,CACX,CA8BO,SAASG,GAAsBjd,EAAIkd,GAAgB,IAAAC,EACtD,IAAIxrB,EAEJ,IACIA,EAAOr6B,KAAK24B,MAAMitB,EAAelH,YACrC,CAAE,MAAOznD,GAGL,OAFA6J,GAAO7J,MAAO,sDAAqD2uD,EAAelH,eAE3E,IACX,CAEA,GAAS,QAALmH,EAACxrB,SAAI,IAAAwrB,IAAJA,EAAMC,QAEP,OAAO,KAIX,MAAMC,EAAsBT,GAA2B5c,EAAIh1B,GAAUkL,OAC/DonC,EAAsBV,GAA2B5c,EAAIh1B,GAAUwK,OAC/D+nC,EAAU,IAAI5vC,IAEpB,IAAK,MAAM2uC,KAAS3qB,EAAKyrB,QACrB,GAAIzrB,EAAKyrB,QAAQ5uC,eAAe8tC,GAAQ,CACpC,MAAMkB,EAAQ,GACRC,EAAe9rB,EAAKyrB,QAAQd,GAI5BoB,GAAeD,aAAY,EAAZA,EAAcprD,SAAUorD,EAAa,GACpDE,GAAkBF,aAAY,EAAZA,EAAcprD,QAAS,GAAKorD,EAAa,GAC3DG,GAAeH,aAAY,EAAZA,EAAcprD,QAAS,GAAKorD,EAAa,GACxDI,GAAkBJ,aAAY,EAAZA,EAAcprD,QAAS,GAAKorD,EAAa,GAEjE,GAAIC,SAAAA,EAAcrrD,OACd,IAAK,IAAIqC,EAAI,EAAGA,EAAIgpD,EAAarrD,OAAQqC,IAAK,KAAAopD,EAC1CR,EAAoBN,YAAYX,GAAuBC,EAAOoB,EAAahpD,KAC3E8oD,EAAMv/C,KAAoB,QAAhB6/C,EAACJ,EAAahpD,UAAE,IAAAopD,OAAA,EAAfA,EAAiBjmB,EAChC,CAGJ,GAAI8lB,SAAAA,EAAiBtrD,OACjB,IAAK,IAAIqC,EAAI,EAAGA,EAAIipD,EAAgBtrD,OAAQqC,IACxC4oD,EAAoBN,YAAYP,GAA0BkB,EAAgBjpD,KAGlF,GAAIkpD,SAAAA,EAAcvrD,OACd,IAAK,IAAIqC,EAAI,EAAGA,EAAIkpD,EAAavrD,OAAQqC,IAAK,KAAAqpD,EAC1CV,EAAoBL,YAAYX,GAAuBC,EAAOsB,EAAalpD,KAC3E8oD,EAAMv/C,KAAoB,QAAhB8/C,EAACH,EAAalpD,UAAE,IAAAqpD,OAAA,EAAfA,EAAiBlmB,EAChC,CAGJ,GAAIgmB,SAAAA,EAAiBxrD,OACjB,IAAK,IAAIqC,EAAI,EAAGA,EAAImpD,EAAgBxrD,OAAQqC,IACxC2oD,EAAoBL,YAAYP,GAA0BoB,EAAgBnpD,KAGlF6oD,EAAQ9oC,IAAI6nC,EAAOkB,EACvB,CAGJ,OAAOD,CACX,2BCpLO,IAAKS,GAAc,SAAdA,GAAc,OAAdA,EAAc,oBAAdA,EAAc,oBAAdA,EAAc,oBAAdA,EAAc,oBAAdA,CAAc,MCE1B,MAAM5lD,GAASgG,EAAAA,MAAAA,2CA6Tf,GAnTuB,CAQnB6/C,aAAc,KAQdhzC,OAAmB,IAAdzc,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACZzD,KAAKH,QAAUA,EACfG,KAAKsvD,aAAetvD,KAAKuvD,4BAEpBvvD,KAAKsvD,cACN7lD,GAAOE,KAAK,2BAEpB,EASA4lD,4BACI,OAAIthD,GAAQnH,SACD,CAAC+jD,EAAW2E,KACf1mD,OAAO2mD,YAAYC,oBACf7E,GACA,CAACjrD,EAAOM,KACJ,IAAIyvD,EAmBAA,EADA/vD,GAAwB,sBAAfA,EAAMG,KACF,IAAIJ,GACbd,IAGS,IAAIc,GACbC,EAAOM,EAAa,CAAE,YAER,mBAAdsvD,GACDA,EAAUG,EAAW,GAC9B,EAEH1hD,GAAQlH,aACR/G,KAAK4vD,uBACL3hD,GAAQjH,iBAAmBiH,GAAQ9B,0BACnCnM,KAAK6vD,kCACL5hD,GAAQ9B,0BACRnM,KAAK8vD,iCAEhBrmD,GAAOwG,IAAI,mCAAoChC,GAAQzH,WAEhD,KACX,EAOAupD,uBACI,MAAM,aAAEC,GAAiBhwD,KAAKH,QAQ9B,OAPcmwD,UAAAA,EAAcC,QAAS,CACjCC,iBAAiB,EACjBC,aAAc,EACdC,kBAAkB,EAClBC,kBAAkB,EAI1B,EAOA1lD,cACI,OAA6B,OAAtB3K,KAAKsvD,YAChB,EASAM,uBAAuB/E,EAAW2E,GAAyB,IAAAt2B,EAAA,SAAdr5B,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD,GAAIqF,OAAOwnD,yBAA2BxnD,OAAOwnD,wBAAwBC,kBAAmB,CACpF,MAAM,wBAAEC,EAAuB,yBAAEC,EAAwB,sBAAEC,GAA0B1wD,KAAKH,QAE1FiJ,OAAOwnD,wBAAwBC,kBAC3B,CACIG,sBACI7wD,EAAQ6wD,uBAAyBA,GAAyB,CAAE,SAAU,YAE9E,SAACC,EAAUC,GACP,GAAID,EAAU,KAAAE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACV,IAAIC,GAAmB,EAEvB,GAJ+B5tD,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GAIT,CAClB4tD,EAAmB,CAAC,EACpB,MAAMC,EAAsBp4B,EAAK62B,uBAEE,kBAAxBuB,IACPD,EAAmB,CACfE,SAAUD,IAUC,WAAfV,IACAS,EAAiBvwD,UAAY,CACzB0wD,kBAAmB,WAG/B,CAEA,MAAMtxD,EAAc,CAChBmhB,MAAOgwC,EACP1wD,MAAO,CACHG,UAAW,CACP0wD,kBAAmB,UACnBC,oBAAqBd,EACrBe,aAA0C,QAA9Bb,EAAEL,aAAuB,EAAvBA,EAAyBriB,WAAG,IAAA0iB,EAAAA,EAhKzC,EAiKDc,aAA0C,QAA9Bb,EAAEN,aAAuB,EAAvBA,EAAyBh1C,WAAG,IAAAs1C,EAAAA,EAjKzC,EAkKD/vD,SAAU0vD,SAA+B,QAAPM,EAAxBN,EAA0B9tC,aAAK,IAAAouC,OAAP,EAAxBA,EAAiC5iB,IAC3CntC,UAAWyvD,SAAgC,QAARO,EAAxBP,EAA0B7tC,cAAM,IAAAouC,OAAR,EAAxBA,EAAkC7iB,IAC7CyjB,SAA8C,QAAtCX,EAAER,SAA+B,QAAPS,EAAxBT,EAA0B9tC,aAAK,IAAAuuC,OAAP,EAAxBA,EAAiC11C,WAAG,IAAAy1C,EAAAA,EAAInoD,OAAO+oD,OAAOlvC,MAChEmvC,UAAgD,QAAvCX,EAAEV,SAAgC,QAARW,EAAxBX,EAA0B7tC,cAAM,IAAAwuC,OAAR,EAAxBA,EAAkC51C,WAAG,IAAA21C,EAAAA,EAAIroD,OAAO+oD,OAAOjvC,UAM9E1d,UAAUmF,aAAaC,aAAapK,GAC/B6f,MAAKrT,GAAUm+C,EAAU,CACtBn+C,SACAqlD,SAAUpB,EACVqB,WAAYpB,KACZpB,EACZ,MAIIA,EAAU,IAAI7vD,GAAgBd,IAEtC,IACAqtB,GAAOsjC,EAAU,IAAI7vD,GACjBd,GACAqtB,KAGZ,MACIsjC,EAAU,IAAI7vD,GAAgBd,IAEtC,EAQAixD,gCAAgC54C,EAAUsI,GACtC,IAAIpT,EAGAA,EADAlH,UAAUkH,gBACQlH,UAAUkH,gBAAgBgkB,KAAKlrB,WAG/BA,UAAUmF,aAAa+B,gBAAgBgkB,KAAKlrB,UAAUmF,cAG5E,MAAMgX,EAAQrhB,KAAK+vD,uBACnB,IAAIpvD,EAAQ,CAAC,EACb,MAAM,wBAAE6vD,GAA4BxwD,KAAKH,QAEF,iBAA5B2wD,IACP7vD,EAAM4lB,UAAYiqC,GAKtB7vD,EAAM4lB,kBAAoB5lB,EAAM4lB,UAAU4nB,IAEtClgC,GAAQpE,oBAERoE,GAAQ5G,qBAAqB,OAAS1G,EAAMsxD,iBAAmB,YAKzDzB,aAAuB,EAAvBA,EAAyBh1C,KArON,IAsOrB7a,EAAMiiB,OAAS,MACfjiB,EAAMgiB,MAAQ,QAIY,IAA9BthB,OAAO8G,KAAKxH,GAAO+C,SACnB/C,GAAQ,GAGZ,MAAMT,EAAc,CAChBS,QACA0gB,QACA6wC,OAAQ,UAGZzoD,GAAOE,KAAK,2CAA4CzJ,GAExDkM,EAAgBlM,GACX6f,MAAKrT,IACFwK,EAAS,CACLxK,SACAqlD,SAAUrlD,EAAOmZ,IACnB,IAEL3F,OAAMtgB,IACH,MAAMuyD,EAAe,CACjBC,UAAWxyD,GAASA,EAAMG,KAC1BmiD,SAAUtiD,GAASA,EAAMW,QACzB8xD,WAAYzyD,GAASA,EAAMuB,OAG/BsI,GAAO7J,MAAM,wBAAyBM,EAAaiyD,GAE/CA,EAAajQ,WAAmE,IAAvDiQ,EAAajQ,SAASthD,QAAQ,oBAGvD4e,EAAc,IAAI7f,GAAgBd,KAKtC2gB,EAAc,IAAI7f,GAAgBd,IAA8C,GAE5F,EAQAgxD,kCAAkC34C,EAAUsI,GACxC/V,GAAOE,KAAK,4CAEZzE,UAAUmF,aAAa+B,gBAAgB,CAAEzL,OAAO,IAC3Cof,MAAKrT,IACFwK,EAAS,CACLxK,SACAqlD,SAAUrlD,EAAOmZ,IAAK,IAE7B3F,OAAM,KACHV,EAAc,IAAI7f,GAAgBd,IACA,GAE9C,EAQAyzD,2BAA2BC,GACvB9oD,GAAOE,KAAM,uCAAsC4oD,KAEnDvyD,KAAKH,QAAQ2wD,wBAA0B,CACnCriB,IAlTyB,EAmTzB3yB,IAAK+2C,EAEb,wCC9TJ,MAAM9oD,IAASC,EAAAA,EAAAA,qCAOT8oD,GAAU,CACZC,mBAAmBpR,GAIRA,EAAOA,EAAKjS,QAAQ,iBAAkB,IAAMiS,EAEvDqR,UAAUC,EAAWC,GACjB,IACIC,EAAK//B,EADL1hB,EAAO,KAeX,OAZK0hB,EAAQ0/B,GAAQM,SAASH,EAAW,eAAgBC,MAC7CC,EACEL,GAAQM,SACNH,EACA,aACAC,MACZxhD,EAAO,CACH0hB,MAAO0/B,GAAQO,cAAcjgC,GAC7B+/B,IAAKL,GAAQQ,YAAYH,KAI1BzhD,CACX,EACA2hD,cAAcE,GACHA,EAAK/iC,UAAU,IAE1BgjC,cAAcC,GACF,eAAcA,IAE1BH,YAAYC,GACDA,EAAK/iC,UAAU,IAE1BkjC,YAAYP,GACA,aAAYA,IAExBQ,SAASJ,GACEA,EAAK/iC,UAAU,GAS1BojC,mBAAmBC,GACf,MAAMC,EAAWD,EAAUt/B,MAAKg/B,GAAQA,EAAKryD,QAAQ,UAAY,IAEjE,IAAK4yD,EACD,OAGJ,MAAM9vC,EAAI8vC,EAAStjC,UAAUsjC,EAAS5yD,QAAQ,UAAY,GAE1D,OAAO4xD,GAAQC,mBAAmB/uC,EACtC,EACA+vC,WAAWR,GACP,MAAM7hD,EAAO,CAAC,EACRsiD,EAAQT,EAAK/iC,UAAU,GAAGvJ,MAAM,KAUtC,OARAvV,EAAKqnC,MAAQib,EAAM3hB,QACnB3gC,EAAK6T,KAAOyuC,EAAM3hB,QAClB3gC,EAAKuiD,MAAQD,EAAM3hB,QACa,KAA5B2hB,EAAMA,EAAMhwD,OAAS,IACrBgwD,EAAME,MAEVxiD,EAAKyiD,IAAMH,EAEJtiD,CACX,EACA0iD,WAAWC,GAEF,KAAIA,EAAMtb,SAASsb,EAAM9uC,QAAQ8uC,EAAMJ,SACpCI,EAAMF,IAAIrzD,KAAK,OAE3BwzD,YAAYf,GACR,MAAM7hD,EAAO,CAAC,EACd,IAAIsiD,EAAQT,EAAK/iC,UAAU,GAAGvJ,MAAM,KAQpC,OANAvV,EAAKyU,GAAK6tC,EAAM3hB,QAChB2hB,EAAQA,EAAM,GAAG/sC,MAAM,KACvBvV,EAAKrR,KAAO2zD,EAAM3hB,QAClB3gC,EAAK6iD,UAAYP,EAAM3hB,QACvB3gC,EAAK8iD,SAAWR,EAAMhwD,OAASgwD,EAAM3hB,QAAU,IAExC3gC,CACX,EAOA+iD,aAAalB,GACT,MAAMS,EAAQT,EAAK/iC,UAAU,IAAIvJ,MAAM,KAQvC,MAAO,CAPU+sC,EAAM,GACNA,EAAM,GAGHA,EAAMhwD,OAAS,EAAIgwD,EAAM,GAAK,KAItD,EACAU,cAAcnB,GACHA,EAAK/iC,UAAU,IAE1BmkC,YAAYxpB,GACR,IAAIooB,EACG,YAAWpoB,EAAGC,aAAa,SAASD,EAAGC,aAAa,WACnDD,EAAGC,aAAa,eAOxB,OALID,EAAGC,aAAa,aACmB,MAAhCD,EAAGC,aAAa,cACnBmoB,GAAS,IAAGpoB,EAAGC,aAAa,eAGzBmoB,CACX,EACAqB,YAAYrB,GACR,MAAM7hD,EAAO,CAAC,EACRsiD,EAAQT,EAAK/iC,UAAU,GAAGvJ,MAAM,KAStC,OAPAvV,EAAK6yC,IAAMyP,EAAM3hB,QACjB3gC,EAAK,gBAAkBsiD,EAAM3hB,QAC7B3gC,EAAK,cAAgBsiD,EAAM3hB,QACvB2hB,EAAMhwD,SACN0N,EAAK,kBAAoBsiD,EAAMlzD,KAAK,MAGjC4Q,CACX,EACAmjD,iBAAiBtB,GACb,MAAM7hD,EAAO,CAAC,EACRsiD,EAAQT,EAAK/iC,UAAU,IAAIvJ,MAAM,KAMvC,OAJAvV,EAAKq2B,KAAOisB,EAAM3hB,QAClB3gC,EAAKojD,YAAcd,EAAM3hB,QAGlB3gC,CACX,EACAqjD,UAAUxB,GACN,MAAM7hD,EAAO,GACb,IAAIsiD,EAAQT,EAAKtsC,MAAM,KAEvB+sC,EAAM3hB,QACN2hB,EAAQA,EAAMlzD,KAAK,KAAKmmB,MAAM,KAC9B,IAAK,IAAI5gB,EAAI,EAAGA,EAAI2tD,EAAMhwD,OAAQqC,IAAK,CACnC,IAAI2B,EAAMgsD,EAAM3tD,GAAG4gB,MAAM,KAAK,GAE9B,KAAOjf,EAAIhE,QAAqB,MAAXgE,EAAI,IACrBA,EAAMA,EAAIwoB,UAAU,GAExB,MAAMvoB,EAAQ+rD,EAAM3tD,GAAG4gB,MAAM,KAAK,GAE9Bjf,GAAOC,EACPyJ,EAAK9B,KAAK,CAAEvP,KAAM2H,EACdC,UACGD,GAEP0J,EAAK9B,KAAK,CAAEvP,KAAM,GACd4H,MAAOD,GAEnB,CAEA,OAAO0J,CACX,EACAsjD,kBAAkBzB,GACd,MAAM0B,EAAY,CAAC,EACbC,EAAQ3B,EAAKtsC,MAAM,KAEzBguC,EAAUE,WAAaD,EAAM,GAAG1kC,UAAU,IAC1CykC,EAAUG,UAAYF,EAAM,GAC5BD,EAAUxvC,SAAWyvC,EAAM,GAAG5M,cAC9B2M,EAAUI,SAAWH,EAAM,GAC3BD,EAAU5vC,GAAK6vC,EAAM,GACrBD,EAAU1vC,KAAO2vC,EAAM,GAGvBD,EAAUvxD,KAAOwxD,EAAM,GACvBD,EAAUK,WAAa,EACvB,IAAK,IAAIjvD,EAAI,EAAGA,EAAI6uD,EAAMlxD,OAAQqC,GAAK,EACnC,OAAQ6uD,EAAM7uD,IACd,IAAK,QACD4uD,EAAU,YAAcC,EAAM7uD,EAAI,GAClC,MACJ,IAAK,QACD4uD,EAAU,YAAcC,EAAM7uD,EAAI,GAClC,MACJ,IAAK,aACD4uD,EAAUK,WAAaJ,EAAM7uD,EAAI,GACjC,MACJ,IAAK,UACD4uD,EAAUM,QAAUL,EAAM7uD,EAAI,GAC9B,MACJ,QACI0D,GAAOgH,MACF,sCACGmkD,EAAM7uD,UAAU6uD,EAAM7uD,EAAI,OAS1C,OANA4uD,EAAUO,QAAU,IAIpBP,EAAU9uC,GAAKtK,KAAKizB,SAASa,SAAS,IAAIiP,OAAO,EAAG,IAE7CqW,CACX,EACAQ,kBAAkBC,GACd,IAAInC,EAAO,CACN,eAAcmC,EAAKP,aACpBO,EAAKN,UACLM,EAAKjwC,SACLiwC,EAAKL,SACLK,EAAKrwC,GACLqwC,EAAKnwC,KACL,MACAmwC,EAAKhyD,MACP5C,KAAK,KAGP,OADAyyD,GAAQ,IACAmC,EAAKhyD,MACb,IAAK,QACL,IAAK,QACL,IAAK,QACGgyD,EAAKC,gBAAgB,aACdD,EAAKC,gBAAgB,cAC5BpC,GAAQ,QACRA,GAAQ,IACRA,GAAQmC,EAAK,YACbnC,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQmC,EAAK,YACbnC,GAAQ,KAchB,OAVImC,EAAKC,gBAAgB,aACrBpC,GAAQ,UACRA,GAAQ,IACRA,GAAQmC,EAAKH,QACbhC,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQmC,EAAKC,gBAAgB,cAAgBD,EAAKJ,WAAa,IAExD/B,CACX,EACAqC,UAAUC,GAIN,MAAMnkD,EAAO,IAAI4N,IACXw2C,EAAQD,EAAK5uC,MAAM,QAEzB,IAAK,IAAI5gB,EAAI,EAAGA,EAAIyvD,EAAM9xD,OAAQqC,IAC9B,GAAiC,YAA7ByvD,EAAMzvD,GAAGmqB,UAAU,EAAG,GAAkB,CAExC,MAAMve,EAAO6jD,EAAMzvD,GAAG4gB,MAAM,WAAW,GAAGA,MAAM,KAAK,GAEhDvV,EAAKuT,IAAIhT,IACVP,EAAK0U,IAAInU,EAAM,IAGnBP,EAAKuT,IAAIhT,GAAMrC,KAAKkmD,EAAMzvD,GAC9B,CAGJ,OAAOqL,CACX,EAQAqkD,oBAAoBlC,GAChB,MAAMmC,EAAiBnC,EAAUt/B,MAAK0hC,GAAeA,EAAY/0D,QAAQ,UAAY,IAGrF,OAAO80D,aAAc,EAAdA,EAAgBxlC,UAAUwlC,EAAe90D,QAAQ,UAAY,EACxE,EASAg1D,mBAAmBrC,GACf,MAAMrqB,EAAI,cACJ2sB,EAAgBtC,EAAUt/B,MAAK0hC,GAAeA,EAAY/0D,QAAQsoC,GAAK,IAE7E,OAAO2sB,aAAa,EAAbA,EAAe3lC,UAAU2lC,EAAcj1D,QAAQsoC,GAAKA,GAC/D,EACA4sB,YAAY7C,GACR,MAAMS,EAAQT,EAAK3U,OAAO,IAAI33B,MAAM,KAC9BvV,EAAO,CAAC,EAMd,OAJAA,EAAK2kD,GAAKrC,EAAM3hB,QAChB3gC,EAAKhO,KAAOswD,EAAM3hB,QAClB3gC,EAAK4kD,OAAStC,EAEPtiD,CACX,EACA6kD,YAAYhD,GACR,MAAMS,EAAQT,EAAK3U,OAAO,GAAG33B,MAAM,KAC7BvV,EAAO,CAAC,EAYd,OAVAA,EAAKzJ,MAAQ+rD,EAAM3hB,SACc,IAA7B3gC,EAAKzJ,MAAM/G,QAAQ,KACnBwQ,EAAK8kD,UAAY,QAEjB9kD,EAAK8kD,UAAY9kD,EAAKzJ,MAAM22C,OAAOltC,EAAKzJ,MAAM/G,QAAQ,KAAO,GAC7DwQ,EAAKzJ,MAAQyJ,EAAKzJ,MAAM22C,OAAO,EAAGltC,EAAKzJ,MAAM/G,QAAQ,OAEzDwQ,EAAK+kD,IAAMzC,EAAM3hB,QACjB3gC,EAAK4kD,OAAStC,EAEPtiD,CACX,EACA0hD,SAASsD,EAAUC,EAAQC,GACvB,IAAId,EAAQY,EAASzvC,MAAM,QAE3B,IAAK,IAAI5gB,EAAI,EAAGA,EAAIyvD,EAAM9xD,OAAQqC,IAC9B,GAAIyvD,EAAMzvD,GAAGmqB,UAAU,EAAGmmC,EAAO3yD,UAAY2yD,EACzC,OAAOb,EAAMzvD,GAGrB,IAAKuwD,EACD,OAAO,EAIXd,EAAQc,EAAY3vC,MAAM,QAC1B,IAAK,IAAI0iB,EAAI,EAAGA,EAAImsB,EAAM9xD,OAAQ2lC,IAC9B,GAAImsB,EAAMnsB,GAAGnZ,UAAU,EAAGmmC,EAAO3yD,UAAY2yD,EACzC,OAAOb,EAAMnsB,GAIrB,OAAO,CACX,EACAktB,UAAUH,EAAUC,EAAQC,GACxB,IAAId,EAAQY,EAASzvC,MAAM,QAC3B,MAAM6vC,EAAU,GAEhB,IAAK,IAAIzwD,EAAI,EAAGA,EAAIyvD,EAAM9xD,OAAQqC,IAC1ByvD,EAAMzvD,GAAGmqB,UAAU,EAAGmmC,EAAO3yD,UAAY2yD,GACzCG,EAAQlnD,KAAKkmD,EAAMzvD,IAG3B,GAAIywD,EAAQ9yD,SAAW4yD,EACnB,OAAOE,EAIXhB,EAAQc,EAAY3vC,MAAM,QAC1B,IAAK,IAAI0iB,EAAI,EAAGA,EAAImsB,EAAM9xD,OAAQ2lC,IAC1BmsB,EAAMnsB,GAAGnZ,UAAU,EAAGmmC,EAAO3yD,UAAY2yD,GACzCG,EAAQlnD,KAAKkmD,EAAMnsB,IAI3B,OAAOmtB,CACX,EACAC,kBAAkBxD,GAKd,GAAmC,IAA/BA,EAAKryD,QAAQ,cAEbqyD,EAAQ,KAAIA,SACT,GAA8B,iBAA1BA,EAAK/iC,UAAU,EAAG,IAMzB,OALAzmB,GAAON,KACH,kEAEJM,GAAON,KAAK8pD,GAEL,KAE6B,SAApCA,EAAK/iC,UAAU+iC,EAAKvvD,OAAS,KAE7BuvD,EAAOA,EAAK/iC,UAAU,EAAG+iC,EAAKvvD,OAAS,IAE3C,MAAMixD,EAAY,CAAC,EACbC,EAAQ3B,EAAKtsC,MAAM,KAEzB,GAAiB,QAAbiuC,EAAM,GAIN,OAHAnrD,GAAON,KAAK,uCACZM,GAAON,KAAK8pD,GAEL,KAEX0B,EAAUE,WAAaD,EAAM,GAAG1kC,UAAU,IAC1CykC,EAAUG,UAAYF,EAAM,GAC5BD,EAAUxvC,SAAWyvC,EAAM,GAAG5M,cAC9B2M,EAAUI,SAAWH,EAAM,GAC3BD,EAAU5vC,GAAK6vC,EAAM,GACrBD,EAAU1vC,KAAO2vC,EAAM,GAGvBD,EAAUvxD,KAAOwxD,EAAM,GAEvBD,EAAUK,WAAa,IACvB,IAAK,IAAIjvD,EAAI,EAAGA,EAAI6uD,EAAMlxD,OAAQqC,GAAK,EACnC,OAAQ6uD,EAAM7uD,IACd,IAAK,QACD4uD,EAAU,YAAcC,EAAM7uD,EAAI,GAClC,MACJ,IAAK,QACD4uD,EAAU,YAAcC,EAAM7uD,EAAI,GAClC,MACJ,IAAK,aACD4uD,EAAUK,WAAaJ,EAAM7uD,EAAI,GACjC,MACJ,IAAK,UACD4uD,EAAUM,QAAUL,EAAM7uD,EAAI,GAC9B,MACJ,QACI0D,GAAOgH,MAAO,oBAAmBmkD,EAAM7uD,UAAU6uD,EAAM7uD,EAAI,OASnE,OANA4uD,EAAUO,QAAU,IAIpBP,EAAU9uC,GAAKtK,KAAKizB,SAASa,SAAS,IAAIiP,OAAO,EAAG,IAE7CqW,CACX,EACA+B,oBAAoBtB,GAChB,IAAInC,EAAO,eAEXA,GAAQmC,EAAKtqB,aAAa,cAC1BmoB,GAAQ,IACRA,GAAQmC,EAAKtqB,aAAa,aAC1BmoB,GAAQ,IAER,IAAI9tC,EAAWiwC,EAAKtqB,aAAa,YAmBjC,OAfI78B,GAAQtH,aAA0C,WAA3Bwe,EAAS6iC,gBAChC7iC,EAAW,OAGf8tC,GAAQ9tC,EACR8tC,GAAQ,IACRA,GAAQmC,EAAKtqB,aAAa,YAC1BmoB,GAAQ,IACRA,GAAQmC,EAAKtqB,aAAa,MAC1BmoB,GAAQ,IACRA,GAAQmC,EAAKtqB,aAAa,QAC1BmoB,GAAQ,IACRA,GAAQ,MACRA,GAAS,IAAGmC,EAAKtqB,aAAa,UAC9BmoB,GAAQ,IACAmC,EAAKtqB,aAAa,SAC1B,IAAK,QACL,IAAK,QACL,IAAK,QACGsqB,EAAKtqB,aAAa,aACXsqB,EAAKtqB,aAAa,cACzBmoB,GAAQ,QACRA,GAAQ,IACRA,GAAQmC,EAAKtqB,aAAa,YAC1BmoB,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQmC,EAAKtqB,aAAa,YAC1BmoB,GAAQ,KAchB,MAV+B,QAA3B9tC,EAAS6iC,gBACTiL,GAAQ,UACRA,GAAQ,IACRA,GAAQmC,EAAKtqB,aAAa,WAC1BmoB,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQmC,EAAKtqB,aAAa,eAAiB,IAEnC,GAAEmoB,OACd,EAOA0D,sBAAsBC,GAClB,MAAMC,EAAWD,EAAW/H,MACvBnxB,KAAIo5B,GAAYA,EAASjxC,KACzB5N,QAAO,CAACtG,EAAMurB,EAAOxkB,IAAUA,EAAM9X,QAAQ+Q,KAAUurB,IACvDx5B,OACCqzD,EACCH,EAAWI,YAAcJ,EAAWI,WAAWtzD,QAAW,EAEjE,GAAImzD,EAAW,GAAmB,IAAdE,EAEhB,OAEJ,IAAIE,EAAc,KAElB,GAAiB,IAAbJ,EACAI,EAAcL,EAAW/H,MAAM,GAAGhpC,QAC/B,GAAiB,IAAbgxC,EAAgB,CAEvB,MAAMK,EACAN,EAAWI,WAAW/iC,MACpBkwB,GAA6B,QAApBA,EAAM6J,YAEnBkJ,IACAD,EAAcC,EAASrI,MAAMloC,MAAM,KAAK,GAEhD,MAAO,GAAIkwC,GAAY,EAAG,CAEtB,MAAMM,EACAP,EAAWI,WAAW/iC,MACpBkwB,GAA6B,QAApBA,EAAM6J,YAEnBmJ,IACAF,EAAcE,EAAStI,MAAMloC,MAAM,KAAK,GAEhD,CAEA,OAAOswC,CACX,EAMAG,aAAYA,IACDC,KAAAA,UAAqB,EAAG,YAYnCC,iBAAiBC,EAAO5lD,EAAM6lD,GAC1B,IAAK,IAAIzxD,EAAI,EAAGA,EAAIwxD,EAAM1I,MAAMnrD,SAAUqC,EAAG,CACzC,MAAM0xD,EAAWF,EAAM1I,MAAM9oD,GAE7B,GAAI0xD,EAAS5xC,KAAOlU,GACb8lD,EAASC,YAAcF,EAC1B,OAAOC,EAAS9vD,KAExB,CACJ,EAUAgwD,gBAAgBC,GACLA,EACF/I,MACAloC,MAAM,KACN+W,KAAIm6B,GAAW1xD,SAAS0xD,EAAS,MAS1CC,SAAQA,CAACC,EAAK30D,IACH20D,EAAItf,MAAMxkB,MAAK5H,GAAKA,EAAEjpB,OAASA,IAO1C40D,SAASD,GACL,MAAME,EACAF,EAAIpxC,MAAM,MAAM1O,QAAOg7C,GAAQA,EAAKhgB,WAAW,kBAErD,GAAIglB,EAAWv0D,OAAS,EACpB,OAAOu0D,EAAW,GAAG3Z,OAAO,GAEpC,EASA4Z,YAAYnE,EAAOoE,GACf,IAAKpE,IAAUoE,EACX,OAGJ,MAAMC,EAAuBrE,EAAMsE,IAC9BpgD,QAAOogD,GAAOA,EAAIrrD,OAASqrD,EAAIrrD,MAAMg7C,gBAAkBmQ,EAAUnQ,gBACjEtqB,KAAI26B,GAAOA,EAAI3mC,UAEpB,GAAI0mC,EAAsB,CAGtB,MAAME,EACAvE,EAAMwE,SACPlpB,WACA1oB,MAAM,KACN+W,KAAIxJ,GAAK/tB,SAAS+tB,EAAG,MAE1B,IAAK,MAAM6hC,KAAMqC,EAAqBI,UAAW,CAC7C,MAAMC,EAAeH,EAAa13D,QAAQm1D,GAE1CuC,EAAa/oD,OAAOkpD,EAAc,GAClCH,EAAaI,QAAQ3C,EACzB,CACAhC,EAAMwE,SAAWD,EAAa93D,KAAK,IACvC,MACIiJ,GAAO7J,MAAO,0CAAyCu4D,oCAE/D,EAYAQ,WAAWpB,EAAOY,GAAgC,IAArBS,EAAWn1D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GACpC,IAAK8zD,IAAUY,EACX,OAGJ,MAAMU,EAAU,GAChB,IAAIC,EAAY,GAChB,MAAMC,EAAqBZ,EAAUnQ,gBAAkBgR,KAAAA,MAAsBJ,EAE7E,IAAK,MAAMP,KAAOd,EAAMc,IAChBA,EAAIrrD,OACDqrD,EAAIrrD,MAAMg7C,gBAAkBmQ,EAAUnQ,gBACrC+Q,EACAF,EAAQvpD,KAAK+oD,EAAI3mC,SAEjBonC,EAAUxpD,KAAK+oD,EAAI3mC,UAY/B,GANIqnC,IACAD,EAAYvB,EAAM0B,KACbhhD,QAAOihD,GAAQL,EAAQj4D,QAAQs4D,EAAKxnC,UAAY,GAAKwnC,EAAKvlC,OAAOoc,SAAS,yBAC1ErS,KAAIw7B,GAAQA,EAAKxnC,WAGtBonC,EAAUp1D,OAAS,EAAG,CAGtB,MAAMy1D,EAAUL,EAAUp7B,KAAIw7B,GAAS,OAAMA,MACvCE,EAAS7B,EAAM0B,KAAKhhD,QACtBihD,IAA0C,IAAlCC,EAAQv4D,QAAQs4D,EAAKvlC,UAEjCmlC,EAAUxpD,QAAQ8pD,EAAO17B,KAAIw7B,GAAQA,EAAKxnC,WAK1C,MAIM2nC,EAJS9B,EAAMgB,SAChBlpB,WACA1oB,MAAM,KACN+W,IAAIx3B,QACc+R,QAAO89C,IAAiC,IAA3B+C,EAAUl4D,QAAQm1D,KAE/B,IAAnBsD,EAAQ31D,QAER6zD,EAAMtyC,KAAO,EACbsyC,EAAMrB,UAAY7G,GAAeiK,SACjC/B,EAAMgB,SAAW,KAEjBhB,EAAMgB,SAAWc,EAAQ74D,KAAK,KAGlC+2D,EAAMc,IAAMd,EAAMc,IAAIpgD,QAClBihD,IAA2C,IAAnCG,EAAQz4D,QAAQs4D,EAAKxnC,WACjC6lC,EAAM0B,KAAO1B,EAAM0B,KAAKhhD,QACpBihD,IAA2C,IAAnCG,EAAQz4D,QAAQs4D,EAAKxnC,WAC7B6lC,EAAMgC,SACNhC,EAAMgC,OAAShC,EAAMgC,OAAOthD,QACxBihD,IAA2C,IAAnCG,EAAQz4D,QAAQs4D,EAAKxnC,WAEzC,CACJ,GAGJ,MC3sBe,SAAS8nC,GAAIzB,GACxB,MAAMtf,EAAQsf,EAAIpxC,MAAM,UAExB,IAAK,IAAI5gB,EAAI,EAAGrC,EAAS+0C,EAAM/0C,OAAQqC,EAAIrC,EAAQqC,IAAK,CACpD,IAAI0zD,EAAU,KAAIhhB,EAAM1yC,KAEpBA,IAAMrC,EAAS,IACf+1D,GAAU,QAEdhhB,EAAM1yC,GAAK0zD,CACf,CACA,MAAMpsC,EAAW,GAAEorB,EAAM1G,cAEzB/xC,KAAKy4C,MAAQA,EACbz4C,KAAK05D,IAAMrsC,EAAUorB,EAAMj4C,KAAK,IAChCR,KAAKqtB,QAAUA,CACnB,CCpBA,SAASssC,GAAYC,EAAQC,GAEzB,IAAKA,EACD,OAAO,EAIX,GAAID,EAAOl2D,SAAWm2D,EAAOn2D,OACzB,OAAO,EAGX,IAAK,IAAIqC,EAAI,EAAG+zD,EAAIF,EAAOl2D,OAAQqC,EAAI+zD,EAAG/zD,IAEtC,GAAI6zD,EAAO7zD,aAAc5F,OAAS05D,EAAO9zD,aAAc5F,OAEnD,IAAKy5D,EAAO7zD,GAAGg0D,OAAOF,EAAO9zD,IACzB,OAAO,OAER,GAAI6zD,EAAO7zD,KAAO8zD,EAAO9zD,GAG5B,OAAO,EAIf,OAAO,CACX,CAOe,SAASi0D,GAAUC,EAAOC,GAGrC,GAFAl6D,KAAKi6D,MAAQA,EACbj6D,KAAKk6D,SAAWA,GACXD,EACD,MAAM,IAAI/4D,MAAM,yBACb,IAAKg5D,EACR,MAAM,IAAIh5D,MAAM,2BAExB,CDbAs4D,GAAIp4D,UAAU+4D,SAAU,EAMxBX,GAAIp4D,UAAUg5D,qBAAsB,EAMpCZ,GAAIp4D,UAAUi5D,qBAAsB,EAQpCb,GAAIp4D,UAAUk5D,0BAA4B,SAASx2D,GAC/C,MAAMy2D,EAAMv6D,KAAKy4C,MAAM/0C,OACjBq0D,EAAM38B,GAAAA,MAAgBp7B,KAAK05D,KAC3B3F,EAAQyG,KAAUzC,EAAItf,MAAMxkB,MAAK5H,GAAKA,EAAEjpB,OAASU,KAGvDiwD,EAAMwG,IAAMA,EACZxG,EAAMmC,UAAY7G,GAAeoL,SAGjC1G,EAAM2G,UAAOp6D,EACbyzD,EAAMlF,WAAQvuD,EACdyzD,EAAMiD,gBAAa12D,EAEnBy3D,EAAItf,MAAQsf,EAAItf,MAAMkiB,OAAO5G,GAG7BgE,EAAI6C,OAAOxsD,SAAQ+1C,IACf,GAAmB,WAAfA,EAAM/gD,KAAmB,CACzB,MAAMy3D,EAAO1W,EAAM0W,KAAKl0C,MAAM,KAE9Bk0C,EAAKvrD,KAAKirD,GACVpW,EAAM0W,KAAOA,EAAKr6D,KAAK,IAC3B,KAEJR,KAAK05D,IAAMt+B,GAAAA,MAAgB28B,EAC/B,EAKAyB,GAAIp4D,UAAU05D,gBAAkB,WAC5B,MAAMC,EAAa,CAAC,EAEpB,IAAK,IAAIC,EAAa,EAAGA,EAAah7D,KAAKy4C,MAAM/0C,OAAQs3D,IAAc,CACnE,MAGMviB,EAAQ,CACVuiB,aACAT,IAJE/H,GAAAA,SACEA,GAAAA,SAAiBxyD,KAAKy4C,MAAMuiB,GAAa,WAI7CnM,MAAO,CAAC,EACRmI,WAAY,IAGhB+D,EAAWC,GAAcviB,EAEzB+Z,GAAAA,UAAkBxyD,KAAKy4C,MAAMuiB,GAAa,WAAW5sD,SAAQ6kD,IACzD,MAAMgI,EAAWhI,EAAK/iC,UAAU,GAAGvJ,MAAM,KAAK,GAIzC8xB,EAAMoW,MAAMoM,KACbxiB,EAAMoW,MAAMoM,GAAY,CACpBtpD,KAAMspD,EACNzF,MAAO,KAGf/c,EAAMoW,MAAMoM,GAAUzF,MAAMlmD,KAAK2jD,EAAK,IAE1CT,GAAAA,UAAkBxyD,KAAKy4C,MAAMuiB,GAAa,iBAAiB5sD,SAAQ6kD,IAC/D,MAAM54B,EAAM44B,EAAKryD,QAAQ,KACnBotD,EAAYiF,EAAK3U,OAAO,EAAGjkB,GAAKikB,OAAO,IACvCuQ,EAAQoE,EAAK3U,OAAO,GAAK0P,EAAUtqD,QAAQijB,MAAM,KAEnDkoC,EAAMnrD,QACN+0C,EAAMue,WAAW1nD,KAAK,CAClB0+C,YACAa,SAER,GAER,CAEA,OAAOkM,CACX,EAOAvB,GAAIp4D,UAAU85D,aAAe,SAASvpD,GAElC,MAAMwpD,EAASn7D,KAAK86D,kBACpB,IAAI96C,GAAS,EAWb,OATA3e,OAAO8G,KAAKgzD,GAAQ/sD,SAAQ4sD,IACpBh7C,GAGAm7C,EAAOH,GAAYnM,MAAMl9C,KACzBqO,GAAS,EACb,IAGGA,CACX,EAGAw5C,GAAIp4D,UAAUg6D,SAAW,SAAS3kB,EAAM4kB,GAEpC7I,GAAAA,UAAkBxyD,KAAKqtB,QAAS,YAAYjf,SAAQ6kD,IAChD,MAAMS,EAAQT,EAAKtsC,MAAM,KACnBqnC,EAAY0F,EAAM3hB,QAAQuM,OAAO,GAEvC7H,EAAKhO,EAAE,QAAS,CAAE+D,MAAO,kCACrBwhB,cACJ,IAAK,IAAI3kB,EAAI,EAAGA,EAAIqqB,EAAMhwD,OAAQ2lC,IAC9BoN,EAAKhO,EAAE,UAAW,CAAE1oC,KAAM2zD,EAAMrqB,KAAM8O,KAE1C1B,EAAK0B,IAAI,IAGb,IAAK,IAAIpyC,EAAI,EAAGA,EAAI/F,KAAKy4C,MAAM/0C,OAAQqC,IAAK,CACxC,MAAMguD,EAAQvB,GAAAA,WAAmBxyD,KAAKy4C,MAAM1yC,GAAG4gB,MAAM,QAAQ,IAE7D,GAAsB,UAAhBotC,EAAMtb,OACa,UAAhBsb,EAAMtb,OACU,gBAAhBsb,EAAMtb,MACX,SAGJ,IAAI9mC,EACJ,MAAM2pD,EAAY9I,GAAAA,SAAiBxyD,KAAKy4C,MAAM1yC,GAAI,WAG9C4L,IADA2pD,GACOA,EAAUprC,UAAU,GAAGvJ,MAAM,KAAK,GAK7C8vB,EAAKhO,EAAE,UAAW,CAAE8yB,QAASF,EACzBt7D,KAAMg0D,EAAMtb,QAChB,MAAM+iB,EAAWhJ,GAAAA,SAAiBxyD,KAAKy4C,MAAM1yC,GAAI,UAEjD,GAAIy1D,EAAU,CAEV,MAAMjB,EAAM/H,GAAAA,SAAiBgJ,GAE7B/kB,EAAKO,MAAM,CAAEj3C,KAAMw6D,GACvB,CAQA,GANoB,UAAhBxG,EAAMtb,OAAkD,iBAAtBz4C,KAAKy7D,cACvChlB,EAAKhO,EAAE,iBACH,CAAE+D,MAAO,iBACL7kC,MAAO3H,KAAKy7D,eAAgBtjB,KAGpB,UAAhB4b,EAAMtb,OAAqC,UAAhBsb,EAAMtb,MAAmB,CACpDhC,EAAKhO,EAAE,cACH,CAAE+D,MAAO,6BACLiM,MAAOsb,EAAMtb,QACjB9mC,GACA8kC,EAAKO,MAAM,CAAErlC,SAEjB,IAAK,IAAI03B,EAAI,EAAGA,EAAI0qB,EAAMF,IAAInwD,OAAQ2lC,IAAK,CACvC,MAAMqyB,EACAlJ,GAAAA,SACExyD,KAAKy4C,MAAM1yC,GACV,YAAWguD,EAAMF,IAAIxqB,MAE9BoN,EAAKhO,EAAE,eAAgB+pB,GAAAA,YAAoBkJ,IAI3C,MAAMC,EACAnJ,GAAAA,SACExyD,KAAKy4C,MAAM1yC,GACV,UAASguD,EAAMF,IAAIxqB,MAE5B,GAAIsyB,EAAW,CACX,MAAMC,EAAiBpJ,GAAAA,UAAkBmJ,GAGzC,IAAK,IAAI9gB,EAAI,EAAGA,EAAI+gB,EAAel4D,OAAQm3C,IACvCpE,EAAKhO,EAAE,YAAamzB,EAAe/gB,IAAI1C,IAE/C,CAGAn4C,KAAK67D,eAAe91D,EAAG0wC,EAAMsd,EAAMF,IAAIxqB,IAEvCoN,EAAK0B,IACT,CAEA,GAAIxmC,EAAM,CACN,MAAMi9C,EAAU4D,GAAAA,UAAkBxyD,KAAKy4C,MAAM1yC,IAE7C,IAAK,MAAQ+1D,EAAeC,KAAoBnN,EAAS,CACrD,MAAMnsC,EAAa+vC,GAAAA,oBAA4BuJ,GACzC/oC,EAAYw/B,GAAAA,mBAA2BuJ,GAE7CtlB,EAAKhO,EAAE,SAAU,CACb92B,KAAMmqD,EACN/7D,KAAM0iB,EACNuQ,YACAwZ,MAAO,oCAGX,MAAMkuB,EAAOlI,GAAAA,mBAA2BuJ,GAGpCrB,IACAjkB,EAAKhO,EAAE,aACPgO,EAAKO,MAAM,CAAEj3C,KAAM,SACnB02C,EAAKO,MAAM,CAAErvC,MAAO+yD,IACpBjkB,EAAK0B,MAGT1B,EAAK0B,IACT,CAIMqa,GAAAA,UAAkBxyD,KAAKy4C,MAAM1yC,GAAI,iBAExBqI,SAAQ6kD,IACnB,MAAM54B,EAAM44B,EAAKryD,QAAQ,KACnBotD,EAAYiF,EAAK3U,OAAO,EAAGjkB,GAAKikB,OAAO,IACvCuQ,EAAQoE,EAAK3U,OAAO,GAAK0P,EAAUtqD,QAAQijB,MAAM,KAEnDkoC,EAAMnrD,SACN+yC,EAAKhO,EAAE,aAAc,CAAEulB,YACnBxhB,MAAO,oCACXqiB,EAAMzgD,SAAQ86B,GAAKuN,EAAKhO,EAAE,SAAU,CAAE92B,KAAMu3B,IAAKiP,OACjD1B,EAAK0B,KACT,GAER,CAEA,MAAM6jB,EAAWxJ,GAAAA,UAAkBxyD,KAAKy4C,MAAM1yC,GAAI,UAElD,GAAIi2D,EAASt4D,QAAUuK,GAAQ/B,uBAAwB,CAGnD,MAAM+vD,EAAOD,EACRt+B,KAAIw+B,GAAWA,EAAQv1C,MAAM,KAAK,KAClC+W,KAAIy+B,GAAWA,EAAQx1C,MAAM,KAAK,KAEvCs1C,EAAK7tD,SAAQwmC,IACT6B,EAAKhO,EAAE,SAAU,CACbmM,MACApI,MAAO,oCAEXiK,EAAK0B,IAAI,IAGPqa,GAAAA,SAAiBxyD,KAAKy4C,MAAM1yC,GAAI,kBAGlC0wC,EAAKhO,EAAE,YAAa,CAChBulB,UAAW,MACXxhB,MAAO,oCAEXyvB,EAAK7tD,SAAQwmC,IACT6B,EAAKhO,EAAE,SAAU,CAAEmM,QAAOuD,IAAI,IAElC1B,EAAK0B,KAEb,CAEIqa,GAAAA,SAAiBxyD,KAAKy4C,MAAM1yC,GAAI,eAChC0wC,EAAKhO,EAAE,YAAY0P,KAIvBn4C,KAAK67D,eAAe91D,EAAG0wC,EAAM,KAG7B,MAAM2lB,EAAc5J,GAAAA,UAAkBxyD,KAAKy4C,MAAM1yC,GAAI,YAAa/F,KAAKqtB,SAEvE,IAAK,IAAIgc,EAAI,EAAGA,EAAI+yB,EAAY14D,OAAQ2lC,IAAK,CACzC,MAAMgzB,EAAS7J,GAAAA,YAAoB4J,EAAY/yB,IAS/C,GAPAoN,EAAKhO,EAAE,aAAc,CACjB+D,MAAO,wCACP2pB,IAAKkG,EAAOlG,IACZtwC,GAAIw2C,EAAO10D,QAIX00D,EAAOx8C,eAAe,aAGtB,OAAQw8C,EAAOnG,WACf,KAAK7G,GAAeiN,SAChB7lB,EAAKO,MAAM,CAAEulB,QAAS,cACtB,MACJ,KAAKlN,GAAeoL,SAChBhkB,EAAKO,MAAM,CAAEulB,QAAS,cACtB,MACJ,KAAKlN,GAAemN,SAChB/lB,EAAKO,MAAM,CAAEulB,QAAS,SACtB,MACJ,KAAKlN,GAAeiK,SAChB7iB,EAAKO,MAAM,CAAEulB,QAAS,SAM9B9lB,EAAK0B,IACT,CAEIqa,GAAAA,SAAiBxyD,KAAKy4C,MAAM1yC,GAAI,uBAAwB/F,KAAKqtB,WAC7DopB,EAAKhO,EAAE,qBAAsB,CACzB+D,MAAO,0CAEXiK,EAAK0B,MAET1B,EAAK0B,IACT,CAGAn4C,KAAKy8D,kBAAkB12D,EAAG0wC,GAE1B,MAAMpqB,EAAIrsB,KAAKy4C,MAAM1yC,GAEjBysD,GAAAA,SAAiBnmC,EAAI,KAAIgjC,GAAemN,YACxC/lB,EAAKO,MAAM,CAAEulB,QAAS,SACf/J,GAAAA,SAAiBnmC,EAAI,KAAIgjC,GAAeiN,YAC/C7lB,EAAKO,MAAM,CAAEulB,QAAS,cACf/J,GAAAA,SAAiBnmC,EAAI,KAAIgjC,GAAeoL,YAC/ChkB,EAAKO,MAAM,CAAEulB,QAAS,cACf/J,GAAAA,SAAiBnmC,EAAI,KAAIgjC,GAAeiK,aAC/C7iB,EAAKO,MAAM,CAAEulB,QAAS,SAKP,MAAfxI,EAAM9uC,MAAiButC,GAAAA,SAAiBnmC,EAAG,gBAAiBrsB,KAAKqtB,UAEjEopB,EAAKO,MAAM,CAAEulB,QAAS,aAE1B9lB,EAAK0B,IACT,CAGA,OAFA1B,EAAK0B,KAEE1B,CACX,EAEA+iB,GAAIp4D,UAAUq7D,kBAAoB,SAASzB,EAAYvkB,GACnDA,EAAKhO,EAAE,aAGP,MAAMi0B,EACAlK,GAAAA,SAAiBxyD,KAAKy4C,MAAMuiB,GAAa,eAAgBh7D,KAAKqtB,SAC9DsvC,EACAnK,GAAAA,SAAiBxyD,KAAKy4C,MAAMuiB,GAAa,aAAch7D,KAAKqtB,SAElE,GAAIqvC,EAAU,CACV,MAAME,EAAYpK,GAAAA,cAAsBkK,GAExCjmB,EAAKhO,EAAE,UAAW,CACd+D,MAAO,yCACPh1B,OAAQolD,EACRz3C,SAAU,uBAIdsxB,EAAKO,MAAM,CAAE6lB,QAAS,IACtBpmB,EAAK0B,IACT,MAAO,GAAIwkB,EAAS,CAChB,MAAMC,EAAYpK,GAAAA,aAAqBmK,GAEvClmB,EAAKhO,EAAE,UAAW,CACd+D,MAAO,yCACPh1B,OAAQolD,EAAU,GAClBz3C,SAAUy3C,EAAU,KAIpBA,EAAUl5D,OAAS,EACnB+yC,EAAKO,MAAM,CAAE6lB,QAASD,EAAU,KAEhCnmB,EAAKO,MAAM,CAAE6lB,QAAS,IAE1BpmB,EAAK0B,IACT,CAIMqa,GAAAA,UACExyD,KAAKy4C,MAAMuiB,GACX,iBACAh7D,KAAKqtB,SAEAjf,SAAQ6kD,IACjB,MAAMuB,EAAchC,GAAAA,iBAAyBS,GAE7CuB,EAAYhoB,MAAQ,8BACpBiK,EAAKhO,EAAE,eAAepjB,EAAEmvC,EAAYA,oBAC7BA,EAAYA,YAEnB,MAAMsI,EACAtK,GAAAA,SACExyD,KAAKy4C,MAAMuiB,GACX,WACAh7D,KAAKqtB,SAETyvC,IACAtI,EAAYuI,MAAQD,EAAUxe,OAAO,IAEzC7H,EAAKO,MAAMwd,GACX/d,EAAK0B,IAAI,IAEb,MAAM6kB,EAAgBxK,GAAAA,UAAkBxyD,KAAKy4C,MAAMuiB,GAAah7D,KAAKqtB,SAEjE2vC,IACAA,EAAcxwB,MAAQ,uCACtBiK,EAAKO,MAAMgmB,GAILxK,GAAAA,UACExyD,KAAKy4C,MAAMuiB,GACX,eACAh7D,KAAKqtB,SAEEjf,SAAQ6kD,IACnB,MAAM0B,EAAYnC,GAAAA,kBAA0BS,GAExCjzD,KAAKm6D,UACLxF,EAAU5vC,GAAK,WAEnB,MAAMI,EACAwvC,GAA2C,iBAAvBA,EAAUxvC,SAC1BwvC,EAAUxvC,SAAS6iC,cACnB,GAELhoD,KAAKo6D,sBACe,QAAbj1C,GAAmC,WAAbA,IAC1BnlB,KAAKq6D,qBAAoC,QAAbl1C,GAGpCsxB,EAAKhO,EAAE,YAAaksB,GAAWxc,IAAI,KAG3C1B,EAAK0B,IACT,EAGAqhB,GAAIp4D,UAAUy6D,eAAiB,SAASb,EAAYvkB,EAAMwmB,GAEhDzK,GAAAA,UACExyD,KAAKy4C,MAAMuiB,GACV,aAAYiC,KAEf7uD,SAAQ6kD,IACV,MAAMiK,EAAW1K,GAAAA,YAAoBS,GAEf,YAAlBiK,EAAS95D,MACTqzC,EAAKhO,EAAE,kBAAmB,CACtB+D,MAAO,qCACP7kC,MAAOu1D,EAASlH,OAAO,KAE3Bvf,EAAK0B,OAEL1B,EAAKhO,EAAE,UAAW,CACd+D,MAAO,qCACPppC,KAAM85D,EAAS95D,OAEf85D,EAASlH,OAAOtyD,OAAS,GACzB+yC,EAAKO,MAAM,CAAE,QAAWkmB,EAASlH,OAAO,KAE5Cvf,EAAK0B,KACT,GAER,EAEAqhB,GAAIp4D,UAAU+7D,iBAAmB,SAAS1mB,EAAMwmB,GAC5C,IAAIlF,EAAM,GACV,MAAMqF,EACA3mB,EAAKxiB,KACH,gEAsBR,OApBImpC,EAAsB15D,SACtBq0D,GAAO,uBACHqF,EAAsB1c,KAAK,SAC3BqX,GAAOqF,EAAsB1c,KAAK,SAElCqX,GAAO,IAEXA,GAAO,QAGcthB,EAAKxiB,KAAK,wDAElB0W,MAAK,CAACC,EAAGyyB,KACtBtF,GAAQ,aAAYkF,KAAeI,EAAGvyB,aAAa,UAC/CuyB,EAAGC,aAAa,aAChBvF,GAAQ,IAAGsF,EAAGvyB,aAAa,cAE/BitB,GAAO,MAAM,IAGVA,CACX,EAGAyB,GAAIp4D,UAAUm8D,WAAa,SAASrP,GAChC,MAAM7P,EAAYviC,KAAKC,MAGvB/b,KAAK05D,IACE,cAAMrb,yCAMb,MAAMuc,EACAlwB,KAAEwjB,GAAQj6B,KAAK,mDAEjB2mC,EAAOl3D,QACPk3D,EAAOjwB,MAAK,CAACtQ,EAAK8pB,KACd,MAAMqZ,EACA9yB,KAAEyZ,GACClwB,KAAK,YACLyJ,KAAI,CAACkN,EAAGwjB,IAAYA,EAAQtjB,aAAa,UACzCnmB,MAEL64C,EAAS95D,OAAS,IAClB1D,KAAK05D,KACG,WACAvV,EAAMrZ,aAAa,cACZqZ,EAAMrZ,aAAa,WAC1B0yB,EAASh9D,KAAK,WAC1B,IAIRR,KAAKqtB,QAAUrtB,KAAK05D,IACpBxL,EAAOj6B,KAAK,YAAY0W,MAAK,CAACC,EAAGwjB,KAC7B,MAAM/hC,EAAIrsB,KAAKy9D,aAAa/yB,KAAE0jB,IAE9BpuD,KAAKy4C,MAAMnpC,KAAK+c,EAAE,IAWtBrsB,KAAK05D,IAAM15D,KAAKqtB,QAAUrtB,KAAKy4C,MAAMj4C,KAAK,GAC9C,EAGAg5D,GAAIp4D,UAAUq8D,aAAe,SAASrP,GAClC,MAAMmH,EAAOnH,EAAQn6B,KAAK,gBACpBhW,EAAYmwC,EAAQn6B,KAAK,4DAC/B,IAAI8jC,EAAM,GACV,MAAM2F,EAAOz/C,EAAUgW,KACnB,4DAEEwkB,EAAQ,CAAEA,MAAO8c,EAAK7U,KAAK,SAEjCjI,KAAa,KAiEb,OAhEgC,aAA5B2V,EAAQ1N,KAAK,aAEbjI,EAAMxzB,KAAO,KAEbhH,EAAUgW,KAAK,qDAAqDvwB,OACpE+0C,EAAMkb,MAAQ+J,EAAKh6D,OAAS,gBAAkB,oBAE9C+0C,EAAMkb,MAAQ,oBAEd+J,EAAKh6D,QACLq0D,GAAQ,iBAAgBtf,EAAMxzB,4CAC9B8yC,GAAQ,eAAc2F,EAAKhd,KAAK,gBAChCqX,GAAO,kCAEPtf,EAAMob,IACA0B,EACGthC,KAAK,iBACLyJ,KAAI,CAACkN,EAAG+yB,IAAgBA,EAAY7yB,aAAa,QACjDnmB,MACTozC,GAAQ,GAAEvF,GAAAA,WAAmB/Z,UAGjCsf,GAAO,uBACF2F,EAAKh6D,SACNq0D,GAAO,+BAIP95C,EAAUva,SACNua,EAAUyiC,KAAK,WACfqX,GAAQ,GAAEvF,GAAAA,cAAsBv0C,EAAUyiC,KAAK,iBAE/CziC,EAAUyiC,KAAK,SACfqX,GAAQ,GAAEvF,GAAAA,YAAoBv0C,EAAUyiC,KAAK,eAEjDziC,EAAUgW,KAAK,qDAAqD0W,MAAK,CAACC,EAAG4pB,KACzEuD,GAAQ,iBAAgBvD,EAAY1pB,aAAa,UACjDitB,GAAQ,IAAGrtB,KAAE8pB,GAAanT,SAC1B0W,GAAO,OACHvD,EAAY8I,aAAa,WACzBvF,GAAQ,WAAUvD,EAAY1pB,aAAa,eAC/C,KAKR7sB,EAAUgW,KAAK,cACV0W,MAAK,CAACC,EAAG+pB,KACN,IAAIxvC,EAAWwvC,EAAU7pB,aAAa,YAEtC3lB,EAC0B,iBAAbA,EAAwBA,EAAS6iC,cAAgB,GAEzDhoD,KAAKo6D,sBACe,QAAbj1C,GAAmC,WAAbA,IAC1BnlB,KAAKq6D,qBAAoC,QAAbl1C,IAEzBnlB,KAAKm6D,SACZxF,EAAUiJ,aAAa,KAAM,WAGjC7F,GAAOvF,GAAAA,oBAA4BmC,GAAU,IAG7CvG,EAAQ1N,KAAK,YACrB,IAAK,YACDqX,GAAQ,KAAI1I,GAAeiN,eAC3B,MACJ,IAAK,YACDvE,GAAQ,KAAI1I,GAAeoL,eAC3B,MACJ,IAAK,OACD1C,GAAQ,KAAI1I,GAAeiK,eAC3B,MACJ,IAAK,OACDvB,GAAQ,KAAI1I,GAAemN,eAG/BzE,GAAQ,SAAQ3J,EAAQ1N,KAAK,cAMzB6U,EAAKthC,KAAK,aAAavwB,SACvBq0D,GAAO,kBAGXxC,EAAKthC,KAAK,iBAAiB0W,MAAK,CAACC,EAAG+yB,KAChC5F,GAAQ,GAAEvF,GAAAA,YAAoBmL,SAC1BjzB,KAAEizB,GAAa1pC,KAAK,cAAcvwB,SAClCq0D,GAAQ,UAAS4F,EAAY7yB,aAAa,SAC1CitB,GACOrtB,KAAEizB,GACA1pC,KAAK,cACLyJ,KAAI,CAACmgC,EAAIC,KACN,MAAM/9D,EAAO+9D,EAAUhzB,aAAa,QAEpC,OACK/qC,EAAQ,GAAEA,KAAU,IACf+9D,EAAUhzB,aAAa,QAAQ,IAE5CnmB,MACAnkB,KAAK,KACdu3D,GAAO,QAIXA,GAAO/3D,KAAKm9D,iBAAiBzyB,KAAEizB,GAAcA,EAAY7yB,aAAa,MAAM,IAIhFitB,GAAO/3D,KAAKm9D,iBAAiB5H,EAAM,KAGnCA,EACKthC,KAAK,8DACL0W,MAAK,CAACC,EAAGmzB,KACNhG,GACQ,YAAWgG,EAAOjzB,aAAa,SAC/BizB,EAAOjzB,aAAa,YAAY,IAE5CyqB,EAAKthC,KAAK,sEAAsEvwB,OAAS,IACzFq0D,GAAO,4BAIXxC,EACKthC,KAAK,wDACL0W,MAAK,CAACC,EAAGgtB,KACN,MAAM5J,EAAY4J,EAAU9sB,aAAa,aACnC+jB,EACAnkB,KAAEktB,GACC3jC,KAAK,WACLyJ,KAAI,CAACmgC,EAAI16D,IAAWA,EAAO2nC,aAAa,UACxCnmB,MAELkqC,EAAMnrD,SACNq0D,GAAQ,gBAAe/J,KAAaa,EAAMruD,KAAK,WACnD,IAIR,IAAIw9D,EAAc,GACdC,EAAiB,GAwCrB,OAtCA1I,EACKthC,KAAK,oDACL0W,MAAK,CAACC,EAAGznC,KACN,MAAMwO,EAAOxO,EAAO2nC,aAAa,QACjC,IAAIozB,GAAe,EACfC,EAAY,GAEhBzzB,KAAEvnC,GACG8wB,KAAK,cACL0W,MAAK,CAACkzB,EAAIC,KAAc,IAAAM,EACrB,MAAMr+D,EAAO+9D,EAAUhzB,aAAa,QACpC,IAAInjC,EAAQm2D,EAAUhzB,aAAa,SAEnCnjC,EAAQ6qD,GAAAA,mBAA2B7qD,GACnCw2D,GAAc,UAASxsD,KAAQ5R,IAE3B4H,GAASA,EAAMjE,SACfy6D,GAAc,IAAGx2D,KAGrBw2D,GAAa,OAEJ,QAATC,EAAIz2D,SAAK,IAAAy2D,GAALA,EAAOruB,SAAS,kBAChBmuB,GAAe,EACnB,IAGJA,EACAF,GAAeG,EAEfF,GAAkBE,CACtB,IAKRpG,GAAOkG,EAAiBD,EAEjBjG,CACX,EC5uBAiC,GAAU54D,UAAUi9D,YAAc,WAE9B,MAAMC,EAAWt+D,KAAKi6D,MAAMa,kBACtByD,EAAev+D,KAAKk6D,SAASY,kBAC7B0D,EAAW,CAAC,EAoFlB,OAlFAn9D,OAAO8G,KAAKo2D,GAAcnwD,SAAQqwD,IAC9B,MAAMC,EAAUJ,EAASG,GACnBE,EAAcJ,EAAaE,GAE5BC,IAAWC,GAQhBt9D,OAAO8G,KAAKw2D,EAAY9P,OAAOzgD,SAAQuD,MACe,IAA9CtQ,OAAO8G,KAAKu2D,EAAQ7P,OAAOjuD,QAAQ+Q,IAY5BgtD,EAAY9P,MAAMl9C,GAAM6jD,OACpBkJ,EAAQ7P,MAAMl9C,GAAM6jD,YAGcl1D,IADvBo+D,EAAQ7P,MAAMl9C,GAAM6jD,MAAMvhC,MAC5Cg/B,IAAkC,IAA1BA,EAAKryD,QAAQ,iBAEoBN,IADtBq+D,EAAY9P,MAAMl9C,GAAM6jD,MAAMvhC,MACjDg/B,IAAkC,IAA1BA,EAAKryD,QAAQ,cAfpB49D,EAASC,KACVD,EAASC,GAAkB,CACvBzD,WAAY2D,EAAY3D,WACxBT,IAAKoE,EAAYpE,IACjB1L,MAAO,CAAC,EACRmI,WAAY,KAGpBwH,EAASC,GAAgB5P,MAAMl9C,GAAQgtD,EAAY9P,MAAMl9C,GAqB7D,IAIJgtD,EAAY3H,WAAW5oD,SAAQwwD,IAG3B,IAAIC,GAAU,EAEd,IAAK,IAAI94D,EAAI,EAAGA,EAAI24D,EAAQ1H,WAAWtzD,OAAQqC,IAAK,CAChD,MAAM+4D,EAAcJ,EAAQ1H,WAAWjxD,GAEvC,GAAI64D,EAAe5Q,YAAc8Q,EAAY9Q,WACtC2L,GAAYiF,EAAe/P,MAAOiQ,EAAYjQ,OAAQ,CAEzDgQ,GAAU,EACV,KACJ,CACJ,CAEKA,IAIIL,EAASC,KACVD,EAASC,GAAkB,CACvBzD,WAAY2D,EAAY3D,WACxBT,IAAKoE,EAAYpE,IACjB1L,MAAO,CAAC,EACRmI,WAAY,KAGpBwH,EAASC,GAAgBzH,WAAW1nD,KAAKsvD,GAC7C,KAxEAJ,EAASC,GAAkBE,CAyE7B,IAGCH,CACX,EAKAxE,GAAU54D,UAAUg6D,SAAW,SAAS2D,GACpC,MAAMC,EAAgBh/D,KAAKq+D,cAE3B,IAAIY,GAAW,EA8Df,OA5DA59D,OAAO8G,KAAK62D,GAAe5wD,SAAQ4sD,IAC/BiE,GAAW,EACX,MAAMxmB,EAAQumB,EAAchE,GAE5B+D,EAAOt2B,EAAE,UAAW,CAAE1oC,KAAM04C,EAAM8hB,MAElCwE,EAAOt2B,EAAE,cACL,CAAE+D,MAAO,6BACLiM,MAAOA,EAAM8hB,MAKrBl5D,OAAO8G,KAAKswC,EAAMoW,OAAOzgD,SAAQ8wD,IAC7B,MAAMC,EAAY1mB,EAAMoW,MAAMqQ,GACxB3L,EAAY4L,EAAU3J,MACtB/yC,EAAa+vC,GAAAA,oBAA4Be,GACzCvgC,EAAYw/B,GAAAA,mBAA2Be,GAE7CwL,EAAOt2B,EAAE,SAAU,CAAE+D,MAAO,oCAC5BuyB,EAAO/nB,MAAM,CACTj3C,KAAM0iB,EACNuQ,YACArhB,KAAMwtD,EAAUxtD,OAIpB,MAAM+oD,EAAOlI,GAAAA,mBAA2Be,GAEpCmH,IACAqE,EAAOt2B,EAAE,aACTs2B,EAAO/nB,MAAM,CAAEj3C,KAAM,SACrBg/D,EAAO/nB,MAAM,CAAErvC,MAAO+yD,IACtBqE,EAAO5mB,MAGX4mB,EAAO5mB,IAAI,IAIfM,EAAMue,WAAW5oD,SAAQwpD,IACjBA,EAAU/I,MAAMnrD,SAEhBq7D,EAAOt2B,EAAE,aAAc,CACnBulB,UAAW4J,EAAU5J,UACrBxhB,MAAO,oCAGXorB,EAAU/I,MAAMzgD,SAAQuD,IACpBotD,EAAOt2B,EAAE,SAAU,CAAE92B,SAChBwmC,IAAI,IAEb4mB,EAAO5mB,KACX,IAGJ4mB,EAAO5mB,KACP4mB,EAAO5mB,IAAI,IAGR8mB,CACX,EC9JA,IAAIG,GAA8C,mBAAnBC,gBAAiCA,eAC5DC,GAA0C,mBAAjBC,cAA+BA,aACxDC,GAAiC,iBAAZnyD,SAAoD,mBAArBA,QAAQoyD,SAEhE,SAASC,GAASC,GACdlmC,WAAWkmC,EAAI,EACnB,CAEA,SAASC,GAAKC,GACV,MAAO,CAACF,KAAO7sD,IAAS+sD,GAAM,IAAMF,KAAM7sD,IAC9C,CAcA,IAAIgtD,GAAiBF,GAVjBR,GACSC,eACFC,GACEC,aACFC,GACEnyD,QAAQoyD,SAERC,IAsFb,SAASK,GAAc5mC,EAASjiB,GAC5B,OAAOiiB,EAAQpZ,MAAKpY,IAChBq4D,GAAe9oD,EAAU,KAAMvP,EAAM,IACtCukB,IACC8zC,GAAe9oD,EAAUgV,GAAOA,EAAI3rB,QAAU2rB,EAAM,IAAIhrB,MAAMgrB,GAAK,GAE3E,CAEA,SAAS8zC,GAAe9oD,EAAUtX,EAAO+H,GACrC,IACIuP,EAAStX,EAAO+H,EACpB,CAAE,MAAOukB,GACL4zC,IAAetwD,IAAO,MAAMA,IAAK0c,EACrC,CACJ,CAEA,SAAS+zC,GAAQN,GACb,MAAkC,kBAA3BA,EAAG7lC,OAAOomC,YACrB,CAUA,SAASC,GAAUC,GACf,GAAuB,mBAAZA,EAAwB,MAAM,IAAIl/D,MAAM,uBACnD,OAAO++D,GAAQG,GAtDXH,GADUI,EAuDqBD,GArDxB,YAAattD,GAChB,MAAMoE,EAAWpE,EAAK8gD,MAEtB,OAAOmM,GADSM,EAAK9tD,MAAMvS,KAAM8S,GACHoE,EAClC,GAjGgByoD,EAoGC,SAAU7sD,EAAMoE,GACjC,IAAI8I,EACJ,IACIA,EAASqgD,EAAK9tD,MAAMvS,KAAM8S,EAC9B,CAAE,MAAOtD,GACL,OAAO0H,EAAS1H,EACpB,CAEA,GAAIwQ,GAAiC,mBAAhBA,EAAOD,KACxB,OAAOggD,GAAc//C,EAAQ9I,GAE7BA,EAAS,KAAM8I,EAEvB,EAhHO,YAAalN,GAChB,IAAIoE,EAAWpE,EAAK8gD,MACpB,OAAO+L,EAAG3sD,KAAKhT,KAAM8S,EAAMoE,EAC/B,GA8I8CkpD,EAvDlD,IAAkBC,EA3FMV,CAmJxB,CAIA,SAASW,GAAUF,EAASG,EAAQH,EAAQ18D,QACxC,IAAK68D,EAAO,MAAM,IAAIr/D,MAAM,sBAe5B,OAdA,YAAuB4R,GACnB,MAA+B,mBAApBA,EAAKytD,EAAQ,GACbH,EAAQ7tD,MAAMvS,KAAM8S,GAGxB,IAAIuB,SAAQ,CAACC,EAASC,KACzBzB,EAAKytD,EAAQ,GAAK,CAACr0C,KAAQs0C,KACvB,GAAIt0C,EAAK,OAAO3X,EAAO2X,GACvB5X,EAAQksD,EAAO98D,OAAS,EAAI88D,EAASA,EAAO,GAAG,EAEnDJ,EAAQ7tD,MAAMvS,KAAM8S,EAAK,GAEjC,CAGJ,CAEA,SAAS2tD,GAAWC,GAChB,OAAO,SAAmBC,KAAQC,GAO9B,OANWN,IAAS,SAAUppD,GAC1B,IAAI2pD,EAAO7gE,KACX,OAAO0gE,EAAOC,GAAK,CAAChB,EAAImB,KACpBX,GAAUR,GAAIptD,MAAMsuD,EAAMD,EAASjG,OAAOmG,GAAI,GAC/C5pD,EACP,GAEJ,CACJ,CAEA,SAAS6pD,GAAUL,EAAQM,EAAKC,EAAU/pD,GACtC8pD,EAAMA,GAAO,GACb,IAAIE,EAAU,GACVC,EAAU,EACVC,EAAYjB,GAAUc,GAE1B,OAAOP,EAAOM,GAAK,CAACr5D,EAAOijC,EAAGy2B,KAC1B,IAAInkC,EAAQikC,IACZC,EAAUz5D,GAAO,CAACukB,EAAKxI,KACnBw9C,EAAQhkC,GAASxZ,EACjB29C,EAAOn1C,EAAI,GACb,IACHA,IACChV,EAASgV,EAAKg1C,EAAQ,GAE9B,CAEA,SAASI,GAAY35D,GACjB,OAAOA,GACqB,iBAAjBA,EAAMjE,QACbiE,EAAMjE,QAAU,GAChBiE,EAAMjE,OAAS,GAAM,CAC7B,CAIA,MAAM69D,GAAY,CAAC,EAEnB,SAASC,GAAK7B,GACV,SAAS8B,KAAY3uD,GACjB,GAAW,OAAP6sD,EAAJ,CACA,IAAI+B,EAAS/B,EACbA,EAAK,KACL+B,EAAOnvD,MAAMvS,KAAM8S,EAHI,CAI3B,CAEA,OADAzR,OAAOsgE,OAAOF,EAAS9B,GAChB8B,CACX,CA+CA,SAASG,GAASjC,GACd,OAAO,YAAa7sD,GAChB,GAAW,OAAP6sD,EAAa,MAAM,IAAIz+D,MAAM,gCACjC,IAAIwgE,EAAS/B,EACbA,EAAK,KACL+B,EAAOnvD,MAAMvS,KAAM8S,EACvB,CACJ,CAGA,SAAS+uD,GAAiBC,EAAWC,EAAOd,EAAU/pD,GAClD,IAAI8qD,GAAO,EACPC,GAAW,EACXC,GAAW,EACXC,EAAU,EACV9nC,EAAM,EAEV,SAAS+nC,IAEDD,GAAWJ,GAASG,GAAYF,IAEpCE,GAAW,EACXJ,EAAUv1C,OAAOxM,MAAK,EAAEpY,QAAOq6D,KAAMK,MAEjC,IAAIJ,IAAYD,EAAhB,CAEA,GADAE,GAAW,EACPG,EAMA,OALAL,GAAO,OACHG,GAAW,GAEXjrD,EAAS,OAIjBirD,IACAlB,EAASt5D,EAAO0yB,EAAKioC,GACrBjoC,IACA+nC,GAbsB,CAaX,IACZliD,MAAMqiD,GACb,CAEA,SAASD,EAAiBp2C,EAAKlM,GAG3B,GADAmiD,GAAW,GACPF,EACJ,OAAI/1C,EAAYq2C,EAAYr2C,IAEhB,IAARA,GACA81C,GAAO,OACPC,GAAW,IAIXjiD,IAAWuhD,IAAcS,GAAQG,GAAW,GAC5CH,GAAO,EAEA9qD,EAAS,YAEpBkrD,GACJ,CAEA,SAASG,EAAYr2C,GACb+1C,IACJC,GAAW,EACXF,GAAO,EACP9qD,EAASgV,GACb,CAEAk2C,GACJ,CAEA,IAAII,GAAeT,GACR,CAACxpB,EAAK0oB,EAAU/pD,KAEnB,GADAA,EAAWsqD,GAAKtqD,GACZ6qD,GAAS,EACT,MAAM,IAAIU,WAAW,2CAEzB,IAAKlqB,EACD,OAAOrhC,EAAS,MAEpB,GAjN8B,mBAiNTqhC,EAjNfze,OAAOomC,aAkNT,OAAO2B,GAAiBtpB,EAAKwpB,EAAOd,EAAU/pD,GAElD,GAjNR,SAAyBqhC,GACrB,MAA4C,mBAA9BA,EAAIze,OAAO4oC,cAC7B,CA+MYC,CAAgBpqB,GAChB,OAAOspB,GAAiBtpB,EAAIze,OAAO4oC,iBAAkBX,EAAOd,EAAU/pD,GAE1E,IAAI0rD,EA/FZ,SAAwBC,GACpB,GAAIvB,GAAYuB,GACZ,OAlCR,SAA6BA,GACzB,IAAI98D,GAAK,EACL0jC,EAAMo5B,EAAKn/D,OACf,OAAO,WACH,QAASqC,EAAI0jC,EAAM,CAAC9hC,MAAOk7D,EAAK98D,GAAI2B,IAAK3B,GAAK,IAClD,CACJ,CA4Be+8D,CAAoBD,GAG/B,IAlB0BtqB,EACtBwqB,EACAh9D,EACA0jC,EAeAu5B,EAzCR,SAAsBH,GAClB,OAAOA,EAAK/oC,OAAOkpC,WAAaH,EAAK/oC,OAAOkpC,WAChD,CAuCmBC,CAAYJ,GAC3B,OAAOG,EA9BX,SAA8BA,GAC1B,IAAIj9D,GAAK,EACT,OAAO,WACH,IAAImzD,EAAO8J,EAASz2C,OACpB,OAAI2sC,EAAK8I,KACE,MACXj8D,IACO,CAAC4B,MAAOuxD,EAAKvxD,MAAOD,IAAK3B,GACpC,CACJ,CAqBsBm9D,CAAqBF,IAlBnCD,GADsBxqB,EAmB8CsqB,GAlBtDxhE,OAAO8G,KAAKowC,GAAO,GACjCxyC,GAAK,EACL0jC,EAAMs5B,EAAMr/D,OACT,SAAS6oB,IACZ,IAAI7kB,EAAMq7D,IAAQh9D,GAClB,MAAY,cAAR2B,EACO6kB,IAEJxmB,EAAI0jC,EAAM,CAAC9hC,MAAO4wC,EAAI7wC,GAAMA,OAAO,IAC9C,EAUJ,CAwFuBy7D,CAAe5qB,GAC1BypB,GAAO,EACPC,GAAW,EACXE,EAAU,EACViB,GAAU,EAEd,SAASd,EAAiBp2C,EAAKvkB,GAC3B,IAAIs6D,EAEJ,GADAE,GAAW,EACPj2C,EACA81C,GAAO,EACP9qD,EAASgV,QAER,IAAY,IAARA,EACL81C,GAAO,EACPC,GAAW,MAEV,IAAIt6D,IAAU45D,IAAcS,GAAQG,GAAW,EAEhD,OADAH,GAAO,EACA9qD,EAAS,MAEVksD,GACNhB,GACJ,CACJ,CAEA,SAASA,IAEL,IADAgB,GAAU,EACHjB,EAAUJ,IAAUC,GAAM,CAC7B,IAAIvrB,EAAOmsB,IACX,GAAa,OAATnsB,EAKA,OAJAurB,GAAO,OACHG,GAAW,GACXjrD,EAAS,OAIjBirD,GAAW,EACXlB,EAASxqB,EAAK9uC,MAAO8uC,EAAK/uC,IAAKk6D,GAASU,GAC5C,CACAc,GAAU,CACd,CAEAhB,GAAW,EA6BfiB,GAAgB/C,IAJpB,SAAuBuC,EAAMd,EAAOd,EAAU/pD,GAC1C,OAAOsrD,GAAYT,EAAZS,CAAmBK,EAAM1C,GAAUc,GAAW/pD,EACzD,GAE4C,GAG5C,SAASosD,GAAgBT,EAAM5B,EAAU/pD,GACrCA,EAAWsqD,GAAKtqD,GAChB,IAAIgmB,EAAQ,EACRqmC,EAAY,GACZ,OAAC7/D,GAAUm/D,EACXZ,GAAW,EAKf,SAASuB,EAAiBt3C,EAAKvkB,IACf,IAARukB,IACA+1C,GAAW,IAEE,IAAbA,IACA/1C,EACAhV,EAASgV,KACCq3C,IAAc7/D,GAAWiE,IAAU45D,IAC7CrqD,EAAS,MAEjB,CAEA,IAhBe,IAAXxT,GACAwT,EAAS,MAeNgmB,EAAQx5B,EAAQw5B,IACnB+jC,EAAS4B,EAAK3lC,GAAQA,EAAO0kC,GAAS4B,GAE9C,CAGA,SAASC,GAAeZ,EAAM5B,EAAU/pD,GACpC,OAAOmsD,GAAcR,EAAMa,IAAUzC,EAAU/pD,EACnD,CAoHA,IAAIysD,GAAWrD,IALf,SAAgBuC,EAAM5B,EAAU/pD,GAE5B,OAD2BoqD,GAAYuB,GAAQS,GAAkBG,IACrCZ,EAAM1C,GAAUc,GAAW/pD,EAC3D,GAEgC,GA0H5B0sD,GAAQtD,IAHZ,SAAcuC,EAAM5B,EAAU/pD,GAC1B,OAAO6pD,GAAU4C,GAAUd,EAAM5B,EAAU/pD,EAC/C,GAC0B,GAyCRupD,GAAUmD,IAuB5B,IAAIC,GAAiBvD,IAHrB,SAAsBuC,EAAM5B,EAAU/pD,GAClC,OAAOmsD,GAAcR,EAAM,EAAG5B,EAAU/pD,EAC5C,GAC4C,GA6CtBupD,GArBJH,IAHlB,SAAoBuC,EAAM5B,EAAU/pD,GAChC,OAAO6pD,GAAU8C,GAAgBhB,EAAM5B,EAAU/pD,EACrD,GACsC,IAuBf4iB,OAAO,mBA4f9B,MAAMgqC,GACFviE,cACIvB,KAAK+jE,KAAO/jE,KAAKgkE,KAAO,KACxBhkE,KAAK0D,OAAS,CAClB,CAEAugE,WAAWl0C,GAQP,OAPIA,EAAKm0C,KAAMn0C,EAAKm0C,KAAK33C,KAAOwD,EAAKxD,KAChCvsB,KAAK+jE,KAAOh0C,EAAKxD,KAClBwD,EAAKxD,KAAMwD,EAAKxD,KAAK23C,KAAOn0C,EAAKm0C,KAChClkE,KAAKgkE,KAAOj0C,EAAKm0C,KAEtBn0C,EAAKm0C,KAAOn0C,EAAKxD,KAAO,KACxBvsB,KAAK0D,QAAU,EACRqsB,CACX,CAEAo0C,QACI,KAAMnkE,KAAK+jE,MAAM/jE,KAAK+xC,QACtB,OAAO/xC,IACX,CAEAokE,YAAYr0C,EAAMs0C,GACdA,EAAQH,KAAOn0C,EACfs0C,EAAQ93C,KAAOwD,EAAKxD,KAChBwD,EAAKxD,KAAMwD,EAAKxD,KAAK23C,KAAOG,EAC3BrkE,KAAKgkE,KAAOK,EACjBt0C,EAAKxD,KAAO83C,EACZrkE,KAAK0D,QAAU,CACnB,CAEA4gE,aAAav0C,EAAMs0C,GACfA,EAAQH,KAAOn0C,EAAKm0C,KACpBG,EAAQ93C,KAAOwD,EACXA,EAAKm0C,KAAMn0C,EAAKm0C,KAAK33C,KAAO83C,EAC3BrkE,KAAK+jE,KAAOM,EACjBt0C,EAAKm0C,KAAOG,EACZrkE,KAAK0D,QAAU,CACnB,CAEAg1D,QAAQ3oC,GACA/vB,KAAK+jE,KAAM/jE,KAAKskE,aAAatkE,KAAK+jE,KAAMh0C,GACvCw0C,GAAWvkE,KAAM+vB,EAC1B,CAEAzgB,KAAKygB,GACG/vB,KAAKgkE,KAAMhkE,KAAKokE,YAAYpkE,KAAKgkE,KAAMj0C,GACtCw0C,GAAWvkE,KAAM+vB,EAC1B,CAEAgiB,QACI,OAAO/xC,KAAK+jE,MAAQ/jE,KAAKikE,WAAWjkE,KAAK+jE,KAC7C,CAEAnQ,MACI,OAAO5zD,KAAKgkE,MAAQhkE,KAAKikE,WAAWjkE,KAAKgkE,KAC7C,CAEAQ,UACI,MAAO,IAAIxkE,KACf,CAEA,EAAE85B,OAAOkpC,YAEL,IADA,IAAIyB,EAAMzkE,KAAK+jE,KACRU,SACGA,EAAIrzD,KACVqzD,EAAMA,EAAIl4C,IAElB,CAEA67B,OAAQsc,GAEJ,IADA,IAAIC,EAAO3kE,KAAK+jE,KACVY,GAAM,CACR,IAAI,KAACp4C,GAAQo4C,EACTD,EAAOC,IACP3kE,KAAKikE,WAAWU,GAEpBA,EAAOp4C,CACX,CACA,OAAOvsB,IACX,EAGJ,SAASukE,GAAWK,EAAK70C,GACrB60C,EAAIlhE,OAAS,EACbkhE,EAAIb,KAAOa,EAAIZ,KAAOj0C,CAC1B,CAEA,SAAS80C,GAAMC,EAAQC,EAAarzC,GAChC,GAAmB,MAAfqzC,EACAA,EAAc,OAEb,GAAmB,IAAhBA,EACJ,MAAM,IAAItC,WAAW,gCAGzB,IAAI7nC,EAAUulC,GAAU2E,GACpBE,EAAa,EACbC,EAAc,GAClB,MAAMp/B,EAAS,CACXjmC,MAAO,GACPslE,MAAO,GACPC,UAAW,GACXC,YAAa,GACbjB,MAAO,IAeX,SAASvqC,EAAKnrB,EAAOJ,GACjB,OAAKI,EACAJ,OACLw3B,EAAOp3B,GAASo3B,EAAOp3B,GAAOwJ,QAAO0a,GAAMA,IAAOtkB,KAD7Bw3B,EAAOp3B,GAAS,GADlBpN,OAAO8G,KAAK09B,GAAQz3B,SAAQukB,GAAMkT,EAAOlT,GAAM,IAGtE,CAEA,SAAS0yC,EAAS52D,KAAUqE,GACxB+yB,EAAOp3B,GAAOL,SAAQC,GAAWA,KAAWyE,IAChD,CAEA,IAAIwyD,GAAsB,EAC1B,SAASC,EAAQn0D,EAAMo0D,EAAeC,EAAevuD,GACjD,GAAgB,MAAZA,GAAwC,mBAAbA,EAC3B,MAAM,IAAIhW,MAAM,oCAIpB,IAAIqpC,EAAKm7B,EACT,SAASC,EAAiBz5C,KAAQpZ,GAG9B,OAAIoZ,EAAYu5C,EAAgBC,EAAIx5C,GAAOqe,IACvCz3B,EAAKpP,QAAU,EAAU6mC,EAAIz3B,EAAK,SACtCy3B,EAAIz3B,EACR,CATA8yD,EAAEC,SAAU,EAWZ,IAAI3M,EAAO,CACP9nD,OACA8F,SAAUuuD,EACNE,EACCzuD,GAAYyuD,GAiBrB,GAdIH,EACAI,EAAEE,OAAOpN,QAAQQ,GAEjB0M,EAAEE,OAAOx2D,KAAK4pD,GAGboM,IACDA,GAAsB,EACtBxF,IAAe,KACXwF,GAAsB,EACtBM,EAAEv4D,SAAS,KAIfo4D,IAAkBvuD,EAClB,OAAO,IAAI7C,SAAQ,CAACC,EAASC,KACzBg2B,EAAMj2B,EACNoxD,EAAMnxD,CAAM,GAGxB,CAEA,SAASwxD,EAAUC,GACf,OAAO,SAAU95C,KAAQpZ,GACrBkyD,GAAc,EAEd,IAAK,IAAIj/D,EAAI,EAAG+zD,EAAIkM,EAAMtiE,OAAQqC,EAAI+zD,EAAG/zD,IAAK,CAC1C,IAAIuV,EAAO0qD,EAAMjgE,GAEbm3B,EAAQ+nC,EAAYrkE,QAAQ0a,GAClB,IAAV4hB,EACA+nC,EAAYlzB,QACL7U,EAAQ,GACf+nC,EAAY11D,OAAO2tB,EAAO,GAG9B5hB,EAAKpE,SAASgV,KAAQpZ,GAEX,MAAPoZ,GACAm5C,EAAQ,QAASn5C,EAAK5Q,EAAKlK,KAEnC,CAEI4zD,GAAeY,EAAEb,YAAca,EAAEK,QACjCZ,EAAQ,eAGRO,EAAEM,QACFb,EAAQ,SAEZO,EAAEv4D,SACN,CACJ,CAEA,SAAS84D,EAAY/0D,GACjB,QAAoB,IAAhBA,EAAK1N,SAAgBkiE,EAAEM,SAEvBpG,IAAe,IAAMuF,EAAQ,WACtB,GAGf,CAEA,MAAMe,EAAermE,GAAUsO,IAC3B,IAAKA,EACD,OAAO,IAAIgG,SAAQ,CAACC,EAASC,MA1GrC,SAAe9F,EAAOJ,GAClB,MAAMg4D,EAAkB,IAAIvzD,KACxB8mB,EAAInrB,EAAO43D,GAyGI,EAACn6C,EAAK9a,KACb,GAAI8a,EAAK,OAAO3X,EAAO2X,GACvB5X,EAAQlD,EAAK,EA1GrB/C,IAAWyE,EAAK,EAEpB+yB,EAAOp3B,GAAOa,KAAK+2D,EACvB,CAqGY7E,CAAKzhE,EAGH,IAGV65B,EAAI75B,GArHR,SAAa0O,EAAOJ,GAChBw3B,EAAOp3B,GAAOa,KAAKjB,EACvB,CAoHIqb,CAAG3pB,EAAMsO,EAAQ,EAIrB,IAAIi4D,GAAe,EACfV,EAAI,CACJE,OAAQ,IAAIhC,GACZ,EAAEhqC,OAAOkpC,kBACE4C,EAAEE,OAAOhsC,OAAOkpC,WAC3B,EACA+B,cACArzC,UACAu0C,OAAQlB,EAAc,EACtBc,SAAS,EACTU,QAAQ,EACRj3D,KAAM8B,EAAM8F,GACR,GAAI/W,MAAMC,QAAQgR,GAAO,CACrB,GAAI+0D,EAAY/0D,GAAO,OACvB,OAAOA,EAAKssB,KAAI8oC,GAASjB,EAAQiB,GAAO,GAAO,EAAOtvD,IAC1D,CACA,OAAOquD,EAAQn0D,GAAM,GAAO,EAAO8F,EACvC,EACAuvD,UAAWr1D,EAAM8F,GACb,GAAI/W,MAAMC,QAAQgR,GAAO,CACrB,GAAI+0D,EAAY/0D,GAAO,OACvB,OAAOA,EAAKssB,KAAI8oC,GAASjB,EAAQiB,GAAO,GAAO,EAAMtvD,IACzD,CACA,OAAOquD,EAAQn0D,GAAM,GAAO,EAAM8F,EACtC,EACAwvD,OACI9sC,IACAgsC,EAAEE,OAAO3B,OACb,EACAzL,QAAStnD,EAAM8F,GACX,GAAI/W,MAAMC,QAAQgR,GAAO,CACrB,GAAI+0D,EAAY/0D,GAAO,OACvB,OAAOA,EAAKssB,KAAI8oC,GAASjB,EAAQiB,GAAO,GAAM,EAAOtvD,IACzD,CACA,OAAOquD,EAAQn0D,GAAM,GAAM,EAAO8F,EACtC,EACAyvD,aAAcv1D,EAAM8F,GAChB,GAAI/W,MAAMC,QAAQgR,GAAO,CACrB,GAAI+0D,EAAY/0D,GAAO,OACvB,OAAOA,EAAKssB,KAAI8oC,GAASjB,EAAQiB,GAAO,GAAM,EAAMtvD,IACxD,CACA,OAAOquD,EAAQn0D,GAAM,GAAM,EAAM8F,EACrC,EACAkxC,OAAQsc,GACJkB,EAAEE,OAAO1d,OAAOsc,EACpB,EACAr3D,UAGI,IAAIi5D,EAAJ,CAIA,IADAA,GAAe,GACRV,EAAEW,QAAUvB,EAAaY,EAAEb,aAAea,EAAEE,OAAOpiE,QAAO,CAC7D,IAAIsiE,EAAQ,GAAI50D,EAAO,GACnB0oD,EAAI8L,EAAEE,OAAOpiE,OACbkiE,EAAEl0C,UAASooC,EAAIv+C,KAAK4yB,IAAI2rB,EAAG8L,EAAEl0C,UACjC,IAAK,IAAI3rB,EAAI,EAAGA,EAAI+zD,EAAG/zD,IAAK,CACxB,IAAIgqB,EAAO61C,EAAEE,OAAO/zB,QACpBi0B,EAAM12D,KAAKygB,GACXk1C,EAAY31D,KAAKygB,GACjB3e,EAAK9B,KAAKygB,EAAK3e,KACnB,CAEA4zD,GAAc,EAEU,IAApBY,EAAEE,OAAOpiE,QACT2hE,EAAQ,SAGRL,IAAeY,EAAEb,aACjBM,EAAQ,aAGZ,IAAIvE,EAAKc,GAASmE,EAAUC,IAC5BprC,EAAQxpB,EAAM0vD,EAClB,CACAwF,GAAe,CA1Bf,CA2BJ,EACA5iE,OAAO,IACIkiE,EAAEE,OAAOpiE,OAEpBy+D,QAAQ,IACG6C,EAEXC,YAAY,IACDA,EAEXiB,KAAI,IACON,EAAEE,OAAOpiE,OAASshE,IAAe,EAE5C4B,QACIhB,EAAEW,QAAS,CACf,EACApuD,UACqB,IAAbytD,EAAEW,SACNX,EAAEW,QAAS,EACXzG,GAAe8F,EAAEv4D,SACrB,GAyBJ,OAtBAhM,OAAOwlE,iBAAiBjB,EAAG,CACvBT,UAAW,CACPn9D,UAAU,EACVL,MAAOy+D,EAAY,cAEvBhB,YAAa,CACTp9D,UAAU,EACVL,MAAOy+D,EAAY,gBAEvBjC,MAAO,CACHn8D,UAAU,EACVL,MAAOy+D,EAAY,UAEvBlB,MAAO,CACHl9D,UAAU,EACVL,MAAOy+D,EAAY,UAEvBxmE,MAAO,CACHoI,UAAU,EACVL,MAAOy+D,EAAY,YAGpBR,CACX,CA6OetF,IAVf,SAAgBuC,EAAMiE,EAAM7F,EAAU/pD,GAClCA,EAAWsqD,GAAKtqD,GAChB,IAAIkqD,EAAYjB,GAAUc,GAC1B,OAAO4C,GAAehB,GAAM,CAACj6B,EAAG7iC,EAAGs7D,KAC/BD,EAAU0F,EAAMl+B,GAAG,CAAC1c,EAAKxI,KACrBojD,EAAOpjD,EACP29C,EAAOn1C,EAAI,GACb,IACHA,GAAOhV,EAASgV,EAAK46C,IAC5B,GACgC,GAgIhC,IAAIC,GAAazG,IAHjB,SAAmBuC,EAAMd,EAAOd,EAAU/pD,GACtC,OAAO6pD,GAAUyB,GAAYT,GAAQc,EAAM5B,EAAU/pD,EACzD,GACoC,GAwChC8vD,GAAgB1G,IAlBpB,SAAqBuC,EAAMd,EAAOd,EAAU/pD,GACxC,IAAIkqD,EAAYjB,GAAUc,GAC1B,OAAO8F,GAAWlE,EAAMd,GAAO,CAACkF,EAAK5F,KACjCD,EAAU6F,GAAK,CAAC/6C,KAAQpZ,IAChBoZ,EAAYm1C,EAAOn1C,GAChBm1C,EAAOn1C,EAAKpZ,IACrB,IACH,CAACoZ,EAAKg7C,KAEL,IADA,IAAIlnD,EAAS,GACJja,EAAI,EAAGA,EAAImhE,EAAWxjE,OAAQqC,IAC/BmhE,EAAWnhE,KACXia,EAASA,EAAO26C,UAAUuM,EAAWnhE,KAI7C,OAAOmR,EAASgV,EAAKlM,EAAO,GAEpC,GAC0C,GA+K1C,SAASmnD,GAAcC,EAAOC,GAC1B,MAAO,CAAC3G,EAAQM,EAAKI,EAAWN,KAC5B,IACIwG,EADAC,GAAa,EAEjB,MAAMtG,EAAWd,GAAUiB,GAC3BV,EAAOM,GAAK,CAACr5D,EAAOijC,EAAG1zB,KACnB+pD,EAASt5D,GAAO,CAACukB,EAAKlM,IACdkM,IAAe,IAARA,EAAsBhV,EAASgV,GAEtCk7C,EAAMpnD,KAAYsnD,GAClBC,GAAa,EACbD,EAAaD,GAAU,EAAM1/D,GACtBuP,EAAS,KAAMqqD,UAE1BrqD,KACF,IACHgV,IACC,GAAIA,EAAK,OAAO40C,EAAG50C,GACnB40C,EAAG,KAAMyG,EAAaD,EAAaD,GAAU,GAAO,GACtD,CAEV,CAqIA,SAASG,GAAYznE,GACjB,MAAO,CAAC4/D,KAAO7sD,IAASqtD,GAAUR,EAAVQ,IAAiBrtD,GAAM,CAACoZ,KAAQu7C,KAE7B,iBAAZv+D,UAEHgjB,EAEIhjB,QAAQtJ,OACRsJ,QAAQtJ,MAAMssB,GAEXhjB,QAAQnJ,IACf0nE,EAAWr5D,SAAQw6B,GAAK1/B,QAAQnJ,GAAM6oC,KAE9C,GAER,CA8GA,SAAS8+B,GAAczG,GACnB,MAAO,CAACt5D,EAAOu1B,EAAOhmB,IAAa+pD,EAASt5D,EAAOuP,EACvD,CArWeopD,IAHf,SAAgBuC,EAAM5B,EAAU/pD,GAC5B,OAAO8vD,GAAcnE,EAAMa,IAAUzC,EAAU/pD,EACnD,GACgC,GAyBXopD,IAHrB,SAAsBuC,EAAM5B,EAAU/pD,GAClC,OAAO8vD,GAAcnE,EAAM,EAAG5B,EAAU/pD,EAC5C,GAC4C,GAoJ7BopD,IAHf,SAAgBuC,EAAM5B,EAAU/pD,GAC5B,OAAOiwD,IAAcQ,GAAQA,IAAM,CAACp9B,EAAK2uB,IAASA,GAA3CiO,CAAiDxD,GAAUd,EAAM5B,EAAU/pD,EACtF,GACgC,GA4BZopD,IAHpB,SAAqBuC,EAAMd,EAAOd,EAAU/pD,GACxC,OAAOiwD,IAAcQ,GAAQA,IAAM,CAACp9B,EAAK2uB,IAASA,GAA3CiO,CAAiD3E,GAAYT,GAAQc,EAAM5B,EAAU/pD,EAChG,GAC0C,GA2BrBopD,IAJrB,SAAsBuC,EAAM5B,EAAU/pD,GAClC,OAAOiwD,IAAcQ,GAAQA,IAAM,CAACp9B,EAAK2uB,IAASA,GAA3CiO,CAAiD3E,GAAY,GAAIK,EAAM5B,EAAU/pD,EAC5F,GAE4C,GAgDlCswD,GAAY,OAgDLlH,IAvBjB,SAAkBW,EAAU92D,EAAM+M,GAC9BA,EAAW0qD,GAAS1qD,GACpB,IAEIgqD,EAFA0G,EAAMzH,GAAUc,GAChB4G,EAAQ1H,GAAUh2D,GAGtB,SAASoiB,EAAKL,KAAQpZ,GAClB,GAAIoZ,EAAK,OAAOhV,EAASgV,IACb,IAARA,IACJg1C,EAAUpuD,EACV+0D,KAAS/0D,EAAMs0D,GACnB,CAEA,SAASA,EAAMl7C,EAAK47C,GAChB,OAAI57C,EAAYhV,EAASgV,IACb,IAARA,EACC47C,OACLF,EAAIr7C,GADerV,EAAS,QAASgqD,QADrC,CAGJ,CAEA,OAAOkG,EAAM,MAAM,EACvB,GAEoC,GA0IzB9G,IAJX,SAAmBuC,EAAM5B,EAAU/pD,GAC/B,OAAOysD,GAASd,EAAM6E,GAAcvH,GAAUc,IAAY/pD,EAC9D,GAE+B,GA0B/B,IAAI6wD,GAAczH,IAHlB,SAAqBuC,EAAMd,EAAOd,EAAU/pD,GACxC,OAAOsrD,GAAYT,EAAZS,CAAmBK,EAAM6E,GAAcvH,GAAUc,IAAY/pD,EACxE,GACwC,GA4BpC8wD,GAAe1H,IAHnB,SAAoBuC,EAAM5B,EAAU/pD,GAChC,OAAO6wD,GAAYlF,EAAM,EAAG5B,EAAU/pD,EAC1C,GACwC,GA4MxC,SAAS+wD,GAAYvH,EAAQM,EAAKC,EAAU/pD,GACxC,IAAIgxD,EAAc,IAAI/nE,MAAM6gE,EAAIt9D,QAChCg9D,EAAOM,GAAK,CAACp4B,EAAG1L,EAAOmkC,KACnBJ,EAASr4B,GAAG,CAAC1c,EAAKxI,KACdwkD,EAAYhrC,KAAWxZ,EACvB29C,EAAOn1C,EAAI,GACb,IACHA,IACC,GAAIA,EAAK,OAAOhV,EAASgV,GAEzB,IADA,IAAIg1C,EAAU,GACLn7D,EAAI,EAAGA,EAAIi7D,EAAIt9D,OAAQqC,IACxBmiE,EAAYniE,IAAIm7D,EAAQ5xD,KAAK0xD,EAAIj7D,IAEzCmR,EAAS,KAAMgqD,EAAQ,GAE/B,CAEA,SAASiH,GAAczH,EAAQmC,EAAM5B,EAAU/pD,GAC3C,IAAIgqD,EAAU,GACdR,EAAOmC,GAAM,CAACj6B,EAAG1L,EAAOmkC,KACpBJ,EAASr4B,GAAG,CAAC1c,EAAKxI,KACd,GAAIwI,EAAK,OAAOm1C,EAAOn1C,GACnBxI,GACAw9C,EAAQ5xD,KAAK,CAAC4tB,QAAOv1B,MAAOihC,IAEhCy4B,EAAOn1C,EAAI,GACb,IACHA,IACC,GAAIA,EAAK,OAAOhV,EAASgV,GACzBhV,EAAS,KAAMgqD,EACVz8B,MAAK,CAAC3sB,EAAGC,IAAMD,EAAEolB,MAAQnlB,EAAEmlB,QAC3BQ,KAAIha,GAAKA,EAAE/b,QAAO,GAE/B,CAEA,SAASygE,GAAQ1H,EAAQmC,EAAM5B,EAAU/pD,GAErC,OADaoqD,GAAYuB,GAAQoF,GAAcE,IACjCzH,EAAQmC,EAAM1C,GAAUc,GAAW/pD,EACrD,CAs5CA,SAAS3C,GAAOmsD,EAAQM,EAAKI,EAAWlqD,GACpC,MAAM+pD,EAAWd,GAAUiB,GAC3B,OAAOgH,GAAQ1H,EAAQM,GAAK,CAACr5D,EAAOm5D,KAChCG,EAASt5D,GAAO,CAACukB,EAAKxI,KAClBo9C,EAAG50C,GAAMxI,EAAE,GACb,GACHxM,EACP,CAx/CcopD,IAHd,SAAeuC,EAAM5B,EAAU/pD,GAC3B,OAAOiwD,IAAcQ,IAASA,IAAMp9B,IAAQA,GAArC48B,CAA0CxD,GAAUd,EAAM5B,EAAU/pD,EAC/E,GAC8B,GA0BXopD,IAHnB,SAAoBuC,EAAMd,EAAOd,EAAU/pD,GACvC,OAAOiwD,IAAcQ,IAASA,IAAMp9B,IAAQA,GAArC48B,CAA0C3E,GAAYT,GAAQc,EAAM5B,EAAU/pD,EACzF,GACwC,GAyBpBopD,IAHpB,SAAqBuC,EAAM5B,EAAU/pD,GACjC,OAAOiwD,IAAcQ,IAASA,IAAMp9B,IAAQA,GAArC48B,CAA0CtD,GAAgBhB,EAAM5B,EAAU/pD,EACrF,GAC0C,GAiH3BopD,IAHf,SAAiBuC,EAAM5B,EAAU/pD,GAC7B,OAAOkxD,GAAQzE,GAAUd,EAAM5B,EAAU/pD,EAC7C,GACgC,GAyBZopD,IAHpB,SAAsBuC,EAAMd,EAAOd,EAAU/pD,GACzC,OAAOkxD,GAAQ5F,GAAYT,GAAQc,EAAM5B,EAAU/pD,EACvD,GAC0C,GAuBrBopD,IAHrB,SAAuBuC,EAAM5B,EAAU/pD,GACnC,OAAOkxD,GAAQvE,GAAgBhB,EAAM5B,EAAU/pD,EACnD,GAC4C,GA4C5BopD,IAXhB,SAAiBX,EAAIjpB,GACjB,IAAIsrB,EAAOJ,GAASlrB,GAChBp7B,EAAO6kD,GAzWf,SAAqBR,GACjB,OAAIM,GAAQN,GAAYA,EACjB,YAAa7sD,GAChB,IAAIoE,EAAWpE,EAAK8gD,MAChByU,GAAO,EACXv1D,EAAKxD,MAAK,IAAIg5D,KACND,EACAvI,IAAe,IAAM5oD,KAAYoxD,KAEjCpxD,KAAYoxD,EAChB,IAEJ3I,EAAGptD,MAAMvS,KAAM8S,GACfu1D,GAAO,CACX,CACJ,CA0VyBE,CAAY5I,IAOjC,OALA,SAASpzC,EAAKL,GACV,GAAIA,EAAK,OAAO81C,EAAK91C,IACT,IAARA,GACJ5Q,EAAKiR,EACT,CACOA,EACX,GACkC,GAmDb+zC,IA7BrB,SAAsBuC,EAAMd,EAAOd,EAAU/pD,GACzC,IAAIkqD,EAAYjB,GAAUc,GAC1B,OAAO8F,GAAWlE,EAAMd,GAAO,CAACkF,EAAK5F,KACjCD,EAAU6F,GAAK,CAAC/6C,EAAKxkB,IACbwkB,EAAYm1C,EAAOn1C,GAChBm1C,EAAOn1C,EAAK,CAACxkB,MAAKu/D,SAC3B,IACH,CAAC/6C,EAAKg7C,KAKL,IAJA,IAAIlnD,EAAS,CAAC,GAEV,eAACH,GAAkBxe,OAAOD,UAErB2E,EAAI,EAAGA,EAAImhE,EAAWxjE,OAAQqC,IACnC,GAAImhE,EAAWnhE,GAAI,CACf,IAAI,IAAC2B,GAAOw/D,EAAWnhE,IACnB,IAACkhE,GAAOC,EAAWnhE,GAEnB8Z,EAAe7M,KAAKgN,EAAQtY,GAC5BsY,EAAOtY,GAAK4H,KAAK23D,GAEjBjnD,EAAOtY,GAAO,CAACu/D,EAEvB,CAGJ,OAAO/vD,EAASgV,EAAKlM,EAAO,GAEpC,GAE4C,GAmJlCwnD,GAAY,OAqCClH,IAbvB,SAAwB/nB,EAAKwpB,EAAOd,EAAU/pD,GAC1CA,EAAWsqD,GAAKtqD,GAChB,IAAIsxD,EAAS,CAAC,EACVpH,EAAYjB,GAAUc,GAC1B,OAAOuB,GAAYT,EAAZS,CAAmBjqB,GAAK,CAAC0uB,EAAKv/D,EAAK6kB,KACtC60C,EAAU6F,EAAKv/D,GAAK,CAACwkB,EAAKlM,KACtB,GAAIkM,EAAK,OAAOK,EAAKL,GACrBs8C,EAAO9gE,GAAOsY,EACduM,EAAKL,EAAI,GACX,IACHA,GAAOhV,EAASgV,EAAKs8C,IAC5B,GAEgD,GAsRjC5I,GARXJ,GACWnyD,QAAQoyD,SACZH,GACIC,aAEAG,IAKCY,IAAS,CAACI,EAAQsF,EAAO9uD,KACrC,IAAIgqD,EAAUI,GAAY0E,GAAS,GAAK,CAAC,EAEzCtF,EAAOsF,GAAO,CAAC1qD,EAAM5T,EAAK+gE,KACtBtI,GAAU7kD,EAAV6kD,EAAgB,CAACj0C,KAAQlM,KACjBA,EAAOtc,OAAS,KACfsc,GAAUA,GAEfkhD,EAAQx5D,GAAOsY,EACfyoD,EAAOv8C,EAAI,GACb,IACHA,GAAOhV,EAASgV,EAAKg1C,IAAS,GAClC,GA2ZGpnC,OAAOkpC,SA4JA1C,IATb,SAAc0F,EAAO9uD,GAEjB,GADAA,EAAWsqD,GAAKtqD,IACX/W,MAAMC,QAAQ4lE,GAAQ,OAAO9uD,EAAS,IAAIwxD,UAAU,yDACzD,IAAK1C,EAAMtiE,OAAQ,OAAOwT,IAC1B,IAAK,IAAInR,EAAI,EAAG+zD,EAAIkM,EAAMtiE,OAAQqC,EAAI+zD,EAAG/zD,IACrCo6D,GAAU6F,EAAMjgE,GAAhBo6D,CAAoBjpD,EAE5B,GAE4B,GAqPbopD,IAHf,SAAmBuC,EAAM5B,EAAU/pD,GAC/B,OAAO3C,GAAOovD,GAAUd,EAAM5B,EAAU/pD,EAC5C,GACkC,GAyBdopD,IAHpB,SAAsBuC,EAAMd,EAAOd,EAAU/pD,GACzC,OAAO3C,GAAOiuD,GAAYT,GAAQc,EAAM5B,EAAU/pD,EACtD,GAC0C,GAuBrBopD,IAHrB,SAAuBuC,EAAM5B,EAAU/pD,GACnC,OAAO3C,GAAOsvD,GAAgBhB,EAAM5B,EAAU/pD,EAClD,GAC4C,GA0d/BopD,IAHb,SAAcuC,EAAM5B,EAAU/pD,GAC1B,OAAOiwD,GAAcj9D,SAASqgC,GAAOA,GAA9B48B,CAAmCxD,GAAUd,EAAM5B,EAAU/pD,EACxE,GAC4B,GA2BVopD,IAHlB,SAAmBuC,EAAMd,EAAOd,EAAU/pD,GACtC,OAAOiwD,GAAcj9D,SAASqgC,GAAOA,GAA9B48B,CAAmC3E,GAAYT,GAAQc,EAAM5B,EAAU/pD,EAClF,GACsC,GA0BnBopD,IAHnB,SAAoBuC,EAAM5B,EAAU/pD,GAChC,OAAOiwD,GAAcj9D,SAASqgC,GAAOA,GAA9B48B,CAAmCtD,GAAgBhB,EAAM5B,EAAU/pD,EAC9E,GACwC,GAyKzBopD,IAjBf,SAAiBuC,EAAM5B,EAAU/pD,GAC7B,IAAIkqD,EAAYjB,GAAUc,GAC1B,OAAO2C,GAAMf,GAAM,CAACj6B,EAAGy4B,KACnBD,EAAUx4B,GAAG,CAAC1c,EAAKy8C,KACf,GAAIz8C,EAAK,OAAOm1C,EAAOn1C,GACvBm1C,EAAOn1C,EAAK,CAACvkB,MAAOihC,EAAG+/B,YAAU,GACnC,IACH,CAACz8C,EAAKg1C,KACL,GAAIh1C,EAAK,OAAOhV,EAASgV,GACzBhV,EAAS,KAAMgqD,EAAQz8B,KAAKmkC,GAAYlrC,KAAIha,GAAKA,EAAE/b,QAAO,IAG9D,SAASihE,EAAWC,EAAMC,GACtB,IAAIhxD,EAAI+wD,EAAKF,SAAU5wD,EAAI+wD,EAAMH,SACjC,OAAO7wD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,CACpC,CACJ,GACgC,GA8WhBuoD,IAlBhB,SAAiB0F,EAAO9uD,GACpB,IACI8I,EADApgB,EAAQ,KAEZ,OAAOooE,GAAahC,GAAO,CAAC1qD,EAAMmtD,KAC9BtI,GAAU7kD,EAAV6kD,EAAgB,CAACj0C,KAAQpZ,KACrB,IAAY,IAARoZ,EAAe,OAAOu8C,EAAOv8C,GAE7BpZ,EAAKpP,OAAS,GACbsc,GAAUlN,EAEXkN,EAASlN,EAEblT,EAAQssB,EACRu8C,EAAOv8C,EAAM,KAAO,CAAC,EAAE,GACzB,IACH,IAAMhV,EAAStX,EAAOogB,IAC7B,IA+EesgD,IAtBf,SAAgBn2D,EAAM82D,EAAU/pD,GAC5BA,EAAW0qD,GAAS1qD,GACpB,IAAI0wD,EAAMzH,GAAUc,GAChB4G,EAAQ1H,GAAUh2D,GAClB+2D,EAAU,GAEd,SAAS30C,EAAKL,KAAQ68C,GAClB,GAAI78C,EAAK,OAAOhV,EAASgV,GACzBg1C,EAAU6H,GACE,IAAR78C,GACJ27C,EAAMT,EACV,CAEA,SAASA,EAAMl7C,EAAK47C,GAChB,OAAI57C,EAAYhV,EAASgV,IACb,IAARA,EACC47C,OACLF,EAAIr7C,GADerV,EAAS,QAASgqD,QADrC,CAGJ,CAEA,OAAO2G,EAAMT,EACjB,GACgC,GA6Hd9G,IAtBlB,SAAoB0F,EAAO9uD,GAEvB,GADAA,EAAWsqD,GAAKtqD,IACX/W,MAAMC,QAAQ4lE,GAAQ,OAAO9uD,EAAS,IAAIhW,MAAM,8DACrD,IAAK8kE,EAAMtiE,OAAQ,OAAOwT,IAC1B,IAAI8xD,EAAY,EAEhB,SAASC,EAASn2D,GACHqtD,GAAU6F,EAAMgD,KAC3B1tD,IAAQxI,EAAM8uD,GAASr1C,GAC3B,CAEA,SAASA,EAAKL,KAAQpZ,GAClB,IAAY,IAARoZ,EACJ,OAAIA,GAAO88C,IAAchD,EAAMtiE,OACpBwT,EAASgV,KAAQpZ,QAE5Bm2D,EAASn2D,EACb,CAEAm2D,EAAS,GACb,IC7pLA,MAAMx/D,IAASC,EAAAA,EAAAA,yCAKA,MAAMw/D,GAIjB3nE,cDq5HJ,IAAkBujE,EAAQC,EAClBnqC,ECr5HA56B,KAAKmpE,QDo5HKrE,ECp5HU9kE,KAAKopE,mBAAmBh5C,KAAKpwB,MDo5H/B+kE,ECp5HsC,EDq5HxDnqC,EAAUulC,GAAU2E,GACjBD,IAAM,CAACwE,EAAOvI,KACjBlmC,EAAQyuC,EAAM,GAAIvI,EAAG,GACtBiE,EAAa,ICv5HZ/kE,KAAKspE,UAAW,CACpB,CAKArhE,QACIjI,KAAKmpE,OAAOzC,MAChB,CAKA0C,mBAAmB9tD,EAAMiuD,GACrB,IACIjuD,EAAKiuD,EACT,CAAE,MAAO3pE,GACL6J,GAAO7J,MAAO,gBAAeA,aAAK,EAALA,EAAOuB,SACpCooE,EAAiB3pE,EACrB,CACJ,CAKAgnE,QACI5mE,KAAKmpE,OAAOvC,OAChB,CAmBAt3D,KAAKgM,EAAMpE,GACHlX,KAAKspE,SACLpyD,GAAYA,EAAS,IAAIhW,MAAM,+BAInClB,KAAKmpE,OAAO75D,KAAKgM,EAAMpE,EAC3B,CAKAiB,SACInY,KAAKmpE,OAAOhxD,QAChB,CAMAqxD,WACIxpE,KAAKspE,UAAW,CACpB,EClFG,IAAKG,GAAkB,SAAlBA,GAAkB,OAAlBA,EAAkB,kBAAlBA,EAAkB,gBAAlBA,EAAkB,cAAlBA,CAAkB,MAqBvB,MAAMC,GAAUD,GAAmBC,QAC7BC,GAASF,GAAmBE,OAC5BC,GAAQH,GAAmBG,MCjBlCngE,IAASC,EAAAA,EAAAA,4CAOA,MAAMmgE,WAAsBnwC,GAcvCn4B,YACQozC,EACAm1B,EACAp4B,EACAzG,EACA8+B,EACAC,EACAloC,GACJl6B,QACA5H,KAAK20C,IAAMA,EACX30C,KAAK8pE,SAAWA,EAChB9pE,KAAK0xC,UAAYA,EACjB1xC,KAAKirC,WAAaA,EAClBjrC,KAAK+pE,iBAAmBA,EACxB/pE,KAAKgqE,SAAWA,EAOhBhqE,KAAK8hC,YAAcA,EAMnB9hC,KAAKiqE,SAAU,EAKfjqE,KAAKkqE,cAAgB,GAMrBlqE,KAAK4tB,KAAO,KAOZ5tB,KAAKmqE,gBAAkB,KAMvBnqE,KAAKukB,MAAQ,KAMbvkB,KAAKkuB,IAAM,IACf,CAMIk8C,mBACA,OAAOpqE,KAAK8hC,YAAc9hC,KAAK8pE,SAAW9pE,KAAK0xC,SACnD,CAMI24B,mBACA,OAAOrqE,KAAK8hC,YAAc9hC,KAAK0xC,UAAY1xC,KAAK8pE,QACpD,CAaAh2D,WAAW8Z,EAAMM,EAAKo8C,EAAgBzqE,GAClC,GAAmB,OAAfG,KAAKukB,MAAgB,CACrB,MAAMqtB,EACC,kCAAiC5xC,KAAK20C,oCAC3B30C,KAAKukB,QAGvB,MADA9a,GAAO7J,MAAMgyC,GACP,IAAI1wC,MAAM0wC,EACpB,CAGA5xC,KAAK4tB,KAAOA,EACZ5tB,KAAKkuB,IAAMA,EACXluB,KAAKmqE,gBAAkBG,EACvBtqE,KAAKukB,MAAQklD,GACbzpE,KAAKuqE,aAAa1qE,EACtB,CAQA0qE,aAAa1qE,GAAW,CAWxB2qE,iBAAiBhN,GAAW,CAQ5BiN,WACI,OAAOzqE,KAAKukB,KAChB,CASAmmD,WAAWlN,GAAW,CAOtBmN,cAAcnN,GAAW,CAiBzBoN,UAAUl1D,EAASm1D,EAAShrE,GAAU,CAWtCirE,YAAY5c,EAAQx4C,EAASm1D,GAAU,MC3MtCE,GAAkB,SAAlBA,GAAkB,OAAlBA,EAAkB,oFAAlBA,CAAkB,EAAlBA,IAAkB,IAOvB,YCsBMthE,IAASC,EAAAA,EAAAA,8CAOTshE,GAAa,IA+BnB,SAASC,GAAkB9c,EAAajlB,EAAGgiC,EAAOxQ,GAE9CvM,EAAY1lB,EAAE,SAAU,CACpB+D,MAAO,kCACP76B,KAAMu5D,EACNnrE,KAAMmpC,EAAE/lC,SAEPslC,EAAE,YAAa,CACZ1oC,KAAM,OACN4H,MAAO+yD,IAEVviB,KACA1P,EAAE,YAAa,CACZ+D,MAAO,2BACPmhB,MAAOzkB,EAAEykB,QAEZxV,KACAA,IACT,CAwBe,MAAMgzB,WAAwBtB,GASzC/5D,yBAAyBs7D,GACrB,MAAMC,EAAgBD,EAAen3C,KAAK,0BAE1C,GAAIo3C,EAAc3nE,OAAQ,CACtB,MAAM64D,EAAU8O,EAAc,GAAGvgC,aAAa,WAE9C,GAAgB,SAAZyxB,GACe,cAAZA,GACY,cAAZA,GACY,SAAZA,EACH,OAAOA,CAEf,CAEA,OAAO,IACX,CASAzsD,iCAAiCs7D,GAC7B,MAAME,EAAsB,GACtBC,EAAuBH,EAAen3C,KAAK,8CACjD,IAAI69B,EAAWrvC,EAEf,OAAI8oD,EAAqB7nE,QACrB6nE,EAAqB5gC,MAAK,CAACC,EAAGznC,KAC1Bsf,EAAatf,EAAO2nC,aAAa,cACjCgnB,EAAY3uD,EAAO2nC,aAAa,aAChCwgC,EAAoBh8D,KAAK,CACrBwiD,YACArvC,cACF,IAGC6oD,GAGJ,IACX,CAoBA/pE,YACQozC,EACAm1B,EACAp4B,EACAzG,EACA8+B,EACAC,EACA/0D,EACA6sB,GACJl6B,MACI+sC,EACAm1B,EACAp4B,EAAWzG,EAAY8+B,EAAkBC,EAAUloC,GAWvD9hC,KAAKwrE,iBAAmB,KAQxBxrE,KAAKyrE,wBAAqBnrE,EAQ1BN,KAAK0rE,wBAAqBprE,EAQ1BN,KAAK2rE,6BAA+B,KAYpC3rE,KAAK4rE,2BAA6B,KAOlC5rE,KAAK6rE,gCAA6BvrE,EAgBlCN,KAAK8rE,mBAAoB,EAYzB9rE,KAAK+rE,oBAAqB,EAS1B/rE,KAAKgsE,oBAAqB,EAE1BhsE,KAAKisE,kBAAmB,EACxBjsE,KAAKksE,QAAS,EAQdlsE,KAAKiV,MAAQA,EAObjV,KAAKmsE,8BAA2B7rE,EAQhCN,KAAKosE,sBAAwB,EAQ7BpsE,KAAKqsE,sBAAwB,EAO7BrsE,KAAKssE,iCAA8BhsE,EAUnCN,KAAKusE,kBAAoB,IAAIrD,GAC7BlpE,KAAKusE,kBAAkB3F,QAOvB5mE,KAAKwsE,cAAe,EAQpBxsE,KAAKysE,2BAAwBnsE,EAE7BN,KAAK0sE,eAAiB,GACtB1sE,KAAK0sE,eAAep9D,KAChB27B,EAAWx/B,iBACP4mC,GAAeruC,OAAOsuC,oBACtBtyC,KAAK2sE,oBAAoBv8C,KAAKpwB,QAGtCA,KAAK4sE,iDAA8CtsE,CACvD,CASAusE,kBACI,OAAO7sE,KAAKukB,QAAUklD,EAC1B,CAMAc,aAAa1qE,GACTG,KAAKm6D,QAAUjwD,QAAQrK,EAAQs6D,SAC/Bn6D,KAAKisE,kBAAmB,EACxBjsE,KAAKH,QAAUA,EAMfG,KAAK8sE,aAAc,EAMnB9sE,KAAK+sE,WAAY,EACjB/sE,KAAKgtE,oBAAsB9iE,QAAQrK,EAAQmtE,qBAC3ChtE,KAAKitE,oBAAsB/iE,QAAQrK,EAAQotE,qBAE3C,MAAMC,EAAY,CAAEC,WAAYttE,EAAQstE,YAgBjC,IAAAC,EAAAC,EAAAC,EAdHztE,EAAQ0tE,cACRL,EAAUM,SAtWI,KAwWlBN,EAAUO,uBAAwB,EAClCP,EAAUQ,cAAgB7tE,EAAQ6tE,cAClCR,EAAUS,wBAA0B9tE,EAAQ8tE,wBAC5CT,EAAUU,aAAe/tE,EAAQ+tE,aACjCV,EAAUW,eAAiBhuE,EAAQguE,eACnCX,EAAUld,aAAenwD,EAAQmwD,aACjCkd,EAAUY,gBAAkB9tE,KAAK8tE,gBAAkB7/D,GAAQf,sBAEvDlN,KAAKiV,MAELi4D,EAAUa,kBAAmB,GAG7Bb,EAAUa,iBACJluE,EAAQkuE,mBAAwC,QAApBX,EAAAvtE,EAAQ+tE,oBAAY,IAAAR,OAAA,EAApBA,EAAsBY,kBAAmBhV,GAAciV,KAGzFf,EAAUO,sBAAwBP,EAAUa,oBACa,iBAAV,QAAtCV,EAAOxtE,EAAQ2wD,+BAAuB,IAAA6c,OAAA,EAA/BA,EAAiC7xD,OACP,QAA/B8xD,EAAAztE,EAAQ2wD,+BAAuB,IAAA8c,OAAA,EAA/BA,EAAiC9xD,KT3ZnB,IS8ZzB3b,EAAQ20B,cACR04C,EAAU14C,aAAc,GAG5Bx0B,KAAKgR,eACChR,KAAKkuB,IAAIggD,qBACHluE,KAAKmqE,gBACLnqE,KAAKgqE,SACLhqE,KAAKiV,MACLi4D,GAEZltE,KAAKgR,eAAem9D,eAAiBx7C,IACjC,IAAKA,EAMD,OAIJ,MAAMgiC,EAAYhiC,EAAGgiC,UACf54C,EAAMjT,OAAO4pB,YAAY3W,MAE/B,GAAI44C,EAAW,CAC6B,OAApC30D,KAAK4rE,6BACL5rE,KAAK4rE,2BAA6B7vD,GAItC,IAAIoJ,EAAWwvC,EAAUxvC,SAEzB,GAAwB,iBAAbA,EAEP,GADAA,EAAWA,EAAS6iC,cACH,QAAb7iC,GAAmC,WAAbA,GACtB,GAAInlB,KAAKitE,oBACL,YAED,GAAiB,QAAb9nD,GACHnlB,KAAKgtE,oBACL,MAIhB,MAAYhtE,KAAKgsE,qBAEbnkD,GAAWmF,cACPrqB,GACA,CACIyrE,MAAO,YACPzmE,MAAOoU,EAAM/b,KAAK4rE,2BAClBtmD,IAAKtlB,KAAKiV,MACVo5D,UAAWruE,KAAK8hC,cAExB9hC,KAAKgsE,oBAAqB,GAE1BhsE,KAAKiV,OACLjV,KAAKsuE,iBAAiB3Z,EAC1B,EAUJ30D,KAAKgR,eAAeu9D,uBAAyB,KACE,WAAvCvuE,KAAKgR,eAAew9D,eACpBxuE,KAAK+sE,WAAY,EAC6B,WAAvC/sE,KAAKgR,eAAew9D,gBACgB,WAAxCxuE,KAAKgR,eAAey9D,iBACvBzuE,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,iBAA6BhuB,KAC7D,EASJA,KAAKgR,eAAe09D,2BAA6B,KAC7C,MAAM3yD,EAAMjT,OAAO4pB,YAAY3W,MAC/B,IAAI4yD,GAAW,EAuBf,OArBK3uE,KAAKiV,QACNjV,KAAK4tB,KAAKyB,gBACL,aAAYrvB,KAAKgR,eAAe49D,sBAC/B7yD,GAEVtS,GAAOwG,IAAK,cAAajQ,KAAKgR,eAAe49D,sBAAsB5uE,KAAKiV,MAAQ,MAAQ,WAAY8G,GAEpG8L,GAAWmF,cACPnqB,GACA,CACIyiB,IAAKtlB,KAAKiV,MACVsP,MAAOvkB,KAAKgR,eAAe49D,mBAC3B,gBAAmB5uE,KAAKgR,eAAew9D,eACvCK,UAAW7uE,KAAK8sE,YAChBnlE,MAAOoU,IAGf/b,KAAK4tB,KAAKnT,aAAapR,KACnB2kB,GAAW,WAAXA,6BACAhuB,KACAA,KAAKgR,eAAe49D,oBAChB5uE,KAAKgR,eAAe49D,oBAC5B,IAAK,WACD5uE,KAAK2rE,6BAA+B5vD,EACpC,MACJ,IAAK,YAGD,GAA2C,WAAvC/b,KAAKgR,eAAew9D,eAA6B,CACjDG,GAAW,EACX,MAAMG,GAA2B9uE,KAAKH,QAAQkvE,kBACvC/uE,KAAK4tB,KAAK86B,8BAEb1oD,KAAK8sE,aAAegC,IACpB9uE,KAAK4tB,KAAKnT,aAAapR,KACnB2kB,GAAW,WAAXA,oBAAgChuB,KAE5C,CASA,IAAKA,KAAKwsE,eACFxsE,KAAK+sE,WACF4B,GACC3uE,KAAK8tE,iBAAmB9tE,KAAK8hC,cACzB7zB,GAAQpE,mBAAqBoE,GAAQjH,kBAAoB,CAErE6gB,GAAWmF,cACPrqB,GACA,CACIyrE,MAAO,WACPzmE,MAAOoU,EAAM/b,KAAK2rE,6BAClBrmD,IAAKtlB,KAAKiV,MACVo5D,UAAWruE,KAAK8hC,cAMxB,MAAMktC,EACAzzD,KAAK4yB,IACHnuC,KAAK2rE,6BACL3rE,KAAK4rE,4BAEb5rE,KAAKysE,sBAAwB1wD,EAAMizD,EAEnCnnD,GAAWmF,cACPrqB,GACA,CACIyrE,MAAO,gBACPzmE,MAAO3H,KAAKysE,sBACZnnD,IAAKtlB,KAAKiV,MACVo5D,UAAWruE,KAAK8hC,cAGxB9hC,KAAKwsE,cAAe,EACpBxsE,KAAK4tB,KAAKnT,aAAapR,KACnB2kB,GAAW,WAAXA,uBAAmChuB,KAC3C,CACAA,KAAK8sE,aAAc,EACnB,MACJ,IAAK,eACD9sE,KAAK8sE,aAAc,EAIf9sE,KAAK+sE,WACL/sE,KAAK4tB,KAAKnT,aAAapR,KACnB2kB,GAAW,WAAXA,uBAAmChuB,MAE3C,MACJ,IAAK,SACDA,KAAK4tB,KAAKnT,aAAapR,KACnB2kB,GAAW,WAAXA,sBAAkChuB,MAE1C,EAQJA,KAAKgR,eAAei+D,wBAA0B,KAC1C,MAAMC,EAAWlvE,KAAKgR,eAAe49D,mBAGhC,WADG5uE,KAAKgR,eAAey9D,iBAMP,iBAAbS,GACAlvE,KAAK4tB,KAAKnT,aAAapR,KACnB2kB,GAAW,WAAXA,sBAAkChuB,KAG9C,EAOJA,KAAKgR,eAAem+D,oBAAsB,KACtC,MAAM5qD,EAAQvkB,KAAKgR,eAAew9D,eAC5BY,EAAoBpvE,KAAKgR,eAAeo+D,kBAE9C,GAAIpvE,KAAK8tE,kBACD9tE,KAAKiV,OACI,WAAVsP,GACA6qD,GACiC,iBAA1BA,EAAkBrX,IAAkB,CAC9CtuD,GAAOE,KAAM,GAAE3J,qCAAqCA,KAAKgR,kBAEzD,MAAMq+D,EAAe9F,IACjB,MAAM+F,EAAS,IAAI9V,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAE5D/3D,KAAKwvE,eACAzvD,MAAK,KACF,MAAM0vD,EAAS,IAAIjW,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAE5D/3D,KAAK0vE,mBAAmBJ,EAAQG,EAAO,IAE1C1vD,MAAK,IAAMwpD,MAAoB3pE,GAAS2pE,EAAiB3pE,IAAO,EAGzEI,KAAKusE,kBAAkBj9D,KACnB+/D,GACAzvE,IACQA,EACA6J,GAAO7J,MAAO,GAAEI,iCAAkCJ,GAElD6J,GAAOgH,MAAO,GAAEzQ,yCACpB,GAEZ,EAER,CAOA2vE,8BACI,GAAI3vE,KAAKiV,MACL,OAAOjV,KAAKmsE,wBAIpB,CAOAyD,qCACI,GAAI5vE,KAAKiV,MACL,OAAOjV,KAAKssE,2BAIpB,CAOAgC,iBAAiB3Z,GACb,MAAMkb,EAAW,IAAIrW,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAE9D,GAAIpD,GAAaA,EAAUA,UAAUjxD,SAAW1D,KAAKisE,iBAAkB,CACnE,MAAM6D,EAAMtd,GAAAA,UAAkBqd,EAASp3B,MAAMkc,EAAUob,eAAgBF,EAASxiD,SAC1E2iD,EAAQxd,GAAAA,kBAA0BmC,EAAUA,WAElD,IAAMmb,IAAOE,EAAQ,CACjB,MAAMC,EAAgB,6BAKtB,OAHAz9D,KAAAA,iBAAsC,IAAItR,MAAM+uE,SAChDxmE,GAAO7J,MAAMqwE,EAGjB,CACAH,EAAItjC,MAAQ,uCAERxsC,KAAKiqE,SAC6B,IAA9BjqE,KAAKkqE,cAAcxmE,QACnB+1B,YAAW,KAC2B,IAA9Bz5B,KAAKkqE,cAAcxmE,SAGvB1D,KAAKkwE,kBAAkBlwE,KAAKkqE,eAC5BlqE,KAAKkqE,cAAgB,GAAE,GA5qBZ,KA+qBnBlqE,KAAKkqE,cAAc56D,KAAKqlD,IAExB30D,KAAKkwE,kBAAkB,CAAEvb,GAEjC,MACIlrD,GAAOwG,IAAK,GAAEjQ,yCAGdA,KAAKisE,kBAAmB,CAEhC,CAQAiE,kBAAkBC,GACd,IAAKnwE,KAAK6sE,gBAAgB,qBAEtB,OAGJpjE,GAAOwG,IAAK,GAAEjQ,0BAA0B2I,KAAKC,UAAUunE,MACvD,MAAM/a,GAAO9jB,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAK0xC,UACxBtuC,KAAM,QACLqlC,EAAE,SAAU,CAAE+D,MAAO,oBAClBvpC,OAAQ,iBACRorE,UAAWruE,KAAKoqE,aAChBz1B,IAAK30C,KAAK20C,MAEZk7B,EAAW,IAAIrW,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAE9D,IAAK,IAAIwC,EAAM,EAAGA,EAAMsV,EAASp3B,MAAM/0C,OAAQ62D,IAAO,CAClD,MAAM6V,EAAQD,EAAWl4D,QAAO4yB,GAAMA,EAAGklC,gBAAkBxV,IACrDxG,EACAvB,GAAAA,WAAmBqd,EAASp3B,MAAM8hB,GAAK5zC,MAAM,QAAQ,IAE3D,GAAIypD,EAAM1sE,OAAS,EAAG,CAClB,MAAMosE,EACAtd,GAAAA,UAAkBqd,EAASp3B,MAAM8hB,GAAMsV,EAASxiD,SAEtDyiD,EAAItjC,MAAQ,uCACZ4oB,EAAK3sB,EAAE,UAAW,CACd8yB,QAASv7D,KAAKoqE,eAAiBpqE,KAAK8pE,SAC9B,YAAc,YACpB/pE,KAAMqwE,EAAM,GAAGC,OAASD,EAAM,GAAGC,OAAStc,EAAMtb,QACjDhQ,EAAE,YAAaqnC,GAClB,IAAK,IAAI/pE,EAAI,EAAGA,EAAIqqE,EAAM1sE,OAAQqC,IAAK,CACnC,MAAM4uD,EACAnC,GAAAA,kBAA0B4d,EAAMrqE,GAAG4uD,WAIrC30D,KAAKm6D,UACLxF,EAAU5vC,GAAK,WAEnBqwC,EAAK3sB,EAAE,YAAaksB,GAAWxc,IACnC,CAGA,MAAMm4B,EACA9d,GAAAA,SACEqd,EAASp3B,MAAM8hB,GACf,iBAAkBsV,EAASxiD,SAEnC,GAAIijD,EAAiB,CACjB,MAAMzjC,EAAM2lB,GAAAA,iBAAyB8d,GAErCzjC,EAAI0jC,UAAW,EACfnb,EAAK3sB,EACD,cACA,CAAE+D,MAAO,gCACRnnB,EAAEwnB,EAAI2nB,oBACJ3nB,EAAI2nB,YACXY,EAAKpe,MAAMnK,GACXuoB,EAAKjd,IACT,CACAid,EAAKjd,KACLid,EAAKjd,IACT,CACJ,CAKAn4C,KAAKirC,WAAWkL,OACZif,EAAM,KAAMp1D,KAAKwwE,sBAAsBpb,GAAO4V,GACtD,CASAyF,4BACI,MAAMC,GACAp/B,EAAAA,GAAAA,KAAI,CACFC,GAAIvxC,KAAK0xC,UACTtuC,KAAM,QACTqlC,EAAE,SAAU,CAAE+D,MAAO,oBAClBvpC,OAAQ,eACRorE,UAAWruE,KAAKoqE,aAChBz1B,IAAK30C,KAAK20C,MACblM,EAAE,YAAa,CAAE+D,MAAO,oCACxBnnB,EAAE,UACF8yB,KAELn4C,KAAKwrE,kBACEkF,EAAYjoC,EACX,iBAAkB,CACd+D,MAAO,kCACP3mB,GAAI7lB,KAAKwrE,mBAGrBxrE,KAAKirC,WAAWuG,QACZk/B,EAAa,CAMTtkC,QAAS,KAEZlsB,MAAMlgB,KAAKwwE,sBAAsBE,GAC1C,CAKAlG,iBAAiB/zB,GACb,GAA2C,WAAvCz2C,KAAKgR,eAAew9D,eAGpB,YAFA/kE,GAAON,KAAM,GAAEnJ,uDAKnB,MAAM2wE,EAAgB,GAEtBl6B,EAAKxiB,KAAK,gCACL0W,MAAK,CAACtQ,EAAKs6B,KACR,IAAI1B,EAAOT,GAAAA,oBAA4BmC,GAEvC1B,EAAOA,EAAK7jB,QAAQ,OAAQ,IAAIA,QAAQ,KAAM,IAI9C,MAAMwhC,EAAe,IAAIC,gBAAgB,CACrCd,cAAe,EAOfM,OAAQ,GACR1b,UAAW1B,IAGf0d,EAAcrhE,KAAKshE,EAAa,IAGnCD,EAAcjtE,QAsBnB+F,GAAOgH,MAAO,GAAEzQ,oBAAoB2wE,EAAcjtE,+BAClD1D,KAAKusE,kBAAkBj9D,MAbFi6D,IACjB,IAAK,MAAMuH,KAAgBH,EACvB3wE,KAAKgR,eAAe+/D,gBAAgBD,GAC/B/wD,MACG,IAAMtW,GAAOgH,MAAO,GAAEzQ,8BACtBksB,GAAOziB,GAAO7J,MAAO,GAAEI,+BAAgCksB,KAGnEq9C,IACA9/D,GAAOgH,MAAO,GAAEzQ,oCAAoC,KAlBpDyJ,GAAO7J,MAAO,GAAEI,kCAAmCy2C,EAAK,IAAMA,EAAK,GAAGu6B,UAuB9E,CAMAC,aAAazT,GACK9yB,KAAE8yB,GAAUvpC,KAAK,gEAEzB0W,MAAK,CAAC5kC,EAAGmrE,KACX,MAAMv/D,EAAOzL,OAAOgrE,EAAYpmC,aAAa,SAE7C,GAAIomC,EAAY5T,aAAa,QAAS,CAClC,MAAM76C,EAAayuD,EAAYpmC,aAAa,QAE5C9qC,KAAKmqE,gBAAgBgH,mBAAmBx/D,EAAM8Q,EAClD,CAEIziB,KAAKiV,MAELjV,KAAKmqE,gBAAgBiH,aAAaz/D,EAAM4c,GAAAA,QAAAA,mBAA2BvuB,KAAK0xC,YAExEhH,KAAEwmC,GACGj9C,KAAK,gDACL0W,MAAK,CAAC0mC,EAAIC,KACP,MAAM3jB,EAAQ2jB,EAAgBxmC,aAAa,SA73BnE,IAAuBymC,EA+3BK5jB,SAAAA,EAAOjqD,SACHigB,MAAMhS,IAASA,EAAO,EACtBlI,GAAON,KAAM,GAAEnJ,qBAAqB2R,wBAA2Bg8C,KAE/D3tD,KAAKmqE,gBAAgBiH,aAAaz/D,GAn4B3C4/D,EAm4B+D5jB,EAl4B3Ep/B,GAAAA,QAAAA,mBAA2BgjD,IAAoBA,IAo4BlC,GAEZ,GAER,CAOAC,uBACQxxE,KAAKgR,eACLhR,KAAKgR,eAAewgE,uBAEpB/nE,GAAO7J,MAAO,GAAEI,4DAExB,CAKAyxE,0BACI,OAAOzxE,KAAKgR,eAAeygE,yBAC/B,CAgBA3G,YAAY4G,EAAah8D,EAASm1D,EAASjuC,GACvC58B,KAAK2xE,oBACDD,GACA,KAII1xE,KAAK4xE,mBAAkB,KAEnBnoE,GAAOgH,MAAM,iEACbzQ,KAAKusE,kBAAkBp0D,SAEvBzC,IACA1V,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,eAA2BhuB,MAOvD,MAAM6xE,EAAcj1C,EAAY3kB,QAAOoK,GAASA,EAAMoL,YAAcpR,GAAUwK,QAE9EgrD,EAAYnuE,QAAUmuE,EAAYtiE,OAAO,EAAG,GACxCiT,GAAAA,mCAAkDqvD,EAAYnuE,QAC9D1D,KAAK8xE,UAAUD,EACnB,IAEJjyE,IACIirE,EAAQjrE,GACRI,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,qBAAiChuB,KAAMJ,EAAM,GAC3E,GAENirE,EACAjuC,EACR,CAQAotB,SAAyB,IAAlBptB,EAAWn5B,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GACjB,IAAKzD,KAAK8hC,YACN,MAAM,IAAI5gC,MAAM,+CAEpBuI,GAAOgH,MAAO,GAAEzQ,8BAEhB,MAAM8xE,EAAY,GAElB,IAAK,MAAMzvD,KAASua,EAChBk1C,EAAUxiE,KAAKtP,KAAKgR,eAAe+gE,SAAS1vD,EAAOriB,KAAK8hC,cAG5DztB,QAAQ29D,IAAIF,GACP/xD,MAAK,IAAM/f,KAAKgR,eAAeihE,YAAYjyE,KAAK+pE,oBAChDhqD,MAAKmyD,GAAYlyE,KAAKgR,eAAemhE,oBAAoBD,KACzDnyD,MAAK,KACF/f,KAAKgR,eAAeohE,kCAAkCx1C,GAItD58B,KAAKqyE,oBAAoBryE,KAAKgR,eAAeu+D,iBAAiBxX,IAAI,IAErEh4C,MAAK,KACFtW,GAAOgH,MAAO,GAAEzQ,4BAA4B,IAE/CkgB,OAAMtgB,IACH6J,GAAO7J,MAAO,GAAEI,oBAAqBJ,EAAM,GAEvD,CAYAyyE,oBAAoBH,GAChB,IAAI51D,GAAOg1B,EAAAA,GAAAA,KAAI,CACXC,GAAIvxC,KAAK0xC,UACTtuC,KAAM,QACPqlC,EAAE,SAAU,CACX+D,MAAO,oBACPvpC,OAAQ,mBACRorE,UAAWruE,KAAKoqE,aAChBz1B,IAAK30C,KAAK20C,MAGd,IAAI6kB,GAAI0Y,GAAU9W,SACd9+C,EACAtc,KAAK8hC,YAAc,YAAc,aACrCxlB,EAAOA,EAAK86B,OACZ3tC,GAAOgH,MAAO,GAAEzQ,0BAA2Bsc,GAC3Ctc,KAAKirC,WAAWkL,OAAO75B,GACnB,KACI7S,GAAOE,KAAM,GAAE3J,yCAAyC,IAE5DJ,IACI6J,GAAO7J,MAAO,GAAEI,gCAAiCJ,EAAM,GAE3DorE,GACR,CAOAsH,UAAUC,GACN,IAAKvyE,KAAK8hC,YACN,MAAM,IAAI5gC,MAAM,oDAEpBuI,GAAOgH,MAAO,GAAEzQ,iCAEhB,MAAMwyE,EAAexyE,KAAKyyE,yBAAyBF,GAC7CG,EAAc,IAAIlZ,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAC3DqX,EAAoB,IAAIuD,sBAAsB,CAChDvvE,KAAM,SACN20D,IAAKya,EAAa9Y,MAGtB15D,KAAKgR,eAAe4hE,qBAAqBxD,GACpCrvD,MAAK,KACF,GAAI/f,KAAKukB,QAAUklD,GAA4B,CAC3CzpE,KAAKukB,MAAQklD,GAGbhgE,GAAOgH,MAAM,iEACbzQ,KAAKusE,kBAAkBp0D,SACvB,MAAM06D,EAAc,IAAIrZ,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAEjE/3D,KAAK8yE,oBACL9yE,KAAK0vE,mBAAmBgD,EAAaG,EACzC,KAEH9yD,MAAK,KACFtW,GAAOgH,MAAO,GAAEzQ,2BAA2B,IAE9CkgB,OAAMtgB,IACH6J,GAAO7J,MAAO,GAAEI,+BAA+BJ,IAAQ,GAEnE,CAcA+xE,oBAAoBoB,EAAqBr9D,EAASm1D,GAA2B,IAAlBjuC,EAAWn5B,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GACrEgG,GAAOgH,MAAO,GAAEzQ,2CAEhB,MAAM8xE,EAAY,GACZkB,EAAcp2C,EAAY3kB,QAAOoK,GAASA,EAAMoL,YAAcpR,GAAUkL,QACxEsqD,EAAcj1C,EAAY3kB,QAAOoK,GAASA,EAAMoL,YAAcpR,GAAUwK,QAC9E,IAAIosD,EAASr2C,EAKTpa,GAAAA,mCAAkDqvD,EAAYnuE,OAAS,IACvEuvE,EAAS,IAAKD,EAAanB,EAAY,KAE3C,IAAK,MAAMxvD,KAAS4wD,EAChBnB,EAAUxiE,KAAKtP,KAAKgR,eAAe+gE,SAAS1vD,EAAOriB,KAAK8hC,cAE5D,MAAM0wC,EAAexyE,KAAKyyE,yBAAyBM,GAC7CL,EAAc1yE,KAAKgR,eAAeu+D,iBAAiBxX,IAGnDmb,EADgBxoC,KAAEqoC,GAAqB9+C,KAAK,4DACZysB,KAAK,MAEvCwyB,IAAoBlzE,KAAKwrE,mBACzBxrE,KAAKwrE,iBAAmB0H,GAE5B,MAAM9D,EAAoB,IAAIuD,sBAAsB,CAChDvvE,KAAM,QACN20D,IAAKya,EAAa9Y,MAGtBrlD,QAAQ29D,IAAIF,GACP/xD,MAAK,IAAM/f,KAAKmzE,sBAAsB/D,KACtCrvD,MAAK,KAoBF,GAnBA/f,KAAKgR,eAAeohE,kCAAkCa,GAClDjzE,KAAKukB,QAAUklD,KACfzpE,KAAKukB,MAAQklD,IASTzpE,KAAKiV,OACAjV,KAAK8rE,oBAAqB9rE,KAAK6rE,4BACpC7rE,KAAK8yE,qBAMTJ,EAAa,CACb,MAAMG,EAAc,IAAIrZ,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAEjE/3D,KAAK0vE,mBAAmB,IAAIlW,GAAIkZ,GAAcG,EAClD,KAEH9yD,MAAK,KACFtW,GAAOgH,MAAO,GAAEzQ,sCAChB0V,GAAS,IAEZwK,OAAMtgB,IACH6J,GAAO7J,MAAO,GAAEI,yCAAyCJ,KACzDirE,EAAQjrE,EAAM,GAE1B,CASAwzE,iBAAkD,IAAnCC,EAAS5vE,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,KAAM6vE,EAAQ7vE,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,KACxC,GAAIzD,KAAK6sE,kBAAmB,CACxBpjE,GAAOE,KAAM,GAAE3J,kCAAkCqzE,eAAuBC,KACxEtzE,KAAKgR,eAAeoiE,eAAeC,EAAWC,GAG9C,MAAMjE,EAAe9F,IACjBvpE,KAAKwvE,eAAezvD,MAChB,KACItW,GAAOgH,MAAO,GAAEzQ,oCAETupE,OACR3pE,IACC6J,GAAO7J,MAAO,GAAEI,oCAAoCJ,KAE7C2pE,EAAiB3pE,KAC1B,EAGV6J,GAAOgH,MAAO,GAAEzQ,mCAGhBA,KAAKusE,kBAAkBj9D,KAAK+/D,EAChC,CACJ,CAYAkE,iBAAiBC,EAAiB99D,EAASm1D,GACvC,GAAI7qE,KAAKH,QAAQ4zE,mBAAoB,CACjC,MAAM1b,EAAM,IAAIyB,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAKzD,OAHA/3D,KAAK0zE,oBAAoB3b,EAAKriD,EAASm1D,QACvC7qE,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,qBAAiChuB,KAGjE,CACAA,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,eAA2BhuB,MAMvD,MAAM2zE,EAAgBH,EAAgBI,QAEtCJ,EACKv/C,KAAK,yBACLysB,KAAK,UAAW,YAQrB8yB,EACKv/C,KAAK,+BACLm0B,SACLorB,EACKv/C,KAAK,mCACLm0B,SAML,MAAMyrB,EAAiBL,EAAgBv/C,KAAK,kCAE5C4/C,EAAenzB,KAAK,OAAQ,SAC5BmzB,EAAexyB,KAAK,+DA+BpB53C,GAAOgH,MAAO,GAAEzQ,gCAGhBA,KAAKusE,kBAAkBj9D,MAhCFi6D,IAEjBvpE,KAAK2xE,oBACD6B,GACA,KAEIxzE,KAAK2xE,oBACDgC,GACA,KACI,MAAM9D,EAAW,IAAIrW,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAErB,iBAA9B/3D,KAAKH,QAAQi0E,cAA6B9zE,KAAKH,QAAQi0E,cAAgB,IAC9EjE,EAASpU,aAAez7D,KAAKH,QAAQi0E,cAGzC9zE,KAAK0zE,oBAAoB7D,EAAUn6D,EAASm1D,GAE5C7qE,KAAK4tB,KAAKnT,aAAapR,KACnB2kB,GAAW,WAAXA,oBACAhuB,KACA2zE,GAEJpK,GAAkB,IACnB3pE,GAAS2pE,EAAiB3pE,IAChC,IACFA,GAAS2pE,EAAiB3pE,IAChC,IAQDA,IACQA,GACA6J,GAAO7J,MAAO,GAAEI,iCAAiCJ,KACjDirE,EAAQjrE,KAER6J,GAAOgH,MAAO,GAAEzQ,8BAChB0V,IACJ,GAEZ,CAUAk8D,kBAAkBl8D,EAASm1D,GAGvB,MAAMgF,EAAW,IAAIrW,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KACxDgc,GAASziC,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAK0xC,UAC1BtuC,KAAM,QACLqlC,EAAE,SAAU,CAAE+D,MAAO,oBAClBvpC,OAAQ,iBACRorE,UAAWruE,KAAKoqE,aAChB4J,UAAWh0E,KAAKqqE,aAChB11B,IAAK30C,KAAK20C,MAEd30C,KAAKitE,sBACL4C,EAASzV,qBAAsB,GAE/Bp6D,KAAKgtE,sBACL6C,EAASxV,qBAAsB,GAE/Br6D,KAAKm6D,UACL0V,EAAS1V,SAAU,GAEkB,iBAA9Bn6D,KAAKH,QAAQi0E,cAA6B9zE,KAAKH,QAAQi0E,cAAgB,IAC9EjE,EAASpU,aAAez7D,KAAKH,QAAQi0E,cAEzCjE,EAASzU,SACL2Y,EACA/zE,KAAKoqE,eAAiBpqE,KAAK8pE,SAAW,YAAc,aAExDrgE,GAAOE,KAAM,GAAE3J,+BACfyJ,GAAOgH,MAAMsjE,EAAO38B,QACpBp3C,KAAKirC,WAAWkL,OAAO49B,EACnBr+D,EACA1V,KAAKwwE,sBAAsBuD,GAAQn0E,IAC/BirE,EAAQjrE,GAIRI,KAAK4tB,KAAKnT,aAAapR,KACnB2kB,GAAW,WAAXA,uBAAmChuB,KAAK,IAEhDgrE,GAqBR,CAOA8H,oBACI,MAAMvW,EAAUv8D,KAAK8rE,kBAAoB,OAAS,OAC5CmI,GACA3iC,EAAAA,GAAAA,KAAI,CACFC,GAAIvxC,KAAK0xC,UACTtuC,KAAM,QAELqlC,EAAE,SAAU,CACT+D,MAAO,oBACPvpC,OAAQ,iBACRorE,UAAWruE,KAAKoqE,aAChBz1B,IAAK30C,KAAK20C,MAEblM,EAAE,UAAW,CACV1oC,KAAMsc,GAAUwK,MAChB01C,iBAGmC,IAApCv8D,KAAK6rE,4BACZ7rE,KAAK6rE,2BAA2Bz9D,SAAQ,CAAC0jD,EAAWrvC,KAChDwxD,EACKxrC,EAAE,sBAAuB,CAAE+D,MAAO,mCAClCwK,MAAM,CACHv0B,aACAqvC,cAGRmiB,EAAc97B,KACd1uC,GAAOE,KAAM,GAAE3J,gDAAgDyiB,iBAA0BqvC,IAAY,IAI7GroD,GAAOgH,MAAMwjE,EAAc78B,QAE3Bp3C,KAAKirC,WAAWkL,OACZ89B,EACA,KACAj0E,KAAKwwE,sBAAsByD,GAC3BjJ,GACR,CAQAkJ,2BAA2BC,GACvB1qE,GAAOE,KAAM,GAAE3J,kDAAkD2I,KAAKC,UAAUurE,MAChFn0E,KAAK6rE,2BAA6BsI,EAE9Bn0E,KAAKiV,OAGDjV,KAAKukB,QAAUklD,IACfzpE,KAAK8yE,mBAGjB,CAYAY,oBAAoB7D,EAAUn6D,EAASm1D,GACnC,MAAMuJ,GAAkB9iC,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAK0xC,UACnCtuC,KAAM,QACLqlC,EAAE,SAAU,CACT+D,MAAO,oBACPvpC,OAAQ,mBACRorE,UAAWruE,KAAKoqE,aAChBz1B,IAAK30C,KAAK20C,MAGlBk7B,EAASp3B,MAAMrqC,SAAQ,CAACimE,EAAYh6C,KAChC,MAAM05B,EAAQvB,GAAAA,WAAmB6hB,EAAW1tD,MAAM,QAAQ,IAE1DytD,EAAgB3rC,EAAE,UACd,CACI8yB,QACIv7D,KAAKoqE,eAAiBpqE,KAAK8pE,SACrB,YACA,YACV/pE,KAAMg0D,EAAMtb,QAGpBo3B,EAASpT,kBAAkBpiC,EAAK+5C,GAChCA,EAAgBj8B,IAAI,IAGxB1uC,GAAOE,KAAM,GAAE3J,iCACfyJ,GAAOgH,MAAM2jE,EAAgBh9B,QAE7Bp3C,KAAKirC,WAAWkL,OAAOi+B,EACnB1+D,EACA1V,KAAKwwE,sBAAsB4D,EAAiBvJ,GAC5CG,GACR,CAaAsJ,oBAAoB5+D,EAASm1D,GAGzB,MAAM0J,GAAkBjjC,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAK0xC,UACnCtuC,KAAM,QACLqlC,EAAE,SAAU,CACT+D,MAAO,oBACPvpC,OAAQ,mBACRorE,UAAWruE,KAAKoqE,aAChBz1B,IAAK30C,KAAK20C,MAGlBlrC,GAAOE,KAAM,GAAE3J,mCACfyJ,GAAOgH,MAAM8jE,EAAgBn9B,QAE7Bp3C,KAAKirC,WAAWkL,OAAOo+B,EACnB7+D,EACA1V,KAAKwwE,sBAAsB+D,EAAiB1J,GAC5CG,GACR,CASAwJ,yBAAyBC,GAAmC,IAAnBhyD,EAAUhf,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,KAClD,GAAIzD,KAAK6sE,kBAAmB,CACxBpjE,GAAOE,KAAM,GAAE3J,kCAAkCy0E,kBAA+BhyD,KAEhF,MAAMiyD,EAAkBjyD,EAClBziB,KAAKkuB,IAAIymD,sBAAsB1gD,MAAK5R,GAASA,EAAMK,kBAAoBD,IACvEziB,KAAKkuB,IAAI0mD,qBAEf,OAAO50E,KAAKgR,eAAe6jE,0BAA0BJ,EAAgBC,EACzE,CAEA,OAAOrgE,QAAQC,SACnB,CAKAs2D,UAAUl1D,EAASm1D,EAAShrE,GACxB,GAAIG,KAAKukB,QAAUklD,GAAnB,CAIA,IAAK5pE,GAAWqK,QAAQrK,EAAQi1E,sBAAuB,CACnD,MAAMC,GACAzjC,EAAAA,GAAAA,KAAI,CACFC,GAAIvxC,KAAK0xC,UACTtuC,KAAM,QAELqlC,EAAE,SAAU,CACT+D,MAAO,oBACPvpC,OAAQ,oBACRorE,UAAWruE,KAAKoqE,aAChBz1B,IAAK30C,KAAK20C,MAEblM,EAAE,UACFA,EAAG5oC,GAAWA,EAAQ6U,QAAW,WACjCyjC,KAELt4C,GAAWA,EAAQm1E,kBACnBD,EACKtsC,EAAE,QACFpjB,EAAExlB,EAAQm1E,mBACV78B,KACAA,KAEL48B,EAAiB58B,KAGrBn4C,KAAKwrE,kBACEuJ,EAAiBtsC,EAChB,iBAAkB,CACd+D,MAAO,kCACP3mB,GAAI7lB,KAAKwrE,iBACTyJ,QAASp1E,IAAsC,IAA3BA,EAAQq1E,iBAC7B/8B,KAEX1uC,GAAOE,KAAM,GAAE3J,kCACfyJ,GAAOgH,MAAMskE,EAAiB39B,QAE9Bp3C,KAAKirC,WAAWkL,OACZ4+B,EACAr/D,EACA1V,KAAKwwE,sBAAsBuE,EAAkBlK,GAC7CG,GACR,MACIvhE,GAAOE,KAAM,GAAE3J,0CAInBA,KAAKirC,WAAWijB,OAAO0c,UAAU5qE,KAAK20C,IAjDtC,CAkDJ,CAOAwgC,aAAaC,EAAiBC,GAI1B5rE,GAAOE,KAAM,GAAE3J,0BAA2Bo1E,EAAiBC,GAE3Dr1E,KAAK0sE,eAAet+D,SAAQwb,GAAkBA,MAC9C5pB,KAAK0sE,eAAiB,GAElB1sE,KAAK4sE,6CACL5sE,KAAK4sE,8CAGLpqD,GAAAA,4BAA2CxiB,KAAKgR,gBAChDhR,KAAKgR,eAAeskE,kBAAkBlnE,SAAQiU,IAC1CriB,KAAK4tB,KAAKnT,aAAapR,KAAKhL,GAAiBvB,cAAeulB,EAAM,IAI1EriB,KAAK+Z,OACT,CAOA4yD,oBAAoBl4D,GACZA,IAAW49B,GAAeG,OAAOwU,WAAahnD,KAAKyrE,qBACnDhiE,GAAOE,KAAM,GAAE3J,yCACfA,KAAK0vE,mBACD1vE,KAAKyrE,mBACLzrE,KAAK0rE,oBAEjB,CAYA6J,4BAA4BC,EAAeC,GACvC,MAAMC,EAAc,GACd59E,EAAOkI,KA0Eb,OAxEA0qC,KAAE8qC,GAAe7qC,MAAK,CAACgrC,EAAIvnB,KACvB,MAAMruD,EAAO2qC,KAAE0jB,GAAS1N,KAAK,QAC7B,IAAI8U,EAAQ,GAEZ9qB,KAAE0jB,GACGn6B,KAAK,uDACL0W,MAAK,WAEF,MAAMqjB,EAAYhuD,KAAK8qC,aAAa,aAC9B+jB,EACAnkB,KAAE1qC,MACCi0B,KAAK,WACLyJ,KAAI,WAED,OAAO19B,KAAK8qC,aAAa,OAC7B,IACCnmB,MAELkqC,EAAMnrD,SACN8xD,GAAU,gBAAexH,KAAaa,EAAMruD,KAAK,WAEzD,IAIEkqC,KAAE0jB,GAASn6B,KACT,mDAGJ0W,MAAK,WACL,MAAMh5B,EAAO+4B,KAAE1qC,MAAM0gD,KAAK,QAEtB+0B,EAAiBva,aAAavpD,KAG5B7Z,EAAKg2E,kBAAmBh2E,EAAKmd,QACxBxL,GAAON,KAAM,GAAErR,2CAA8C6Z,KAMxE+4B,KAAE1qC,MAAMi0B,KAAK,cAAc0W,MAAK,WAC5B6qB,GAAU,UAAS7jD,KAAQ+4B,KAAE1qC,MAAM0gD,KAAK,UACpChW,KAAE1qC,MAAM0gD,KAAK,UAAYhW,KAAE1qC,MAAM0gD,KAAK,SAASh9C,SAC/C8xD,GAAU,IAAG9qB,KAAE1qC,MAAM0gD,KAAK,YAE9B8U,GAAS,MACb,GACJ,IAEA,IAAIogB,GAAW,EAGfH,EAAiBh9B,MAAMrqC,SAAQ,CAACqqC,EAAOo9B,KAC9BrjB,GAAAA,SAAiB/Z,EAAQ,SAAQ14C,OAGjC21E,EAAYG,KACbH,EAAYG,GAAM,IAEtBH,EAAYG,IAAOrgB,EACnBogB,GAAW,EAAI,KAKdA,GAAY51E,KAAKiV,QAClBygE,EAAY31E,GAAQy1D,EACxB,IAGGkgB,CACX,CAMAI,gBAAgBr/B,GACZz2C,KAAK+1E,0BAAyB,EAAgBt/B,EAClD,CAMAu/B,mBAAmBv/B,GACfz2C,KAAK+1E,0BAAyB,EAAoBt/B,EACtD,CAUA5jB,iBAAiBtyB,EAASuD,GACtB,MAAMmyE,EAAW,GAEjB,IAAK,MAAM37C,KAAO/5B,EAAQ21E,cAAe,CAErC,IAAI,MAAEvoB,EAAK,OAAExqD,EAAM,KAAEwO,EAAI,UAAEqhB,GAAcsH,EAErC67C,EAAaxkE,EAEjB,GAHkB3R,KAAKgR,eAAeolE,cAAczkE,EAAMxO,GAG3C,CACX8yE,EAAS3mE,KAAKgrB,GAGd,MAAM+7C,EAAUr2E,KAAKgR,eAAeslE,cAAc3xD,IAAIxhB,GAElDkzE,IACAF,EAAaE,EACb1oB,OAAQrtD,EACR6C,OAAS7C,EAEjB,CACA,MAAM+hB,EAAQriB,KAAKgR,eAAesR,eAAe6zD,GAEjD,GAAI9zD,EAAO,CASP,GARA5Y,GAAOgH,MAAO,iBAAgBkB,gBAAmBg8C,kBAAsBxqD,KAGvEnD,KAAKmqE,gBAAgBiH,aAAaz/D,EAAMg8C,GAGxCtrC,EAAMk0D,cAAcpzE,GACpBkf,EAAMm0D,SAAS7oB,GACX7pD,IAAcuY,GAAUwK,MAAO,CAC/B,MAAMzjB,EAAqB,WAAd4vB,EAAyBC,GAAU,UAAVA,OAAmBA,GAAU,UAAVA,QAEzD5Q,EAAMo0D,cAAcrzE,EACxB,CAIA,MAAMszE,EAAgB12E,KAAKmqE,gBAAgBwM,iBAAiBhpB,EAAO7pD,EAAWX,GAE9EuzE,GAAiB12E,KAAKgR,eAAe4lE,oBAAoBzzE,EAAQuzE,EAAc/qD,MACnF,CACJ,CAGA,GAAIsqD,EAASvyE,OAAQ,CACjB,IAAIqsB,GAAO89B,EAAAA,GAAAA,QAAO,UAAW,CACzBrhB,MAAO,oBACPzsC,KAAM+D,IACP2kC,EAAE,cAAe,CAChB+D,MAAO,6BACPiM,MAAO30C,IAGX,IAAK,MAAMw2B,KAAO27C,EAAU,CACxB,MAAM,IAAEY,EAAG,KAAEllE,EAAI,OAAExO,GAAWm3B,EAC9B,IAAIogC,EAEJ,GAAI52D,IAAcuY,GAAUwK,MAAO,CAC/B,MAAMwT,IAAQr6B,KAAKosE,sBAEnB1R,EAAQ,gBAAergC,kBAAoBA,IAE/B,OAARw8C,IACA5L,GAAkBl7C,EAAMuK,EAAKu8C,EAAKnc,GAClC3qC,EAAK0Y,EAAE,aAAc,CACjB+D,MAAO,kCACPwhB,UAAW,QAEVvlB,EAAE,SAAU,CACT+D,MAAO,kCACP76B,SAEHwmC,KACA1P,EAAE,SAAU,CACT+D,MAAO,kCACP76B,KAAMklE,IAET1+B,KACAA,KAEb,KAAO,CACH,MAAM9d,IAAQr6B,KAAKqsE,sBAEnB3R,EAAQ,gBAAergC,kBAAoBA,GAC/C,CACA4wC,GAAkBl7C,EAAMuK,EAAK3oB,EAAM+oD,GACnC16D,KAAKgR,eAAeslE,cAAcxwD,IAAI3iB,EAAQwO,EAClD,CACAoe,EAAOA,EAAKooB,KACZn4C,KAAK+1E,0BAAyB,EAAgBhmD,EAAKA,KACvD,CACJ,CAQA+mD,2BAA2BjxD,GAqBvBpc,GAAOgH,MAAO,GAAEzQ,+DAA+D6lB,KAE/E7lB,KAAKusE,kBAAkBj9D,MAtBFynE,IACjB,MAAMC,EAAiBh3E,KAAKgR,eAAeimE,iCAAiCpxD,GAE5E,GAAImxD,EAAetzE,OAAQ,CACvB,MAAMgvE,EAAc,IAAIlZ,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAC3Dya,EAAexyE,KAAKk3E,2BAA2BF,GAErDh3E,KAAKwvE,aAAagD,EAAa9Y,KAC1B35C,MAAK,KACF,MAAMo3D,EAAc,IAAI3d,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAEjE/3D,KAAK0vE,mBAAmBgD,EAAayE,GACrCJ,GAAgB,IAEnB72D,OAAMgM,GAAO6qD,EAAe7qD,IACrC,MACI6qD,GACJ,IAOAn3E,IACQA,EACA6J,GAAO7J,MAAO,GAAEI,yCAA0CJ,GAE1D6J,GAAOE,KAAM,GAAE3J,wCACnB,GAEZ,CAUA+1E,yBAAyBqB,EAAO3gC,GAC5B,MAAM4gC,EAAYD,EAAQ,kBAAoB,qBAE1CA,GACAp3E,KAAKixE,aAAax6B,GA8CtBhtC,GAAOgH,MAAO,GAAEzQ,eAAeq3E,UAG/Br3E,KAAKusE,kBAAkBj9D,MA9CFi6D,IACjB,IAAKvpE,KAAKgR,eAAeu+D,mBACjBvvE,KAAKgR,eAAeu+D,iBAAiBxX,IAAK,CAC9C,MAAMuf,EAAU,GAAED,qCAKlB,OAHA5tE,GAAO7J,MAAM03E,QACb/N,EAAiB+N,EAGrB,CAEA7tE,GAAOwG,IAAK,GAAEjQ,mBAAmBq3E,KAEjC,MAAM3E,EAAc,IAAIlZ,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAC3DA,EAAM,IAAIyB,GAAIx5D,KAAKgR,eAAeo+D,kBAAkBrX,KACpDwf,EACAH,EACIp3E,KAAKu1E,4BAA4B9+B,EAAMshB,GACvC/3D,KAAKw3E,+BAA+B/gC,EAAMshB,GAC9Cya,EACA4E,EACIp3E,KAAKy3E,wBAAwBF,GAC7Bv3E,KAAKk3E,2BAA2BK,GACpCnI,EAAoB,IAAIuD,sBAAsB,CAChDvvE,KAAM,QACN20D,IAAKya,EAAa9Y,MAMtB15D,KAAKmzE,sBAAsB/D,GAAmBrvD,MAAK,KAC/C,MAAM8yD,EAAc,IAAIrZ,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAEjEtuD,GAAOwG,IAAK,GAAEjQ,QAAQq3E,UACtBr3E,KAAK0vE,mBAAmBgD,EAAaG,GACrCtJ,GAAkB,IACnB3pE,IACC6J,GAAO7J,MAAO,GAAEI,QAAQq3E,YAAqBz3E,GAC7C2pE,EAAiB3pE,EAAM,GACzB,GAOV,CAOA6yE,yBAAyBhkD,GACrB,MAAMipD,EAAY,IAAIle,GAAI,IAe1B,OAbIx5D,KAAKitE,sBACLyK,EAAUtd,qBAAsB,GAEhCp6D,KAAKgtE,sBACL0K,EAAUrd,qBAAsB,GAEhCr6D,KAAKm6D,UACLud,EAAUvd,SAAU,GAGxBud,EAAUna,WAAW9uC,GACrBzuB,KAAKixE,aAAavmC,KAAEjc,GAASwF,KAAK,aAE3ByjD,CACX,CASAR,2BAA2BF,GAAgB,IAAAW,EACvC,MAAMD,EAAY13E,KAAK8tE,gBACjB,IAAItU,GAAIx5D,KAAKgR,eAAeA,eAAeo+D,kBAAkBrX,KAC7D,IAAIyB,GAAIx5D,KAAKgR,eAAeo+D,kBAAkBrX,KACpD,IAAIlJ,EAoDJ,OAlDAmoB,EAAe5oE,SAAQ,CAAConD,EAAOn7B,KAM3B,IAJAm7B,EAAQA,EAAM7uC,MAAM,SACditC,MACN/E,EAAQ2G,EAAM93B,KAAIu1B,IAAI,IAAA2kB,EAAA,OAAI1xE,OAA+B,QAAzB0xE,EAAC3kB,EAAKtsC,MAAM,WAAW,UAAE,IAAAixD,OAAA,EAAxBA,EAA0BjxD,MAAM,KAAK,GAAG,IAErE3mB,KAAK8tE,gBAAiB,CACtB,IAAIvT,EA0BJ,GAxBA/E,EAAMpnD,SAAQ6kD,IAGV,GAFAsH,EAAMmd,EAAUj/B,MAAMo/B,WAAUtgB,GAASA,EAAMxnB,SAASkjB,KAEpDsH,GAAO,EAEP,GADAmd,EAAUj/B,MAAM8hB,GAAOmd,EAAUj/B,MAAM8hB,GAAKnrB,QAAS,GAAE6jB,QAAY,IAC/DjzD,KAAKiV,MAAO,KAAA6iE,EACZ,MAAMh0E,EAAqE,QAA5Dg0E,EAAGtlB,GAAAA,WAAmBklB,EAAUj/B,MAAM8hB,GAAK5zC,MAAM,QAAQ,WAAG,IAAAmxD,OAAA,EAAzDA,EAA2Dr/B,MACvEs/B,EAAmB/3E,KAAKgR,eAAegnE,yBAAyBl0E,GAAW,GAEjF,CAAEurD,GAAemN,SAAUnN,GAAeiN,UAAWluD,SAAQ8nD,IACzDwhB,EAAUj/B,MAAM8hB,GAAOmd,EAAUj/B,MAAM8hB,GAClCnrB,QAAS,KAAI8mB,IAAc,KAAI6hB,IAAmB,GAE/D,MAEIL,EAAUj/B,MAAM8hB,GAAOmd,EAAUj/B,MAAM8hB,GAClCnrB,QAAS,KAAIigB,GAAeiN,WAAa,KAAIjN,GAAeiK,WAEzE,IAMAiB,GAAO,IAAMv6D,KAAKiV,OAASuN,GAAAA,kCAAgD,CAC3E,MAAM,MAAEi2B,EAAK,KAAExzB,GAASutC,GAAAA,WAAmBklB,EAAUj/B,MAAM8hB,GAAK5zC,MAAM,QAAQ,IAE9E+wD,EAAUj/B,MAAM8hB,GAAOmd,EAAUj/B,MAAM8hB,GAAKnrB,QAAS,KAAIqJ,KAASxzB,IAAS,KAAIwzB,MACnF,CACJ,MACI+c,EAAMpnD,SAAQ6kD,IACVykB,EAAUj/B,MAAMpe,GAAOq9C,EAAUj/B,MAAMpe,GAAK+U,QAAS,GAAE6jB,QAAY,GAAG,GAE9E,KAIC,QAAL0kB,EAAA9oB,SAAK,IAAA8oB,OAAA,EAALA,EAAOj0E,SAAU1D,KAAKmqE,gBAAgB8N,iBAAiBppB,GAEvD6oB,EAAUhe,IAAMge,EAAUrqD,QAAUqqD,EAAUj/B,MAAMj4C,KAAK,IAElDk3E,CACX,CASAD,wBAAwB/B,GACpB,IAAIgC,EAAY,IAAIle,GAAIx5D,KAAKgR,eAAeo+D,kBAAkBrX,KA2B9D,OAvBI2d,EAAYhyE,OAASg0E,EAAUj/B,MAAM/0C,QAClC1D,KAAKiV,OACLjV,KAAK8tE,kBACR4J,EAAUpd,0BAA0Bj+C,GAAUwK,OAC9C6wD,EAAY,IAAIle,GAAIke,EAAUhe,MAElCgc,EAAYtnE,SAAQ,CAAConD,EAAOn7B,KAKxB,GAJAq9C,EAAUj/B,MAAMpe,IAAQm7B,EAIpBx1D,KAAKiV,OAASjV,KAAK8tE,gBAAiB,KAAAoK,EACpC,MAAMp0E,EAAqE,QAA5Do0E,EAAG1lB,GAAAA,WAAmBklB,EAAUj/B,MAAMpe,GAAK1T,MAAM,QAAQ,WAAG,IAAAuxD,OAAA,EAAzDA,EAA2Dz/B,MACvEs/B,EAAmB/3E,KAAKgR,eAAegnE,yBAAyBl0E,GAAW,GAEjF,CAAEurD,GAAeoL,SAAUpL,GAAeiK,UAAWlrD,SAAQ8nD,IACzDwhB,EAAUj/B,MAAMpe,GAAOq9C,EAAUj/B,MAAMpe,GAClC+U,QAAS,KAAI8mB,IAAc,KAAI6hB,IAAmB,GAE/D,KAEJL,EAAUhe,IAAMge,EAAUrqD,QAAUqqD,EAAUj/B,MAAMj4C,KAAK,IAElDk3E,CACX,CAWAlI,aAAa2I,GACT,GAA2C,WAAvCn4E,KAAKgR,eAAew9D,eAA6B,CACjD,MAAM5uE,EAAQ,IAAIsB,MAAM,4CAIxB,OAFAlB,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,qBAAiCpuB,EAAOI,MAE7DqU,QAAQE,OAAO3U,EAC1B,CAEA,MAAM83E,EACAS,GAAqBn4E,KAAKgR,eAAeo+D,kBAAkBrX,IAEjE,IAAK2f,EAAW,CACZ,MAAM93E,EAAQ,IAAIsB,MAAO,kEAAiElB,KAAKukB,SAI/F,OAFAvkB,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,qBAAiCpuB,EAAOI,MAE7DqU,QAAQE,OAAO3U,EAC1B,CAEA,MAAMwvE,EAAoB,IAAIuD,sBAAsB,CAChDvvE,KAAMpD,KAAK8hC,YAAc,SAAW,QACpCi2B,IAAK2f,IAGT,OAAI13E,KAAK8hC,YACE9hC,KAAKo4E,sBAAsBhJ,GAG/BpvE,KAAKmzE,sBAAsB/D,EACtC,CAQA+D,sBAAsB/D,GAGlB,OAFA3lE,GAAOgH,MAAO,GAAEzQ,gDAETA,KAAKgR,eAAe4hE,qBAAqBxD,GAC3CrvD,MAAK,KACFtW,GAAOgH,MAAO,GAAEzQ,qCAETA,KAAKgR,eAAeqnE,aAAar4E,KAAK+pE,kBACxChqD,MAAKu4D,IACF7uE,GAAOgH,MAAO,GAAEzQ,+CAETA,KAAKgR,eAAemhE,oBAAoBmG,QAGnE,CAQAF,sBAAsBhJ,GAGlB,OAFA3lE,GAAOgH,MAAO,GAAEzQ,oCAETA,KAAKgR,eAAeihE,YAAYjyE,KAAK+pE,kBACvChqD,MAAKw4D,IACF9uE,GAAOgH,MAAO,GAAEzQ,+CAETA,KAAKgR,eAAemhE,oBAAoBoG,GAC1Cx4D,MAAK,KACFtW,GAAOgH,MAAO,GAAEzQ,gDAGTA,KAAKgR,eAAe4hE,qBAAqBxD,QAGpE,CAUA0C,YAA8B,IAApBl1C,EAAWn5B,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,KACpB,IAAK+e,GAAAA,mCACGoa,UAAAA,EAAal5B,QACdk5B,EAAY3I,MAAK5R,GAASA,EAAMoL,YAAcpR,GAAUwK,QAC3D,OAAOxS,QAAQE,OAAO,IAAIrT,MAAM,8DAGpC,MAAMs3E,EAAgB,GAChBnJ,EAAe9F,IACjB,MAAMkP,EAAc,IAAIjf,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAC3D2f,EAAY,IAAIle,GAAIx5D,KAAKgR,eAAeA,eAAeo+D,kBAAkBrX,KACzE2gB,EAAsB14E,KAAKgR,eAAeA,eAAe2nE,kBACtD1kD,MAAK5O,GAAKA,EAAE8V,SAAS9Y,MAAMuE,OAASvK,GAAUwK,OACxCxB,EAAE6wC,YAAc7G,GAAeoL,UAC/Bp1C,EAAEuzD,mBAAqBvpB,GAAeoL,WAKrD,IAAK,MAAMp4C,KAASua,EACX58B,KAAKiV,OAAUyjE,GAChBhB,EAAUpd,0BAA0Bj4C,EAAMoL,WAIlD,MAAM2hD,EAAoB,IAAIuD,sBAAsB,CAChDvvE,KAAM,QACN20D,IAAK2f,EAAUhe,MAInB15D,KAAKmzE,sBAAsB/D,GACtBrvD,MAAK,KAEF,IAAK,MAAMsC,KAASua,EAChB47C,EAAclpE,KAAKtP,KAAKgR,eAAe6nE,aAAa,KAAMx2D,IAG9D,OAAOhO,QAAQ29D,IAAIwG,EAAc,IAKpCz4D,MAAK,IAAM/f,KAAKwvE,iBAChBzvD,MAAK,KACF,MAAMo3D,EAAc,IAAI3d,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAGjE/3D,KAAK0vE,mBAAmB+I,EAAatB,GACrC5N,GAAkB,IAErBrpD,OAAMtgB,GAAS2pE,EAAiB3pE,IAAO,EAGhD,OAAO,IAAIyU,SAAQ,CAACC,EAASC,KACzB9K,GAAOgH,MAAO,GAAEzQ,4CAEhBA,KAAKusE,kBAAkBj9D,KACnB+/D,GACAzvE,IACQA,GACA6J,GAAO7J,MAAO,GAAEI,0CAA2CJ,GAC3D2U,EAAO3U,KAEP6J,GAAOgH,MAAO,GAAEzQ,mDAChBsU,IACJ,GACF,GAEd,CAQAwkE,uBAAuBC,GACnB,OAAO/4E,KAAKgR,eAAegoE,SAASF,uBAAuBC,GACtDh5D,MAAK,KACF/f,KAAKgR,eAAeioE,oBAAsBF,EAC1C/4E,KAAKgR,eAAekoE,oBAAsBH,CAAM,GAE5D,CAcAF,aAAaM,EAAUC,GACnB,MAAM/J,EAAe9F,IACjB9/D,GAAOgH,MAAO,GAAEzQ,gDAAgDm5E,iBAAwBC,KAExF,MAAM1G,EAAc1yE,KAAKgR,eAAeu+D,iBAAiBxX,IAEpD/3D,KAAK8tE,kBAKF9tE,KAAKgR,eAAenR,QAAQ4tE,uBACzB0L,GAAYC,GAAYA,EAASrmD,gBAMpC/yB,KAAKgR,eAAeqoE,qBAInBF,GAAYC,GAAYA,EAASrmD,eAMlC/yB,KAAKgR,eAAeqoE,oBAGbF,GAAYA,EAASpmD,iBAAmBqmD,IAK/Cp5E,KAAKgR,eAAeqoE,oBACpBr5E,KAAKgR,eAAewgE,yBAI5BxxE,KAAKgR,eAAe6nE,aAAaM,EAAUC,GACtCr5D,MAAKu5D,IACF,IAAIngD,EAAU9kB,QAAQC,UAKtB,GAHA7K,GAAOgH,MAAO,GAAEzQ,uDACZs5E,2BAA2Ct5E,KAAKukB,SAEhD+0D,IACIH,GAAYC,IACbp5E,KAAKukB,QAAUklD,GAA2B,CAC7C,MAAMiO,EAAY13E,KAAKgR,eAAeo+D,kBAAkBrX,IAClDqX,EAAoB,IAAIuD,sBAAsB,CAChDvvE,KAAM,QACN20D,IAAK2f,IASTv+C,EAAUn5B,KAAKmzE,sBAAsB/D,GAAmBrvD,MAAK,KACzD,MAAMo3D,EAAc,IAAI3d,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KAEjE/3D,KAAK0vE,mBAAmB,IAAIlW,GAAIkZ,GAAcyE,EAAY,GAElE,CAEA,OAAOh+C,EAAQpZ,MAAK,KAEZo5D,GACGC,GACAD,EAASpmD,gBACZqmD,EAAS7C,cAAc4C,EAASz2D,gBACpC,GACF,IAEL3C,MAAK,IAAMwpD,MAAoB3pE,GAAS2pE,EAAiB3pE,IAAO,EAGzE,OAAO,IAAIyU,SAAQ,CAACC,EAASC,KACzB9K,GAAOgH,MAAO,GAAEzQ,8CAA8Cm5E,kBAAyBC,KAEvFp5E,KAAKusE,kBAAkBj9D,KACnB+/D,GACAzvE,IACQA,GACA6J,GAAO7J,MAAO,GAAEI,4BAA6BJ,GAC7C2U,EAAO3U,KAEP6J,GAAOE,KAAM,GAAE3J,6BACfsU,IACJ,GACF,GAEd,CAYAkjE,+BAA+B+B,EAAkB9D,GAC7C,MAAMuB,EAAiB,GA2DvB,OAzDAtsC,KAAE6uC,GAAkB5uC,MAAK,CAACgrC,EAAIvnB,KAC1B,MAAMruD,EAAO2qC,KAAE0jB,GAAS1N,KAAK,QAC7B,IAAI8U,EAAQ,GAEZ9qB,KAAE0jB,GACGn6B,KAAK,uDACL0W,MAAK,WAEF,MAAMqjB,EAAYhuD,KAAK8qC,aAAa,aAC9B+jB,EACAnkB,KAAE1qC,MACCi0B,KAAK,WACLyJ,KAAI,WACD,OAAO19B,KAAK8qC,aAAa,OAC7B,IACCnmB,MAELkqC,EAAMnrD,SACN8xD,GACQ,gBAAexH,KACfa,EAAMruD,KAAK,WAI3B,IACJ,MAAMquD,EAAQ,GAIRnkB,KAAE0jB,GAASn6B,KACT,mDAEJ0W,MAAK,WAEL,MAAMh5B,EAAO+4B,KAAE1qC,MAAM0gD,KAAK,QAE1BmO,EAAMv/C,KAAKqC,EACf,IACA8jE,EAAiBh9B,MAAMrqC,SAAQ,CAACqqC,EAAOo9B,KAC9BrjB,GAAAA,SAAiB/Z,EAAQ,SAAQ14C,OAGjCi3E,EAAenB,KAChBmB,EAAenB,GAAM,IAEzBhnB,EAAMzgD,SAAQuD,IACV,MAAM4hD,EACAf,GAAAA,UAAkB/Z,EAAQ,UAAS9mC,KAErC4hD,EAAU7vD,SACVszE,EAAenB,IAAQ,GAAEtiB,EAAU/yD,KAAK,cAC5C,IAEJw2E,EAAenB,IAAOrgB,EAAK,GAC7B,IAGCwhB,CACX,CAcAwC,qBAAqBC,EAAeC,GAChC,MAAMC,EACA,IAAIngB,GAAIx5D,KAAKgR,eAAeu+D,iBAAiBxX,KACnD,IAAI6hB,EAAU,IAAI5f,GAAU0f,EAAQC,GACpC,MAAME,EAAaD,EAAQvb,cAE3B,GAAIh9D,OAAO8G,KAAK0xE,GAAYn2E,OAGxB,OAFA+F,GAAO7J,MAAO,GAAEI,kCAAkCy5E,IAAiBI,IAE5D,EAGXD,EAAU,IAAI5f,GAAU2f,EAAiBD,GACzC,MAAMI,EAAeF,EAAQvb,cAE7B,OAAIh9D,OAAO8G,KAAK2xE,GAAcp2E,SAC1B+F,GAAO7J,MAAO,GAAEI,qCAAqCy5E,IAAiBK,IAE/D,EAIf,CASAC,aAAa13D,GACT,OAAOriB,KAAKg6E,iBAAgB,EAAiB33D,GACxCtC,MAAK,KAGF,GAAIsC,EAAM0Q,eACN,OAAO/yB,KAAKgR,eAAeipE,8BAA8B53D,EAC7D,GAEZ,CAUA63D,kBAAkB73D,GACd,OAAOriB,KAAKg6E,iBAAgB,EAAmB33D,EACnD,CAQA23D,gBAAgBG,EAAU93D,GACtB,IAAKA,EACD,OAAOhO,QAAQE,OAAO,kCAE1B,MAAMklE,EAAgBU,EAAW,cAAgB,WAC3C9K,EAAe9F,IACjB,MAAM30D,EAAM5U,KAAKgR,eAEjB,IAAK4D,EAGD,YAFA20D,EAAkB,iBAAgBkQ,0CAItC,MAAMhB,EAAc7jE,EAAI26D,iBAAiBxX,KAEnCoiB,EACIvlE,EAAIslE,kBAAkB73D,GACtBzN,EAAImlE,aAAa13D,IAGtBtC,MAAKu5D,IACEA,GAAqBb,GAAe7jE,EAAIw6D,kBAAkBrX,IAC1D/3D,KAAKwvE,eACAzvD,MAAK,MAGD/f,KAAK8tE,iBAAmB9tE,KAAKw5E,qBAAqBC,EAAe,IAAIjgB,GAAIif,IAC1E,MAAM5F,EAAcj+D,EAAI26D,iBAAiBxX,IAGzC/3D,KAAK0vE,mBAAmB,IAAIlW,GAAIif,GAAc,IAAIjf,GAAIqZ,IACtDtJ,GAAkB,IAG1BA,GACJ,GAEJA,EAAoD,EAK5D,OAFA9/D,GAAOgH,MAAO,GAAEzQ,eAAey5E,UAExB,IAAIplE,SAAQ,CAACC,EAASC,KACzBvU,KAAKusE,kBAAkBj9D,KACnB+/D,GACAzvE,IACQA,GACA6J,GAAO7J,MAAO,GAAEI,QAAQy5E,YACxBllE,EAAO3U,KAEP6J,GAAOgH,MAAO,GAAEzQ,QAAQy5E,UACxBnlE,IACJ,GACF,GAEd,CAUA8lE,0BAA0BC,GACtB,IAAKr6E,KAAKgR,eACN,OAAOqD,QAAQE,OAAO,6EAI1B,MAAM+lE,EAAcD,EAAc,eAAiB,iBAEnD5wE,GAAOE,KAAM,GAAE3J,oBAAoBs6E,UAEnC,MAAMjL,EAAe9F,IACjB,MAAMgR,EAAkBv6E,KAAKukB,QAAUklD,GAEnCzpE,KAAK8rE,oBAAsBuO,IAC3Br6E,KAAK8rE,kBAAoBuO,EACrBr6E,KAAKiV,OAASslE,GACdv6E,KAAK8yE,qBAIb9yE,KAAKgR,eAAewpE,uBAAuBx6E,KAAK8rE,mBAAqB9rE,KAAK+rE,oBAG1E/rE,KAAKwvE,eACAzvD,MAAK,IAAMwpD,MACXrpD,OAAMtgB,GAAS2pE,EAAiB3pE,IAAO,EAGhD,OAAO,IAAIyU,SAAQ,CAACC,EAASC,KACzBvU,KAAKusE,kBAAkBj9D,KACnB+/D,GACAzvE,IACQA,GACA6J,GAAO7J,MAAO,GAAEI,aAAas6E,kBAC7B/lE,EAAO3U,KAEP6J,GAAOgH,MAAO,GAAEzQ,aAAas6E,gBAC7BhmE,IACJ,GACF,GAEd,CAOAmmE,eAAerP,GACX,MAAMsP,EAAkBvP,GAAgBwP,kBAAkBvP,GACpDwP,EAAwBzP,GAAgB0P,0BAA0BzP,GAEpEwP,IACA56E,KAAKssE,4BAA8BsO,EACnC56E,KAAKya,aAAapR,KAAK0hE,GAAAA,kCAAsD/qE,KAAM46E,IAG/D,OAApBF,GAgBJjxE,GAAOgH,MAAO,GAAEzQ,oDAAoD06E,OAEpE16E,KAAKusE,kBAAkBj9D,MAZFi6D,IACbvpE,KAAK6sE,mBAAqB7sE,KAAK86E,yBAAyBJ,GAExD16E,KAAKwvE,eACAzvD,KAAKwpD,EAAkBA,GAE5BA,GACJ,IAOA3pE,IACQA,EACA6J,GAAO7J,MAAO,GAAEI,+BAAgCJ,GAEhD6J,GAAOgH,MAAO,GAAEzQ,6CAA6C06E,WACjE,KAxBJjxE,GAAO7J,MAAO,GAAEI,8EA0BxB,CAWA86E,yBAAyBC,GACrB,MAAMC,EACuB,SAAvBD,GAC6B,cAAvBA,GAAsC/6E,KAAK8hC,aACpB,cAAvBi5C,IAAuC/6E,KAAK8hC,YAExD,OAAIk5C,IAAwBh7E,KAAK+rE,qBAC7BtiE,GAAOgH,MAAO,GAAEzQ,iCAAiCg7E,KACjDh7E,KAAK+rE,mBAAqBiP,EAEnBh7E,KAAKgR,eAAewpE,uBAAuBx6E,KAAK8rE,mBAAqB9rE,KAAK+rE,oBAIzF,CAOA2D,mBAAmBgK,EAAQuB,GACvB,GAAIj7E,KAAKukB,QAAUklD,GAGf,YAFAhgE,GAAON,KAAM,GAAEnJ,iCAAiCA,KAAKukB,kBAKzD,IAAKvkB,KAAKirC,WAAW+E,UAQjB,OANKhwC,KAAKyrE,qBACNzrE,KAAKyrE,mBAAqBiO,GAE9B15E,KAAK0rE,mBAAqBuP,OAC1BxxE,GAAON,KAAM,GAAEnJ,oEAKnBA,KAAKyrE,wBAAqBnrE,EAC1BN,KAAK0rE,wBAAqBprE,EAE1B,MAAM46E,EAAwBC,IAC1B,MAAM3c,EAAW2c,EAAU9c,cAC3B,IAAIxP,EAAQ,GACR/qD,EAAY,KAYhB,OATAzC,OAAO8G,KAAKq2D,GAAUpwD,SAAQgtE,IAC1B,MAAMC,EAAgBh6E,OAAO8G,KAAKq2D,EAAS4c,GAAYvsB,OAEvD/qD,EAAY06D,EAAS4c,GAAY7gB,IAC7B8gB,SAAAA,EAAe33E,SACfmrD,EAAQA,EAAM8L,OAAO0gB,GACzB,IAGG,CACHv3E,YACA+qD,QACH,EAIL,IAAIssB,EAAY,IAAInhB,GAAUihB,EAAQvB,GACtC,MAAMtxB,GAAS9W,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAK0xC,UAC1BtuC,KAAM,QACLqlC,EAAE,SAAU,CACT+D,MAAO,oBACPvpC,OAAQ,gBACRorE,UAAWruE,KAAKoqE,aAChBz1B,IAAK30C,KAAK20C,MAIlBwmC,EAAU/f,SAAShT,GAInB,MAAMkzB,EAAM,CAAC,EACPC,EAAkBL,EAAsBC,GAE1CI,EAAgB1sB,MAAMnrD,SAEtB+F,GAAOE,KAAM,GAAE3J,kCAAkCu7E,EAAgBz3E,mBACjDy3E,EAAgB1sB,SAChC7uD,KAAKirC,WAAWkL,OACZiS,GACA,KACIpoD,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,cAA0BhuB,KAAMs7E,EAAI,GAEpEt7E,KAAKwwE,sBAAsBpoB,GAAQxoD,IAC/BI,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,oBAAgChuB,KAAMJ,EAAO07E,EAAI,IAEjFtQ,KAIRmQ,EAAY,IAAInhB,GAAU0f,EAAQuB,GAClC,MAAMnmE,GAAMw8B,EAAAA,GAAAA,KAAI,CAAEC,GAAIvxC,KAAK0xC,UACvBtuC,KAAM,QACLqlC,EAAE,SAAU,CACT+D,MAAO,oBACPvpC,OAAQ,aACRorE,UAAWruE,KAAKoqE,aAChBz1B,IAAK30C,KAAK20C,MAIlBwmC,EAAU/f,SAAStmD,GACnB,MAAM0mE,EAAgBN,EAAsBC,GAExCK,EAAc3sB,MAAMnrD,SAEpB+F,GAAOE,KAAM,GAAE3J,+BAA+Bw7E,EAAc13E,mBAAmB03E,EAAc3sB,SAC7F7uD,KAAKirC,WAAWkL,OACZrhC,GACA,KACI9U,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,WAAuBhuB,KAAMs7E,EAAI,GAEjEt7E,KAAKwwE,sBAAsB17D,GAAKlV,IAC5BI,KAAK4tB,KAAKnT,aAAapR,KAAK2kB,GAAW,WAAXA,iBAA6BhuB,KAAMJ,EAAO47E,EAAc13E,UAAWw3E,EAAI,IAEvGtQ,IAEZ,CAoBAwF,sBAAsBiL,EAAS34B,GAC3B,OAAO44B,IAEH,MAAM97E,EAAQ,CAAC,EAGT+7E,EAAajxC,KAAEgxC,GAAaznD,KAAK,SAEvC,GAAI0nD,EAAWj4E,OAAQ,CACnB9D,EAAMg8E,KAAOD,EAAWj7B,KAAK,QAC7B,MAAMm7B,EAAiBnxC,KAAEgxC,GAAaznD,KAAK,gBAEvC4nD,EAAen4E,SACf9D,EAAM8U,OAASmnE,EAAe,GAAG5rD,SAGrC,MAAM6rD,EAAcH,EAAW1nD,KAAK,SAEhC6nD,EAAYp4E,SACZ9D,EAAMmQ,IAAM+rE,EAAYz6B,OAEhC,CAEKq6B,IACD97E,EAAM8U,OAAS,WAGnB9U,EAAMytB,QAAUrtB,KAAKqvC,WAEjByT,EACAA,EAAUljD,GACHI,KAAKukB,QAAUklD,IACM,mBAAjB7pE,EAAM8U,OAMjBjL,GAAOgH,MAAO,GAAEzQ,sBAAsB2I,KAAKC,UAAUhJ,MAErD4S,KAAAA,iBACI,IAAItR,MACC,iBAAgByH,KAAKC,UAAUhJ,MAC5C,CAER,CAMAm8E,wBACI,OAAO/7E,KAAKgR,eAAegrE,oBAC/B,CAKAjiE,QACI/Z,KAAKukB,MAAQklD,GACbzpE,KAAKysE,2BAAwBnsE,EAEzBN,KAAKgR,iBACLhR,KAAKgR,eAAem9D,eAAiB,KACrCnuE,KAAKgR,eAAe09D,2BAA6B,KACjD1uE,KAAKgR,eAAem+D,oBAAsB,KAC1CnvE,KAAKgR,eAAeu9D,uBAAyB,MAGjD9kE,GAAOgH,MAAO,GAAEzQ,mCAGhBA,KAAKusE,kBAAkBtkE,QAEvBwB,GAAOgH,MAAO,GAAEzQ,6BAChBA,KAAKusE,kBAAkBj9D,MAAKynE,IAExB/2E,KAAKgR,gBAAkBhR,KAAKgR,eAAe+I,QAC3Cg9D,IACAttE,GAAOgH,MAAO,GAAEzQ,2BAA2B,IAG/CyJ,GAAOgH,MAAO,GAAEzQ,oCAGhBA,KAAKusE,kBAAkB/C,UAC3B,CAMAn6B,WACI,MAAQ,2BAA0BrvC,KAAKiV,MAAQ,MAAQ,mBAAmBjV,KAAK8hC,mBAAmB9hC,KAAK20C,MAC3G,ECl4FJ,MAAMlrC,IAASC,EAAAA,EAAAA,6CAYf,SAASuyE,GAAoBh+D,GACzB,MAAMkyD,EAAazlC,KAAEzsB,GAAWgW,KAAK,cAC/BioD,EAAkB,GAexB,OAZA/L,EAAWxlC,MAAK,CAACC,EAAG+pB,KAChB,MAAMzxD,EAAayxD,EAAUzxD,WACvBi5E,EAAiB,GAEvB,IAAK,IAAIp2E,EAAI,EAAGA,EAAI7C,EAAWQ,OAAQqC,IAAK,CACxC,MAAM26C,EAAOx9C,EAAW6C,GAExBo2E,EAAe7sE,KAAM,GAAEoxC,EAAK3gD,SAAS2gD,EAAK/4C,QAC9C,CACAu0E,EAAgB5sE,KAAK6sE,EAAe37E,KAAK,KAAK,IAG3C07E,CACX,CAKe,MAAME,WAA+B9rC,GAQhD/uC,YAAYumB,EAAMrN,EAAc4hE,GAC5Bz0E,QACA5H,KAAK8nB,KAAOA,EACZ9nB,KAAKya,aAAeA,EACpBza,KAAKs8E,SAAW,CAAC,EACjBt8E,KAAKu8E,aAAeF,EAAUG,IAC9Bx8E,KAAKy8E,aAAeJ,EAAU/2D,IAC9BtlB,KAAK+pE,iBAAmB,CACpB2S,qBAAqB,EACrBC,qBAAqB,EAE7B,CAMArgE,KAAK2uB,GACDrjC,MAAM0U,KAAK2uB,GACXjrC,KAAKirC,WAAWuJ,WAAWx0C,KAAK48E,SAASxsD,KAAKpwB,MAC1C,oBAAqB,KAAM,MAAO,KAAM,KAChD,CAMA48E,SAASvrC,GACL,MAAMsD,EAAMjK,KAAE2G,GAAIpd,KAAK,UAAUysB,KAAK,OAChCz9C,EAASynC,KAAE2G,GAAIpd,KAAK,UAAUysB,KAAK,UACnCm8B,EAAUxrC,EAAGvG,aAAa,QAG1BpI,GAAM4O,EAAAA,GAAAA,KAAI,CAAEluC,KAAM,SACpBmuC,GAAIsrC,EACJh3D,GAAIwrB,EAAGvG,aAAa,QAGxB,IAAIgyC,EAAO98E,KAAKs8E,SAAS3nC,GAEzB,GAAe,qBAAX1xC,EAA+B,CAC/B,IAAK65E,EAcD,OAbAp6C,EAAIsU,MAAM,CAAE5zC,KAAM,UAClBs/B,EAAI+F,EAAE,QAAS,CAAErlC,KAAM,WAClBqlC,EAAE,iBAAkB,CACjB+D,MAAO,wCAEV2L,KACA1P,EAAE,kBAAmB,CAClB+D,MAAO,6BAEf/iC,GAAON,KAAM,uBAAsBwrC,KACnClrC,GAAOgH,MAAM4gC,GACbrxC,KAAKirC,WAAWmL,KAAK1T,IAEd,EAIX,GAAIm6C,IAAYC,EAAKprC,UAcjB,OAbAjoC,GAAON,KACH,8BAA+BwrC,EAAKmoC,EAAKprC,UAAWL,GACxD3O,EAAIsU,MAAM,CAAE5zC,KAAM,UAClBs/B,EAAI+F,EAAE,QAAS,CAAErlC,KAAM,WAClBqlC,EAAE,iBAAkB,CACjB+D,MAAO,wCAEV2L,KACA1P,EAAE,kBAAmB,CAClB+D,MAAO,6BAEfxsC,KAAKirC,WAAWmL,KAAK1T,IAEd,CAEf,MAAO,QAAapiC,IAATw8E,EAYP,OATAp6C,EAAIsU,MAAM,CAAE5zC,KAAM,UAClBs/B,EAAI+F,EAAE,QAAS,CAAErlC,KAAM,WAClBqlC,EAAE,sBAAuB,CACtB+D,MAAO,wCAEV2L,KACL1uC,GAAON,KAAK,uBAAwBwrC,EAAKtD,GACzCrxC,KAAKirC,WAAWmL,KAAK1T,IAEd,EAEX,MAAM3mB,EAAMjT,OAAO4pB,YAAY3W,MAKzB9G,EAAgD,UAAxCsZ,GAAAA,QAAAA,mBAA2BsuD,GAInCE,EAAeryC,KAAE2G,GAAIpd,KAAK,uBAEhC,GAAI8oD,SAAAA,EAAcr5E,OAAQ,KAAAs5E,EACtB,IAAIC,EAEJxzE,GAAOE,KAAM,mCAAkC1G,sCAC/C,IAAK,IAAI8C,EAAI,EAAGA,EAAIg3E,EAAar5E,OAAQqC,IAErCk3E,EAAkB3uB,GAAsBjd,EAAI0rC,EAAah3E,IAG7D,GAAmB,QAAnBi3E,EAAIC,SAAe,IAAAD,GAAfA,EAAiB7uE,KAAM,CACvB,MAAM+uE,EAAa,GAEnB,IAAK,MAAMC,KAAYF,EAAgB90E,OACnC+0E,EAAW5tE,KAAM,GAAE6tE,MAAaF,EAAgBt4D,IAAIw4D,OAExD1zE,GAAOgH,MAAO,YAAWxN,UAAe45E,kBAAwBK,EAAW18E,KAAK,QACpF,CAIJ,CAEA,OAAQyC,GACR,IAAK,mBAAoB,CACrBwG,GAAOwG,IAAI,sCAAuC8L,GAClD,MAAMqhE,EAAa1yC,KAAE2G,GAAIpd,KAAK,qBAG9B,GADAhf,GAASxL,GAAOgH,MAAO,YAAWxN,UAAe45E,KAC7CO,SAAAA,EAAY15E,OAAQ,CACpB,MAAM+vB,EAAa2pD,EAAW18B,KAAKrkC,GAAUkL,OACvCmM,EAAa0pD,EAAW18B,KAAKrkC,GAAUwK,OAE7C7mB,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,uBACe,SAAfyF,EACe,SAAfC,EACR,CACA,MAAMs2C,EAAW/0D,EAAQjV,KAAKy8E,aAAez8E,KAAKu8E,aAElDO,EACM,IAAI3R,GACFzgC,KAAE2G,GAAIpd,KAAK,UAAUysB,KAAK,OAC1BhW,KAAE2G,GAAIqP,KAAK,MACXm8B,EACA78E,KAAKirC,WACLjrC,KAAK+pE,iBAILphE,KAAK24B,MAAM34B,KAAKC,UAAUohE,IAC1B/0D,GACgB,GAExBjV,KAAKs8E,SAASQ,EAAKnoC,KAAOmoC,EAC1B98E,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,cAA0B8uD,EAAMpyC,KAAE2G,GAAIpd,KAAK,WAAYlY,GAC9E,KACJ,CACA,IAAK,iBAAkB,CACnB,MAAM8yC,EAAQ,GACR2O,EAAW9yB,KAAE2G,GAAIpd,KAAK,kBAG5B,IAAK,MAAMm6B,KAAWoP,EAAU,CAC5B,MAAM7rD,EAAO+4B,KAAE0jB,GAASn6B,KAAK,eAAeysB,KAAK,QAEjD/uC,GAAQk9C,EAAMv/C,KAAKqC,EACvB,CACAlI,GAAOgH,MAAO,YAAWxN,UAAe45E,gBAAsBhuB,KAC9D7uD,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,cAA0B8uD,EAAMpyC,KAAE2G,GAAIpd,KAAK,YAClE,KACJ,CACA,IAAK,iBACDxqB,GAAOgH,MAAO,YAAWxN,UAAe45E,KACxCC,EAAKrC,eAAe/vC,KAAE2G,GAAIpd,KAAK,YAC/B,MAEJ,IAAK,iBAAkB,CACnB,MAAMk8C,EAAa8L,GAAoBvxC,KAAE2G,GAAIpd,KAAK,6BAElDxqB,GAAOgH,MAAO,YAAWxN,UAAe45E,oBAA0B1M,EAAW3vE,KAAK,SAClFR,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,eAA2B8uD,EAAMpyC,KAAE2G,GAAIpd,KAAK,YACnE,KACJ,CACA,IAAK,oBAAqB,CACtBxqB,GAAOwG,IAAI,iBAAkB6sE,EAAKnoC,KAClC,IAAIygC,EAAkB,KAClBC,EAAa,KAEb3qC,KAAE2G,GAAIpd,KAAK,kBAAkBvwB,SAC7B0xE,EACM1qC,KAAE2G,GAAIpd,KAAK,yBAAyB,GAAGhE,QAC7ColD,EAAa3qC,KAAE2G,GAAIpd,KAAK,uBAAuBotB,QAEnD53C,GAAOgH,MAAO,YAAWxN,UAAe45E,uBAA6BxH,KACrEr1E,KAAK4qE,UAAUkS,EAAKnoC,IAAKygC,EAAiBC,GAC1Cr1E,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,WAAuB8uD,EAAM1H,EAAiBC,GACrE,KACJ,CACA,IAAK,oBAAqB,KAAAgI,EACtB5zE,GAAOE,KAAK,oCAAqCoS,GACjD,MAAMkC,EAAYysB,KAAE2G,GAAIpd,KAAK,4BACvBk8C,EAAa8L,GAAoBh+D,GACjCq/D,EAAW5yC,KAAEzsB,GAAWyiC,KAAK,SAC7B68B,EAAS7yC,KAAEzsB,GAAWyiC,KAAK,OAC3B88B,EAAmD,QAApCH,EAAG3yC,KAAEzsB,GAAWgW,KAAK,uBAAe,IAAAopD,OAAA,EAAjCA,EAAmCh8B,OAE3D53C,GAAOgH,MAAO,YAAWxN,UAAe45E,mBAAyBS,aACpDC,uBAA4BC,iBAA+BrN,EAAW3vE,KAAK,SAExFqnB,GAAWmF,cAAcrpB,GACrBzB,GACA,CACIojB,IAAKrQ,EACLtN,MAAOoU,KAGf+gE,EAAKvJ,iBAAiB7oC,KAAE2G,GAAIpd,KAAK,YAAY,KACzC,MAAMwpD,EAAc30E,OAAO4pB,YAAY3W,MAEvCtS,GAAOE,KAAK,sCAAuC8zE,GACnD51D,GAAWmF,cAAcrpB,GACrBxB,GACA,CACImjB,IAAKrQ,EACLtN,MAAO81E,IACR,IACR79E,IACC4S,KAAAA,iBAAsC5S,GACtC6J,GAAO7J,MAAM,2BAA4BA,GACzCk9E,EAAKxI,qBAAqB,IAE9B,KACJ,CACA,IAAK,aACDwI,EAAKhH,gBAAgBprC,KAAE2G,GAAIpd,KAAK,oBAChC,MACJ,IAAK,gBACD6oD,EAAK9G,mBAAmBtrC,KAAE2G,GAAIpd,KAAK,oBACnC,MACJ,QACIxqB,GAAON,KAAK,gCAAiClG,GAC7Cy/B,EAAIsU,MAAM,CAAE5zC,KAAM,UAClBs/B,EAAI+F,EAAE,QAAS,CAAErlC,KAAM,WAClBqlC,EAAE,cACC,CAAE+D,MAAO,wCACZ2L,KAKT,OAFAn4C,KAAKirC,WAAWmL,KAAK1T,IAEd,CACX,CASAg7C,oBAAoBC,EAAIxoE,GACpB,MAAM2nE,EACA,IAAI3R,GACF9T,KAAAA,gBAA2B,IAC3BsmB,EACAxoE,EACAnV,KAAKirC,WACLjrC,KAAK+pE,iBACL/pE,KAAKy8E,cACK,GACM,GAIxB,OAFAz8E,KAAKs8E,SAASQ,EAAKnoC,KAAOmoC,EAEnBA,CACX,CAQAlS,UAAUj2B,EAAKygC,EAAiBC,GACxBr1E,KAAKs8E,SAASz8D,eAAe80B,KACI,UAA7B30C,KAAKs8E,SAAS3nC,GAAKpwB,OACnBvkB,KAAKs8E,SAAS3nC,GAAKwgC,aAAaC,EAAiBC,UAE9Cr1E,KAAKs8E,SAAS3nC,GAE7B,CAKAipC,4BAcI59E,KAAKirC,WAAWkL,QACZ7E,EAAAA,GAAAA,KAAI,CAAEluC,KAAM,MACRmuC,GAAIvxC,KAAK8nB,KAAKjoB,QAAQw/C,MAAMnL,SAC3BzL,EAAE,WAAY,CAAE+D,MAAO,yBAC5BqxC,GAAS79E,KAAK89E,gCAAgCD,KAC9C,KACIp0E,GAAON,KAAK,sEACZnJ,KAAKirC,WAAWkL,QACZ7E,EAAAA,GAAAA,KAAI,CAAEluC,KAAM,MACRmuC,GAAIvxC,KAAK8nB,KAAKjoB,QAAQw/C,MAAMnL,SAC3BzL,EAAE,WAAY,CAAE+D,MAAO,yBAC5BuxC,GAAS/9E,KAAK89E,gCAAgCC,KAC9C,KACIt0E,GAAON,KAAK,mCACZM,GAAON,KAAK,8DAA8D,GAEjF,GAEb,CAQA20E,gCAAgCvzC,GAC5B,MAAMyzC,EAAa,GAEnBtzC,KAAEH,GAAKtW,KAAK,qBAAqB0W,MAAK,CAACtQ,EAAKwQ,KAGxC,MAAMozC,EAAO,CAAC,EACR76E,GAFNynC,EAAKH,KAAEG,IAES6V,KAAK,QAErB,OAAQt9C,GACR,IAAK,OACD66E,EAAKC,KAAQ,QAAOrzC,EAAG6V,KAAK,UACxB7V,EAAG6V,KAAK,UACRu9B,EAAKC,MAAS,IAAGrzC,EAAG6V,KAAK,WAE7Bs9B,EAAW1uE,KAAK2uE,GAChB,MACJ,IAAK,OACL,IAAK,QAAS,CACVA,EAAKC,KAAQ,GAAE96E,KACf66E,EAAKpgC,SAAWhT,EAAG6V,KAAK,YACxBu9B,EAAKC,MAAQrzC,EAAG6V,KAAK,QACR7V,EAAG6V,KAAK,UAGjBu9B,EAAKC,MAAS,IAAGrzC,EAAG6V,KAAK,WAE7B,MAAMziC,EAAY4sB,EAAG6V,KAAK,aAEtBziC,GAA2B,QAAdA,IACbggE,EAAKC,MAAS,cAAajgE,KAG/BggE,EAAKE,WAAatzC,EAAG6V,KAAK,aACfu9B,EAAKE,WAChBH,EAAW1uE,KAAK2uE,GAChB,KACJ,EACA,IAGJ,MAAMp+E,EAAUG,KAAK8nB,KAAKjoB,QAG1B,IAAK,IAAIkG,EAAIi4E,EAAWt6E,OAAS,EAAGqC,EAAI,EAAGA,IAAK,CAC5C,MAAMsjC,EAAI9tB,KAAKgzB,MAAMhzB,KAAKizB,UAAYzoC,EAAI,IACpCq4E,EAAOJ,EAAWj4E,GAExBi4E,EAAWj4E,GAAKi4E,EAAW30C,GAC3B20C,EAAW30C,GAAK+0C,CACpB,CAEA,IAAInmE,EAYJ,OATIA,EADApY,EAAQw+E,WACCn1C,GAAKA,EAAEg1C,KAAKjrC,WAAW,QAGvB/J,GAAKA,EAAEg1C,KAAKjrC,WAAW,SAAY/J,EAAEg1C,KAAKt9E,QAAQ,kBAAoB,EAGnFZ,KAAKu8E,aAAa+B,WAAaN,EAAW/lE,OAAOA,GACjDjY,KAAKy8E,aAAa6B,WAAaN,EAExBA,EAAWt6E,OAAS,CAC/B,CAKA66E,SACI,MAAMntE,EAAO,CAAC,EAgBd,OAdA/P,OAAO8G,KAAKnI,KAAKs8E,UAAUluE,SAAQumC,IAC/B,MACMrjC,EADUtR,KAAKs8E,SAAS3nC,GACX3jC,eAEfM,GAAMA,EAAGktE,YAETptE,EAAM,UAASujC,KAAS,CACpB6pC,UAAWltE,EAAGktE,UACd3jE,MAAOvJ,EAAGuJ,MACVk0B,IAAKjmC,OAAOg2C,SAAS2/B,MAE7B,IAGGrtE,CACX,EC9dJ,MAAMstE,WAAsBpuC,GAIxB/uC,cACIqG,QACA5H,KAAKiQ,IAAM,EACf,CAMAqM,KAAK2uB,GACDrjC,MAAM0U,KAAK2uB,GACXjrC,KAAKirC,WAAW4E,SAAW7vC,KAAK2+E,YAAYvuD,KAAKpwB,MACjDA,KAAKirC,WAAW2zC,UAAY5+E,KAAK6+E,YAAYzuD,KAAKpwB,KACtD,CAMA2+E,YAAYtoC,GACRr2C,KAAKiQ,IAAIX,KAAK,EAAE,IAAIwM,MAAOg2B,UAAW,WAAYuE,GACtD,CAMAwoC,YAAYxoC,GACRr2C,KAAKiQ,IAAIX,KAAK,EAAE,IAAIwM,MAAOg2B,UAAW,WAAYuE,GACtD,EClCJ,MAAM5sC,IAASC,EAAAA,EAAAA,2CAETo1E,GAAa,kBAKJ,MAAMC,WAA6BzuC,GAK9Ch0B,KAAK2uB,GACDrjC,MAAM0U,KAAK2uB,GAEXjrC,KAAKirC,WAAWuJ,WACZx0C,KAAKg/E,OAAO5uD,KAAKpwB,MAAO8+E,GAAY,KAAM,MAAO,KAAM,KAC/D,CAMAE,OAAO3tC,GACH5nC,GAAOE,KAAK,UAAW0nC,EAC3B,CAYAgb,KAAK9a,EAAI/mB,EAAMS,EAAUg0D,EAAUt6B,GAC/B,OAAO,IAAItwC,SAAQ,CAACC,EAASC,KACzB,IAAKowC,EAGD,YAFApwC,EAAO,IAAIrT,MAAM,oBAIrB,MAAMg+E,GAAM5tC,EAAAA,GAAAA,KAAI,CACZluC,KAAM,MACNmuC,GAAIoT,IAGRu6B,EAAIz2C,EAAE,OAAQ,CACV+D,MAAOsyC,GACPvtC,KACA/mB,SAEJ00D,EAAIz2C,EAAE,SAAU,CACZ1oC,KAAM,cACN4H,MAAOsjB,IACRktB,KAEC8mC,GAAYA,EAASv7E,QACrBw7E,EAAIz2C,EAAE,SAAU,CACZ1oC,KAAM,kBACN4H,MAAOs3E,IACR9mC,KAGPn4C,KAAKirC,WAAWkL,OACZ+oC,GACAl/D,IACIvW,GAAOE,KAAK,eAAgBqW,GAG5B,MAAM0P,EAAWgb,KAAE1qB,GAAQiU,KAAK,OAAOysB,KAAK,OAE5C1gD,KAAKm/E,aAAezvD,EAAS4uB,OAAO,GACpC70C,GAAOE,KAAM,2BAA0B3J,KAAKm/E,gBAC5C7qE,GAAS,IAEb1U,IACI6J,GAAOE,KAAK,cAAe/J,GAC3B2U,EAAO3U,EAAM,GACf,GAEd,CAOA2sD,SACI,OAAO,IAAIl4C,SAAQ,CAACC,EAASC,KACzB,IAAKvU,KAAKm/E,aAIN,OAHA5qE,EAAO,IAAIrT,MAAM,6BACjBuI,GAAON,KAAK,uBAKhB,MAAM+1E,GAAM5tC,EAAAA,GAAAA,KAAI,CACZluC,KAAM,MACNmuC,GAAIvxC,KAAKm/E,eAGbD,EAAIz2C,EAAE,SAAU,CACZ+D,MAAOsyC,KAGX9+E,KAAKirC,WAAWkL,OAAO+oC,GAAKl/D,IACxBvW,GAAOE,KAAK,iBAAkBqW,GAC9BhgB,KAAKm/E,aAAe,KACpB7qE,GAAS,IACV1U,IACC6J,GAAOE,KAAK,gBAAiB/J,GAC7BI,KAAKm/E,aAAe,KACpB5qE,EAAO,IAAIrT,MAAM,iBAAiB,GACpC,GAEV,ECpHJ,MAAMuI,IAASC,EAAAA,EAAAA,2CAkBf,IAAI01E,IAAmB,EAQvB,MAAMC,GAA8B,6BAO9BC,GACA,wDClBA71E,IAASC,EAAAA,EAAAA,mCAKT61E,GAAgB,4DAwDf,MAAMC,GAAuB,CAChC,CAAEtB,KAAM,6CASCl+C,GAAsB,OAMtBy/C,GAAiB,mCAOjBlgD,GAAe,8BAKb,MAAMmgD,WAAahmD,GAiB9Bn4B,YAAY1B,EAAS8/E,GACjB/3E,QACA5H,KAAKirC,WAAa,KAClBjrC,KAAK4/E,sBAAuB,EAC5B5/E,KAAKqvB,gBAAkB,CAAC,EACxBrvB,KAAKH,QAAUA,EACfG,KAAK2/E,MAAQA,EACb3/E,KAAK6/E,mBAAoB,EAEpB7/E,KAAKH,QAAQigF,iBACd9/E,KAAKH,QAAQigF,eAAiB,CAAC,GAInC9/E,KAAK+/E,YAAc,GD/FvBxxD,GAAAA,QAAAA,IAAc,SAAS+F,EAAOvkB,GAe1B,OATAtG,GAAOu2E,MAAM,UAAW1rD,EAAOvkB,GACZ,iBAARA,IAC6B,IAA7BA,EAAInP,QAAQ,cAC0C,IAAtDmP,EAAInP,QAAQ,uCAEnB0zB,EAAQ/F,GAAAA,QAAAA,SAAAA,MAIJ+F,GACR,KAAK/F,GAAAA,QAAAA,SAAAA,OAGwB,IAArB6wD,IACOC,GAA4Bl1E,KAAK4F,KACxCtG,GAAOgH,MAAM,yBACb2uE,IAAmB,GAEvB,MACJ,KAAK7wD,GAAAA,QAAAA,SAAAA,KACD9kB,GAAON,KAAM,YAAW4G,KACxB,MAAMkwE,EAAmBX,GAAuBY,KAAKnwE,GAEjDkwE,GAAgD,IAA5BA,EAAiBv8E,SACrC07E,GAAkBj5E,SAAS85E,EAAiB,GAAI,IAChDx2E,GAAOgH,MAAO,2BAA0B2uE,OAE5C,MACJ,KAAK7wD,GAAAA,QAAAA,SAAAA,MACL,KAAKA,GAAAA,QAAAA,SAAAA,MAEDxe,EAAO,YAAWA,IAClByC,KAAAA,iBAAsC,IAAItR,MAAM6O,IAChDtG,GAAO7J,MAAMmQ,GAKrB,EAQAwe,GAAAA,QAAAA,mBAA6B,WACzB,OAAO6wD,EACX,EAEA7wD,GAAAA,QAAAA,gBAA0B,SAAS9Z,GAC/B,OAAQA,GACR,KAAK8Z,GAAAA,QAAAA,OAAAA,aACD,MAAO,eACX,KAAKA,GAAAA,QAAAA,OAAAA,MACD,MAAO,QACX,KAAKA,GAAAA,QAAAA,OAAAA,WACD,MAAO,aACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,KAAKA,GAAAA,QAAAA,OAAAA,eACD,MAAO,iBACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,KAAKA,GAAAA,QAAAA,OAAAA,UACD,MAAO,YACX,KAAKA,GAAAA,QAAAA,OAAAA,aACD,MAAO,eACX,KAAKA,GAAAA,QAAAA,OAAAA,cACD,MAAO,gBACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,QACI,MAAO,UAEf,EFnFAA,GAAAA,QAAAA,oBAA4B,SAAU,IAAImwD,IGqGtC,MAAM5rC,EAAWjzC,EAAQizC,UAAY,CAAC,EAGtCA,EAASoB,OAASr0C,EAAQw/C,MAAMnL,OAEhCl0C,KAAKirC,WA5Gb,SAAyBqC,GAOT,IAPU,sBACtBmF,EAAqB,WACrBG,EAAa,aAAY,MACzBC,EAAK,MACL8sC,EAAK,mBACLjtC,EAAkB,sBAClBC,EAAqB,SACrBG,GAAUxF,EAQV,OALIqyC,IAEA/sC,GAAe,IAA+B,IAA7BA,EAAWhyC,QAAQ,KAAc,IAAM,YAAY++E,KAGjE,IAAIttC,GAAe,CACtBI,wBACAG,aACAF,qBACAC,wBACAG,WACAD,SAER,CAqF0BstC,CAAiB,CAC/B1tC,sBAAuB5yC,EAAQ4yC,sBAG/BG,WAAY/yC,EAAQ+yC,YAAc/yC,EAAQugF,KAC1CT,QACAjtC,mBAAoB7yC,EAAQ6yC,mBAC5BC,sBAAuB9yC,EAAQ8yC,sBAC/BG,WACAD,MAAOhzC,EAAQigF,eAAejtC,QAIlC7yC,KAAKirC,WAAWvhB,GAAG2oB,GAAeruC,OAAOuuC,oBAAoB,KAEzD,MAAM8tC,EAAU,CACZC,eAAe,EACfC,aAAcvgF,KAAKirC,WAAWkG,KAAKa,qBACnCwuC,wBAAyBxgF,KAAKirC,WAAWiF,2BAI7ClwC,KAAKya,aAAapR,KACdovB,GACAI,QACAv4B,OACAA,EACA+/E,EAAQ,IAGhBrgF,KAAKygF,sBAELzgF,KAAK0gF,KAAO,IAAI11C,GAAKhrC,KAAKirC,WAA6B,gCAGvDjrC,KAAK2gF,kBAYT,CAMAA,mBAGI3gF,KAAK0gF,KAAKl1C,WAAW,qBACrBxrC,KAAK0gF,KAAKl1C,WAAW,8BACrBxrC,KAAK0gF,KAAKl1C,WAAW,wCACrBxrC,KAAK0gF,KAAKl1C,WAAW,+BACrBxrC,KAAK0gF,KAAKl1C,WAAW,0CACrBxrC,KAAK0gF,KAAKl1C,WAAW,kCACrBxrC,KAAK0gF,KAAKl1C,WAAW,kCACrBxrC,KAAK0gF,KAAKl1C,WAAW,0CAEfxrC,KAAKH,QAAQstE,YAAel/D,GAAQb,eACtCpN,KAAK0gF,KAAKl1C,WAAW,sBAEU,IAA/BxrC,KAAKH,QAAQ+gF,eAA0B3yE,GAAQpB,oBAC/C7M,KAAK0gF,KAAKl1C,WAAW,mCAGc,IAA5BxrC,KAAKH,QAAQghF,YAA8B7gF,KAAKH,QAAQghF,aAC/D7gF,KAAK0gF,KAAKl1C,WAAW,yBAIpBv9B,GAAQtH,kBAAkD,IAA3B3G,KAAKH,QAAQihF,YAA6B9gF,KAAKH,QAAQihF,WACvF9gF,KAAK0gF,KAAKl1C,WAAW,wBAYrBv9B,GAAQpE,oBAAoD,IAA/B7J,KAAKH,QAAQkhF,gBAC1Ct3E,GAAOE,KAAK,sBACZ3J,KAAK0gF,KAAKl1C,WAAW,kCAGrBxrC,KAAKirC,WAAWqhB,MAChBtsD,KAAK0gF,KAAKl1C,WAAW,0BAGrB3D,GAAcl9B,YAAY3K,KAAKH,UAC/BG,KAAK0gF,KAAKl1C,WAAWjM,IAAc,GAAO,GAI9C91B,GAAOgH,MAAM,oCACbzQ,KAAK0gF,KAAKl1C,WAAW,gCAErB/hC,GAAOgH,MAAM,+CACbzQ,KAAK0gF,KAAKl1C,WAAW,mDAGjBhpB,GAAAA,4BACAxiB,KAAK0gF,KAAKl1C,WAAW,qCAOrBhpB,GAAAA,4BACAxiB,KAAK0gF,KAAKl1C,WAAW,8BAE7B,CAKAw1C,gBACI,OAAOhhF,KAAKirC,UAChB,CAaAg2C,oBAAiD,IAA/BC,EAAWz9E,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGgR,EAAMhR,UAAAC,OAAA,EAAAD,UAAA,QAAAnD,EAAEyP,EAAGtM,UAAAC,OAAA,EAAAD,UAAA,QAAAnD,EAC3C,MAAMyb,EAAMjT,OAAO4pB,YAAY3W,MACzBolE,EAAY5yD,GAAAA,QAAAA,gBAAwB9Z,GAAQuzC,cASlD,GAPAhoD,KAAKqvB,gBAAgB8xD,GAAaplE,EAClCtS,GAAOwG,IACF,kBAAiBkxE,IAAYpxE,EAAO,IAAGA,KAAS,QACjDgM,GAEJ/b,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,0BAAsCkzD,EAAazsE,EAAQ1E,GAClF/P,KAAKohF,+BACD3sE,IAAW8Z,GAAAA,QAAAA,OAAAA,WAA4B9Z,IAAW8Z,GAAAA,QAAAA,OAAAA,SAE9CvuB,KAAKqhF,qBACLrhF,KAAKirC,WAAWwC,aAAagH,cAAcz0C,KAAKqhF,oBAChDrhF,KAAKqhF,mBAAqB,MAG9BrhF,KAAKshF,eAAiBthF,KAAKirC,WAAWijB,OAAO0vB,4BAE7Cn0E,GAAOE,KAAM,iBAAgB3J,KAAKirC,WAAWxb,OAG7CzvB,KAAKuhF,cAGLvhF,KAAKwhF,oBAAqB,EAC1BxhF,KAAKshF,eAAiBthF,KAAK0gF,KAAKv0C,yBAAyBnsC,KAAKH,QAAQw/C,MAAMnL,QACvEn0B,MAAK42B,IAA8B,IAA7B,SAAEvoB,EAAQ,WAAEqc,GAAYkM,EACtBvoB,EAASrD,IAAIwD,GAAAA,QAAAA,GAAAA,OACd9kB,GAAO7J,MAAO,yBACVI,KAAKH,QAAQw/C,MAAMnL,0DAG3Bl0C,KAAKyhF,4BACDh3C,OAAYnqC,EAAyD,IAE5E4f,OAAMtgB,IACH,MAAMgyC,EAAS,0BAEfp/B,KAAAA,iBACI,IAAItR,MAAO,GAAE0wC,MAAWhyC,MAC5B6J,GAAO7J,MAAMgyC,EAAQhyC,GAErBI,KAAKohF,8BAA6B,EAAK,IAI/CphF,KAAKshF,eAAgB,EAEjBJ,EAAY78B,WACZrkD,KAAK6/E,mBAAoB,GAEzB7/E,KAAKirC,YAAcjrC,KAAKirC,WAAW+E,WAChCzhB,GAAAA,QAAAA,mBAA2BvuB,KAAKirC,WAAWxb,MAG9CzvB,KAAKya,aAAapR,KACdovB,GACAlK,GAAAA,QAAAA,mBAA2BvuB,KAAKirC,WAAWxb,WAEhD,GAAIhb,IAAW8Z,GAAAA,QAAAA,OAAAA,SACN,+BAARxe,EACA/P,KAAK0hF,2BAA4B,EAEjC1hF,KAAK2hF,kBAAmB,EAE5B3hF,KAAK4hF,aAAe7xE,EACR,cAARA,GACA/P,KAAKya,aAAapR,KACdovB,GACAI,GAAmC9oB,QAExC,GAAI0E,IAAW8Z,GAAAA,QAAAA,OAAAA,MAClBvuB,KAAK4hF,aAAe7xE,OACjB,GAAI0E,IAAW8Z,GAAAA,QAAAA,OAAAA,aAA6B,CAE/CvuB,KAAKirC,WAAWkG,KAAKU,eACrB,MAAMgwC,EAA2B33E,QAAQlK,KAAK4/E,sBACxCtI,EAASvnE,GAAO/P,KAAK4hF,aAE3B,GAAI5hF,KAAK0hF,0BAEL1hF,KAAKya,aAAapR,KACdovB,GACAI,SACD,GAAI74B,KAAK2hF,iBACZ3hF,KAAKya,aAAapR,KACdovB,GACAI,GACAy+C,OACAh3E,EACAN,KAAK8hF,0CACN,GAAID,EACP7hF,KAAKya,aAAapR,KACdovB,GAA+C6+C,OAChD,CAMH7tE,GAAO7J,MAAM,4BAIb,MAAMw/E,EAAkB7wD,GAAAA,QAAAA,qBAEpB6wD,GAAmB,KAAOA,EAAkB,IAC5Cp/E,KAAKya,aAAapR,KACdovB,GACAI,GACAy+C,GAAU,oBACQh3E,EAClBN,KAAK8hF,qCAET9hF,KAAKya,aAAapR,KACdovB,GACAI,GACAy+C,GAAU,gCACQh3E,EAClBN,KAAK8hF,oCAEjB,CACJ,MAAO,GAAIrtE,IAAW8Z,GAAAA,QAAAA,OAAAA,SAAyB,CAC3C,MAAMwzD,EAAuB/hF,KAAKghF,gBAAgB/wC,uBAGlDjwC,KAAKya,aAAapR,KACdovB,GACAI,GACA9oB,GAAO/P,KAAKgiF,8BAA8BD,GAC1Cb,EACR,CACJ,CASAO,4BAA4Bh3C,EAAYrc,GAEpCqc,EAAWr8B,SAAQ0mB,IAqBf,GApBsB,kBAAlBA,EAAS1xB,OACTpD,KAAKi4C,6BAA+BnjB,EAAS/0B,KAC7CC,KAAK+/E,YAAYzwE,KAAKtP,KAAKi4C,+BAGT,mBAAlBnjB,EAAS1xB,OACTpD,KAAKstD,8BAAgCx4B,EAAS/0B,KAC9CC,KAAK+/E,YAAYzwE,KAAKtP,KAAKstD,gCAGT,iBAAlBx4B,EAAS1xB,OACTpD,KAAKiiF,6BAA+BntD,EAAS/0B,KAC7CC,KAAK+/E,YAAYzwE,KAAKtP,KAAKiiF,+BAGT,wBAAlBntD,EAAS1xB,OACTpD,KAAKkiF,mCAAqCptD,EAAS/0B,KACnDC,KAAK+/E,YAAYzwE,KAAKtP,KAAKkiF,qCAGT,eAAlBptD,EAAS1xB,KAAuB,CAChCpD,KAAKo7C,gBAAiB,EACtB,MAAM+mC,EAAuBl2C,IACzBA,EAAE79B,SAAQg0E,IACFA,EAAGp3D,SAAS,0BACZhrB,KAAKya,aAAapR,KAAKovB,GAC3B,GACF,EAGFrK,EACA+zD,EAAqB/zD,GAErB0G,EAAS/0B,MAAQC,KAAK0gF,KAAKv0C,yBAAyBrX,EAAS/0B,KAAM+0B,EAAS1xB,MACvE2c,MAAKsiE,IAAA,IAAGj0D,SAAU6d,GAAGo2C,EAAA,OAAKF,EAAqBl2C,EAAE,IACjD/rB,OAAM1Q,GAAK/F,GAAON,KAAK,qCAAsCqG,GAAKA,EAAEjP,UAEjF,CAEsB,UAAlBu0B,EAAS1xB,OACTpD,KAAKH,QAAQigF,eAAejtC,MAAQ7yC,KAAKirC,WAAW4H,MAAQ/d,EAAS/0B,MAGnD,WAAlB+0B,EAAS1xB,OACTpD,KAAKH,QAAQigF,eAAewC,OAAStiF,KAAKirC,WAAWq3C,OAASxtD,EAAS/0B,MAGrD,YAAlB+0B,EAAS1xB,OACTpD,KAAKH,QAAQigF,eAAeyC,eAAiBztD,EAAS/0B,MAGpC,mBAAlB+0B,EAAS1xB,OACTpD,KAAK+5C,8BAAgCjlB,EAAS/0B,KAC9CC,KAAK+/E,YAAYzwE,KAAKtP,KAAK+5C,gCAGT,kBAAlBjlB,EAAS1xB,OACTpD,KAAKu9C,6BAA+BzoB,EAAS/0B,KAC7CC,KAAK+/E,YAAYzwE,KAAKtP,KAAKu9C,8BAC/B,IAGJv9C,KAAKohF,8BAA6B,GAE9BphF,KAAK+/E,YAAYr8E,OAAS,GAC1B1D,KAAKirC,WAAWuJ,WAAWx0C,KAAKwiF,kBAAkBpyD,KAAKpwB,MAAO,KAAM,UAAW,KAAM,KAE7F,CAQAgiF,8BAA8BjyE,GAC1B,IAAKA,EACD,OAAO,KAGX,MAAMrF,EAAU60E,GAAcW,KAAKnwE,GAEnC,OAAOrF,EAAUA,EAAQ,GAAK,IAClC,CAOA+3E,SAAShzD,EAAK40B,GA4BVrkD,KAAKuhF,cAGLvhF,KAAKshF,eAAgB,EACrBthF,KAAKwhF,oBAAqB,EAEtBxhF,KAAKirC,WAAWwC,cAAgBztC,KAAKirC,WAAWwC,aAAai1C,eAC7D1iF,KAAKqhF,mBAAqBrhF,KAAKirC,WAAWwC,aAAai1C,eACnD1iF,KAAK2iF,iBAAiBvyD,KAAKpwB,MAC3B,KACA,WAGJyJ,GAAON,KAAK,gEAGhBnJ,KAAKirC,WAAWzyB,QACZiX,EACA40B,EACArkD,KAAKihF,kBAAkB7wD,KAAKpwB,KAAM,CAC9ByvB,MACA40B,aAEZ,CAQAs+B,iBAAiB5yE,GAEb,GAAwC,IAApC26B,KAAE36B,GAAKkkB,KAAK,aAAavwB,QAAiD,IAAjCgnC,KAAE36B,GAAKkkB,KAAK,UAAUvwB,OAC/D,OAGJ1D,KAAKshF,eAAgB,EAErB,MAAMsB,EAAkB5iF,KAAKirC,WAAWijB,OAAO4vB,gCAAgC/tE,IAEzE,SAAEqe,EAAQ,WAAEqc,GAAeD,GAAez6B,GAEhD/P,KAAKyhF,4BAA4Bh3C,EAAYrc,IAEzCw0D,GAAmBn4C,EAAWt8B,KAAO,GAAKigB,EAASjgB,KAAO,KAC1DnO,KAAKirC,WAAWwC,aAAagH,cAAcz0C,KAAKqhF,oBAChDrhF,KAAKqhF,mBAAqB,KAElC,CASA3sC,OAAO70C,GACHG,KAAKuhF,cAGLvhF,KAAKshF,eAAgB,EAErB,MAAMvlE,EAAM/b,KAAKqvB,gBAAgBwzD,UAAY/5E,OAAO4pB,YAAY3W,MAEhEtS,GAAOwG,IAAI,8BAA+B8L,GAC1C/b,KAAKirC,WAAWyJ,OAAO70C,EAAQ4vB,IAAK5vB,EAAQ80C,IACxCxuC,SAAStG,EAAQ+0C,IAAK,IAAM,EAC5B50C,KAAKihF,kBAAkB7wD,KAAKpwB,KAAM,CAC9ByvB,IAAK5vB,EAAQ4vB,IACb40B,SAAUxkD,EAAQwkD,WAE9B,CAMAk9B,cACIvhF,KAAK0hF,2BAA4B,EACjC1hF,KAAK2hF,kBAAmB,EACxB3hF,KAAK4hF,kBAAethF,EACpBN,KAAK4/E,0BAAuBt/E,CAChC,CAOAkY,QAAQiX,EAAK40B,GACT,IAAK50B,EAAK,CACN,MAAM,gBAAE2yB,EAAe,OAAElO,GAAWl0C,KAAKH,QAAQw/C,MACjD,IAAIyjC,EAAe1gC,GAAmBlO,EAStC,MAAM,SAAE4K,GAAah2C,OAErB,GAAIs5C,EAAiB,CACjB,MAAMnT,EAAS6P,GAAYA,EAAS7P,QAE/BA,IAA4C,IAAlCA,EAAOruC,QAAQ,eACnBZ,KAAK2/E,SACZmD,EAAe5uC,EAEvB,CAGAzkB,EAAMqzD,GAAiBhkC,GAAYA,EAASikC,QAChD,CAEA,OAAO/iF,KAAKyiF,SAAShzD,EAAK40B,EAC9B,CAYApI,WAAWhxB,EAAUprB,EAASmjF,GAE1B,MAAM9uC,EAASjpB,EAASipB,QAAUr0C,EAAQm8C,aAG1C,IAAIvpB,EAAW,GAAEzyB,KAAKijF,WAAWh4D,EAAUipB,MAC3C,MAAMgvC,EAAcF,EACdA,EAAiBhjF,KAAKirC,WAAWxb,IAAKzvB,KAAK6/E,mBAC3CxoB,KAAAA,gBAA2B,GAAGrP,cAKpC,OAHAv+C,GAAOE,KAAM,OAAM3J,KAAKirC,WAAWxb,0BAA0ByzD,KAC7DzwD,GAAWywD,EAEJljF,KAAKirC,WAAWI,KAAK4Q,WAAWxpB,EAAS,KAAM5yB,EAC1D,CASAojF,WAAWh4D,EAAUipB,GACjB,MAAQ,GAAEjpB,KAAYipB,GAAkBl0C,KAAKH,QAAQw/C,MAAM8jC,IAAIn7B,eACnE,CAQAyF,cAAcxiC,EAAUipB,GACpB,OAAOl0C,KAAKirC,WAAWI,KAAKoiB,cAAcztD,KAAKijF,WAAWh4D,EAAUipB,GACxE,CAOA/f,SACI,OAAOn0B,KAAKirC,WAAWxb,GAC3B,CAMA2zD,eACI,MAAMl1B,EAASluD,KAAKirC,WAAWijB,OAG/B,OAAOA,EAASA,EAAOqwB,SAAW,CAAC,CACvC,CAKA8E,aACI,OAAQrjF,KAAKirC,WAAWxhC,QAAU,CAAC,GAAGwG,KAAO,IACjD,CAKAo8C,OACIrsD,KAAKirC,WAAWqhB,KAAKD,QAAK5oD,UAC9B,CAQA0tC,KAAK/E,GACD,OAAO,IAAI/3B,SAAQ,CAACC,EAASC,KACzBvU,KAAKirC,WAAWkG,KAAKA,KAAKnxC,KAAKirC,WAAWmJ,WAAY9/B,EAASC,EAAQ63B,EAAQ,GAEvF,CAKAk3C,cACI,OAAOtjF,KAAKirC,WAAWijB,OAAOouB,QAClC,CASA3iE,WAAWgZ,GACP,OAAI3yB,KAAK4/E,qBACE5/E,KAAK4/E,qBACJ5/E,KAAKirC,YAIjBjrC,KAAK4/E,qBAAuB,IAAIvrE,SAAQC,IACpC,MAAMivE,EAAqBA,CAACrC,EAAazsE,KACjCA,IAAW8Z,GAAAA,QAAAA,OAAAA,eACXvuB,KAAKya,aAAamP,eAAeoE,GAAW,WAAXA,0BAAsCu1D,GACvEjvE,IACJ,EAGJtU,KAAKya,aAAaiP,GAAGsE,GAAW,WAAXA,0BAAsCu1D,EAAmB,IAGlFvjF,KAAKwjF,uBAAuB7wD,GAErB3yB,KAAK4/E,sBAhBDvrE,QAAQC,SAiBvB,CAWAkvE,uBAAuB7wD,GAWnB,IAFC3yB,KAAKirC,WAAW4I,kBAAoB7zC,KAAKirC,WAAW2K,SAEhD51C,KAAKirC,WAAW4I,kBAAjB,MAAqClhB,EAA0C,CAC/E,MAAM8wD,EAAS9wD,EAAGvvB,KAElB,IAAe,iBAAXqgF,GAAwC,WAAXA,KAI7BzjF,KAAKirC,WAAWprC,QAAQwoE,MAAO,EAG3BroE,KAAKirC,WAAW2L,yBAEhB,MAGZ,CAEA52C,KAAKirC,WAAWtxB,cAEqB,IAAjC3Z,KAAKirC,WAAWprC,QAAQwoE,MACxBroE,KAAKirC,WAAW2K,OAExB,CAKA6qC,sBACI,MAAMpE,EAAY,CACdG,IAAK,CAAE8B,WAAY,IACnBh5D,IAAK,CAAEg5D,WAAY,KAGjBoF,EAAkB1jF,KAAKH,QAAQylB,KAC9BtlB,KAAKH,QAAQylB,IAAIq+D,aAAgBnE,GAEpCr/E,MAAMC,QAAQsjF,KACdj6E,GAAOE,KAAK,qBAAsB+5E,GAClCrH,EAAU/2D,IAAIg5D,WAAaoF,GAG3B1jF,KAAKH,QAAQylB,KAAOtlB,KAAKH,QAAQylB,IAAIs+D,qBACrCn6E,GAAOE,KAAK,6BACR3J,KAAKH,QAAQylB,IAAIs+D,oBAErBvH,EAAU/2D,IAAIs+D,mBACR5jF,KAAKH,QAAQylB,IAAIs+D,oBAG3B5jF,KAAKirC,WAAWsI,oBAAoB,OAAQ,IAAIga,GAAoBvtD,OACpEA,KAAKirC,WAAWsI,oBAAoB,SAAU,IAAI6oC,GAAuBp8E,KAAMA,KAAKya,aAAc4hE,IAClGr8E,KAAKirC,WAAWsI,oBAAoB,OAAQ,IAAIwrC,GACpD,CAQA+C,oCACI,MAAMzB,EAAU,CAAC,EAGjB,GAAIrgF,KAAKH,QAAQigF,gBACV9/E,KAAKH,QAAQigF,eAAejtC,OAC5B7yC,KAAKirC,WAAWkJ,oBAAqB,CAGxC,MAAM0vC,EAAa7jF,KAAKirC,WAAWkJ,oBAC9B2vC,OAAOn9D,MAAM,WACZsvB,EAAU,CAAC,EAEjB4tC,EAAWz1E,SAAQ6kD,IACf,MAAMS,EAAQT,EAAKtsC,MAAM,MACnBo9D,EAASrwB,EAAM3hB,QACfpqC,EAAQ+rD,EAAMlzD,KAAK,MAEzBy1C,EAAQ8tC,GAAUp8E,CAAK,IAI3B04E,EAAQC,cACFtgF,KAAKH,QAAQigF,eAAejtC,QACtBoD,EAAQ,gBAExB,CAQA,OAJAoqC,EAAQE,aAAevgF,KAAKirC,WAAWkG,KAAKa,qBAC5CquC,EAAQG,wBAA0BxgF,KAAKirC,WAAWiF,0BAG3CmwC,CACX,CAQAvqE,yBAAyB8V,EAASC,GAE9B,IAAK7rB,KAAKiiF,+BAAiCr2D,EACvC,OAGJ,MAAM7b,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAIvxC,KAAKiiF,+BAE5BlyE,EAAI04B,EAAE,eAAgB,CAClB+D,MAAO,2BACP5e,KAAMhC,EACNC,YACCssB,KAELn4C,KAAKirC,WAAWmL,KAAKrmC,EACzB,CAOAi0E,uBAAuBp4D,EAAS8F,GAE5B,IAAK1xB,KAAKiiF,+BAAiCr2D,EACvC,OAGJ,MAAM7b,GAAMmoC,EAAAA,GAAAA,MAAK,CAAE3G,GAAIvxC,KAAKiiF,+BAE5BlyE,EAAI04B,EAAE,gBAAiB,CACnB+D,MAAO,2BACP5e,KAAMhC,EACNq4D,eAAgBvyD,EAAQuyD,eACxB9/D,UAAWuN,EAAQvN,UACnB1I,SAAUiW,EAAQjW,WACnB08B,KAEHn4C,KAAKirC,WAAWmL,KAAKrmC,EACzB,CAWAq6C,sBAAsB85B,GAElB,IAAKA,EACD,OAAO,EAGX,IACI,MAAMlhD,EAAOr6B,KAAK24B,MAAM4iD,GASxB,GAAIlhD,GAAwB,iBAATA,EAAmB,CAClC,MAAM5/B,EAAO4/B,EAAKhD,IAElB,QAAoB,IAAT58B,EACP,OAAO4/B,EAGXv5B,GAAOgH,MAAM,yDACM,UAAWrN,EAClC,CACJ,CAAE,MAAOoM,GAGL,OAFA/F,GAAO7J,MAAO,sBAAqBskF,IAAc10E,IAE1C,CACX,CAEA,OAAO,CACX,CASAgzE,kBAAkBzyE,GACd,MAAMya,EAAOza,EAAI+6B,aAAa,QAE9B,IAAK9qC,KAAK+/E,YAAYhwC,SAASvlB,GAC3B,OAAO,EAGX,MAAM0/B,EAAcxf,KAAE36B,GAAKkkB,KAAK,iBAC3BotB,OACC8I,EAAanqD,KAAKoqD,sBAAsBF,GAE9C,OAAKC,IAImC,iBAApCA,EAAWnqB,KAA2CmqB,EAAWg6B,MACjEnkF,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,uBAAmCm8B,EAAWg6B,OAC1B,wBAApCh6B,EAAWnqB,KAAkDmqB,EAAWi6B,kBAC/EpkF,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,8BAA0Cm8B,EAAWi6B,mBACjC,kBAApCj6B,EAAWnqB,IAClBhgC,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,uBAAmCm8B,GACf,mBAApCA,EAAWnqB,IAClBhgC,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,qBAAiCm8B,GACb,kBAApCA,EAAWnqB,KAClBhgC,KAAKya,aAAapR,KAAK2kB,GAAW,WAAXA,oBAAgCm8B,IAGpD,EACX,CAUAi3B,6BAA6BiD,GACzB,MAAMC,EAAmB,CACrB/1D,GAAAA,QAAAA,OAAAA,MACAA,GAAAA,QAAAA,OAAAA,SACAA,GAAAA,QAAAA,OAAAA,SACAA,GAAAA,QAAAA,OAAAA,aACAA,GAAAA,QAAAA,OAAAA,aAGJ,KAAK81D,GAAWC,EAAiBv0C,SAAS/vC,KAAKirC,WAAWx2B,SAAWzU,KAAKwhF,oBACtE,OAKJ,MAAM+C,EAASvkF,KAAKH,QAAQigF,eAE5B,GAAIyE,GAAUljF,OAAO8G,KAAKo8E,GAAQ7gF,OAAS,EAAG,CAC1C,MAAMotB,EAAY,CAAC,EAEnB,IAAK,MAAM4vB,KAAQ6jC,EACXA,EAAO1kE,eAAe6gC,KACtB5vB,EAAU4vB,GAAQ6jC,EAAO7jC,IAKjC74B,GAAWe,UAAU5a,uBAAuB,IAAK8iB,IAEjDA,EAAUjL,GAAK,kBACfgC,GAAWuE,QAAQzjB,KAAKC,UAAUkoB,GACtC,CAEA9wB,KAAKwhF,oBAAqB,CAC9B,EC/gCW,SAASgD,GAA0Bl3C,GAS/C,IAEKm3C,GAX2C,GAE/C5+D,EAAE,SACFw+B,EAAQ,iBACR2+B,EAAgB,kBAIhB0B,GACHp3C,EACO20B,GAAW,EAEXn6C,EAAO,IAAI43D,GAAK1/E,KAAKirC,WAAWprC,SAEpC,MAAMwN,EAAU,IAAIgH,SAAQ,CAACC,EAASC,KAIlCkwE,EAAgBlwE,EAGhBuT,EAAKiG,YACDtrB,IACA,KACIqlB,OAAOxnB,CAAS,IAExBwnB,EAAKiG,YACD/zB,IACA,KACQioE,IAKJyiB,GAAqBA,IAGR58D,EAAKm0B,WACdj8C,KAAKH,QAAQE,KACbC,KAAKH,QAAQ8zB,OACbqvD,GAGCn+B,UAAUxC,eACVtiC,MAAK,KACF+H,GAAQA,EAAKnO,aAETsoD,IAMJjiE,KAAK4tB,KAAKi3B,UAAU8/B,0BAEpBrwE,IAAS,IAEZ4L,OAAMy2B,IAAwB,IAAvB,MAAE/2C,EAAK,QAAEW,GAASo2C,EACtB7uB,EAAKnO,aAELpF,EAAO,CACHqwE,oBAAqBhlF,EACrBW,WACF,IACJ,IAEdunB,EAAKiG,YACD2K,IACA,CAACmsD,EAAiBtkF,EAAS2gF,KACvB3sE,EAAO,CACHswE,kBACA3D,cACA3gF,YAEJunB,OAAOxnB,CAAS,IAGxB2hE,GAAYn6C,EAAKtP,QAAQqN,EAAIw+B,EAAS,IAgB1C,OANAh3C,EAAQiiC,OAAS,KACb2yB,GAAW,EACXwiB,EAAc,CAAC,GACf38D,GAAQA,EAAKnO,YAAY,EAGtBtM,CACX,CChJA,MAAM5D,IAASC,EAAAA,EAAAA,4CASR,MAAMo7E,GAcTvjF,YAAY8oB,EAAYxqB,GACpBG,KAAKqqB,WAAaA,EAClBrqB,KAAKH,QAAUA,EACfG,KAAK+kF,sBAAwBllF,EAAQklF,sBAGrC/kF,KAAKglF,iBAAmBnlF,EAAQmlF,mBAAqBhsB,KAAAA,KAC9Ch5D,KAAKilF,kBAAkBplF,EAAQmlF,mBAC/BnlF,EAAQmlF,iBACfhlF,KAAKklF,iBAAmBrlF,EAAQqlF,mBAAqBlsB,KAAAA,KAC9Ch5D,KAAKilF,kBAAkBplF,EAAQqlF,mBAC/BrlF,EAAQqlF,iBAGfllF,KAAKmlF,kBAAoBnlF,KAAKilF,kBAAkBplF,EAAQslF,oBACjDtlF,EAAQslF,oBAAsBtlF,EAAQmlF,iBACvCnlF,EAAQslF,kBACRnsB,KAAAA,IACNh5D,KAAKolF,kBAAoBplF,KAAKilF,kBAAkBplF,EAAQulF,oBACjDvlF,EAAQulF,oBAAsBvlF,EAAQqlF,iBACvCrlF,EAAQulF,kBACRpsB,KAAAA,IAENvvD,GAAOgH,MAAO,2DAA0DzQ,KAAKolF,8BAC3DplF,KAAKklF,mCAAmCllF,KAAKmlF,8BAC7CnlF,KAAKglF,oBAEvBhlF,KAAKqqB,WAAWX,GACZrwB,IACAg0B,GAAWrtB,KAAKqlF,sBAAsBh4D,KAC1CrtB,KAAKqqB,WAAWX,GACZrwB,IACA,IAAM2G,KAAKqlF,0BACfrlF,KAAKqqB,WAAWX,GACZrwB,IACA,IAAM2G,KAAKqlF,yBACnB,CASAJ,kBAAkBjX,GACd,QAAKA,KAIDA,IAAmBhV,KAAAA,MAAsBh5D,KAAK+kF,wBAA0B92E,GAAQjC,mBAMhFiC,GAAQtH,aAILmC,OAAOuC,gBACPvC,OAAOuC,eAAeC,iBACtBxC,OAAOuC,eAAeC,gBAAgB,SAASwB,OACjDC,MAAKC,GAASA,EAAMC,SAAS+6C,gBAAmB,SAAQgmB,MACjE,CAQAqX,sBAAsBC,GAClB,MAAMj4D,EAAUi4D,GAA8BtlF,KAAKqqB,WAAWkD,iBAE9D,IAAKF,EACD,OAEJ,MAAM2gD,EAAiB3gD,EAAQpY,MAAQjV,KAAKmlF,kBAAoBnlF,KAAKolF,kBAC/DG,EAAgBl4D,EAAQpY,MAAQjV,KAAKglF,iBAAmBhlF,KAAKklF,iBAC7DM,EAAen4D,aAAO,EAAPA,EAASrc,eAAeygE,0BAC7C,IAAIgU,EAAgBzX,QAAAA,EAAkBwX,EAEtC,IAAKxlF,KAAK+kF,sBAAuB,CAC7B,MAAMW,EAAqB1lF,KAAKqqB,WAAW2J,kBAAkB0J,KAAIrP,GAAeA,EAAYwI,UAOtF8uD,GANeD,aAAkB,EAAlBA,EAAoBhoD,KAAIkoD,IACzC,MAAMlP,EAAgBrpD,EAAQ88C,gBAAgBwM,iBAAiBiP,EAAQvpE,GAAUwK,OAEjF,OAAO6vD,aAAa,EAAbA,EAAe1qB,SAAS,KAGK/zC,QAAOjL,GAASA,IAAUy4E,GAAiBz4E,IAAUu4E,IAI9D,IAAAM,EAA3BF,EAAmBjiF,SAEnB+hF,EAA6E,QAAhEI,EAAGF,EAAmB1xD,MAAKjnB,GAASA,IAAUgsD,KAAAA,aAAkB,IAAA6sB,EAAAA,EACtEF,EAAmB1xD,MAAKjnB,GAAShN,KAAKilF,kBAAkBj4E,KAEvE,CACIy4E,IAAkBD,GAAiBn4D,SAAAA,EAASrc,eAAe80E,qBAAqBP,IAChFl4D,EAAQ+lD,eAAeqS,EAAeF,EAE9C,CASAQ,oBACI,OAAO/lF,KAAKolF,iBAChB,EC3IJ,MAAM37E,IAASC,EAAAA,EAAAA,2CAMA,MAAMs8E,GAYjBzkF,YAAYyP,EAAgBi1E,EAAO1rE,EAAS8P,GACxC,IAAKrZ,IAAmBi1E,EACpB,MAAM,IAAIvd,UAAU,kDACjB,GAAI13D,GAAkBi1E,EACzB,MAAM,IAAIvd,UAAU,qDAmCxB,GAhCI13D,EACAvH,GAAOgH,MAAM,qCAEbhH,GAAOgH,MAAO,6BAA4Bw1E,MAK9CjmF,KAAKkmF,SAAW,KAGhBlmF,KAAKm1B,YAAc9K,EAInBrqB,KAAKmmF,gBAAa7lF,EAGlBN,KAAKomF,cAAgB7rE,EAIrBva,KAAKqmF,MAAQ,KAGbrmF,KAAKsmF,oBAAqB,EAG1BtmF,KAAKumF,mBAAoB,EAIrBv1E,EAAgB,CAChB,MAAMw1E,EACAx1E,EAAey1E,kBACb,mBAAoB,CAChBthE,SAAU,uCAItBnlB,KAAK0mF,eAAeF,GACpBxmF,KAAKqmF,MAAQ,aAGjB,MAAWJ,IACPjmF,KAAKsmF,oBAAqB,EAC1BtmF,KAAK2mF,OAASV,EACdjmF,KAAK4mF,iBAEb,CAOAA,iBAEI,MAAMC,EAAK,IAAI9yC,UAAU/zC,KAAK2mF,QAG9B3mF,KAAK0mF,eAAeG,GACpB7mF,KAAKqmF,MAAQ,WACjB,CAOAS,0BACI,IAAIC,EAAW,EAEf,MAAMC,EAASA,MACUhnF,KAAKkmF,UAA0C,eAA7BlmF,KAAKkmF,SAASpyC,YAC1C9zC,KAAKkmF,SAASpyC,aAAeC,UAAUkzC,WAW9CjnF,KAAKknF,WAGTlnF,KAAK4mF,eAAe5mF,KAAK2mF,QACzBI,EAAWxrE,KAAK4yB,IAAe,EAAX44C,EAAc,IAClC/mF,KAAKmnF,cAAgB1tD,WAAWutD,EAAmB,IAAXD,IAVpC/mF,KAAKmnF,cAAgB1tD,WAAWutD,EAAmB,IAAXD,EAUY,EAG5D/mF,KAAKmnF,cAAgB1tD,WAAWutD,EAAmB,IAAXD,EAC5C,CAOAK,yBACQpnF,KAAKmnF,gBACL9tD,aAAar5B,KAAKmnF,eAClBnnF,KAAKmnF,mBAAgB7mF,EAE7B,CAQA+mF,0BAA0BC,GACtB,IAAKtnF,KAAKsmF,mBACN,OAEJ,MAAM,KAAE1K,EAAI,OAAElnE,GAAW4yE,EAEzBz/D,GAAWmF,crEoW2Bu6D,EAAE3L,EAAclnE,KAAc,CACxEtR,KAAM5B,GAAgBC,iBACtBwB,OAAQ,uBACRC,WAAY,CACR04E,OACAlnE,YqEzWyB6yE,CAA+B3L,EAAMlnE,IAC9D1U,KAAKsmF,oBAAqB,EAC1BtmF,KAAKomF,cAAc5kB,KAAKtvC,GAAAA,QAAAA,mBAA6B,KACjDlyB,KAAKonF,yBACLpnF,KAAKsmF,oBAAqB,CAAI,IAElCtmF,KAAK8mF,yBACT,CAMIrnC,WACA,OAAOz/C,KAAKqmF,KAChB,CAKAtsE,QAII,GAHA/Z,KAAKumF,mBAAoB,EACzBvmF,KAAKonF,yBACLpnF,KAAKsmF,oBAAqB,EACtBtmF,KAAKkmF,SAAU,CACf,IACIlmF,KAAKkmF,SAASnsE,OAClB,CAAE,MAAOna,GAAQ,CAEjBI,KAAKkmF,SAAW,IACpB,CACJ,CAOAgB,SACI,OAAOlnF,KAAKkmF,WAA0C,SAA7BlmF,KAAKkmF,SAASpyC,YAChC9zC,KAAKkmF,SAASpyC,aAAeC,UAAUC,KAClD,CAOAwzC,yBAAyB91D,GACrB1xB,KAAKynF,MAAM,CACPC,aAAc,mBACXh2D,GAEX,CAWAuT,YAAYsM,EAAI7f,GACZ1xB,KAAKynF,MAAM,CACPC,aAAc,kBACdC,WAAYj2D,EACZ6f,MAER,CAMAq2C,oBAAoBjgF,GAChB8B,GAAOwG,IAAK,iBAAgBtI,MAE5B3H,KAAKynF,MAAM,CACPC,aAAc,oBACdG,MAAOlgF,GAEf,CAOAmgF,oCAAoC5nF,GAChCuJ,GAAOwG,IAAK,yCAAwCtH,KAAKC,UAAU1I,MACnEF,KAAKynF,MAAM,CACPC,aAAc,8BACXxnF,GAEX,CASA6nF,2BAA2BtlE,EAAYuQ,GACnCvpB,GAAOE,KAAM,kDAAiD8Y,MAAeuQ,KAC7EhzB,KAAKynF,MAAM,CACPC,aAAc,yBACdjlE,aACAuQ,aAER,CAKA0zD,eAAesB,GACX,MAAMztE,EAAUva,KAAKomF,cAErB4B,EAAQC,OAAS,KACbx+E,GAAOE,KAAM,GAAE3J,KAAKqmF,wBAEpBrmF,KAAKmmF,YAAa,EAElB5rE,EAAQlR,KAAK6oB,GAAAA,QAAAA,kBAA4B,EAG7C81D,EAAQltD,QAAUrsB,IAGK,cAAfzO,KAAKqmF,OACL58E,GAAO7J,MAAO,kBAAiB6O,EAAMlO,UACzC,EAGJynF,EAAQE,UAAY56C,IAAc,IAE1BiL,GAFa,KAAEnnC,GAAMk8B,EAIzB,IACIiL,EAAM5vC,KAAK24B,MAAMlwB,EACrB,CAAE,MAAOxR,GAIL,OAHA4S,KAAAA,iBAAsC5S,QACtC6J,GAAO7J,MAAM,4CAA6CwR,EAAMxR,EAGpE,CAEA,MAAM8nF,EAAenvC,EAAImvC,aAEzB,OAAQA,GACR,IAAK,qCAAsC,CACvC,MAAM,wBAAES,EAAuB,iBAAEC,EAAmB,GAAE,QAAEv8D,GAAY0sB,EAEpE9uC,GAAOgH,MAAO,qBAAoB03E,yBAA+CC,KACjF7tE,EAAQlR,KAAK6oB,GAAAA,QAAAA,yBAAoCi2D,EAAyBC,EAAkBv8D,GAC5F,KACJ,CACA,IAAK,wCAAyC,CAC1C,MAAMsxD,EAAW5kC,EAAI4kC,SACfkL,EAA0B,SAAf9vC,EAAIwgC,OAErBtvE,GAAOE,KAAM,uCAAsCwzE,YAAmBkL,KACtE9tE,EAAQlR,KAAK6oB,GAAAA,QAAAA,6BAAwCirD,EAAUkL,GAE/D,KACJ,CACA,IAAK,kBACD9tE,EAAQlR,KAAK6oB,GAAAA,QAAAA,0BAAqCqmB,EAAI/tB,KAAM+tB,EAAIovC,YAEhE,MAEJ,IAAK,gBACDptE,EAAQlR,KAAK6oB,GAAAA,QAAAA,wBAAmCqmB,EAAI/tB,KAAM+tB,GAE1D,MAEJ,IAAK,mBAAoB,CACrB,MAAM+vC,EAAmB/vC,EAAI+vC,iBAE7B7+E,GAAOE,KAAM,0BAAyB2+E,KACtC/tE,EAAQlR,KAAK6oB,GAAAA,QAAAA,0BAAqCo2D,GAElD,KACJ,CACA,IAAK,0BAC6B,iBAAnB/vC,EAAI91B,YAAoD,iBAAlB81B,EAAIuZ,WACjDroD,GAAOE,KAAM,4BAA2B4uC,EAAI91B,gBAAgB81B,EAAIuZ,aAChEv3C,EAAQlR,KAAK6oB,GAAAA,QAAAA,iCAA4CqmB,IAEzD9uC,GAAO7J,MAAO,oCAAmC24C,EAAI91B,gBAAgB81B,EAAIuZ,aAE7E,MAEJ,IAAK,cACDroD,GAAOE,KAAM,iCAAgC4uC,EAAInzC,YACjD,MAEJ,IAAK,kBACDqE,GAAOE,KAAM,6BAA4BhB,KAAKC,UAAU2vC,EAAI29B,kBAC5D37D,EAAQlR,KAAK6oB,GAAAA,QAAAA,qBAAgCqmB,GAC7C,MAEJ,IAAK,kBACD9uC,GAAOE,KAAM,6BAA4BhB,KAAKC,UAAU2vC,EAAI29B,kBAC5D37D,EAAQlR,KAAK6oB,GAAAA,QAAAA,qBAAgCqmB,GAC7C,MAEJ,QACI9uC,GAAOgH,MAAM,mCAAoC8nC,GAMjDh+B,EAAQlR,KAAM,mBAAkBq+E,IAAgBnvC,GAEpD,EAGJyvC,EAAQO,QAAU95E,IAGd,GAFAhF,GAAOgH,MAAO,sBAAoBzQ,KAAKumF,kBAAoB,SAAW,WAElEyB,IAAYhoF,KAAKkmF,SAArB,CAaA,KAHwBlmF,KAAKumF,mBACN,OAAf93E,EAAMmtE,MAA4D,IAA3C57E,KAAKm1B,YAAYqzD,uBAE1B,CAClB,MAAM,KAAE5M,EAAI,OAAElnE,GAAWjG,EAEzBhF,GAAO7J,MAAO,mBAAkBg8E,KAAQlnE,KAErB,cAAf1U,KAAKqmF,QACLrmF,KAAKqnF,0BAA0B54E,IAGP,IAApBzO,KAAKmmF,YACL5rE,EAAQlR,KAAK6oB,GAAAA,QAAAA,oBAA+B,CACxC0pD,OACAlnE,WAIhB,CAEA1U,KAAKmmF,YAAa,EAGlBnmF,KAAKkmF,SAAW,IA9BhB,MAHIz8E,GAAOgH,MAAM,kEAiCG,EAIxBzQ,KAAKkmF,SAAW8B,CACpB,CASAP,MAAMgB,GACF,MAAMT,EAAUhoF,KAAKkmF,SAErB,IAAKlmF,KAAKknF,SAEN,MADAz9E,GAAO7J,MAAM,2CACP,IAAIsB,MAAM,qBAGpB8mF,EAAQ5xC,KAAKztC,KAAKC,UAAU6/E,GAChC,4BCxaJ,IAAIC,IAAe,EACfC,IAAuB,EAUpB,SAASC,GAAeC,EAAUC,EAAMC,GAC7C,MAAM5jF,EAAQ0jF,EAAS1jF,MAAM2jF,GAC7B,OAAO3jF,GAASA,EAAMzB,QAAUqlF,GAAO5iF,SAAShB,EAAM4jF,GAAM,GAC9D,CAKO,SAASC,GAAwBlgF,EAAQmgF,EAAiBxnB,GAC/D,IAAK34D,EAAOogF,kBACV,OAEF,MAAMv1B,EAAQ7qD,EAAOogF,kBAAkB9nF,UACjC+nF,EAAyBx1B,EAAMloD,iBACrCkoD,EAAMloD,iBAAmB,SAAS29E,EAAiBtoB,GACjD,GAAIsoB,IAAoBH,EACtB,OAAOE,EAAuB52E,MAAMvS,KAAMyD,WAE5C,MAAM4lF,EAAmB75E,IACvB,MAAM85E,EAAgB7nB,EAAQjyD,GAC1B85E,IACExoB,EAAGyoB,YACLzoB,EAAGyoB,YAAYD,GAEfxoB,EAAGwoB,GAEP,EAOF,OALAtpF,KAAKwpF,UAAYxpF,KAAKwpF,WAAa,CAAC,EAC/BxpF,KAAKwpF,UAAUP,KAClBjpF,KAAKwpF,UAAUP,GAAmB,IAAIjqE,KAExChf,KAAKwpF,UAAUP,GAAiBnjE,IAAIg7C,EAAIuoB,GACjCF,EAAuB52E,MAAMvS,KAAM,CAACopF,EACzCC,GACJ,EAEA,MAAMI,EAA4B91B,EAAMh6B,oBACxCg6B,EAAMh6B,oBAAsB,SAASyvD,EAAiBtoB,GACpD,GAAIsoB,IAAoBH,IAAoBjpF,KAAKwpF,YACzCxpF,KAAKwpF,UAAUP,GACrB,OAAOQ,EAA0Bl3E,MAAMvS,KAAMyD,WAE/C,IAAKzD,KAAKwpF,UAAUP,GAAiBl+D,IAAI+1C,GACvC,OAAO2oB,EAA0Bl3E,MAAMvS,KAAMyD,WAE/C,MAAMimF,EAAc1pF,KAAKwpF,UAAUP,GAAiBtkE,IAAIm8C,GAQxD,OAPA9gE,KAAKwpF,UAAUP,GAAiB/yE,OAAO4qD,GACM,IAAzC9gE,KAAKwpF,UAAUP,GAAiB96E,aAC3BnO,KAAKwpF,UAAUP,GAEmB,IAAvC5nF,OAAO8G,KAAKnI,KAAKwpF,WAAW9lF,eACvB1D,KAAKwpF,UAEPC,EAA0Bl3E,MAAMvS,KAAM,CAACopF,EAC5CM,GACJ,EAEAroF,OAAOwG,eAAe8rD,EAAO,KAAOs1B,EAAiB,CACnDtkE,MACE,OAAO3kB,KAAK,MAAQipF,EACtB,EACAnjE,IAAIg7C,GACE9gE,KAAK,MAAQipF,KACfjpF,KAAK25B,oBAAoBsvD,EACrBjpF,KAAK,MAAQipF,WACVjpF,KAAK,MAAQipF,IAElBnoB,GACF9gE,KAAKyL,iBAAiBw9E,EAClBjpF,KAAK,MAAQipF,GAAmBnoB,EAExC,EACAh5D,YAAY,EACZC,cAAc,GAElB,CAEO,SAAS4hF,GAAWhiB,GACzB,MAAoB,kBAATA,EACF,IAAIzmE,MAAM,yBAA2BymE,EACxC,4BAEN+gB,GAAe/gB,EACPA,EAAQ,8BACZ,6BACN,CAMO,SAASiiB,GAAgBjiB,GAC9B,MAAoB,kBAATA,EACF,IAAIzmE,MAAM,yBAA2BymE,EACxC,4BAENghB,IAAwBhhB,EACjB,oCAAsCA,EAAO,WAAa,WACnE,CAEO,SAAS13D,KACd,GAAsB,iBAAXnH,OAAqB,CAC9B,GAAI4/E,GACF,OAEqB,oBAAZx/E,SAAkD,mBAAhBA,QAAQ+G,KACnD/G,QAAQ+G,IAAIsC,MAAMrJ,QAASzF,UAE/B,CACF,CAKO,SAASomF,GAAWC,EAAWC,GAC/BpB,IAGLz/E,QAAQC,KAAK2gF,EAAY,8BAAgCC,EACrD,YACN,CAuDA,SAASC,GAAS/iB,GAChB,MAA+C,oBAAxC5lE,OAAOD,UAAUiuC,SAASr8B,KAAKi0D,EACxC,CAOO,SAASgjB,GAAc74E,GAC5B,OAAK44E,GAAS54E,GAIP/P,OAAO8G,KAAKiJ,GAAMyG,QAAO,SAASqyE,EAAaxiF,GACpD,MAAMyiF,EAAQH,GAAS54E,EAAK1J,IACtBC,EAAQwiF,EAAQF,GAAc74E,EAAK1J,IAAQ0J,EAAK1J,GAChD0iF,EAAgBD,IAAU9oF,OAAO8G,KAAKR,GAAOjE,OACnD,YAAcpD,IAAVqH,GAAuByiF,EAClBF,EAEF7oF,OAAOsgE,OAAOuoB,EAAa,CAAC,CAACxiF,GAAMC,GAC5C,GAAG,CAAC,GAXKyJ,CAYX,CAGO,SAASi5E,GAAUxvE,EAAOyzB,EAAMg8C,GAChCh8C,IAAQg8C,EAAUv/D,IAAIujB,EAAKzoB,MAGhCykE,EAAUxkE,IAAIwoB,EAAKzoB,GAAIyoB,GACvBjtC,OAAO8G,KAAKmmC,GAAMlgC,SAAQrO,IACpBA,EAAKirB,SAAS,MAChBq/D,GAAUxvE,EAAOA,EAAM8J,IAAI2pB,EAAKvuC,IAAQuqF,GAC/BvqF,EAAKirB,SAAS,QACvBsjB,EAAKvuC,GAAMqO,SAAQyX,IACjBwkE,GAAUxvE,EAAOA,EAAM8J,IAAIkB,GAAKykE,EAAU,GAE9C,IAEJ,CAGO,SAASC,GAAYvqE,EAAQqC,EAAOmoE,GACzC,MAAMC,EAAkBD,EAAW,eAAiB,cAC9CE,EAAiB,IAAI1rE,IAC3B,GAAc,OAAVqD,EACF,OAAOqoE,EAET,MAAMC,EAAa,GAcnB,OAbA3qE,EAAO5R,SAAQzG,IACM,UAAfA,EAAMvE,MACNuE,EAAMuf,kBAAoB7E,EAAMwD,IAClC8kE,EAAWr7E,KAAK3H,EAClB,IAEFgjF,EAAWv8E,SAAQw8E,IACjB5qE,EAAO5R,SAAQyM,IACTA,EAAMzX,OAASqnF,GAAmB5vE,EAAMgwE,UAAYD,EAAU/kE,IAChEwkE,GAAUrqE,EAAQnF,EAAO6vE,EAC3B,GACA,IAEGA,CACT,CC3PA,MAAMI,GAAUC,GAET,SAASC,GAAiBliF,EAAQmiF,GACvC,MAAM/lF,EAAY4D,GAAUA,EAAO5D,UAEnC,IAAKA,EAAUmF,aACb,OAGF,MAAM6gF,EAAuB,SAASziD,GACpC,GAAiB,iBAANA,GAAkBA,EAAE3nC,WAAa2nC,EAAE8oB,SAC5C,OAAO9oB,EAET,MAAM0iD,EAAK,CAAC,EA4CZ,OA3CA9pF,OAAO8G,KAAKsgC,GAAGr6B,SAAQ1G,IACrB,GAAY,YAARA,GAA6B,aAARA,GAA8B,gBAARA,EAC7C,OAEF,MAAM0jF,EAAuB,iBAAX3iD,EAAE/gC,GAAqB+gC,EAAE/gC,GAAO,CAAC2jF,MAAO5iD,EAAE/gC,SAC5CpH,IAAZ8qF,EAAEE,OAA0C,iBAAZF,EAAEE,QACpCF,EAAEj9C,IAAMi9C,EAAE5vE,IAAM4vE,EAAEE,OAEpB,MAAMC,EAAW,SAASC,EAAQzrF,GAChC,OAAIyrF,EACKA,EAASzrF,EAAKwpC,OAAO,GAAGkiD,cAAgB1rF,EAAKM,MAAM,GAE3C,aAATN,EAAuB,WAAaA,CAC9C,EACA,QAAgBO,IAAZ8qF,EAAEC,MAAqB,CACzBF,EAAG55B,SAAW45B,EAAG55B,UAAY,GAC7B,IAAIm6B,EAAK,CAAC,EACa,iBAAZN,EAAEC,OACXK,EAAGH,EAAS,MAAO7jF,IAAQ0jF,EAAEC,MAC7BF,EAAG55B,SAASjiD,KAAKo8E,GACjBA,EAAK,CAAC,EACNA,EAAGH,EAAS,MAAO7jF,IAAQ0jF,EAAEC,MAC7BF,EAAG55B,SAASjiD,KAAKo8E,KAEjBA,EAAGH,EAAS,GAAI7jF,IAAQ0jF,EAAEC,MAC1BF,EAAG55B,SAASjiD,KAAKo8E,GAErB,MACgBprF,IAAZ8qF,EAAEE,OAA0C,iBAAZF,EAAEE,OACpCH,EAAGrqF,UAAYqqF,EAAGrqF,WAAa,CAAC,EAChCqqF,EAAGrqF,UAAUyqF,EAAS,GAAI7jF,IAAQ0jF,EAAEE,OAEpC,CAAC,MAAO,OAAOl9E,SAAQu9E,SACNrrF,IAAX8qF,EAAEO,KACJR,EAAGrqF,UAAYqqF,EAAGrqF,WAAa,CAAC,EAChCqqF,EAAGrqF,UAAUyqF,EAASI,EAAKjkF,IAAQ0jF,EAAEO,GACvC,GAEJ,IAEEljD,EAAEmjD,WACJT,EAAG55B,UAAY45B,EAAG55B,UAAY,IAAIoJ,OAAOlyB,EAAEmjD,WAEtCT,CACT,EAEMU,EAAmB,SAAS3rF,EAAamgE,GAC7C,GAAI4qB,EAAe7lF,SAAW,GAC5B,OAAOi7D,EAAKngE,GAGd,IADAA,EAAcyI,KAAK24B,MAAM34B,KAAKC,UAAU1I,MACQ,iBAAtBA,EAAYmhB,MAAoB,CACxD,MAAMyqE,EAAQ,SAASvzC,EAAKzgC,EAAGC,GACzBD,KAAKygC,KAASxgC,KAAKwgC,KACrBA,EAAIxgC,GAAKwgC,EAAIzgC,UACNygC,EAAIzgC,GAEf,EAEAg0E,GADA5rF,EAAcyI,KAAK24B,MAAM34B,KAAKC,UAAU1I,KACtBmhB,MAAO,kBAAmB,uBAC5CyqE,EAAM5rF,EAAYmhB,MAAO,mBAAoB,wBAC7CnhB,EAAYmhB,MAAQ6pE,EAAqBhrF,EAAYmhB,MACvD,CACA,GAAInhB,GAA4C,iBAAtBA,EAAYS,MAAoB,CAExD,IAAIorF,EAAO7rF,EAAYS,MAAMqrF,WAC7BD,EAAOA,IAA0B,iBAATA,EAAqBA,EAAO,CAACV,MAAOU,IAC5D,MAAME,EAA6BhB,EAAe7lF,QAAU,GAE5D,GAAK2mF,IAAwB,SAAfA,EAAKT,OAAmC,gBAAfS,EAAKT,OACf,SAAfS,EAAKV,OAAmC,gBAAfU,EAAKV,UACtCnmF,EAAUmF,aAAa6hF,0BACvBhnF,EAAUmF,aAAa6hF,0BAA0BF,YAChDC,GAA6B,CAElC,IAAIvhF,EAMJ,UAPOxK,EAAYS,MAAMqrF,WAEN,gBAAfD,EAAKT,OAA0C,gBAAfS,EAAKV,MACvC3gF,EAAU,CAAC,OAAQ,QACK,SAAfqhF,EAAKT,OAAmC,SAAfS,EAAKV,QACvC3gF,EAAU,CAAC,UAETA,EAEF,OAAOxF,EAAUmF,aAAa8hF,mBAC7BpsE,MAAKjgB,IAEJ,IAAIssF,GADJtsF,EAAUA,EAAQmY,QAAOmoB,GAAgB,eAAXA,EAAExZ,QACdqN,MAAKmM,GAAK11B,EAAQqC,MAAK5H,GACvCi7B,EAAEisD,MAAMrkC,cAAcjY,SAAS5qC,OAUjC,OATKinF,GAAOtsF,EAAQ4D,QAAUgH,EAAQqlC,SAAS,UAC7Cq8C,EAAMtsF,EAAQA,EAAQ4D,OAAS,IAE7B0oF,IACFlsF,EAAYS,MAAM2rF,SAAWP,EAAKT,MAAQ,CAACA,MAAOc,EAAIE,UACZ,CAACjB,MAAOe,EAAIE,WAExDpsF,EAAYS,MAAQuqF,EAAqBhrF,EAAYS,OACrDmqF,GAAQ,WAAaniF,KAAKC,UAAU1I,IAC7BmgE,EAAKngE,EAAY,GAG9B,CACAA,EAAYS,MAAQuqF,EAAqBhrF,EAAYS,MACvD,CAEA,OADAmqF,GAAQ,WAAaniF,KAAKC,UAAU1I,IAC7BmgE,EAAKngE,EACd,EAEMqsF,EAAa,SAAS/8E,GAC1B,OAAIy7E,EAAe7lF,SAAW,GACrBoK,EAEF,CACLzP,KAAM,CACJysF,sBAAuB,kBACvBC,yBAA0B,kBAC1BC,kBAAmB,kBACnBC,qBAAsB,gBACtBC,4BAA6B,uBAC7BC,gBAAiB,mBACjBC,+BAAgC,kBAChCC,wBAAyB,kBACzBC,gBAAiB,aACjBC,mBAAoB,aACpBC,mBAAoB,cACpB19E,EAAEzP,OAASyP,EAAEzP,KACfQ,QAASiP,EAAEjP,QACXG,WAAY8O,EAAE9O,YAAc8O,EAAE/O,eAC9B4uC,WACE,OAAOrvC,KAAKD,MAAQC,KAAKO,SAAW,MAAQP,KAAKO,OACnD,EAEJ,EAgBA,GALA2E,EAAUoF,aATY,SAASpK,EAAa2qD,EAAWC,GACrD+gC,EAAiB3rF,GAAauoC,IAC5BvjC,EAAUioF,mBAAmB1kD,EAAGoiB,GAAWr7C,IACrCs7C,GACFA,EAAQyhC,EAAW/8E,GACrB,GACA,GAEN,EACuC4gB,KAAKlrB,GAKxCA,EAAUmF,aAAaC,aAAc,CACvC,MAAM8iF,EAAmBloF,EAAUmF,aAAaC,aAC5C8lB,KAAKlrB,EAAUmF,cACnBnF,EAAUmF,aAAaC,aAAe,SAASuH,GAC7C,OAAOg6E,EAAiBh6E,GAAI42B,GAAK2kD,EAAiB3kD,GAAG1oB,MAAKrT,IACxD,GAAI+7B,EAAEpnB,QAAU3U,EAAO2gF,iBAAiB3pF,QACpC+kC,EAAE9nC,QAAU+L,EAAO4gF,iBAAiB5pF,OAItC,MAHAgJ,EAAOupB,YAAY7nB,SAAQiU,IACzBA,EAAM9I,MAAM,IAER,IAAIg0E,aAAa,GAAI,iBAE7B,OAAO7gF,CAAM,IACZ8C,GAAK6E,QAAQE,OAAOg4E,EAAW/8E,OACpC,CACF,CACF,CClLO,SAASg+E,GAAoB1kF,EAAQ2kF,GACtC3kF,EAAO5D,UAAUmF,cACnB,oBAAqBvB,EAAO5D,UAAUmF,cAGlCvB,EAAO5D,UAAUmF,eAKI,mBAAhBojF,EAKX3kF,EAAO5D,UAAUmF,aAAa+B,gBAC5B,SAAyBlM,GACvB,OAAOutF,EAAYvtF,GAChB6f,MAAKgyC,IACJ,MAAM27B,EAAiBxtF,EAAYS,OAAST,EAAYS,MAAMgiB,MACxDgrE,EAAkBztF,EAAYS,OAClCT,EAAYS,MAAMiiB,OACdgrE,EAAqB1tF,EAAYS,OACrCT,EAAYS,MAAM4lB,UAcpB,OAbArmB,EAAYS,MAAQ,CAClBG,UAAW,CACT0wD,kBAAmB,UACnBC,oBAAqBM,EACrBJ,aAAci8B,GAAsB,IAGpCF,IACFxtF,EAAYS,MAAMG,UAAU8wD,SAAW87B,GAErCC,IACFztF,EAAYS,MAAMG,UAAUgxD,UAAY67B,GAEnC7kF,EAAO5D,UAAUmF,aAAaC,aAAapK,EAAY,GAEpE,EA5BAgJ,QAAQtJ,MAAM,+DA6BlB,CCnCO,SAASiuF,GAAgB/kF,GAC9BA,EAAOglF,YAAchlF,EAAOglF,aAAehlF,EAAOilF,iBACpD,CAEO,SAASC,GAAYllF,GAC1B,GAAsB,iBAAXA,GAAuBA,EAAOogF,qBAAuB,YAC5DpgF,EAAOogF,kBAAkB9nF,WAAY,CACvCC,OAAOwG,eAAeiB,EAAOogF,kBAAkB9nF,UAAW,UAAW,CACnEujB,MACE,OAAO3kB,KAAKiuF,QACd,EACAnoE,IAAImmB,GACEjsC,KAAKiuF,UACPjuF,KAAK25B,oBAAoB,QAAS35B,KAAKiuF,UAEzCjuF,KAAKyL,iBAAiB,QAASzL,KAAKiuF,SAAWhiD,EACjD,EACAnkC,YAAY,EACZC,cAAc,IAEhB,MAAMmmF,EACFplF,EAAOogF,kBAAkB9nF,UAAUwxE,qBACvC9pE,EAAOogF,kBAAkB9nF,UAAUwxE,qBACjC,WAuCE,OAtCK5yE,KAAKmuF,eACRnuF,KAAKmuF,aAAgB3+E,IAGnBA,EAAE9C,OAAOjB,iBAAiB,YAAY2iF,IACpC,IAAIjzD,EAEFA,EADEryB,EAAOogF,kBAAkB9nF,UAAUitF,aAC1BruF,KAAKquF,eACbp6D,MAAKm3D,GAAKA,EAAE/oE,OAAS+oE,EAAE/oE,MAAMwD,KAAOuoE,EAAG/rE,MAAMwD,KAErC,CAACxD,MAAO+rE,EAAG/rE,OAGxB,MAAM5T,EAAQ,IAAI6/E,MAAM,SACxB7/E,EAAM4T,MAAQ+rE,EAAG/rE,MACjB5T,EAAM0sB,SAAWA,EACjB1sB,EAAM8/E,YAAc,CAACpzD,YACrB1sB,EAAMouD,QAAU,CAACrtD,EAAE9C,QACnB1M,KAAKwuF,cAAc//E,EAAM,IAE3Be,EAAE9C,OAAOupB,YAAY7nB,SAAQiU,IAC3B,IAAI8Y,EAEFA,EADEryB,EAAOogF,kBAAkB9nF,UAAUitF,aAC1BruF,KAAKquF,eACbp6D,MAAKm3D,GAAKA,EAAE/oE,OAAS+oE,EAAE/oE,MAAMwD,KAAOxD,EAAMwD,KAElC,CAACxD,SAEd,MAAM5T,EAAQ,IAAI6/E,MAAM,SACxB7/E,EAAM4T,MAAQA,EACd5T,EAAM0sB,SAAWA,EACjB1sB,EAAM8/E,YAAc,CAACpzD,YACrB1sB,EAAMouD,QAAU,CAACrtD,EAAE9C,QACnB1M,KAAKwuF,cAAc//E,EAAM,GACzB,EAEJzO,KAAKyL,iBAAiB,YAAazL,KAAKmuF,eAEnCD,EAAyB37E,MAAMvS,KAAMyD,UAC9C,CACJ,MAIEsnF,GAA8BjiF,EAAQ,SAAS0G,IACxCA,EAAE++E,aACLltF,OAAOwG,eAAe2H,EAAG,cACvB,CAAC7H,MAAO,CAACwzB,SAAU3rB,EAAE2rB,YAElB3rB,IAGb,CAEO,SAASi/E,GAAuB3lF,GAErC,GAAsB,iBAAXA,GAAuBA,EAAOogF,qBACnC,eAAgBpgF,EAAOogF,kBAAkB9nF,YAC3C,qBAAsB0H,EAAOogF,kBAAkB9nF,UAAW,CAC5D,MAAMstF,EAAqB,SAASp9E,EAAI+Q,GACtC,MAAO,CACLA,QACIssE,WAQF,YAPmBruF,IAAfN,KAAK4uF,QACY,UAAfvsE,EAAMuE,KACR5mB,KAAK4uF,MAAQt9E,EAAGu9E,iBAAiBxsE,GAEjCriB,KAAK4uF,MAAQ,MAGV5uF,KAAK4uF,KACd,EACAE,IAAKx9E,EAET,EAGA,IAAKxI,EAAOogF,kBAAkB9nF,UAAU2tF,WAAY,CAClDjmF,EAAOogF,kBAAkB9nF,UAAU2tF,WAAa,WAE9C,OADA/uF,KAAKgvF,SAAWhvF,KAAKgvF,UAAY,GAC1BhvF,KAAKgvF,SAAS3uF,OACvB,EACA,MAAM4uF,EAAenmF,EAAOogF,kBAAkB9nF,UAAU2wE,SACxDjpE,EAAOogF,kBAAkB9nF,UAAU2wE,SACjC,SAAkB1vD,EAAO3V,GACvB,IAAIgvB,EAASuzD,EAAa18E,MAAMvS,KAAMyD,WAKtC,OAJKi4B,IACHA,EAASgzD,EAAmB1uF,KAAMqiB,GAClCriB,KAAKgvF,SAAS1/E,KAAKosB,IAEdA,CACT,EAEF,MAAMwzD,EAAkBpmF,EAAOogF,kBAAkB9nF,UAAU+tF,YAC3DrmF,EAAOogF,kBAAkB9nF,UAAU+tF,YACjC,SAAqBzzD,GACnBwzD,EAAgB38E,MAAMvS,KAAMyD,WAC5B,MAAM42B,EAAMr6B,KAAKgvF,SAASpuF,QAAQ86B,IACrB,IAATrB,GACFr6B,KAAKgvF,SAASz/E,OAAO8qB,EAAK,EAE9B,CACJ,CACA,MAAM+0D,EAAgBtmF,EAAOogF,kBAAkB9nF,UAAUiuF,UACzDvmF,EAAOogF,kBAAkB9nF,UAAUiuF,UAAY,SAAmB3iF,GAChE1M,KAAKgvF,SAAWhvF,KAAKgvF,UAAY,GACjCI,EAAc78E,MAAMvS,KAAM,CAAC0M,IAC3BA,EAAOupB,YAAY7nB,SAAQiU,IACzBriB,KAAKgvF,SAAS1/E,KAAKo/E,EAAmB1uF,KAAMqiB,GAAO,GAEvD,EAEA,MAAMitE,EAAmBxmF,EAAOogF,kBAAkB9nF,UAAUmuF,aAC5DzmF,EAAOogF,kBAAkB9nF,UAAUmuF,aACjC,SAAsB7iF,GACpB1M,KAAKgvF,SAAWhvF,KAAKgvF,UAAY,GACjCM,EAAiB/8E,MAAMvS,KAAM,CAAC0M,IAE9BA,EAAOupB,YAAY7nB,SAAQiU,IACzB,MAAMqZ,EAAS17B,KAAKgvF,SAAS/6D,MAAKiV,GAAKA,EAAE7mB,QAAUA,IAC/CqZ,GACF17B,KAAKgvF,SAASz/E,OAAOvP,KAAKgvF,SAASpuF,QAAQ86B,GAAS,EACtD,GAEJ,CACJ,MAAO,GAAsB,iBAAX5yB,GAAuBA,EAAOogF,mBACrC,eAAgBpgF,EAAOogF,kBAAkB9nF,WACzC,qBAAsB0H,EAAOogF,kBAAkB9nF,WAC/C0H,EAAO0D,gBACL,SAAU1D,EAAO0D,aAAapL,WAAY,CACrD,MAAMouF,EAAiB1mF,EAAOogF,kBAAkB9nF,UAAU2tF,WAC1DjmF,EAAOogF,kBAAkB9nF,UAAU2tF,WAAa,WAC9C,MAAMxyB,EAAUizB,EAAej9E,MAAMvS,KAAM,IAE3C,OADAu8D,EAAQnuD,SAAQstB,GAAUA,EAAOozD,IAAM9uF,OAChCu8D,CACT,EAEAl7D,OAAOwG,eAAeiB,EAAO0D,aAAapL,UAAW,OAAQ,CAC3DujB,MAQE,YAPmBrkB,IAAfN,KAAK4uF,QACiB,UAApB5uF,KAAKqiB,MAAMuE,KACb5mB,KAAK4uF,MAAQ5uF,KAAK8uF,IAAID,iBAAiB7uF,KAAKqiB,OAE5CriB,KAAK4uF,MAAQ,MAGV5uF,KAAK4uF,KACd,GAEJ,CACF,CAEO,SAASa,GAAa3mF,GAC3B,IAAKA,EAAOogF,kBACV,OAGF,MAAMwG,EAAe5mF,EAAOogF,kBAAkB9nF,UAAU0e,SACxDhX,EAAOogF,kBAAkB9nF,UAAU0e,SAAW,WAC5C,MAAO6vE,EAAUC,EAAQC,GAASpsF,UAIlC,GAAIA,UAAUC,OAAS,GAAyB,mBAAbisF,EACjC,OAAOD,EAAan9E,MAAMvS,KAAMyD,WAKlC,GAA4B,IAAxBisF,EAAahsF,SAAsC,IAArBD,UAAUC,QACpB,mBAAbisF,GACT,OAAOD,EAAan9E,MAAMvS,KAAM,IAGlC,MAAM8vF,EAAkB,SAASxjD,GAC/B,MAAMyjD,EAAiB,CAAC,EAiBxB,OAhBgBzjD,EAAStsB,SACjB5R,SAAQ6C,IACd,MAAM++E,EAAgB,CACpBnqE,GAAI5U,EAAO4U,GACX1B,UAAWlT,EAAOkT,UAClB/gB,KAAM,CACJ6sF,eAAgB,kBAChBC,gBAAiB,oBACjBj/E,EAAO7N,OAAS6N,EAAO7N,MAE3B6N,EAAOk/E,QAAQ/hF,SAAQrO,IACrBiwF,EAAcjwF,GAAQkR,EAAO6P,KAAK/gB,EAAK,IAEzCgwF,EAAeC,EAAcnqE,IAAMmqE,CAAa,IAG3CD,CACT,EAGMK,EAAe,SAASv1E,GAC5B,OAAO,IAAImE,IAAI3d,OAAO8G,KAAK0S,GAAO6iB,KAAIh2B,GAAO,CAACA,EAAKmT,EAAMnT,MAC3D,EAEA,GAAIjE,UAAUC,QAAU,EAAG,CACzB,MAAM2sF,EAA0B,SAAS/jD,GACvCsjD,EAAOQ,EAAaN,EAAgBxjD,IACtC,EAEA,OAAOojD,EAAan9E,MAAMvS,KAAM,CAACqwF,EAC/BV,GACJ,CAGA,OAAO,IAAIt7E,SAAQ,CAACC,EAASC,KAC3Bm7E,EAAan9E,MAAMvS,KAAM,CACvB,SAASssC,GACPh4B,EAAQ87E,EAAaN,EAAgBxjD,IACvC,EAAG/3B,GAAQ,IACZwL,KAAK6vE,EAAQC,EAClB,CACF,CAEO,SAASS,GAA2BxnF,GACzC,KAAwB,iBAAXA,GAAuBA,EAAOogF,mBACvCpgF,EAAO0D,cAAgB1D,EAAOuC,gBAChC,OAIF,KAAM,aAAcvC,EAAO0D,aAAapL,WAAY,CAClD,MAAMouF,EAAiB1mF,EAAOogF,kBAAkB9nF,UAAU2tF,WACtDS,IACF1mF,EAAOogF,kBAAkB9nF,UAAU2tF,WAAa,WAC9C,MAAMxyB,EAAUizB,EAAej9E,MAAMvS,KAAM,IAE3C,OADAu8D,EAAQnuD,SAAQstB,GAAUA,EAAOozD,IAAM9uF,OAChCu8D,CACT,GAGF,MAAM0yB,EAAenmF,EAAOogF,kBAAkB9nF,UAAU2wE,SACpDkd,IACFnmF,EAAOogF,kBAAkB9nF,UAAU2wE,SAAW,WAC5C,MAAMr2C,EAASuzD,EAAa18E,MAAMvS,KAAMyD,WAExC,OADAi4B,EAAOozD,IAAM9uF,KACN07B,CACT,GAEF5yB,EAAO0D,aAAapL,UAAU0e,SAAW,WACvC,MAAM4b,EAAS17B,KACf,OAAOA,KAAK8uF,IAAIhvE,WAAWC,MAAKC,GAK9B+qE,GAAkB/qE,EAAQ0b,EAAOrZ,OAAO,IAC5C,CACF,CAGA,KAAM,aAAcvZ,EAAOuC,eAAejK,WAAY,CACpD,MAAMmvF,EAAmBznF,EAAOogF,kBAAkB9nF,UAAUitF,aACxDkC,IACFznF,EAAOogF,kBAAkB9nF,UAAUitF,aACjC,WACE,MAAMmC,EAAYD,EAAiBh+E,MAAMvS,KAAM,IAE/C,OADAwwF,EAAUpiF,SAAQ+sB,GAAYA,EAAS2zD,IAAM9uF,OACtCwwF,CACT,GAEJzF,GAA8BjiF,EAAQ,SAAS0G,IAC7CA,EAAE2rB,SAAS2zD,IAAMt/E,EAAEihF,WACZjhF,KAET1G,EAAOuC,eAAejK,UAAU0e,SAAW,WACzC,MAAMqb,EAAWn7B,KACjB,OAAOA,KAAK8uF,IAAIhvE,WAAWC,MAAKC,GAC9B+qE,GAAkB/qE,EAAQmb,EAAS9Y,OAAO,IAC9C,CACF,CAEA,KAAM,aAAcvZ,EAAO0D,aAAapL,cACpC,aAAc0H,EAAOuC,eAAejK,WACtC,OAIF,MAAMsuF,EAAe5mF,EAAOogF,kBAAkB9nF,UAAU0e,SACxDhX,EAAOogF,kBAAkB9nF,UAAU0e,SAAW,WAC5C,GAAIrc,UAAUC,OAAS,GACnBD,UAAU,aAAcqF,EAAO4nF,iBAAkB,CACnD,MAAMruE,EAAQ5e,UAAU,GACxB,IAAIi4B,EACAP,EACAjP,EAoBJ,OAnBAlsB,KAAK+uF,aAAa3gF,SAAQ86B,IACpBA,EAAE7mB,QAAUA,IACVqZ,EACFxP,GAAM,EAENwP,EAASwN,EAEb,IAEFlpC,KAAKquF,eAAejgF,SAAQg9E,IACtBA,EAAE/oE,QAAUA,IACV8Y,EACFjP,GAAM,EAENiP,EAAWiwD,GAGRA,EAAE/oE,QAAUA,KAEjB6J,GAAQwP,GAAUP,EACb9mB,QAAQE,OAAO,IAAIg5E,aACxB,4DACA,uBACO7xD,EACFA,EAAO5b,WACLqb,EACFA,EAASrb,WAEXzL,QAAQE,OAAO,IAAIg5E,aACxB,gDACA,sBACJ,CACA,OAAOmC,EAAan9E,MAAMvS,KAAMyD,UAClC,CACF,CAEO,SAASktF,GAAkC7nF,GAIhDA,EAAOogF,kBAAkB9nF,UAAUwvF,gBACjC,WAEE,OADA5wF,KAAK6wF,qBAAuB7wF,KAAK6wF,sBAAwB,CAAC,EACnDxvF,OAAO8G,KAAKnI,KAAK6wF,sBACrBnzD,KAAIizB,GAAY3wD,KAAK6wF,qBAAqBlgC,GAAU,IACzD,EAEF,MAAMs+B,EAAenmF,EAAOogF,kBAAkB9nF,UAAU2wE,SACxDjpE,EAAOogF,kBAAkB9nF,UAAU2wE,SACjC,SAAkB1vD,EAAO3V,GACvB,IAAKA,EACH,OAAOuiF,EAAa18E,MAAMvS,KAAMyD,WAElCzD,KAAK6wF,qBAAuB7wF,KAAK6wF,sBAAwB,CAAC,EAE1D,MAAMn1D,EAASuzD,EAAa18E,MAAMvS,KAAMyD,WAMxC,OALKzD,KAAK6wF,qBAAqBnkF,EAAOmZ,KAE+B,IAA1D7lB,KAAK6wF,qBAAqBnkF,EAAOmZ,IAAIjlB,QAAQ86B,IACtD17B,KAAK6wF,qBAAqBnkF,EAAOmZ,IAAIvW,KAAKosB,GAF1C17B,KAAK6wF,qBAAqBnkF,EAAOmZ,IAAM,CAACnZ,EAAQgvB,GAI3CA,CACT,EAEF,MAAM0zD,EAAgBtmF,EAAOogF,kBAAkB9nF,UAAUiuF,UACzDvmF,EAAOogF,kBAAkB9nF,UAAUiuF,UAAY,SAAmB3iF,GAChE1M,KAAK6wF,qBAAuB7wF,KAAK6wF,sBAAwB,CAAC,EAE1DnkF,EAAOupB,YAAY7nB,SAAQiU,IAEzB,GADsBriB,KAAK+uF,aAAa96D,MAAKiV,GAAKA,EAAE7mB,QAAUA,IAE5D,MAAM,IAAIkrE,aAAa,wBACnB,qBACN,IAEF,MAAMuD,EAAkB9wF,KAAK+uF,aAC7BK,EAAc78E,MAAMvS,KAAMyD,WAC1B,MAAMstF,EAAa/wF,KAAK+uF,aACrB92E,QAAO+4E,IAAqD,IAAxCF,EAAgBlwF,QAAQowF,KAC/ChxF,KAAK6wF,qBAAqBnkF,EAAOmZ,IAAM,CAACnZ,GAAQiuD,OAAOo2B,EACzD,EAEA,MAAMzB,EAAmBxmF,EAAOogF,kBAAkB9nF,UAAUmuF,aAC5DzmF,EAAOogF,kBAAkB9nF,UAAUmuF,aACjC,SAAsB7iF,GAGpB,OAFA1M,KAAK6wF,qBAAuB7wF,KAAK6wF,sBAAwB,CAAC,SACnD7wF,KAAK6wF,qBAAqBnkF,EAAOmZ,IACjCypE,EAAiB/8E,MAAMvS,KAAMyD,UACtC,EAEF,MAAMyrF,EAAkBpmF,EAAOogF,kBAAkB9nF,UAAU+tF,YAC3DrmF,EAAOogF,kBAAkB9nF,UAAU+tF,YACjC,SAAqBzzD,GAanB,OAZA17B,KAAK6wF,qBAAuB7wF,KAAK6wF,sBAAwB,CAAC,EACtDn1D,GACFr6B,OAAO8G,KAAKnI,KAAK6wF,sBAAsBziF,SAAQuiD,IAC7C,MAAMt2B,EAAMr6B,KAAK6wF,qBAAqBlgC,GAAU/vD,QAAQ86B,IAC3C,IAATrB,GACFr6B,KAAK6wF,qBAAqBlgC,GAAUphD,OAAO8qB,EAAK,GAEC,IAA/Cr6B,KAAK6wF,qBAAqBlgC,GAAUjtD,eAC/B1D,KAAK6wF,qBAAqBlgC,EACnC,IAGGu+B,EAAgB38E,MAAMvS,KAAMyD,UACrC,CACJ,CAEO,SAASwtF,GAAwBnoF,EAAQmiF,GAC9C,IAAKniF,EAAOogF,kBACV,OAGF,GAAIpgF,EAAOogF,kBAAkB9nF,UAAU2wE,UACnCkZ,EAAe7lF,SAAW,GAC5B,OAAOurF,GAAkC7nF,GAK3C,MAAMooF,EAAsBpoF,EAAOogF,kBAAkB9nF,UAChDwvF,gBACL9nF,EAAOogF,kBAAkB9nF,UAAUwvF,gBACjC,WACE,MAAMO,EAAgBD,EAAoB3+E,MAAMvS,MAEhD,OADAA,KAAKoxF,gBAAkBpxF,KAAKoxF,iBAAmB,CAAC,EACzCD,EAAczzD,KAAIhxB,GAAU1M,KAAKoxF,gBAAgB1kF,EAAOmZ,KACjE,EAEF,MAAMupE,EAAgBtmF,EAAOogF,kBAAkB9nF,UAAUiuF,UACzDvmF,EAAOogF,kBAAkB9nF,UAAUiuF,UAAY,SAAmB3iF,GAahE,GAZA1M,KAAKqxF,SAAWrxF,KAAKqxF,UAAY,CAAC,EAClCrxF,KAAKoxF,gBAAkBpxF,KAAKoxF,iBAAmB,CAAC,EAEhD1kF,EAAOupB,YAAY7nB,SAAQiU,IAEzB,GADsBriB,KAAK+uF,aAAa96D,MAAKiV,GAAKA,EAAE7mB,QAAUA,IAE5D,MAAM,IAAIkrE,aAAa,wBACnB,qBACN,KAIGvtF,KAAKoxF,gBAAgB1kF,EAAOmZ,IAAK,CACpC,MAAMyrE,EAAY,IAAIxoF,EAAOglF,YAAYphF,EAAOupB,aAChDj2B,KAAKqxF,SAAS3kF,EAAOmZ,IAAMyrE,EAC3BtxF,KAAKoxF,gBAAgBE,EAAUzrE,IAAMnZ,EACrCA,EAAS4kF,CACX,CACAlC,EAAc78E,MAAMvS,KAAM,CAAC0M,GAC7B,EAEA,MAAM4iF,EAAmBxmF,EAAOogF,kBAAkB9nF,UAAUmuF,aA6D5D,SAASgC,EAAwBjgF,EAAI68C,GACnC,IAAI4J,EAAM5J,EAAY4J,IAOtB,OANA12D,OAAO8G,KAAKmJ,EAAG8/E,iBAAmB,IAAIhjF,SAAQojF,IAC5C,MAAMC,EAAiBngF,EAAG8/E,gBAAgBI,GACpCE,EAAiBpgF,EAAG+/E,SAASI,EAAe5rE,IAClDkyC,EAAMA,EAAI3oB,QAAQ,IAAIuiD,OAAOD,EAAe7rE,GAAI,KAC5C4rE,EAAe5rE,GAAG,IAEjB,IAAI8sD,sBAAsB,CAC/BvvE,KAAM+qD,EAAY/qD,KAClB20D,OAEJ,CAxEAjvD,EAAOogF,kBAAkB9nF,UAAUmuF,aACjC,SAAsB7iF,GACpB1M,KAAKqxF,SAAWrxF,KAAKqxF,UAAY,CAAC,EAClCrxF,KAAKoxF,gBAAkBpxF,KAAKoxF,iBAAmB,CAAC,EAEhD9B,EAAiB/8E,MAAMvS,KAAM,CAAEA,KAAKqxF,SAAS3kF,EAAOmZ,KAAOnZ,WACpD1M,KAAKoxF,gBAAiBpxF,KAAKqxF,SAAS3kF,EAAOmZ,IAC9C7lB,KAAKqxF,SAAS3kF,EAAOmZ,IAAIA,GAAKnZ,EAAOmZ,WAClC7lB,KAAKqxF,SAAS3kF,EAAOmZ,GAC9B,EAEF/c,EAAOogF,kBAAkB9nF,UAAU2wE,SACjC,SAAkB1vD,EAAO3V,GACvB,GAA4B,WAAxB1M,KAAKwuE,eACP,MAAM,IAAI+e,aACR,sDACA,qBAEJ,MAAM1wB,EAAU,GAAGx8D,MAAM2S,KAAKvP,UAAW,GACzC,GAAuB,IAAnBo5D,EAAQn5D,SACPm5D,EAAQ,GAAG5mC,YAAYhC,MAAK5O,GAAKA,IAAMhD,IAG1C,MAAM,IAAIkrE,aACR,gHAEA,qBAIJ,GADsBvtF,KAAK+uF,aAAa96D,MAAKiV,GAAKA,EAAE7mB,QAAUA,IAE5D,MAAM,IAAIkrE,aAAa,wBACnB,sBAGNvtF,KAAKqxF,SAAWrxF,KAAKqxF,UAAY,CAAC,EAClCrxF,KAAKoxF,gBAAkBpxF,KAAKoxF,iBAAmB,CAAC,EAChD,MAAMQ,EAAY5xF,KAAKqxF,SAAS3kF,EAAOmZ,IACvC,GAAI+rE,EAKFA,EAAU7f,SAAS1vD,GAGnBhO,QAAQC,UAAUyL,MAAK,KACrB/f,KAAKwuF,cAAc,IAAIF,MAAM,qBAAqB,QAE/C,CACL,MAAMgD,EAAY,IAAIxoF,EAAOglF,YAAY,CAACzrE,IAC1CriB,KAAKqxF,SAAS3kF,EAAOmZ,IAAMyrE,EAC3BtxF,KAAKoxF,gBAAgBE,EAAUzrE,IAAMnZ,EACrC1M,KAAKqvF,UAAUiC,EACjB,CACA,OAAOtxF,KAAK+uF,aAAa96D,MAAKiV,GAAKA,EAAE7mB,QAAUA,GACjD,EA8BF,CAAC,cAAe,gBAAgBjU,SAAQ,SAAS+1B,GAC/C,MAAM0tD,EAAe/oF,EAAOogF,kBAAkB9nF,UAAU+iC,GAClD2tD,EAAY,CAAC,CAAC3tD,KAClB,MAAMrxB,EAAOrP,UAGb,OAFqBA,UAAUC,QACH,mBAAjBD,UAAU,GAEZouF,EAAat/E,MAAMvS,KAAM,CAC7BmuD,IACC,MAAMoH,EAAOg8B,EAAwBvxF,KAAMmuD,GAC3Cr7C,EAAK,GAAGP,MAAM,KAAM,CAACgjD,GAAM,EAE5BrpC,IACKpZ,EAAK,IACPA,EAAK,GAAGP,MAAM,KAAM2Z,EACtB,EACCzoB,UAAU,KAGVouF,EAAat/E,MAAMvS,KAAMyD,WAC/Bsc,MAAKouC,GAAeojC,EAAwBvxF,KAAMmuD,IACrD,GACArlD,EAAOogF,kBAAkB9nF,UAAU+iC,GAAU2tD,EAAU3tD,EACzD,IAEA,MAAM4tD,EACFjpF,EAAOogF,kBAAkB9nF,UAAU+wE,oBACvCrpE,EAAOogF,kBAAkB9nF,UAAU+wE,oBACjC,WACE,OAAK1uE,UAAUC,QAAWD,UAAU,GAAGL,MAGvCK,UAAU,GA7Cd,SAAiC6N,EAAI68C,GACnC,IAAI4J,EAAM5J,EAAY4J,IAOtB,OANA12D,OAAO8G,KAAKmJ,EAAG8/E,iBAAmB,IAAIhjF,SAAQojF,IAC5C,MAAMC,EAAiBngF,EAAG8/E,gBAAgBI,GACpCE,EAAiBpgF,EAAG+/E,SAASI,EAAe5rE,IAClDkyC,EAAMA,EAAI3oB,QAAQ,IAAIuiD,OAAOF,EAAe5rE,GAAI,KAC5C6rE,EAAe7rE,GAAG,IAEjB,IAAI8sD,sBAAsB,CAC/BvvE,KAAM+qD,EAAY/qD,KAClB20D,OAEJ,CAiCmBi6B,CAAwBhyF,KAAMyD,UAAU,IAChDsuF,EAAwBx/E,MAAMvS,KAAMyD,YAHlCsuF,EAAwBx/E,MAAMvS,KAAMyD,UAI/C,EAIF,MAAMwuF,EAAuB5wF,OAAO6wF,yBAChCppF,EAAOogF,kBAAkB9nF,UAAW,oBACxCC,OAAOwG,eAAeiB,EAAOogF,kBAAkB9nF,UAC3C,mBAAoB,CAClBujB,MACE,MAAMwpC,EAAc8jC,EAAqBttE,IAAIpS,MAAMvS,MACnD,MAAyB,KAArBmuD,EAAY/qD,KACP+qD,EAEFojC,EAAwBvxF,KAAMmuD,EACvC,IAGNrlD,EAAOogF,kBAAkB9nF,UAAU+tF,YACjC,SAAqBzzD,GACnB,GAA4B,WAAxB17B,KAAKwuE,eACP,MAAM,IAAI+e,aACR,sDACA,qBAIJ,IAAK7xD,EAAOozD,IACV,MAAM,IAAIvB,aAAa,yFAC2B,aAGpD,GADgB7xD,EAAOozD,MAAQ9uF,KAE7B,MAAM,IAAIutF,aAAa,6CACnB,sBAKN,IAAI7gF,EADJ1M,KAAKqxF,SAAWrxF,KAAKqxF,UAAY,CAAC,EAElChwF,OAAO8G,KAAKnI,KAAKqxF,UAAUjjF,SAAQ+jF,IAChBnyF,KAAKqxF,SAASc,GAAUl8D,YACtChC,MAAK5R,GAASqZ,EAAOrZ,QAAUA,MAEhC3V,EAAS1M,KAAKqxF,SAASc,GACzB,IAGEzlF,IACgC,IAA9BA,EAAOupB,YAAYvyB,OAGrB1D,KAAKuvF,aAAavvF,KAAKoxF,gBAAgB1kF,EAAOmZ,KAG9CnZ,EAAOyiF,YAAYzzD,EAAOrZ,OAE5BriB,KAAKwuF,cAAc,IAAIF,MAAM,sBAEjC,CACJ,CAEO,SAAS8D,GAAmBtpF,EAAQmiF,IACpCniF,EAAOogF,mBAAqBpgF,EAAOupF,0BAEtCvpF,EAAOogF,kBAAoBpgF,EAAOupF,yBAE/BvpF,EAAOogF,mBAKR+B,EAAe7lF,QAAU,IAC3B,CAAC,sBAAuB,uBAAwB,mBAC3CgJ,SAAQ,SAAS+1B,GAChB,MAAM0tD,EAAe/oF,EAAOogF,kBAAkB9nF,UAAU+iC,GAClD2tD,EAAY,CAAC,CAAC3tD,KAIlB,OAHA1gC,UAAU,GAAK,IAAiB,oBAAX0gC,EACjBr7B,EAAO+nE,gBACP/nE,EAAO6pE,uBAAuBlvE,UAAU,IACrCouF,EAAat/E,MAAMvS,KAAMyD,UAClC,GACAqF,EAAOogF,kBAAkB9nF,UAAU+iC,GAAU2tD,EAAU3tD,EACzD,GAER,CAGO,SAASmuD,GAAqBxpF,EAAQmiF,GAC3CF,GAA8BjiF,EAAQ,qBAAqB0G,IACzD,MAAM8B,EAAK9B,EAAE+iF,OACb,KAAItH,EAAe7lF,QAAU,IAAOkM,EAAGkhF,kBACI,WAAvClhF,EAAGkhF,mBAAmBC,eACE,WAAtBnhF,EAAGk9D,eAIT,OAAOh/D,CAAC,GAEZ,CCjrBO,SAASw7E,GAAiBliF,EAAQmiF,GACvC,MAAM/lF,EAAY4D,GAAUA,EAAO5D,UAC7BwrF,EAAmB5nF,GAAUA,EAAO4nF,iBAS1C,GAPAxrF,EAAUoF,aAAe,SAASpK,EAAa2qD,EAAWC,GAExDigC,GAAiB,yBACb,uCACJ7lF,EAAUmF,aAAaC,aAAapK,GAAa6f,KAAK8qC,EAAWC,EACnE,IAEMmgC,EAAe7lF,QAAU,IAC3B,oBAAqBF,EAAUmF,aAAa6hF,2BAA4B,CAC1E,MAAMJ,EAAQ,SAASvzC,EAAKzgC,EAAGC,GACzBD,KAAKygC,KAASxgC,KAAKwgC,KACrBA,EAAIxgC,GAAKwgC,EAAIzgC,UACNygC,EAAIzgC,GAEf,EAEM46E,EAAqBxtF,EAAUmF,aAAaC,aAC9C8lB,KAAKlrB,EAAUmF,cAUnB,GATAnF,EAAUmF,aAAaC,aAAe,SAASm+B,GAM7C,MALiB,iBAANA,GAAqC,iBAAZA,EAAEpnB,QACpConB,EAAI9/B,KAAK24B,MAAM34B,KAAKC,UAAU6/B,IAC9BqjD,EAAMrjD,EAAEpnB,MAAO,kBAAmB,sBAClCyqE,EAAMrjD,EAAEpnB,MAAO,mBAAoB,wBAE9BqxE,EAAmBjqD,EAC5B,EAEIioD,GAAoBA,EAAiBtvF,UAAUuxF,YAAa,CAC9D,MAAMC,EAAoBlC,EAAiBtvF,UAAUuxF,YACrDjC,EAAiBtvF,UAAUuxF,YAAc,WACvC,MAAMp6C,EAAMq6C,EAAkBrgF,MAAMvS,KAAMyD,WAG1C,OAFAqoF,EAAMvzC,EAAK,qBAAsB,mBACjCuzC,EAAMvzC,EAAK,sBAAuB,oBAC3BA,CACT,CACF,CAEA,GAAIm4C,GAAoBA,EAAiBtvF,UAAUyxF,iBAAkB,CACnE,MAAMC,EACJpC,EAAiBtvF,UAAUyxF,iBAC7BnC,EAAiBtvF,UAAUyxF,iBAAmB,SAASpqD,GAMrD,MALkB,UAAdzoC,KAAK4mB,MAAiC,iBAAN6hB,IAClCA,EAAI9/B,KAAK24B,MAAM34B,KAAKC,UAAU6/B,IAC9BqjD,EAAMrjD,EAAG,kBAAmB,sBAC5BqjD,EAAMrjD,EAAG,mBAAoB,wBAExBqqD,EAAuBvgF,MAAMvS,KAAM,CAACyoC,GAC7C,CACF,CACF,CACF,CCxDO,SAAS+kD,GAAoB1kF,EAAQiqF,GACtCjqF,EAAO5D,UAAUmF,cACnB,oBAAqBvB,EAAO5D,UAAUmF,cAGlCvB,EAAO5D,UAAUmF,eAGvBvB,EAAO5D,UAAUmF,aAAa+B,gBAC5B,SAAyBlM,GACvB,IAAMA,IAAeA,EAAYS,MAAQ,CACvC,MAAMurB,EAAM,IAAIqhE,aAAa,0DAK7B,OAHArhE,EAAInsB,KAAO,gBAEXmsB,EAAI0vD,KAAO,EACJvnE,QAAQE,OAAO2X,EACxB,CAMA,OAL0B,IAAtBhsB,EAAYS,MACdT,EAAYS,MAAQ,CAACqyF,YAAaD,GAElC7yF,EAAYS,MAAMqyF,YAAcD,EAE3BjqF,EAAO5D,UAAUmF,aAAaC,aAAapK,EACpD,EACJ,CCrBO,SAAS8tF,GAAYllF,GACJ,iBAAXA,GAAuBA,EAAOmqF,eACpC,aAAcnqF,EAAOmqF,cAAc7xF,aAClC,gBAAiB0H,EAAOmqF,cAAc7xF,YAC1CC,OAAOwG,eAAeiB,EAAOmqF,cAAc7xF,UAAW,cAAe,CACnEujB,MACE,MAAO,CAACwW,SAAUn7B,KAAKm7B,SACzB,GAGN,CAEO,SAASi3D,GAAmBtpF,EAAQmiF,GACzC,GAAsB,iBAAXniF,IACLA,EAAOogF,oBAAqBpgF,EAAOoqF,qBACvC,QAEGpqF,EAAOogF,mBAAqBpgF,EAAOoqF,uBAEtCpqF,EAAOogF,kBAAoBpgF,EAAOoqF,sBAGhCjI,EAAe7lF,QAAU,IAE3B,CAAC,sBAAuB,uBAAwB,mBAC3CgJ,SAAQ,SAAS+1B,GAChB,MAAM0tD,EAAe/oF,EAAOogF,kBAAkB9nF,UAAU+iC,GAClD2tD,EAAY,CAAC,CAAC3tD,KAIlB,OAHA1gC,UAAU,GAAK,IAAiB,oBAAX0gC,EACjBr7B,EAAO+nE,gBACP/nE,EAAO6pE,uBAAuBlvE,UAAU,IACrCouF,EAAat/E,MAAMvS,KAAMyD,UAClC,GACAqF,EAAOogF,kBAAkB9nF,UAAU+iC,GAAU2tD,EAAU3tD,EACzD,IAGN,MAAMgvD,EAAmB,CACvBC,WAAY,cACZC,YAAa,eACbC,cAAe,iBACfrD,eAAgB,kBAChBC,gBAAiB,oBAGbqD,EAAiBzqF,EAAOogF,kBAAkB9nF,UAAU0e,SAC1DhX,EAAOogF,kBAAkB9nF,UAAU0e,SAAW,WAC5C,MAAO6vE,EAAUC,EAAQC,GAASpsF,UAClC,OAAO8vF,EAAehhF,MAAMvS,KAAM,CAAC2vF,GAAY,OAC5C5vE,MAAKlF,IACJ,GAAIowE,EAAe7lF,QAAU,KAAOwqF,EAGlC,IACE/0E,EAAMzM,SAAQ0S,IACZA,EAAK1d,KAAO+vF,EAAiBryE,EAAK1d,OAAS0d,EAAK1d,IAAI,GAExD,CAAE,MAAOoM,GACP,GAAe,cAAXA,EAAEzP,KACJ,MAAMyP,EAGRqL,EAAMzM,SAAQ,CAAC0S,EAAM/a,KACnB8U,EAAMiL,IAAI/f,EAAG1E,OAAOsgE,OAAO,CAAC,EAAG7gD,EAAM,CACnC1d,KAAM+vF,EAAiBryE,EAAK1d,OAAS0d,EAAK1d,OACzC,GAEP,CAEF,OAAOyX,CAAK,IAEbkF,KAAK6vE,EAAQC,EAClB,CACF,CAEO,SAAS2D,GAAmB1qF,GACjC,GAAwB,iBAAXA,IAAuBA,EAAOogF,oBACvCpgF,EAAO0D,aACT,OAEF,GAAI1D,EAAO0D,cAAgB,aAAc1D,EAAO0D,aAAapL,UAC3D,OAEF,MAAMouF,EAAiB1mF,EAAOogF,kBAAkB9nF,UAAU2tF,WACtDS,IACF1mF,EAAOogF,kBAAkB9nF,UAAU2tF,WAAa,WAC9C,MAAMxyB,EAAUizB,EAAej9E,MAAMvS,KAAM,IAE3C,OADAu8D,EAAQnuD,SAAQstB,GAAUA,EAAOozD,IAAM9uF,OAChCu8D,CACT,GAGF,MAAM0yB,EAAenmF,EAAOogF,kBAAkB9nF,UAAU2wE,SACpDkd,IACFnmF,EAAOogF,kBAAkB9nF,UAAU2wE,SAAW,WAC5C,MAAMr2C,EAASuzD,EAAa18E,MAAMvS,KAAMyD,WAExC,OADAi4B,EAAOozD,IAAM9uF,KACN07B,CACT,GAEF5yB,EAAO0D,aAAapL,UAAU0e,SAAW,WACvC,OAAO9f,KAAKqiB,MAAQriB,KAAK8uF,IAAIhvE,SAAS9f,KAAKqiB,OACvChO,QAAQC,QAAQ,IAAI0K,IAC1B,CACF,CAEO,SAASy0E,GAAqB3qF,GACnC,GAAwB,iBAAXA,IAAuBA,EAAOogF,oBACvCpgF,EAAO0D,aACT,OAEF,GAAI1D,EAAO0D,cAAgB,aAAc1D,EAAOuC,eAAejK,UAC7D,OAEF,MAAMmvF,EAAmBznF,EAAOogF,kBAAkB9nF,UAAUitF,aACxDkC,IACFznF,EAAOogF,kBAAkB9nF,UAAUitF,aAAe,WAChD,MAAMmC,EAAYD,EAAiBh+E,MAAMvS,KAAM,IAE/C,OADAwwF,EAAUpiF,SAAQ+sB,GAAYA,EAAS2zD,IAAM9uF,OACtCwwF,CACT,GAEFzF,GAA8BjiF,EAAQ,SAAS0G,IAC7CA,EAAE2rB,SAAS2zD,IAAMt/E,EAAEihF,WACZjhF,KAET1G,EAAOuC,eAAejK,UAAU0e,SAAW,WACzC,OAAO9f,KAAK8uF,IAAIhvE,SAAS9f,KAAKqiB,MAChC,CACF,CAEO,SAASqxE,GAAiB5qF,GAC1BA,EAAOogF,qBACR,iBAAkBpgF,EAAOogF,kBAAkB9nF,aAG/C0H,EAAOogF,kBAAkB9nF,UAAUmuF,aACjC,SAAsB7iF,GACpBq+E,GAAiB,eAAgB,eACjC/qF,KAAK+uF,aAAa3gF,SAAQstB,IACpBA,EAAOrZ,OAAS3V,EAAOupB,YAAY8Z,SAASrU,EAAOrZ,QACrDriB,KAAKmvF,YAAYzzD,EACnB,GAEJ,EACJ,CAEO,SAASi4D,GAAmB7qF,GAG7BA,EAAO8qF,cAAgB9qF,EAAO+qF,iBAChC/qF,EAAO+qF,eAAiB/qF,EAAO8qF,YAEnC,CAEO,SAASE,GAAmBhrF,GAIjC,GAAwB,iBAAXA,IAAuBA,EAAOogF,kBACzC,OAEF,MAAM6K,EAAqBjrF,EAAOogF,kBAAkB9nF,UAAU4yF,eAC1DD,IACFjrF,EAAOogF,kBAAkB9nF,UAAU4yF,eACjC,WACEh0F,KAAKi0F,sBAAwB,GAC7B,MAAMC,EAAiBzwF,UAAU,GAC3B0wF,EAAqBD,GACD,kBAAmBA,EACzCC,GAEFD,EAAeE,cAAchmF,SAASimF,IACpC,GAAI,QAASA,IACM,oBACHlqF,KAAKkqF,EAAcz/C,KAC/B,MAAM,IAAI8zB,UAAU,+BAGxB,GAAI,0BAA2B2rB,KACvBr7E,WAAWq7E,EAAcC,wBAA0B,GACvD,MAAM,IAAI7xB,WAAW,2CAGzB,GAAI,iBAAkB4xB,KACdr7E,WAAWq7E,EAAcE,eAAiB,GAC9C,MAAM,IAAI9xB,WAAW,+BAEzB,IAGJ,MAAM8rB,EAAcwF,EAAmBxhF,MAAMvS,KAAMyD,WACnD,GAAI0wF,EAAoB,CAQtB,MAAM,OAACz4D,GAAU6yD,EACXv4B,EAASt6B,EAAO84D,mBAChB,cAAex+B,IAEY,IAA5BA,EAAOy+B,UAAU/wF,QAC2B,IAA5CrC,OAAO8G,KAAK6tD,EAAOy+B,UAAU,IAAI/wF,UACpCsyD,EAAOy+B,UAAYP,EAAeE,cAClC14D,EAAO04D,cAAgBF,EAAeE,cACtCp0F,KAAKi0F,sBAAsB3kF,KAAKosB,EAAOg5D,cAAc1+B,GAClDj2C,MAAK,YACG2b,EAAO04D,aAAa,IAC1Bl0E,OAAM,YACAwb,EAAO04D,aAAa,KAInC,CACA,OAAO7F,CACT,EAEN,CAEO,SAASoG,GAAkB7rF,GAChC,GAAwB,iBAAXA,IAAuBA,EAAO0D,aACzC,OAEF,MAAMooF,EAAoB9rF,EAAO0D,aAAapL,UAAUozF,cACpDI,IACF9rF,EAAO0D,aAAapL,UAAUozF,cAC5B,WACE,MAAMx+B,EAAS4+B,EAAkBriF,MAAMvS,KAAMyD,WAI7C,MAHM,cAAeuyD,IACnBA,EAAOy+B,UAAY,GAAG95B,OAAO36D,KAAKo0F,eAAiB,CAAC,CAAC,KAEhDp+B,CACT,EAEN,CAEO,SAAS6+B,GAAgB/rF,GAI9B,GAAwB,iBAAXA,IAAuBA,EAAOogF,kBACzC,OAEF,MAAM4L,EAAkBhsF,EAAOogF,kBAAkB9nF,UAAU6wE,YAC3DnpE,EAAOogF,kBAAkB9nF,UAAU6wE,YAAc,WAC/C,OAAIjyE,KAAKi0F,uBAAyBj0F,KAAKi0F,sBAAsBvwF,OACpD2Q,QAAQ29D,IAAIhyE,KAAKi0F,uBACvBl0E,MAAK,IACG+0E,EAAgBviF,MAAMvS,KAAMyD,aAEpCsxF,SAAQ,KACP/0F,KAAKi0F,sBAAwB,EAAE,IAG5Ba,EAAgBviF,MAAMvS,KAAMyD,UACrC,CACF,CAEO,SAASuxF,GAAiBlsF,GAI/B,GAAwB,iBAAXA,IAAuBA,EAAOogF,kBACzC,OAEF,MAAM+L,EAAmBnsF,EAAOogF,kBAAkB9nF,UAAUi3E,aAC5DvvE,EAAOogF,kBAAkB9nF,UAAUi3E,aAAe,WAChD,OAAIr4E,KAAKi0F,uBAAyBj0F,KAAKi0F,sBAAsBvwF,OACpD2Q,QAAQ29D,IAAIhyE,KAAKi0F,uBACvBl0E,MAAK,IACGk1E,EAAiB1iF,MAAMvS,KAAMyD,aAErCsxF,SAAQ,KACP/0F,KAAKi0F,sBAAwB,EAAE,IAG5BgB,EAAiB1iF,MAAMvS,KAAMyD,UACtC,CACF,CC7RO,SAASyxF,GAAoBpsF,GAClC,GAAsB,iBAAXA,GAAwBA,EAAOogF,kBAA1C,CAYA,GATM,oBAAqBpgF,EAAOogF,kBAAkB9nF,YAClD0H,EAAOogF,kBAAkB9nF,UAAUwvF,gBACjC,WAIE,OAHK5wF,KAAKm1F,gBACRn1F,KAAKm1F,cAAgB,IAEhBn1F,KAAKm1F,aACd,KAEE,cAAersF,EAAOogF,kBAAkB9nF,WAAY,CACxD,MAAMg0F,EAAYtsF,EAAOogF,kBAAkB9nF,UAAU2wE,SACrDjpE,EAAOogF,kBAAkB9nF,UAAUiuF,UAAY,SAAmB3iF,GAC3D1M,KAAKm1F,gBACRn1F,KAAKm1F,cAAgB,IAElBn1F,KAAKm1F,cAAcplD,SAASrjC,IAC/B1M,KAAKm1F,cAAc7lF,KAAK5C,GAI1BA,EAAO2gF,iBAAiBj/E,SAAQiU,GAAS+yE,EAAUpiF,KAAKhT,KAAMqiB,EAC5D3V,KACFA,EAAO4gF,iBAAiBl/E,SAAQiU,GAAS+yE,EAAUpiF,KAAKhT,KAAMqiB,EAC5D3V,IACJ,EAEA5D,EAAOogF,kBAAkB9nF,UAAU2wE,SACjC,SAAkB1vD,GAAmB,QAAAjQ,EAAA3O,UAAAC,OAATm5D,EAAO,IAAA18D,MAAAiS,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAPuqD,EAAOvqD,EAAA,GAAA7O,UAAA6O,GAUjC,OATIuqD,GACFA,EAAQzuD,SAAS1B,IACV1M,KAAKm1F,cAEEn1F,KAAKm1F,cAAcplD,SAASrjC,IACtC1M,KAAKm1F,cAAc7lF,KAAK5C,GAFxB1M,KAAKm1F,cAAgB,CAACzoF,EAGxB,IAGG0oF,EAAU7iF,MAAMvS,KAAMyD,UAC/B,CACJ,CACM,iBAAkBqF,EAAOogF,kBAAkB9nF,YAC/C0H,EAAOogF,kBAAkB9nF,UAAUmuF,aACjC,SAAsB7iF,GACf1M,KAAKm1F,gBACRn1F,KAAKm1F,cAAgB,IAEvB,MAAMj4D,EAAQl9B,KAAKm1F,cAAcv0F,QAAQ8L,GACzC,IAAe,IAAXwwB,EACF,OAEFl9B,KAAKm1F,cAAc5lF,OAAO2tB,EAAO,GACjC,MAAM+1C,EAASvmE,EAAOupB,YACtBj2B,KAAK+uF,aAAa3gF,SAAQstB,IACpBu3C,EAAOljC,SAASrU,EAAOrZ,QACzBriB,KAAKmvF,YAAYzzD,EACnB,GAEJ,EA1DJ,CA4DF,CAEO,SAAS25D,GAAqBvsF,GACnC,GAAsB,iBAAXA,GAAwBA,EAAOogF,oBAGpC,qBAAsBpgF,EAAOogF,kBAAkB9nF,YACnD0H,EAAOogF,kBAAkB9nF,UAAUk0F,iBACjC,WACE,OAAOt1F,KAAKu1F,eAAiBv1F,KAAKu1F,eAAiB,EACrD,KAEE,gBAAiBzsF,EAAOogF,kBAAkB9nF,YAAY,CAC1DC,OAAOwG,eAAeiB,EAAOogF,kBAAkB9nF,UAAW,cAAe,CACvEujB,MACE,OAAO3kB,KAAKw1F,YACd,EACA1vE,IAAImmB,GACEjsC,KAAKw1F,eACPx1F,KAAK25B,oBAAoB,YAAa35B,KAAKw1F,cAC3Cx1F,KAAK25B,oBAAoB,QAAS35B,KAAKy1F,mBAEzCz1F,KAAKyL,iBAAiB,YAAazL,KAAKw1F,aAAevpD,GACvDjsC,KAAKyL,iBAAiB,QAASzL,KAAKy1F,iBAAoBjmF,IACtDA,EAAEqtD,QAAQzuD,SAAQ1B,IAIhB,GAHK1M,KAAKu1F,iBACRv1F,KAAKu1F,eAAiB,IAEpBv1F,KAAKu1F,eAAexlD,SAASrjC,GAC/B,OAEF1M,KAAKu1F,eAAejmF,KAAK5C,GACzB,MAAM+B,EAAQ,IAAI6/E,MAAM,aACxB7/E,EAAM/B,OAASA,EACf1M,KAAKwuF,cAAc//E,EAAM,GACzB,EAEN,IAEF,MAAMy/E,EACJplF,EAAOogF,kBAAkB9nF,UAAUwxE,qBACrC9pE,EAAOogF,kBAAkB9nF,UAAUwxE,qBACjC,WACE,MAAMthE,EAAKtR,KAiBX,OAhBKA,KAAKy1F,kBACRz1F,KAAKyL,iBAAiB,QAASzL,KAAKy1F,iBAAmB,SAASjmF,GAC9DA,EAAEqtD,QAAQzuD,SAAQ1B,IAIhB,GAHK4E,EAAGikF,iBACNjkF,EAAGikF,eAAiB,IAElBjkF,EAAGikF,eAAe30F,QAAQ8L,IAAW,EACvC,OAEF4E,EAAGikF,eAAejmF,KAAK5C,GACvB,MAAM+B,EAAQ,IAAI6/E,MAAM,aACxB7/E,EAAM/B,OAASA,EACf4E,EAAGk9E,cAAc//E,EAAM,GAE3B,GAEKy/E,EAAyB37E,MAAMjB,EAAI7N,UAC5C,CACJ,CACF,CAEO,SAASiyF,GAAiB5sF,GAC/B,GAAsB,iBAAXA,IAAwBA,EAAOogF,kBACxC,OAEF,MAAM9nF,EAAY0H,EAAOogF,kBAAkB9nF,UACrC0zF,EAAkB1zF,EAAU6wE,YAC5BgjB,EAAmB7zF,EAAUi3E,aAC7BlG,EAAsB/wE,EAAU+wE,oBAChCS,EAAuBxxE,EAAUwxE,qBACjC7B,EAAkB3vE,EAAU2vE,gBAElC3vE,EAAU6wE,YACR,SAAqB0jB,EAAiBjzC,GACpC,MAAM7iD,EAAW4D,UAAUC,QAAU,EAAKD,UAAU,GAAKA,UAAU,GAC7D01B,EAAU27D,EAAgBviF,MAAMvS,KAAM,CAACH,IAC7C,OAAK6iD,GAGLvpB,EAAQpZ,KAAK41E,EAAiBjzC,GACvBruC,QAAQC,WAHN6kB,CAIX,EAEF/3B,EAAUi3E,aACR,SAAsBsd,EAAiBjzC,GACrC,MAAM7iD,EAAW4D,UAAUC,QAAU,EAAKD,UAAU,GAAKA,UAAU,GAC7D01B,EAAU87D,EAAiB1iF,MAAMvS,KAAM,CAACH,IAC9C,OAAK6iD,GAGLvpB,EAAQpZ,KAAK41E,EAAiBjzC,GACvBruC,QAAQC,WAHN6kB,CAIX,EAEF,IAAIy8D,EAAe,SAASznC,EAAawnC,EAAiBjzC,GACxD,MAAMvpB,EAAUg5C,EAAoB5/D,MAAMvS,KAAM,CAACmuD,IACjD,OAAKzL,GAGLvpB,EAAQpZ,KAAK41E,EAAiBjzC,GACvBruC,QAAQC,WAHN6kB,CAIX,EACA/3B,EAAU+wE,oBAAsByjB,EAEhCA,EAAe,SAASznC,EAAawnC,EAAiBjzC,GACpD,MAAMvpB,EAAUy5C,EAAqBrgE,MAAMvS,KAAM,CAACmuD,IAClD,OAAKzL,GAGLvpB,EAAQpZ,KAAK41E,EAAiBjzC,GACvBruC,QAAQC,WAHN6kB,CAIX,EACA/3B,EAAUwxE,qBAAuBgjB,EAEjCA,EAAe,SAASjhC,EAAWghC,EAAiBjzC,GAClD,MAAMvpB,EAAU43C,EAAgBx+D,MAAMvS,KAAM,CAAC20D,IAC7C,OAAKjS,GAGLvpB,EAAQpZ,KAAK41E,EAAiBjzC,GACvBruC,QAAQC,WAHN6kB,CAIX,EACA/3B,EAAU2vE,gBAAkB6kB,CAC9B,CAEO,SAAS5K,GAAiBliF,GAC/B,MAAM5D,EAAY4D,GAAUA,EAAO5D,UAEnC,GAAIA,EAAUmF,cAAgBnF,EAAUmF,aAAaC,aAAc,CAEjE,MAAMD,EAAenF,EAAUmF,aACzBwrF,EAAgBxrF,EAAaC,aAAa8lB,KAAK/lB,GACrDnF,EAAUmF,aAAaC,aAAgBpK,GAC9B21F,EAAcC,GAAgB51F,GAEzC,EAEKgF,EAAUoF,cAAgBpF,EAAUmF,cACvCnF,EAAUmF,aAAaC,eACvBpF,EAAUoF,aAAe,SAAsBpK,EAAa4gE,EAAIi1B,GAC9D7wF,EAAUmF,aAAaC,aAAapK,GACnC6f,KAAK+gD,EAAIi1B,EACZ,EAAE3lE,KAAKlrB,GAEX,CAEO,SAAS4wF,GAAgB51F,GAC9B,OAAIA,QAAqCI,IAAtBJ,EAAYS,MACtBU,OAAOsgE,OAAO,CAAC,EACpBzhE,EACA,CAACS,MAAOoqF,GAAoB7qF,EAAYS,SAIrCT,CACT,CAEO,SAAS81F,GAAqBltF,GACnC,IAAKA,EAAOogF,kBACV,OAGF,MAAM+M,EAAqBntF,EAAOogF,kBAClCpgF,EAAOogF,kBACL,SAA2Blf,EAAUksB,GACnC,GAAIlsB,GAAYA,EAASsU,WAAY,CACnC,MAAM6X,EAAgB,GACtB,IAAK,IAAIpwF,EAAI,EAAGA,EAAIikE,EAASsU,WAAW56E,OAAQqC,IAAK,CACnD,IAAIqP,EAAS40D,EAASsU,WAAWv4E,IAC5BqP,EAAOyK,eAAe,SACvBzK,EAAOyK,eAAe,QACxBkrE,GAAiB,mBAAoB,qBACrC31E,EAASzM,KAAK24B,MAAM34B,KAAKC,UAAUwM,IACnCA,EAAO8oE,KAAO9oE,EAAO25B,WACd35B,EAAO25B,IACdonD,EAAc7mF,KAAK8F,IAEnB+gF,EAAc7mF,KAAK06D,EAASsU,WAAWv4E,GAE3C,CACAikE,EAASsU,WAAa6X,CACxB,CACA,OAAO,IAAIF,EAAmBjsB,EAAUksB,EAC1C,EACFptF,EAAOogF,kBAAkB9nF,UAAY60F,EAAmB70F,UAEpD,wBAAyB60F,GAC3B50F,OAAOwG,eAAeiB,EAAOogF,kBAAmB,sBAAuB,CACrEvkE,IAAGA,IACMsxE,EAAmBG,qBAIlC,CAEO,SAASC,GAA0BvtF,GAElB,iBAAXA,GAAuBA,EAAOmqF,eACrC,aAAcnqF,EAAOmqF,cAAc7xF,aACjC,gBAAiB0H,EAAOmqF,cAAc7xF,YAC1CC,OAAOwG,eAAeiB,EAAOmqF,cAAc7xF,UAAW,cAAe,CACnEujB,MACE,MAAO,CAACwW,SAAUn7B,KAAKm7B,SACzB,GAGN,CAEO,SAASm7D,GAAsBxtF,GACpC,MAAMgsF,EAAkBhsF,EAAOogF,kBAAkB9nF,UAAU6wE,YAC3DnpE,EAAOogF,kBAAkB9nF,UAAU6wE,YACjC,SAAqBskB,GACnB,GAAIA,EAAc,MACgC,IAArCA,EAAa7Z,sBAEtB6Z,EAAa7Z,sBACT6Z,EAAa7Z,qBAEnB,MAAM8Z,EAAmBx2F,KAAK24E,kBAAkB1kD,MAAKs6D,GACf,UAApCA,EAAYpzD,SAAS9Y,MAAMuE,QACY,IAArC2vE,EAAa7Z,qBAAiC8Z,EACb,aAA/BA,EAAiBtgC,UACfsgC,EAAiBC,aACnBD,EAAiBC,aAAa,YAE9BD,EAAiBtgC,UAAY,WAES,aAA/BsgC,EAAiBtgC,YACtBsgC,EAAiBC,aACnBD,EAAiBC,aAAa,YAE9BD,EAAiBtgC,UAAY,aAGa,IAArCqgC,EAAa7Z,qBACnB8Z,GACHx2F,KAAKg0F,eAAe,QAAS,CAAC99B,UAAW,kBAGK,IAArCqgC,EAAa5Z,sBAEtB4Z,EAAa5Z,sBACT4Z,EAAa5Z,qBAEnB,MAAM+Z,EAAmB12F,KAAK24E,kBAAkB1kD,MAAKs6D,GACf,UAApCA,EAAYpzD,SAAS9Y,MAAMuE,QACY,IAArC2vE,EAAa5Z,qBAAiC+Z,EACb,aAA/BA,EAAiBxgC,UACfwgC,EAAiBD,aACnBC,EAAiBD,aAAa,YAE9BC,EAAiBxgC,UAAY,WAES,aAA/BwgC,EAAiBxgC,YACtBwgC,EAAiBD,aACnBC,EAAiBD,aAAa,YAE9BC,EAAiBxgC,UAAY,aAGa,IAArCqgC,EAAa5Z,qBACnB+Z,GACH12F,KAAKg0F,eAAe,QAAS,CAAC99B,UAAW,YAE7C,CACA,OAAO4+B,EAAgBviF,MAAMvS,KAAMyD,UACrC,CACJ,CAEO,SAASkzF,GAAiB7tF,GACT,iBAAXA,GAAuBA,EAAO+N,eAGzC/N,EAAO+N,aAAe/N,EAAOgO,mBAC/B,2BClVO,SAAS8/E,GAAoB9tF,GAGlC,IAAKA,EAAO+nE,iBAAoB/nE,EAAO+nE,iBAAmB,eACtD/nE,EAAO+nE,gBAAgBzvE,UACzB,OAGF,MAAMy1F,EAAwB/tF,EAAO+nE,gBACrC/nE,EAAO+nE,gBAAkB,SAAyB/9D,GAQhD,GANoB,iBAATA,GAAqBA,EAAK6hD,WACA,IAAjC7hD,EAAK6hD,UAAU/zD,QAAQ,SACzBkS,EAAOnK,KAAK24B,MAAM34B,KAAKC,UAAUkK,KAC5B6hD,UAAY7hD,EAAK6hD,UAAUrW,OAAO,IAGrCxrC,EAAK6hD,WAAa7hD,EAAK6hD,UAAUjxD,OAAQ,CAE3C,MAAMozF,EAAkB,IAAID,EAAsB/jF,GAC5CikF,EAAkBC,KAAAA,eAAwBlkF,EAAK6hD,WAC/CsiC,EAAqB51F,OAAOsgE,OAAOm1B,EACrCC,GAWJ,OARAE,EAAmBC,OAAS,WAC1B,MAAO,CACLviC,UAAWsiC,EAAmBtiC,UAC9B0b,OAAQ4mB,EAAmB5mB,OAC3BN,cAAeknB,EAAmBlnB,cAClConB,iBAAkBF,EAAmBE,iBAEzC,EACOF,CACT,CACA,OAAO,IAAIJ,EAAsB/jF,EACnC,EACAhK,EAAO+nE,gBAAgBzvE,UAAYy1F,EAAsBz1F,UAIzD2pF,GAA8BjiF,EAAQ,gBAAgB0G,IAChDA,EAAEmlD,WACJtzD,OAAOwG,eAAe2H,EAAG,YAAa,CACpC7H,MAAO,IAAImB,EAAO+nE,gBAAgBrhE,EAAEmlD,WACpC3sD,SAAU,UAGPwH,IAEX,CAEO,SAAS4nF,GAAmBtuF,EAAQmiF,GACzC,IAAKniF,EAAOogF,kBACV,OAGI,SAAUpgF,EAAOogF,kBAAkB9nF,WACvCC,OAAOwG,eAAeiB,EAAOogF,kBAAkB9nF,UAAW,OAAQ,CAChEujB,MACE,YAA6B,IAAf3kB,KAAKq3F,MAAwB,KAAOr3F,KAAKq3F,KACzD,IAIJ,MAmFMnJ,EACFplF,EAAOogF,kBAAkB9nF,UAAUwxE,qBACvC9pE,EAAOogF,kBAAkB9nF,UAAUwxE,qBACjC,WAKE,GAJA5yE,KAAKq3F,MAAQ,KAIkB,WAA3BpM,EAAeh9E,SAAwBg9E,EAAe7lF,SAAW,GAAI,CACvE,MAAM,aAACqtF,GAAgBzyF,KAAKwyF,mBACP,WAAjBC,GACFpxF,OAAOwG,eAAe7H,KAAM,OAAQ,CAClC2kB,MACE,YAA6B,IAAf3kB,KAAKq3F,MAAwB,KAAOr3F,KAAKq3F,KACzD,EACAvvF,YAAY,EACZC,cAAc,GAGpB,CAEA,GAxGsB,SAASomD,GACjC,IAAKA,IAAgBA,EAAY4J,IAC/B,OAAO,EAET,MAAMu/B,EAAWN,KAAAA,cAAuB7oC,EAAY4J,KAEpD,OADAu/B,EAASvlD,QACFulD,EAASvqF,MAAKwqF,IACnB,MAAMhgC,EAAQy/B,KAAAA,WAAoBO,GAClC,OAAOhgC,GAAwB,gBAAfA,EAAM3wC,OACqB,IAApC2wC,EAAMpyC,SAASvkB,QAAQ,OAAc,GAEhD,CA6FQ42F,CAAkB/zF,UAAU,IAAK,CAEnC,MAAMkD,EA7FoB,SAASwnD,GAEvC,MAAMhpD,EAAQgpD,EAAY4J,IAAI5yD,MAAM,mCACpC,GAAc,OAAVA,GAAkBA,EAAMzB,OAAS,EACnC,OAAQ,EAEV,MAAM0B,EAAUe,SAAShB,EAAM,GAAI,IAEnC,OAAOC,GAAYA,GAAW,EAAIA,CACpC,CAoFwBqyF,CAAwBh0F,UAAU,IAG9Ci0F,EArFqB,SAASC,GAKxC,IAAIC,EAAwB,MAwB5B,MAvB+B,YAA3B3M,EAAeh9E,UAKb2pF,EAJA3M,EAAe7lF,QAAU,IACF,IAArBuyF,EAGsB,MAIA,WAEjB1M,EAAe7lF,QAAU,GAML,KAA3B6lF,EAAe7lF,QAAiB,MAAQ,MAGlB,YAGrBwyF,CACT,CAuDyBC,CAAyBlxF,GAGtCmxF,EAxDc,SAAS3pC,EAAawpC,GAG9C,IAAII,EAAiB,MAKU,YAA3B9M,EAAeh9E,SACgB,KAA3Bg9E,EAAe7lF,UACrB2yF,EAAiB,OAGnB,MAAM5yF,EAAQ6xF,KAAAA,YAAqB7oC,EAAY4J,IAC7C,uBAUF,OATI5yD,EAAMzB,OAAS,EACjBq0F,EAAiB5xF,SAAShB,EAAM,GAAGm5C,OAAO,IAAK,IACX,YAA3B2sC,EAAeh9E,UACO,IAArB0pF,IAIVI,EAAiB,YAEZA,CACT,CA+BwBC,CAAkBv0F,UAAU,GAAIkD,GAGlD,IAAIoxF,EAEFA,EADiB,IAAfL,GAAkC,IAAdI,EACL5xF,OAAO+xF,kBACA,IAAfP,GAAkC,IAAdI,EACZv8E,KAAKC,IAAIk8E,EAAYI,GAErBv8E,KAAK4yB,IAAIupD,EAAYI,GAKxC,MAAMp6B,EAAO,CAAC,EACdr8D,OAAOwG,eAAe61D,EAAM,iBAAkB,CAC5C/4C,IAAGA,IACMozE,IAGX/3F,KAAKq3F,MAAQ35B,CACf,CAEA,OAAOwwB,EAAyB37E,MAAMvS,KAAMyD,UAC9C,CACJ,CAEO,SAASy0F,GAAuBpvF,GACrC,IAAMA,EAAOogF,qBACT,sBAAuBpgF,EAAOogF,kBAAkB9nF,WAClD,OAOF,SAAS+2F,EAAWC,EAAI9mF,GACtB,MAAM+mF,EAAsBD,EAAGhiD,KAC/BgiD,EAAGhiD,KAAO,WACR,MAAMhlC,EAAO3N,UAAU,GACjBC,EAAS0N,EAAK1N,QAAU0N,EAAKjD,MAAQiD,EAAKknF,WAChD,GAAsB,SAAlBF,EAAGtkD,YACHxiC,EAAGosD,MAAQh6D,EAAS4N,EAAGosD,KAAKq6B,eAC9B,MAAM,IAAIrvB,UAAU,4CAClBp3D,EAAGosD,KAAKq6B,eAAiB,WAE7B,OAAOM,EAAoB9lF,MAAM6lF,EAAI30F,UACvC,CACF,CACA,MAAM80F,EACJzvF,EAAOogF,kBAAkB9nF,UAAUqlF,kBACrC39E,EAAOogF,kBAAkB9nF,UAAUqlF,kBACjC,WACE,MAAM+R,EAAcD,EAAsBhmF,MAAMvS,KAAMyD,WAEtD,OADA00F,EAAWK,EAAax4F,MACjBw4F,CACT,EACFzN,GAA8BjiF,EAAQ,eAAe0G,IACnD2oF,EAAW3oF,EAAEw4E,QAASx4E,EAAE+iF,QACjB/iF,IAEX,CAUO,SAASipF,GAAoB3vF,GAClC,IAAKA,EAAOogF,mBACR,oBAAqBpgF,EAAOogF,kBAAkB9nF,UAChD,OAEF,MAAMuyD,EAAQ7qD,EAAOogF,kBAAkB9nF,UACvCC,OAAOwG,eAAe8rD,EAAO,kBAAmB,CAC9ChvC,MACE,MAAO,CACL4+C,UAAW,YACXm1B,SAAU,cACV14F,KAAK4uE,qBAAuB5uE,KAAK4uE,kBACrC,EACA9mE,YAAY,EACZC,cAAc,IAEhB1G,OAAOwG,eAAe8rD,EAAO,0BAA2B,CACtDhvC,MACE,OAAO3kB,KAAK24F,0BAA4B,IAC1C,EACA7yE,IAAIg7C,GACE9gE,KAAK24F,2BACP34F,KAAK25B,oBAAoB,wBACrB35B,KAAK24F,iCACF34F,KAAK24F,0BAEV73B,GACF9gE,KAAKyL,iBAAiB,wBAClBzL,KAAK24F,yBAA2B73B,EAExC,EACAh5D,YAAY,EACZC,cAAc,IAGhB,CAAC,sBAAuB,wBAAwBqG,SAAS+1B,IACvD,MAAMy0D,EAAajlC,EAAMxvB,GACzBwvB,EAAMxvB,GAAU,WAcd,OAbKnkC,KAAK64F,6BACR74F,KAAK64F,2BAA6BrpF,IAChC,MAAM8B,EAAK9B,EAAE+iF,OACb,GAAIjhF,EAAGwnF,uBAAyBxnF,EAAGm9D,gBAAiB,CAClDn9D,EAAGwnF,qBAAuBxnF,EAAGm9D,gBAC7B,MAAMsqB,EAAW,IAAIzK,MAAM,wBAAyB9+E,GACpD8B,EAAGk9E,cAAcuK,EACnB,CACA,OAAOvpF,CAAC,EAEVxP,KAAKyL,iBAAiB,2BACpBzL,KAAK64F,6BAEFD,EAAWrmF,MAAMvS,KAAMyD,UAChC,CAAC,GAEL,CAEO,SAASu1F,GAAuBlwF,EAAQmiF,GAE7C,IAAKniF,EAAOogF,kBACV,OAEF,GAA+B,WAA3B+B,EAAeh9E,SAAwBg9E,EAAe7lF,SAAW,GACnE,OAEF,GAA+B,WAA3B6lF,EAAeh9E,SAAwBg9E,EAAe7lF,SAAW,IACnE,OAEF,MAAM6zF,EAAYnwF,EAAOogF,kBAAkB9nF,UAAUwxE,qBACrD9pE,EAAOogF,kBAAkB9nF,UAAUwxE,qBACnC,SAA8Brd,GAC5B,GAAIA,GAAQA,EAAKwC,MAAuD,IAAhDxC,EAAKwC,IAAIn3D,QAAQ,0BAAkC,CACzE,MAAMm3D,EAAMxC,EAAKwC,IAAIpxC,MAAM,MAAM1O,QAAQg7C,GAChB,yBAAhBA,EAAK6wB,SACXtjF,KAAK,MAEJsI,EAAO6pE,uBACPpd,aAAgBzsD,EAAO6pE,sBACzBlvE,UAAU,GAAK,IAAIqF,EAAO6pE,sBAAsB,CAC9CvvE,KAAMmyD,EAAKnyD,KACX20D,QAGFxC,EAAKwC,IAAMA,CAEf,CACA,OAAOkhC,EAAU1mF,MAAMvS,KAAMyD,UAC/B,CACF,CAEO,SAASy1F,GAA+BpwF,EAAQmiF,GAKrD,IAAMniF,EAAOogF,oBAAqBpgF,EAAOogF,kBAAkB9nF,UACzD,OAEF,MAAM+3F,EACFrwF,EAAOogF,kBAAkB9nF,UAAU2vE,gBAClCooB,GAA0D,IAAjCA,EAAsBz1F,SAGpDoF,EAAOogF,kBAAkB9nF,UAAU2vE,gBACjC,WACE,OAAKttE,UAAU,IAWkB,WAA3BwnF,EAAeh9E,SAAwBg9E,EAAe7lF,QAAU,IAClC,YAA3B6lF,EAAeh9E,SACZg9E,EAAe7lF,QAAU,IACD,WAA3B6lF,EAAeh9E,UACjBxK,UAAU,IAAiC,KAA3BA,UAAU,GAAGkxD,UAC3BtgD,QAAQC,UAEV6kF,EAAsB5mF,MAAMvS,KAAMyD,YAjBnCA,UAAU,IACZA,UAAU,GAAG8O,MAAM,MAEd8B,QAAQC,UAenB,EACJ,CAIO,SAAS8kF,GAAqCtwF,EAAQmiF,GAC3D,IAAMniF,EAAOogF,oBAAqBpgF,EAAOogF,kBAAkB9nF,UACzD,OAEF,MAAMi4F,EACFvwF,EAAOogF,kBAAkB9nF,UAAU+wE,oBAClCknB,GAAkE,IAArCA,EAA0B31F,SAG5DoF,EAAOogF,kBAAkB9nF,UAAU+wE,oBACjC,WACE,IAAI5c,EAAO9xD,UAAU,IAAM,CAAC,EAC5B,GAAoB,iBAAT8xD,GAAsBA,EAAKnyD,MAAQmyD,EAAKwC,IACjD,OAAOshC,EAA0B9mF,MAAMvS,KAAMyD,WAU/C,GADA8xD,EAAO,CAACnyD,KAAMmyD,EAAKnyD,KAAM20D,IAAKxC,EAAKwC,MAC9BxC,EAAKnyD,KACR,OAAQpD,KAAKwuE,gBACX,IAAK,SACL,IAAK,mBACL,IAAK,uBACHjZ,EAAKnyD,KAAO,QACZ,MACF,QACEmyD,EAAKnyD,KAAO,SAIlB,OAAImyD,EAAKwC,KAAsB,UAAdxC,EAAKnyD,MAAkC,WAAdmyD,EAAKnyD,KACtCi2F,EAA0B9mF,MAAMvS,KAAM,CAACu1D,KAErB,UAAdA,EAAKnyD,KAAmBpD,KAAKiyE,YAAcjyE,KAAKq4E,cACjD9lE,MAAMvS,MACf+f,MAAKqgB,GAAKi5D,EAA0B9mF,MAAMvS,KAAM,CAACogC,KACtD,EACJ,EC/ZO,WAIJ,IAJ4B,OAACt3B,GAAOrF,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAG5D,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CACtD61F,YAAY,EACZC,aAAa,EACbC,YAAY,GAGZ,MAAM1O,EAAUC,GACVE,ET8HD,SAAuBniF,GAE5B,MAAMkX,EAAS,CAAC/R,QAAS,KAAM7I,QAAS,MAGxC,QAAsB,IAAX0D,IAA2BA,EAAO5D,UAE3C,OADA8a,EAAO/R,QAAU,iBACV+R,EAGT,MAAM,UAAC9a,GAAa4D,EAEpB,GAAI5D,EAAUu0F,gBACZz5E,EAAO/R,QAAU,UACjB+R,EAAO5a,QAAUwjF,GAAe1jF,EAAUD,UACtC,mBAAoB,QACnB,GAAIC,EAAUioF,qBACW,IAA3BrkF,EAAO4wF,iBAA6B5wF,EAAOupF,0BAC1CvpF,EAAO6wF,eAKX35E,EAAO/R,QAAU,SACjB+R,EAAO5a,QAAUwjF,GAAe1jF,EAAUD,UACtC,wBAAyB,OACxB,KAAI6D,EAAOogF,oBACdhkF,EAAUD,UAAUE,MAAM,wBAQ5B,OADA6a,EAAO/R,QAAU,2BACV+R,EAPPA,EAAO/R,QAAU,SACjB+R,EAAO5a,QAAUwjF,GAAe1jF,EAAUD,UACtC,uBAAwB,GAC5B+a,EAAO9S,oBAAsBpE,EAAOyB,mBAChC,qBAAsBzB,EAAOyB,kBAAkBnJ,SAIrD,CAEA,OAAO4e,CACT,CSrKyB+qE,CAAoBjiF,GAErC8wF,EAAU,CACd3O,iBACA4O,WAAU,EACVjR,eAAgBmC,GAChBpB,WAAYoB,GACZnB,gBAAiBmB,GAEjBhzB,IAAGA,IAIL,OAAQkzB,EAAeh9E,SACrB,IAAK,SACH,IAAK6rF,IAAeA,KACfj6F,EAAQy5F,WAEX,OADAxO,EAAQ,wDACD8O,EAET,GAA+B,OAA3B3O,EAAe7lF,QAEjB,OADA0lF,EAAQ,wDACD8O,EAET9O,EAAQ,+BAER8O,EAAQG,YAAcD,EAGtBD,GAA0C/wF,EAAQmiF,GAClD4O,GAAgD/wF,GAEhDgxF,GAA4BhxF,EAAQmiF,GACpC6O,GAA2BhxF,GAC3BgxF,GAA8BhxF,EAAQmiF,GACtC6O,GAAuBhxF,GACvBgxF,GAAmChxF,EAAQmiF,GAC3C6O,GAAkChxF,GAClCgxF,GAAwBhxF,GACxBgxF,GAAsChxF,GACtCgxF,GAAgChxF,EAAQmiF,GAExC4O,GAA+B/wF,GAC/B+wF,GAA+B/wF,GAC/B+wF,GAA8B/wF,EAAQmiF,GACtC4O,GAAkC/wF,GAClC+wF,GAAkC/wF,EAAQmiF,GAC1C,MACF,IAAK,UACH,IAAK+O,IAAgBA,KAChBn6F,EAAQ05F,YAEX,OADAzO,EAAQ,yDACD8O,EAET9O,EAAQ,gCAER8O,EAAQG,YAAcC,EAGtBH,GAA0C/wF,EAAQmiF,GAClD4O,GAAgD/wF,GAEhDkxF,GAA6BlxF,EAAQmiF,GACrC+O,GAA+BlxF,EAAQmiF,GACvC+O,GAAwBlxF,GACxBkxF,GAA6BlxF,GAC7BkxF,GAA+BlxF,GAC/BkxF,GAAiClxF,GACjCkxF,GAA+BlxF,GAC/BkxF,GAA+BlxF,GAC/BkxF,GAA8BlxF,GAC9BkxF,GAA4BlxF,GAC5BkxF,GAA6BlxF,GAE7B+wF,GAA+B/wF,GAC/B+wF,GAA+B/wF,GAC/B+wF,GAA8B/wF,EAAQmiF,GACtC4O,GAAkC/wF,GAClC,MACF,IAAK,SACH,IAAKmxF,IAAep6F,EAAQ25F,WAE1B,OADA1O,EAAQ,wDACD8O,EAET9O,EAAQ,+BAER8O,EAAQG,YAAcE,EAGtBJ,GAA0C/wF,EAAQmiF,GAClD4O,GAAgD/wF,GAEhDmxF,GAAgCnxF,GAChCmxF,GAAiCnxF,GACjCmxF,GAA4BnxF,GAC5BmxF,GAA+BnxF,GAC/BmxF,GAAgCnxF,GAChCmxF,GAAqCnxF,GACrCmxF,GAA4BnxF,GAC5BmxF,GAA4BnxF,GAE5B+wF,GAA+B/wF,GAC/B+wF,GAA8B/wF,EAAQmiF,GACtC4O,GAAkC/wF,GAClC+wF,GAAkC/wF,EAAQmiF,GAC1C,MACF,QACEH,EAAQ,wBAKd,CC1HEoP,CAAe,CAACpxF,OAA0B,oBAAXA,YAAyBxI,EAAYwI,mCCKtE,MAAMW,IAASC,EAAAA,EAAAA,sCAET+Q,GAAe,IAAIhT,MASnB0yF,GAAsB,CACxBx5F,MAAO,CACHiiB,OAAQ,CACJyoE,MAAO,IACP7vE,IAAK,IACL2yB,IAAK,KAETxrB,MAAO,CACH0oE,MAAO,KACP7vE,IAAK,KACL2yB,IAAK,OAOjB,IAAIisD,GAAsB,UAEtBC,IAAqB,EAGrBC,IAAY,EAGZC,IAAa,EAGbC,IAAY,EAGZC,IAAa,EAGbxqC,GAAS,KAEb,MAAMyqC,GAA0BvgE,SAASwgE,cAAc,SACjDC,QAC6C,IAAtCF,GAAwBG,UAErC,IACIC,GADAC,GAAmB,GAMvB,SAASC,KACL,CAyFJ,SAASC,GAAyBC,EAAIxuF,GAClC,MAAMyuF,EACAjxF,QAAQwC,IAAWA,EAAO2gF,iBAAiB3pF,OAAS,EACpD03F,EACAlxF,QAAQwC,IAAWA,EAAO4gF,iBAAiB5pF,OAAS,EACpD23F,EAAqB,CAAC,GAEC,IAAzBH,EAAGt6F,QAAQ,WACXy6F,EAAmB16F,MAAQy6F,IAEF,IAAzBF,EAAGt6F,QAAQ,WACXy6F,EAAmBh6E,MAAQ85E,GAG/B1gF,GAAapR,KAAK6oB,GAAAA,QAAAA,oBAA+BmpE,EACrD,CA2CA,SAASC,GAA0BC,GAC/B,MAAMC,EACAD,EAAWtjF,QAAOmoB,GAAgB,eAAXA,EAAExZ,OAAuBljB,OAChD+3F,EACAF,EAAWtjF,QAAOmoB,GAAgB,gBAAXA,EAAExZ,OAAwBljB,OACjDg4F,EACAH,EAAWtjF,QAAOmoB,GAAgB,eAAXA,EAAExZ,OAAuBljB,OAChDi4F,EACAJ,EAAWtjF,QAAOmoB,GAAgB,gBAAXA,EAAExZ,OAAwBljB,OAEvD63F,EAAWntF,SAAQwtF,IACf,MAAM14F,EAAa,CACf,yBAA4Bs4F,EAC5B,0BAA6BC,EAC7B,yBAA4BC,EAC5B,0BAA6BC,EAC7B,UAAaC,EAAOtP,SACpB,gBAAmBsP,EAAOC,QAC1B,YAAeD,EAAOh1E,KACtB,aAAgBg1E,EAAOvP,OAG3BxkE,GAAWmF,cAAcxqB,GAAkBU,EAAW,GAE9D,CAaA,SAAS44F,GAAmBC,IAzE5B,SAAsCC,GAClC,OAAIA,EAAWt4F,SAAWq3F,GAAiBr3F,QAOvCs4F,EAAWt+D,IAAIu+D,GAAuBx3D,OAAOjkC,KAAK,MAC1Cu6F,GACCr9D,IAAIu+D,GAAuBx3D,OAAOjkC,KAAK,IAQpD,SAASy7F,EAAsBtyF,GAC3B,OAAOhB,KAAKC,UAAU,CAClBge,KAAMjd,EAAKid,KACX0lE,SAAU3iF,EAAK2iF,SACfuP,QAASlyF,EAAKkyF,QACdxP,MAAO1iF,EAAK0iF,MACZ6P,OAAQvyF,EAAKuyF,QAErB,CACJ,EA+CQC,CAA6BJ,KAYjChB,GAX8BgB,EAWK17F,MAAM,GACzCoJ,GAAOE,KAAK,qCAAsCoxF,IAElDO,GAA0BP,IAG1BtgF,GAAapR,KAAK6oB,GAAAA,QAAAA,wBAAmC6oE,IAErDtgF,GAAapR,KAAK6oB,GAAAA,QAAAA,oBAA+B6oE,IAjBrD,CA8kBA,MAAMqB,GAAW,IAvjBjB,cAAuB1iE,GAInBn4B,cACIqG,MAAM6S,GACV,CAWA6B,OAAmB,IAAA+/E,EAAA,IAAdx8F,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EA8iBpB,IAA+B64F,EA7iBW,kBAAvBz8F,EAAQ06F,aACfA,GAAa16F,EAAQ06F,WACrB9wF,GAAOE,KAAM,gBAAe4wF,OAEC,kBAAtB16F,EAAQ26F,YACfA,GAAY36F,EAAQ26F,UACpB/wF,GAAOE,KAAM,eAAc6wF,OAEE,kBAAtB36F,EAAQy6F,YACfA,GAAYz6F,EAAQy6F,UACpB7wF,GAAOE,KAAM,eAAc2wF,OAEG,kBAAvBz6F,EAAQ46F,aACfA,GAAa56F,EAAQ46F,WACrBhxF,GAAOE,KAAM,gBAAe8wF,OAEY,kBAAb,QAA3B4B,EAAOx8F,EAAQmwD,oBAAY,IAAAqsC,OAAA,EAApBA,EAAsBpsC,UAC7BA,GAASpwD,EAAQmwD,aAAaC,OAC9BxmD,GAAOE,KAAM,WAAUsmD,OAG3BnnD,OAAO4Q,cAAcohF,IACrBA,QAA4Bx6F,EAEvB2N,GAAQjH,kBACThH,KAAKu8F,mBAohBcD,EAnhBS,CAACE,EAAS9vF,KAC1B8vF,IACAA,EAAQC,UAAY/vF,EACxB,EAihBT,SAAS8vF,EAAS9vF,GAErB,MAAM69B,EAAM+xD,EAAsB/pF,MAAM6pF,GAAU34F,WA4BlD,OA1BIiJ,GACO0vF,GAASM,wBAAwB,WACjChwF,EAAO2gF,gBACP3gF,EAAO2gF,iBAAiB3pF,QAGxB22F,IACPmC,EAAQ3B,UAAUuB,GAASO,wBACtBz8E,OAAM,SAAS08E,GACZ,MAAM1wE,EACA,IAAIvsB,GAAgBi9F,EAAI,KAAM,CAAE,gBAEtCpqF,KAAAA,8BAAmD,CAC/C2mB,QAASn5B,KACT0U,OAAQwX,IAGZziB,GAAON,KACH,sGAGAqzF,EACAtwE,EACR,IAGDqe,CACX,IA5iBIvqC,KAAKk2F,cAAgB,CAAC,EAEtB2G,GAAAA,KAAoBh9F,GAEhBG,KAAK88F,yBACL98F,KAAKmsF,kBAAiB4Q,IAClBhC,GAAmBgC,EAAG18F,MAAM,GAE5BoJ,GAAOgH,MAAM,sBAAuBsqF,IACpCO,GAA0BP,IAE1BtgF,GAAapR,KACT6oB,GAAAA,QAAAA,sBACA6oE,IAEA9sF,GAAQ1C,4BACRrG,UAAUmF,aAAaoB,iBACnB,gBACA,IAAMzL,KAAKmsF,iBAAiB6O,MAIhCF,GAA4BhyF,OAAO2P,aAC/B,IAAMzY,KAAKmsF,iBAAiB6O,KAnVP,IAqV7B,GAGZ,CAMA7O,iBAAiBj1E,GACbhS,UAAUmF,aAAa8hF,mBAClBpsE,MAAKjgB,IACFg8F,GAAmBh8F,GACnBoX,EAASpX,EAAQ,IAEpBogB,OAAMtgB,IACH6J,GAAON,KAAM,iCAAgCvJ,KAC7Ck8F,GAAmB,IACnB5kF,EAAS,GAAG,GAExB,CAWA2+E,cAAcmH,GAA0C,IAA/B98F,EAAWuD,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAG2oC,EAAO3oC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,EACjD,OAAO,IAAI4Q,SAAQ,CAACC,EAASC,KACzB,IAAI0oF,EAAYC,GAAiB,EAEV,iBAAZ9wD,IAAyBzoB,MAAMyoB,IAAYA,EAAU,IAC5D6wD,EAAaxjE,YAAW,KACpByjE,GAAiB,EACjBD,OAAa38F,EACbiU,EAAO,IAAI5U,GAAgBd,IAA0B,GACtDutC,IAGPlnC,UAAUmF,aAAaC,aAAapK,GAC/B6f,MAAKrT,IACFjD,GAAOwG,IAAI,sBACXgrF,GAAyB+B,EAAWtwF,GAC/BwwF,SACyB,IAAfD,GACP5jE,aAAa4jE,GAEjB3oF,EAAQ5H,GACZ,IAEHwT,OAAMtgB,IACH6J,GAAON,KAAM,wCAAuCvJ,KAAS+I,KAAKC,UAAU1I,MAC5E,MAAMyvD,EAAa,IAAIhwD,GAAgBC,EAAOM,EAAa88F,GAEtDE,SACyB,IAAfD,GACP5jE,aAAa4jE,GAEjB1oF,EAAOo7C,IAGPA,EAAW5vD,OAASlB,IACpBo8F,GAAyB+B,OAAW18F,EACxC,GAKF,GAEd,CAYA68F,iBAAiBt9F,GACb,OAAKg9F,GAAAA,cAIE,IAAIxoF,SAAQ,CAACC,EAASC,KACzBsoF,GAAAA,cACInwF,IACI4H,EAAQ5H,EAAO,IAEnB9M,IACI2U,EAAO3U,EAAM,GAEjBC,EAAQ,IAXLwU,QAAQE,OAAO,IAAIrT,MAAM,qCAaxC,CAaAk8F,oBAAiD,IAA/BC,EAAgB55F,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GAAIiJ,EAAMjJ,UAAAC,OAAA,EAAAD,UAAA,QAAAnD,EAC3C,MAAMg9F,EAAiB,GAEjBC,EAAuBF,EAAiBttD,SAAS,SACjDorD,EACAzuF,GAAUA,EAAO2gF,iBAAiB3pF,OAAS,EAE7C65F,IAAyBpC,GACzBmC,EAAehuF,KAAK,SAGxB,MAAMkuF,EAAuBH,EAAiBttD,SAAS,SACjDqrD,EACA1uF,GAAUA,EAAO4gF,iBAAiB5pF,OAAS,EAMjD,OAJI85F,IAAyBpC,GACzBkC,EAAehuF,KAAK,SAGjBguF,CACX,CAsBAG,+BAA+B59F,GAC3B,MAAM,QACFusC,KACGsxD,GACH79F,EAEE89F,EAAuB,GAYvBC,EAA4B,WAK9B,IAFwC,KAFtBF,EAAa59F,SAAW,IAE1Bc,QAAQ,WAGpB,OAAOyT,QAAQC,UAGnB,MAAM,2BACFupF,EAA0B,sBAC1BntC,GACAgtC,EAIJ,GAAIG,EAA4B,CAC5B,MAAMC,EACA/C,IAAoBA,GAAiB9mE,MAAK2nE,GACxB,eAAhBA,EAAOh1E,OACCg1E,EAAOtP,WAAauR,GACrBjC,EAAOvP,QAAUwR,KAEhC,IAAKC,EACD,OAAOzpF,QAAQE,OAAO,IAAI5U,GACtB,CAAEI,KAAM,+BACR,CAAC,EACD,CAAE89F,KAIV,MAAMR,EAAmB,CAAE,SACrBn9F,EAAc,CAChBS,MAAO,CACH2rF,SAAUwR,EAAexR,WAMjC,OAAOtsF,KAAK61F,cAAcwH,EAAkBn9F,EAAaksC,GACpDrsB,MAAKrT,IACK,CACHslD,WAAY,SACZtlD,YAGhB,CAEA,OAAO1M,KAAKm9F,iBAAiB,CAAEzsC,yBACnC,EAAEtgC,KAAKpwB,MAqDD+9F,EAA6B,WAC/B,MACMC,GADYN,EAAa59F,SAAW,CAAE,QAAS,UACXmY,QAAO2jF,GAAqB,UAAXA,GAAiC,UAAXA,IAEjF,IAAKoC,EAAwBt6F,OACzB,OAAO2Q,QAAQC,UAGnB,MAAMpU,EA5iBlB,WAA+C,IAAvBg7F,EAAEz3F,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GAAI5D,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAGxC,MAAMvD,EAAcs6D,KAAU36D,EAAQK,aAAei6F,IAErD,GAAIe,EAAGt6F,QAAQ,UAAY,EAAG,CAE1B,GAAIq9F,KAAYp+F,EAAQ+d,YAAa,CACjC,MAAMwtE,EAAI6S,KAAYp+F,EAAQ+d,YAE9B1d,EAAYS,MAAMiiB,OAAS,CAAEyoE,MAAOD,EAAExoE,QACtC1iB,EAAYS,MAAMgiB,MAAQ,CAAE0oE,MAAOD,EAAEzoE,MACzC,CAsBA,GApBKziB,EAAYS,QACbT,EAAYS,MAAQ,CAAC,GAOrBsN,GAAQnE,kBACJ5J,EAAYS,MAAMiiB,QAAU1iB,EAAYS,MAAMiiB,OAAOyoE,MACrDnrF,EAAYS,MAAMiiB,OAAS,CAAEyoE,MAAOnrF,EAAYS,MAAMiiB,OAAOyoE,OAE7D5hF,GAAON,KAAK,8DAEZjJ,EAAYS,MAAMgiB,OAASziB,EAAYS,MAAMgiB,MAAM0oE,MACnDnrF,EAAYS,MAAMgiB,MAAQ,CAAE0oE,MAAOnrF,EAAYS,MAAMgiB,MAAM0oE,OAE3D5hF,GAAON,KAAK,8DAGhBtJ,EAAQq+F,eACRh+F,EAAYS,MAAM2rF,SAAWzsF,EAAQq+F,mBAClC,CACH,MAAMlS,EAAansF,EAAQmsF,YAAcmS,KAAAA,KAEzCj+F,EAAYS,MAAMqrF,WAAaA,CACnC,CACJ,MACI9rF,EAAYS,OAAQ,EAsBxB,OAnBIu6F,EAAGt6F,QAAQ,UAAY,GAClBV,EAAYmhB,OAAsC,kBAAtBnhB,EAAYmhB,QACzCnhB,EAAYmhB,MAAQ,CAAC,GAGzBnhB,EAAYmhB,MAAQ,CAChB6uC,iBAAkBuqC,KAAeH,GACjChO,SAAUzsF,EAAQu+F,YAClBhuC,kBAAmBmqC,KAAeD,GAClCjqC,kBAAmBmqC,KAAcF,IAGjCrqC,IACA5uD,OAAOsgE,OAAOzhE,EAAYmhB,MAAO,CAAE8uC,aAAc,KAGrDjwD,EAAYmhB,OAAQ,EAGjBnhB,CACX,CA2egCm+F,CAAeL,EAAyBN,GAI5D,OAFAj0F,GAAOE,KAAK,0BAA2BhB,KAAKC,UAAU1I,IAE/CF,KAAK61F,cAAcmI,EAAyB99F,EAAaksC,EACpE,EAAEhc,KAAKpwB,MA0CP,OAAO49F,IACF79E,MAlGiC,SAASu+E,GAC3C,IAAKA,EACD,OAGJ,MAAM,OAAE5xF,EAAM,SAAEqlD,EAAQ,WAAEC,GAAessC,EAEnCC,EAAqB7xF,EAAO2gF,iBAElC,GAAIkR,EAAmB76F,OAAQ,CAC3B,MAAM86F,EAAqB,IAAI1Q,YAAYyQ,GAE3CZ,EAAqBruF,KAAK,CACtB5C,OAAQ8xF,EACRzsC,WACAC,aACA3vC,MAAOm8E,EAAmBnR,iBAAiB,IAEnD,CAEA,MAAMoR,EAAqB/xF,EAAO4gF,iBAElC,GAAImR,EAAmB/6F,OAAQ,CAC3B,MAAMg7F,EAAqB,IAAI5Q,YAAY2Q,GAE3Cd,EAAqBruF,KAAK,CACtB5C,OAAQgyF,EACR3sC,WACAC,aACA3vC,MAAOq8E,EAAmBpR,iBAAiB,GAC3Ct6D,UAAWC,GAAU,UAAVA,SAEnB,CACJ,IAkEKlT,KAAKg+E,GACLh+E,MAlC6B,SAAS4+E,GACvC,IAAKA,EACD,OAGJ,MAAM3rB,EAAc2rB,EAAStR,iBAE7B,GAAIra,EAAYtvE,OAAQ,CACpB,MAAMk7F,EAAc,IAAI9Q,YAAY9a,GAEpC2qB,EAAqBruF,KAAK,CACtB5C,OAAQkyF,EACRv8E,MAAOu8E,EAAYvR,iBAAiB,GACpCwR,QAASnB,EAAamB,SAE9B,CAEA,MAAMhtB,EAAc8sB,EAASrR,iBAE7B,GAAIzb,EAAYnuE,OAAQ,CACpB,MAAMo7F,EAAc,IAAIhR,YAAYjc,GAEpC8rB,EAAqBruF,KAAK,CACtB5C,OAAQoyF,EACRz8E,MAAOy8E,EAAYxR,iBAAiB,GACpCt6D,UAAWC,GAAU,UAAVA,OACX4rE,QAASnB,EAAamB,SAE9B,CACJ,IAMK9+E,MAAK,IAAM49E,IACXz9E,OAAMtgB,IACH+9F,EAAqBvvF,SAAQk/B,IAAgB,IAAf,OAAE5gC,GAAQ4gC,EACpCttC,KAAK++F,gBAAgBryF,EAAO,IAGzB2H,QAAQE,OAAO3U,KAElC,CAQAk9F,wBACI,OAAO5yF,QACHhF,UAAUmF,cACHnF,UAAUmF,aAAa8hF,iBACtC,CASAuQ,wBAAwBsC,GACpB,MAAmB,WAAfA,GAA0C,gBAAfA,GACpBpE,EAIf,CAOAmE,gBAAgBE,GACPA,IAILA,EAAYhpE,YAAY7nB,SAAQiU,IACxBA,EAAM9I,MACN8I,EAAM9I,MACV,IAIA0lF,EAAY1lF,MACZ0lF,EAAY1lF,OAMZ0lF,EAAYC,SACZD,EAAYC,UAEpB,CAMAC,0BACI,OAAOtC,GAAAA,aACX,CAUAuC,qBAAqB9S,GACjB,OAAKtsF,KAAK08F,wBAAwB,UAK3BhC,GAAwBG,UAAUvO,GACpCvsE,MAAK,KACFq6E,GAAsB9N,EACtB+N,IAAqB,EAErB5wF,GAAOwG,IAAK,8BAA6Bq8E,KAEzC7xE,GAAapR,KAAK6oB,GAAAA,QAAAA,4BACdo6D,EAAS,IAZVj4E,QAAQE,OACX,IAAIrT,MAAM,+CAatB,CAQAoxD,2BAA2BC,GACvBsqC,GAAAA,2BAA0CtqC,EAC9C,CAOAoqC,uBACI,OAAOvC,EACX,CAOAiF,oCACI,OAAOtE,EACX,CAMAuE,2CACI,OAAOvE,GAAiBhuF,MAAK6uF,GAAU1xF,QAAQ0xF,EAAOvP,QAC1D,CAMAkT,4BAA4B3D,GACxB,MAAML,EAAa,GACbiE,EAAa,CACf,SAAY5D,EAAOtP,SACnB,KAAQsP,EAAOh1E,KACf,MAASg1E,EAAOvP,MAChB,QAAWuP,EAAOC,SAKtB,OAFAN,EAAWjsF,KAAKkwF,GAET,CAAEjE,aACb,GA8CJ,MCz3BM9xF,IAASC,EAAAA,EAAAA,wCAKT+1F,GAAoB,CACtB,WAAc,SACd,aAAgB,WAChB,YAAe,WAMJ,MAAMC,WAAmBj4F,MAcpClG,YACQ8oB,EACA3d,EACA2V,EACAs9E,EACAC,EACA5sE,GACJprB,QAGA5H,KAAKyL,iBAAmBzL,KAAK+tB,YAC7B/tB,KAAK25B,oBAAsB35B,KAAK45B,IAAM55B,KAAK4pB,eAM3C5pB,KAAK6/F,WAAa,GAClB7/F,KAAKqqB,WAAaA,EAClBrqB,KAAKqX,YAAc,EACnBrX,KAAKoD,KAAOw8F,EACZ5/F,KAAKqiB,MAAQA,EACbriB,KAAKgzB,UAAYA,EACjBhzB,KAAKuO,SAAW,IAAIyQ,IASpBhf,KAAK0N,UAAW,EAShB1N,KAAK8/F,uBAAyBH,EAE9B3/F,KAAK+/F,WAAWrzF,EACpB,CAQAszF,+BAA+B3xF,GACvBJ,GAAQtH,YACR3G,KAAKqiB,MAAM49E,QAAU5xF,EAErBrO,KAAK0M,OAAOwzF,WAAa7xF,CAEjC,CAUA8xF,mBAAmBC,GACf,CASJC,wBAAwBD,GAChBpgG,KAAKqqB,YAAc+1E,GACnBpgG,KAAKqqB,WAAWi2E,eAAetgG,KAAMogG,EAE7C,CASAE,eAAeF,GACX,CAUJG,eAAeH,GACX,CASJI,YAAYp9F,EAAMiL,GACd,GAAKoxF,GAAkB5/E,eAAezc,IAWtC,GANIiL,EACArO,KAAKuO,SAASuX,IAAI1iB,EAAMiL,GAExBrO,KAAKuO,SAAS2H,OAAO9S,GAGrBpD,KAAK0M,OACL,IAAK,MAAM2V,KAASriB,KAAK0M,OAAOupB,YAC5B5T,EAAMo9E,GAAkBr8F,IAASiL,OAZrC5E,GAAO7J,MAAO,wBAAuBwD,IAe7C,CASA28F,WAAWrzF,GACP,GAAI1M,KAAK0M,SAAWA,IAIpB1M,KAAK0M,OAASA,EAMV1M,KAAK0M,QAAQ,CACb,IAAK,MAAMtJ,KAAQpD,KAAKuO,SAASpG,OAC7BnI,KAAKwgG,YAAYp9F,EAAMpD,KAAKuO,SAASoW,IAAIvhB,IAEzCpD,KAAK8/F,wBACL9/F,KAAKggG,+BAA+BhgG,KAAK8/F,uBAEjD,CACJ,CAMAW,sBACI,GAAKzgG,KAAK0M,OAAV,CAOA,IAAK,MAAMtJ,KAAQpD,KAAKuO,SAASpG,OAE7B,IAAK,MAAMu4F,KAAc1gG,KAAK0M,OAAO4gF,iBACjCoT,EAAWjB,GAAkBr8F,SAAS9C,EAG1CN,KAAK8/F,wBACL9/F,KAAKggG,oCAA+B1/F,EATxC,MAJImJ,GAAON,KACF,GAAEnJ,yDAcf,CAYA00C,OAAO0rD,GACCpgG,KAAK0M,SACL1M,KAAKsgG,eAAeF,GACpBO,GAAAA,kBAA2BP,EAAWpgG,KAAK0M,SAE/C1M,KAAK6/F,WAAWvwF,KAAK8wF,GACrBpgG,KAAKqgG,wBAAwBD,GAC7BpgG,KAAKmgG,mBAAmBC,EAC5B,CAUAQ,OAAOR,GACH,IAAK,IAAIvuF,EAAK7R,KAAK6/F,WAAY95F,EAAI8L,EAAGnO,OAAS,EAAGqC,GAAK,IAAKA,EAAG,CAC3D,MAAM0iC,EAAI52B,EAAG9L,GAERq6F,IACDpgG,KAAKugG,eAAe93D,GACpBk4D,GAAAA,kBAA2Bl4D,EAAG,OAE7B23D,GAAa33D,IAAM23D,GACpBvuF,EAAGtC,OAAOxJ,EAAG,EAErB,CAEIq6F,IACApgG,KAAKugG,eAAeH,GACpBO,GAAAA,kBAA2BP,EAAW,MAE9C,CAOAlyF,UAKI,OAJAlO,KAAK6qB,qBAEL7qB,KAAK0N,UAAW,EAET2G,QAAQC,SACnB,CAMAuiB,QACI,OAAO72B,KAAK6gG,aAChB,CAMAC,UACI,MAAMnwC,EAAW3wD,KAAK6gG,cAChBhW,EAAU7qF,KAAK+gG,aAErB,OAAOpwC,GAAYk6B,EAAW,GAAEl6B,KAAYk6B,IAAY,IAC5D,CAKAthE,oBACI,OAAOvpB,KAAK0M,MAChB,CAMAgW,gBACI,CAOJm+E,cACI,OAAO7gG,KAAK0M,OAAS1M,KAAK0M,OAAOmZ,GAAK,IAC1C,CAMAm7E,WACI,OAAOhhG,KAAKqiB,KAChB,CAMA4+E,gBACI,OAAOjhG,KAAKqiB,MAAMgqE,KACtB,CAMA0U,aACI,OAAO/gG,KAAKqiB,MAAQriB,KAAKqiB,MAAMwD,GAAK,IACxC,CAKA4H,UACI,OAAOztB,KAAKoD,IAChB,CAOA89F,gBACI,OAAIlhG,KAAKuiB,eACE,MAGJviB,KAAKgzB,UAAYhzB,KAAKgzB,UAAY,SAC7C,CAKAmuE,eACI,OAAOnhG,KAAKgzB,SAChB,CAQA4tE,OAAOR,GACH,GAAKA,EAAL,CAGA,IAAK,IAAIvuF,EAAK7R,KAAK6/F,WAAY95F,EAAI8L,EAAGnO,OAAS,EAAGqC,GAAK,IAAKA,EAAG,CAC3D,MAAM0iC,EAAI52B,EAAG9L,GAERq6F,IACDpgG,KAAKugG,eAAe93D,GACpBk4D,GAAAA,kBAA2Bl4D,EAAG,OAE7B23D,GAAa33D,IAAM23D,GACpBvuF,EAAGtC,OAAOxJ,EAAG,EAErB,CAEIq6F,IACApgG,KAAKugG,eAAeH,GACpBO,GAAAA,kBAA2BP,EAAW,MAf1C,CAiBJ,CAEA/X,WACI,YAAkC,IAAvBroF,KAAK0M,OAAOqsE,QACZ/4E,KAAK0M,OAAOqsE,MAG3B,CAKAx2D,eACI,OAAOviB,KAAKytB,YAAcpR,GAAUkL,KACxC,CAOA3R,UACI,MAAM,IAAI1U,MAAM,8BACpB,CAOAkgG,oBACI,OAAOphG,KAAKuiB,gBAAkBviB,KAAK4V,SACvC,CAKAmd,eACI,OAAO/yB,KAAKytB,YAAcpR,GAAUwK,KACxC,CAQAw6E,qBACI,OAAOrhG,KAAKqiB,OAASriB,KAAKqiB,MAAMsJ,KACpC,CAUA4I,cAAcld,EAAYzC,GACtB,IAAI0sF,EAAgBjqF,EAMhBpJ,GAAQpC,8BAA0C,IAAR+I,GAAuB5U,KAAKwtB,YACtE8zE,EAAgB,GAGhBthG,KAAKqX,aAAeiqF,GACpBthG,KAAKqX,WAAaiqF,EAClBthG,KAAKqJ,KACDhL,GACAijG,EACA1sF,IAIuB,IAApB5U,KAAKqX,YACS,IAAlBiqF,GACAthG,KAAK4V,YACJ5V,KAAKqhG,sBACTrhG,KAAKqJ,KACDhL,GACAijG,EAEZ,CAUAC,eAAenH,GACX,OAAKuG,GAAAA,wBAAiC,UAOlC3gG,KAAK+yB,eACE1e,QAAQC,UAIfD,QAAQ29D,IACJhyE,KAAK6/F,WAAWniE,KACZ8+D,GACIA,EAAQ3B,UAAUT,GACbl6E,OAAMtgB,IAOH,MANA6J,GAAON,KACH,+GAGAqzF,EACA58F,GACEA,CAAK,OAG1BmgB,MAAK,KACF/f,KAAKqJ,KACDhL,GACA+7F,EAAoB,IA5BzB/lF,QAAQE,OACX,IAAIrT,MAAM,+CA6BtB,CAOAq1E,cAAcx2E,GACV,EC3fR,MAAM0J,IAASC,EAAAA,EAAAA,6CAMA,MAAM83F,WAAwB9B,GAkBzCn+F,YAAW+rC,GAYR,IAZS,SACRg/C,EAAQ,WACRN,EAAU,UACVloF,EAAS,WACT8Z,EAAU,MACV6jF,EAAK,SACL1vC,EAAQ,WACRC,EAAU,OACVtlD,EAAM,MACN2V,EAAK,UACL2Q,EAAS,QACT6rE,EAAU,IACbvxD,EACG1lC,MACqB,KACjB8E,EACA2V,GAC4B,IAAMriB,KAAKqJ,KAAK/K,GAAqB0B,OACjE8D,EACAkvB,GAEJhzB,KAAK0hG,sBAAuB,EAC5B,MAAMC,EAAS9C,EAAQ5qE,MAAKzkB,GAAKA,EAAE8sB,UAAUt8B,QAEzC2hG,GACA3hG,KAAK4hG,mBAAmBD,GAG5B,MAAME,EAAiB7uE,IAAcC,GAAU,UAAVA,QAC/B5Q,EAAMswE,cAAckP,eACpB,KAKN7hG,KAAKw9C,SAAW,CACZr5B,UAAWrI,KAAKC,SACb8lF,EAAiB,CAAEA,kBAAmB,CAAC,GAS9C7hG,KAAKyhG,MAAQA,EACbzhG,KAAK+xD,SAAWA,EAChB/xD,KAAKgyD,WAAaA,QAAAA,EAAc6vC,EAIhC7hG,KAAK4d,WAAayE,EAAMswE,cAAc/vE,OACtC5iB,KAAK8hG,qBAAuBlkF,EAI5B5d,KAAK+hG,aAAe1/E,EAAMg8E,iBAGrBh9F,OAAO8G,KAAKnI,KAAK+hG,cAAcr+F,QAAUsvB,IAAcC,GAAU,UAAVA,SACxDjzB,KAAK+hG,aAAe,CAChBn/E,OAAQP,EAAMswE,cAAc/vE,OAC5BD,MAAON,EAAMswE,cAAchwE,QAInC3iB,KAAKssF,SAAWA,EAUhBtsF,KAAKgiG,cAAgB3tF,QAAQC,UAS7BtU,KAAKiiG,YAAcjW,EAMnBhsF,KAAKkiG,aAAc,EAKnBliG,KAAKmiG,cAAe,EAOpBniG,KAAKoiG,eAAgB,EAQrBpiG,KAAKqiG,cAAkC,KAAlBriG,KAAKssF,cAAkBhsF,EAAYN,KAAKssF,SAG7DtsF,KAAKsiG,YAAc,KAEnBtiG,KAAKuiG,cAAgB,EAErBviG,KAAKwiG,wBAA0B1iG,IAC3B,MAAM2iG,EAAkBziG,KAAKqiG,cAE7BriG,KAAK0iG,+BAA+B5iG,SAMO,IAA/BE,KAAKghG,WAAWltD,iBACa,IAAvB9zC,KAAKqiG,gBACXviG,EAAQm0B,MAAKmM,GAAKA,EAAEksD,WAAatsF,KAAKqiG,sBAOf,IAApBI,QAAiE,IAAvBziG,KAAKqiG,iBAE1DriG,KAAKkiG,aAAc,EACvB,EAOAliG,KAAKuiB,gBAAkBo+E,GAAAA,wBAAiC,YACxD3gG,KAAK2iG,4BAA8B3iG,KAAKuhG,eAAenxE,KAAKpwB,MAC5D2gG,GAAAA,YACIzuE,GAAAA,QAAAA,4BACAlyB,KAAK2iG,8BAGbhC,GAAAA,YAAqBzuE,GAAAA,QAAAA,wBAAmClyB,KAAKwiG,yBAE7DxiG,KAAK4iG,+BACT,CAQAC,iCACI,OAAK7iG,KAAKqqB,WAUH,IAAIhW,SAAQ,CAACC,EAASC,KACzBvU,KAAKqqB,WAAWy4E,mBAAmB9iG,MAC9B+f,KAAKzL,GAAS1U,GAAS2U,EAAO,IAAIrT,MAAMtB,KAAQ,IAX9CyU,QAAQC,SAavB,CAQAyuF,6BACI,MAAMp7F,GAAS3H,KAAKgjG,kBAEpBhjG,KAAKqJ,KAAK5K,GAAqBkJ,GAG/BkgB,GAAWmF,cnFwIwBi2E,EAAEn/F,EAAuC6D,KAAc,CAC9FzE,WAAY,CACR,WAAcY,EACd6D,SAEJ1E,OAAQ,4BACRG,KAAM5B,GAAgBC,mBmF9IOwhG,CAA4BjjG,KAAKytB,UAAW9lB,IACrEkgB,GAAWuE,QAAQzjB,KAAKC,UAAU,CAC9B7I,KAAMtB,GACNwR,IAAKtI,IAEb,CAQAi7F,gCACS5iG,KAAKkjG,qCAIVljG,KAAKwgG,YAAY,cAAc,KAC3BxgG,KAAKuiG,cAAgBz5F,OAAO4pB,YAAY3W,MACxC/b,KAAK+iG,4BAA4B,IAGrC/iG,KAAKwgG,YAAY,gBAAgB,KAC7BxgG,KAAK+iG,6BACLl7E,GAAWiF,oBACP/pB,GACA,CACI,WAAc/C,KAAKytB,UACnB,WAAc,QACd9lB,MAAOmB,OAAO4pB,YAAY3W,MAAQ/b,KAAKuiG,eACzC,IAGNviG,KAAK+yB,gBAAkB/yB,KAAKgzB,YAAcC,GAAU,UAAVA,QAC1CjzB,KAAKwgG,YAAY,eAAe,KACvBxgG,KAAKgjG,mBACNhjG,KAAK+iG,4BACT,IAGZ,CAQAG,mCAEI,OAAQljG,KAAK+yB,gBAAkB/yB,KAAKgzB,YAAcC,GAAU,UAAVA,OACtD,CAWAkwE,eAAex3E,GACX,MAAMy3E,EAAWpjG,KAAKqjG,UAAUjzE,KAAKpwB,KAAM2rB,GAI3C,OAFA3rB,KAAKgiG,cAAgBhiG,KAAKgiG,cAAcjiF,KAAKqjF,EAAUA,GAEhDpjG,KAAKgiG,aAChB,CAUAsB,kCAAkC3N,EAAiBn2E,GAC1Cxf,KAAKqqB,WAKVrqB,KAAKqqB,WAAWk5E,wBAAwBvjG,MAAM+f,KAC1C41E,GACA/1F,GAAS4f,EAAc,IAAIte,MAAMtB,MANjC+1F,GAOR,CASA6N,gBAAgB7uF,GACR3U,KAAKqqB,YACLrqB,KAAKqqB,WAAWo5E,oBAAoBzjG,KAAKytB,UAAWztB,KAAM2U,IAAS3U,KAAKqqB,WAAWuD,KAAKke,cAEhG,CASAu3D,UAAU13E,GACN,GAAI3rB,KAAKwtB,YAAc7B,IACd3rB,KAAKgzB,YAAcC,GAAU,UAAVA,UAAqBzQ,GAAAA,mCAC7C,OAAOnO,QAAQC,UAGnB,GAAItU,KAAK0N,SACL,OAAO2G,QAAQE,OAAO,IAAI5U,GAAgBJ,KAG9C,IAAI45B,EAAU9kB,QAAQC,UAGtB,MAAMovF,EAAcA,IAAMj6F,GAAOE,KAAM,QAAO3J,SAAS2rB,KAIjD/hB,EACAqE,GAAQjH,gBAAkBhH,KAAKgzB,YAAcC,GAAU,UAAVA,QAAoBhlB,GAAQrE,8BAM/E,GAAI5J,KAAKuiB,gBACGviB,KAAKgzB,YAAcC,GAAU,UAAVA,UAAsBzQ,GAAAA,oCACzC5Y,EACR85F,IAKI1jG,KAAK2jG,eAAiB3jG,KAAK2jG,cAAcP,SACzCpjG,KAAK2jG,cAAcP,SAASz3E,GACrB3rB,KAAKqiB,QACZriB,KAAKqiB,MAAM+R,SAAWzI,QAEvB,GAAIA,EACPwN,EAAU,IAAI9kB,SAAQ,CAACC,EAASC,KAC5BmvF,IACA1jG,KAAKsjG,mCACD,KACQtjG,KAAK2jG,eACL3jG,KAAK4jG,oBAMT5jG,KAAKygG,sBACLzgG,KAAK6jG,aACL7jG,KAAK+/F,WAAW,MAEhBzrF,GAAS,GAEbC,EAAO,QAEZ,CACHmvF,IAGA,MAAMI,EAAgB,CAClB5F,eAAgBl+F,KAAK+jG,cACrBjkG,QAAS,CAAEuc,GAAUwK,OACrBg4E,QAAS7+F,KAAK2jG,cAAgB,CAAE3jG,KAAK2jG,eAAkB,GACvD3X,WAAYhsF,KAAKgkG,uBAGrB7qE,EACMwnE,GAAAA,+BAAwCt/F,OAAOsgE,OAC7C,CAAC,EACDmiC,EACA,CAAE5jG,YAAa,CAAES,MAAOX,KAAK+hG,iBAErC5oE,EAAUA,EAAQpZ,MAAKkkF,IACnB,MAAMC,EAAaD,EAAYhwE,MAAKtqB,GAAQA,EAAK0Y,MAAMuE,OAAS5mB,KAAKytB,YAErE,IAAIy2E,EAaA,MAAM,IAAIvkG,GAAgBH,IAS9B,OArBIQ,KAAK+/F,WAAWmE,EAAWx3F,QAC3B1M,KAAKqiB,MAAQ6hF,EAAW7hF,MAIpBriB,KAAKgzB,YAAckxE,EAAWlxE,YAC9BvpB,GAAON,KACF,GAAEnJ,6CACHA,KAAKgzB,UAAWkxE,EAAWlxE,WAC/BhzB,KAAKgzB,UAAYkxE,EAAWlxE,WAMhChzB,KAAK2jG,eACL3jG,KAAK4hG,mBAAmB5hG,KAAK2jG,eAGjC3jG,KAAK6/F,WAAWniE,KAAIymE,GAAQxD,GAAAA,kBAA2BwD,EAAMnkG,KAAK0M,UAE3D1M,KAAK6iG,gCAAgC,GAEpD,CAEA,OAAO1pE,EACFpZ,MAAK,KACF/f,KAAKwjG,gBAAgB73E,GAGrB3rB,KAAK+yB,gBAAkB/yB,KAAKqqB,YAAcrqB,KAAKqqB,WAAW+5E,4BAA4BpkG,MACtFA,KAAKqJ,KAAKxM,GAAoBmD,KAAK,GAE/C,CAUA0iG,+BAA+B5iG,GAC3B,MAAMuiB,EAAQriB,KAAKghG,WACbp6E,EAAQ,GAAEvE,EAAMuE,YAGtB,IAAIg1E,EAAS97F,EAAQm0B,MAAKmM,GAAKA,EAAExZ,OAASA,GAAQwZ,EAAEisD,QAAUhqE,EAAMgqE,OAASjsD,EAAEksD,WAAatsF,KAAKssF,WAEjG,IAAKsP,GAAiC,YAAvB57F,KAAKqiG,cAA6B,CAI7C,MAAMhW,GAAShqE,EAAMgqE,OAAS,IAAIj9C,QAAQ,aAAc,IAExDwsD,EAAS97F,EAAQm0B,MAAKmM,GAAKA,EAAExZ,OAASA,GAAQwZ,EAAEisD,QAAUA,GAC9D,CAGIrsF,KAAKqiG,cADLzG,EACqBA,EAAOtP,cAEPhsF,CAE7B,CASAy/F,WAAWrzF,GACP9E,MAAMm4F,WAAWrzF,GAEbA,GAEA1M,KAAKqkG,WAAarkG,KAAK8gG,UACvBr3F,GAAOgH,MAAO,qBAAoBzQ,KAAKqkG,iBAAiBrkG,SAExDyJ,GAAOgH,MAAO,4BAA2BzQ,OAEjD,CASA4hG,mBAAmBD,GACf3hG,KAAK2jG,cAAgBhC,EACrB3hG,KAAKskG,gBAAkBtkG,KAAK0M,OAC5B1M,KAAK+/F,WAAW//F,KAAK2jG,cAAcY,YAAYvkG,KAAKskG,kBACpDtkG,KAAKqiB,MAAQriB,KAAK0M,OAAOupB,YAAY,EACzC,CAQA2tE,oBACQ5jG,KAAK2jG,gBACL3jG,KAAK2jG,cAAca,aACnBxkG,KAAK+/F,WAAW//F,KAAKskG,iBACrBtkG,KAAKskG,gBAAkB,KACvBtkG,KAAKqiB,MAAQriB,KAAK0M,OAAS1M,KAAK0M,OAAOupB,YAAY,GAAK,KAEhE,CAaAwuE,gBACQzkG,KAAK+yB,gBACE/yB,KAAKgzB,YAAcC,GAAU,UAAVA,QACiB,mBAA7BjzB,KAAKqiB,MAAMoiF,gBACzBzkG,KAAKqiB,MAAMoiF,gBAEXzkG,KAAKiiG,YACCjiG,KAAKiiG,cAAgB9D,KAAAA,YACjBA,KAAAA,KACAA,KAAAA,YAElB,CASAuG,oBAAoB/C,GACZ3hG,KAAK2jG,gBACL3jG,KAAK4jG,oBACL5jG,KAAK2jG,mBAAgBrjG,GAErBqhG,GACA3hG,KAAK4hG,mBAAmBD,EAEhC,CAUA7nF,gBAwBI,OApBI9Z,KAAK2jG,qBACC3jG,KAAK2kG,YAGX3kG,KAAKqqB,kBACCrqB,KAAKqqB,WAAW8kE,YAAYnvF,MAGlCA,KAAK0M,SACL1M,KAAK6jG,aACL7jG,KAAK4gG,UAGTD,GAAAA,eAAwBzuE,GAAAA,QAAAA,wBAAmClyB,KAAKwiG,yBAE5DxiG,KAAK2iG,6BACLhC,GAAAA,eAAwBzuE,GAAAA,QAAAA,4BACpBlyB,KAAK2iG,6BAGN/6F,MAAMsG,SACjB,CAQA81F,sBACI,GAAIhkG,KAAK+yB,gBAAkB/yB,KAAKgzB,YAAcC,GAAU,UAAVA,OAAkB,KAAA2xE,EAAAC,EAQ5D,MAAMC,EAAsC,QAAzBF,GAAGC,EAAA7kG,KAAKqiB,OAAMswE,mBAAW,IAAAiS,OAAA,EAAtBA,EAAA5xF,KAAA6xF,GAEtB,OAAIC,GAAiB,eAAgBA,EAC1BA,EAAc9Y,gBAGO,IAArBhsF,KAAKiiG,YACLjiG,KAAKiiG,YAMT9D,KAAAA,IACX,CAGJ,CAOA4F,cACI,OAAO/jG,KAAKqiG,eAAiBriG,KAAKssF,QACtC,CAOAyY,cACI,OAAQjpF,KAAKC,MAAQ,IAAS/b,KAAKw9C,SAASr5B,UAAY,GAC5D,CAQApB,mBACI,OAAO/iB,KAAKqqB,YAAcrqB,KAAKqqB,WAAWuH,UAC9C,CAOAlP,gBACI,OAAO1iB,KAAKsiG,WAChB,CAOA0C,UACI,OAAIhlG,KAAK+yB,gBAAkB/yB,KAAKwtB,UAGrBxtB,KAAKkiG,YAGsB,UAA/BliG,KAAKghG,WAAWltD,YAA0B9zC,KAAKkiG,WAC1D,CAOAtsF,UACI,OAAO,CACX,CAOA4X,UAEI,OAAKxtB,KAAK0M,WAGN1M,KAAK+yB,gBAAmB/yB,KAAKqoF,cAK7BroF,KAAK2jG,eAAiB3jG,KAAK2jG,cAAcn2E,QAClCxtB,KAAK2jG,cAAcn2E,WAGtBxtB,KAAKqiB,QAAUriB,KAAKqiB,MAAM+R,QACtC,CAUA4uE,kBACI,SAAIhjG,KAAK+yB,iBACD/yB,KAAKwtB,YAAaxtB,KAAKilG,uBAAyBjlG,KAAKgzB,YAAcC,GAAU,UAAVA,YAItEjzB,KAAK0M,SAUK1M,KAAKklG,eAAiBllG,KAAKskG,gBAAkBtkG,KAAK0M,QAEnDupB,YAAYlpB,MAAKsV,KACxB,eAAgBA,GAA+B,SAArBA,EAAMyxB,YACzB,UAAWzxB,IAA0B,IAAhBA,EAAMsJ,QAC7C,CAOAhX,OACI,OAAO3U,KAAKmjG,gBAAe,EAC/B,CASA1uE,wBAAwB7f,EAAKmM,GACrBA,EAAY,IACZ/gB,KAAKmiG,cAAe,GAExB,MAAMvzB,EAAqBh6D,EAAIonE,qBAE3Bh8E,KAAKoiG,eAAwC,cAAvBxzB,IACtBn1C,YAAW,KACFz5B,KAAKmiG,eACN14F,GAAON,KAAM,GAAEnJ,mDACT+gB,KAEN8G,GAAWe,UAAU9Z,UAAUhM,GAAe,CAAE,WAAc9C,KAAKytB,YACvE,GACD,KACHztB,KAAKoiG,eAAgB,EAE7B,CAQA+C,cAAc96E,GACVrqB,KAAKqqB,WAAaA,EAMlB,IAAK,IAAItkB,EAAI,EAAGA,EAAI/F,KAAK6/F,WAAWn8F,OAAQqC,IACxC/F,KAAKqgG,wBAAwBrgG,KAAK6/F,WAAW95F,GAErD,CAQA4+F,UAAUhD,GACN,QAAkC,IAAvB3hG,KAAK2jG,oBAAmD,IAAXhC,EACpD,OAAOttF,QAAQC,UAGnB,QAAsB,IAAXqtF,IAA2BA,EAAOrlE,UAAUt8B,MACnD,OAAOqU,QAAQE,OAAO,IAAIrT,MAAM,kCAGpC,IAAkC,IAA9BlB,KAAK0hG,qBACL,OAAOrtF,QAAQE,OAAO,IAAIrT,MAAM,mCAKpC,GAAIlB,KAAKwtB,YAAcxtB,KAAKuiB,eAGxB,OAFAviB,KAAK2jG,cAAgBhC,EAEdttF,QAAQC,UAGnB,MAAM+V,EAAarqB,KAAKqqB,WAExB,OAAKA,GASLrqB,KAAK0hG,sBAAuB,EAErBr3E,EAAWk5E,wBAAwBvjG,MACrC+f,MAAK,KACF/f,KAAK0kG,oBAAoB/C,GACrB3hG,KAAK+yB,gBACL/yB,KAAK6/F,WAAWzxF,SAAQ+1F,GAAQxD,GAAAA,kBAA2BwD,EAAMnkG,KAAK0M,UAGnE2d,EAAWy4E,mBAAmB9iG,SAExC+f,MAAK,KACF/f,KAAK0hG,sBAAuB,CAAK,IAEpCxhF,OAAMtgB,IAMH,MAHAI,KAAK0hG,sBAAuB,EAC5B1hG,KAAK0kG,sBACLj7F,GAAO7J,MAAM,sCAAuCA,GAC9CA,CAAK,MA5BfI,KAAK0kG,oBAAoB/C,GACrB3hG,KAAK+yB,gBACL/yB,KAAK6/F,WAAWzxF,SAAQ+1F,GAAQxD,GAAAA,kBAA2BwD,EAAMnkG,KAAK0M,UAGnE2H,QAAQC,UAyBvB,CAOAiiE,cAAcx2E,GACVC,KAAKsiG,YAAcviG,CACvB,CAOA8jG,aASI7jG,KAAKilG,uBAAwB,EAE7B,IACItE,GAAAA,gBAAyB3gG,KAAK0M,OAClC,CAAE,QACE1M,KAAKilG,uBAAwB,CACjC,CACJ,CAOA51D,WACI,MAAQ,cAAarvC,KAAKyhG,SAASzhG,KAAKytB,YAC5C,CAOA23E,SACI,OAAOplG,KAAKmjG,gBAAe,EAC/B,iBC/4BJ,MA+EA,GA/Ec,SAAS91E,EAASg4E,GAgC5B,YA/BuB,IAAZh4E,QAAoD,IAAlBA,EAAQorB,OAAyBt4C,MAAMC,QAAQitB,EAAQorB,QAChGprB,EAAQorB,MAAMrqC,SAAQmpD,IACdA,EAAM9I,SAAW8I,EAAM9I,QAAQ/qD,SAC/B6zD,EAAM1I,MAAQ,GACd0I,EAAM9I,QAAQrgD,SAAQjL,IAClB9B,OAAO8G,KAAKhF,GAAQiL,SAAQspD,IACN,OAAdA,GAGJH,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAI1iB,EAAO0iB,GACX6xC,YACA/vD,MAAOxE,EAAOu0D,IAChB,GACJ,WAECH,EAAM9I,SAIb8I,EAAMP,YAAcO,EAAMP,WAAWtzD,QACrC6zD,EAAMP,WAAW5oD,SAAQwpD,SACU,IAApBA,EAAU/I,OAClB1uD,MAAMC,QAAQw3D,EAAU/I,SACvB+I,EAAU/I,MAAQ+I,EAAU/I,MAAMruD,KAAK,KAC3C,GAER,IAID46B,GAAAA,MAAgB/N,EAASg4E,EACpC,EA8CA,GArCc,SAASttC,GACnB,MAAM1qC,EAAU+N,GAAAA,MAAgB28B,GAiChC,YA/BuB,IAAZ1qC,QAAoD,IAAlBA,EAAQorB,OAAyBt4C,MAAMC,QAAQitB,EAAQorB,QAChGprB,EAAQorB,MAAMrqC,SAAQmpD,SAES,IAAhBA,EAAM1I,OAAyB1uD,MAAMC,QAAQm3D,EAAM1I,SAC1D0I,EAAM9I,QAAU,GAChB8I,EAAM1I,MAAMzgD,SAAQuD,IAChB,MAAM2zF,EAAQ/tC,EAAM9I,QAAQopB,WAAU10E,GAAUA,EAAO0iB,KAAOlU,EAAKkU,KAEnE,GAAIy/E,GAAS,EACT/tC,EAAM9I,QAAQ62C,GAAO3zF,EAAK+lD,WAAa/lD,EAAKhK,UACzC,CACH,MAAM2yB,EAAM,CAAEzU,GAAIlU,EAAKkU,IAEvByU,EAAI3oB,EAAK+lD,WAAa/lD,EAAKhK,MAC3B4vD,EAAM9I,QAAQn/C,KAAKgrB,EACvB,YAEGi9B,EAAM1I,YAIe,IAArB0I,EAAMP,YAA8B72D,MAAMC,QAAQm3D,EAAMP,aAC/DO,EAAMP,WAAW5oD,SAAQwpD,IACU,iBAApBA,EAAU/I,QACjB+I,EAAU/I,MAAQ+I,EAAU/I,MAAMloC,MAAM,KAC5C,GAER,IAID0G,CACX,EClFMk4E,GAAc,CAAE,QAAS,QAAS,QAClCC,GAAe5tC,GAAaA,EAAU3jC,MAAKwxE,GAAyB,QAAlBA,EAAIz3C,YACtD03C,GAAe9tC,GAAaA,EAAU3jC,MAAKwxE,GAAyB,QAAlBA,EAAIz3C,YAW5D,SAAS23C,GAAmBpuC,EAAOJ,EAAUyuC,EAAcC,GACvD,IAAKtuC,IAAUJ,EACX,OAEJ,MAAM2uC,EAAiBxrE,GAAOurE,EAAW5xE,MAAK9wB,GAAUA,EAAO0iB,GAAGwpB,aAAe/U,IAEjF68B,EAAStI,MAAMzgD,SAAQksB,IACnBi9B,EAAM9I,QAAQn/C,KAAKw2F,EAAexrE,IAGlC,MAAMyrE,EAAkBH,EAAaz/F,SAASm0B,EAAK,KAAKrG,MAAKwxE,GAAyB,QAAlBA,EAAIz3C,YAExE,GAAI+3C,EAAiB,CACjB,MAAMC,EAAcD,EAAgBl3C,MAAM56B,MAAKiV,GAAKA,IAAM5O,IAE1Di9B,EAAM9I,QAAQn/C,KAAKw2F,EAAeE,IAClCzuC,EAAMP,WAAW1nD,KAAKy2F,EAC1B,KAIJxuC,EAAMP,WAAW1nD,KAAK6nD,EAC1B,CAeA,SAAS8uC,GAAkB1uC,EAAO5lD,EAAMi0F,EAAcC,GAClD,IAAKtuC,IAAU5lD,EACX,OAMJ,GAJA4lD,EAAM9I,QAAU,GAChB8I,EAAMP,WAAa,IAGd4uC,EAAaj0F,EAAKkU,IAInB,OAHA0xC,EAAM9I,QAAQn/C,KAAKqC,QACnB4lD,EAAMmD,KAAO/oD,EAAK+oD,MAItB,MAGMvD,EAAWquC,GAAaI,EAAaj0F,EAAKkU,KAC1CqxC,EAAWwuC,GAAaE,EAAaj0F,EAAKkU,KAGhD,GAAIsxC,EACAwuC,GAAmBpuC,EAAOJ,EAAUyuC,EAAcC,QAC/C,GAAI3uC,EAAU,CAEjB,MAAMgvC,EAAYhvC,EAASrI,MAAM56B,MAAKiV,GAAKA,IAAMv3B,IAC3Cw0F,EAAYX,GAAaI,EAAaM,IAExCC,EACAR,GAAmBpuC,EAAO4uC,EAAWP,EAAcC,IAGnD3uC,EAASrI,MAAMzgD,SAAQksB,IACnBi9B,EAAM9I,QAAQn/C,KAnBHgrB,IAAOurE,EAAW5xE,MAAK9wB,GAAUA,EAAO0iB,GAAGwpB,aAAe/U,IAmBlDwrE,CAAexrE,GAAK,IAE3Ci9B,EAAMP,WAAW1nD,KAAK4nD,GAE9B,CAGAK,EAAMmD,KAAOnD,EAAM9I,QAAQ,GAAGiM,IAClC,CAqBA,SAAS0rC,GAA0Bz0F,EAAMi0F,EAAcS,GASnD,IAAKA,EAAOpyE,MARc8/B,KAClBA,EAAMtF,SACCsF,EAAMtF,QAAQ1hD,MAAK5J,GAAUA,EAAO0iB,KAAOlU,EAAKkU,OAM1B,CAGjC,IAAK+/E,EAAaj0F,EAAKkU,IACnB,OAAO,EAEX,MAAMsxC,EAAWquC,GAAaI,EAAaj0F,EAAKkU,KAC1CqxC,EAAWwuC,GAAaE,EAAaj0F,EAAKkU,KAEhD,OAAIsxC,EACOkvC,EAAOt5F,MAAKgnD,GAASA,EAAMtF,SAC3BsF,EAAMtF,QAAQ1hD,MAAKutB,GAAOA,EAAIzU,GAAGwpB,aAAe8nB,EAAStI,MAAM,UAC/DqI,GAAYvlD,EAAKkU,GAAGwpB,aAAe6nB,EAASrI,MAAM,KAGlDu3C,GAFW,CAAEvgF,GAAIqxC,EAASrI,MAAM,IAEK+2C,EAAcS,EAKlE,CAEA,OAAO,CACX,CAiDO,MAAMC,GAMTC,QAAQp4C,GACJ,IAAKA,GAA0C,iBAApBA,EAAY4J,IAGnC,OAFA7uD,QAAQC,KAAK,mDAENglD,EAIX,MAAM9gC,EAAU+N,GAAgB+yB,EAAY4J,KAG5C,IAAK1qC,EAAQorB,QAAUprB,EAAQorB,MAAM/0C,OAGjC,OAFAwF,QAAQC,KAAK,iCAENglD,EAIX,GAAI9gC,EAAQorB,MAAM+tD,OAAMn6E,IAAqC,IAAhCk5E,GAAY3kG,QAAQyrB,EAAEkuC,OAG/C,OAFArxD,QAAQC,KAAK,uDAENglD,EAGX,MAAM1V,EAAQ,CAAC,EACTguD,EAAep5E,EAAQorB,MAE7BprB,EAAQorB,MAAQ,GAChBguD,EAAar4F,SAAQmpD,IACjB,MAAMn0D,EAAOm0D,EAAMn0D,KAEnB,GAAa,gBAATA,EAIA,OAHAm0D,EAAMgD,IAAM,YACZ9hB,EAAM8e,EAAMgD,KAAOhD,GAIvB,QAA2B,IAAhB9e,EAAMr1C,GAAuB,CACpC,MAAMsjG,EAAQlsC,GAAUjD,GAGpBmvC,EAAMj4C,SAAWtuD,MAAMC,QAAQsmG,EAAMj4C,UACrCi4C,EAAMj4C,QAAQrgD,SAAQjL,IAClBo0D,EAAMmD,KAAOv3D,EAAOu3D,KAAOnD,EAAMmD,YAAcv3D,EAAOu3D,IAAI,IAU7DgsC,EAAM1vC,YAAeO,EAAMmD,OAC5BgsC,EAAM1vC,WAAa,WAEhB0vC,EAAMhsC,KACbgsC,EAAMnsC,IAAMn3D,EACZq1C,EAAMr1C,GAAQsjG,CAClB,MAAO,GAAInvC,EAAMmD,KAAM,CAEnB,MAAMgsC,EAAQlsC,GAAUjD,GAEpBmvC,EAAMj4C,SAAWtuD,MAAMC,QAAQsmG,EAAMj4C,WAErCi4C,EAAMj4C,QAAQrgD,SAAQuD,IAClBA,EAAK+oD,KAAOnD,EAAMmD,IAAI,IAE1BjiB,EAAMr1C,GAAMqrD,SAAWhW,EAAMr1C,GAAMqrD,SAAW,IAAIkM,OAAO+rC,EAAMj4C,eAEnC,IAArBi4C,EAAM1vC,YAA8B72D,MAAMC,QAAQsmG,EAAM1vC,cAC/Dve,EAAMr1C,GAAM4zD,YAAcve,EAAMr1C,GAAM4zD,YAAc,IAAI2D,OAAO+rC,EAAM1vC,YAE7E,KAEJ3pC,EAAQorB,MAAQp3C,OAAOkP,OAAOkoC,GAG9B,MAAMkuD,EAAS,GAEftlG,OAAOkP,OAAOkoC,GAAOrqC,SAAQ2lD,IACD,aAApBA,EAAMmC,WACNywC,EAAOr3F,KAAKykD,EAAMwG,IACtB,IAIJltC,EAAQutC,OAAOxsD,SAAQ+1C,IACA,WAAfA,EAAM/gD,OACN+gD,EAAM0W,KAAO8rC,EAAOnmG,KAAK,KAC7B,IAIJ6sB,EAAQu5E,aAAe,CACnBC,SAAU,MACVlnB,MAAO,KAEX,MAAMmnB,EAAS1rE,GAAgB/N,GAE/B,OAAO,IAAIslD,sBAAsB,CAC7BvvE,KAAM+qD,EAAY/qD,KAClB20D,IAAK+uC,GAEb,CAUAC,cAAc54C,GAA6B,IAAhB64C,EAAOvjG,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,KACjC,IAAK0qD,GAA0C,iBAApBA,EAAY4J,IAGnC,OAFA7uD,QAAQC,KAAK,mDAENglD,EAIX,MAAM9gC,EAAU+N,GAAgB+yB,EAAY4J,KAG5C,IAAK1qC,EAAQorB,QAAUprB,EAAQorB,MAAM/0C,OAGjC,OAFAwF,QAAQC,KAAK,iCAENglD,EAIX,GAAI9gC,EAAQorB,MAAM/0C,OAAS,GAAK2pB,EAAQorB,MAAM+tD,OAAMn6E,IAAqC,IAAhCk5E,GAAY3kG,QAAQyrB,EAAEkuC,OAG3E,OAFArxD,QAAQC,KAAK,6CAENglD,EAEX,MAAM84C,EAAcD,EAAU5rE,GAAgB4rE,EAAQjvC,KAAO,KACvDmvC,EA/Jd,SAA4BC,EAASC,GACjC,IAAKD,IAAYC,GAAoC,IAAzBD,EAAQ1uD,MAAM/0C,QAAyC,IAAzB0jG,EAAQ3uD,MAAM/0C,OACpE,OAAO,EAGX,MAAM2jG,EAAWF,EAAQ1uD,MAAM,GACzB6uD,EAAWF,EAAQ3uD,MAAM,GAE/B,OAAO4uD,EAAS/pB,WAAagqB,EAAShqB,UAAY+pB,EAAS9pB,SAAW+pB,EAAS/pB,MACnF,CAsJ2BgqB,CAAmBl6E,EAAS45E,GACzCO,EAAcn6E,EAAQorB,MAAM,GAAG6kC,SAC/BmqB,EAAYp6E,EAAQorB,MAAM,GAAG8kC,OAC7B1J,EAAiBxmD,EAAQorB,MAAM,GAAG+b,YAClC/b,EAAQ,CAAC,EAEfprB,EAAQorB,MAAMrqC,SAAQmpD,IAClB,MAAMn0D,EAAOm0D,EAAMn0D,KAEnB,GAAa,gBAATA,EAAwB,CACxB,IAAK6jG,IAAgBA,EAAYxuD,MAAO,CACpC,MAAMivD,EAAWltC,GAAUjD,GAK3B,OAHAmwC,EAASntC,IAAMl5D,OAAO8G,KAAKswC,GAAO/0C,OAAO2rC,gBACzCoJ,EAAM8e,EAAMgD,KAAOmtC,EAGvB,CACA,MAAMC,EAAeV,EAAYxuD,MAAMo/B,WAAUxrD,GAAKA,EAAEjpB,OAASA,IAOjE,YALIukG,IACAV,EAAYxuD,MAAMkvD,GAAgBpwC,EAClC0vC,EAAYxuD,MAAMkvD,GAAcptC,IAAMotC,GAI9C,CAGA,MAAMC,EAtNlB,SAA8BhC,GAC1B,MAAMgC,EAAa,CAAC,EAEpB,OAAKhC,GAAiBzlG,MAAMC,QAAQwlG,IAGpCA,EAAax3F,SAAQ+1C,IACbA,EAAM0K,OAAS1uD,MAAMC,QAAQ+jD,EAAM0K,QACnC1K,EAAM0K,MAAMzgD,SAAQuD,SACgB,IAArBi2F,EAAWj2F,KAClBi2F,EAAWj2F,GAAQ,IAEvBi2F,EAAWj2F,GAAMrC,KAAK60C,EAAM,GAEpC,IAGGyjD,GAbIA,CAcf,CAoM+BC,CAAqBtwC,EAAMP,YAK9C,GAAKO,EAAM9I,QAUX8I,EAAM9I,QAAQrgD,SAAQ,CAACuD,EAAM0oB,KAGzB,IAAK1oB,EAAK+oD,KACN,OAIJ,IAAKusC,IAAgBA,EAAYxuD,MAAO,CACpC,GAAI2tD,GAA0Bz0F,EAAMi2F,EAAYvmG,OAAOkP,OAAOkoC,IAC1D,OAEJ,MAAMivD,EAAWltC,GAAUjD,GAU3B,OARAmwC,EAASntC,IAAMl5D,OAAO8G,KAAKswC,GAAO/0C,OAAO2rC,WACzCq4D,EAASxxC,UAAY77B,GAEK,aAApBk9B,EAAMrB,UADN,WAC8C,WACpDwxC,EAASI,gBAAaxnG,EACtB2lG,GAAkByB,EAAU/1F,EAAMi2F,EAAYrwC,EAAM9I,cACpDhW,EAAMivD,EAASntC,KAAOmtC,EAG1B,CAGA,GAAItB,GAA0Bz0F,EAAMi2F,EAAYX,EAAYxuD,OACxD,OAEJ,MAAMivD,EAAWltC,GAAUjD,GAE3BmwC,EAASntC,IAAM0sC,EAAYxuD,MAAM/0C,OAAO2rC,WACxCq4D,EAASxxC,UAAY,WACrB+vC,GAAkByB,EAAU/1F,EAAMi2F,EAAYrwC,EAAM9I,SACpDw4C,EAAYxuD,MAAMnpC,KAAKo4F,EAAS,SA3ChC,IAAKT,EAAa,CACd,MAAMS,EAAWltC,GAAUjD,GAE3BmwC,EAASntC,IAAMl5D,OAAO8G,KAAKswC,GAAO/0C,OAAO2rC,WACzCoJ,EAAM8e,EAAMgD,KAAOmtC,CACvB,CAuCF,IAENr6E,EAAQorB,MAAQwuD,EAAcA,EAAYxuD,MAAQp3C,OAAOkP,OAAOkoC,GAChE,MAAMoiB,EAAO,GAEbxtC,EAAQorB,MAAMrqC,SAAQmpD,IAClBsD,EAAKvrD,KAAKioD,EAAMgD,KACZ2sC,IACA3vC,EAAM+lB,SAAWkqB,EACjBjwC,EAAMgmB,OAASkqB,EACflwC,EAAM/C,YAAcqf,EACxB,IAIJxmD,EAAQutC,OAAOxsD,SAAQ+1C,IACA,WAAfA,EAAM/gD,OACN+gD,EAAM0W,KAAOA,EAAKr6D,KAAK,KAC3B,IAIJ6sB,EAAQu5E,aAAe,CACnBC,SAAU,MACVlnB,MAAO,KAIXtyD,EAAQwxB,OAAOkpD,iBACf,MAAMC,EAAY5sE,GAAgB/N,GAElC,OAAO,IAAIslD,sBAAsB,CAC7BvvE,KAAM+qD,EAAY/qD,KAClB20D,IAAKiwC,GAEb,ECtdG,IAAKC,GAAe,SAAfA,GAAe,OAAfA,EAAe,yCAAfA,EAAe,kDAAfA,EAAe,6CAAfA,EAAe,yCAAfA,EAAe,sDAAfA,CAAe,MA8CpB,MAAMC,GAAqBD,GAAgBC,mBACrCC,GAA0BF,GAAgBE,wBAC1CC,GAAuBH,GAAgBG,qBACvCC,GAAiBJ,GAAgBI,eACjCC,GAA4BL,GAAgBK,0BCxBlD,SAASC,GAA2B38C,EAAY9nD,EAAW0kG,GAG9D,MAAQ,GAAE58C,KAFqB9nD,EAAUosB,UAAU,EAAG,KAELs4E,GACrD,CASO,SAASC,GAA2BhmF,GACvC,MAAMimF,EAA4BjmF,EAAWyI,YAAY,KAAO,EAEhE,GAAIw9E,GAA6B,EAC7B,MAAM,IAAIxnG,MAAO,wBAAuBuhB,KAG5C,MAAMkmF,EAAyBlmF,EAAW67B,OAAOoqD,EAA2B,GAE5E,IAAK,MAAMtlG,KAAQ/B,OAAOkP,OAAO8L,IAC7B,GAAIjZ,EAAKk7C,OAAO,EAAG,KAAOqqD,EACtB,OAAOvlG,EAIf,MAAM,IAAIlC,MAAO,wBAAuBuhB,IAC5C,CASO,SAASmmF,GAA6BnmF,GACzC,MAAMomF,EAAYpmF,EAAWkE,MAAM,KAC7B6hF,EAAWtiG,OAAO2iG,EAAUA,EAAUnlG,OAAS,GAAGwsB,UAAU,IAElE,GAAIhqB,OAAOyd,MAAM6kF,GACb,MAAM,IAAItnG,MAAO,8CAA6CuhB,KAGlE,OAAO+lF,CACX,CAgBe,MAAMM,WAAuBpvE,GAexCi9C,iBAAiBhpB,EAAO7pD,EAAW2e,GAC/B,MAAM,IAAIvhB,MAAM,kBACpB,CAQA6nG,kBAAkBp7C,EAAOlrC,GACrB,MAAM,IAAIvhB,MAAM,kBACpB,CAOA8nG,aAAar3F,GACT,MAAM,IAAIzQ,MAAM,kBACpB,CAOA+nG,mBAAmBt3F,GACf,MAAM,IAAIzQ,MAAM,kBACpB,CAOA+2E,iBAAiBixB,GAAY,CAS7B93B,aAAaz/D,EAAMi6C,GAAc,CAUjCu9C,mBAAmB1mF,EAAYkJ,GAAS,CASxCwlD,mBAAmBx/D,EAAM8Q,GAAc,CASvC2mF,kBAAkB3mF,EAAYuQ,GAAa,CAS3Cq2E,wBAAwBxjF,GAAM,ECpL3B,SAASyjF,GAAiBnlD,GAC7B,OAAOh+C,SAASg+C,EAAM0K,MAAMloC,MAAM,KAAK,GAAI,GAC/C,CAOO,SAAS4iF,GAAmBplD,GAC/B,OAAOh+C,SAASg+C,EAAM0K,MAAMloC,MAAM,KAAK,GAAI,GAC/C,CAOA,SAAS6iF,GAAcjyC,GACnB,OAAKA,EAAM1I,MAIJ0I,EAAM1I,MACRnxB,KAAIo5B,GAAYA,EAASjxC,KACzB5N,QAAO,CAACtG,EAAMurB,EAAOxkB,IAAUA,EAAM9X,QAAQ+Q,KAAUurB,IACvDx5B,OANM,CAOf,CAMA,MAAM+lG,GAOFloG,YAAYg2D,GACR,IAAKA,EACD,MAAM,IAAIr2D,MAAM,sBAGpBlB,KAAKu3D,MAAQA,CACjB,CASI1I,YAKA,OAJK7uD,KAAKu3D,MAAM1I,QACZ7uD,KAAKu3D,MAAM1I,MAAQ,IAGhB7uD,KAAKu3D,MAAM1I,KACtB,CAQIA,UAAMA,GACN7uD,KAAKu3D,MAAM1I,MAAQA,CACvB,CAMIqH,gBACA,OAAOl2D,KAAKu3D,MAAMrB,SACtB,CAMIA,cAAUA,GACVl2D,KAAKu3D,MAAMrB,UAAYA,CAC3B,CAMIc,iBAKA,OAJKh3D,KAAKu3D,MAAMP,aACZh3D,KAAKu3D,MAAMP,WAAa,IAGrBh3D,KAAKu3D,MAAMP,UACtB,CAOIA,eAAWA,GACXh3D,KAAKu3D,MAAMP,WAAaA,CAC5B,CAUA0yC,iBAAiBC,EAAYC,GACzB,MAAMlyC,EAAY13D,KAAK6uD,MAAM56B,MACzB41E,GAAWA,EAAQhkF,KAAO8jF,GACvBE,EAAQnyC,YAAckyC,IAG7B,OAAOlyC,GAAaA,EAAU/vD,KAClC,CAOAmiG,WAAW5qC,GACFl/D,KAAKu3D,MAAM1I,OAAU7uD,KAAKu3D,MAAM1I,MAAMnrD,SAI3C1D,KAAKu3D,MAAM1I,MACL7uD,KAAKu3D,MAAM1I,MAAM52C,QAAO4xF,GAAWA,EAAQhkF,KAAOq5C,IAC5D,CAOA6qC,iBAAiBF,GACb7pG,KAAK6uD,MAAMv/C,KAAKu6F,EACpB,CAUAG,UAAUh8C,EAAWa,GACjB,OAAO7uD,KAAKg3D,WAAW/iC,MACnBkwB,GACIA,EAAM6J,YAAcA,KACXa,GAASA,IAAU1K,EAAM0K,QAC9C,CAQAo7C,WAAWj8C,GACP,OAAOhuD,KAAKg3D,WAAW/+C,QACnBksC,GAASA,EAAM6J,YAAcA,GACrC,CAQAk8C,uBAAuBl8C,EAAWm8C,GAC9B,OAAOnqG,KAAKg3D,WAAW/iC,MACnBkwB,GAASA,EAAM6J,YAAcA,GACtBs7C,GAAiBnlD,KAAWgmD,GAC3C,CAQAC,eAAe1vC,GACX,OAAO16D,KAAK6uD,MAAM56B,MACd41E,GAAiC,SAAtBA,EAAQnyC,YACF,OAATgD,GAAiBmvC,EAAQliG,QAAU+yD,IACnD,CAMA2vC,eACI,OAAOb,GAAcxpG,KAAKu3D,MAC9B,CAOA+yC,wBACI,YAAiChqG,IAA1BN,KAAKu3D,MAAMP,UACtB,CAOAuzC,sBACI,MAAMzmG,EAAY9D,KAAKu3D,MAAMn0D,KAE7B,GAAkB,UAAdU,EACA,MAAM,IAAI5C,MACL,qCAAoC4C,MAK7C,GAAiB,IAFA0lG,GAAcxpG,KAAKu3D,OAIhC,OAAOv3D,KAAKu3D,MAAM1I,MAAM,GAAGhpC,GAI/B,GAAI7lB,KAAKu3D,MAAMP,WAAY,CACvB,MAAMG,EAAWn3D,KAAKgqG,UAAU,OAEhC,GAAI7yC,EACA,OAAOmyC,GAAiBnyC,GAE5B,MAAMD,EAAWl3D,KAAKgqG,UAAU,OAEhC,GAAI9yC,EACA,OAAOoyC,GAAiBpyC,GAE5B,MAAMszC,EAAWxqG,KAAKgqG,UAAU,UAEhC,GAAIQ,EACA,OAAOlB,GAAiBkB,EAEhC,CAEJ,CAUAC,WAAWxzC,GACP,MAAMC,EAAWl3D,KAAKkqG,uBAAuB,MAAOjzC,GAGpD,OAAOC,GAAYqyC,GAAmBryC,EAC1C,CAMAwzC,WACI,OAAO1qG,KAAK6uD,MACPnxB,KAAIo5B,GAAYA,EAASjxC,KACzB5N,QAAO,CAACtG,EAAMurB,EAAOxkB,IAAUA,EAAM9X,QAAQ+Q,KAAUurB,GAChE,CAOAytE,uBACI,MAAM7mG,EAAY9D,KAAKu3D,MAAMn0D,KAE7B,GAAkB,UAAdU,EACA,MAAM,IAAI5C,MACL,0CAAyC4C,KAGlD,MAAM8mG,EAAa5qG,KAAK0qG,WAExB,IAAK,MAAMG,KAAiB7qG,KAAKg3D,WAI7B,GAAgC,QAA5B6zC,EAAc78C,WACqB,WAA5B68C,EAAc78C,UAAwB,CAE7C,MAAM88C,EAAgBvB,GAAmBsB,GAEzCD,EAAWr7F,OACPq7F,EAAWhqG,QAAQkqG,GAAgB,EAC3C,CAGJ,OAAOF,CACX,CAKAG,iBACI,OAAOpiG,KAAKC,UAAU5I,KAAKu3D,MAAMP,WACrC,CAOAg0C,qBAAqBr5F,GACZ3R,KAAKu3D,MAAMP,aAIhBh3D,KAAKu3D,MAAMP,WAAah3D,KAAKu3D,MAAMP,WAC9B/+C,QAAOisC,IAAqD,IAAxCA,EAAU2K,MAAMjuD,QAAS,GAAE+Q,OACxD,CAMAs5F,wBAAwBj9C,GACfhuD,KAAKu3D,MAAMP,aAIhBh3D,KAAKu3D,MAAMP,WACLh3D,KAAKu3D,MAAMP,WACR/+C,QAAOisC,GAAaA,EAAU8J,YAAcA,IACzD,CAOAk9C,YAAYC,EAASC,GACbprG,KAAKu3D,MAAM1I,OACX7uD,KAAKu3D,MAAM1I,MAAMzgD,SAAQ0oD,IACjBA,EAASjxC,KAAOslF,IAChBr0C,EAASjxC,GAAKulF,EAClB,GAGZ,CAOAC,aAAalnD,GACTnkD,KAAKg3D,WAAW1nD,KAAK60C,EACzB,EAmBG,MAAMmnD,GAOT/pG,YAAYgqG,GACRvrG,KAAKwrG,UAAYpwE,GAAAA,MAAgBmwE,EACrC,CAUAE,YAAY3nG,GACR,MAAM4nG,EAAiB1rG,KAAKwrG,UAAU/yD,MACjCxgC,QAAOs/C,GAASA,EAAMn0D,OAASU,IAC/B45B,KAAI65B,GAAS,IAAIkyC,GAAUlyC,KAEhC,OAAOm0C,QAAAA,EAAkB,IAC7B,CAOAC,WACI,OAAOvwE,GAAAA,MAAgBp7B,KAAKwrG,UAChC,ECraJ,MAAM/hG,IAASC,EAAAA,EAAAA,4CAUA,MAAMkiG,GAQjBrqG,YAAYqT,EAAKi3F,GACb7rG,KAAK4U,IAAMA,EACX5U,KAAK6rG,gBAAkBA,EACvB7rG,KAAK8rG,sBAAwB,IAAI9sF,IACjChf,KAAK+rG,sBAAwB,IAAI/sF,GACrC,CAiBAgtF,+BAA+BC,GAAa,IAAAC,EAExC,MAAMC,EAAcnsG,KAAK4U,IAAIoS,eAAe3K,GAAUwK,OAEtD,IAAKslF,EAAYzoG,OACb,OAAO,EACuB,IAAvByoG,EAAYzoG,QACnB+F,GAAO7J,MACF,GAAEI,KAAK4U,qEAC6Bu3F,GAG7C,MAAMv1C,EAAqD,QAA3Cs1C,EAAGD,EAAYR,YAAYpvF,GAAUwK,cAAM,IAAAqlF,OAAA,EAAxCA,EAA2C,GAE9D,IAAKt1C,EAKD,OAJAntD,GAAOgH,MACF,GAAEzQ,KAAK4U,+DAGL,EAGX,IAAIqqD,GAAW,EAEf,IAAK,MAAMyhC,KAAcyL,EAAa,CAClC,MAAMxgF,EAAQ+0E,EAAWlzE,UACnByxE,EAAcyB,EAAWn3E,oBACzB6iF,EAAW1L,EAAW1tE,YAAcC,GAAU,UAAVA,OAKpCo5E,EACApN,GAAej/F,KAAK4U,IAAI03F,kBAAkBrN,GAGhD,IAFsBmN,IAAazgF,GAAU0gF,EAGzC,SAIJ,MAAME,EACAvsG,KAAK4U,IAAI43F,gBACLxsG,KAAK4U,IAAI63F,UAAUC,UACnB,CAAE1sG,KAAK4U,IAAI+3F,eAAeC,mBAEpC,IAAKL,EAAc7oG,OAAQ,CACvB+F,GAAO7J,MAAO,wBAAuB8gG,QAAiB1gG,KAAK4U,OAE3D,QACJ,CAEAqqD,GAAW,EAMXrI,EAAWV,UAAY7G,GAAemN,SAGtC,MAMMqwC,EAAgB,YANFN,EAAc,KAQlC,IAAK,MAAMrtC,KAAWqtC,EAElB31C,EAAWkzC,WAAW5qC,GAGtBtI,EAAWmzC,iBAAiB,CACxBlkF,GAAIq5C,EACJxH,UAAW,QACX/vD,MAAOklG,IAEXj2C,EAAWmzC,iBAAiB,CACxBlkF,GAAIq5C,EACJxH,UAAW,OACX/vD,MAAO+4F,EAAW2D,aAG1B,GAAIkI,EAAc7oG,OAAS,EAAG,CAC1B,MAAMygD,EAAQ,CACV0K,MAAO09C,EAAc/rG,KAAK,KAC1BwtD,UAAW,OAGV4I,EAAWozC,UAAU7lD,EAAM6J,UAAW7J,EAAM0K,QAE7C+H,EAAWy0C,aAAalnD,EAEhC,CAMKnkD,KAAK4U,IAAI/U,QAAQstE,YAClBntE,KAAK4U,IAAIk4F,YAAYC,gBAAgBn2C,EAE7C,CAEA,OAAOqI,CACX,CAUA+tC,uBAAuBlpG,EAAW+mF,EAASl6B,GACvC,IAAM7sD,IAAa+mF,EAGf,OAFAphF,GAAO7J,MAAO,yCAAwCirF,mBAAyB/mF,gBAExE,KAEX,MAAMmpG,EAAOjtG,KAAK4U,IAAIiR,GAEtB,MAAQ,GAAE8qC,KAAYs8C,KAAQpiB,KAAWoiB,GAC7C,CAYAC,2BAA2B3V,GAAc,IAAA4V,EAAAC,EAAAC,EAAAC,EAAAC,EACrC,MAAMzpG,EAA8B,QAArBqpG,EAAG5V,EAAahgC,aAAK,IAAA41C,OAAA,EAAlBA,EAAoB/pG,KAChCoqG,EAAmC,QAArBJ,EAAG7V,EAAahgC,aAAK,IAAA61C,OAAA,EAAlBA,EAAoBl3C,UACrC1C,EAA6B,QAArB65C,EAAG9V,EAAahgC,aAAK,IAAA81C,OAAA,EAAlBA,EAAoB3yC,KAC/BjM,EAAU,IAAK,IAAI7gD,IAAsB,QAAnB0/F,EAAC/V,EAAahgC,aAAK,IAAA+1C,GAAO,QAAPC,EAAlBD,EAAoBz+C,aAAK,IAAA0+C,OAAP,EAAlBA,EAA2B7vE,KAAIwL,GAAKA,EAAErjB,OAC7D8qC,EAAY,GAAE3wD,KAAK6rG,mBAAmB/nG,IACtC+mF,EAAUr3B,GAAYA,EAAS7sC,MAAM,KAAK,GAGhD,IAAK,MAAMxjB,KAAUsrD,EAAS,CAC1B,MAAMiM,EAAO68B,EAAa1oC,MAAM56B,MAAKtiB,GAAQA,EAAKkU,KAAO1iB,GAA6B,SAAnBwO,EAAK+lD,YAGxE,GAAIgD,EAAM,CACN,MACM+yC,EADoB/yC,EAAK/yD,MAAMgf,MAAM,KACT,GAElC3mB,KAAK0tG,wBAAwB5pG,EAAW6sD,EAAU88C,GAGlD,MAAME,EAAiB7pG,IAAcuY,GAAUwK,MACzC7mB,KAAK+rG,sBAAsBpnF,IAAI8oF,GAC/BztG,KAAK8rG,sBAAsBnnF,IAAI8oF,GAErC/yC,EAAK/yD,MAAQ3H,KAAKgtG,uBAAuBlpG,EAAW2pG,EAASE,EAIjE,MAAO,GAAI9iB,EAAS,CAChB7qF,KAAK0tG,wBAAwB5pG,EAAW6sD,EAAUk6B,GAElD,MAAM8iB,EAAiB7pG,IAAcuY,GAAUwK,MACzC7mB,KAAK+rG,sBAAsBpnF,IAAIkmE,GAC/B7qF,KAAK8rG,sBAAsBnnF,IAAIkmE,GAC/B+iB,EAAgB5tG,KAAKgtG,uBAAuBlpG,EAAW+mF,EAAS8iB,GAEtEpW,EAAa1oC,MAAMv/C,KAAK,CACpBuW,GAAI1iB,EACJu0D,UAAW,OACX/vD,MAAOimG,GAEf,CACJ,CAGArW,EAAa1oC,MAAQ0oC,EAAa1oC,MAAM52C,QAAOtG,GAA2B,SAAnBA,EAAK+lD,aAWxDzpD,GAAQtH,aACJ6mG,IAAmBn+C,GAAeoL,UAAY+yC,IAAmBn+C,GAAeiK,WAE/Ex1D,IAAcuY,GAAUwK,OAAU7mB,KAAK4U,IAAIi5F,qBACxC/pG,IAAcuY,GAAUkL,OAAUvnB,KAAK4U,IAAIk5F,qBAGnDvW,EAAa1oC,WAAQvuD,EACrBi3F,EAAavgC,gBAAa12D,EAElC,CAUAotG,wBAAwB5pG,EAAW6sD,EAAUk6B,GACzC,GAAI/mF,IAAcuY,GAAUwK,OACxB,IAAK7mB,KAAK+rG,sBAAsBhhF,IAAI8/D,GAAU,CAC1C,MAAMkjB,EAAqB,GAAEp9C,KAAY3wD,KAAK+rG,sBAAsB59F,OAEpEnO,KAAK+rG,sBAAsBjmF,IAAI+kE,EAASkjB,EAC5C,OACG,IAAK/tG,KAAK8rG,sBAAsB/gF,IAAI8/D,GAAU,CACjD,MAAMkjB,EAAqB,GAAEp9C,KAAY3wD,KAAK8rG,sBAAsB39F,OAEpEnO,KAAK8rG,sBAAsBhmF,IAAI+kE,EAASkjB,EAC5C,CACJ,CAUAC,mCAAmCz4C,GAC/B,IAAKA,EACD,MAAM,IAAIr0D,MAAM,mCAGpB,MAAM+qG,EAAc,IAAIX,GAAiB/1C,EAAKwC,KAE9C,OAAI/3D,KAAKgsG,+BAA+BC,GAC7B,IAAIt5B,sBAAsB,CAC7BvvE,KAAMmyD,EAAKnyD,KACX20D,IAAKk0C,EAAYN,aAIlBp2C,CACX,CAiBA04C,2BAA2BC,GAAa,IAAAC,EAEpC,IAAKD,IAAgBA,EAAYn2C,MAAQm2C,EAAY9qG,KACjD,OAAO8qG,EAGX,MAAMjC,EAAc,IAAIX,GAAiB4C,EAAYn2C,KAC/Cq2C,EAAqD,QAA3CD,EAAGlC,EAAYR,YAAYpvF,GAAUkL,cAAM,IAAA4mF,OAAA,EAAxCA,EAA2C,GAE1DC,IACApuG,KAAKktG,2BAA2BkB,GAChCpuG,KAAKquG,mBAAmBD,IAG5B,MAAME,EAAcrC,EAAYR,YAAYpvF,GAAUwK,OAEjDrE,GAAAA,mCACD8rF,EAAY/+F,OAAO,GAGvB,IAAK,MAAMqnD,KAAc03C,EACrBtuG,KAAKktG,2BAA2Bt2C,GAChC52D,KAAKquG,mBAAmBz3C,GAU5B,OALK52D,KAAK4U,IAAI25F,mBACVvuG,KAAK8rG,sBAAsB7jG,QAC3BjI,KAAK+rG,sBAAsB9jG,SAGxB,IAAI0qE,sBAAsB,CAC7BvvE,KAAM8qG,EAAY9qG,KAClB20D,IAAKk0C,EAAYN,YAEzB,CAYA0C,mBAAmB9W,GAAc,IAAAiX,EAAAC,EAAAC,EAC7B,MAAMjgD,EAAU,IAAK,IAAI7gD,IAAsB,QAAnB4gG,EAACjX,EAAahgC,aAAK,IAAAi3C,GAAO,QAAPC,EAAlBD,EAAoB3/C,aAAK,IAAA4/C,OAAP,EAAlBA,EAA2B/wE,KAAIwL,GAAKA,EAAErjB,OAC7D/hB,EAA8B,QAArB4qG,EAAGnX,EAAahgC,aAAK,IAAAm3C,OAAA,EAAlBA,EAAoBtrG,KAEtC,IAAKU,EACD,MAAM,IAAI5C,MAAM,8DAGpB,IAAK,MAAMiC,KAAUsrD,EAAS,CAC1B,MAAMkgD,EAAapX,EAAa1oC,MAAM56B,MAAKtiB,GAAQA,EAAKkU,KAAO1iB,GAA6B,SAAnBwO,EAAK+lD,YAMxEk3C,EALOrX,EAAa1oC,MAAM56B,MAAKtiB,GAAQA,EAAKkU,KAAO1iB,GAA6B,SAAnBwO,EAAK+lD,YAAsB/vD,MACxEgf,MAAM,KAAK,GAIAA,MAAM,KACjCkoF,EAAaD,EAAgBA,EAAgBlrG,OAAS,GACtD+e,EAAa8lF,GAA2BvoG,KAAK6rG,gBAAiB/nG,EAAW+qG,GAW/E,GATKF,GAEDpX,EAAa1oC,MAAMv/C,KAAK,CACpBuW,GAAI1iB,EACJu0D,UAAW,OACX/vD,MAAO8a,IAIX3e,IAAcuY,GAAUwK,MAAO,KAAAioF,EAC/B,MAAM97E,EAA8F,QAArF87E,EAAG9uG,KAAK4U,IAAI+/D,sBAAsB1gD,MAAK5R,GAASA,EAAMK,kBAAoBD,WAAW,IAAAqsF,OAAA,EAAlFA,EACZ3N,eAEFnuE,GAEAukE,EAAa1oC,MAAMv/C,KAAK,CACpBuW,GAAI1iB,EACJu0D,UAAW,YACX/vD,MAAOqrB,GAGnB,CACJ,CACJ,ECjZJ,MAAMvpB,IAASC,EAAAA,EAAAA,yCAef,SAASqlG,GAA0Bx3C,EAAOy3C,EAAiBC,GACvD,MAAMh4C,EAAc+3C,EAAgBnpF,GAC9BqpF,EAAkBF,EAAgBt0C,KAClCy0C,EAAmBH,EAAgBI,MAEnCC,EAAkB93C,EAAMkzC,WAAWxzC,GAErCo4C,IAAoBJ,IAGpBI,IAGA93C,EAAMuyC,WAAWuF,GACjB93C,EAAMyzC,qBAAqBqE,IAE/B93C,EAAMwyC,iBAAiB,CACnBlkF,GAAIopF,EACJv3C,UAAW,QACX/vD,MAAOwnG,IAEX53C,EAAMwyC,iBAAiB,CACnBlkF,GAAIopF,EACJv3C,UAAW,OACX/vD,MAAOunG,IAEX33C,EAAM8zC,aAAa,CACfr9C,UAAW,MACXa,MAAQ,GAAEoI,KAAeg4C,MAEjC,CAUe,MAAMK,GAIjB/tG,cAKIvB,KAAKuvG,sBAAwB,IAAIvwF,GACrC,CAOAwwF,iBACIxvG,KAAKuvG,sBAAsBtnG,OAC/B,CAQAwnG,aAAaC,GACTjmG,GAAOgH,MAAM,yBAA0Bi/F,GACvC1vG,KAAKuvG,sBAAwBG,CACjC,CASAC,eAAeC,GACX,IAAI3wC,GAAW,EACf,MAAM4wC,EAAiB,IAAIvE,GAAiBsE,GACtCE,EAAcD,EAAepE,YAAYpvF,GAAUwK,OAEzD,GAAKipF,UAAAA,EAAapsG,OAGd,OAFA+F,GAAOgH,MAAO,sCAAqCm/F,KAE5CA,EAGX,IAAK,MAAMh5C,KAAck5C,EACjB9vG,KAAK+sG,gBAAgBn2C,KACrBqI,GAAW,GAInB,OAAOA,EAAW4wC,EAAelE,WAAaiE,CAClD,CASA7C,gBAAgBn2C,GACZ,GAAIA,EAAWV,YAAc7G,GAAeoL,SACxC,OAAO,EAEX,GAAI7D,EAAWyzC,eAAiB,EAC5B,OAAO,EAEX,MAAM0F,EAAoBn5C,EAAW+zC,uBAErC,IAAK,MAAMh5F,KAAQo+F,EAAmB,CAClC,MAAMr1C,EAAO9D,EAAW8yC,iBAAiB/3F,EAAM,QACzCy9F,EAAQx4C,EAAW8yC,iBAAiB/3F,EAAM,SAChD,IAAIq+F,EAAuBhwG,KAAKuvG,sBAAsB5qF,IAAIhT,GAE1D,IAAKq+F,EAAsB,CAMnBA,EAHgCp5C,EAAW6zC,WAAW94F,IAK/B6gD,GAAAA,eAE3BxyD,KAAKuvG,sBAAsBzpF,IAAInU,EAAMq+F,EACzC,CACAjB,GACIn4C,EACA,CACI/wC,GAAIlU,EACJy9F,QACA10C,QAEJs1C,EACR,CAIA,OAAO,CACX,CAQAC,SAASL,GACL,MAAMC,EAAiB,IAAIvE,GAAiBsE,GACtCE,EAAcD,EAAepE,YAAYpvF,GAAUwK,OAEzD,GAAKipF,UAAAA,EAAapsG,OAGd,OAFA+F,GAAOgH,MAAO,sCAAqCm/F,KAE5CA,EAGX,IAAK,MAAMh5C,KAAck5C,EACrB,GAAIl5C,EAAWV,YAAc7G,GAAeoL,UACrC7D,EAAWyzC,gBACXzzC,EAAW0zC,wBAAyB,CACvC,MAAM4F,EAAYt5C,EAAWqzC,WAAW,OAGxCrzC,EAAWq0C,wBAAwB,OAGnC,IAAK,MAAM/zC,KAAYg5C,EAAW,CAC9B,MAAMjB,EAAU1F,GAAmBryC,GAEnCN,EAAWkzC,WAAWmF,EAC1B,CACJ,CAGJ,OAAOY,EAAelE,UAC1B,ECnMJ,MAAMliG,IAASC,EAAAA,EAAAA,4CASA,MAAMymG,GAOjB5uG,YAAY81E,GACRr3E,KAAKowG,sBACLpwG,KAAKq3E,UAAYA,CACrB,CAOA+4B,sBACIpwG,KAAK4sG,kBAAoB,KACzB5sG,KAAKqwG,gBAAiB,CAC1B,CASAC,eAAer5C,GACX,GAA2B,iBAAhBA,EACP,MAAM,IAAI/1D,MAAM,kCAEpBlB,KAAK4sG,kBAAoB31C,CAC7B,CAMAs5C,uBACI,OAAOrmG,QAAQlK,KAAK4sG,kBACxB,CAaA4D,gCAAgCZ,GAAQ,IAAAa,EACpC,MAAMZ,EAAiB,IAAIvE,GAAiBsE,GACtCh5C,EAAwD,QAA9C65C,EAAGZ,EAAepE,YAAYpvF,GAAUwK,cAAM,IAAA4pF,OAAA,EAA3CA,EAA8C,GAEjE,IAAK75C,EAGD,OAFAntD,GAAOgH,MAAO,GAAEzQ,KAAKq3E,gDAAgDu4B,KAE9DA,EAGX,GAA6B,aAAzBh5C,EAAWV,UAGPl2D,KAAK4sG,mBAAqB5sG,KAAKqwG,eAC/Bz5C,EAAWmzC,iBAAiB,CACxBlkF,GAAI7lB,KAAK4sG,kBACTl1C,UAAW,QACX/vD,MAAQ,YAAW3H,KAAK4sG,sBAG5BnjG,GAAOE,KAAM,GAAE3J,KAAKq3E,8DAErB,CACH,MAAMq5B,EAAiB95C,EAAW2zC,sBAElC,IAAKmG,EAGD,OAFAjnG,GAAOE,KAAM,GAAE3J,KAAKq3E,6DAEbu4B,EAEX,GAAI5vG,KAAK4sG,kBAAmB,CACxBh2C,EAAWs0C,YAAYwF,EAAgB1wG,KAAK4sG,mBAC5C,IAAK,MAAMzoD,KAASyS,EAAWI,WAC3B,GAAwB,QAApB7S,EAAM6J,UAAqB,CAC3B,MAAMiJ,EAAcqyC,GAAiBnlD,GAC/B8qD,EAAU1F,GAAmBplD,GAG/B8S,IAAgBy5C,IAChBvsD,EAAM0K,MACC,GAAE7uD,KAAK4sG,qBAAqBqC,IAE3C,CAER,MACIjvG,KAAK4sG,kBAAoB8D,EAE7B1wG,KAAKqwG,gBAAiB,CAC1B,CAEA,OAAOR,EAAelE,UAC1B,ECtGW,MAAMgF,GASjBpvG,YAAY1B,GACRG,KAAK+yC,SAAWlzC,EAChBG,KAAK4wG,WAAa,IAAI5xF,IAEjBhf,KAAK+yC,SAAS89D,cACf7wG,KAAK+yC,SAAS89D,YAhCI,EAkC1B,CASCC,oBAAoBv5C,GACjB,MAAMgD,EAAMhD,EAAMgD,IACZw2C,EAAc/wG,KAAK4wG,WAAWjsF,IAAI41C,GAClC0b,EAAWj2E,KAAKgxG,gBAAgBz5C,GAChC05C,EAAUjxG,KAAKkxG,kBAAkB35C,EAAO0e,EAAS,GAAI,QACrDk7B,EAAWnxG,KAAKkxG,kBAAkB35C,EAAO0e,EAAS,GAAI,SAE5D1e,EAAM1I,MAAQ,GACd0I,EAAMP,WAAa,GAEnB,IAAK,MAAMrlD,KAAQo/F,EACfx5C,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAIlU,EACJ+lD,UAAW,OACX/vD,MAAOspG,IAEX15C,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAIlU,EACJ+lD,UAAW,QACX/vD,MAAOwpG,IASf,OALA55C,EAAMP,WAAW1nD,KAAK,CAClB0+C,UAAW,MACXa,MAAOkiD,EAAYvwG,KAAK,OAGrB+2D,CACX,CAUA65C,8BAA8B75C,EAAmCN,GAC7D,MAAMm4C,EAAQpvG,KAAKkxG,kBAAkB35C,EAAON,EAAa,SACzD,IAAIyD,EAAO16D,KAAKkxG,kBAAkB35C,EAAON,EAAa,QACtD,MAAMo6C,EAA0BA,CAAC95C,EAAmC5lD,KAChE4lD,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAIlU,EACJ+lD,UAAW,QACX/vD,MAAOynG,IAEX73C,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAIlU,EACJ+lD,UAAW,OACX/vD,MAAO+yD,GACT,EAMDA,IACDA,EAAOnD,EAAMmD,KACQnD,EAAM1I,MAEdzgD,SAAQuD,IACjB4lD,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAIlU,EAAKkU,GACT6xC,UAAW,OACX/vD,MAAO+yD,GACT,KAKV,MAAM42C,EAAW,GAEjB,IAAK,IAAIvrG,EAAI,EAAGA,EAAI/F,KAAK+yC,SAAS89D,YAAc,IAAK9qG,EAAG,CACpD,MAAMwrG,EAAUvxG,KAAKwxG,gBAErBH,EAAwB95C,EAAOg6C,GAC/BD,EAAShiG,KAAKiiG,EAClB,CAQA,OANAh6C,EAAMP,WAAaO,EAAMP,YAAc,GACvCO,EAAMP,WAAW1nD,KAAK,CAClB0+C,UAAW,MACXa,MAAOoI,EAAc,IAAMq6C,EAAS9wG,KAAK,OAGtC+2D,CACX,CAOAi6C,gBAGI,OAAOj2F,KAAKgzB,MAFA,WAEMhzB,KAAKizB,SAC3B,CAUA0iE,kBAAkB35C,EAAmC5lD,EAAc6lD,GAA4C,IAAAi6C,EAAAC,EAC3G,OAAkB,QAAlBD,EAAOl6C,EAAM1I,aAAK,IAAA4iD,GAE0B,QAF1BC,EAAXD,EAAax9E,MAChB6iC,GAAY5wD,OAAO4wD,EAASjxC,MAAQlU,GACjCmlD,EAASY,YAAcF,WAAc,IAAAk6C,OAF1B,EAAXA,EAEuC/pG,KAClD,CAQAqpG,gBAAgBz5C,GAA0D,IAAAo6C,EAAAC,EACtE,MAAMz6C,EAA2B,QAAnBw6C,EAAGp6C,EAAMP,kBAAU,IAAA26C,OAAA,EAAhBA,EAAkB19E,MAAKkwB,GAA6B,QAApBA,EAAM6J,YAEvD,OAAImJ,EACOA,EAAStI,MAAMloC,MAAM,KAAK+W,KAAI/rB,GAAQzL,OAAOyL,KAGzC,QAAfigG,EAAIr6C,EAAM1I,aAAK,IAAA+iD,GAAXA,EAAaluG,OACN,CAAEwC,OAAOqxD,EAAM1I,MAAM,GAAGhpC,KAG5B,IACX,CAWAgsF,sBAAsB1jD,GAClB,IAAKA,IAAgBA,EAAY4J,IAC7B,OAAO5J,EAEX,MAAM9gC,EAAU+N,GAAAA,MAAgB+yB,EAAY4J,KAE5C,IAAK,IAAItf,KAASprB,EAAQorB,MAAO,KAAAq5D,EAAAC,EAAAC,EAE7B,GAAIv5D,EAAMyd,YAAc7G,GAAeoL,UAAYhiB,EAAMyd,YAAc7G,GAAeiK,SAClF,SAIJ,GAAI7gB,EAAMr1C,OAASiZ,GAAUwK,MACzB,SAEJ,MAAM0zC,EAAM9hB,EAAM8hB,IACZ1D,EAAW,IAAIjpD,IAAe,QAAZkkG,EAACr5D,EAAMoW,aAAK,IAAAijD,OAAA,EAAXA,EAAap0E,KAAIo5B,GAAYA,EAASjxC,MACzDkxC,EAAoC,QAA3Bg7C,EAAmB,QAAnBC,EAAGv5D,EAAMue,kBAAU,IAAAg7C,OAAA,EAAhBA,EAAkBtuG,cAAM,IAAAquG,EAAAA,EAAI,EAC9C,IAAI96C,EAGJ,KAAsB,IAAlBJ,EAAS1oD,MAAc0oD,EAAS1oD,KAAO,GAAwB,IAAlB0oD,EAAS1oD,MAA4B,IAAd4oD,GAAxE,CAGA,GAAsB,IAAlBF,EAAS1oD,KAAY,KAAA8jG,EACrBh7C,EAAc/wD,OAAqB,QAAf+rG,EAACx5D,EAAMoW,MAAM,UAAE,IAAAojD,OAAA,EAAdA,EAAgBpsF,GACzC,KAAO,CACH,MAAMqxC,EAAWze,EAAMue,WAAW/iC,MAAKkwB,GAA6B,QAApBA,EAAM6J,YAElDkJ,IACAD,EAAc/wD,OAAOgxD,EAASrI,MAAMloC,MAAM,KAAK,IAEvD,CAEA,GAAI3mB,KAAK4wG,WAAW7lF,IAAIwvC,GACpB9hB,EAAQz4C,KAAK8wG,oBAAoBr4D,OAC9B,CACHA,EAAQz4C,KAAKoxG,8BAA8B34D,EAAOwe,GAClD,MAAMi7C,EAAiBlyG,KAAKgxG,gBAAgBv4D,GAG5Cz4C,KAAK4wG,WAAW9qF,IAAIy0C,EAAK23C,EAC7B,CAnBA,CAoBJ,CAEA,OAAO,IAAIv/B,sBAAsB,CAC7BvvE,KAAM+qD,EAAY/qD,KAClB20D,IAAK38B,GAAAA,MAAgB/N,IAE7B,ECpOG,IAAK8kF,GAAoB,SAApBA,GAAoB,OAApBA,EAAoB,gBAApBA,EAAoB,oBAApBA,EAAoB,0BAApBA,EAAoB,sBAApBA,CAAoB,MAkChC,MAAM1oG,IAASC,EAAAA,EAAAA,2DA2BR,MAAM0oG,GA+ETtiG,8BACQuiG,EACAC,EACA36E,EACA46E,GAGJ,OAAI56E,EAGOw6E,GAAqBxoC,OAI5B17D,GAAQ/C,qCACHqnG,EAGMF,EACAC,EAAsBH,GAAqBK,YAAcL,GAAqBM,UAGlFN,GAAqB74C,SALjB64C,GAAqBxoC,OAS7B0oC,EAAuBF,GAAqBxoC,OAASwoC,GAAqB74C,QACrF,CAaAxpD,8BAA8B6nB,EAAuB46E,GACjD,OAAKtkG,GAAQ/C,qCAKNysB,IAAiB46E,EAClBJ,GAAqBxoC,OAASwoC,GAAqBK,YAJ9CL,GAAqBxoC,MAKpC,CAgBApoE,YAAY2sB,EAAU7D,EAA6BhI,EAAyBxiB,GAKxEG,KAAKkuB,IAAMA,EACXluB,KAAKqqB,WAAaA,EAClBrqB,KAAKqiB,MAAQA,EAEbriB,KAAK0yG,eAAiB,KACtB1yG,KAAK2yG,kBAAoB,KACzB3yG,KAAK4yG,mBAAqB,CAAC,EAC3B5yG,KAAK6yG,WAAa,KAElB7yG,KAAK8yG,6BAA+E,iBAAzCjzG,EAAQizG,6BAC7CjzG,EAAQizG,6BApL2B,IAsLzC9yG,KAAK+yG,kBAAyD,iBAA9BlzG,EAAQkzG,kBAClClzG,EAAQkzG,kBAlLe,KAoL7B/yG,KAAKgzG,eAAmD,iBAA3BnzG,EAAQmzG,eAC/BnzG,EAAQmzG,eAhLW,IAiLzBvpG,GAAOE,KAAM,0BAAyB3J,KAAKgzG,iBAC/C,CAQAC,yBACI,MAAMxwF,EAAaziB,KAAKqiB,MAAMK,gBAE9B,OAAO1iB,KAAKkuB,IAAImkF,qBAAqB5vF,GAC/BziB,KAAKgzG,eACLhzG,KAAKqqB,WAAW6oF,cAAgBlzG,KAAK+yG,kBAAoB/yG,KAAK8yG,4BACxE,CAKAx2F,OAEItc,KAAKmzG,aAAenzG,KAAKozG,yBAAyBhjF,KAAKpwB,MACvDA,KAAKqqB,WAAWX,GAAGrwB,EAAsB2C,WAAYgE,KAAKmzG,cAG1DnzG,KAAKqzG,YAAcrzG,KAAKszG,WAAWljF,KAAKpwB,MACxCA,KAAKqqB,WAAWX,GAAGrwB,EAAsB6D,UAAW8C,KAAKqzG,aAIrDplG,GAAQ/C,uCAERlL,KAAKuzG,iBAAmBvzG,KAAKwzG,gBAAgBpjF,KAAKpwB,MAClDA,KAAKkuB,IAAIH,YAAYmE,GAAAA,QAAAA,kBAA6BlyB,KAAKuzG,kBAEvDvzG,KAAKyzG,mBAAqBzzG,KAAK0zG,kBAAkBtjF,KAAKpwB,MACtDA,KAAKkuB,IAAIH,YAAYmE,GAAAA,QAAAA,oBAA+BlyB,KAAKyzG,oBAGzDzzG,KAAK2zG,yBAA2B3zG,KAAK4zG,wBAAwBxjF,KAAKpwB,MAClEA,KAAKqiB,MAAMqH,GAAGrrB,GAAqC2B,KAAK2zG,0BAGxD3zG,KAAK6zG,yBAA2B7zG,KAAK8zG,wBAAwB1jF,KAAKpwB,MAClEA,KAAKqiB,MAAMqH,GAAGrrB,GAA0C2B,KAAK6zG,2BAGjE7zG,KAAK+zG,2BAA6B/zG,KAAKg0G,0BAA0B5jF,KAAKpwB,MACtEA,KAAKqqB,WAAWX,GAAGrwB,EAAsB8B,0BAA2B6E,KAAK+zG,4BAEzE/zG,KAAKi0G,qBAAuBj0G,KAAKozG,yBAAyBhjF,KAAKpwB,MAC/DA,KAAKkuB,IAAIxE,GAAGwI,GAAAA,QAAAA,oBAA+BlyB,KAAKi0G,qBACpD,CAKA/lG,UACQD,GAAQ/C,uCACRlL,KAAKkuB,IAAItE,eAAesI,GAAAA,QAAAA,kBAA6BlyB,KAAKuzG,kBAC1DvzG,KAAKkuB,IAAItE,eAAesI,GAAAA,QAAAA,oBAA+BlyB,KAAKyzG,oBAE5DzzG,KAAKqiB,MAAMuX,IAAIv7B,GAAqC2B,KAAK2zG,2BAG7D3zG,KAAKqqB,WAAWuP,IAAIvgC,EAAsB8B,0BAA2B6E,KAAK+zG,4BAC1E/zG,KAAKqqB,WAAWuP,IAAIvgC,EAAsB2C,WAAYgE,KAAKmzG,cAC3DnzG,KAAKqqB,WAAWuP,IAAIvgC,EAAsB6D,UAAW8C,KAAKqzG,aAC1DrzG,KAAKkuB,IAAItE,eAAesI,GAAAA,QAAAA,oBAA+BlyB,KAAKi0G,sBAE5Dj0G,KAAKq5B,eACLr5B,KAAKk0G,yBACLl0G,KAAKm0G,mCAAmCr4F,KAAKC,OAC7C/b,KAAKozG,0BACT,CAMAgB,uBAAuBC,GACnB,GAAIr0G,KAAKqiB,MAAMiyF,4BAA8BD,EAAW,CAEpD,MAAM5xF,EAAaziB,KAAKqiB,MAAMK,gBAE9B1iB,KAAKqiB,MAAMkyF,yBAAyBF,GAEpC5qG,GAAOgH,MAAO,+BAA8BqL,KAAKC,UAAU0G,MAAe4xF,KAG1ExsF,GAAWuE,QACPzjB,KAAKC,UAAU,CACXid,GAAI,yBACJxD,MAAOI,EACPhO,OAAQ4/F,KAIhBr0G,KAAKqiB,MAAMhZ,KAAKhL,GAAiD2B,KAAKqiB,MAAOgyF,EACjF,CACJ,CAMAh7E,eACQr5B,KAAK6yG,aACL/pG,OAAOuwB,aAAar5B,KAAK6yG,YACzB7yG,KAAK6yG,WAAa,KAE1B,CAKAqB,yBACIl0G,KAAK2yG,kBAAoB,IAC7B,CAUAJ,qBACI,IAAKtkG,GAAQ/C,qCACT,OAAO,EAGX,MAAMspG,EAAkBx0G,KAAKqiB,MAAMg/E,qBAC7BsR,EAAoB3yG,KAAK2yG,kBACzBvmE,EAAUpsC,KAAKizG,yBAErB,OAAOuB,GAAgD,iBAAtB7B,GAAmC72F,KAAKC,MAAQ42F,GAAsBvmE,CAC3G,CAKAgnE,2BACI,MAAM3wF,EAAaziB,KAAKqiB,MAAMK,gBACxB+xF,EAAYz0G,KAAKqqB,WAAW6oF,cAC5BwB,EAAsB10G,KAAK20G,uBAC3BC,EAA+C,IAA/B50G,KAAKqqB,WAAWwqF,WAIhCl9E,EAAe33B,KAAKqiB,MAAMmL,WAAaonF,EACvCrC,EAAqBvyG,KAAKuyG,qBAC1BF,EAAuBryG,KAAKkuB,IAAImkF,qBAAqB5vF,GAErDqyF,EACAL,EACIrC,GAAyB2C,uBACvBp9E,EACA46E,GACFH,GAAyB4C,uBACvB3C,EACAqC,EACA/8E,EACA46E,GAGRuC,IAAa3C,GAAqBM,WAClCzyG,KAAKi1G,uBAGTxrG,GAAOgH,MACF,8BAA6BgS,sBAC1BkV,yBACA46E,eACAkC,8BACApC,iCACAryG,KAAKqiB,MAAMiyF,gCAAgCQ,KAEnD,MAAMI,EAAqBl1G,KAAK4yG,oBAAsB,CAAC,EAIvD,KAAM,QAASsC,MACN,oBAAqBA,IACvBA,EAAmB5vF,MAAQmvF,GAC3BS,EAAmBC,kBAAoBL,EAAU,CAEpD,MAAMM,EAAQt5F,KAAKC,MAEnB/b,KAAKm0G,mCAAmCiB,GAExCp1G,KAAK4yG,mBAAqB,IACnBsC,EACHC,gBAAiBL,EACjBxvF,IAAKmvF,EACLY,UAAWD,GAKT,cAAep1G,KAAK4yG,qBACtB5yG,KAAK4yG,mBAAmB5/E,UAAYhzB,KAAKqiB,MAAM8+E,eAEvD,CACAnhG,KAAKo0G,uBAAuBU,EAChC,CAOAX,mCAAmCiB,GAC/B,MAAME,EAAuBt1G,KAAK4yG,mBAE9B0C,GACG,cAAeA,GACf,cAAeA,GACf,oBAAqBA,GACrB,QAASA,IACZA,EAAqB3tG,MAAQytG,EAAQE,EAAqBD,UAC1DxtF,GAAWmF,c7F3GwB,eAAE9pB,EAAkBO,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAAQ,CAC5EL,KAAM5B,GAAgBC,iBACtB0B,OAAQ,yBACRF,OAAQ,WACRC,aACH,C6FsGoCqyG,CAAgCD,IAEjE,CAUAtB,4BAGiC,IAFzBwB,EAAiC/xG,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GACpCgyG,EAAkChyG,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GACrC0gB,EAAiB1gB,UAAAC,OAAA,EAAAD,UAAA,QAAAnD,EAErB,MAAMmiB,EAAaziB,KAAKqiB,MAAMK,gBAKzBzU,GAAQ/C,sCACTlL,KAAKozG,2BAGLoC,EAAwBzlE,SAASttB,KACjCziB,KAAKqiB,MAAMqzF,yCACX11G,KAAKi1G,uBACLhnG,GAAQ/C,sCAAwClL,KAAKozG,4BAGrDqC,EAAyB1lE,SAASttB,KAElCziB,KAAKqiB,MAAMszF,qCAAqCxxF,GAChDlW,GAAQ/C,sCAAwClL,KAAKozG,2BAE7D,CAKA6B,uBACI,MAAMW,EAAS51G,KAAK0yG,eAEhBkD,IACAv8E,aAAau8E,GACb51G,KAAK0yG,eAAiB,KAE9B,CAWAiC,uBACI,MAAMkB,EAAmC71G,KAAKqiB,MAAMyzF,uCAEpD,SAAID,GACI/5F,KAAKC,MAAQ85F,GAzcK,OA+cX71G,KAAK0yG,iBAGhB1yG,KAAK0yG,eAAiBj5E,YAAW,IAAMz5B,KAAKozG,4BAldtB,OAqdnB,EACX,CAGA2C,gBAAgB1zF,GACZ,OAAOA,EAAMK,kBAAoB1iB,KAAKqiB,MAAMK,eAChD,CAMA4wF,WAAWztF,GACH7lB,KAAKqiB,MAAMU,qBAAuB8C,IAClC7lB,KAAKm0G,mCAAmCr4F,KAAKC,OAC7C/b,KAAK4yG,mBAAqB,CAAC,EAEnC,CAOAY,gBAAgBnxF,GACZ,IAAKriB,KAAK+1G,gBAAgB1zF,GACtB,OAGJ,MAAMI,EAAaJ,EAAMK,gBAKzB,GAHAjZ,GAAOgH,MAAO,6BAA4BgS,IAAc3G,KAAKC,OAE7D/b,KAAK2yG,kBAAoB72F,KAAKC,OACzBsG,EAAMmL,UAAW,CAGlBxtB,KAAKq5B,eAGL,MAAM+S,EAAUpsC,KAAKizG,yBAErBjzG,KAAK6yG,WAAa/pG,OAAO2wB,YAAW,KAChChwB,GAAOgH,MAAO,4BAA2BgS,0BAAmC2pB,QAC5EpsC,KAAKq5B,eACLr5B,KAAKozG,0BAA0B,GAChChnE,EACP,CACJ,CAOAsnE,kBAAkBrxF,GACd,IAAKriB,KAAK+1G,gBAAgB1zF,GACtB,OAGJ,MAAMI,EAAaziB,KAAKqiB,MAAMK,gBAE9BjZ,GAAOgH,MAAO,+BAA8BgS,IAAc3G,KAAKC,OAE/D/b,KAAKq5B,eACLr5B,KAAKk0G,yBAELl0G,KAAKozG,0BACT,CAQAQ,wBAAwBvxF,GACpB,IAAKriB,KAAK+1G,gBAAgB1zF,GACtB,OAGJ,MAAMI,EAAaziB,KAAKqiB,MAAMK,gBAE9BjZ,GAAOgH,MAAO,8CAA6CgS,IAAcJ,EAAMmL,WAE/ExtB,KAAKozG,0BACT,CAOAU,wBAAwB1wG,GACpB,MAAMgyG,EAAQt5F,KAAKC,MAEnB/b,KAAKm0G,mCAAmCiB,GAExCp1G,KAAK4yG,mBAAqB,IACnB5yG,KAAK4yG,oBAAsB,CAAC,EAC/B5/E,UAAW5vB,EACXiyG,UAAWD,EAEnB,EAGJ,YC9nBM3rG,GAASgG,EAAAA,MAAAA,6CAETyiB,GAAYziB,EAAQ,MAE1B,IAAIumG,IAA2B,EAC3BC,IAA2B,EAM/B,MAAMC,GAAkB,CAAE,QAAS,iBAAkB,QAAS,SAO/C,MAAMC,WAAyBzW,GAoB1Cn+F,YACQ2sB,EACA7D,EACA+rF,EACA1pG,EACA2V,EACAve,EACAkvB,EACArhB,EACAga,EACA1W,EACAwN,GAaJ,GAZA7a,MACIyiB,EACA3d,EACA2V,GACA,QAGAve,EACAkvB,GACJhzB,KAAKkuB,IAAMA,EAGS,iBAATvc,EACP,MAAM,IAAI+2D,UAAW,QAAO/2D,qBAEhC3R,KAAK2R,KAAOA,EACZ3R,KAAKo2G,gBAAkBA,EACvBp2G,KAAK2rB,MAAQA,EACb3rB,KAAKiV,MAAQA,EACbjV,KAAKsiG,YAAc7/E,EACnBziB,KAAKq2G,sBAAwB,KAC7Br2G,KAAKs2G,0BAA4B,KAQjCt2G,KAAKu2G,kCAAoC,KAEzCv2G,KAAKyL,iBAAmBzL,KAAK0pB,GAAK1pB,KAAKw2G,kBAAkBpmF,KAAKpwB,MAC9DA,KAAK25B,oBAAsB35B,KAAK45B,IAAM55B,KAAKy2G,qBAAqBrmF,KAAKpwB,MAErEyJ,GAAOgH,MAAO,6BAA4BzQ,QAK1CA,KAAK02G,aAAe/qF,EAGhB3rB,KAAKkuB,KAAOluB,KAAKqiB,OACjBriB,KAAK22G,qBAET32G,KAAK42G,mBAAqB,CAAC,EAC3BV,GAAgB9nG,SAAQK,IACpBzO,KAAK42G,mBAAmBnoG,GAASzO,KAAK62G,uBAAuBzmF,KAAKpwB,KAAMyO,EAAM,GAEtF,CAQAkoG,qBACI32G,KAAKqiB,MAAM5W,iBAAiB,QAAQ,IAAMzL,KAAK82G,iBAC/C92G,KAAKqiB,MAAM5W,iBAAiB,UAAU,IAAMzL,KAAK+2G,mBACjD/2G,KAAKqiB,MAAM5W,iBAAiB,SAAS,KACjChC,GAAOgH,MAAO,mBAAkBqL,KAAKC,WAAW/b,OAAO,GAE/D,CASAw2G,kBAAkB/nG,EAAOJ,GACrBzG,MAAMmmB,YAAYtf,EAAOJ,GAErBI,IAAUpQ,IACP2B,KAAKg3G,cAAc34G,MAClB2B,KAAKs2G,4BAETt2G,KAAKi3G,4BACLxtG,GAAOgH,MAAO,wCAAuCzQ,KAAKsiG,eAElE,CAQAmU,qBAAqBhoG,EAAOJ,GACxBzG,MAAMgiB,eAAenb,EAAOJ,GAExBI,IAAUpQ,IACN2B,KAAKg3G,cAAc34G,MAEvB2B,KAAKk3G,+BACLztG,GAAOgH,MAAO,qCAAoCzQ,KAAKsiG,eAE/D,CASAwU,eACIrtG,GAAOgH,MAAO,kBAAiBqL,KAAKC,WAAW/b,QAE/CA,KAAKkuB,IAAIzT,aAAapR,KAAK6oB,GAAUilF,kBAAmBn3G,KAC5D,CASA+2G,iBACIttG,GAAOgH,MAAO,oBAAmBqL,KAAKC,WAAW/b,QAEjDA,KAAKkuB,IAAIzT,aAAapR,KAAK6oB,GAAUklF,oBAAqBp3G,KAC9D,CAOAkO,UAGI,OAFAlO,KAAKk3G,+BAEEtvG,MAAMsG,SACjB,CAMAmpG,QAAQ1vG,GACA3H,KAAK2rB,QAAUhkB,IAIfA,IACA3H,KAAK02G,cAAe,GAIpB12G,KAAK0M,SACL1M,KAAK0M,OAAOif,MAAQhkB,GAGxB3H,KAAK2rB,MAAQhkB,EACb3H,KAAKqJ,KAAKhL,GAAqC2B,MACnD,CAOAwtB,UACI,OAAOxtB,KAAK2rB,KAChB,CAQA5I,mBACI,OAAO/iB,KAAKo2G,eAChB,CAKAxgG,UACI,OAAO,CACX,CAQA0hG,UACI,OAAOt3G,KAAK2R,IAChB,CAQA+Q,gBACI,OAAO1iB,KAAKsiG,WAChB,CAOA9rB,SAAS7oB,GACL3tD,KAAKo2G,gBAAkBzoD,EACvB3tD,KAAKqJ,KAAKhL,GAAsCsvD,EACpD,CAOA4oB,cAAcx2E,GACVC,KAAKsiG,YAAcviG,CACvB,CAOA02E,cAAcrzE,GACNpD,KAAKgzB,YAAc5vB,IAGvBpD,KAAKgzB,UAAY5vB,EACjBpD,KAAKqJ,KAAKhL,GAA0C+E,GACxD,CAKAm0G,gBACI,IAAKv3G,KAAKqqB,WAAWuD,KACjB,OAGJ,MAAMxqB,EAAOpD,KAAK+yB,eAAiB,QAAU,QAEvChX,EAAMjT,OAAO4pB,YAAY3W,MAE/B7S,QAAQ+G,IAAK,iBAAgB7M,OAAW2Y,GACxC/b,KAAKqqB,WAAWmtF,qBAAsB,GAAEp0G,YAAiB2Y,EAKzD,MAAM07F,EAAW3uG,OAAOumB,gBAAgB,2BAClCqoF,EAAS5uG,OAAOumB,gBAAgB,yBAChCsoF,EACCh0F,MAAM+zF,IAAY/zF,MAAM8zF,GAAgC,EAApBC,EAASD,EAI9CG,EAAO77F,GACN/b,KAAKqqB,WAAWmtF,qBAAqB,oBAClCx3G,KAAKqqB,WAAWmtF,qBAAqB,eACzCG,E9FkNmBz0G,M8FhNzBlD,KAAKqqB,WAAWmtF,qBAAsB,GAAEp0G,UAAew0G,EACvD1uG,QAAQ+G,IAAK,eAAc7M,OAAWw0G,GAEtC/vF,GAAWmF,e9F6Mc9pB,E8F5MrB,CACI,WAAcE,EACduoB,MAAO3rB,KAAK02G,aACZ/uG,MAAOiwG,G9FyMkCv0G,GAAmC,OAAQH,I8FtMhG,CASAi9F,mBAAmBC,GACV4V,IAA4Bh2G,KAAKuiB,gBAC9B0zF,IAA4Bj2G,KAAK+yB,iBAIrC/yB,KAAKuiB,iBACLyzF,IAA2B,GAE3Bh2G,KAAK+yB,iBACLkjF,IAA2B,GAG/B7V,EAAU30F,iBAAiB,UAAWzL,KAAKu3G,cAAcnnF,KAAKpwB,OAClE,CAQAsgG,eAAeF,GACX8V,GAAgB9nG,SAAQK,IACpB2xF,EAAU30F,iBAAiBgD,EAAOzO,KAAK42G,mBAAmBnoG,GAAO,GAEzE,CAQA8xF,eAAeH,GACX8V,GAAgB9nG,SAAQK,IACpB2xF,EAAUzmE,oBAAoBlrB,EAAOzO,KAAK42G,mBAAmBnoG,GAAO,GAE5E,CAOAooG,uBAAuBzzG,GACnBqG,GAAOgH,MAAO,GAAErN,sDAAyDpD,OAC7E,CAOA63G,aACI,MAAM,QAAEzjF,EAAO,MAAEzI,EAAK,WAAEmoB,GAAe9zC,KAAKqiB,MAE5C,MAAQ,eAAcyxB,aAAsBnoB,eAAmByI,GACnE,CAKA6iF,4BACI,MAAMtjF,EAAS3zB,KAAKqqB,WAAWxqB,QAAQ8zB,OAEvC3zB,KAAKq2G,sBAAwBlE,GAAqBxoC,OAElD3pE,KAAKs2G,0BAA4B,IAAIlE,GACjCpyG,KAAKkuB,IACLluB,KAAKqqB,WACLrqB,KACA,CAGI+yG,kBAAmBp/E,EAAOmkF,6BAC1B9E,eAAgBr/E,EAAOokF,8BACvBjF,6BAA8Bn/E,EAAOqkF,mCAG7Ch4G,KAAKs2G,0BAA0Bh6F,QAO9Btc,KAAKs2G,0BAA0B/D,sBACzBvyG,KAAKkuB,IAAIzT,aAAapR,KACrBhL,GACA2B,KACAA,KAAKq2G,sBACjB,CAKAa,+BACQl3G,KAAKs2G,4BACLt2G,KAAKs2G,0BAA0BpoG,UAC/BlO,KAAKs2G,0BAA4B,KACjCt2G,KAAKq2G,sBAAwB,KAErC,CAOA9B,yBAAyB9/F,GACrBzU,KAAKq2G,sBAAwB5hG,CACjC,CAUA6/F,0BACI,OAAOt0G,KAAKq2G,qBAChB,CAKAX,yCACI11G,KAAKu2G,kCAAoC,IAC7C,CAOAZ,qCAAqCxxF,GACjCnkB,KAAKu2G,kCAAoCpyF,CAC7C,CAOA2xF,uCACI,OAAO91G,KAAKu2G,iCAChB,CAMAlnE,WACI,MAAQ,uBAAsBrvC,KAAK+iB,6BAA6B/iB,KAAKytB,oBACjEztB,KAAKs3G,mBAAmBt3G,KAAKiV,sBAAsBjV,KAAKsiG,yBAAyBtiG,KAAK63G,gBAC9F,EC5eJ,MAAMpuG,IAASC,EAAAA,EAAAA,sCAQFuuG,GAAa,KAIbC,GAAiB,CARN,IACA,IACA,KAYjB,MAAMC,GAMT52G,YAAYyP,GAAgB,IAAAonG,EAAAC,EAAAC,EACxBt4G,KAAKsR,GAAKN,EACV,MAAMunG,EAAiC,QAAlBH,EAAGp4G,KAAKsR,GAAGzR,eAAO,IAAAu4G,GAAc,QAAdC,EAAfD,EAAiBxqC,oBAAY,IAAAyqC,OAAd,EAAfA,EAA+BG,iBACjDC,EAAmB,CACrBC,IA1BO,IA2BPC,SA1BO,IA2BPC,KAAMX,GACNY,OAAQZ,IAMZj4G,KAAK84G,cAAgBP,QAAAA,EAAmBE,EACxCz4G,KAAK+4G,iBAAyC,QAAzBT,EAAGt4G,KAAK84G,cAAcE,WAAG,IAAAV,EAAAA,EAAIt4G,KAAK84G,aAC3D,CAOAG,oBAAoBC,GAChB,OAAIl5G,KAAKsR,GAAGk7F,iBAAmB0M,EAAWnmF,eAC/B/yB,KAAKm5G,yBAAyBD,EAAW/X,gBAG7C+X,EAAWnmF,eACZ,CAAE,CACAgmD,OAAQ/4E,KAAKsR,GAAG4nE,oBAChBkgC,WAAYp5G,KAAK84G,cAAcF,OAEjC,CAAE,CAAE7/B,OAAQ/4E,KAAKsR,GAAG2nE,qBAC9B,CAiBAkgC,yBAAyBnmF,GACrB,MAAMqmF,EAAkBrmF,IAAcC,GAAU,UAAVA,SAAqBjzB,KAAK+4G,iBAAiBF,OAC3E74G,KAAK+4G,iBAAiBF,OAAS74G,KAAK+4G,iBAAiBH,KAE3D,MAAO,CACH,CACI7/B,OAAQ/4E,KAAKsR,GAAG4nE,oBAChBkgC,WAAYnrG,GAAQtH,YAAc0yG,EAAkBr5G,KAAK+4G,iBAAiBL,IAC1E9jE,IA9EQ,IA+ER0/C,sBAAuBrmF,GAAQtH,YA1EhB,EACA,GA2EnB,CACIoyE,OAAQ/4E,KAAKsR,GAAG4nE,oBAChBkgC,WAAYp5G,KAAK+4G,iBAAiBJ,SAClC/jE,IAnFQ,IAoFR0/C,sBA9Ee,GAgFnB,CACIvb,OAAQ/4E,KAAKsR,GAAG4nE,oBAChBkgC,WAAYnrG,GAAQtH,YAAc3G,KAAK+4G,iBAAiBL,IAAMW,EAC9DzkE,IAxFQ,IAyFR0/C,sBAAuBrmF,GAAQtH,YArFhB,EADA,GAyF3B,CAUA2yG,0BAA0BnrD,GACtB,MAAMorD,EAAYn+E,GAAAA,MAAgB+yB,EAAY4J,KA4B9C,OA1BAwhD,EAAU9gE,MAAMrqC,SAAQmpD,IACpB,GAAIA,EAAMn0D,OAASiZ,GAAUkL,MACzB,OAEJ,IAAKgwC,EAAMP,aAAeO,EAAMP,WAAWtzD,OACvC,OAEJ,IAAI81G,EAAiB,GAErB,MAAM3qD,EAAQ,IAAIjhD,IAElB2pD,EAAMP,WAAWt5B,KAAIymB,GACjBA,EAAM0K,MACDloC,MAAM,KACN1O,OAAO/N,SACPkE,SAAQuD,GAAQk9C,EAAM/5C,IAAInD,OAGnCk9C,EAAMzgD,SAAQuD,IACV,MAAM88C,EAAU8I,EAAM1I,MAAM52C,QAAO9U,GAAUA,EAAO0iB,GAAGwpB,aAAe19B,IAEtE6nG,EAAiBA,EAAe7+C,OAAOlM,EAAQ,IAEnD8I,EAAM1I,MAAQ2qD,CAAc,IAGzB,IAAI7mC,sBAAsB,CAC7BvvE,KAAM+qD,EAAY/qD,KAClB20D,IAAK38B,GAAAA,MAAgBm+E,IAE7B,CASAE,gBAAgB31G,GAA8B,IAAnBo1G,EAAUz1G,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,KAKpC,OAJoBy1G,SAAAA,EAAY72F,OAAS62F,EAAW3vF,oBAC9CvpB,KAAKsR,GAAGN,eAAe2nE,kBAAkB1kD,MAAK5O,IAAC,IAAAq0F,EAAAC,EAAA,OAAY,QAARD,EAAAr0F,EAAEqW,cAAM,IAAAg+E,GAAO,QAAPC,EAARD,EAAUr3F,aAAK,IAAAs3F,OAAP,EAARA,EAAiB9zF,MAAOqzF,EAAWnY,YAAY,IAClG/gG,KAAKsR,GAAGN,eAAe2nE,kBAAkB1kD,MAAK5O,IAAC,IAAAu0F,EAAAC,EAAA,OAAc,QAAVD,EAAAv0F,EAAE8V,gBAAQ,IAAAy+E,GAAO,QAAPC,EAAVD,EAAYv3F,aAAK,IAAAw3F,OAAP,EAAVA,EAAmBjzF,QAAS9iB,CAAS,GAGlG,CAYAg2G,kCAAkCvkD,GAG9B,GAAItnD,GAAQhC,6BACR,OAAOspD,EAEX,MAAMwC,EAAM38B,GAAAA,MAAgBm6B,EAAKwC,KAC3B19B,EAAM09B,EAAItf,MAAMo/B,WAAU9jB,GAASA,EAAM3wD,OAASiZ,GAAUwK,QAElE,GAAIkxC,EAAItf,MAAMpe,GAAK4hC,OAASlE,EAAItf,MAAMpe,GAAK0/E,cAAgBhiD,EAAItf,MAAMpe,GAAKoyE,WAatE,OAVA10C,EAAItf,MAAMrqC,SAAQ,CAAC2lD,EAAOhuD,KAClBguD,EAAM3wD,OAASiZ,GAAUwK,OAAS9gB,IAAMs0B,IACxC09B,EAAItf,MAAM1yC,GAAGk2D,UAAO37D,EACpBy3D,EAAItf,MAAM1yC,GAAG0mG,eAAYnsG,EAGzBy3D,EAAItf,MAAM1yC,GAAGg0G,kBAAez5G,EAChC,IAGG,IAAIqyE,sBAAsB,CAC7BvvE,KAAMmyD,EAAKnyD,KACX20D,IAAK38B,GAAAA,MAAgB28B,KAK7BA,EAAItf,MAAMpe,GAAK4hC,KAAO,CAClB,CACIp2C,GAnMQ,IAoMRqwC,UAAW,QAEf,CACIrwC,GAtMQ,IAuMRqwC,UAAW,QAEf,CACIrwC,GAzMQ,IA0MRqwC,UAAW,SAOnB,MAAM8jD,EAAgB/rG,GAAQtH,aAAesH,GAAQ5G,qBAAqB,IACnE,QAAO6wG,GAAe13G,KAAK,OAC3B,YAAW03G,GAAe13G,KAAK,OAOtC,OAJAu3D,EAAItf,MAAMpe,GAAK0/E,aAAe,CAC1BpyG,MAAOqyG,GAGJ,IAAIrnC,sBAAsB,CAC7BvvE,KAAMmyD,EAAKnyD,KACX20D,IAAK38B,GAAAA,MAAgB28B,IAE7B,CAQAga,SAASmnC,EAAYp3E,GACjB,MAAMzf,EAAQ62F,EAAWlY,WAEzB,GAAIl/D,EAAa,CACb,MAAM+6B,EAAU,GAEZq8C,EAAW3vF,qBACXszC,EAAQvtD,KAAK4pG,EAAW3vF,qBAK5B,MAAM0wF,EAAkB,CACpB/jD,UAAW7G,GAAemN,SAC1BK,UACAu3B,cAAe,IAGdnmF,GAAQtH,cACTszG,EAAgB7lB,cAAgBp0F,KAAKi5G,oBAAoBC,IAE7Dl5G,KAAKsR,GAAGN,eAAegjF,eAAe3xE,EAAO43F,EACjD,MAIIj6G,KAAKsR,GAAGN,eAAe+gE,SAAS1vD,EAExC,CAUA63F,8BAA8BC,EAAiBC,GAC3C,MAAMlB,EAAaiB,EAAgBnZ,YAC7B,OAAEp+E,GAAWs2F,EAAWvmB,cACxB0nB,EAAuBr6G,KAAKm5G,yBAAyBgB,EAAgBhZ,gBAiC3E,OAhCuBkZ,EACtB38E,KAAI48E,GAAY13F,EAAS03F,EAAShmB,wBAClC52D,KAAI,CAACrX,EAAagU,KAAQ,IAAAkgF,EACvB,IAAIxhC,EAASohC,EAAgBhZ,iBAAmBluE,GAAU,UAAVA,QAM1CmnF,EAAY,GArRC,KAqR6B,QAAzBG,EAAAF,EAAqBhgF,UAAI,IAAAkgF,OAAA,EAAzBA,EAA2BjmB,wBAExCjuE,GAAe+zF,EAkBzB,OARID,EAAgBhZ,iBAAmBluE,GAAU,UAAVA,SAChCjzB,KAAKsR,GAAGkpG,wBACRx6G,KAAKsR,GAAGw8D,oBACP7/D,GAAQnE,iBArSG,IAsSZuwG,EAAqBhgF,GAAKi6D,wBAC7Bvb,GAAS,GAGNA,CAAM,GAIrB,CASA0hC,2BAA2BN,GAAiB,IAAAO,EAAAC,EACxC,MAAM3nF,EAAYmnF,EAAgBhZ,eAC5ByZ,GAAqC,QAAfF,EAAA16G,KAAKsR,GAAGzR,eAAO,IAAA66G,GAAc,QAAdC,EAAfD,EAAiB9sC,oBAAY,IAAA+sC,OAAd,EAAfA,EAA+BE,iBAjUxC,IAkUbC,EAAoBX,EAAgBhZ,iBAAmBluE,GAAU,UAAVA,SACtDjzB,KAAKsR,GAAGkpG,yBACPvsG,GAAQnE,gBAgBhB,OAf0B9J,KAAKm5G,yBAAyBgB,EAAgBhZ,gBACvEzjE,KAAI48E,GACeQ,EACVF,EAKA5nF,IAAcC,GAAU,UAAVA,SAAqBhlB,GAAQpE,oBAAsB7J,KAAKsR,GAAGw8D,uBACrExtE,EACAg6G,EAASlB,YAM3B,CASA2B,8BAA8BZ,GAAiB,IAAAa,EAC3C,MAAM9B,EAAaiB,EAAgBnZ,YAC7B,OAAEp+E,GAAWs2F,EAAWvmB,cACxBsoB,EAAcj7G,KAAKsR,GAAGwrB,mBAAmBq9E,EAAgBnZ,YAC/D,IAAIlvC,EAAY,EAEhB,IAAKmpD,EACD,OAAOnpD,EAEX,MAAMopD,EAAaD,EAAYzmB,gBAE/B,GAAK0mB,SAAqB,QAAXF,EAAVE,EAAYzmB,iBAAS,IAAAumB,IAArBA,EAAuBt3G,OACxB,OAAOouD,EAEX,IAAK,MAAMwoD,KAAYY,EAAWzmB,UAC9B,GAAIymB,EAAWzmB,UAAU6lB,GAAUvhC,OAAQ,CACvC,MAAMub,EACAt0F,KAAKsR,GAAGk7F,gBACJxsG,KAAKm5G,yBAAyBgB,EAAgBhZ,gBAAgBmZ,GAAUhmB,sBACxE4mB,EAAWzmB,UAAU6lB,GAAUhmB,sBAEzCxiC,EAAYv2C,KAAKC,IAAIs2C,EAAWlvC,EAAS0xE,EAC7C,CAGJ,OAAOxiC,CACX,CASA+mB,aAAaM,EAAUC,GAAU,IAAA+hC,EAAAC,EAC7B,MAAMt3G,EAA+B,QAAtBq3G,EAAG/hC,aAAQ,EAARA,EAAU3rD,iBAAS,IAAA0tF,EAAAA,EAAIhiC,aAAQ,EAARA,EAAU1rD,UAC7CmP,EAAc58B,KAAKsR,GAAG0V,eAAeljB,GACrCue,EAA4B,QAAvB+4F,EAAGhiC,aAAQ,EAARA,EAAU4nB,kBAAU,IAAAoa,EAAAA,EAAI,KAChCC,EAAmB74F,GAAAA,oCAClBoa,aAAW,EAAXA,EAAal5B,UACZy1E,GACDC,IACCx8C,EAAY3I,MAAK5O,GAAKA,IAAM+zD,IACpC,IAAImV,EAGJ,GAAIpV,IAAaA,EAAS3rD,UACtB+gE,EAAcvuF,KAAKsR,GAAGN,eAAe2nE,kBAAkB1kD,MAAK5O,GAAKA,EAAEqW,OAAOrZ,QAAU82D,EAAS6nB,kBAK1F,GAAIqa,EACP9sB,EAAcvuF,KAAKsR,GAAGN,eAAe2nE,kBAAkB1kD,MACnD5O,GAAKA,EAAE8V,SAAS9Y,MAAMuE,OAAS9iB,GAC5BuhB,EAAE6wC,YAAc7G,GAAeoL,WAG7Bz6D,KAAKsR,GAAG2D,OAASoQ,EAAEuzD,mBAAqBvpB,GAAeoL,UACpDp1C,EAAEuzD,mBAAqBvpB,GAAeiK,WAAaj0C,EAAEi2F,eAI9D,KAAAC,EACHhtB,EAAcvuF,KAAKsR,GAAGN,eAAe2nE,kBAAkB1kD,MAAK5O,GAAKA,EAAE8V,SAAS9Y,MAAMuE,OAAS9iB,IAC3F,MAAM2e,EAAsC,QAA5B84F,EAAGniC,aAAQ,EAARA,EAAU12D,uBAAe,IAAA64F,EAAAA,EAAIpiC,aAAQ,EAARA,EAAUz2D,gBAE1D,GAAID,EAAY,CACZ,MAAMosF,EAAajG,GAA6BnmF,GAEhD,GAAIziB,KAAKsR,GAAG2D,MACRs5E,EAAcvuF,KAAKsR,GAAGN,eAAe2nE,kBAChC1gE,QAAOoN,GAAKA,EAAE8V,SAAS9Y,MAAMuE,OAAS9iB,IAAW+qG,QACnD,GAAI11B,EAAU,CACjB,MAAMqiC,EAAiBx7G,KAAKsR,GAAGmqG,2BAA2B92F,IAAIw0D,EAASsoB,OAEvElT,EAAcvuF,KAAKsR,GAAGN,eAAe2nE,kBAAkB1kD,MAAK5O,GAAKA,EAAEk1C,MAAQihD,GAC/E,MAAW3M,IACPtgB,EAAcvuF,KAAKsR,GAAGN,eAAe2nE,kBAC5B1gE,QAAOoN,GAAKA,EAAE8V,SAAS9Y,MAAMuE,OAAS9iB,GAChCuhB,EAAE6wC,YAAc7G,GAAeoL,WAAUo0C,GAEhE,CACJ,CACA,OAAKtgB,GAIL9kF,GAAOgH,MAAO,GAAEzQ,KAAKsR,gBAAgB6nE,UAAiBC,KAE/CmV,EAAY7yD,OAAOm9C,aAAax2D,GAClCtC,MAAK,IAAM1L,QAAQC,QAAQi6E,MANrBl6E,QAAQE,OACX,IAAIrT,MAAO,kDAAiDi4E,WAAkBC,KAM1F,CAQAsiC,aAAar5F,GAAO,IAAAs5F,EAAAC,EAChB,MAAM93G,EAAYue,EAAMoL,UAClB8gE,EAAcvuF,KAAKy5G,gBAAgB31G,EAAWue,GAC9C64F,EAAa3sB,SAAmB,QAARotB,EAAXptB,EAAa7yD,cAAM,IAAAigF,OAAR,EAAXA,EAAqBnnB,gBAKxC,GAAK0mB,SAAqB,QAAXU,EAAVV,EAAYzmB,iBAAS,IAAAmnB,IAArBA,EAAuBl4G,OACxB,OAAO2Q,QAAQC,UAEnB4mG,EAAWzmB,UAAYz0F,KAAKi5G,oBAAoB52F,GAChD,MAAM8W,EAAUo1D,EAAY7yD,OAAOg5D,cAAcwmB,GAEjD,OAAIp3G,IAAcuY,GAAUwK,MACjB7mB,KAAKsR,GAAGuqG,6BAA6B1iF,GAGzCA,CACX,CAUA2/C,uBAAuBjjC,GACnBpsC,GAAOE,KAAM,GAAE3J,KAAKsR,MAAMukC,EAAS,WAAa,gCAEhD,MAAM0mB,EAAUv8D,KAAKsR,GAAGN,eAAe+9E,aAAa92E,QAAOixB,GAAKh/B,QAAQg/B,EAAE7mB,SACpEgd,EAAW,GAEjB,IAAK,MAAM3D,KAAU6gC,EAAS,KAAAu/C,EAC1B,MAAMZ,EAAax/E,EAAO84D,gBAE1B,GAAI0mB,SAAqB,QAAXY,EAAVZ,EAAYzmB,iBAAS,IAAAqnB,GAArBA,EAAuBp4G,OACvB,IAAK,MAAM42G,KAAYY,EAAWzmB,UAC9B6lB,EAASvhC,OAASljC,EAG1B,MAAMkmE,EAAmBrgF,EAAOg5D,cAAcwmB,GAE1Cx/E,EAAOrZ,MAAMuE,OAASvK,GAAUwK,MAChCwY,EAAS/vB,KAAKtP,KAAKsR,GAAGuqG,6BAA6BE,IAEnD18E,EAAS/vB,KAAKysG,EAEtB,CAEA,OAAO1nG,QAAQorB,WAAWJ,GACrBtf,MAAKi8F,IACF,MAAMC,EAASD,EACV/jG,QAAO+H,GAA4B,aAAlBA,EAAOvL,SACxBipB,KAAI1d,GAAUA,EAAOtL,SAE1B,OAAIunG,EAAOv4G,OACA2Q,QAAQE,OAAO,IAAIrT,MACnB,kDAAE+6G,EAAOz7G,KAAK,SAGlB6T,QAAQC,SAAS,GAEpC,CAUAkmE,uBAAuBzB,GACnB,MAAMmjC,EAAel8G,KAAKsR,GAAGN,eAAe2nE,kBACvC1gE,QAAOoN,GAAKA,EAAE8V,UAAY9V,EAAE8V,SAAS9Y,OAASgD,EAAE8V,SAAS9Y,MAAMuE,OAASvK,GAAUwK,QAEvFpd,GAAOE,KAAM,GAAE3J,KAAKsR,MAAMynE,EAAS,WAAa,sCAChDmjC,EAAa9tG,SAAQmgF,IACjB,MAAM4tB,EAAiBh8G,MAAMqqB,KAAKxqB,KAAKsR,GAAGmqG,4BACpCvlD,EAAY6iB,EACZojC,EAAeloF,MAAK4mC,GAAQA,EAAK,KAAO0zB,EAAYh0B,MAChDlL,GAAemN,SAAWnN,GAAeoL,SAC7CpL,GAAeiK,SAErB7vD,GAAOgH,MAAO,wBAAuBylD,YAAoBq4B,EAAYh0B,OACrEg0B,EAAYr4B,UAAYA,CAAS,GAEzC,CAWAkmD,0BAA0BjC,EAAiBe,GAKjCzmB,MAJN,GAAMxmF,GAAQnE,iBAAmBoxG,EAAWzmB,WAAat0F,MAAMC,QAAQ86G,EAAWzmB,aAI5EA,EAIgBymB,EAAWzmB,WAJJ+R,OAAM8T,QAAsD,IAAnCA,EAAShmB,uBACpDgmB,EAAShmB,wBAA0BG,EAAU,GAAGH,wBAGd,CACzC,MAAM+lB,EAAuBr6G,KAAKm5G,yBAAyBgB,EAAgBhZ,gBAE3E+Z,EAAWzmB,UAAUrmF,SAAQ,CAACksG,EAAUjgF,KACpCigF,EAAShmB,sBAAwB+lB,EAAqBhgF,GAAKi6D,qBAAqB,GAExF,CACJ,ECjiBJ,MAAM7qF,IAASC,EAAAA,EAAAA,qDA+BA,SAAS2yG,GAChBnuF,EACArI,EACAykD,EACAN,EACA9pE,EACA+U,EACApV,GAUJG,KAAKi5E,uBAAgD,IAAxBp5E,EAAQ20B,aAQrCx0B,KAAKs8G,iBAAch8G,EAkBnBN,KAAKu8G,gBAAkB,GAUvBv8G,KAAKk5E,qBAAsB,EAO3Bl5E,KAAKkuB,IAAMA,EAMXluB,KAAK6lB,GAAKA,EAOV7lB,KAAKiV,MAAQA,EAObjV,KAAKw8G,aAAe,IAAIx9F,IAMxBhf,KAAK48B,YAAc,IAAI5d,IAQvBhf,KAAKy8G,cAAgB,GAoBrBz8G,KAAK08G,WAAa,IAAI19F,IAOtBhf,KAAK28G,YAAc,IAAI/uG,IAMvB5N,KAAKs2E,cAAgB,IAAIt3D,IAKzBhf,KAAK48G,WAAa,KAKlB58G,KAAK68G,YAAc,KAOnB78G,KAAK88G,eAAiB,KAMtB98G,KAAKsqE,eAAiBA,EAGtBtqE,KAAK+8G,sBAAwB/8G,KAAK+8G,sBAAsB3sF,KAAKpwB,MAC7DA,KAAKsqE,eAAe5gD,GAAGu+E,GAAyCjoG,KAAK+8G,uBAErE/8G,KAAKg9G,kBAAoBh9G,KAAKg9G,kBAAkB5sF,KAAKpwB,MACrDA,KAAKsqE,eAAe5gD,GAAGu+E,GAAoCjoG,KAAKg9G,mBAChEh9G,KAAKH,QAAUA,EAGfG,KAAKsqE,eAAe5gD,GAAGu+E,IACnB,CAACxlF,EAAY+K,IAAYxtB,KAAK42E,oBAAoBn0D,EAAY+K,KAClExtB,KAAKsqE,eAAe5gD,GAAGu+E,IACnB,CAACxlF,EAAYuQ,IAAchzB,KAAKi9G,wBAAwBx6F,EAAYuQ,KAIxE,MAAMkqF,EAAkBh9G,GAAe,CAAC,EA+DxC,GA7DAg9G,EAAgB3rD,SAAW2rD,EAAgB3rD,UAAY,GAInDpxD,MAAMC,QAAQ88G,EAAgB3rD,UAC9B2rD,EAAgB3rD,SAASjiD,KAAK,CAAE6tG,eAAgBn9G,KAAKiV,QAErDxL,GAAON,KAAK,iEAGhBnJ,KAAKgR,eAAiB,IAAIk4E,kBAAkBlf,EAAUkzC,GAEtDl9G,KAAKg5E,SAAW,IAAIm/B,GAASn4G,MAC7BA,KAAKw+E,UAAY,GACjBx+E,KAAK6a,MAAQ,CAAC,EACd7a,KAAKo9G,cAAgB,KAKrBp9G,KAAKw6G,uBAAyBx6G,KAAKH,QAAQ4tE,sBAK3CztE,KAAKuuG,iBAAmB1uG,EAAQiuE,gBAKhC9tE,KAAK0tE,cAAgB1tE,KAAKH,QAAQ6tE,cAMlC1tE,KAAKq9G,iCAAmCpvG,GAAQ7C,4BAA8BpL,KAAKuuG,iBACnFvuG,KAAKq9G,kCACE5zG,GAAOE,KAAK,mEAGf3J,KAAKuuG,mBAILvuG,KAAK8tG,mBAAoB,EAKzB9tG,KAAK6tG,mBAAoB,GAO7B7tG,KAAKwtE,SAAW3tE,EAAQ2tE,SAExBxtE,KAAKs9G,QAAU,IAAIhX,GAEftmG,KAAKuuG,iBACLvuG,KAAKysG,UAAY,IAAIkE,GAAa,CAAEE,YAAaqH,GAAex0G,aAC7D,CACH,MAAM65G,EAAY9tG,EAAQ,MAE1BzP,KAAKysG,UAAY,IAAI8Q,EACjB,CACI1M,YAAaqH,GAAex0G,OAC5B85G,wBAAwB,EACxB1vC,iBAAiB,GAE7B,CAEA9tE,KAAK2sG,eAAiB,IAAIwD,GAAenwG,KAAKqvC,YAO9CrvC,KAAKy9G,eAAiB,IAAI7R,GAAe5rG,KAAMA,KAAKkuB,IAAIwvF,sBAMxD19G,KAAKya,aAAeyT,EAAIzT,aACxBza,KAAK8sG,YAAc,IAAIwC,GAMvBtvG,KAAK29G,sBAAwB,KAM7B39G,KAAK49G,kBAAoB,IAAI5+F,IAO7Bhf,KAAKy7G,2BAA6B,IAAIz8F,IAGtChf,KAAKggF,MAAQ,CAAC69B,EAAMl0G,KAChBF,GAAOgH,MAAMotG,EAAMl0G,GAEnB3J,KAAKw+E,UAAUlvE,KAAK,CAChBwuG,KAAM,IAAIhiG,KACV1Y,KAAMy6G,EACNl2G,MAAOgC,GAAQ,IACjB,EAEN3J,KAAKmuE,eAAiB,KACtBnuE,KAAKgR,eAAem9D,eAAiB1/D,IACjCzO,KAAKggF,MACD,iBACAr3E,KAAKC,UAAU6F,EAAMkmD,UAAW,KAAM,MAEd,OAAxB30D,KAAKmuE,gBACLnuE,KAAKmuE,eAAe1/D,EACxB,EAIAzO,KAAKuuG,kBACLvuG,KAAK+9G,QAAUC,IACX,MAAMtxG,EAASsxG,EAAInhD,QAAQ,GAE3B78D,KAAKi+G,kBAAkBvxG,EAAQsxG,EAAI37F,MAAO27F,EAAIzvB,aAC9C7hF,EAAOjB,iBAAiB,eAAe+D,IACnCxP,KAAKk+G,oBAAoBxxG,EAAQ8C,EAAE6S,MAAM,GAC3C,EAENriB,KAAKgR,eAAevF,iBAAiB,QAASzL,KAAK+9G,WAEnD/9G,KAAKgR,eAAemtG,YAAc1vG,GAASzO,KAAKo+G,mBAAmB3vG,EAAM/B,QACzE1M,KAAKgR,eAAeqtG,eAAiB5vG,GAASzO,KAAKs+G,qBAAqB7vG,EAAM/B,SAElF1M,KAAKuuE,uBAAyB,KAC9BvuE,KAAKgR,eAAeu9D,uBAAyB9/D,IACzCzO,KAAKggF,MAAM,yBAA0BhgF,KAAKwuE,gBACN,OAAhCxuE,KAAKuuE,wBACLvuE,KAAKuuE,uBAAuB9/D,EAChC,EAEJzO,KAAK0uE,2BAA6B,KAClC1uE,KAAKgR,eAAe09D,2BAA6BjgE,IAC7CzO,KAAKggF,MAAM,6BAA8BhgF,KAAK4uE,oBACN,OAApC5uE,KAAK0uE,4BACL1uE,KAAK0uE,2BAA2BjgE,EACpC,EAEJzO,KAAKmvE,oBAAsB,KAC3BnvE,KAAKgR,eAAem+D,oBAAsB1gE,IACtCzO,KAAKggF,MAAM,uBACsB,OAA7BhgF,KAAKmvE,qBACLnvE,KAAKmvE,oBAAoB1gE,EAC7B,EAEJzO,KAAKivE,wBAA0B,KAC/BjvE,KAAKgR,eAAei+D,wBAA0BxgE,IAC1CzO,KAAKggF,MAAM,0BAA2BhgF,KAAKyuE,iBACN,OAAjCzuE,KAAKivE,yBACLjvE,KAAKivE,wBAAwBxgE,EACjC,EAEJzO,KAAKu+G,cAAgB,KACrBv+G,KAAKgR,eAAeutG,cAAgB9vG,IAChCzO,KAAKggF,MAAM,iBACgB,OAAvBhgF,KAAKu+G,eACLv+G,KAAKu+G,cAAc9vG,EACvB,EAGAzO,KAAKwtE,WACLxtE,KAAKo9G,cAAgBt0G,OAAO2P,aAAY,KACpCzY,KAAK8f,WAAWC,MAAKlF,IACjB,GAA6B,mBAAlBA,aAAK,EAALA,EAAOmF,QAAuB,CACrC,MAAMkhD,EAAUrmD,EAAMmF,SAEtB,IAAK,IAAIja,EAAI,EAAGA,EAAIm7D,EAAQx9D,SAAUqC,EAAG,CACrC,MAAMwkC,EAAM22B,EAAQn7D,GAEpBwkC,EAAI4lD,QAAQ/hF,SAAQrO,IAChBC,KAAKw+G,aAAaj0E,EAAKxqC,EAAMwqC,EAAIzpB,KAAK/gB,GAAM,GAEpD,CACJ,MACI8a,EAAMzM,SAAQg9E,GAAKprF,KAAKw+G,aAAapzB,EAAG,GAAIA,IAChD,GACF,GACH,MAGPprF,KAAKy+G,8BAAgCpqG,QAAQC,UAE7C7K,GAAOE,KAAM,cAAa3J,OAC9B,CAWAq8G,GAAwBj7G,UAAUo9G,aAC5B,SAASvtG,EAAQlR,EAAM2+G,GACrB,MAAM74F,EAAM,GAAE5U,EAAO4U,MAAM9lB,IAC3B,IAAImpC,EAAIlpC,KAAK6a,MAAMgL,GACnB,MAAM9J,EAAM,IAAID,KAEXotB,IACDlpC,KAAK6a,MAAMgL,GAAMqjB,EAAI,CACjBrtB,UAAWE,EACX4iG,QAAS5iG,EACTxL,OAAQ,GACRquG,MAAO,KAGf11E,EAAE34B,OAAOjB,KAAKovG,GACdx1E,EAAE01E,MAAMtvG,KAAKyM,EAAI+1B,WACb5I,EAAE34B,OAAO7M,OAAS1D,KAAKwtE,WACvBtkC,EAAE34B,OAAOwhC,QACT7I,EAAE01E,MAAM7sE,SAEZ7I,EAAEy1E,QAAU5iG,CAChB,EAKJ,MAAM8iG,GAAU,SAAS1wD,GACrB,OAAI,MAAOA,EACA,GAGH,SAAQA,EAAY/qD,WAAW+qD,EAAY4J,KACvD,EAWAskD,GAAwBj7G,UAAU46E,mBAAqB,WACnD,MAAMz3D,EAAQvkB,KAAKgR,eAAe49D,mBAElC,MAAc,cAAVrqD,EACO,YAGJA,CACX,EAaA83F,GAAwBj7G,UAAU42E,yBAA2B,SAASl0E,GAAmC,IAAxBg7G,EAAcr7G,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GAC3F,MAAMs7G,EAAiB/+G,KAAKg/G,mBAAmBl7G,GAE/C,OAAI9D,KAAKuuG,iBACEuQ,EACDC,EAAiB1vD,GAAemN,SAAWnN,GAAeiN,SAC1DyiD,EAAiB1vD,GAAeoL,SAAWpL,GAAeiK,UAGxCx1D,IAAcuY,GAAUkL,MAAQvnB,KAAKi5E,oBAAsBj5E,KAAKk5E,qBAGjF6lC,EAAiB1vD,GAAemN,SAAWnN,GAAeoL,SAG9DpL,GAAeiK,QAC1B,EAOA+iD,GAAwBj7G,UAAU69G,oBAAsB,WACpD,MAAMC,EAAel/G,KAAK20E,sBAAsB1gD,MAAK5R,GAASA,EAAM8+E,iBAAmBluE,GAAU,UAAVA,UAEvF,OAAIisF,EACOh5G,OAAOlG,KAAKy7G,2BAA2B92F,IAAIu6F,EAAazd,QAG5D,IACX,EASA4a,GAAwBj7G,UAAU+9G,2BAA6B,SAASC,EAAWt7G,GAC/E,IAAI04G,EAAe,GACfhsB,EAAY,GAEhB,IAAK,MAAMrT,KAAYiiC,EACnB5C,EAAeA,EAAa7hD,OAAO36D,KAAKs1E,gBAAgB6H,EAAUr5E,IAItE,MAAMu7G,EAAiB7C,EAAa9+E,KAAIkoD,IAAM,IAAA05B,EAAA,OAAgB,QAAhBA,EAAI15B,EAAOvjE,aAAK,IAAAi9F,OAAA,EAAZA,EAAcz5F,EAAE,IAOlE,OALA2qE,EAAYxwF,KAAKgR,eAAeq9E,eAC3Bp2E,QAAOkjB,GAAYA,EAAS9Y,OACtB8Y,EAAS9Y,MAAMuE,OAAS9iB,GACxBu7G,EAAeprF,MAAK42D,GAAWA,IAAY1vD,EAAS9Y,MAAMwD,OAE9D2qE,CACX,EAOA6rB,GAAwBj7G,UAAUorG,cAAgB,WAC9C,OAAQxsG,KAAKH,QAAQkuE,gBACzB,EAQAsuC,GAAwBj7G,UAAU27G,sBAAwB,SAASnxD,EAAY54B,GAE3E,IAAK44B,EAGD,YAFAniD,GAAO7J,MAAO,GAAEI,8CAIpB,MAAM0gG,EAAa1gG,KAAKs1E,gBAAgB1pB,EAAYvvC,GAAUwK,OAE1D65E,EAAWh9F,QAEXg9F,EAAW,GAAGjqB,cAAczjD,EAEpC,EASAqpF,GAAwBj7G,UAAU47G,kBAAoB,SAASpxD,EAAY9nD,EAAW0pB,GAElF,IAAKo+B,EAGD,YAFAniD,GAAO7J,MAAO,GAAEI,4CAIpB,MAAMqiB,EAAQriB,KAAKs1E,gBAAgB1pB,EAAY9nD,GAE3Cue,EAAM3e,QAEN2e,EAAM,GAAGg1F,QAAQ7pF,EAEzB,EAQA6uF,GAAwBj7G,UAAUw1E,oBAAsB,SAASn0D,EAAY+K,GACzE,MAAMnL,EAAQriB,KAAKs1E,kBAAkBrhD,MAAK5O,GAAKA,EAAE3C,kBAAoBD,IAEhEJ,EAQLA,EAAMg1F,QAAQ7pF,GAPNhL,GAAAA,4BACA/Y,GAAOgH,MAAO,qCAAoCgS,yBAO9D,EAQA45F,GAAwBj7G,UAAU67G,wBAA0B,SAASx6F,EAAYuQ,GAC7E,MAAM3Q,EAAQriB,KAAKs1E,kBAAkBrhD,MAAK5O,GAAKA,EAAE3C,kBAAoBD,IAEhEJ,GAILA,EAAMo0D,cAAczjD,EACxB,EAQAqpF,GAAwBj7G,UAAUwe,eAAiB,WAA2B,IAAlBhB,EAAWnb,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GACtE,MAAMkc,EAAc,CAAC,EAkBrB,OAjBuBf,EAAYlb,OAC7B1D,KAAKm/G,2BAA2BvgG,EAAavC,GAAUkL,OACvDvnB,KAAKgR,eAAeq9E,eACjBp2E,QAAOkjB,GAAYA,EAAS9Y,OAAS8Y,EAAS9Y,MAAMuE,OAASvK,GAAUkL,OAAS4T,EAAS9Y,MAAM+R,WAEzFhmB,SAAQw3E,IACnB,MAAMj0E,EAAOi0E,EAAO25B,4BAEhB5tG,GAAQA,EAAKjO,SAKbic,EAAYhO,EAAK,GAAGxO,QAAUwO,EAAK,GAAG0F,WAC1C,IAGGsI,CACX,EAOA08F,GAAwBj7G,UAAUo+G,kBAAoB,WAClD,OAAOx/G,KAAKwsG,iBAAmBxsG,KAAKyxE,4BAA8BzY,GAAcggD,GACpF,EAQAqD,GAAwBj7G,UAAUq+G,mBAAqB,SAASvG,GAAY,IAAAwG,EAAAC,EAAAC,EACxE,MAAM/wD,EAAQ,GAEd,IAAKqqD,IAAeA,EAAWnmF,eAC3B,OAAO87B,EAGX,MAAM+I,EAAY53D,KAAKwsG,gBAAkB,MAAQ,MAEjD,OAA4C,QAArCkT,EAAA1/G,KAAK08G,WAAW/3F,IAAIu0F,EAAWzX,cAAM,IAAAie,GAAQ,QAARC,EAArCD,EAAuC9kD,cAAM,IAAA+kD,GAA8C,QAA9CC,EAA7CD,EAA+C1rF,MAAKkwB,GAASA,EAAM6J,YAAc4J,WAAU,IAAAgoD,OAAtD,EAArCA,EAA6F/wD,QAASA,CACjH,EAQAwtD,GAAwBj7G,UAAU4lB,eAAiB,SAASljB,GACxD,IAAImvE,EAAS9yE,MAAMqqB,KAAKxqB,KAAK48B,YAAYrsB,UAMzC,YAJkBjQ,IAAdwD,IACAmvE,EAASA,EAAOh7D,QAAOoK,GAASA,EAAMoL,YAAc3pB,KAGjDmvE,CACX,EAOAopC,GAAwBj7G,UAAUuzE,oBAAsB,WACpD,OAAO30E,KAAKgnB,eAAe3K,GAAUwK,MACzC,EASAw1F,GAAwBj7G,UAAU49G,mBAAqB,SAASl7G,GAC5D,IAAKA,EACD,MAAM,IAAI5C,MAAM,2BAGpB,OAAOlB,KAAKgnB,eAAeljB,GAAWJ,OAAS,CACnD,EAUA24G,GAAwBj7G,UAAUk0E,gBAAkB,SAAS1pB,EAAY9nD,GACrE,IAAI04G,EAAe,GACnB,MAAM4C,EAAYxzD,EAAa,CAAEA,GAAe5rD,KAAKw8G,aAAar0G,OAElE,IAAK,MAAMg1E,KAAYiiC,EAAW,CAC9B,MAAMS,EAA4B7/G,KAAKw8G,aAAa73F,IAAIw4D,GAExD,GAAI0iC,EACA,IAAK,MAAMjgB,KAAkBigB,EAA0B13G,OAE9CrE,GAAaA,IAAc87F,IAC5B4c,EAAeA,EAAa7hD,OAAOx6D,MAAMqqB,KAAKq1F,EAA0Bl7F,IAAIi7E,KAI5F,CAEA,OAAO4c,CACX,EAQAH,GAAwBj7G,UAAU61E,iCAAmC,SAASpxD,GAC1E,MAAMmxD,EAAiB,GACjBwlC,EAAex8G,KAAKs1E,gBAAgBzvD,GAE1C,GAAK22F,UAAAA,EAAc94G,OACf,OAAOszE,EAEX,MAAM8oC,EAAetD,EAAa9+E,KAAIrb,GAASA,EAAMi1F,YAC/Cv/C,EAAM,IAAIyB,GAAIx5D,KAAKovE,kBAAkBrX,KA2B3C,OAzBA+nD,EAAa1xG,SAAQ,CAACuD,EAAM0oB,KACxB,IAAK,MAAMoe,KAASsf,EAAItf,MAAO,CAC3B,IAAI+c,EAAQ,GACRjC,EAAYf,GAAAA,UAAkB/Z,EAAQ,UAAS9mC,KAEnD,GAAI4hD,EAAU7vD,OAAQ,CACbszE,EAAe38C,KAChB28C,EAAe38C,GAAO,IAI1B,MAAM0lF,EAAWvtD,GAAAA,UAAkB/Z,EAAQ,oBAAmB9mC,KAE9D,GAAIouG,EAASr8G,OAAQ,CACjB,MAAMonG,EAAgBiV,EAAS,GAAGp5F,MAAM,KAAK,GAE7C6uC,GAAU,GAAEuqD,EAAS,SACrBxsD,EAAYA,EAAUoH,OAAOnI,GAAAA,UAAkB/Z,EAAQ,UAASqyD,KACpE,CACA9zB,EAAe38C,IAAS,GAAEk5B,EAAU/yD,KAAK,cACzCw2E,EAAe38C,IAAQm7B,CAC3B,CACJ,KAGGwhB,CACX,EAOAqlC,GAAwBj7G,UAAU4+G,uBAAyB,WACvD,MAAMx6B,EAAexlF,KAAKyxE,0BAE1B,OAAOzxE,KAAKg5E,SAAS8/B,cAActzB,EAAaiG,gBAAkBzrF,KAAKg5E,SAAS8/B,aACpF,EAQAuD,GAAwBj7G,UAAUkhB,eAAiB,SAAS3Q,GACxD,GAAoB,iBAATA,EACP,MAAM,IAAIzQ,MAAO,QAAOyQ,qBAE5B,IAAK,MAAMunG,KAAcl5G,KAAK48B,YAAYrsB,SACtC,GAAIvQ,KAAKsnB,aAAa4xF,KAAgBvnG,EAClC,OAAOunG,EAGf,IAAK,MAAM+G,KAAejgH,KAAKs1E,kBAC3B,GAAI2qC,EAAY3I,YAAc3lG,EAC1B,OAAOsuG,EAIf,OAAO,IACX,EAQA5D,GAAwBj7G,UAAU6lB,iBAAmB,SAASpB,GAE1D,MAAMq6F,EAAgB79F,GAASA,EAAM2+E,WAAWn7E,KAAOA,EACjDqzF,EAAal5G,KAAKgnB,iBAAiBiN,KAAKisF,GAE9C,GAAIhH,EACA,OAAOl5G,KAAKsnB,aAAa4xF,GAG7B,MAAM+G,EAAcjgH,KAAKs1E,kBAAkBrhD,KAAKisF,GAEhD,OAAID,EACOA,EAAY3I,UAGhB,IACX,EAMA+E,GAAwBj7G,UAAUg9G,mBAAqB,SAAS1xG,GAC5D,MAAMikD,EAAWjkD,EAAOmZ,GAGxB,IAAKs6F,GAAIC,iBAAiBzvD,GACtB,OAIA1iD,GAAQpE,oBACR6C,EAAO2zG,WAAa5xG,IAChBzO,KAAKi+G,kBAAkBvxG,EAAQ+B,EAAM4T,MAAM,EAE/C3V,EAAO4zG,cAAgB7xG,IACnBzO,KAAKk+G,oBAAoBxxG,EAAQ+B,EAAM4T,MAAM,GAKrD,MAAMk+F,EAAoB7zG,EAAO2gF,iBAEjC,IAAK,MAAMmzB,KAAcD,EACrBvgH,KAAKi+G,kBAAkBvxG,EAAQ8zG,GAEnC,MAAMC,EAAoB/zG,EAAO4gF,iBAEjC,IAAK,MAAMoT,KAAc+f,EACrBzgH,KAAKi+G,kBAAkBvxG,EAAQg0F,EAEvC,EAcA2b,GAAwBj7G,UAAU68G,kBAAoB,SAASvxG,EAAQ2V,GAA2B,IAApBksE,EAAW9qF,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,KACxF,MAAMktD,EAAWjkD,EAAOmZ,GAClB/hB,EAAYue,EAAMuE,KAGxB,IAAK5mB,KAAKiV,QAAUkrG,GAAIC,iBAAiBzvD,GACrC,OAKJ,GAHAlnD,GAAOE,KAAM,GAAE3J,kDAAkD2wD,UAAiB7sD,OAG7EA,EAID,YAHA0O,GAAqBiN,iBACjB,IAAIve,MAAO,oDAAmDyvD,8BAKtE,MAAM+vD,EAAY1gH,KAAKuuG,iBACjB,IAAI/0C,GAAIx5D,KAAKgR,eAAeo+D,kBAAkBrX,KAC9C,IAAIyB,GAAIx5D,KAAKovE,kBAAkBrX,KACrC,IAAI4oD,EAGJ,GAAI3gH,KAAKuuG,iBACL,GAAIhgB,SAAAA,EAAah0B,IAAK,CAClB,MAAMA,EAAMg0B,EAAYh0B,IAExBomD,EAAYD,EAAUjoE,MAAMxkB,MAAK2sF,GAAOpuD,GAAAA,SAAiBouD,EAAM,SAAQrmD,MAC3E,MACIomD,EAAYD,EAAUjoE,MAAMxkB,MAAK2sF,IAC7B,MAAMlmD,EAAOlI,GAAAA,SAAiBouD,EAAK,WAEnC,MAAuB,iBAATlmD,GAAqB/J,IAAa+J,EAAKxqC,UAAU,GAAGvJ,MAAM,KAAK,EAAE,SAIvFg6F,EAAYD,EAAUjoE,MAAMxkB,MAAK2sF,GAAOA,EAAI3tE,WAAY,KAAInvC,OAGhE,IAAK68G,EAKD,YAJAnuG,GAAqBiN,iBACjB,IAAIve,MAAO,oEAAmEyvD,UAAiB7sD,8BAMvG,IAAIyvD,EAAYf,GAAAA,UAAkBmuD,EAAW,WAG7C,GADAptD,EAAYA,EAAUt7C,QAAOg7C,IAA8C,IAAtCA,EAAKryD,QAAS,QAAO+vD,QACrD4C,EAAU7vD,OAKX,YAJA8O,GAAqBiN,iBACjB,IAAIve,MAAO,4DAA2DyvD,UAAiB7sD,6BAQ/F,MAAM+zD,EAAUtE,EAAU,GAAGrjC,UAAU,GAAGvJ,MAAM,KAAK,GAC/Ck6F,EAAY36G,OAAO2xD,GACnBu+C,EAAkBp2G,KAAKsqE,eAAe0+B,aAAa6X,GAEzD,GAAIl9F,MAAMk9F,IAAcA,EAAY,EAKhC,YAJAruG,GAAqBiN,iBACjB,IAAIve,MAAO,uCAAsC2/G,QAAgBlwD,UAAiB7sD,6BAM1F,IAAKsyG,EAKD,YAJA5jG,GAAqBiN,iBACjB,IAAIve,MAAO,8CAA6C2/G,QAAgBlwD,UAAiB7sD,6BAMjG,MAAM2e,EAAaziB,KAAKsqE,eAAe2+B,mBAAmB4X,GACpDnqC,EAAgB12E,KAAKsqE,eAAeqM,iBAAiBy/B,EAAiBtyG,EAAW2e,GAIvF,IAAIkJ,GAAQ,EACRqH,EAAYlvB,IAAcuY,GAAUwK,MAAQoM,GAAU,UAAVA,YAAmB3yB,EAE/Do2E,GACA/qD,EAAQ+qD,EAAc/qD,MACtBqH,EAAY0jD,EAAc1jD,WAE1BvpB,GAAOE,KAAM,GAAE3J,sCAAsCo2G,KAAmB3zF,6BAG5EziB,KAAK8gH,mBAAmB1K,EAAiB1pG,EAAQ2V,EAAOve,EAAWkvB,EAAW6tF,EAAWl1F,EAAOlJ,EACpG,EAkBA45F,GAAwBj7G,UAAU0/G,mBAAqB,SAC/C1K,EACA1pG,EACA2V,EACAve,EACAkvB,EACArhB,EACAga,EACAlJ,GACJhZ,GAAOE,KAAM,GAAE3J,uCAAuCo2G,UAAwBzkG,UAChE7N,gBAAwB2e,MACtC,IAAIs+F,EAAkB/gH,KAAKw8G,aAAa73F,IAAIyxF,GAEvC2K,IACDA,EAAkB,IAAI/hG,IACtB+hG,EAAgBj7F,IAAIzJ,GAAUkL,MAAO,IAAI3Z,KACzCmzG,EAAgBj7F,IAAIzJ,GAAUwK,MAAO,IAAIjZ,KACzC5N,KAAKw8G,aAAa12F,IAAIswF,EAAiB2K,IAG3C,MAAMC,EAAwBD,EAAgBp8F,IAAI7gB,GAElD,GAAIk9G,SAAAA,EAAuB7yG,MACpBhO,MAAMqqB,KAAKw2F,GAAuB/sF,MAAKgtF,GAAcA,EAAWjgB,aAAe3+E,IAIlF,YAFA5Y,GAAOE,KAAM,GAAE3J,0DAA0Do2G,UAAwBtyG,MAKrG,MAAMm8G,EACA,IAAI9J,GACEn2G,KAAKkuB,IACLluB,KAAKkuB,IAAI7D,WACT+rF,EACA1pG,EACA2V,EACAve,EACAkvB,EACArhB,EACAga,EACA3rB,KAAKiV,MACLwN,GAEZu+F,EAAsBlsG,IAAImrG,GAC1BjgH,KAAKya,aAAapR,KAAK6oB,GAAAA,QAAAA,mBAA8B+tF,EAAajgH,KACtE,EAOAq8G,GAAwBj7G,UAAUk9G,qBAAuB,SAAS5xG,GAC9D,IAAKyzG,GAAIe,aAAax0G,GAGlB,YAFAjD,GAAOE,KAAM,uDAAsD+C,EAAOmZ,OAM9E,MAAM46F,EAAoB/zG,EAAO4gF,iBAEjC,IAAK,MAAMoT,KAAc+f,EACrBzgH,KAAKk+G,oBAAoBxxG,EAAQg0F,GAErC,MAAM6f,EAAoB7zG,EAAO2gF,iBAEjC,IAAK,MAAMmzB,KAAcD,EACrBvgH,KAAKk+G,oBAAoBxxG,EAAQ8zG,EAEzC,EASAnE,GAAwBj7G,UAAU88G,oBAAsB,SAASxxG,EAAQ2V,GACrE,MAAMsuC,EAAWjkD,EAAOmZ,GAClBglE,EAAUxoE,aAAK,EAALA,EAAOwD,GAGvB,IAAKs6F,GAAIC,iBAAiBzvD,GACtB,OAGJ,IAAKA,EAGD,YAFAn+C,GAAqBiN,iBAAiB,IAAIve,MAAO,GAAElB,oDAKvD,IAAK6qF,EAGD,YAFAr4E,GAAqBiN,iBAAiB,IAAIve,MAAO,GAAElB,mDAKvD,MAAMmhH,EAAcnhH,KAAKs1E,kBAAkBrhD,MACvCgsF,GAAeA,EAAYpf,gBAAkBlwC,GAAYsvD,EAAYlf,eAAiBlW,IAErFs2B,EAMLnhH,KAAKohH,mBAAmBD,GALpB3uG,GAAqBiN,iBAAiB,IAAIve,MAAO,GAAElB,sDAM3D,EAQAq8G,GAAwBj7G,UAAUigH,mBAAqB,SAAS1zD,GAC5D,IAAI2zD,EAAgB,GACpB,MAAMC,EAAsBvhH,KAAKw8G,aAAa73F,IAAIgpC,GASlD,OAPI4zD,IACAD,EAAgBA,EAAc3mD,OAAOx6D,MAAMqqB,KAAK+2F,EAAoB58F,IAAItI,GAAUkL,SAClF+5F,EAAgBA,EAAc3mD,OAAOx6D,MAAMqqB,KAAK+2F,EAAoB58F,IAAItI,GAAUwK,SAClF7mB,KAAKw8G,aAAatmG,OAAOy3C,IAE7BlkD,GAAOgH,MAAO,GAAEzQ,uCAAuC2tD,WAAe2zD,EAAc59G,UAE7E49G,CACX,EAQAjF,GAAwBj7G,UAAUggH,mBAAqB,SAASD,GAAa,IAAAK,EACzE/3G,GAAOE,KAAM,GAAE3J,wCAAwCmhH,EAAYtgB,yBAClDsgB,EAAYpgB,iBAE7BogB,EAAYjzG,UACZ,MAAM4U,EAAgBq+F,EAAYp+F,mBAElC,IAAKD,GAAiBN,GAAAA,2BAClB,OAEJ,MAAMw+F,EAAwBhhH,KAAKw8G,aAAa73F,IAAI7B,GAE/Ck+F,EAEuD,QAAjDQ,EAACR,EAAsBr8F,IAAIw8F,EAAY1zF,kBAAU,IAAA+zF,GAAhDA,EAAkDtrG,OAAOirG,IACjE13G,GAAO7J,MAAO,GAAEI,yBAAyBmhH,gCAFzC13G,GAAO7J,MAAO,GAAEI,6DAA6D8iB,KAIjF9iB,KAAKya,aAAapR,KAAK6oB,GAAAA,QAAAA,qBAAgCivF,EAC3D,EAOA9E,GAAwBj7G,UAAUqgH,gBAAkB,SAASlsD,GAKzD,MAAM3G,EAAU,IAAI5vC,IAMd0iG,EAAY,IAAI1iG,IAEtB,GAAoB,iBAATu2C,GAA8B,OAATA,GACL,iBAAbA,EAAKwC,IAGf,OAFAtuD,GAAON,KAAK,kDAELylD,EAGX,MAAMvhC,EAAU+N,GAAAA,MAAgBm6B,EAAKwC,KAErC,IAAK53D,MAAMC,QAAQitB,EAAQorB,OACvB,OAAOmW,EAGX,IAAInW,EAAQprB,EAAQorB,MAEhBz4C,KAAKuuG,iBACL91D,EAAQA,EAAMxgC,QAAO87C,GAASA,EAAMmC,YAAc7G,GAAeiN,UAC1DvI,EAAMmC,YAAc7G,GAAemN,YAE1C/jB,EAAQ,GACR,CAAEp8B,GAAUkL,MAAOlL,GAAUwK,OAAQzY,SAAQtK,IACzC,MAAMyzD,EAAQlqC,EAAQorB,MAAMxkB,MAAK5H,GAAKA,EAAEjpB,OAASU,IAEjDyzD,GAAS9e,EAAMnpC,KAAKioD,EAAM,KAIlC,IAAIr6B,EAAQ,EAEZ,IAAK,MAAMq6B,KAAS9e,EAAO,CACvB,IAAKt4C,MAAMC,QAAQm3D,EAAM1I,OACrB,SAGJ,GAAI1uD,MAAMC,QAAQm3D,EAAMP,YAAa,CACjC,IAAK,MAAM7S,KAASoT,EAAMP,WACtB,QAA+B,IAApB7S,EAAM6J,gBAAoD,IAAhB7J,EAAM0K,MAAuB,CAE9E,MAAM8yD,EAAax9D,EAAM0K,MAAMloC,MAAM,KAAK+W,KAAIm6B,GAAW1xD,SAAS0xD,EAAS,MACrEsyC,EAAcwX,EAAW,GAG/Bx9D,EAAM0K,MAAQ8yD,EAGTD,EAAU32F,IAAIo/E,IACfuX,EAAU57F,IAAIqkF,EAAa,IAE/BuX,EAAU/8F,IAAIwlF,GAAa76F,KAAK60C,EACpC,CAMJ,IAHiBoT,EAAMP,WAAW/iC,MAAKkwB,GAA6B,QAApBA,EAAM6J,YAGvC,CACX,MAAM4zD,EAAarqD,EAAMP,WAAWt5B,KAAIymB,GAASA,EAAM0K,MAAM,KAE7D6yD,EAAU/8F,IAAIi9F,EAAW,IAAItyG,KAAK,CAC9B0+C,UAAW,MACXa,MAAO+yD,GAEf,CACJ,CAEA,IAAI/yD,EAAQ0I,EAAM1I,MAGlBA,EAAQ7uD,KAAKuuG,iBACP1/C,EAAM52C,QAAOixB,GAAqB,UAAhBA,EAAEwuB,YACpB7I,EAAM52C,QAAOixB,GAAqB,SAAhBA,EAAEwuB,YAE1B,IAAK,MAAM/lD,KAAQk9C,EAAO,CAKtB,MAAMnnD,EAAM1H,KAAKuuG,iBAAoB,GAAEh3C,EAAMn0D,QAAQ85B,IAAUvrB,EAAKhK,MAC9DgiG,EAAah4F,EAAKkU,GACxB,IAAIixC,EAAWlI,EAAQjqC,IAAIjd,GAY3B,GAVKovD,IACDA,EAAW,CACPjI,MAAO,GACP+L,OAAQ,GACRF,KAAMhzD,GAEVknD,EAAQ9oC,IAAIpe,EAAKovD,IAErBA,EAASjI,MAAMv/C,KAAKq6F,GAEhB+X,EAAU32F,IAAI4+E,GAAa,CAC3B,MAAM3yC,EAAa0qD,EAAU/8F,IAAIglF,GAEjC,IAAK,MAAMxlD,KAAS6S,EAChBF,EAAS8D,OAAOtrD,KAAK60C,EAE7B,CACJ,CAGAoT,EAAMn0D,OAASiZ,GAAUwK,OAASqW,GACtC,CAEA,OAAO0xB,CACX,EAqKAytD,GAAwBj7G,UAAUkmB,aAAe,SAAS4xF,GACtD,MAAMpiD,EAAW92D,KAAK6hH,SAAS3I,EAAWzX,OAE1C,OAAO3qC,GAAYA,EAASjI,MAAM,EACtC,EAUAwtD,GAAwBj7G,UAAU0gH,oCAAsC,SAASvsD,GAC7E,MAAMwC,EAAM38B,GAAAA,MAAgBm6B,EAAKwC,KAC3Bp3D,EAAQo3D,EAAItf,MAAMxkB,MAAK8/B,GAAwB,UAAfA,EAAM3wD,OAG5CzC,EAAMq2D,WAAar2D,EAAMq2D,YAAc,GACvC,MAAMk5C,EAAYvvG,EAAMq2D,WAAW/+C,QAAOksC,GAA6B,QAApBA,EAAM6J,YAEzD,GAAIrtD,EAAM8rG,WAAa9rG,EAAMo5G,aAAc,CACvC,MAAMlrD,EAAQ,GAad,GAXIqhD,GAAaA,EAAUxsG,OACvBwsG,EAAU9hG,SAAQ+1C,IACd0K,EAAMv/C,KAAK60C,EAAM0K,MAAMloC,MAAM,KAAK,GAAG,IAGzChmB,EAAMkuD,MAAMzgD,SAAQuD,IACO,SAAnBA,EAAK+lD,WACL7I,EAAMv/C,KAAKqC,EAAKkU,GACpB,IAGJllB,EAAMq2D,WAAW/iC,MAAKkwB,GAA6B,QAApBA,EAAM6J,YAErC,OAAOuH,EAIX,IAAK,IAAIxvD,EAAI,EAAGA,EAAI8oD,EAAMnrD,OAAQqC,GAAK,EAAG,CACtC,MAAMurG,EAAWziD,EAAMxuD,MAAM0F,EAAGA,EAAI,GAEpCpF,EAAMq2D,WAAW1nD,KAAK,CAClB0+C,UAAW,MACXa,MAAOyiD,EAAS9wG,KAAK,MAE7B,CACJ,CAEA,OAAO,IAAImyE,sBAAsB,CAC7BvvE,KAAMmyD,EAAKnyD,KACX20D,IAAK38B,GAAAA,MAAgB28B,IAE7B,EAGA,MAAMgqD,GAAU,CACZvzC,iBACI,OAAOxuE,KAAKgR,eAAew9D,cAC/B,EACAI,qBACI,OAAO5uE,KAAKgR,eAAe49D,kBAC/B,EACAH,kBACI,OAAOzuE,KAAKgR,eAAey9D,eAC/B,EACAc,mBACI,IAAIha,EAAOv1D,KAAKgR,eAAeu+D,iBAE/B,OAAKha,GAMLv1D,KAAKggF,MAAM,oCAAqC6+B,GAAQtpD,IAIpDv1D,KAAKuuG,mBAAqBvuG,KAAKiV,OAC/BsgD,EAAOv1D,KAAKs9G,QAAQ/W,QAAQhxC,GAC5Bv1D,KAAKggF,MAAM,8CACP6+B,GAAQtpD,IAEZA,EAAOv1D,KAAK8hH,oCAAoCvsD,GAChDv1D,KAAKggF,MAAM,yDACP6+B,GAAQtpD,KACJv1D,KAAKuuG,mBACTtgG,GAAQrE,gCACR2rD,EAAOv1D,KAAKy9G,eAAezP,mCAAmCz4C,GAC9D9rD,GAAOgH,MACH,uDAAwD8kD,IAWhEA,EAjJY,SAASga,EAAkB1vE,GAAS,IAAAqsG,EAAAiC,EACxD,IAAK5+B,EACD,MAAM,IAAIruE,MAAM,mCAGpB,MAAM+qG,EAAc,IAAIX,GAAiB/7B,EAAiBxX,KACpDiqD,EAAqD,QAA3C9V,EAAGD,EAAYR,YAAYpvF,GAAUkL,cAAM,IAAA2kF,OAAA,EAAxCA,EAA2C,GAC9D,IAAI+V,GAAU,EAEVD,GAAcA,EAAW9rD,YAAc7G,GAAemN,WAClD38D,EAAQ20B,YACRwtF,EAAW9rD,UAAY7G,GAAeiK,SAEtC0oD,EAAW9rD,UAAY7G,GAAemN,SAG1CylD,GAAU,GAGd,MAAMC,EAAqD,QAA3C/T,EAAGlC,EAAYR,YAAYpvF,GAAUwK,cAAM,IAAAsnF,OAAA,EAAxCA,EAA2C,GAO9D,OALI+T,GAAcA,EAAWhsD,YAAc7G,GAAemN,WACtD0lD,EAAWhsD,UAAY7G,GAAemN,SACtCylD,GAAU,GAGVA,EACO,IAAItvC,sBAAsB,CAC7BvvE,KAAMmsE,EAAiBnsE,KACvB20D,IAAKk0C,EAAYN,aAIlBp8B,CACX,CA+GmB4yC,CAAgB5sD,EAAMv1D,KAAKH,UAItC01D,EAAOv1D,KAAKy9G,eAAexP,2BAA2B14C,GAE/CA,IAtCH9rD,GAAOgH,MAAO,GAAEzQ,sDAET,CAAC,EAqChB,EACAovE,oBACI,IAAI7Z,EAAOv1D,KAAKgR,eAAeo+D,kBAE/B,OAAK7Z,GAKLv1D,KAAKggF,MAAM,qCAAsC6+B,GAAQtpD,IAErDv1D,KAAKuuG,mBACDvuG,KAAKiV,MAELsgD,EAAOv1D,KAAKoiH,4BAA4B7sD,IAGxCA,EAAOv1D,KAAKs9G,QAAQ/W,QAAQhxC,GAC5Bv1D,KAAKggF,MAAM,+CAAgD6+B,GAAQtpD,MAIpEA,IAjBH9rD,GAAOgH,MAAO,GAAEzQ,wDAET,CAAC,EAgBhB,GAGJqB,OAAO8G,KAAK45G,IAAS3zG,SAAQm0C,IACzBlhD,OAAOwG,eACHw0G,GAAwBj7G,UACxBmhD,EAAM,CACF59B,IAAKo9F,GAAQx/D,IAEpB,IAGL85D,GAAwBj7G,UAAUygH,SAAW,SAASpgB,GAClD,OAAOzhG,KAAK08G,WAAW/3F,IAAI88E,EAC/B,EAQA4a,GAAwBj7G,UAAUihH,sBAAwB,WACtD,OAAOriH,KAAKsiH,oBAAsBtiH,KAAKw6G,sBAC3C,EAOA6B,GAAwBj7G,UAAUkhH,iBAAmB,WACjD,MAAMrvC,EAASjzE,KAAK20E,sBAEpB,OAAOzqE,QAAQ+oE,EAAOh/C,MAAK5R,GAASA,EAAM2Q,YAAcC,GAAU,UAAVA,UAC5D,EAWAopF,GAAwBj7G,UAAUmhH,iBAAmB,SAASp0D,GAC1D,IAAKnuD,KAAK0tE,cACN,OAAOvf,EAGX,MAAMorD,EAAYn+E,GAAAA,MAAgB+yB,EAAY4J,KACxCyqD,EAASjJ,EAAU9gE,MAAMxgC,QAAOoU,GAAKA,EAAEjpB,OAASpD,KAAK0tE,cAAc5pE,YAEzE,IAAK0+G,EAAO9+G,OACR,OAAOyqD,EAGX,IAAK,MAAMoJ,KAASirD,EACZxiH,KAAK0tE,cAAc4F,UACnB9gB,GAAAA,WAAmB+E,EAAOv3D,KAAK0tE,cAAc4F,UAG7CtzE,KAAK0tE,cAAc2F,YACnB7gB,GAAAA,YAAoB+E,EAAOv3D,KAAK0tE,cAAc2F,WAM1CrzE,KAAK0tE,cAAc2F,YAAcra,GAAciV,MAAQhgE,GAAQjH,iBAAmBhH,KAAKiV,OACvFu9C,GAAAA,WAAmB+E,EAAOv3D,KAAK0tE,cAAc2F,WAAW,IAKpE,OAAO,IAAIV,sBAAsB,CAC7BvvE,KAAM+qD,EAAY/qD,KAClB20D,IAAK38B,GAAAA,MAAgBm+E,IAE7B,EAQA8C,GAAwBj7G,UAAU2wE,SAAW,SAAS1vD,GAA4B,IAArByf,EAAWr+B,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GACpE,MAAMg+F,EAAQp/E,EAAMo/E,MAIpB,GAFAh4F,GAAOE,KAAM,GAAE3J,eAAeqiB,KAE1BriB,KAAK48B,YAAY7R,IAAI02E,GAErB,OAAOptF,QAAQE,OAAO,IAAIrT,MAAO,GAAEmhB,mBAAuBriB,SAG9DA,KAAK48B,YAAY9W,IAAI27E,EAAOp/E,GAC5B,MAAMogG,EAAepgG,EAAMkH,oBAE3B,GAAIvpB,KAAKuuG,iBAAkB,CACvB9kG,GAAOgH,MAAO,GAAEzQ,wCAChB,IACIA,KAAKg5E,SAASjH,SAAS1vD,EAAOyf,GAC1Bzf,IACIA,EAAME,eACNviB,KAAK8tG,mBAAoB,EAEzB9tG,KAAK6tG,mBAAoB,EAGrC,CAAE,MAAOjuG,GAGL,OAFA6J,GAAO7J,MAAO,GAAEI,qBAAqBqiB,aAAiBziB,aAAK,EAALA,EAAOW,WAEtD8T,QAAQE,OAAO3U,EAC1B,CACJ,KAAO,CAEH,GAAI6iH,EACAziH,KAAK0iH,WAAWD,QAGb,IAAKx0G,GAAQrE,+BACLyY,EAAME,gBACLF,EAAM0Q,iBAAmB1Q,EAAMmL,UAC3C,OAAOnZ,QAAQE,OAAO,IAAIrT,MAAO,GAAElB,mCAAmCqiB,MAI1E,GAAIpU,GAAQrE,+BAAiCyY,EAAM0Q,gBAAkB1Q,EAAMmL,UAAW,CAClF,MAAMspC,EAAW92D,KAAK2iH,0BAA0BtgG,GAEhDriB,KAAK2sG,eAAe2D,eAAex5C,EAASjI,MAAM,IAClD,MAAMsI,EACAL,EAAS8D,OAAO3mC,MAAKiwB,GAAqC,QAAxBA,EAAU8J,YAE9CmJ,GACAn3D,KAAKysG,UAAUgD,aAAat4C,EAAStI,OAEzC,MAAMqhD,EACAp5C,EAAS8D,OAAO3iD,QACdisC,GAAqC,QAAxBA,EAAU8J,YAE/B,GAAIkiD,EAAW,CACX,MAAM0S,EAAiB,IAAI5jG,IAE3BkxF,EAAU9hG,SAAQ8oD,IACd,MAAMD,EAAcC,EAASrI,MAAM,GAC7BogD,EAAU/3C,EAASrI,MAAM,GAE/B+zD,EAAe98F,IAAImxC,EAAag4C,EAAQ,IAE5CjvG,KAAK8sG,YAAY2C,aAAamT,EAClC,CACJ,CACJ,CACA,IAAIC,EAAexuG,QAAQC,UAO3B,OAJIrG,GAAQtH,cACRk8G,EAAeA,EAAa9iG,MAAK,IAAM0iG,GAAgBziH,KAAKg5E,SAAS0iC,aAAar5F,MAG/EwgG,CACX,EASAxG,GAAwBj7G,UAAU24E,aAAe,SAAS13D,GAGtD,GAFA5Y,GAAOE,KAAM,GAAE3J,qBAAqBqiB,YAE/BriB,KAAK8iH,oBAAoB,eAAgBzgG,GAG1C,OAAOhO,QAAQE,OAAO,yCAG1B,MAAMwuG,EAAe1gG,EAAMkH,oBAE3B,OAAKw5F,EAMD/iH,KAAKuuG,iBACEvuG,KAAKg5E,SAASH,aAAa,KAAMx2D,GAAOtC,MAAK,KAC5CsC,IACIA,EAAME,eACNviB,KAAK8tG,mBAAoB,EAEzB9tG,KAAK6tG,mBAAoB,IAI1B,MAIf7tG,KAAK0iH,WAAWK,GAET1uG,QAAQC,SAAQ,KArBnB7K,GAAO7J,MAAO,GAAEI,4BAA4BqiB,8BAErChO,QAAQE,OAAO,oBAoB9B,EAOA8nG,GAAwBj7G,UAAUshH,WAAa,SAASzjB,GACpDj/F,KAAKgR,eAAeq+E,UAAU4P,GAC9Bj/F,KAAKy8G,cAAcntG,KAAK2vF,EAC5B,EAMAod,GAAwBj7G,UAAU4hH,cAAgB,SAAS/jB,GACvDj/F,KAAKgR,eAAeu+E,aAAa0P,GACjCj/F,KAAKy8G,cACCz8G,KAAKy8G,cAAcxkG,QAAOvL,GAAUA,IAAWuyF,GACzD,EAaAod,GAAwBj7G,UAAU0hH,oBAAsB,SAChD5wG,EACAgnG,GACJ,MAAM+J,EAAajjH,KAAK48B,YAAY7R,IAAImuF,aAAU,EAAVA,EAAYzX,OAMpD,OAJKwhB,GACDx5G,GAAO7J,MAAO,GAAEI,QAAQkS,YAAqBgnG,2BAG1C+J,CACX,EASA5G,GAAwBj7G,UAAUqwE,wBAA0B,WAAW,IAAAyxC,EACnE,MAAMnrD,EAA0C,QAAvCmrD,EAAGljH,KAAKgR,eAAeu+D,wBAAgB,IAAA2zC,OAAA,EAApCA,EAAsCnrD,IAC5CorD,EAAenqD,GAAcggD,IAEnC,IAAKjhD,EACD,OAAOorD,EAEX,MAEMn2G,EAFYouB,GAAAA,MAAgB28B,GACVtf,MAAMxkB,MAAK5H,GAAKA,EAAEjpB,OAASiZ,GAAUwK,QACzCwxC,IAAI,GAAGrrD,MAE3B,OAAIA,EACO3L,OAAOkP,OAAOyoD,IAAe/kC,MAAKtsB,GAASA,IAAUqF,EAAMg7C,gBAG/Dm7D,CACX,EAMA9G,GAAwBj7G,UAAU0kF,qBAAuB,SAAS94E,GAAO,IAAAo2G,EACrE,MAAMrrD,EAA0C,QAAvCqrD,EAAGpjH,KAAKgR,eAAeu+D,wBAAgB,IAAA6zC,OAAA,EAApCA,EAAsCrrD,IAElD,QAAKA,IAGa38B,GAAAA,MAAgB28B,GACVtf,MAAMxkB,MAAK5H,GAAKA,EAAEjpB,OAASiZ,GAAUwK,QAE/CwxC,IAAIpkC,MAAKm3D,GAAKA,EAAEp+E,QAAUA,GAC5C,EAOAqvG,GAAwBj7G,UAAUkxD,2BAA6B,SAASC,GACpE,MAAM8wD,EAAS9wD,G5Cj4DkB,E4Cm4DjCvyD,KAAKw6G,uBAAyBx6G,KAAKwsG,iBAAmB6W,CAC1D,EAUAhH,GAAwBj7G,UAAUgyE,eAAiB,SAASpF,EAAgBuX,GACnEvlF,KAAK0tE,gBAGVM,IAAmBhuE,KAAK0tE,cAAc2F,UAAYrF,GAClDuX,IAAkBvlF,KAAK0tE,cAAc4F,SAAWiS,GACpD,EAQA82B,GAAwBj7G,UAAUkrG,kBAAoB,SAASrN,GAC3D,OAAOj/F,KAAKy8G,cAAc77G,QAAQq+F,IAAgB,CACtD,EASAod,GAAwBj7G,UAAU+tF,YAAc,SAAS+pB,GACrD,MAAM6J,EAAe7J,EAAW3vF,oBAEhCvpB,KAAKggF,MACD,eACAk5B,EAAWzX,MAAOshB,EAAeA,EAAal9F,QAAKvlB,GAElDN,KAAK8iH,oBAAoB,eAAgB5J,KAI9Cl5G,KAAK48B,YAAY1mB,OAAOgjG,EAAWzX,OACnCzhG,KAAK08G,WAAWxmG,OAAOgjG,EAAWzX,OAE9BshB,GACA/iH,KAAKgR,eAAeu+E,aAAawzB,GAEzC,EAQA1G,GAAwBj7G,UAAUkiH,iBAAmB,SAASx/G,GAC1D,GAAI9D,KAAKgR,eAAe+9E,WACpB,OAAO/uF,KAAKgR,eAAe+9E,aAAa96D,MAAKiV,GAAKA,EAAE7mB,OAAS6mB,EAAE7mB,MAAMuE,OAAS9iB,GAEtF,EASAu4G,GAAwBj7G,UAAUy7B,qBAAuB,SAASxa,GAC9D,OAAOriB,KAAKgR,eAAeq9E,eAAep6D,MAAKm3D,GAAKA,EAAE/oE,QAAUA,GACpE,EASAg6F,GAAwBj7G,UAAU07B,mBAAqB,SAASza,GAC5D,GAAIriB,KAAKgR,eAAe+9E,WACpB,OAAO/uF,KAAKgR,eAAe+9E,aAAa96D,MAAKiV,GAAKA,EAAE7mB,QAAUA,GAEtE,EAQAg6F,GAAwBj7G,UAAUgxE,kCAAoC,SAASx1C,GAAa,IAAA2mF,EACxF,MAAMC,EAA+C,QAAvCD,EAAGvjH,KAAKgR,eAAeu+D,wBAAgB,IAAAg0C,OAAA,EAApCA,EAAsCxrD,IAElDyrD,GAIL,CAAEnnG,GAAUkL,MAAOlL,GAAUwK,OAAQzY,SAAQtK,IACzC,MAAMmvE,EAASr2C,EAAY3kB,QAAOoN,GAAKA,EAAEoI,YAAc3pB,IAEjD0+G,EADYpnF,GAAAA,MAAgBooF,GACT/qE,MAAMxgC,QAAO87C,GAASA,EAAM3wD,OAASU,IAE9DmvE,EAAO7kE,SAAQ,CAACiU,EAAOgY,KACdr6B,KAAKy7G,2BAA2B1wF,IAAI1I,EAAMo/E,QAC3CzhG,KAAKy7G,2BAA2B31F,IAAIzD,EAAMo/E,MAAO+gB,EAAOnoF,GAAKkgC,IAAIlrB,WACrE,GACF,GAEV,EAcAgtE,GAAwBj7G,UAAUy3E,aAAe,SAASM,EAAUC,GAChE,IAAMD,IAAYC,EAGd,OAFA3vE,GAAOE,KAAM,GAAE3J,+DAERqU,QAAQC,UAGnB,GAAItU,KAAKuuG,iBAGL,OAFA9kG,GAAOgH,MAAO,GAAEzQ,4CAETA,KAAKg5E,SAASH,aAAaM,EAAUC,GACvCr5D,MAAKwuE,IAMY,IAAAk1B,EAYd,GAjBItqC,IACAn5E,KAAK48B,YAAY1mB,OAAOijE,EAASsoB,OACjCzhG,KAAKy7G,2BAA2BvlG,OAAOijE,EAASsoB,QAGhDroB,IACIA,EAAS72D,eACTviB,KAAK8tG,mBAAoB,EAEzB9tG,KAAK6tG,mBAAoB,EAE7B7tG,KAAKy7G,2BAA2B31F,IAAIszD,EAASqoB,MAAOlT,SAAgB,QAALk1B,EAAXl1B,EAAah0B,WAAG,IAAAkpD,OAAL,EAAXA,EAAkBp0E,YACtErvC,KAAK48B,YAAY9W,IAAIszD,EAASqoB,MAAOroB,IAKrCD,GAAYC,EAAU,CACtB,MAAMsqC,EAAe1jH,KAAK08G,WAAW/3F,IAAIw0D,EAASsoB,OAE9CiiB,IACA1jH,KAAK08G,WAAWxmG,OAAOijE,EAASsoB,OAChCzhG,KAAK08G,WAAW52F,IAAIszD,EAASqoB,MAAOiiB,GAE5C,CA0BA,OAxBIn1B,IAcAA,EAAYr4B,UACNkjB,GAAYnrE,GAAQtH,YAAc0oD,GAAemN,SAAWnN,GAAeoL,WAKnDxsD,GAAQhC,+BAAiCmtE,EACrE/kE,QAAQC,UACRtU,KAAKg5E,SAAS0iC,aAAatiC,IAEAr5D,MAAK,IAAM/f,KAAKiV,OAAM,IAInExL,GAAOgH,MAAO,GAAEzQ,sCAEhB,IAAI6iH,EAAexuG,QAAQC,UAS3B,OAPI6kE,GACAn5E,KAAKmvF,YAAYhW,GAEjBC,IACAypC,EAAe7iH,KAAK+xE,SAASqH,IAG1BypC,EAAa9iG,MAAK,KAAM,GACnC,EASAs8F,GAAwBj7G,UAAU84E,kBAAoB,SAASg/B,GAC3D,MAAM6J,EAAe7J,EAAW3vF,oBAIhC,OAFAvpB,KAAKggF,MAAM,cAAek5B,EAAWzX,MAAOshB,EAAeA,EAAal9F,GAAK,MAExE7lB,KAAK8iH,oBAAoB,cAAe5J,GAKzCl5G,KAAKuuG,iBACEvuG,KAAKg5E,SAASH,aAAaqgC,EAAY,MAAMn5F,MAAK,KAAM,IAG/DgjG,GACAt5G,GAAOE,KAAM,GAAE3J,uBAAuBk5G,aACtCl5G,KAAKgjH,cAAcD,GAEZ1uG,QAAQC,SAAQ,KAG3B7K,GAAO7J,MAAO,GAAEI,iDAAiDk5G,KAE1D7kG,QAAQE,OAAO,qBAhBXF,QAAQE,OAAO,wCAiB9B,EAEA8nG,GAAwBj7G,UAAUqlF,kBAAoB,SAAS4F,EAAOgZ,GAGlE,OAFArlG,KAAKggF,MAAM,oBAAqBqM,EAAOgZ,GAEhCrlG,KAAKgR,eAAey1E,kBAAkB4F,EAAOgZ,EACxD,EAUAgX,GAAwBj7G,UAAUuiH,4BAA8B,SAASH,GACrE,IAAI5T,EAAS4T,EAASzrD,IAEtB,MAAM6rD,EAAkBhU,EAAOhvG,QAAQ,WACjCijH,EAAgBjU,EAAOhvG,QAAQ,mBAAoBgjH,GACzD,IAAIE,EAAkBlU,EAAO1kF,YAAY,gBAEzC,IAAuB,IAAnB24F,IACwB,IAArBC,GACAA,IAAoBD,EACvB,OAAOL,EAGX,MAAMO,EAAcnU,EAAOhvG,QAAQ,OAAQijH,GACrCG,EAASpU,EAAO1/E,UAAU2zF,EAAeE,EAAc,GAE7DnU,EAASA,EAAOxgE,QAAQ40E,EAAQ,IAChCF,EAAkBlU,EAAO1kF,YAAY,gBACrC,MAAM+4F,EAAgBrU,EAAOhvG,QAAQ,OAAQkjH,GACvCI,EAAUtU,EAAOvvG,MAAM,EAAG4jH,GAC1BE,EAAgBH,EAAOlgC,OACvBsgC,EAAUxU,EAAOvvG,MAAM4jH,GAI7B,OAFArU,EAAU,GAAEsU,QAAcC,IAAgBC,IAEnC,IAAIzxC,sBAAsB,CAC7BvvE,KAAMogH,EAASpgH,KACf20D,IAAK63C,GAEb,EAUAyM,GAAwBj7G,UAAUijH,2BAA6B,SAAS90C,GAAkB,IAAA+0C,EAAAC,EACtF,MAAMtY,EAAc,IAAIX,GAAiB/7B,EAAiBxX,KAC1D,IAAIysD,GAAoB,EACxB,MAAMxC,EAAqD,QAA3CsC,EAAGrY,EAAYR,YAAYpvF,GAAUkL,cAAM,IAAA+8F,OAAA,EAAxCA,EAA2C,GAE9D,GAAItC,EAAY,CACZ,MAAMyC,EAAwBzkH,KAAKg4E,yBAAyB37D,GAAUkL,OAElEy6F,EAAW9rD,YAAcuuD,IACzBzC,EAAW9rD,UAAYuuD,EACvBh7G,GAAOE,KAAM,GAAE3J,0CAA0CykH,KACzDD,GAAoB,EAE5B,MACI/6G,GAAON,KAAM,GAAEnJ,wDAGnB,MAAMkiH,EAAqD,QAA3CqC,EAAGtY,EAAYR,YAAYpvF,GAAUwK,cAAM,IAAA09F,OAAA,EAAxCA,EAA2C,GAE9D,GAAIrC,EAAY,CACZ,MAAMwC,EAAwB1kH,KAAKg4E,yBAAyB37D,GAAUwK,OAElEq7F,EAAWhsD,YAAcwuD,IACzBxC,EAAWhsD,UAAYwuD,EACvBj7G,GAAOE,KAAM,GAAE3J,0CAA0C0kH,KACzDF,GAAoB,EAE5B,MACI/6G,GAAON,KAAM,GAAEnJ,wDAGnB,OAAIwkH,EACO,IAAI7xC,sBAAsB,CAC7BvvE,KAAMmsE,EAAiBnsE,KACvB20D,IAAKk0C,EAAYN,aAIlBp8B,CACX,EAUA8sC,GAAwBj7G,UAAUghH,4BAA8B,SAAShzC,GACrE,MAAM68B,EAAc,IAAIX,GAAiBl8B,EAAkBrX,KA8B3D,MA5BA,CAAE17C,GAAUkL,MAAOlL,GAAUwK,OAAQzY,SAAQtK,IACzC,MAAM20C,EAAQwzD,EAAYR,YAAY3nG,GAChC6gH,EAAe3kH,KAAKgnB,eAAeljB,GAAWJ,OAC9C4yE,EAAgBt2E,KAAKs1E,gBAAgB,KAAMxxE,GAAWJ,OAE5D+0C,EAAMrqC,SAAQ,CAACmpD,EAAOl9B,KAEdk9B,EAAMrB,UADNyuD,GAAgBA,IAAiBruC,EACfjnB,GAAemN,SACzBmoD,GAAiBruC,EAEjBquC,EAEAruC,EAKDquC,EAAeruC,EACJj8C,EAAMg1B,GAAeoL,SAAWpL,GAAemN,SAK/CniC,EAAMg1B,GAAeiN,SAAWjN,GAAemN,SAV/CnN,GAAeoL,SAFfpL,GAAeiN,SAFfjN,GAAeiK,QAerC,GACF,IAGC,IAAIqZ,sBAAsB,CAC7BvvE,KAAMgsE,EAAkBhsE,KACxB20D,IAAKk0C,EAAYN,YAEzB,EASA0Q,GAAwBj7G,UAAUwjH,WAAa,SAASz2D,GACpD,MAAM,aAAE6B,GAAiBhwD,KAAKH,QAE9B,KAAKmwD,SAAAA,EAAc60D,eAAkB70D,SAAAA,EAAcC,QAAWD,SAAAA,EAAc80D,uBACxE,OAAO32D,EAGX,MAAMorD,EAAYn+E,GAAAA,MAAgB+yB,EAAY4J,KACxCyqD,EAASjJ,EAAU9gE,MAEzB,IAAK,MAAM8e,KAASirD,EAChB,GAAmB,UAAfjrD,EAAMn0D,KAAkB,CACxB,MAAM,QAAEsuB,GAAY6lC,EAAMc,IAAIpkC,MAAK9O,GAAYA,EAASnY,QAAUgsD,GAAc+rD,OAEhF,IAAKrzF,EAED,SAGJ,IAAIszF,EAAWztD,EAAM0B,KAAKhlC,MAAK9O,GAAYA,EAASuM,UAAYA,IAE3DszF,IACDA,EAAW,CACPtzF,UACAiC,OAAQ,KAIhB,MAAMsxF,EAAa7pF,GAAAA,YAAsB4pF,EAASrxF,QAClD,IAAIuxF,GAAa,EAkBjB,GAhBIl1D,SAAAA,EAAcC,SACdg1D,EAAWh1D,OAAS,EACpBi1D,GAAa,GAGbl1D,SAAAA,EAAc80D,wBACdG,EAAWE,kBAAoBn1D,EAAa80D,sBAC5CI,GAAa,IAIZj3G,GAAQtH,aAAT,MAAwBqpD,GAAAA,EAAc60D,gBACtCI,EAAWG,OAAS,EACpBF,GAAa,IAGZA,EAED,SAGJ,IAAIG,EAAe,GAEnB,IAAK,MAAM39G,KAAOrG,OAAO8G,KAAK88G,GAC1BI,GAAiB,GAAE39G,KAAOu9G,EAAWv9G,OAGzCs9G,EAASrxF,OAAS0xF,EAAavhC,MACnC,CAGJ,OAAO,IAAInR,sBAAsB,CAC7BvvE,KAAM+qD,EAAY/qD,KAClB20D,IAAK38B,GAAAA,MAAgBm+E,IAE7B,EAQA8C,GAAwBj7G,UAAUkkH,eAAiB,SAASn3D,GACxD,MAAMorD,EAAYn+E,GAAAA,MAAgB+yB,EAAY4J,KACxCyqD,EAASjJ,EAAU9gE,MAEzB,IAAK,MAAM8e,KAASirD,EAChBjrD,EAAMrB,UAAY7G,GAAeiK,SACjC/B,EAAM1I,WAAQvuD,EACdi3D,EAAMP,gBAAa12D,EAGvB,OAAO,IAAIqyE,sBAAsB,CAC7BvvE,KAAM+qD,EAAY/qD,KAClB20D,IAAK38B,GAAAA,MAAgBm+E,IAE7B,EAKA8C,GAAwBj7G,UAAUmkH,yBAA2B,WAEzD,IAAKvlH,KAAKgR,eAAe+9E,YAAc/uF,KAAK88G,eACxC,OAGJ,MAAMvgD,EAAUv8D,KAAKgR,eAAe+9E,aAEb,IAAnBxyB,EAAQ74D,QAAgB64D,EAAQ,GAAGt+C,YACnCje,KAAK88G,eAAiBvgD,EAAQ,GAAGt+C,UAEjCje,KAAK88G,eAAehiF,QAAUl7B,IAC1B6J,GAAO7J,MAAO,GAAEI,6BAA6BJ,IAAQ,EAGzDI,KAAK88G,eAAe0I,cAAgB,KAChCxlH,KAAKggF,MAAM,8BAA+BhgF,KAAK88G,eAAev4F,MAAM,EAGhF,EASA83F,GAAwBj7G,UAAUqkH,mBAAqB,SAASt3D,GAAiC,IAApBu3D,EAAUjiH,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GACnF,IAAKzD,KAAK0tE,cACN,OAAOvf,EAEX,MAAMorD,EAAYn+E,GAAAA,MAAgB+yB,EAAY4J,KAGxC7B,EAAYwvD,EAAar2D,GAAeoL,SAAWpL,GAAeiN,SAClEkmD,EAASjJ,EAAU9gE,MAAMxgC,QAAOoU,GAAKA,EAAEjpB,OAASiZ,GAAUwK,OAASwF,EAAE6pC,YAAcA,IAEzF,IAAK,MAAMqB,KAASirD,EAChB,GAAIxiH,KAAK0tE,cAAc2F,YAAcra,GAAc2sD,IAAK,CACpD,MAAMC,EAAW5lH,KAAKg5E,SAAS8/B,cAAc6M,KAAO3lH,KAAKg5E,SAAS8/B,cAC5D+M,EAAYD,EAAShN,KAAOgN,EAAShN,KAAOX,GAC5C6N,EAAcF,EAAS/M,OAAS+M,EAAS/M,OAASZ,GAClD19C,EAAMhD,EAAMgD,IACZwrD,EAAkBvjG,GAAAA,kCAClB+3C,IAAQv6D,KAAKi/G,sBACbj/G,KAAKsiH,mBACLvgD,EAAQxmD,KAAKgzB,OAAOw3E,EAAkBD,EAAcD,GAAa,KAIvEtuD,EAAMx5C,UAAY,CAAE,CAChB3a,KAAM,KACN2+D,SAER,MAKIxK,EAAMx5C,eAAYzd,EAI1B,OAAO,IAAIqyE,sBAAsB,CAC7BvvE,KAAM+qD,EAAY/qD,KAClB20D,IAAK38B,GAAAA,MAAgBm+E,IAE7B,EAQA8C,GAAwBj7G,UAAU64E,8BAAgC,WAAiC,IAAxBkgC,EAAe12G,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,KAIzF,IAAMzD,KAAKk5E,sBAAuBl5E,KAAKi5E,oBACnC,OAAOj5E,KAAKg5E,SAASF,wBAAuB,GAGhD,GAAIqhC,EACA,OAAOn6G,KAAK60E,0BACR70E,KAAK49G,kBAAkBj5F,IAAIw1F,EAAgBz3F,iBAC3Cy3F,GAER,MAAM96E,EAAW,GAEjB,IAAK,MAAMhd,KAASriB,KAAK20E,sBACrBt1C,EAAS/vB,KAAKtP,KAAK60E,0BAA0B70E,KAAK49G,kBAAkBj5F,IAAItC,EAAMK,iBAAkBL,IAGpG,OAAOhO,QAAQorB,WAAWJ,EAC9B,EAEAg9E,GAAwBj7G,UAAU+wE,oBAAsB,SAAShkB,GAC7D,IAAIohB,EAAmBphB,EAkBvB,OAhBAnuD,KAAKggF,MAAM,oCAAqC6+B,GAAQtvC,IAGxDA,EAAmBvvE,KAAK4kH,WAAWr1C,GAE9BvvE,KAAKuuG,mBACNh/B,EAAmBvvE,KAAKqkH,2BAA2B90C,GACnDA,EAAmBvvE,KAAK2jH,4BAA4Bp0C,IAIxDA,EAAmBvvE,KAAKuiH,iBAAiBhzC,GACzCA,EAAmBvvE,KAAKylH,mBAAmBl2C,GAAkB,GAE7DvvE,KAAKggF,MAAM,qCAAsC6+B,GAAQtvC,IAElD,IAAIl7D,SAAQ,CAACC,EAASC,KACzBvU,KAAKgR,eAAemhE,oBAAoB5C,GACnCxvD,MAAK,KACF/f,KAAKggF,MAAM,gCACX,MAAM48B,EAAapqD,GAAAA,SAAiB+c,EAAiBxX,KAEjD6kD,IAAe58G,KAAK48G,aACpB58G,KAAK48G,WAAaA,EAClB58G,KAAKya,aAAapR,KAAK6oB,GAAAA,QAAAA,oBAA+BlyB,KAAM48G,IAGhE58G,KAAKulH,2BAELjxG,GAAS,IACV4X,IACClsB,KAAKggF,MAAM,+BAAgC9zD,GAC3ClsB,KAAKya,aAAapR,KAAK6oB,GAAAA,QAAAA,6BAAwChG,EAAKlsB,MACpEuU,EAAO2X,EAAI,GACb,GAEd,EAEAmwF,GAAwBj7G,UAAUwxE,qBAAuB,SAASzkB,GAC9D,IAAIihB,EAAoBjhB,EAOxB,GALAnuD,KAAKggF,MAAM,qCAAsC6+B,GAAQ1wD,IAGzDihB,EAAoBpvE,KAAK4kH,WAAWx1C,GAEhCpvE,KAAKuuG,iBAAkB,CAEvB,IAAKvuG,KAAKiV,MAAO,CACb,MAAM+wG,EAAqBhmH,KAAKgR,eAAeo+D,kBAE/CA,EAAoBpvE,KAAKs9G,QAAQvW,cAAc33B,EAAmB42C,GAClEhmH,KAAKggF,MAAM,gDAAiD6+B,GAAQzvC,GACxE,CACIpvE,KAAKwsG,kBACLp9B,EAAoBpvE,KAAKg5E,SAAS8gC,kCAAkC1qC,GACpEpvE,KAAKggF,MAAM,oDAAqD6+B,GAAQzvC,KAE5EA,EAAoBpvE,KAAKg5E,SAASsgC,0BAA0BlqC,GAC5DpvE,KAAKggF,MAAM,2DAA4D6+B,GAAQzvC,GACnF,MACQpvE,KAAKwsG,kBAELp9B,EAAoBpvE,KAAKysG,UAAUwZ,uBAC/B72C,GACA,GACJpvE,KAAKggF,MAAM,kDAAmD6+B,GAAQzvC,KAE1EA,EA7tCe,SAAS7Z,GAC5B,GAAoB,iBAATA,GAA8B,OAATA,GACL,iBAAbA,EAAKwC,IAGf,OAFAtuD,GAAON,KAAK,kDAELosD,EAIX,MAAMn6B,EAAY3rB,EAAQ,MACpB4d,EAAU+N,EAAUkG,MAAMi0B,EAAKwC,UAEd,IAAZ1qC,QACyB,IAAlBA,EAAQorB,OACft4C,MAAMC,QAAQitB,EAAQorB,QAC7BprB,EAAQorB,MAAMrqC,SAAQmpD,IASlB,MAAM2uD,EAAa,GACbC,EAAe,GAcrB,QAZgC,IAArB5uD,EAAMP,YACV72D,MAAMC,QAAQm3D,EAAMP,aACvBO,EAAMP,WAAW5oD,SAAQ+1C,SACU,IAApBA,EAAM6J,WACU,QAApB7J,EAAM6J,gBACkB,IAAhB7J,EAAM0K,OACbq3D,EAAW52G,KAAKpJ,OAAOi+C,EAAM0K,MAAMloC,MAAM,KAAK,IAEtD,IAIJxmB,MAAMC,QAAQm3D,EAAM1I,OAAQ,CAC5B,IAAI9oD,EAEJ,IAAKA,EAAI,EAAGA,EAAIwxD,EAAM1I,MAAMnrD,OAAQqC,IACF,iBAAnBwxD,EAAM1I,MAAM9oD,SACa,IAAtBwxD,EAAM1I,MAAM9oD,GAAG8f,IACtBqgG,EAAWtlH,QAAQ22D,EAAM1I,MAAM9oD,GAAG8f,KAAO,IAC5CsgG,EAAa72G,KAAKioD,EAAM1I,MAAM9oD,WACvBwxD,EAAM1I,MAAM9oD,IAI3B,IAAKA,EAAI,EAAGA,EAAIwxD,EAAM1I,MAAMnrD,OAAQqC,SACF,IAAnBwxD,EAAM1I,MAAM9oD,IACnBogH,EAAa72G,KAAKioD,EAAM1I,MAAM9oD,IAItCwxD,EAAM1I,MA0BtB,WAAuD,IAAhB0E,EAAS9vD,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GAC/C,IAAKwK,GAAQxH,aAAewH,GAAQ5G,qBAAqB,IACrD,OAAOksD,EAGX,IAAI6yD,EAAgB,IAAK7yD,GAsBzB,OApB2BA,EAAUt7C,QAAOw/C,GACjB,YAAvBA,EAASC,WAA8C,MAAnBD,EAAS9vD,QAC5C+1B,KAAI+5B,GAAYA,EAAS5xC,KAEXzX,SAAQi4G,IAEvB,MAAMC,EAAYF,EAAcnyF,MAAKg/B,GACjCA,EAAKptC,KAAOwgG,GAA6B,UAAnBpzD,EAAKyE,YAE/B4uD,EAAU3+G,MAAS,GAAE0nD,GAAeoL,YAAY4rD,IAGhDD,EACMA,EAAcnuG,QAAOg7C,GAAQA,EAAKptC,KAAOwgG,IAI/CD,EAAc92G,KAAKg3G,EAAU,IAG1BF,CACX,CAtD8BG,CAA8BJ,EAChD,KAIR,MAAMrf,EAAS1rE,EAAUorF,MAAMn5F,GAG/B,OAAO,IAAIslD,sBAAsB,CAC7BvvE,KAAMmyD,EAAKnyD,KACX20D,IAAK+uC,GAEb,CAwpC4B2f,CAAer3C,GAQvC,OAJAA,EAAoBpvE,KAAKuiH,iBAAiBnzC,GAC1CA,EAAoBpvE,KAAKylH,mBAAmBr2C,GAC5CpvE,KAAKggF,MAAM,0DAA2D6+B,GAAQzvC,IAEvE,IAAI/6D,SAAQ,CAACC,EAASC,KACzBvU,KAAKgR,eAAe4hE,qBAAqBxD,GACpCrvD,MAAK,KACF/f,KAAKggF,MAAM,iCACX,MAAM68B,EAAcrqD,GAAAA,SAAiB4c,EAAkBrX,KAEnD8kD,IAAgB78G,KAAK68G,cACrB78G,KAAK68G,YAAcA,EACnB78G,KAAKya,aAAapR,KAAK6oB,GAAAA,QAAAA,qBAAgClyB,KAAM68G,IAGjE78G,KAAKulH,2BAELjxG,GAAS,IACV4X,IACClsB,KAAKggF,MAAM,gCAAiC9zD,GAC5ClsB,KAAKya,aAAapR,KAAK6oB,GAAAA,QAAAA,8BAAyChG,EAAKlsB,MACrEuU,EAAO2X,EAAI,GACb,GAEd,EAWAmwF,GAAwBj7G,UAAUyzE,0BAA4B,SAASxuD,EAAa8zF,GAAiB,IAAAuM,EAAAC,EACjG,GAAItgG,EAAc,EACd,MAAM,IAAInlB,MAAO,wBAAuBmlB,KAE5C,IAAK8zF,EACD,MAAM,IAAIj5G,MAAM,gCAEpB,MAAMuhB,EAAa03F,EAAgBz3F,gBAInC,IAAK1iB,KAAKk5E,qBAAuBihC,EAAgB3sF,UAG7C,OAFAxtB,KAAK49G,kBAAkB93F,IAAIrD,EAAY4D,GAEhChS,QAAQC,UAGnB,MAAMsyG,EAAuB5mH,KAAKg5E,SAAS+hC,8BAA8BZ,GAKzE,OAAKA,EAAgBhZ,iBAAmBluE,GAAU,UAAVA,QAAoB2zF,IAAyBvgG,GAC7E8zF,EAAgBhZ,iBAAmBluE,GAAU,UAAVA,SAChC5M,EAAc,GACdugG,KAAmD,QAA/BF,EAAKvM,EAAgBnZ,kBAAU,IAAA0lB,GAAe,QAAfC,EAA1BD,EAA4B/zB,qBAAa,IAAAg0B,OAAf,EAA1BA,EAA2C/jG,QACpEvO,QAAQC,WAGnBtU,KAAK49G,kBAAkB93F,IAAIrD,EAAY4D,GAEhCrmB,KAAK67G,6BAA6B77G,KAAK6mH,4BAA4BxgG,EAAa8zF,IAC3F,EAUAkC,GAAwBj7G,UAAUy6G,6BAA+B,SAAS1iF,GACtE,MAAM2tF,EAAc9mH,KAAKy+G,8BACpB1pB,SAAQ,IAAM57D,IAInB,OAFAn5B,KAAKy+G,8BAAgCqI,EAE9BA,CACX,EASAzK,GAAwBj7G,UAAUylH,4BAA8B,SAASxgG,EAAa8zF,GAAiB,IAAAa,EACnG,MAAMC,EAAcj7G,KAAK88B,mBAAmBq9E,EAAgBnZ,YAE5D,IAAKia,EACD,OAAO5mG,QAAQC,UAEnB,MAAM4mG,EAAaD,EAAYzmB,gBAE/B,GAAK0mB,SAAqB,QAAXF,EAAVE,EAAYzmB,iBAAS,IAAAumB,IAArBA,EAAuBt3G,OACxB,OAAO2Q,QAAQC,UAGnB,MAAM+tG,EAAwBlI,EAAgBhZ,iBAAmBluE,GAAU,UAAVA,SAAqBjzB,KAAKw6G,uBAGrFuM,EAAa1E,EAnmFgB,sBADD,qBAwmFlCnH,EAAW8L,sBAAwBD,EACnCt9G,GAAOE,KAAM,GAAE3J,mDAAmD+mH,WAAoB5M,KAGtFn6G,KAAKinH,sBAAwBjnH,KAAKg5E,SAASkhC,8BAA8BC,EAAiB9zF,GAC1F,MAAM6gG,EAAclnH,KAAKg5E,SAASyhC,2BAA2BN,GACvDnnF,EAAYmnF,EAAgBhZ,eAElC,GAAInhG,KAAKwsG,gBAAiB,CACtB,IAAK,MAAM8N,KAAYY,EAAWzmB,UAAW,CACU,IAAA0yB,EAAAC,EAA/ClM,EAAWzmB,UAAU50E,eAAey6F,KACpCY,EAAWzmB,UAAU6lB,GAAUvhC,OAAS/4E,KAAKinH,sBAAsB3M,GAInErsG,GAAQtH,cAAgBu0G,EAAWzmB,UAAU6lB,GAAU0M,sBAAwBD,GAE3E/mH,KAAKyxE,4BAA8BzY,GAAcggD,MACjC,QAAZmO,EAAAnnH,KAAKH,eAAO,IAAAsnH,GAAc,QAAdC,EAAZD,EAAcv5C,oBAAY,IAAAw5C,GAA1BA,EAA4B5O,kBACzB6J,GACAriH,KAAKuuG,oBACZ2M,EAAWzmB,UAAU6lB,GAAUlB,WAAa8N,EAAY5M,IAGpE,CACAt6G,KAAKg5E,SAASojC,0BAA0BjC,EAAiBe,EAG7D,MAAO,GAAI70F,EAAc,EAAG,KAAAghG,EAAAC,EACxB,IAAIC,EDrpFmB,ECmqFvB,GAXIv0F,IAAcC,GAAU,UAAVA,QAAoBknF,EAAgBv8F,WAAayI,IAC/DkhG,EAAchsG,KAAKgzB,MAAM4rE,EAAgBv8F,WAAayI,IAG1D60F,EAAWzmB,UAAU,GAAG1b,QAAS,EACjCmiC,EAAWzmB,UAAU,GAAGH,sBAAwBizB,EAGhDt5G,GAAQtH,cAAgBu0G,EAAWzmB,UAAU,GAAGuyB,sBAAwBD,GAGpE/mH,KAAKyxE,4BAA8BzY,GAAcggD,KAAmB,QAAhBqO,EAAIrnH,KAAKH,eAAO,IAAAwnH,GAAc,QAAdC,EAAZD,EAAcz5C,oBAAY,IAAA05C,GAA1BA,EAA4B9O,iBAAkB,KAAAgP,EACtG,IAAI/pG,EAAuC,QAAhC+pG,EAAGxnH,KAAKggH,gCAAwB,IAAAwH,OAAA,EAA7BA,EAA+B5O,KAET,IAAA6O,EAAAC,EAAhC10F,IAAcC,GAAU,UAAVA,SACdxV,EAC2E,QADpEgqG,EACwD,QADxDC,EAAG1nH,KAAKg5E,SAASmgC,yBAAyBgB,EAAgBhZ,gBAC5DltE,MAAK0zF,GAASA,EAAMrzB,wBAA0BizB,WAAY,IAAAG,OAAA,EADrDA,EACuDtO,kBAAU,IAAAqO,EAAAA,EAAIhqG,GAEnFy9F,EAAWzmB,UAAU,GAAG2kB,WAAa37F,CACzC,MACIy9F,EAAWzmB,UAAU,GAAG2kB,gBAAa94G,CAE7C,MACI46G,EAAWzmB,UAAU,GAAG1b,QAAS,EAKrC,OAFAtvE,GAAOE,KAAM,GAAE3J,2BAA2BqmB,eAAyB1d,KAAKC,UAAUsyG,EAAWzmB,cAEtFwmB,EAAYvmB,cAAcwmB,GAAYn7F,MAAK,KAC9Co6F,EAAgBrY,qBAAuBz7E,EACvCrmB,KAAKya,aAAapR,KAAK6oB,GAAAA,QAAAA,2CAAsDioF,EAAgB,GAErG,EAeAkC,GAAwBj7G,UAAUo5E,uBAAyB,SAASzB,GAChEtvE,GAAOgH,MAAO,GAAEzQ,+BAA+B+4E,KAC/C,MAAMkpC,EAAUjiH,KAAKk5E,sBAAwBH,EAI7C,OAFA/4E,KAAKk5E,oBAAsBH,EAEvB/4E,KAAKuuG,kBACLvuG,KAAKg5E,SAASwB,uBAAuBzB,IAG9B,GAGJkpC,CACX,EAWA5F,GAAwBj7G,UAAUwmH,UAAY,SAASC,GAA2C,IAApCpsG,EAAQhY,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,IAAKqkH,EAAYrkH,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,IACzF,IAAKzD,KAAKs8G,YAAa,CACnB,GAAIt8G,KAAKgR,eAAe+9E,WAAY,CAChC,MAAMg5B,EAAY/nH,KAAKgR,eAAe+9E,aAAa96D,MAAKiV,GAAKA,EAAEylD,OAE/D3uF,KAAKs8G,YAAcyL,GAAaA,EAAUp5B,KAC1C3uF,KAAKs8G,aAAe7yG,GAAOE,KAAM,GAAE3J,+CACvC,CAEA,IAAKA,KAAKs8G,YAAa,CACnB,MAAM0L,EAAkB7nH,MAAMqqB,KAAKxqB,KAAK48B,YAAYrsB,UAAU0jB,MAAK5O,GAAKA,EAAE9C,iBAEtEviB,KAAKgR,eAAe69E,kBAAoBm5B,IACxChoH,KAAKs8G,YAAct8G,KAAKgR,eAAe69E,iBAAiBm5B,EAAgBhnB,aAE5EhhG,KAAKs8G,aAAe7yG,GAAOE,KAAM,GAAE3J,gEACvC,CAEIA,KAAKs8G,cACLt8G,KAAKs8G,YAAY2L,aAAejoH,KAAKkoH,cAAc93F,KAAKpwB,MAEhE,CAEA,GAAIA,KAAKs8G,YAAa,CAClB,GAAIt8G,KAAKs8G,YAAY6L,WAOjB,YANAnoH,KAAKu8G,gBAAgBjtG,KAAK,CACtBu4G,QACApsG,WACAqsG,iBAMR9nH,KAAKs8G,YAAY8L,WAAWP,EAAOpsG,EAAUqsG,EACjD,MACIr+G,GAAON,KAAM,GAAEnJ,+CAEvB,EAWAq8G,GAAwBj7G,UAAU8mH,cAAgB,SAASz5G,GAGvD,GAAIzO,KAAKs8G,aAA8B,KAAf7tG,EAAM45G,MAAeroH,KAAKu8G,gBAAgB74G,OAAQ,CACtE,MAAM,MAAEmkH,EAAK,SAAEpsG,EAAQ,aAAEqsG,GAAiB9nH,KAAKu8G,gBAAgBxqE,QAE/D/xC,KAAKs8G,YAAY8L,WAAWP,EAAOpsG,EAAUqsG,EACjD,CACJ,EAMAzL,GAAwBj7G,UAAUowE,qBAAuB,WACrD,MAAM45B,EAAU54C,GAAAA,eAEhB/oD,GAAOE,KAAM,GAAE3J,oCAAoCorG,KACnDprG,KAAK2sG,eAAe2D,eAAelF,EACvC,EAMAiR,GAAwBj7G,UAAUi4E,kBAAoB,WAClD5vE,GAAOE,KAAM,GAAE3J,qCACfA,KAAK2sG,eAAeyD,qBACxB,EAOAiM,GAAwBj7G,UAAU2Y,MAAQ,WACtC/Z,KAAKggF,MAAM,QAGXhgF,KAAKsqE,eAAe1wC,IAAIquE,GAAoCjoG,KAAKg9G,mBACjEh9G,KAAKsqE,eAAe1wC,IAAIquE,GAAyCjoG,KAAK+8G,uBACtE/8G,KAAKuuG,kBAAoBvuG,KAAKgR,eAAe2oB,oBAAoB,QAAS35B,KAAK+9G,SAE/E,IAAK,MAAMuK,KAActoH,KAAKw8G,aAAajsG,SACvC,IAAK,MAAMisG,KAAgB8L,EAAW/3G,SAClC,IAAK,MAAM0vG,KAAezD,EACtBx8G,KAAKohH,mBAAmBnB,GAIpCjgH,KAAKw8G,aAAav0G,QAElBjI,KAAKy8G,cAAgB,GAErBz8G,KAAKs8G,YAAc,KACnBt8G,KAAKu8G,gBAAkB,GAElBv8G,KAAKkuB,IAAIq6F,sBAAsBvoH,OAChCyJ,GAAO7J,MAAO,GAAEI,iDAEO,OAAvBA,KAAKo9G,gBACLt0G,OAAO4Q,cAAc1Z,KAAKo9G,eAC1Bp9G,KAAKo9G,cAAgB,MAEzB3zG,GAAOE,KAAM,GAAE3J,+BACfA,KAAKgR,eAAe+I,OACxB,EAEAsiG,GAAwBj7G,UAAUi3E,aAAe,SAASn4E,GACtD,OAAOF,KAAKwoH,sBAAqB,EAAoBtoH,EACzD,EAEAm8G,GAAwBj7G,UAAU6wE,YAAc,SAAS/xE,GACrD,OAAOF,KAAKwoH,sBAAqB,EAAkBtoH,EACvD,EAEAm8G,GAAwBj7G,UAAUonH,qBAAuB,SACjDC,EACAvoH,GACJ,MAAMwoH,EAAUD,EAAU,QAAU,SAEpCzoH,KAAKggF,MAAO,SAAQ0oC,IAAW//G,KAAKC,UAAU1I,EAAa,KAAM,MAEjE,MAAMyoH,EAAgBA,CAAC3gB,EAAW4gB,EAAWC,KACzC,IACI7oH,KAAKggF,MACA,SAAQ0oC,2BAAkC7J,GAAQ7W,IAElDhoG,KAAKuuG,mBAGDvuG,KAAKg/G,mBAAmB3iG,GAAUwK,QAC/B7mB,KAAK2sG,eAAe4D,wBACxBvwG,KAAKwxE,uBAITw2B,EAAY,IAAIr1B,sBAAsB,CAClCvvE,KAAM4kG,EAAU5kG,KAChB20D,IAAK/3D,KAAK2sG,eAAe6D,gCACrBxI,EAAUjwC,OAGlB/3D,KAAKggF,MACA,SAAQ0oC,wEAET7J,GAAQ7W,KAGhB,MAAMmS,EAAkBn6G,KAAK20E,sBAAsB,GAG/C30E,KAAKwsG,iBAAmBv+F,GAAQhC,gCAC5BkuG,aAAe,EAAfA,EAAiBhZ,kBAAmBluE,GAAU,UAAVA,QACrCjzB,KAAKuuG,oBAERvG,EAAYhoG,KAAKysG,UAAUoF,sBAAsB7J,GACjDhoG,KAAKggF,MAAO,SAAQ0oC,yCAAgD7J,GAAQ7W,MAG3EhoG,KAAKH,QAAQstE,YAAcl/D,GAAQhC,+BAEpC+7F,EAAY,IAAIr1B,sBAAsB,CAClCvvE,KAAM4kG,EAAU5kG,KAChB20D,IAAK/3D,KAAK8sG,YAAY6C,eAAe3H,EAAUjwC,OAGnD/3D,KAAKggF,MACA,SAAQ0oC,2CAET7J,GAAQ7W,KAGhB,MAAMp5C,EAAU5uD,KAAKyhH,gBAAgBzZ,GAErChoG,KAAK8oH,sBAAsBl6D,GAE3Bg6D,EAAU5gB,EACd,CAAE,MAAOx4F,GACLxP,KAAKggF,MAAO,SAAQ0oC,WAAkBl5G,GACtCxP,KAAKggF,MAAO,SAAQ0oC,WAAkB7J,GAAQ7W,IAC9Cv+F,GAAO7J,MAAO,GAAEI,cAAc0oH,WAAkBl5G,EAAGqvG,GAAQ7W,IAE3D6gB,EAASr5G,EACb,GAGEu5G,EAAgBA,CAAC78F,EAAK28F,KACxB7oH,KAAKggF,MAAO,SAAQ0oC,aAAoBx8F,GACxC,MAAM88F,EACAP,EACIv2F,GAAAA,QAAAA,oBACAA,GAAAA,QAAAA,qBAEVlyB,KAAKya,aAAapR,KAAK2/G,EAAW98F,EAAKlsB,MAEvC6oH,EAAS38F,EAAI,EAKjB,GAAIlsB,KAAKq9G,kCAAoCr9G,KAAK0tE,cAAe,CAC7D,MAAM,UAAE5pE,GAAc9D,KAAK0tE,cACrBwuC,EAAel8G,KAAKgR,eAAe2nE,kBACpC1gE,QAAOoN,IAAC,IAAAu0F,EAAAC,EAAA,OAAIx0F,EAAE8V,WAAsB,QAAVy+E,EAAAv0F,EAAE8V,gBAAQ,IAAAy+E,GAAO,QAAPC,EAAVD,EAAYv3F,aAAK,IAAAw3F,OAAP,EAAVA,EAAmBjzF,QAAS9iB,CAAS,IAEpE,GAAIo4G,EAAax4G,OAAQ,KAAAulH,EAAAC,EAAAC,EACrB,IAAIC,EAAwD,QAA5CH,EAAG59G,eAAeC,gBAAgBxH,UAAU,IAAAmlH,OAAA,EAAzCA,EAA2Cn8G,OAC9D,MAAMu8G,EAA0C,QAArBH,EAAGlpH,KAAK0tE,qBAAa,IAAAw7C,OAAA,EAAlBA,EAAoB51C,SAC5Cg2C,EAA2C,QAArBH,EAAGnpH,KAAK0tE,qBAAa,IAAAy7C,OAAA,EAAlBA,EAAoB91C,UAE/C+1C,GAAgBC,IAChBD,EAAeA,EACVnxG,QAAOyoE,GAAQA,EAAKzzE,SAAS+6C,gBAAmB,GAAElkD,KAAaulH,OAGpED,GAAgBE,GAGhBF,EAAa3kF,MAAKi8C,GACPA,EAAKzzE,SAAS+6C,gBAAmB,GAAElkD,KAAawlH,KAA4B,EAAI,IAM3Fr7G,GAAQpE,mBAAqB/F,IAAcuY,GAAUwK,QACrDuiG,EAAeA,EACVnxG,QAAOyoE,GAAQA,EAAKzzE,SAAS+6C,gBAAmB,GAAE3rC,GAAUwK,SAASmyC,GAAcuwD,YAI5F,IAAK,MAAMh7B,KAAe2tB,EACtB3tB,EAAYi7B,oBAAoBJ,EAExC,CACJ,CAEA,OAAO,IAAI/0G,SAAQ,CAACC,EAASC,KACzB,IAAIk1G,EAGAA,EADAhB,EACYzoH,KAAKgR,eAAeihE,YAAY/xE,GAEhCF,KAAKgR,eAAeqnE,aAAan4E,GAGjDupH,EACK1pG,MACGg4C,GAAO4wD,EAAc5wD,EAAKzjD,EAASC,KACnC3U,GAASmpH,EAAcnpH,EAAO2U,IAAQ,GAEtD,EAOA8nG,GAAwBj7G,UAAUsoH,oBAAsB,SAAS7f,GAC7D,OAAIA,GAAWA,EAAQjvC,QAAUivC,EAAQjvC,OAAOl3D,OACrCmmG,EAAQjvC,OAAO,GAAG/L,MAAM,GACxBg7C,GAAWA,EAAQh7C,OAASg7C,EAAQh7C,MAAMnrD,OAC1CmmG,EAAQh7C,MAAM,GAGlB,IACX,EASAwtD,GAAwBj7G,UAAU0nH,sBAAwB,SAASl6D,GAC/D,IAAK,MAAMvsC,KAASriB,KAAK48B,YAAYrsB,SAAU,CAC3C,MACMo5G,EAAc/gB,GADDvmF,EAAMK,iBAEnBknG,EAAmB5pH,KAAKuuG,iBACvB,GAAElsF,EAAMoL,aAAak8F,IACtBtnG,EAAMgiF,WAEZ,GAAIz1C,EAAQ7jC,IAAI6+F,GAAmB,CAC/B,MAAMxe,EAAUx8C,EAAQjqC,IAAIilG,GAE5B,IAAKxe,EAGD,YAFA3hG,GAAO7J,MAAO,GAAEI,iCAAiC4pH,KAIrD,MAAMze,EAAUnrG,KAAK08G,WAAW/3F,IAAItC,EAAMo/E,OACpCooB,EAAa7pH,KAAK0pH,oBAAoBte,GACtC0e,EAAa9pH,KAAK0pH,oBAAoBve,GAGxC0e,IAAeC,IACfA,GAAcrgH,GAAO7J,MAAO,GAAEI,mCAAmCqiB,gBAAoB+oF,KACrFprG,KAAK08G,WAAW52F,IAAIzD,EAAMo/E,MAAO2J,GACjCprG,KAAKya,aAAapR,KAAK6oB,GAAAA,QAAAA,yBAAoC7P,EAAOwnG,GAE1E,MAAYxnG,EAAM0Q,gBAAmB1Q,EAAMmL,WAIvC/jB,GAAON,KAAM,GAAEnJ,kDAAkDqiB,aAAiBunG,IAE1F,CACJ,EAOAvN,GAAwBj7G,UAAUg1E,cAAgB,SAASzkE,GACvD,MAAMo4G,EAAW/pH,KAAK28G,YAAY5xF,IAAIpZ,GAMtC,OAJKo4G,GACD/pH,KAAK28G,YAAY7nG,IAAInD,IAGjBo4G,CACZ,EAEA1N,GAAwBj7G,UAAU2vE,gBAAkB,SAASpc,GAQzD,OAPA30D,KAAKggF,MAAM,kBAAmBr3E,KAAKC,UAAU,CACzC+rD,UAAWA,EAAUA,UACrB0b,OAAQ1b,EAAU0b,OAClBN,cAAepb,EAAUob,cACzBonB,iBAAkBxiC,EAAUwiC,kBAC7B,KAAM,MAEFn3F,KAAKgR,eAAe+/D,gBAAgBpc,EAC/C,EAOA0nD,GAAwBj7G,UAAUimB,0BAA4B,WAC1D,IAAI2iG,EAAgB,EAEoC,IAAAC,EAMxD,OANIjqH,KAAKwsG,iBAAmBxsG,KAAKinH,sBAC7B+C,EAA4E,QAA/DC,EAAGjqH,KAAKinH,sBAAsBhvG,QAAOvL,GAAUxC,QAAQwC,YAAQ,IAAAu9G,OAAA,EAA5DA,EAA8DvmH,OACvE1D,KAAKwsG,kBACZwd,EAAgB9R,GAAex0G,QAG5BsmH,CACX,EAQA3N,GAAwBj7G,UAAU0e,SAAW,WACzC,OAAO9f,KAAKgR,eAAe8O,UAC/B,EASAu8F,GAAwBj7G,UAAUuhH,0BAA4B,SAAStgG,GACnE,MAAMo/E,EAAQp/E,EAAMo/E,MACpB,IAAI3qC,EAAW92D,KAAK6hH,SAASpgB,GAO7B,GALI3qC,GACArtD,GAAO7J,MAAO,GAAEI,6CAA6CyhG,MAI7DzhG,KAAKwsG,iBACDnqF,EAAM8+E,iBAAmBluE,GAAU,UAAVA,QAAqBjzB,KAAKqiH,wBAavDvrD,EAAW,CACPjI,MAAO,CAAE2D,GAAAA,gBACToI,OAAQ,QAfqE,CACjF9D,EAAW,CACPjI,MAAO,GACP+L,OAAQ,IAEZ,IAAK,IAAI70D,EAAI,EAAGA,EAAImyG,GAAex0G,OAAQqC,IACvC+wD,EAASjI,MAAMv/C,KAAKkjD,GAAAA,gBAExBsE,EAAS8D,OAAOtrD,KAAK,CACjBu/C,MAAOiI,EAASjI,MAAMxuD,QACtB2tD,UAAW,OAEnB,CAMA,IAAKhuD,KAAKH,QAAQstE,WAAY,CAK1B,MAAM+8C,EAAepzD,EAASjI,MAAMnrD,OAEpC,IAAK,IAAIqC,EAAI,EAAGA,EAAImkH,IAAgBnkH,EAAG,CACnC,MAAMkxD,EAAcH,EAASjI,MAAM9oD,GAC7BkpG,EAAUz8C,GAAAA,eAEhBsE,EAASjI,MAAMv/C,KAAK2/F,GACpBn4C,EAAS8D,OAAOtrD,KAAK,CACjBu/C,MAAO,CAAEoI,EAAag4C,GACtBjhD,UAAW,OAEnB,CACJ,CAIA,OAHA8I,EAAS4D,KAAOr4C,EAAMgiF,WACtBrkG,KAAK08G,WAAW52F,IAAI27E,EAAO3qC,GAEpBA,CACX,EAOAulD,GAAwBj7G,UAAU0sE,gBAAkB,WAChD,OAAO9tE,KAAKuuG,gBAChB,EAOA8N,GAAwBj7G,UAAUiuC,SAAW,WACzC,MAAQ,UAASrvC,KAAK6lB,WAAW7lB,KAAKiV,MAAQ,MAAQ,QAC1D,ECnqGA,MAAMxL,IAASC,EAAAA,EAAAA,iCAMf,IAAIygH,GAA0B,EAO1BC,GAAoB,EAiBxB,SAASC,KACL,OAD2C5mH,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,IACnBi6B,KAAI4sF,IAC3B,MAAM,SACFv4D,EAAQ,WACRC,EAAU,OACVtlD,EAAM,MACN2V,EAAK,UACL2Q,EAAS,QACT6rE,GACAyrB,GAEE,SAAEh+B,EAAQ,WAAEN,GAAe3pE,EAAMswE,cAOvC,OAFAy3B,GAAoB7yG,GAAqB6yG,IAElC,IAAI5oB,GAAgB,CACvBlV,WACAN,aACAloF,UAAWue,EAAMuE,KACjB66E,MAAO2oB,GACPr4D,WACAC,aACAtlD,SACA2V,QACA2Q,UAAWA,GAAa,KACxB6rE,WACF,GAEV,CAKe,MAAMshB,WAAYzmF,GAM7Bn4B,YAAY8oB,GAA0B,IAAdxqB,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/BmE,QACA5H,KAAKqqB,WAAaA,EAMlBrqB,KAAKuqH,gBAAkB,IAAIvrG,IAE3Bhf,KAAK48B,YAAc,GAEnB58B,KAAKH,QAAUA,EAKfG,KAAKkmF,SAAW,KAUhBlmF,KAAKwqH,YAASlqH,EASdN,KAAKyqH,kBAAoB,KAGzBzqH,KAAK0qH,gCAAkC1qH,KAAK+zG,2BAA2B3jF,KAAKpwB,MAE5EA,KAAK2qH,qBAAuB3qH,KAAK2qH,qBAAqBv6F,KAAKpwB,MAC3DA,KAAK4qH,iCAAmC5qH,KAAK4qH,iCAAiCx6F,KAAKpwB,MAI/E2gG,GAAAA,wBAAiC,YACjCA,GAAAA,YACIzuE,GAAAA,QAAAA,4BACAlyB,KAAK4qH,kCAGTjqB,GAAAA,YACIzuE,GAAAA,QAAAA,oBACAlyB,KAAK2qH,sBAGjB,CAOAE,UACIlqB,GAAAA,eAAwBzuE,GAAAA,QAAAA,4BAAuClyB,KAAK4qH,kCACpEjqB,GAAAA,eAAwBzuE,GAAAA,QAAAA,oBAA+BlyB,KAAK2qH,sBAExD3qH,KAAK8qH,sBACL9qH,KAAK4pB,eAAesI,GAAAA,QAAAA,kBAA6BlyB,KAAK8qH,qBAE9D,CASAh7G,yBAAyBi7G,GACrB,OAAOV,GAAmBU,EAC9B,CAWAj7G,sCAAsCjQ,GAClC,OAAO8gG,GAAAA,+BAAwC9gG,GAC1CkgB,MAAKgrG,GAAcV,GAAmBU,IAC/C,CAUAC,wBAAwBh6G,EAAgBi1E,GACpCjmF,KAAKkmF,SAAW,IAAIF,GAAch1E,EAAgBi1E,EAAOjmF,KAAKya,aAAcza,KAAKqqB,YAEjFrqB,KAAK8qH,qBAAuB,KACxB,MAAMG,EAAWA,CAACrrH,EAAOsrH,EAASvjH,KAC9B6K,KAAAA,iBAAsC5S,GACtC6J,GAAO7J,MAAO,eAAcsrH,KAAWviH,KAAKC,UAAUjB,uBAA4B/H,EAAM,EAK5F,GAAII,KAAKmrH,0BACL,IACInrH,KAAKkmF,SAAS4B,oCAAoC9nF,KAAKmrH,0BAC3D,CAAE,MAAOvrH,GACLqrH,EAASrrH,EAAO,2BAA4BI,KAAKmrH,0BACrD,CAEJ,QAA2B,IAAhBnrH,KAAKwqH,SAA2C,IAAjBxqH,KAAKwqH,OAC3C,IACIxqH,KAAKkmF,SAAS0B,oBAAoB5nF,KAAKwqH,OAC3C,CAAE,MAAO5qH,GACLqrH,EAASrrH,EAAO,oBAAqBI,KAAKwqH,OAC9C,CACJ,EAEJxqH,KAAK+tB,YAAYmE,GAAAA,QAAAA,kBAA6BlyB,KAAK8qH,sBAGnD9qH,KAAK+tB,YAAYmE,GAAAA,QAAAA,0BAAqClyB,KAAK0qH,gCAC/D,CAUAC,uBACI3qH,KAAK4qH,iCAAiCjqB,GAAAA,uBAC1C,CAQAoT,6BAAkD,IAAvBzrB,EAAgB7kF,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GAC1C,MAAM2nH,EAAsBprH,KAAKyqH,mBAAqB,GACtD,IAAIjV,EAA0B,GAC1BC,EAA2B,GAC/B,MAAMtxF,EAAYrI,KAAKC,MAEvB/b,KAAKyqH,kBAAoBniC,EAEzBktB,EAA0B4V,EAAoBnzG,QAAOwK,IAAeziB,KAAKqyG,qBAAqB5vF,KAE9FgzF,EAA2BntB,EAAiBrwE,QACxCwK,IAA2D,IAA7C2oG,EAAoBxqH,QAAQ6hB,KAE9ChZ,GAAOgH,MAAO,oCAAmC+kG,eACxCC,QAA+BtxF,KACxCnkB,KAAKqqB,WAAW5P,aAAapR,KACzBhQ,GACAm8G,EACAC,EACAtxF,EACR,CAMAqP,cACQxzB,KAAKkmF,WAODlmF,KAAKkmF,UAAmC,cAAvBlmF,KAAKkmF,SAASzmC,MAC/Bz/C,KAAKkmF,SAASnsE,QAGlB/Z,KAAKkmF,SAAW,KAExB,CAOA5zB,2BAA2BC,GACvBouC,GAAAA,2BAAoCpuC,EACxC,CAQA84D,4BAA4BnrH,GACxBF,KAAKmrH,0BAA4BjrH,EAE7BF,KAAKkmF,UAAYlmF,KAAKkmF,SAASgB,UAC/BlnF,KAAKkmF,SAAS4B,oCAAoC5nF,EAE1D,CAOAorH,oBAAoB7oG,EAAYuQ,GACxBhzB,KAAKkmF,UAAYlmF,KAAKkmF,SAASgB,UAC/BlnF,KAAKkmF,SAAS6B,2BAA2BtlE,EAAYuQ,EAE7D,CAOAljB,mBAAmBk5G,EAAWv/F,GAC1Bk3E,GAAAA,YAAqBqoB,EAAWv/F,EACpC,CAOA3Z,sBAAsBk5G,EAAWv/F,GAC7Bk3E,GAAAA,eAAwBqoB,EAAWv/F,EACvC,CAMA3Z,cAA0B,IAAdjQ,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAGnB,OAFAzD,KAAKH,QAAUA,EAER8gG,GAAAA,KAAc3gG,KAAKH,QAC9B,CAkBAquE,qBAAqBq9C,EAAWvhD,EAAU/0D,EAAOpV,GAC7C,MAAMq2F,EAAgBvtF,KAAK24B,MAAM34B,KAAKC,UAAU+3F,GAAAA,gBAE5C9gG,EAAQ8tE,0BACRlkE,GAAOgH,MAAM,iDACbu5D,EAASwhD,0BAA2B,GAIXv9G,GAAQpE,oBAAsBhK,EAAQiuE,kBAG/DrkE,GAAOgH,MAAM,gDACbu5D,EAASyoB,aAAe,UAGxB5yF,EAAQguE,iBACR7D,EAAS4Z,mBAAqB,SAMlC5Z,EAASyhD,aAAe,aAExBtB,GAA0B5yG,GAAqB4yG,IAE/C,MAAMuB,EACA,IAAIrP,GACFr8G,KACAmqH,GACAoB,EACAvhD,EAAUksB,EACVjhF,EAAOpV,GAIf,OAFAG,KAAKuqH,gBAAgBzkG,IAAI4lG,EAAc7lG,GAAI6lG,GAEpCA,CACX,CAWAnD,sBAAsBoD,GAClB,MAAM9lG,EAAK8lG,EAAwB9lG,GAEnC,QAAI7lB,KAAKuqH,gBAAgBx/F,IAAIlF,KAEzB7lB,KAAKuqH,gBAAgBr0G,OAAO2P,IAErB,EAKf,CAMA+lG,cAAcvpG,GACV,IAAKA,EACD,MAAM,IAAInhB,MAAM,wCAGpBlB,KAAK48B,YAAYttB,KAAK+S,GAEtBA,EAAMgI,WAAarqB,KAAKqqB,UAC5B,CAMAwhG,sBACI,OAAO7rH,KAAKyqH,iBAChB,CAMA71C,qBACI,MAAMk3C,EAAa9rH,KAAKgnB,eAAe3K,GAAUwK,OAEjD,OAAOilG,EAAWpoH,OAASooH,EAAW,QAAKxrH,CAC/C,CAMAq0E,sBACI,OAAO30E,KAAKgnB,eAAe3K,GAAUwK,MACzC,CAMAklG,qBACI,MAAMC,EAAahsH,KAAKgnB,eAAe3K,GAAUkL,OAEjD,OAAOykG,EAAWtoH,OAASsoH,EAAW,QAAK1rH,CAC/C,CAMAo9G,qBACI,OAAO19G,KAAKqqB,WAAWuH,UAC3B,CAQA5K,eAAeljB,GACX,IAAImvE,EAASjzE,KAAK48B,YAAYv8B,QAO9B,YALkBC,IAAdwD,IACAmvE,EAASA,EAAOh7D,QACZoK,GAASA,EAAMoL,YAAc3pB,KAG9BmvE,CACX,CAQAqC,gBAAgBxxE,GACZ,IAAI04G,EAAe,GAEnB,IAAK,MAAM5nG,KAAO5U,KAAKuqH,gBAAgBh6G,SAAU,CAC7C,MAAM07G,EAAiBr3G,EAAI0gE,qBAAgBh1E,EAAWwD,GAElDmoH,IACAzP,EAAeA,EAAa7hD,OAAOsxD,GAE3C,CAEA,OAAOzP,CACX,CAOA3tF,aAAalnB,GACT,MAAMukH,EAAe,GASrB,OAPAlsH,KAAKgnB,eAAe3K,GAAUkL,OAAOnZ,SAAQoyG,IAEzC0L,EAAa58G,KAAK3H,EAAQ64G,EAAW7rG,OAAS6rG,EAAWpb,SAAS,IAK/D/wF,QAAQ29D,IAAIk6C,EACvB,CAOAl9F,aAAarnB,GACT,MAAMukH,EAAe,GAUrB,OARAlsH,KAAKgnB,eAAe3K,GAAUwK,OACzBzY,SAAQsyF,IAELwrB,EAAa58G,KAAK3H,EAAQ+4F,EAAW/rF,OAAS+rF,EAAW0E,SAAS,IAKnE/wF,QAAQ29D,IAAIk6C,EACvB,CAMAC,iBAAiB9pG,GACb,MAAM0mE,EAAM/oF,KAAK48B,YAAYh8B,QAAQyhB,IAExB,IAAT0mE,GAIJ/oF,KAAK48B,YAAYrtB,OAAOw5E,EAAK,EACjC,CAOAj5E,yBAAyBs8G,EAAY1/G,GACjC,OAAOi0F,GAAAA,kBAA2ByrB,EAAY1/G,EAClD,CAMAoD,+BACI,OAAO6wF,GAAAA,uBACX,CASA7wF,+BAA+BkvF,GAC3B,OAAO2B,GAAAA,wBAAiC3B,EAC5C,CAUAlvF,2BACI,OAAO7B,GAAQtD,aACnB,CAOAmF,8BACI,OAAO6wF,GAAAA,sBACX,CAOA7wF,2CACI,OAAO6wF,GAAAA,mCACX,CAMA7wF,kDACI,OAAO6wF,GAAAA,0CACX,CAMA7wF,mCAAmC8rF,GAC/B,OAAO+E,GAAAA,4BAAqC/E,EAChD,CASA9rF,4BAA4Bw8E,GACxB,OAAOqU,GAAAA,qBAA8BrU,EACzC,CAcAx8E,oBAAoBpD,GAChB,OAAOyzG,GAAIC,iBAAiB1zG,EAAOmZ,GACvC,CAcA/V,wBAAwB6gD,GACpB,OAAOA,GAAyB,iBAAbA,GACC,YAAbA,CACX,CAOA7gD,wBAAwBoH,GACpBypF,GAAAA,iBAA0BzpF,EAC9B,CAOApH,uBAAuBmvF,GACnB0B,GAAAA,gBAAyB1B,EAC7B,CAMAnvF,iCACI,OAAO6wF,GAAAA,yBACX,CAKAxyE,qBACQnuB,KAAKkmF,WACLlmF,KAAKkmF,SAASnsE,QACd/Z,KAAKkmF,SAAW,KAExB,CAUA3xD,cAAc3f,EAAKjD,EAAM0F,EAAYzB,GACjC,MAAMyM,EAAQzN,EAAI0N,eAAe3Q,GAE5B0Q,IAEOA,EAAME,gBAIPF,EAAMzM,YAAcA,GAC3BnM,GAAO7J,MACF,GAAEyiB,qBAAyBzM,EAAU,KAAO,kBAGrDyM,EAAMkS,cAAcld,EAAYzC,IAR5BnL,GAAON,KAAM,6CAA4CwI,KASjE,CAUA06G,mBAAmB96E,EAAI7f,GACnB,IAAI1xB,KAAKkmF,SAGL,MAAM,IAAIhlF,MAAM,gCAFhBlB,KAAKkmF,SAASjhD,YAAYsM,EAAI7f,EAItC,CAOA81D,yBAAyB91D,GACjB1xB,KAAKkmF,UAAYlmF,KAAKkmF,SAASgB,UAC/BlnF,KAAKkmF,SAASsB,yBAAyB91D,EAE/C,CAQA46F,SAAS3kH,GACD3H,KAAKwqH,SAAW7iH,IAChB3H,KAAKwqH,OAAS7iH,EACV3H,KAAKkmF,UAAYlmF,KAAKkmF,SAASgB,UAC/BlnF,KAAKkmF,SAAS0B,oBAAoBjgF,GAEtC3H,KAAKya,aAAapR,KAAK6oB,GAAAA,QAAAA,oBAA+BvqB,GAE9D,CASA0qG,qBAAqB5vF,GACjB,OAAQziB,KAAKyqH,mBACNzqH,KAAKyqH,kBAAkB7pH,QAAQ6hB,IAAe,CACzD,CAUAmoG,iCAAiCt+B,GAC7B,MAAMigC,EAAoBvsH,KAAKs1E,gBAAgBj5D,GAAUkL,OAEzD,IAAK,MAAMlF,KAASkqG,EAChBlqG,EAAMk/E,eAAejV,EAE7B,ECrzBG,IAAKkgC,GAAuB,SAAvBA,GAAuB,OAAvBA,EAAuB,6CAAvBA,EAAuB,+CAAvBA,CAAuB,MAc5B,MAAMC,GAAsBD,GAAwBC,oBAC9CC,GAAuBF,GAAwBE,qBCRtDzuB,GAAcxuF,EAAQ,OACpBwjB,UAASA,IAAKxjB,EAAQ,OACtBue,WAAUA,IAAKve,EAAQ,KAEzBhG,IAASC,EAAAA,EAAAA,wDAQTijH,GAAoB,CACtB,CAAEhqG,MAAO,KACLC,OAAQ,KACRgqG,OAAQ,EACRr6B,OAAQ,QACZ,CAAE5vE,MAAO,KACLC,OAAQ,IACRgqG,OAAQ,EACRr6B,OAAQ,QACZ,CAAE5vE,MAAO,IACLC,OAAQ,IACRgqG,OAAQ,EACRr6B,OAAQ,YACZ,CAAE5vE,MAAO,IACLC,OAAQ,IACRgqG,OAAQ,EACRr6B,OAAQ,YACZ,CAAE5vE,MAAO,IACLC,OAAQ,IACRgqG,OAAQ,EACRr6B,OAAQ,OACZ,CAAE5vE,MAAO,IACLC,OAAQ,IACRgqG,OAAQ,EACRr6B,OAAQ,QAahB,IAAIs6B,GAAe,IA+DJ,MAAMC,GAOjBvrH,YAAY8oB,EAAY5P,EAAc5a,GAAS,IAAAktH,EAC3C/sH,KAAKya,aAAeA,EAKpBza,KAAKm1B,YAAc9K,EAKnBrqB,KAAKgtH,YAAc,CACfC,kBAAmB,IACnBC,YAAQ5sH,GAMZN,KAAKmtH,8BAAgC,EAKrCntH,KAAK+yC,SAAWlzC,EAMhBG,KAAKotH,aAAe,CAAC,EAMrBptH,KAAKqtH,mBAAqB,EAM1BrtH,KAAKstH,mBAAqB,GAGF,QAApBP,EAAA/sH,KAAK+yC,SAASpf,cAAM,IAAAo5F,OAAA,EAApBA,EAAsBF,cAAe,IACrCA,GAAe7sH,KAAK+yC,SAASpf,OAAOk5F,cAKxCxiG,EAAWX,GACP6jG,IACA,KACIvtH,KAAKwtH,8BAA8B,GACnCxtH,KAAKya,aAAapR,KACdmjH,GACAxsH,KAAKgtH,aACThtH,KAAKytH,sBAAsB,IAGnCpjG,EAAWuD,KAAKG,YACZC,GAAW0/F,8BACX,CAACz/F,EAAe6mF,KACP7mF,EAAchZ,OAAsB,cAAb6/F,IACxB90G,KAAKqtH,kBAAoBvkH,OAAO4pB,YAAY3W,MAChD,IAORsO,EAAWX,GACP6jG,IACA,CAACl/F,EAAaqD,KAxLC,UAyLPA,EAAQtuB,MACRpD,KAAK2tH,mBACDt/F,EAAYwI,QAASnF,EAAQnhB,OACrC,IAGR8Z,EAAWX,GACP6jG,IACA,CAACl/F,EAAaqD,KACV1xB,KAAK2tH,mBAAmBt/F,EAAYwI,QAASnF,EAAQ,IAGxD1xB,KAAK+yC,SAASpf,OAAOi6F,mBAEtBvjG,EAAWiB,WAAWvB,2BAA2B/pB,KAAK6tH,kBAAkBz9F,KAAKpwB,OAIjFqqB,EAAWX,GACP6jG,IACAlrG,IACQA,EAAM0Q,iBACF1Q,EAAMmL,UACNxtB,KAAKstH,mBAAqB,EAE1BttH,KAAK8tH,yBAEb,IAERzjG,EAAWX,GACP6jG,IACAlrG,IACQA,EAAM0Q,iBAAmB1Q,EAAMmL,WAC/BxtB,KAAK8tH,wBACT,IAERzjG,EAAW6D,IAAIxE,GACXwI,GAAU67F,4CACV1rG,IACIriB,KAAKgtH,YAAYlrB,qBAAuBz/E,EAAMy/E,oBAAoB,IAG1Ez3E,EAAWX,GACP6jG,IACAS,IACIhuH,KAAKgtH,YAAYgB,aAAeA,CAAY,IAGpD3jG,EAAWX,GACP6jG,IACA3+G,IACI5O,KAAKgtH,YAAYiB,YACX/nH,QAAQ0I,GAAc,CAAC,GAAG,gBAAgB,GAG5D,CAMAk/G,yBACQ9tH,KAAKstH,kBAAoB,IACzBttH,KAAKstH,kBAAoBxkH,OAAO4pB,YAAY3W,MAEpD,CASAmyG,4BAA4Bl7F,EAAWxF,EAAS2gG,GAI5C,MAAMvwG,EAAaqgF,GAAYkwB,GAE/B,IACInwG,EADAowG,EAAU,IA2Bd,GAtBIpuH,KAAKgtH,YAAYhvG,aACjBA,EAAahe,KAAKgtH,YAAYhvG,WAAWL,OAgBrC6P,IACAxP,GAAc,KAIlBwP,IAAY5P,GAAcoV,IAAcC,GAAUo7F,SAC/CruH,KAAKqtH,kBAAoB,GACzBrtH,KAAKstH,kBAAoB,OAGThtH,IAAf0d,GACAvU,GAAO7J,MAAM,6DAEbwuH,EAAU,KAEVA,EADOpwG,GAAc,EACX,IACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,GACX,GAEA,MAEX,CAEH,MAAMswG,EAAYtuH,KAAKm1B,YAAYo5F,0BAEnC,GAAID,EAAW,KAAAE,EAAAC,EACX,MAAMjiB,EAAgB8hB,EAAU9hB,gBAC1BkiB,EAAuBJ,EAAUtO,yBAGvC0O,EAAqB1hH,MAAQshH,EAAU78C,0BAGvC,MAAMk9C,EAAmB7lH,OAAO4pB,YAAY3W,MACtCR,KAAKC,IAAIxb,KAAKstH,kBAAmBttH,KAAKqtH,mBACtC7yG,EAAqD,QAAxCg0G,EAAuB,QAAvBC,EAAGzuH,KAAK+yC,SAASpf,cAAM,IAAA86F,OAAA,EAApBA,EAAsB/lG,uBAAe,IAAA8lG,EAAAA,EAAI,IAG/D,IAAIj8B,EA3RpB,SAAmBka,EAAW7uF,EAAY+wG,EAAkBD,GACxD,IAAIn8B,EAAS,EACT3vE,EAASrH,KAAK4yB,IAAIvwB,EAAWgF,OAAQhF,EAAW+E,OAGhDisG,EAAkBjC,GAAkB14F,MAAKgY,GAAKA,EAAErpB,QAAUA,IAE9D,GAAIgsG,GAAmBniB,GAAaiiB,EAAqB1hH,QAAUgsD,KAAAA,IAG/D,IAAKp2C,EAASgsG,EAAgBhsG,OAAQA,GAAU,IAAKA,GAAU,EAAG,CAC9D,MAAMisG,EAAejsG,EAGrB,GADAgsG,EAAkBjC,GAAkB14F,MAAKgY,GAAKA,EAAErpB,SAAWisG,KACvDD,EAGA,MAFAr8B,GAAUm8B,EAAqBE,EAAgBr8B,OAIvD,MACOq8B,IAGPr8B,EAASm8B,EAAqBE,EAAgBr8B,SAKlD,OAAOh3E,KAAK4yB,IAAIokD,EAAS,IAS7B,SAAgBo8B,GACZ,OAAIA,EAAmB,IACZzoH,OAAOwR,iBAMXm1G,GAAetxG,KAAKkzB,IAAI,KAAMkgF,EAAmB,IAC5D,CAlBmCG,CAAOvzG,KAAKC,IAAI,EAAGmzG,EAAmB,MACzE,CA8P6BI,CAAUviB,EAAe5uF,EAAY+wG,EAAkBD,GAEpEn8B,EAASh3E,KAAK4yB,IAAIokD,EA3SP,MA8SPo8B,EAAmBn0G,IACnB4zG,EAAU,IAAMpuH,KAAKgtH,YAAYvvG,QAAQE,OAAS40E,EAE1D,CAGIv0E,GAAcA,GAAc,KAC5BowG,EAAU7yG,KAAK4yB,IAAIigF,EAAS,IAEpC,CAGA,GAAIpuH,KAAKmtH,6BAA+B,EAAG,CACvC,MAAM6B,EAAuB,EACvBC,EAAwBjvH,KAAKgtH,YAAYC,kBACzCiC,GAAepmH,OAAO4pB,YAAY3W,MAAQ/b,KAAKmtH,8BAAgC,IAErFiB,EAAU7yG,KAAK4yB,IAAIigF,EAASa,EAAyBC,EAAcF,EACvE,CAEA,OAAOzzG,KAAK4yB,IAAI,IAAKigF,EACzB,CAMAZ,8BAA8B7lH,GAC1B3H,KAAKgtH,YAAYC,kBAAoBtlH,EACrC3H,KAAKmtH,6BAA+BrkH,OAAO4pB,YAAY3W,KAC3D,CAMA0xG,uBAEI,MAAMr8G,EAAO,CACTqM,QAASzd,KAAKgtH,YAAYvvG,QAC1BO,WAAYhe,KAAKgtH,YAAYhvG,WAC7BivG,kBAAmBjtH,KAAKgtH,YAAYC,kBACpCC,OAAQltH,KAAKgtH,YAAYE,OACzBc,aAAchuH,KAAKgtH,YAAYgB,aAC/BlsB,qBAAsB9hG,KAAKgtH,YAAYlrB,qBACvC1+E,eAAgBpjB,KAAKgtH,YAAY3pG,qBAGrC,IACIrjB,KAAKm1B,YAAYqyD,yBAAyBp2E,EAC9C,CAAE,MAAO8a,GAEL,CAER,CAQA2hG,kBAAkBj5G,EAAKxD,GAEnB,IAAKwD,EAAIK,MAAO,CACZ,MAAMi4G,EACA97G,EAAK6M,WACA7M,EAAK6M,UAAUva,QAAU0N,EAAK6M,UAAU,GAAG0H,IAEtD3lB,KAAKgtH,YAAYE,OAASA,QAAkB5sH,CAChD,CAIA,GAAIsU,IAAQ5U,KAAKm1B,YAAYo5F,0BACzB,OAGJ,IAAI7mH,EACJ,MAAMynH,GACCnvH,KAAKm1B,YAAYi6F,0BAClBjV,EACAn6G,KAAKm1B,YAAYy/C,qBACjB5hD,EACAmnF,EAAkBA,EAAgBnnF,eAAY1yB,EAC9CktB,GAAU2sF,GAAkBA,EAAgB3sF,UAC5C5P,EAAau8F,EACb5+F,KAAK4yB,IAAIgsE,EAAgBv8F,WAAYu8F,EAAgBrY,sBAAwB,KAOnF,IAAKp6F,KALA8lB,GACDxtB,KAAK8tH,yBAIG18G,EACJA,EAAKyO,eAAenY,KACpB1H,KAAKgtH,YAAYtlH,GAAO0J,EAAK1J,IAKjCynH,GACAnvH,KAAKwtH,8BACDxtH,KAAKkuH,4BACDl7F,EACAxF,EACA5P,IAGZ5d,KAAKya,aAAapR,KACdmjH,GACAxsH,KAAKgtH,aACThtH,KAAKytH,sBACT,CAOAE,mBAAmB9nG,EAAIzU,GAEnBpR,KAAKotH,aAAavnG,GAAM,CACpBpI,QAASrM,EAAKqM,QACdO,WAAY5M,EAAK4M,WACjBivG,kBAAmB77G,EAAK67G,kBACxBC,OAAQ97G,EAAK87G,OACbc,aAAc58G,EAAK48G,aACnBlsB,qBAAsB1wF,EAAK0wF,qBAC3B1+E,eAAgBhS,EAAKgS,gBAGzBpjB,KAAKya,aAAapR,KACdmjH,GACA3mG,EACA7lB,KAAKotH,aAAavnG,GAC1B,CAMA/F,WACI,OAAO9f,KAAKgtH,WAChB,EC5eJ,MAAMvjH,IAASC,EAAAA,EAAAA,wDAaA,MAAM2lH,GAKjB9tH,YAAY8oB,GACRrqB,KAAKm1B,YAAc9K,CACvB,CAQAilG,kBACI,IAAKtvH,KAAKm1B,YAAYvH,KAClB,OAGJ,MAAM,mBAAE6lD,EAAkB,iBAAE1E,GAAqB/uE,KAAKm1B,YAAYt1B,QAAQ8zB,OACpE47F,OAAiD,IAArBxgD,IAAqCA,EACjErmB,EAA6B1oD,KAAKm1B,YAAYvH,KAAK86B,6BACnD8mE,EAAyB9mE,IAA+BqmB,EAO9D,GALAtlE,GAAOE,KACA,mCAAuB8pE,wBACF1E,qCACarmB,KAErC6mE,IAAwBxgD,IAAqBrmB,GAA+B+qB,EAAoB,CAChGhqE,GAAOE,KAAK,6CACZ,MAAM+K,EAAS++D,EACT17E,EACAA,EAIN,YAFAiI,KAAKm1B,YAAY1a,aAAapR,KAAKhQ,EAAyCqb,EAGhF,CAEA,MAAM+6G,EAAgBzvH,KAAKm1B,YAAY5H,iBACjCmiG,EAAkBD,GAAiBA,EAAc1zC,wBAElD0zC,EAE0B,cAApBC,EACPjmH,GAAOE,KAAK,qDAEZF,GAAOE,KACA,mEAAa+lH,+BACcF,KAC9BA,EACAxvH,KAAKm1B,YAAY5H,iBAAiBq9C,WAC9B,KACInhE,GAAOE,KAAK,2CAA2C,IAE3D/J,IACI6J,GAAO7J,MAAO,8CAA6CA,EAAMW,UAAU,GAC5E,CACCmU,OAAQ,qBACRsgE,kBAAmB,aACnBE,gBAAgB,EAChBJ,sBAAsB,IAG9B90E,KAAKm1B,YAAY5H,iBAAiBkjD,6BArBtChnE,GAAON,KAAK,6CAwBpB,CAKAsN,QAUIzW,KAAKm1B,YAAYrN,KAAKqpB,KAAK,MAAOpxB,MAC9B,KACS/f,KAAK2vH,YACN3vH,KAAK4vH,kBAAoB9mH,OAAO2wB,YAAW,KACvCz5B,KAAK4vH,uBAAoBtvH,EACzBN,KAAKsvH,iBAAiB,GACvB,KACP,IAEJ1vH,IACI6J,GAAO7J,MAAM,8CAA+CA,EAAM,GAE9E,CAKA0vC,SACItvC,KAAK2vH,WAAY,EACjB7mH,OAAOuwB,aAAar5B,KAAK4vH,kBAC7B,EC1HG,IAAKC,GAAe,SAAfA,GAAe,OAAfA,EAAe,8CAAfA,EAAe,qDAAfA,EAAe,yCAAfA,EAAe,8CAAfA,EAAe,4CAAfA,EAAe,oDAAfA,EAAe,sDAAfA,CAAe,MAgEpB,MAAMC,GAAwBD,GAAgBC,sBACxCx2H,GAA2Bu2H,GAAgBv2H,yBAC3CoC,GAAiBm0H,GAAgBn0H,eACjCq0H,GAAmBF,GAAgBE,iBACnCC,GAAuBH,GAAgBG,qBACvCC,GAAsBJ,GAAgBI,oBACtCC,GAAuBL,GAAgBK,qBCnDrC,MAAMC,WAA+B1oH,MAOhDlG,YAAY8oB,GACRziB,QAEA5H,KAAKm1B,YAAc9K,EACnBrqB,KAAKowH,gBAAkB,KACvBpwH,KAAKqwH,eAAiB,KAEtBhmG,EAAWX,GAAGrwB,GAAmC2G,KAAKswH,YAAYlgG,KAAKpwB,MAC3E,CAKAuwH,uBACIl3F,aAAar5B,KAAKowH,iBAClBpwH,KAAKowH,gBAAkB,IAC3B,CASAI,6BAA6Bn5G,GAGzB,MAAM5C,EAAwB,IAAf4C,EAIa,OAAxBrX,KAAKqwH,gBAA2BrwH,KAAKqwH,iBAAmB57G,IACxDzU,KAAKqwH,eAAiB57G,EACtBzU,KAAKqJ,KAAKwmH,GAA0C7vH,KAAKqwH,gBAEjE,CAQAI,6BAA6Bp5G,GACrBrX,KAAK0wH,cAIU,IAAfr5G,GAAqBrX,KAAKowH,gBAMJ,IAAf/4G,GAAoBrX,KAAKowH,iBAChCpwH,KAAKuwH,uBANLvwH,KAAKowH,gBAAkB32F,YAAW,KAC9Bz5B,KAAK0wH,aAAc,EAEnB1wH,KAAKqJ,KAAKwmH,GAA+B,GApE/B,KAyEtB,CAWAc,YAAY/7G,EAAKjD,EAAM0F,EAAYzB,GAE/B,IAAKA,IAAY5V,KAAK4wH,YAClB,OAIJ,MAAMlU,EAAa9nG,EAAI8nG,WAAW/3F,IAAI3kB,KAAK4wH,YAAYnvB,OAIlDib,GAAeA,EAAW7tD,MAAM9e,SAASp+B,KAM9C3R,KAAKwwH,6BAA6Bn5G,GAClCrX,KAAKywH,6BAA6Bp5G,GACtC,CAQAi5G,YAAYjuG,GACJA,EAAM++E,sBAENphG,KAAK4wH,YAAcvuG,EACnBriB,KAAK0wH,aAAc,EACnB1wH,KAAKuwH,uBAGLluG,EAAMqH,GACFrrB,IACAgZ,IACIrX,KAAKywH,6BAA6Bp5G,EAAW,IAGrDgL,EAAMqH,GACFrrB,IACAgZ,IACIrX,KAAKywH,6BAA6Bp5G,GAClCrX,KAAKwwH,6BAA6Bn5G,EAAW,IAI7D,EC9HW,MAAMw5G,GAMjBtvH,YAAY8oB,GACRrqB,KAAKqqB,WAAaA,EAElBA,EAAW5e,iBACPpS,GACA2G,KAAK2wH,YAAYvgG,KAAKpwB,OAE1BA,KAAK8wH,SAAW9wH,KAAKqqB,WAAWuH,UACpC,CAQA++F,YAAY9qG,EAAIxO,IAKPrX,KAAKqqB,WAAW6oF,eACd77F,GAtCiB,IAuChBwO,IAAO7lB,KAAK8wH,UACL9wH,KAAKqqB,WAAW0hG,qBAAqBv+F,WAIpDxtB,KAAKqqB,WAAW6D,IAAIzT,aAAapR,KAC7B6oB,GAAAA,QAAAA,yBACArM,EACR,EClDG,SAASkrG,GAAmBlxH,GAC/B,MAAMmxH,EAAmBloH,OAAO+N,cAAgB/N,OAAOgO,mBAEvD,GAAKk6G,EAIL,OAAO,IAAIA,EAAiBnxH,EAChC,CCGe,MAAMoxH,WAAwBxpH,MASzClG,YAAY2vH,EAAoBC,EAAcz8C,GAC1C9sE,QAKA5H,KAAKoxH,oBAAsBF,EAK3BlxH,KAAKqxH,cAAgBF,EAKrBnxH,KAAKsxH,YAAc58C,EAKnB10E,KAAKuxH,eAAiB,IAAIC,aAAa,IAKvCxxH,KAAKyxH,cAAgBV,GAAmB,CAAEW,WAAYP,EAAaQ,4BAMnE3xH,KAAK4xH,eAAiBT,EAAaU,kBAMnC7xH,KAAK8xH,gBAAkB9xH,KAAK8xH,gBAAgB1hG,KAAKpwB,MAEjDA,KAAK+xH,yBACT,CAcAjiH,cAAcsuF,EAAa8yB,EAAoBC,GAC3C,OAAOhR,GAAI1iB,+BAA+B,CACtC39F,QAAS,CAAE,SACXs+F,gBACDr+E,MAAKm5F,IAEJ,IAAKA,EAAW,GACZ,MAAM,IAAIh4G,MAAO,qDAAoDk9F,KAGzE,OAAO,IAAI6yB,GAAgBC,EAAoBC,EAAcjY,EAAW,GAAG,GAKnF,CAOA6Y,0BACI/xH,KAAKgyH,aAAehyH,KAAKyxH,cAAcl5G,wBAAwBvY,KAAKsxH,YAAY5kH,QAQhF1M,KAAKiyH,qBAAuBjyH,KAAKyxH,cAAcS,sBAAsBlyH,KAAKoxH,oBAAqB,EAAG,EACtG,CAaAU,gBAAgBK,GAEZ,MAAMC,EAASD,EAAWE,YAAYC,eAAe,GAC/CC,EAAiB,IAAKvyH,KAAKuxH,kBAAmBa,GAC9CI,EAAkB12G,KAAKC,MAE7B,IAAIhW,EAAI,EAER,KAAOA,EAAI/F,KAAK4xH,eAAiBW,EAAe7uH,OAAQqC,GAAK/F,KAAK4xH,eAAgB,CAC9E,MAAMa,EAAYF,EAAelyH,MAAM0F,EAAGA,EAAI/F,KAAK4xH,gBAG7Cc,EAAW1yH,KAAKqxH,cAAcsB,uBAAuBF,EAAUpyH,SAErEL,KAAKqJ,KAAK4mH,GAAqB,CAC3B9rG,UAAWquG,EACXI,MAAOF,EACPG,QAASJ,EACTnmC,SAAUtsF,KAAKsxH,YAAYvtB,eAEnC,CAEA/jG,KAAKuxH,eAAiBgB,EAAelyH,MAAM0F,EAAGwsH,EAAe7uH,OACjE,CAOAovH,qBACI9yH,KAAKiyH,qBAAqBc,eAAiB/yH,KAAK8xH,gBAChD9xH,KAAKgyH,aAAax5G,QAAQxY,KAAKiyH,sBAC/BjyH,KAAKiyH,qBAAqBz5G,QAAQxY,KAAKyxH,cAAcuB,YACzD,CAOAC,wBAIIjzH,KAAKiyH,qBAAqBc,eAAiB,OAC3C/yH,KAAKiyH,qBAAqBt4G,aAC1B3Z,KAAKgyH,aAAar4G,YACtB,CAOAu5G,oBACIlzH,KAAKizH,wBACLjzH,KAAKsxH,YAAYztB,YACrB,CAOAE,cACI,OAAO/jG,KAAKsxH,YAAYvtB,aAC5B,CAQA9C,gBACI,OAAOjhG,KAAKsxH,YAAY6B,gBAC5B,CAOA18G,QACIzW,KAAK8yH,oBACT,CAOAv5G,OACIvZ,KAAKizH,wBACLjzH,KAAKuxH,eAAiB,EAC1B,CAOA1G,UACQ7qH,KAAKozH,aAITpzH,KAAKkzH,oBACLlzH,KAAKozH,YAAa,EACtB,ECnOJ,MAAM3pH,IAASC,EAAAA,EAAAA,oDAYA,MAAM2pH,WAAyB5rH,GAAAA,aAW1ClG,YAAY8oB,EAAYipG,GACpB1rH,QAKA5H,KAAKuzH,oBAAsBD,EAM3BtzH,KAAKwzH,YAAc,KAKnBxzH,KAAKyzH,sBAAuB,EAK5BzzH,KAAK0zH,mBAAqB,GAS1B1zH,KAAK2zH,gBAAkBt/G,QAAQC,UAK/BtU,KAAK4zH,iBAAmB5zH,KAAK4zH,iBAAiBxjG,KAAKpwB,MAEnDqqB,EAAWX,GAAGrwB,GAAmC2G,KAAKswH,YAAYlgG,KAAKpwB,OACvEqqB,EAAWX,GAAGrwB,GAAqC2G,KAAK6zH,cAAczjG,KAAKpwB,OAC3EqqB,EAAWX,GAAGrwB,GAA0C2G,KAAKq8B,kBAAkBjM,KAAKpwB,MACxF,CAOA8zH,uBAAuBC,GACnB/zH,KAAK0zH,mBAAmBpkH,KAAKykH,GAC7BA,EAAWrqG,GAAGomG,IAAuB,MAGV9vH,KAAK0zH,mBAAmBz7G,QAAO+7G,IAAoC,IAAxBA,EAAS3rC,aAKvD3kF,QAAU1D,KAAKyzH,qBAC/BzzH,KAAKi0H,kBACGj0H,KAAKyzH,sBACbzzH,KAAKk0H,kBACT,GAER,CAMAA,mBACQl0H,KAAKwzH,cACLxzH,KAAKwzH,YAAY9pG,GAAGumG,GAAqBjwH,KAAK4zH,kBAC9C5zH,KAAKwzH,YAAY/8G,QACjBzW,KAAKyzH,sBAAuB,EAEpC,CAMAQ,kBACQj0H,KAAKwzH,cACLxzH,KAAKwzH,YAAY5pG,eAAeqmG,GAAqBjwH,KAAK4zH,kBAC1D5zH,KAAKwzH,YAAYj6G,QAErBvZ,KAAKyzH,sBAAuB,CAChC,CAYAG,iBAAiBlB,GACb,IAAK,MAAMsB,KAAYh0H,KAAK0zH,mBACxBM,EAASG,gBAAgBzB,EAEjC,CAOA0B,0BAA0B5mG,GACtB,IAAK,MAAMwmG,KAAYh0H,KAAK0zH,mBACxBM,EAASK,gBAAgB7mG,EAEjC,CASA8iG,YAAYjuG,GACJA,EAAM++E,sBAGNphG,KAAK2zH,gBAAkB3zH,KAAK2zH,gBAAgB5zG,MAAK,IAAM/f,KAAKuzH,wBACvDxzG,MAAKoxG,GACFF,GAAgB3vH,OAAO+gB,EAAM0hF,cAnJjB,KAmJyDotB,KAExEpxG,MAAKu0G,IACF7qH,GAAOgH,MAAM,kCAAmC4R,EAAM4+E,iBAEtDjhG,KAAKwzH,YAAcc,EAInBt0H,KAAKo0H,0BAA0B/xG,EAAMmL,UAAU,IAElDtN,OAAMtgB,IACH6J,GAAON,KAAK,mCAAoCvJ,EAAM,IAGtE,CASAy8B,kBAAkBha,GACVA,EAAM++E,sBAENphG,KAAK2zH,gBAAkB3zH,KAAK2zH,gBAAgB5zG,MAAK,KAE7C/f,KAAKo0H,0BAA0B/xG,EAAMmL,UAAU,IAG3D,CAUAqmG,cAAcxxG,GACNA,EAAM++E,sBAENphG,KAAK2zH,gBAAkB3zH,KAAK2zH,gBAAgB5zG,MAAK,KAC7CtW,GAAOgH,MAAM,uCAAwC4R,EAAM4+E,iBAGvDjhG,KAAKwzH,cACLxzH,KAAKi0H,kBACLj0H,KAAKwzH,YAAY3I,UACjB7qH,KAAKwzH,YAAc,MAIvB,IAAK,MAAMQ,KAAYh0H,KAAK0zH,mBACxBM,EAASvmH,OACb,IAGZ,ECvLW,MAAM8mH,WAA0B9sH,GAAAA,aAM3ClG,cACIqG,QAMA5H,KAAKw0H,aAAc,EAKnBx0H,KAAKy0H,YAAc,GAKnBz0H,KAAK00H,eAAiB,GAKtB10H,KAAK20H,SAAU,EAEf30H,KAAK40H,qBAAuB50H,KAAK40H,qBAAqBxkG,KAAKpwB,KAC/D,CAQA40H,uBACI,MAAMC,EAAWl9G,GAAiB3X,KAAKy0H,aACjCK,EAAgBn9G,GAAiB3X,KAAK00H,gBAExCG,EAxEoB,IAwEkBC,EAlEd,MAmExB90H,KAAKqJ,KAAK0mH,IAEV/vH,KAAK+0H,iBAAgB,IAIzB/0H,KAAKyN,OACT,CAQAunH,cAActC,EAAUuC,GACpBj1H,KAAKy0H,YAAYnlH,KAAKojH,GACtB1yH,KAAK00H,eAAeplH,KAAK2lH,EAC7B,CAQAF,gBAAgBh8C,GACZ/4E,KAAK20H,QAAU57C,EACf/4E,KAAKqJ,KAAKymH,GAAuB9vH,KAAK20H,QAC1C,CAOAN,gBAAgB7mG,GAEZxtB,KAAK+0H,iBAAiBvnG,GACtBxtB,KAAKyN,OACT,CAOA46E,WACI,OAAOroF,KAAK20H,OAChB,CAOAlnH,QACIzN,KAAKw0H,aAAc,EACnBx0H,KAAKy0H,YAAc,GACnBz0H,KAAK00H,eAAiB,GACtBr7F,aAAar5B,KAAKk1H,gBACtB,CAYAf,gBAAgBzB,GACZ,GAAK1yH,KAAK20H,QAKV,GAAI30H,KAAKw0H,YAAT,CAEI,MAAMW,EAAiBn9G,GAAqB06G,EAASG,SAErD7yH,KAAKg1H,cAActC,EAASE,MAAOj7G,GAAiBw9G,GAGxD,MAIA,GAAIzC,EAASE,MAvJK,GAuJsB,CACpC,MACMqC,EAAct9G,GADGK,GAAqB06G,EAASG,UAGjDoC,EArJkB,MAsJlBj1H,KAAKw0H,aAAc,EACnBx0H,KAAKg1H,cAActC,EAASE,MAAOqC,GAGnCj1H,KAAKk1H,gBAAkBz7F,WAAWz5B,KAAK40H,qBApJpB,MAsJ3B,CACJ,ECvJW,MAAMQ,WAA8B3tH,GAAAA,aAK/ClG,cACIqG,QAMA5H,KAAKw0H,aAAc,EAKnBx0H,KAAKy0H,YAAc,GAKnBz0H,KAAK20H,SAAU,EAEf30H,KAAKq1H,mBAAqBr1H,KAAKq1H,mBAAmBjlG,KAAKpwB,KAC3D,CAOAq1H,qBACkB19G,GAAiB3X,KAAKy0H,aAxDlB,KA2Ddz0H,KAAKqJ,KAAK6mH,IAIVlwH,KAAK+0H,iBAAgB,IAIzB/0H,KAAKyN,OACT,CAQAsnH,gBAAgBh8C,GACZ/4E,KAAK20H,QAAU57C,EACf/4E,KAAKqJ,KAAKymH,GAAuB9vH,KAAK20H,QAC1C,CAOAN,gBAAgB7mG,GAEZxtB,KAAK+0H,gBAAgBvnG,GACrBxtB,KAAKyN,OACT,CAOA46E,WACI,OAAOroF,KAAK20H,OAChB,CAWAR,gBAAgBzB,GACP1yH,KAAK20H,UAKN30H,KAAKw0H,YACLx0H,KAAKy0H,YAAYnlH,KAAKojH,EAASE,OAO/BF,EAASE,MArHG,KAsHZ5yH,KAAKw0H,aAAc,EACnBx0H,KAAKy0H,YAAYnlH,KAAKojH,EAASE,OAG/B5yH,KAAKk1H,gBAAkBz7F,WAAWz5B,KAAKq1H,mBA/GhB,MAiH/B,CAOA5nH,QACIzN,KAAKw0H,aAAc,EACnBx0H,KAAKy0H,YAAc,GACnBp7F,aAAar5B,KAAKk1H,gBACtB,ECzJG,IAAKI,GAAa,SAAbA,GAAa,OAAbA,EAAa,0CAAbA,CAAa,MAQlB,MAAMC,GAAkBD,GAAcC,gBCHvC9rH,IAASC,EAAAA,EAAAA,yCAMT8rH,GAAmB,mBAMnBC,GAAoB,oBAqB1B,MAAMC,GAOFn0H,YAAY8sB,EAAasnG,GAErB31H,KAAKquB,YAAcA,EAGnBruB,KAAK21H,QAAUA,EAGf31H,KAAK6lB,GAAKwI,EAAYwI,QAGtB72B,KAAK41H,SAAW,CAAC,EAIjB51H,KAAK61H,cAAgB,EAErB71H,KAAK81H,YAAc91H,KAAK81H,YAAY1lG,KAAKpwB,MACzCA,KAAK+1H,eAAiB/1H,KAAK+1H,eAAe3lG,KAAKpwB,MAC/CA,KAAKg2H,mBAAqBh2H,KAAKg2H,mBAAmB5lG,KAAKpwB,MACvDA,KAAKi2H,aAAej2H,KAAKi2H,aAAa7lG,KAAKpwB,MAC3CA,KAAKuZ,KAAOvZ,KAAKuZ,KAAK6W,KAAKpwB,MAC3BA,KAAKk2H,SAAWl2H,KAAKk2H,SAAS9lG,KAAKpwB,MACnCA,KAAKosC,QAAUpsC,KAAKi2H,cACxB,CAKAA,eACI,OAAOntH,OAAO2wB,WAAWz5B,KAAK81H,YAAa91H,KAAKk2H,WACpD,CAKA38G,OACQvZ,KAAKosC,SACLtjC,OAAOuwB,aAAar5B,KAAKosC,SAE7BpsC,KAAK21H,QAAQQ,kBAAkBn2H,KAAK6lB,GACxC,CAKAqwG,WACI,MAAME,EAAiBp2H,KAAK21H,QAAQtrG,WAAW2J,kBAAkBtwB,OAG3D2yH,EAFgBD,GAAkBA,EAAiB,GAAK,EACxBp2H,KAAK21H,QAAQW,YACdt2H,KAAK21H,QAAQY,qBAMlD,OAHU,IAAMh7G,KAAKizB,UACYjzB,KAAKC,IAAY66G,EAAer2H,KAAK21H,QAAQW,YAApC,IAAkD,IAGhG,CAMAR,cACI,MAAMU,EAAYx2H,KAAK61H,gBACjBY,EAAiB,CACnBrzH,KAAMoyH,GACN3vG,GAAI2wG,GAGRx2H,KAAK21H,QAAQ1wF,YAAYwxF,EAAgBz2H,KAAK6lB,IAC9C7lB,KAAK41H,SAASY,GAAa,CACvB3wG,GAAI2wG,EACJE,SAAU5tH,OAAO4pB,YAAY3W,MAErC,CAMAg6G,eAAezpF,GACX,MAAMmvC,EAAUz7E,KAAK41H,SAAStpF,EAASzmB,IAEnC41D,IACAA,EAAQ91D,IAAM7c,OAAO4pB,YAAY3W,MAAQ0/D,EAAQi7C,UAErD12H,KAAKg2H,oBACT,CAOAA,qBAEI,IACIv6C,EAAS+6C,EADT7wG,EAAM+9C,IAENizD,EAA2B,EAC3BC,EAAmB,EAEvB,IAAKJ,KAAax2H,KAAK41H,SACf51H,KAAK41H,SAAS/1G,eAAe22G,KAC7B/6C,EAAUz7E,KAAK41H,SAASY,GAExBI,IACIn7C,EAAQ91D,MACRgxG,IACAhxG,EAAMpK,KAAK4yB,IAAIxoB,EAAK81D,EAAQ91D,OAKxC,OAAIgxG,GAA4B32H,KAAK21H,QAAQW,aACzC7sH,GAAOE,KAAM,gBAAegc,WAAa3lB,KAAK6lB,UAAU7lB,KAAKquB,YAAYyI,YAAY,cACrF92B,KAAKuZ,YAELvZ,KAAK21H,QAAQtrG,WAAW5P,aAAapR,KACjCwtH,GAAoC72H,KAAKquB,YAAa1I,IAGnDixG,EAAmB,EAAI52H,KAAK21H,QAAQW,aAC3C7sH,GAAOE,KAAM,wBAAuB3J,KAAK6lB,sBAAsB+wG,eACtDD,qBACT32H,KAAKuZ,aAKTvZ,KAAKosC,QAAUpsC,KAAKi2H,eACxB,EAkBW,MAAMa,GAMjBv1H,YAAY8oB,EAAYxqB,EAASolC,GAC7BjlC,KAAKqqB,WAAaA,EAClBrqB,KAAKya,aAAe4P,EAAW5P,aAC/Bza,KAAKilC,YAAcA,EAGnBjlC,KAAK26C,aAAe,CAAC,EAErB36C,KAAKs2H,YA1LgB,EA2LrBt2H,KAAK+2H,kBAhLuB,IAiL5B/2H,KAAKu2H,qBAtL2B,IAwL5B12H,GAAWA,EAAQ81H,UACwB,iBAAhC91H,EAAQ81H,QAAQW,cACvBt2H,KAAKs2H,YAAcz2H,EAAQ81H,QAAQW,aAEU,iBAAtCz2H,EAAQ81H,QAAQoB,oBACvB/2H,KAAK+2H,kBAAoBl3H,EAAQ81H,QAAQoB,mBAEO,iBAAzCl3H,EAAQ81H,QAAQY,uBACvBv2H,KAAKu2H,qBAAuB12H,EAAQ81H,QAAQY,uBAGpD9sH,GAAOE,KACF,0CAAyC3J,KAAKs2H,kCAAkCt2H,KAAK+2H,2CAC5D/2H,KAAKu2H,yBAEnCv2H,KAAKg3H,kBAAoBh3H,KAAKg3H,kBAAkB5mG,KAAKpwB,MAErDA,KAAKi3H,gBAAkBj3H,KAAKi3H,gBAAgB7mG,KAAKpwB,MACjDqqB,EAAWX,GAAGrwB,GAAiC2G,KAAKi3H,iBAEpDj3H,KAAKk3H,gBAAkBl3H,KAAKk3H,gBAAgB9mG,KAAKpwB,MACjDqqB,EAAWX,GAAGrwB,GAAiD2G,KAAKk3H,iBAEpEl3H,KAAKm3H,iBAAmBn3H,KAAKm3H,iBAAiB/mG,KAAKpwB,MACnDqqB,EAAWX,GAAGrwB,EAAyC2G,KAAKm3H,iBAChE,CAMAA,mBACIn3H,KAAKqqB,WAAW2J,kBAAkB5lB,SAAQ8lB,GAAKl0B,KAAKg3H,kBAAkB9iG,EAAE2C,QAAS3C,KACjFl0B,KAAKqqB,WAAWX,GAAGrwB,GAAmC2G,KAAKg3H,kBAC/D,CAQAE,gBAAgB7oG,EAAaqD,GAGrBA,EAAQtuB,OAASoyH,GACjBx1H,KAAKo3H,cAAc/oG,EAAYwI,QAASnF,GACjCA,EAAQtuB,OAASqyH,IACxBz1H,KAAK+1H,eAAe1nG,EAAYwI,QAASnF,EAEjD,CASAslG,kBAAkBnxG,EAAIwI,GACdruB,KAAK26C,aAAa90B,KAClBpc,GAAOE,KAAM,0CAAyCkc,gBACtD7lB,KAAK26C,aAAa90B,GAAItM,QAGtBvZ,KAAKqqB,WAAW2J,kBAAkBtwB,OAAS1D,KAAK+2H,mBAOhD/2H,KAAKqqB,WAAWuH,WAAa/L,IAC7Bpc,GAAOE,KAAM,oCAAmCkc,KAChD7lB,KAAK26C,aAAa90B,GAAM,IAAI6vG,GAAmBrnG,EAAaruB,MAEpE,CAKAm2H,kBAAkBtwG,GACV7lB,KAAK26C,aAAa90B,WACX7lB,KAAK26C,aAAa90B,EAEjC,CAOAoxG,gBAAgBpxG,GACR7lB,KAAK26C,aAAa90B,KAClB7lB,KAAK26C,aAAa90B,GAAItM,cACfvZ,KAAK26C,aAAa90B,GAEjC,CASAuxG,cAAct0G,EAAe24D,GAEzB,GAAIA,GAAWA,EAAQ51D,GAAI,CACvB,MAAMymB,EAAW,CACblpC,KAAMqyH,GACN5vG,GAAI41D,EAAQ51D,IAGhB7lB,KAAKilC,YAAYqH,EAAUxpB,EAC/B,MACIrZ,GAAOE,KAAM,6CAA4CmZ,KAEjE,CAQAizG,eAAejzG,EAAewpB,GAC1B,MAAM+qF,EAAqBr3H,KAAK26C,aAAa73B,GAEzCu0G,GACAA,EAAmBtB,eAAezpF,EAE1C,CAKA/yB,OACI9P,GAAOE,KAAK,oBAEZ3J,KAAKqqB,WAAWuP,IAAIvgC,GAAmC2G,KAAKg3H,mBAC5Dh3H,KAAKqqB,WAAWuP,IAAIvgC,GAAiC2G,KAAKi3H,iBAC1Dj3H,KAAKqqB,WAAWuP,IAAIvgC,GAAiD2G,KAAKk3H,iBAE1E,IAAK,MAAMrxG,KAAM7lB,KAAK26C,aACd36C,KAAK26C,aAAa96B,eAAegG,IACjC7lB,KAAK26C,aAAa90B,GAAItM,OAI9BvZ,KAAK26C,aAAe,CAAC,CACzB,ECvWJ,MAAMlxC,IAASC,EAAAA,EAAAA,oDAOA,MAAM4tH,GAKjB/1H,YAAY8oB,GACRrqB,KAAKm1B,YAAc9K,EASnBrqB,KAAKu3H,SAAU,EAEfv3H,KAAKm1B,YAAY1pB,iBACbpS,IAAmC,IAAM2G,KAAKw3H,mBAClDx3H,KAAKm1B,YAAY1pB,iBACbpS,IAAiC,IAAM2G,KAAKw3H,mBAChDx3H,KAAKm1B,YAAY1pB,iBACbpS,IAAkC,IAAM2G,KAAKw3H,kBACrD,CAMAA,iBACI,MAAMC,EAAYz3H,KAAKu3H,QACjBljB,GACCr0G,KAAKm1B,YAAY+9E,eACblzG,KAAKm1B,YAAYqzD,uBAAyB,EAEjDivC,IAAcpjB,IACdr0G,KAAKu3H,QAAUljB,EACf5qG,GAAOgH,MAAO,iBAAgBgnH,QAAgBpjB,KAC9Cr0G,KAAKm1B,YAAY1a,aAAapR,KAC1BhQ,GAAqCo+H,EAAWpjB,GAE5D,iBC/CG,MAAMqjB,GAQTjhH,MACQ2nF,GACJ,MAAM,IAAIl9F,MAAM,kBACpB,CAOAqY,OACI,MAAM,IAAIrY,MAAM,kBACpB,CAOAy2H,qBACI,MAAM,IAAIz2H,MAAM,kBACpB,CAQAkiG,SACQz3E,GACJ,MAAM,IAAIzqB,MAAM,kBACpB,CAQA02H,aACQx5B,GACJ,MAAM,IAAIl9F,MAAM,kBACpB,CAUA22H,gBAAgBz5B,GACZ,OAAO05B,GAAAA,kBAAwC,CAC3Ch4H,QAAS,CAAE,SACXs+F,gBACDr+E,MAAKC,IACJ,GAAsB,IAAlBA,EAAOtc,OACP,MAAM,IAAIxC,MAAM,wDAGpB,MAAM+9F,EAAcj/E,EAAO,GAAGtT,OAE9B,QAAoBpM,IAAhB2+F,EACA,MAAM,IAAI/9F,MAAM,iCAGpB,OAAO+9F,CAAW,GAE1B,yaClFJ,MAAMx1F,IAASC,EAAAA,EAAAA,8DAOR,MAAMquH,WAAmBL,GAAiBn2H,cAAA,SAAAkC,WAE7Cu0H,GAAA,sBAIiB,MAEjBA,GAAA,oBAIe,MAEfA,GAAA,qBAIgB,KAAI,CAOpBvhH,MAAM2nF,GAKF,OAJKp+F,KAAKi4H,eACNj4H,KAAKi4H,aAAej4H,KAAKk4H,YAAY95B,IAGlCp+F,KAAKi4H,aAAal4G,MAAK,IAC1B,IAAI1L,SAAQC,IACRtU,KAAKm4H,eAAe1hH,QACpBnC,GAAS,KAGrB,CAOAiF,OACI,OAAO,IAAIlF,SACPC,IACItU,KAAKm4H,eAAeC,OAAS,IAAM9jH,IACnCtU,KAAKm4H,eAAe5+G,MAAM,GAGtC,CAOAo+G,qBACI,OAA2B,OAAvB33H,KAAKq4H,cACEhkH,QAAQC,QAAQ,CACnBlD,KAAMpR,KAAKq4H,cACXC,OAAQ,QAITjkH,QAAQE,OAAO,0BAC1B,CAOA6uF,SAASz3E,GACL,MAAM4sG,GAAgB5sG,EAEtB,IAAK3rB,KAAKw4H,QACN,OAAOnkH,QAAQC,UAGnB,MAAM+N,EAAQriB,KAAKw4H,QAAQnrC,iBAAiB,GAE5C,OAAKhrE,GAMDA,EAAM+R,UAAYmkG,IAClBl2G,EAAM+R,QAAUmkG,EAChB9uH,GAAOwG,IAAI0b,EAAQ,OAAS,WAGzBtX,QAAQC,YAVX7K,GAAO7J,MAAM,wCAENyU,QAAQC,UASvB,CASA4jH,YAAY95B,GACR,OAAIp+F,KAAKm4H,eACE9jH,QAAQC,UAGZ,IAAID,SAAQ,CAACC,EAAS1U,KACzBI,KAAK63H,gBAAgBz5B,GACpBr+E,MAAKrT,IACF1M,KAAKw4H,QAAU9rH,EACf1M,KAAKm4H,eAAiB,IAAIM,cAAc/rH,GACxC1M,KAAKm4H,eAAeO,gBACdlpH,GAAKxP,KAAK24H,eAAenpH,EAAE4B,MACjCkD,GAAS,IAEZ4L,OAAMgM,IACHziB,GAAO7J,MAAO,iCAAgCssB,KAC9CtsB,GAAO,GACT,GAEV,CASA+4H,eAAevnH,GACXpR,KAAKq4H,cAAgBjnH,CACzB,yaC5IJ,MAAM3H,IAASC,EAAAA,EAAAA,+EAMR,MAAMkvH,WAAoClB,GA6B7Cn2H,cACIqG,QA7BJowH,GAAA,qBAGgB,MAEhBA,GAAA,4BAGuB,MAEvBA,GAAA,oBAGe,MAEfA,GAAA,eAGU,MAEVA,GAAA,mBAGc,OAeVh4H,KAAKyxH,cAAgB,IAAI56G,aACzB7W,KAAK64H,YAAc74H,KAAKyxH,cAAcC,WACtCjoH,GAAOwG,IAAK,sBAAqBjQ,KAAK64H,eAC1C,CAWA9G,wBAAwB3zB,EAAalnF,GACjC,MAAwB,mBAAbA,EACA7C,QAAQE,OAAO,oCAGnBvU,KAAK63H,gBAAgBz5B,GAC3Br+E,MAAKrT,IACF1M,KAAKw4H,QAAU9rH,EACf1M,KAAKgyH,aACChyH,KAAKyxH,cAAcl5G,wBAAwB7L,GACjD1M,KAAKiyH,qBACCjyH,KAAKyxH,cAAcS,sBAAsB,KAAM,EAAG,GACxDlyH,KAAKiyH,qBAAqBc,eAAiB77G,EAC3CzN,GAAOgH,MAAM,0BAA0B,IAE1CyP,OAAMgM,IACHziB,GAAO7J,MAAO,iCAAgCssB,KAEvC7X,QAAQE,OAAO2X,KAE9B,CASA4mG,qBACI9yH,KAAKgyH,aAAax5G,QAAQxY,KAAKiyH,sBAC/BjyH,KAAKiyH,qBAAqBz5G,QAAQxY,KAAKyxH,cAAcuB,YACzD,CAQAC,wBACIjzH,KAAKiyH,qBAAqBc,oBAAiBzyH,EAC3CN,KAAKiyH,qBAAqBt4G,aAC1B3Z,KAAKgyH,aAAar4G,YACtB,CASAm/G,YAAY16B,GACR,OAAIp+F,KAAKyxH,eAAiBzxH,KAAKiyH,qBACpBjyH,KAAK63H,gBAAgBz5B,GAAar+E,MAAKuxE,IAC1C,MAAMynC,EAAY/4H,KAAKyxH,cAClBl5G,wBAAwB+4E,GAE7BtxF,KAAKgyH,aAAar4G,aAClBo/G,EAAUvgH,QAAQxY,KAAKiyH,sBACvBjyH,KAAKw4H,QAAUlnC,EACftxF,KAAKgyH,aAAe+G,CAAS,IAI9B1kH,QAAQC,SACnB,yaC9HJ,MAAM7K,IAASC,EAAAA,EAAAA,8DASR,MAAMsvH,WAAmBJ,GAyB5Br3H,cACIqG,QAxBJowH,GAAA,kBAGa,GAEbA,GAAA,mBAGc,IAEdA,GAAA,uBAGiB,GAEjBA,GAAA,oBAGe,MAOXh4H,KAAK8xH,gBAAkB9xH,KAAK8xH,gBAAgB1hG,KAAKpwB,KACrD,CAOAyW,MAAM2nF,GAKF,OAJKp+F,KAAKi4H,eACNj4H,KAAKi4H,aAAej4H,KAAKk4H,YAAY95B,IAGlCp+F,KAAKi4H,aAAal4G,MAAK,KAC1B/f,KAAKi5H,YAAc,GACnBj5H,KAAKk5H,WAAa,EAElBl5H,KAAK8yH,oBAAoB,GAEjC,CAOAv5G,OAOI,OANAvZ,KAAKizH,wBACLjzH,KAAKm5H,MAAQn5H,KAAKo5H,eAAep5H,KAAKi5H,YAAaj5H,KAAKk5H,YACxDl5H,KAAKiyH,qBAAuB,KAC5BjyH,KAAKgyH,aAAe,KACpBhyH,KAAKq5H,gBAAiB,EAEfhlH,QAAQC,SACnB,CAOAqjH,qBACI,OAAmB,OAAf33H,KAAKm5H,MACE9kH,QAAQC,QAAQ,CACnBlD,KAAMpR,KAAKm5H,MACXb,OAAQ,QAITjkH,QAAQE,OAAO,0BAC1B,CAOA6uF,SAASz3E,GACL,MAAM4sG,GAAgB5sG,EAEtB,IAAK3rB,KAAKw4H,QACN,OAAOnkH,QAAQC,UAGnB,MAAM+N,EAAQriB,KAAKw4H,QAAQnrC,iBAAiB,GAE5C,OAAKhrE,GAMDA,EAAM+R,UAAYmkG,IAClBl2G,EAAM+R,QAAUmkG,EAChB9uH,GAAOwG,IAAI0b,EAAQ,OAAS,WAGzBtX,QAAQC,YAVX7K,GAAO7J,MAAM,wCAENyU,QAAQC,UASvB,CAOAsjH,aAAax5B,GACT,OAAOp+F,KAAK84H,YAAY16B,EAC5B,CASAk7B,iBAAiBC,GAOb,MAAMtzD,EAAS,IAAIv+B,YAAY,IACzB8xF,EAAO,IAAIC,SAASxzD,GAqC1B,OAlCAyzD,GAAcF,EAAM,EAAG,QAGvBE,GAAcF,EAAM,EAAG,QAGvBE,GAAcF,EAAM,GAAI,QACxBA,EAAKG,UAAU,GAAI,IAAI,GACvBH,EAAKI,UAAU,GAAI,GAAG,GAGtBJ,EAAKI,UAAU,GAAI,GAAG,GAGtBJ,EAAKG,UAAU,GAAI35H,KAAK64H,aAAa,GAGrCW,EAAKG,UAAU,GACgB,EAA3BzzH,OAAOlG,KAAK64H,aA7JI,GA6JqC,GAAG,GAG5DW,EAAKI,UAAU,GAAI,EAAI1zH,OAhKH,IAgKiC,GAAG,GAExDszH,EAAKI,UAAU,GAlKK,IAkKoB,GAGxCF,GAAcF,EAAM,GAAI,QAGxBA,EAAKG,UAAU,EAAG,GAAKJ,GAAY,GAGnCC,EAAKG,UAAU,GAAIJ,GAAY,GAExB,IAAI5gH,WAAWstD,EAC1B,CASAiyD,YAAY95B,GACR,OAAIp+F,KAAKq5H,eACEhlH,QAAQC,UAGZtU,KAAK+xH,wBAAwB3zB,EAAap+F,KAAK8xH,iBACjD/xG,MAAK,KACF/f,KAAKq5H,gBAAiB,CAAI,GAEtC,CASAvH,gBAAgBtiH,GAIZ,MAAMqqH,EAAcrqH,EAAE6iH,YAAYC,eAAe,GAMjDtyH,KAAKi5H,YAAY3pH,KAAK,IAAIkiH,aAAaqI,IACvC75H,KAAKk5H,YAAcW,EAAYn2H,MACnC,CAUA01H,eAAeU,EAASp2H,GACpB,MAAM61H,EAAsB,EAAT71H,EACbuiE,EAAS,IAAIv+B,YAAY,GAAK6xF,GAC9BC,EAAO,IAAIC,SAASxzD,GAGpB8d,EAAS/jF,KAAKs5H,iBAAiBC,GAC/B9vF,EAAMs6C,EAAOrgF,OAEnB,IAAK,IAAIqC,EAAI,EAAGA,EAAI0jC,IAAO1jC,EACvByzH,EAAKO,SAASh0H,EAAGg+E,EAAOh+E,IAM5B,OA+BR,SAAyBi0H,EAAQC,EAAQC,GAErC,IAAIn0H,EAAGsjC,EACH8wF,EAAOjxF,EAAGkxF,EACd,MAAMC,EAAcH,EAAax2H,OACjC,IAAI42H,EAtCsB,GAwC1B,IAAKv0H,EAAI,EAAGA,EAAIs0H,IAAet0H,EAG3B,IAFAo0H,EAAQD,EAAan0H,GACrBq0H,EAAcD,EAAMz2H,OACf2lC,EAAI,EAAGA,EAAI+wF,IAAe/wF,EAAGixF,GAAK,EACnCpxF,EAAI3tB,KAAKC,KAAK,EAAGD,KAAK4yB,IAAI,EAAGgsF,EAAM9wF,KACnC2wF,EAAOO,SAASD,EAAGpxF,EAAI,EAAQ,MAAJA,EAAiB,MAAJA,GAAY,EAGhE,CAhDQsxF,CAAgBhB,EAAM,EAAIM,GAEnB,IAAIr/F,KAAK,CAAE++F,GAAQ,CAAEp2H,KAAM,aACtC,EAaJ,SAASs2H,GAAcF,EAAMS,EAAQQ,GACjC,MAAMC,EAAMD,EAAO/2H,OAGnB,IAAK,IAAIqC,EAAI,EAAGA,EAAI20H,IAAO30H,EACvByzH,EAAKO,SAASE,EAASl0H,EAAG00H,EAAOvwF,WAAWnkC,GAEpD,waCxQA,MAAM0D,IAASC,EAAAA,EAAAA,oEAgBR,MAAMixH,WAAoB/B,GA0B7Br3H,cACIqG,QAzBJowH,GAAA,gBAGW,MAEXA,GAAA,4BAIuB,MAEvBA,GAAA,kCAG6B,MAE7BA,GAAA,oBAGe,MAOXh4H,KAAK8xH,gBAAkB9xH,KAAK8xH,gBAAgB1hG,KAAKpwB,MACjDA,KAAK46H,iBAAmB56H,KAAK46H,iBAAiBxqG,KAAKpwB,KACvD,CAOAyW,MAAM2nF,GAKF,OAJKp+F,KAAKi4H,eACNj4H,KAAKi4H,aAAej4H,KAAKk4H,YAAY95B,IAGlCp+F,KAAKi4H,aAAal4G,MAAK,KAC1B/f,KAAK8yH,oBAAoB,GAEjC,CAOAv5G,OACI,OAAKvZ,KAAK66H,SAMH,IAAIxmH,SAAQC,IACftU,KAAKi4H,aAAe,KACpBj4H,KAAKizH,wBACLjzH,KAAK86H,qBAAuBxmH,EAC5BtU,KAAK66H,SAASjuH,YAAY,CACtBmuH,QCrEkB,sBDsEpB,KAXFtxH,GAAO7J,MAAM,+CAENyU,QAAQE,SAWvB,CAOAojH,qBACI,OAAmB,OAAf33H,KAAKm5H,MACE9kH,QAAQC,QAAQ,CACnBlD,KAAMpR,KAAKm5H,MACXb,OAAQ,SAITjkH,QAAQE,OAAO,0BAC1B,CAOA6uF,SAASz3E,GACL,MAAM4sG,GAAgB5sG,EAEtB,IAAK3rB,KAAKw4H,QACN,OAAOnkH,QAAQC,UAGnB,MAAM+N,EAAQriB,KAAKw4H,QAAQnrC,iBAAiB,GAE5C,OAAKhrE,GAMDA,EAAM+R,UAAYmkG,IAClBl2G,EAAM+R,QAAUmkG,EAChB9uH,GAAOwG,IAAI0b,EAAQ,OAAS,WAGzBtX,QAAQC,YAVX7K,GAAO7J,MAAM,wCAENyU,QAAQC,UASvB,CAOAsjH,aAAax5B,GACT,OAAOp+F,KAAK84H,YAAY16B,EAC5B,CASA85B,YAAY95B,GACR,GAAsB,OAAlBp+F,KAAK66H,SACL,OAAOxmH,QAAQC,UAGnB,MAAM0mH,EAAoB,IAAI3mH,SAAQ,CAACC,EAASC,KAC5C,IACIvU,KAAKi7H,gBACT,CAAE,MAAOzrH,GACL+E,GACJ,CAKAvU,KAAKk7H,2BAA6B5mH,EAGlCtU,KAAK66H,SAAS3yC,UAAYloF,KAAK46H,iBAE/B56H,KAAK66H,SAASjuH,YAAY,CACtBmuH,QCrJgB,mBDsJhBpnG,OAAQ,CACJ+9F,WAAY1xH,KAAK64H,YACjBsC,IAAK,KAEX,IAKN,OAAOH,EACFj7G,MAAK,IACF/f,KAAK+xH,wBACD3zB,EACAp+F,KAAK8xH,kBAErB,CASAA,gBAAgBtiH,GAIZ,MAAMqqH,EAAcrqH,EAAE6iH,YAAYC,eAAe,GAEjDtyH,KAAK66H,SAASjuH,YAAY,CACtBmuH,QC/KgC,+BDgLhCK,IAAKvB,GAEb,CASAe,iBAAiBprH,GACb,OAAQA,EAAE4B,KAAK2pH,SACf,ICjLyB,oBDmLrB/6H,KAAKm5H,MAAQ3pH,EAAE4B,KAAKgqH,IACc,OAA9Bp7H,KAAK86H,uBACL96H,KAAK86H,uBACL96H,KAAK86H,qBAAuB,KAC5B96H,KAAK66H,SAASjwD,YACd5qE,KAAK66H,SAAW,MAEpB,MACJ,ICpLa,QDqLTpxH,GAAOwG,IAAIT,EAAE4B,MACb,MACJ,ICnM4B,uBDoMxB3H,GAAOwG,IAAI,qBACXjQ,KAAKk7H,6BACL,MACJ,QACIzxH,GAAO7J,MACF,6DAC4B4P,EAAE4B,KAAK2pH,aAGhD,CAQAE,iBACI,MAAMI,EAAO,IAAI5gG,KAAK,CAAC,oEAAqE,CAAC,KAAQ,2BAE/F6gG,GADMxyH,OAAO4xB,KAAO5xB,OAAOyyH,WACb5gG,gBAAgB0gG,GACpCr7H,KAAK66H,SAAW,IAAIhgG,OAAOygG,GAC3B5gG,IAAI8gG,gBAAgBF,EACxB,EEpPJ,MAAM7xH,IAASC,EAAAA,EAAAA,gEAOf,SAAS+xH,KACL,OAAO3yH,OAAO4pB,aACP5pB,OAAO4pB,YAAY3W,KACnBjT,OAAO4pB,YAAYgpG,QACnB5yH,OAAO4pB,YAAYgpG,OAAOC,gBAC3B7yH,OAAO4pB,YAAY3W,MAAQjT,OAAO4pB,YAAYgpG,OAAOC,gBACrD7/G,KAAKC,KACf,CAQA,MAAM6/G,GAAmBv6H,OAAOw6H,OAAO,CAMnCC,gBAAiB,kBAOjBC,gBAAiB,kBAKjBC,cAAe,kBAiFbC,GAAoB,iCAqTbC,GAAiB,IAvS9B,MAWI36H,0BATA,OAGoB,CACpB,kTAJA,gHAUIvB,KAAKm8H,eACT,CAQAA,gBACI,MAAMC,EAAU5yH,GAAkBpB,QAAQ6zH,IAE1C,GAAgB,OAAZG,EACA,IACI,MAAMC,EAAaC,GAAAA,MAAaF,GAEhCp8H,KAAKu8H,kBAAoBF,CAC7B,CAAE,MAAO7sH,GAGL,YAFA/F,GAAON,KAAK,qCAGhB,CAER,CAQAqzH,gBACIhzH,GAAkBlB,QAAQ2zH,GACtBtzH,KAAKC,UAAU5I,KAAKu8H,mBAC5B,CASAE,cAAcC,EAAcpE,QACqBh4H,IAAzCN,KAAKu8H,kBAAkBG,IACvB18H,KAAKu8H,kBAAkBG,GAAgB,CACnCpE,SACAzyF,OAAQ,IAEZ7lC,KAAKu8H,kBAAkBG,GAAc72F,OAAOv2B,KAAK,CAC7ClM,KAAMw4H,GAAiBE,gBACvB33G,UAAWs3G,OAEfz7H,KAAKw8H,iBAEL/yH,GAAON,KAAM,WAAUuzH,mBAE/B,CAOAp5C,cACI,MAAMq5C,EAAgBt7H,OAAO8G,KAAKnI,KAAKu8H,mBACjCvC,EAAS,GAEf,IAAK,IAAIj0H,EAAI,EAAGA,EAAI42H,EAAcj5H,SAAUqC,EAAG,CAC3C,MAAM62H,EAAc58H,KAAKu8H,kBAAkBI,EAAc52H,IACnD82H,EAAiB,CACnBpmH,MAAOmmH,EAAY/2F,OAAO,GAAG1hB,UAC7Bm0G,OAAQsE,EAAYtE,OACpBoE,aAAcC,EAAc52H,GAC5B+2H,SAAU98H,KAAK+8H,YAAYJ,EAAc52H,KAG7Ci0H,EAAO1qH,KAAKutH,EAChB,CAIA,OAFA7C,EAAOv1F,MAAK,CAAC3sB,EAAGC,KAAOD,EAAErB,OAAS,IAAMsB,EAAEtB,OAAS,KAE5CujH,CACX,CAQAgD,cAAcN,UACH18H,KAAKu8H,kBAAkBG,GAC9B18H,KAAKw8H,eACT,CAQAO,YAAYL,GACR,MAAME,EAAc58H,KAAKu8H,kBAAkBG,GAE3C,OAAIE,EACO58H,KAAKi9H,mBAAmBL,EAAY/2F,QAGxC,EACX,CAYAq3F,aAAaR,GACT,YAA6Cp8H,IAAzCN,KAAKu8H,kBAAkBG,IACvBjzH,GAAON,KACA,qDAAWuzH,MAEV,IAEZ18H,KAAKu8H,kBAAkBG,GAAc72F,OAAOv2B,KAAK,CAC7ClM,KAAMw4H,GAAiBG,gBACvB53G,UAAWs3G,OAEfz7H,KAAKw8H,gBAEEx8H,KAAK+8H,YAAYL,GAAch5H,OAAS,EACnD,CASAy5H,uBAAuBT,GACnB,QAA6Cp8H,IAAzCN,KAAKu8H,kBAAkBG,GACvB,OAAQ,EAEZ,MAAMI,EAAW98H,KAAK+8H,YAAYL,GAElC,OAAwB,IAApBI,EAASp5H,QAIOo5H,EAASA,EAASp5H,OAAS,GAE/B2pD,KALJ,EAULyvE,EAASp5H,OAAS,CAC7B,CAQA05H,WAAWV,QACsCp8H,IAAzCN,KAAKu8H,kBAAkBG,GACvBjzH,GAAON,KACA,sDAAWuzH,MAElB18H,KAAKu8H,kBAAkBG,GAAc72F,OAAOv2B,KAAK,CAC7ClM,KAAMw4H,GAAiBI,cACvB73G,UAAWs3G,OAEfz7H,KAAKw8H,gBAEb,CAUAS,mBAAmBp3F,GACf,GAAsB,IAAlBA,EAAOniC,OACP,MAAO,GAGX,MAAMs2H,EAAS,GACf,IAAIqD,EAAmB,KACnBC,EAAiB,CAAC,EAQtB,SAASC,IACL,QAAiCj9H,IAA7Bg9H,EAAeE,WACiB,OAA7BF,EAAeE,UAClB,GAAIxD,EAAOt2H,OAAS,GAAKs2H,EAAOA,EAAOt2H,OAAS,GAAG2pD,IAAK,CACpD,MAAMowE,EAAczD,EAAOA,EAAOt2H,OAAS,GAEvC45H,EAAe7mH,OAASgnH,EAAYpwE,IACpCiwE,EAAeE,UAAYF,EAAe7mH,MACpCgnH,EAAYpwE,IAElBiwE,EAAeE,UAAY,IAEnC,MAAgC,OAArBH,GAA+C,IAAlBrD,EAAOt2H,OAC3C45H,EAAeE,UAAYF,EAAe7mH,MACpC6mH,EAAe7mH,MAAQ4mH,EACvB,KAENC,EAAeE,UAAY,KAGnCF,EAAe7hH,SAAW6hH,EAAejwE,KAAOiwE,EAAe7mH,MACzD6mH,EAAejwE,IAAMiwE,EAAe7mH,MACpC,KACNujH,EAAO1qH,KAAKguH,GACZA,EAAiB,CAAC,CACtB,CAEA,IAAK,IAAIv3H,EAAI,EAAGA,EAAI8/B,EAAOniC,SAAUqC,EAAG,CACpC,MAAM23H,EAAe73F,EAAO9/B,GAE5B,OAAQ23H,EAAat6H,MACrB,KAAKw4H,GAAiBE,gBACO,OAArBuB,EACAA,EAAmBK,EAAav5G,UAEhC1a,GAAON,KAAK,oCACNu0H,GAEV,MACJ,KAAK9B,GAAiBG,qBACWz7H,IAAzBg9H,EAAe7mH,OACa,OAAzB6mH,EAAe7mH,OAGlB8mH,IAFAD,EAAe7mH,MAAQinH,EAAav5G,UAKxC,MAEJ,KAAKy3G,GAAiBI,mBACW17H,IAAzBg9H,EAAe7mH,OACa,OAAzB6mH,EAAe7mH,MAClBhN,GAAON,KAAK,iCAAkCu0H,IAE9CJ,EAAejwE,IAAMqwE,EAAav5G,UAClCo5G,KAEJ,MAEJ,QACI9zH,GAAON,KAAK,8CAGpB,CAKA,OAJIm0H,EAAe7mH,OACf8mH,IAGGvD,CACX,0aAUJlxH,OAAOozH,eAAiBA,GCnbxB,MAAMzyH,IAASC,EAAAA,EAAAA,wEAcTi0H,GAAgB,gBAMhBC,GAAe,eAMfC,GAAe,eAafC,GAAiB,gBAKjBC,GAAoB,IAAInwH,IAAI,CAAE,OAAQ,MAAO,QAU7CowH,GAAkB38H,OAAOw6H,OAAO,CAIlCoC,KAAMnkG,OAAO,QAKbokG,SAAUpkG,OAAO,YAKjBqkG,UAAWrkG,OAAO,aAKlBskG,SAAUtkG,OAAO,YAKjBukG,OAAQvkG,OAAO,YAkCZ,MAAMwkG,GAkET/8H,cAhEAy2H,GAAA,iBAOY,CAAC,GAEbA,GAAA,mBAKc,MAEdA,GAAA,6BAOwB,GAExBA,GAAA,cAKSgG,GAAgBC,MAEzBjG,GAAA,iBAKW,GAEXA,GAAA,oBAKe,WAEfA,GAAA,eA/G6B,QAwH7BA,GAAA,oBAMc,GAIVh4H,KAAKu+H,eAAiBv+H,KAAKu+H,eAAenuG,KAAKpwB,MAC/CA,KAAKw+H,qBAAuBx+H,KAAKw+H,qBAAqBpuG,KAAKpwB,MAC3DA,KAAKy+H,gBAAkBz+H,KAAKy+H,gBAAgBruG,KAAKpwB,MACjDA,KAAK0+H,eAAiB1+H,KAAK0+H,eAAetuG,KAAKpwB,MAC/CA,KAAK2+H,eAAiB3+H,KAAK2+H,eAAevuG,KAAKpwB,MAC/CA,KAAK4+H,kBAAoB5+H,KAAK4+H,kBAAkBxuG,KAAKpwB,MACrDA,KAAK6+H,iBAAmB7+H,KAAK6+H,iBAAiBzuG,KAAKpwB,MACnDA,KAAK8+H,aAAe9+H,KAAK8+H,aAAa1uG,KAAKpwB,MAC3CA,KAAK++H,oBAAsB/+H,KAAK++H,oBAAoB3uG,KAAKpwB,KAC7D,CAOAu+H,eAAel0G,GACNrqB,KAAKg/H,cACNh/H,KAAKm1B,YAAc9K,EACfrqB,KAAKm1B,cACLn1B,KAAKm1B,YACA8pG,mBAAmBrB,GAAc59H,KAAK0+H,gBAC3C1+H,KAAKm1B,YACA8pG,mBAAmBtB,GAAe39H,KAAKy+H,iBAC5Cz+H,KAAKm1B,YACA8pG,mBAAmBpB,GAAc79H,KAAK2+H,gBAC3C3+H,KAAKg/H,aAAc,GAElBh/H,KAAKm1B,YAAYvE,eAClB5wB,KAAKm1B,YAAY+pG,gBAAgBrB,GAAc,CAAC,GAG5D,CAQIsB,mBAAeC,GACfp/H,KAAKq/H,gBAAkBD,CAC3B,CAQIE,aAASF,GACTp/H,KAAKu/H,UAAYH,CACrB,CAQII,cAAUJ,GACVp/H,KAAKy/H,WAAaL,CACtB,CAOAM,eAAepH,GACXt4H,KAAKu+H,iBACLv+H,KAAK2/H,aAAarH,GACdt4H,KAAKm1B,aAAen1B,KAAKm1B,YAAYvE,eACrC5wB,KAAKm1B,YAAYyqG,cAAchC,IAC/B59H,KAAKm1B,YAAY0qG,YAAYlC,GAAe,CACxCz6H,WAAY,CACRw5H,aAAc18H,KAAK8/H,kBACnBxH,OAAQt4H,KAAK+/H,YAGd//H,KAAKy/H,YACZz/H,KAAKy/H,WAAW,uCAExB,CAOAO,gBACQhgI,KAAKm1B,cACDn1B,KAAKm1B,YAAYvE,eACjB5wB,KAAKm1B,YAAYyqG,cAAcjC,IAC/B39H,KAAKm1B,YAAY0qG,YAAYjC,GAAc,CACvC16H,WAAY,CACRw5H,aAAc18H,KAAKigI,yBAGpBjgI,KAAKy/H,YACZz/H,KAAKy/H,WAAW,wCAG5B,CASAS,qBAAqBxD,GACb18H,KAAKmgI,UAAUzD,GACf18H,KAAKmgI,UAAUzD,GAAc/E,qBACxB53G,MAAKjN,IACF,MAAM,KAAE1B,EAAI,OAAEknH,GAAWxlH,GCpStC,SAAsBuoH,GAAkC,IAA5B+E,EAAQ38H,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,gBAC1C,MAAM48H,EAAYv3H,OAAO4xB,IAAIC,gBAAgB0gG,GAGvCvjH,EAAIqiB,SAASwgE,cAAc,KAEjC7iF,EAAEwoH,MAAQ,gBACVxoH,EAAE2mE,KAAO4hD,EACTvoH,EAAE4F,SAAW0iH,EACbjmG,SAAS0I,KAAKwrB,YAAYv2C,GAC1BA,EAAEyoH,QACFpmG,SAAS0I,KAAK29F,YAAY1oH,EAC9B,CD6RoB2oH,CAAarvH,EAHK,WAAUsrH,KAClB18H,KAAKm1B,YAAYvD,cAAc0mG,IAEb,IAE/Bp4G,OAAMtgB,IACH6J,GAAO7J,MACA,wCAAW88H,aAAwB98H,IAAQ,IAG1D6J,GAAO7J,MAAO,sCAAqC88H,IAE3D,CAQA9E,aAAax5B,GACLA,IAAgBp+F,KAAK0gI,eACrB1gI,KAAK0gI,aAAeh1E,OAAO0yC,GAEvBp+F,KAAK2gI,SAAW3C,GAAgBG,YAEhC10H,GAAOwG,IAAI,kCACXjQ,KAAKmgI,UAAUngI,KAAKigI,sBACfrI,aAAa53H,KAAK0gI,cAClB3gH,MAAK,KACFtW,GAAOwG,IAAI,iCAAiC,IAI/CiQ,OAAM,KACHzW,GAAO7J,MAAM,8BAA8B,KAGvD6J,GAAOwG,IAAK,wBAAuBjQ,KAAK0gI,gBAEhD,CASAt9B,SAASz3E,GACL3rB,KAAK4gI,SAAW12H,QAAQyhB,GAEpB3rB,KAAK2gI,SAAW3C,GAAgBG,WAChCn+H,KAAKmgI,UAAUngI,KAAKigI,sBAAsB78B,SAASpjG,KAAK4gI,SAEhE,CAQAjB,aAAakB,GACJ9C,GAAkBhzG,IAAI81G,IAK3B7gI,KAAK+/H,QAAUc,EACfp3H,GAAOwG,IAAK,gCAA+B4wH,MALvCp3H,GAAOwG,IAAK,kBAAiB4wH,iBAQrC,CAOAC,gBACI,MAAO,CACHC,oBAAqB/gI,KAAKigI,qBAC1Be,YAAahhI,KAAK2gI,SAAW3C,GAAgBG,UAC7C8C,cAAe,EACfC,eAAgB,EAExB,CAMA1C,uBACI,MAAMjiF,EACAv8C,KAAKm1B,YAAYnB,kBAClB0J,KAAIwpB,IACM,CACHrhC,GAAIqhC,EAAOrwB,QACXlC,YAAauyB,EAAOvwB,iBACpBwqG,eACI7E,GAAAA,MAAap1E,EAAOpwB,YAAYgnG,KAAmB,MACvDsD,QAAQ,MAKdphH,EAAS,CAAC,EAEhB,IAAK,IAAIja,EAAI,EAAGA,EAAIw2C,EAAQ74C,SAAUqC,EAClCia,EAAOu8B,EAAQx2C,GAAG8f,IAAM02B,EAAQx2C,GAEpC,MAAMs7H,EAAUrhI,KAAKm1B,YAAYvD,WASjC,OAPA5R,EAAOqhH,GAAW,CACdx7G,GAAIw7G,EACJ1sG,YAAa,oBACbwsG,eAAgBnhI,KAAK8gI,gBACrBM,QAAQ,GAGLphH,CACX,CAQAshH,aAAaxsB,GACL90G,KAAK2gI,SAAW7rB,IAChBrrG,GAAOwG,IAAK,iBAAgBjQ,KAAK2gI,OAAOtxF,iBAC/BylE,EAASzlE,cAClBrvC,KAAK2gI,OAAS7rB,EAEtB,CAOAgqB,eACQ9+H,KAAKm1B,aACLn1B,KAAKm1B,YAAYqH,4BAA4BshG,GACzCn1H,KAAKC,UAAU5I,KAAK8gI,iBAEhC,CAQArC,gBAAgB92H,GACZ,MAAM,aAAE+0H,EAAY,OAAEpE,GAAW3wH,EAAMzE,WAEnClD,KAAK2gI,SAAW3C,GAAgBC,MAChCj+H,KAAKshI,aAAatD,GAAgBE,UAClCl+H,KAAK++H,oBAAoBrC,EAAcpE,GACvCt4H,KAAK4+H,qBACE5+H,KAAK2gI,SAAW3C,GAAgBG,WACpCn+H,KAAKigI,uBAAyBvD,IAIjC18H,KAAKshI,aAAatD,GAAgBI,UAClCp+H,KAAK6+H,mBAAmB9+G,MAAK,KACzB/f,KAAKshI,aAAatD,GAAgBE,UAClCl+H,KAAK++H,oBAAoBrC,EAAcpE,GACvCt4H,KAAK4+H,mBAAmB,IAGpC,CAQAF,eAAe/2H,GACP3H,KAAK2gI,SAAW3C,GAAgBG,WAC7Bn+H,KAAKigI,uBAAyBt4H,EAAMzE,WAAWw5H,eAClD18H,KAAKshI,aAAatD,GAAgBI,UAClCp+H,KAAK6+H,mBAEb,CAOAF,iBACQ3+H,KAAKm1B,YAAYvE,gBACjBnnB,GAAOwG,IAAI,gCACXjQ,KAAKm1B,YAAY+pG,gBA9cR,eA8csC,CAAC,GAExD,CAQAY,kBACI,OAAOvkH,KAAKgzB,MAAsB,IAAhBhzB,KAAKizB,UAAwB,CACnD,CAOAowF,oBACI,GAAI5+H,KAAK2gI,SAAW3C,GAAgBE,SAAU,CAC1C,MAAMkB,EAAWp/H,KAAKmgI,UAAUngI,KAAKigI,sBAErCb,EAAS3oH,MAAMzW,KAAK0gI,cACnB3gH,MAAK,KACF/f,KAAKshI,aAAatD,GAAgBG,WAClCjC,GAAegB,aAAal9H,KAAKigI,sBACjCx2H,GAAOwG,IAAI,4BAEPjQ,KAAKu/H,WACLv/H,KAAKu/H,UAAU,mCAEfv/H,KAAKq/H,iBACLr/H,KAAKq/H,iBAAgB,GAGzBD,EAASh8B,SAASpjG,KAAK4gI,UACvB5gI,KAAK8+H,cAAc,IAEtB5+G,OAAMgM,IACHziB,GAAO7J,MAAM,mCAAoCssB,EAAI,GAE7D,CAEJ,CAOA2yG,mBACI,GAAI7+H,KAAK2gI,SAAW3C,GAAgBI,SAAU,CAC1C,MAAMz+C,EAAQ3/E,KAAKigI,qBAEnB,OAAOjgI,KAAKmgI,UAAUngI,KAAKigI,sBACtB1mH,OACAwG,MAAK,KACF/f,KAAKshI,aAAatD,GAAgBC,MAClC/B,GAAekB,WAAWp9H,KAAKigI,sBAC/Bx2H,GAAOwG,IAAI,8BACXjQ,KAAKkgI,qBAAqBvgD,GAE1B,MAAM4hD,EACAvhI,KAAKm1B,YAAYvE,cACb,4CACA,mCACJ4wG,EAAgB,CAClB7hD,SAGA3/E,KAAKu/H,WACLv/H,KAAKu/H,UAAUgC,EAAYC,GAE3BxhI,KAAKq/H,iBACLr/H,KAAKq/H,iBAAgB,GAEzBr/H,KAAK8+H,cAAc,IAEtB5+G,OAAMgM,IACHziB,GAAO7J,MAAM,kCAAmCssB,EAAI,GAEhE,CAGA,OAAO7X,QAAQC,SAInB,CAQAyqH,oBAAoBrC,EAAcpE,GAC9Bt4H,KAAK+/H,QAAUzH,EACft4H,KAAKigI,qBAAuBvD,EAC5BjzH,GAAOwG,IAAK,gBAAejQ,KAAKigI,iCACfjgI,KAAK+/H,WACtB//H,KAAKmgI,UAAUzD,GACR18H,KAAKyhI,0BACZvF,GAAeO,cAAcC,EAAc18H,KAAK+/H,QACpD,CAQA0B,0BAII,OAHAh4H,GAAOgH,MACA,wDAAezQ,KAAK+/H,mBAEnB//H,KAAK+/H,SACb,IAAK,MACD,OAAO,IAAIhI,GACf,IAAK,OACD,OAAO,IAAI4C,GACf,IAAK,MACD,OAAO,IAAI3B,GACf,QACI,MAAM,IAAI93H,MAAO,mBAAkBlB,KAAK+/H,WAEhD,EE3mBJ,MAAM2B,GAAiB5nG,OAAO,kBAExBrwB,IAASC,EAAAA,EAAAA,kDAKR,MAAMi4H,GAKTpgI,YAAY8oB,GACRrqB,KAAKo0B,QAAU5R,GAAAA,yBACVxiB,KAAKo0B,SAIV/J,EAAW6D,IAAIxE,GACXwI,GAAAA,QAAAA,oBACA,CAAC7P,EAAOzN,IAAQ5U,KAAK4hI,uBAAuBhtH,EAAKyN,IACzD,CAOAu/G,uBAAuBhtH,EAAKyN,GACxB,IAAKriB,KAAKo0B,QACN,OAGJ,MAAM+G,EAAWvmB,EAAIioB,qBAAqBxa,EAAMA,OAEhD,IAAK8Y,EAGD,YAFA1xB,GAAON,KAAM,kCAAiCkZ,6BAAiCzN,KAKnF,GAAIumB,EAASumG,IACT,OAEJvmG,EAASumG,KAAkB,EAE3B,MAAMrmG,EAAkBF,EAAS1uB,uBAE3Bo1H,EAAkB,IAAIC,gBAAgB,CACxC1mG,UAAWA,SAKfC,EAAgBE,SAASwmG,YAAYF,GAAiBG,OAAO3mG,EAAgBrzB,SACjF,ECzDJ,MAAMyB,IAASC,EAAAA,EAAAA,+DACTu4H,GAAa,KAQnB,MAAMC,GAOF3gI,YAAY1B,GACR,MAAM,MAAEgoF,EAAK,oBAAEs6C,GAAwBtiI,EAGvCG,KAAKwqH,OAAS3iC,QAAAA,GAlBE,EAqBhB7nF,KAAKoiI,gBAAkBH,GAGvBjiI,KAAKqiI,qBAAuBF,QAAAA,GAvBN,EAyBtBniI,KAAKmrH,0BAA4B,CAC7BgX,oBAAqBniI,KAAKqiI,qBAC1BniI,YAAa,CAAC,EACdoiI,mBAAoB,CAAE,UAAatiI,KAAKoiI,iBACxCv6C,MAAO7nF,KAAKwqH,OAEpB,CAKItqH,kBAAc,IAAAqiI,EAGd,GAFAviI,KAAKmrH,0BAA0BgX,oBAAsBniI,KAAKqiI,qBAC1DriI,KAAKmrH,0BAA0BtjC,MAAQ7nF,KAAKwqH,OACe,QAA3D+X,EAAIlhI,OAAO8G,KAAKnI,KAAKmrH,0BAA0BjrH,oBAAY,IAAAqiI,GAAvDA,EAAyD7+H,OAEzD,IAAK,MAAQgE,EAAKC,KAAWtG,OAAO+Z,QAAQpb,KAAKmrH,0BAA0BjrH,aACvEyH,EAAMmqD,UAAY9xD,KAAKoiI,qBAG3BpiI,KAAKmrH,0BAA0BmX,mBAAqB,CAAE,UAAatiI,KAAKoiI,iBAG5E,OAAOpiI,KAAKmrH,yBAChB,CASAqX,0BAA0BL,GACtB,MAAMlgB,EAAUjiH,KAAKqiI,uBAAyBF,EAO9C,OALIlgB,IACAjiH,KAAKqiI,qBAAuBF,EAC5B14H,GAAOgH,MAAO,yCAAwC0xH,MAGnDlgB,CACX,CAQAwgB,YAAY96H,GACR,MAAMs6G,EAAUjiH,KAAKwqH,SAAW7iH,EAOhC,OALIs6G,IACAjiH,KAAKwqH,OAAS7iH,EACd8B,GAAOgH,MAAO,2CAA0C9I,OAGrDs6G,CACX,CASAygB,wBAAwBjuD,GACpB,MAAMwtC,EAAUjiH,KAAKoiI,kBAAoB3tD,EAOzC,OALIwtC,IACAjiH,KAAKoiI,gBAAkB3tD,EACvBhrE,GAAOgH,MAAO,oCAAmCgkE,MAG9CwtC,CACX,CAQA0gB,+BAA+BC,GAC3B,MAAM3gB,GAAW9+E,KAAQnjC,KAAKmrH,0BAA2ByX,GAOzD,OALI3gB,IACAjiH,KAAKmrH,0BAA4ByX,EACjCn5H,GAAOgH,MAAO,qCAAoC9H,KAAKC,UAAUg6H,OAG9D3gB,CACX,EAQW,MAAM4gB,GAQjBthI,YAAY8oB,EAAY6D,GAAK,IAAA40G,EACzB9iI,KAAKm1B,YAAc9K,EACnBrqB,KAAK+iI,KAAO70G,EACZ,MAAM,OAAEyF,GAAWtJ,EAAWxqB,QAG9BG,KAAKwqH,OAA2B,QAArBsY,EAAGnvG,aAAM,EAANA,EAAQqvG,kBAAU,IAAAF,EAAAA,GAAKnvG,aAAM,EAANA,EAAQmgD,gBA9I7B,EAiJhB9zE,KAAKoiI,gBAAkBH,GAOvBjiI,KAAK6rE,2BAA6B,IAAI7sD,IAKtChf,KAAKqiI,sBA5JiB,EA+JtBriI,KAAKmrH,0BAA4B,IAAI+W,GAAyB,CAC1Dr6C,MAAO7nF,KAAKwqH,OACZ2X,oBAAqBniI,KAAKqiI,uBAG9BriI,KAAKm1B,YAAYzL,GACbrwB,IACAg0B,GAAWrtB,KAAKk8B,uBAAuB7O,IAC/C,CASA41G,qCAAqC39C,EAAc7Q,GAAgB,IAAAyuD,EAC/D,MAAMtgH,EAAS6xD,QAAAA,EAAkBwtD,GAC3BkB,GAA+C,QAA3BD,EAAA59C,EAAat0E,sBAAc,IAAAkyH,OAAA,EAA3BA,EAA6B5tD,gBAAgB,KAAMj5D,GAAUwK,SAAU,GAC3FykD,EAAsB,IAAItsD,IAEhC,IAAK,MAAMqD,KAAS8gH,EAChB73D,EAAoBxlD,IAAIzD,EAAMK,gBAAiBE,GAGnD,OAAO0oD,CACX,CAUApvC,uBAAuBopD,GACfA,EAAarwE,MACbqwE,EAAapR,2BAA2Bl0E,KAAKijI,qCAAqC39C,IAElFtlF,KAAK+iI,KAAK1X,4BAA4BrrH,KAAKmrH,0BAA0BjrH,YAE7E,CAOA20G,WACI,OAAO70G,KAAKwqH,MAChB,CAQA4Y,uBAAuBjB,GACfniI,KAAKmrH,0BAA0BqX,0BAA0BL,IACzDniI,KAAK+iI,KAAK1X,4BAA4BrrH,KAAKmrH,0BAA0BjrH,YAE7E,CASAosH,SAAS3kH,GACD3H,KAAKwqH,SAAW7iH,IAChB3H,KAAKwqH,OAAS7iH,EACV3H,KAAKmrH,0BAA0BsX,YAAY96H,IAC3C3H,KAAK+iI,KAAK1X,4BAA4BrrH,KAAKmrH,0BAA0BjrH,aAGjF,CAQAmjI,kCAAkC5uD,GAC9Bz0E,KAAKoiI,gBAAkB3tD,EAEvB,IAAK,MAAMpnD,KAAWrtB,KAAKm1B,YAAYvC,mBAC/BvF,EAAQpY,MACRoY,EAAQ6mD,2BAA2Bl0E,KAAKijI,qCAAqC51G,EAASonD,IAC/Ez0E,KAAKmrH,0BAA0BuX,wBAAwBjuD,IAC9Dz0E,KAAK+iI,KAAK1X,4BAA4BrrH,KAAKmrH,0BAA0BjrH,YAGjF,CAOAojI,uBAAuBpjI,GACnB,GAAKA,EAAL,CAKA,GAF0BmB,OAAO8G,KAAKjI,GAAa6vC,SAAS,mBAAoB,qBAG5E,MAAM,IAAI7uC,MACN,qGAKR,GAF2BlB,KAAKmrH,0BAA0BwX,+BAA+BziI,GAEjE,KAAAqjI,EAAAC,EACpBxjI,KAAKqiI,qBAAsD,QAAlCkB,EAAGrjI,EAAYiiI,2BAAmB,IAAAoB,EAAAA,EAAIvjI,KAAKqiI,qBACpEriI,KAAKwqH,OAA0B,QAApBgZ,EAAGtjI,EAAY2nF,aAAK,IAAA27C,EAAAA,EAAIxjI,KAAKwqH,OAGxCxqH,KAAK+iI,KAAK1X,4BAA4BnrH,GAEtC,MAAMujI,EAAazjI,KAAKm1B,YAAYvC,mBAAmBqB,MAAK5G,GAAWA,EAAQpY,QAE/E,IAAKwuH,EACD,OAGJ,MAAMC,EAAoBvjI,MAAMqqB,KAAKnpB,OAAO+Z,QAAQlb,EAAYA,cAC3Dw9B,KAAIh9B,IACDA,EAAW,GAAKA,EAAW,GAAGoxD,UAEvBpxD,KAGfV,KAAK6rE,2BAA6B,IAAI7sD,IAAI0kH,GAG1CD,EAAWvvD,2BAA2Bl0E,KAAK6rE,2BAC/C,CAlCA,CAmCJ,ECjTJ,MAAMpiE,IAASC,EAAAA,EAAAA,4DAUA,MAAMi6H,GAQjBpiI,YAAY8oB,EAAY6D,GACpBluB,KAAKm1B,YAAc9K,EACnBrqB,KAAK4jI,6BAnBgB,KAoBrB5jI,KAAK+iI,KAAO70G,EAOZluB,KAAK6jI,yBAA2B,IAAI7kH,IACpChf,KAAKm1B,YAAYzL,GACbrwB,IACAg0B,GAAWrtB,KAAKk8B,uBAAuB7O,KAC3CrtB,KAAKm1B,YAAYzL,GACbrwB,IACA,IAAM2G,KAAK8jI,yCACf9jI,KAAK+iI,KAAKr5G,GACNwI,GAAAA,QAAAA,kCACA0wG,GAAoB5iI,KAAK+jI,6BAA6BnB,IAC9D,CAQAkB,uCACI,IAAK,MAAMzhH,KAASriB,KAAK+iI,KAAKpuD,sBAAuB,CACjD,MAAMlyD,EAAaJ,EAAMK,gBAEzBD,GAAcziB,KAAKgkI,6BAA6BvhH,EACpD,CACJ,CAUAyZ,uBAAuBopD,GACnBA,EAAav3D,YACTg9C,GAAAA,mCACA,CAAC19C,EAAS42G,KACN52G,IAAYrtB,KAAKm1B,YAAY+uG,yBACtBD,EAAkB71H,SAAQ1N,GAAcV,KAAK+jI,6BAA6BrjI,IAAY,GAEzG,CASAqjI,6BAA6BnB,GAAkB,IAAAuB,EAC3C,MAAM,UAAEryE,EAAS,WAAErvC,GAAemgH,EAC5B77G,EAAyD,QAAzCo9G,EAAGnkI,KAAKm1B,YAAYw/C,6BAAqB,IAAAwvD,EAAAA,EAAI,GAEnE,IAAK,MAAM9hH,KAAS0E,EAEZ1E,EAAMK,kBAAoBD,GACvBziB,KAAK6jI,yBAAyBl/G,IAAIlC,KAAgBqvC,IACrD9xD,KAAK6jI,yBAAyB/9G,IAC1BrD,GACe,IAAfqvC,EACMv2C,KAAK4yB,IAxFF,KAwF4BnuC,KAAK4jI,8BACpC9xE,GACVroD,GAAOgH,MAAO,iCAAgCgS,0BAAmCqvC,KACjF9xD,KAAKgkI,6BAA6BvhH,GAG9C,CAUAuhH,6BAA6BvhH,GACzB,IAAKA,EACD,MAAM,IAAIvhB,MAAM,yEAEpB,MAAMkjI,EAAqBpkI,KAAKqkI,0BAA0B5hH,GACpD4c,EAAW,GAEjB,GAAI+kG,GAAsB,EACtB,IAAK,MAAM/2G,KAAWrtB,KAAKm1B,YAAYvC,mBACnCyM,EAAS/vB,KAAK+d,EAAQmnD,yBAAyB4vD,EAAoB3hH,IAI3E,OAAOpO,QAAQ29D,IAAI3yC,EACvB,CAUAglG,0BAA0B5hH,GACtB,IAAKA,EACD,MAAM,IAAIvhB,MAAM,yEAEpB,MACMirE,EADqBnsE,KAAKm1B,YAAY+uG,wBAEtClkI,KAAK6jI,yBAAyBl/G,IAAIlC,QAClCniB,EAEN,OAAIN,KAAK4jI,8BAAgC,GAAKz3D,GAA4B,EAC/D5wD,KAAK4yB,IAAInuC,KAAK4jI,6BAA8Bz3D,GAC5CA,GAA4B,EAC5BA,EAGJnsE,KAAK4jI,4BAChB,CAQAU,+BAA+B7vD,GAC3Bz0E,KAAK4jI,6BAA+BnvD,EACpC,MAAMp1C,EAAW,GAEjB,IAAK,MAAM5c,KAAcziB,KAAK6jI,yBAAyB17H,OACnDk3B,EAAS/vB,KAAKtP,KAAKgkI,6BAA6BvhH,IAGpD,OAAOpO,QAAQorB,WAAWJ,EAC9B,ECpKJ,UAQIklG,wBAAwBr8E,GACpB,MAAMs8E,EAAct8E,GACbA,EAASd,qBAAqB,0BAA0B,GAE/D,GAAKo9E,EAIL,MAAO,CACH5kI,MAAO4kI,EAAY15F,aAAa,kBAChCujC,UAAWm2D,EAAY15F,aAAa,aACpC25F,cAAeD,EAAY15F,aAAa,kBACxC45F,UAAWF,EAAY15F,aAAa,cACpCr2B,OAAQ+vH,EAAY15F,aAAa,UAEzC,EASA65F,sBAAsBz8E,GAClB,MAAM08E,EACA18E,EAASd,qBAAqB,wBAAwB,GACtDy9E,EAAoBD,GACnBA,EAA2Bv9E,YAC5By9E,EACA58E,EAASd,qBAAqB,QAAQ,GACtC3H,EAAOqlF,GACNA,EAAcz9E,aACdy9E,EAAcz9E,YAAYW,cAC3B+8E,EACA78E,EAASd,qBAAqB,cAAc,GAIlD,MAAO,CACHy9E,oBACAplF,OACAilF,UALEK,GAAsBA,EAAmB19E,YAOnD,EAQA29E,mBAAmB14F,GACf,MAAM24F,EAAQ34F,GAAYA,EAAS8a,qBAAqB,SAAS,GAEjE,OAAO69E,GAASA,EAAMn6F,aAAa,aACvC,EAQAo6F,aAAah9E,GACT,MAAMi9E,EACAj9E,EAASd,qBAAqB,cAAc,GAGlD,OAFkB+9E,GAAsBA,EAAmB99E,WAG/D,EAQA+9E,YAAYl9E,GACDA,EAASpd,aAAa,QAAQiF,SAAS,UCpFvC,MAAMs1F,GAMjB9jI,cAA0B,IAAd1B,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnBzD,KAAKslI,YAAczlI,EAAQorC,WAC3BjrC,KAAKqmF,MAAQxmF,EAAQ4/C,KACrBz/C,KAAKulI,UAAY,KACjBvlI,KAAKwlI,kBAAoB,GAEzBxlI,KAAKylI,cAAc5lI,EAAQ6kI,WAC3B1kI,KAAK0lI,UAAU7lI,EAAQ4U,OAC3B,CAOAsc,WACI,OAAO/wB,KAAK8R,MAChB,CAOA6zH,QACI,OAAO3lI,KAAK4lI,UAChB,CAOAC,eACI,OAAO7lI,KAAK8lI,UAChB,CAOAC,uBACI,OAAO/lI,KAAKgmI,kBAChB,CAOAr2G,YAEI,OAAI3vB,KAAKyxB,QACEzxB,KAAKyxB,QAGTzxB,KAAKwlI,iBAChB,CAKAS,cACI,OAAOjmI,KAAKulI,SAChB,CAOAW,gBACI,OAAOlmI,KAAKmmI,WAChB,CAOAC,UACI,OAAOpmI,KAAKqmF,KAChB,CASAggD,SAASzmI,GACLI,KAAK8R,OAASlS,CAClB,CASA0mI,qBAAqBv3F,GACjB/uC,KAAKgmI,mBAAqBj3F,CAC9B,CAQA22F,UAAUjxH,GACNzU,KAAKyxB,QAAUhd,CACnB,CAQA8xH,oBAAoB9xH,GAChBzU,KAAKwlI,kBAAoB/wH,CAC7B,CAOA+xH,YAAYC,GACRzmI,KAAKulI,UAAYkB,CACrB,CAOA52G,aAAaxB,GACTruB,KAAK8lI,WAAaz3G,CACtB,CAOAuB,cAAcvB,GACVruB,KAAKmmI,YAAc93G,CACvB,CAmBA5X,MAAK62B,GAAkD,IAAjD,QAAEo5F,EAAO,YAAEC,EAAW,YAAEhiF,EAAW,SAAEgM,GAAUrjB,EACjD,OAAO,IAAIj5B,SAAQ,CAACC,EAASC,KACzBvU,KAAKslI,YAAYnvF,OACbn2C,KAAK4mI,UAAU,CACX3jI,OAAQ,QACRyjI,UACA/hF,cACAgiF,cACAh2E,cAEJ3wC,IAKIhgB,KAAK0lI,UAAU,WACf1lI,KAAKylI,cACDoB,GAAkB7B,mBAAmBhlH,IAEzC1L,GAAS,IAEb1U,IACII,KAAK8mI,gBAAgBlnI,GAErB2U,EAAO3U,EAAM,GACf,GAEd,CAWA2Z,KAAIo9B,GAAkB,IAAjB,YAAEgO,GAAahO,EAChB,OAAO,IAAItiC,SAAQ,CAACC,EAASC,KACzBvU,KAAKslI,YAAYnvF,OACbn2C,KAAK4mI,UAAU,CACX3jI,OAAQ,OACR0hD,gBAEJrwC,EACAC,EAAO,GAEnB,CAmBAqyH,UAASvkD,GAA0D,IAAzD,OAAEp/E,EAAM,QAAEyjI,EAAO,YAAEC,EAAW,YAAEhiF,EAAW,SAAEgM,GAAU0xB,EAC7D,IACIqkD,EAAU/9H,KAAK24B,MAAMolG,IAAW,CAAC,CACrC,CAAE,MAAMl3H,GACJk3H,EAAU,CAAC,CACf,CAKA,OAHAA,EAAkB,SAAIA,EAAkB,SAAIA,EAAkB,SAAK,GAAE59H,OAAOg2C,SAASD,SAAS/1C,OAAOg2C,SAASioF,WAC9GL,EAAe,MAAK1mI,KAAKslI,YAAYj6F,KAAKvjB,KAAK63D,OAExCruC,EAAAA,GAAAA,KAAI,CACPC,GAAIoT,EACJvhD,KAAM,QAETqlC,EAAE,QAAS,CACR,MAAS,kCACT,OAAUxlC,EACV,SAAY0F,KAAKC,UAAU89H,GAC3B,eAAkB1mI,KAAKqmF,MACvB,SAAY11B,EACZ,sBAAyBg2E,IAE5BxuF,IACL,CASA2uF,gBAAgBxkF,GACZ,MAAM1iD,EAAQ0iD,EAAQ8E,qBAAqB,SAAS,GAEpDpnD,KAAKqmI,SAASzmI,EAAMosC,SAAS,GAAG/b,QACpC,CASAw1G,cAAcf,GACV1kI,KAAK4lI,WAAalB,CACtB,ECnSJ,MAAMj7H,IAASC,EAAAA,EAAAA,oDCETD,IAASC,EAAAA,EAAAA,+DAWA,MAAMs9H,GAOjBzlI,YAAY8oB,GACRrqB,KAAKm1B,YAAc9K,EACnBrqB,KAAKinI,sBAAwB,CAAC,EAC9BjnI,KAAKknI,sBAAwB,GAC7BlnI,KAAKmnI,wBAA0B,CAAC,EAChCnnI,KAAKonI,mCAAqC,CAAC,EAC3CpnI,KAAKqnI,0BAA4BrnI,KAAKqnI,0BAA0Bj3G,KAAKpwB,MACrEA,KAAKsnI,4BAA8BtnI,KAAKsnI,4BAA4Bl3G,KAAKpwB,MACzEA,KAAKunI,eAAiBvnI,KAAKunI,eAAen3G,KAAKpwB,MAC/CA,KAAKm1B,YAAYzL,GAAG8iG,GAA8CxsH,KAAKsnI,6BACvEtnI,KAAKm1B,YAAY7J,WAAWvB,2BAA2B/pB,KAAKqnI,2BAC5DrnI,KAAKm1B,YAAYzL,GAAG6jG,GAA4BvtH,KAAKunI,eACzD,CASAD,4BAA4Bj0H,EAAMi6B,GAAsB,IAApB,eAAElqB,GAAgBkqB,EAClD,MAAMk6F,EAAmBxnI,KAAKonI,mCAAmC/zH,GAAU,GAAM,EAIjF,GAFArT,KAAKonI,mCAAmC/zH,GAAUm0H,GAEE,IAAhDxnI,KAAKknI,sBAAsBtmI,QAAQyS,IAAmBA,KAAUrT,KAAKmnI,yBAC9D/jH,GAAkB,GAAKokH,EAAkB,EAChD,OAGJ,MAAMn5G,EAAcruB,KAAKm1B,YAAY7G,mBAAmBjb,GAExD,GAAIgb,GACeA,EAAY6I,qBAAqB7a,GAAUkL,OAE/C7jB,OAAS,GAAK2qB,EAAYgJ,eAIjC,OAIR,MAAMowG,EAAmBznI,KAAKinI,sBAAsB5zH,GAE/ClT,MAAMC,QAAQqnI,KAAqBA,EAAiBjhC,OAAMnvF,GAA6B,IAAfA,MACzErX,KAAKmnI,wBAAwB9zH,GAAU,CACnCq0H,kBAAmBtkH,EACnBqkH,iBAAkB,IAG9B,CASAJ,0BAA0BzyH,EAAG+hC,GAAsB,IAApB,eAAEvzB,GAAgBuzB,EACzC/hC,IAAQ5U,KAAKm1B,YAAYo5F,4BAI7BltH,OAAO8G,KAAKib,GAAgBhV,SAAQiF,IAChC,IAAoD,IAAhDrT,KAAKknI,sBAAsBtmI,QAAQyS,GACnC,OAGJ,MAAMo0H,EAAmBznI,KAAKinI,sBAAsB5zH,GAE/ClT,MAAMC,QAAQqnI,GAERA,EAAiB/jI,QAxFR,GAyFhB+jI,EAAiB11F,QAFjB/xC,KAAKinI,sBAAsB5zH,GAAU,GAKzCrT,KAAKinI,sBAAsB5zH,GAAQ/D,KAAK8T,EAAe/P,GAAQ,IAInEhS,OAAO8G,KAAKnI,KAAKmnI,yBAAyB/4H,SAAQiF,IAC9C,MAAM,iBAAEo0H,EAAgB,kBAAEC,GAAsB1nI,KAAKmnI,wBAAwB9zH,GAI7E,GAFAo0H,EAAiBn4H,KAAK8T,EAAe/P,IAnGjB,IAqGhBo0H,EAAiB/jI,OAAoC,CACrD,GAAI+jI,EAAiBjhC,OAAMnvF,QAAoC,IAAfA,GAA6C,IAAfA,IAAmB,CAC7F,MAAMswH,EAAyBh/H,KAAKC,UAAU6+H,GAE9C5/G,GAAWmF,c/HsXc46G,EAAEv0H,EAAgBo0H,EAA2BC,KAA0B,CAChHtkI,KAAM5B,GAAgBC,iBACtBwB,OAAQ,uBACRC,WAAY,CACRmQ,SACAo0H,mBACAC,uB+H3XgBE,CAA8Bv0H,EAAQs0H,EAAwBD,IAClEj+H,GAAON,KAAM,yEACTkK,0BAA+Bs0H,2BAC/BD,KACJ1nI,KAAKknI,sBAAsB53H,KAAK+D,GAChCrT,KAAKunI,eAAel0H,EACxB,QAEOrT,KAAKmnI,wBAAwB9zH,EACxC,KAER,CAQAk0H,eAAel0H,UACJrT,KAAKinI,sBAAsB5zH,EACtC,CAOAnF,UACIlO,KAAKm1B,YAAYyE,IAAI4yF,GAA8CxsH,KAAKsnI,6BACxEtnI,KAAKm1B,YAAYyE,IAAI2zF,GAA4BvtH,KAAKunI,gBACtDvnI,KAAKm1B,YAAY7J,WAAWtB,8BAA8BhqB,KAAKqnI,2BAC/DrnI,KAAKinI,2BAAwB3mI,EAC7BN,KAAKmnI,6BAA0B7mI,EAC/BN,KAAKknI,2BAAwB5mI,EAC7BN,KAAKonI,wCAAqC9mI,EAC1CN,KAAKm1B,iBAAc70B,CACvB,EC5IJ,MAAMmJ,IAASC,EAAAA,EAAAA,wDAMf,MAAMm+H,GAMFtmI,YAAYxB,GACRC,KAAKD,KAAOA,EACZC,KAAKy+C,MAAQ,EACbz+C,KAAKujB,IAAM,EACXvjB,KAAK8Y,QAAU,EACnB,CAOAsB,QAAQ3C,QACqB,IAAdA,IAIc,iBAAdA,EACPhO,GAAO7J,MAAO,GAAEI,KAAKD,iCAAiCC,KAAKy+C,QAAShnC,GAC5DkM,MAAMlM,KACdzX,KAAKujB,KAAO9L,EACZzX,KAAK8Y,QAAQxJ,KAAKmI,GAClBzX,KAAKy+C,OAAS,GAEtB,CAOAqpF,YACI,OAAO9nI,KAAKujB,IAAMvjB,KAAKy+C,KAC3B,CAOAspF,aAAa92H,GACTA,EAAQ,GAAEjR,KAAKD,YAAcC,KAAK8nI,YAClC72H,EAAQ,GAAEjR,KAAKD,gBAAkB4I,KAAKC,UAAU5I,KAAK8Y,QACzD,CAMArL,QACIzN,KAAK8Y,QAAU,GACf9Y,KAAKujB,IAAM,EACXvjB,KAAKy+C,MAAQ,CACjB,EAQJ,MAAMupF,GAQFzmI,YAAY0mI,EAAqBhzH,EAAOxM,GAKpCzI,KAAKiV,MAAQA,EAObjV,KAAKkoI,GAAKz/H,EAQVzI,KAAKmoI,WAAa,EAMlBnoI,KAAKooI,QAAU,IAAIP,GAAkB,OAYrC7nI,KAAKqoI,iBAAmB,IAAIrpH,IAO5Bhf,KAAKsoI,qBAAuBL,EAU5BjoI,KAAKuoI,oBAAiBjoI,EAEtBN,KAAKwoI,mBAAqB,CAAC5zH,EAAKiG,KACxB7a,KAAKiV,QAAUL,EAAIK,OACnBjV,KAAKyoI,mBAAmB5tH,EAC5B,EAGJ,MAAMwP,EAAa49G,EAAoB9yG,YAEvC9K,EAAWiB,WAAWvB,2BAClB/pB,KAAKwoI,oBAEJxoI,KAAKiV,QACNjV,KAAKqzG,YAAcxtF,GAAM7lB,KAAKqoI,iBAAiBnyH,OAAO2P,GACtDwE,EAAWX,GAAG6jG,GAA4BvtH,KAAKqzG,aAE/CrzG,KAAK0oI,sBACC,CAAC7iH,EAAIzU,IAASpR,KAAK2oI,oBAAoB9iH,EAAIzU,GACjDiZ,EAAWX,GACP8iG,GACAxsH,KAAK0oI,uBAEjB,CAOAD,mBAAmBr3H,GACf,GAAKA,GAcL,GARInD,GAAQnC,yBACJsF,EAAK6M,WAAa7M,EAAK6M,UAAUva,QACjC1D,KAAKooI,QAAQhuH,QAAQhJ,EAAK6M,UAAU,GAAG0H,KAI/C3lB,KAAKmoI,YAAc,EAEfnoI,KAAKmoI,YAAcnoI,KAAKkoI,GAAI,CAC5B,GAAIj6H,GAAQnC,wBAAyB,CACjC,MAAMue,EAAarqB,KAAKsoI,qBAAqBnzG,YAEvCyzG,EAAc,CAChBtjH,IAAKtlB,KAAKiV,MACV,gBAAmBoV,EAAWm+D,uBAelC,GAZIp3E,EAAK6M,WAAa7M,EAAK6M,UAAUva,QACjCrC,OAAOsgE,OAAOinE,EAAa,CACvB,qBACIx3H,EAAK6M,UAAU,GAAGsH,mBACtB,sBACInU,EAAK6M,UAAU,GAAGwH,oBACtB,eAAkBrU,EAAK6M,UAAU,GAAG7a,OAI5CpD,KAAKooI,QAAQL,aAAaa,GAEtB5oI,KAAKiV,MAAO,CAEZ,MAAM4zH,EAAgB7oI,KACjBsoI,qBAAqBQ,gBAAgBP,eAErC5kH,MAAMklH,KAEPD,EAAsB,SAChB5oI,KAAKooI,QAAQN,YAAce,EAEzC,KAAO,CAEH,MAAME,EAAe/oI,KAAKgpI,yBACpBC,EAAcjpI,KAAKooI,QAAQN,YAEjC9nI,KAAKuoI,eAAiBU,EAAcF,EAE/BplH,MAAMslH,IAAiBtlH,MAAMolH,KAE9BH,EAA6B,gBAAI5oI,KAAKuoI,eAE9C,CAEA1gH,GAAWmF,cAAcjpB,GAAoB6kI,GACjD,CAEA5oI,KAAKkpI,gBACT,OA7DIz/H,GAAO7J,MAAM,WA8DrB,CAQAopI,yBACI,IAAIvqF,EAAQ,EAAGl7B,EAAM,EAIrB,IAAK,MAAM4lH,KAAanpI,KAAKqoI,iBAAiB93H,SAAU,CACpD,MAAM64H,EAAMD,EAAUrB,YAEjBnkH,MAAMylH,KACP7lH,GAAO6lH,EACP3qF,GAAS,EACT0qF,EAAU17H,QAElB,CAEA,OAAO8V,EAAMk7B,CACjB,CASAkqF,oBAAoB9iH,EAAIzU,GACpB,MAAMi4H,EAAmC,iBAAhBj4H,EAAK87G,OAC9B,IAAIoc,EAAStpI,KAAKqoI,iBAAiB1jH,IAAIkB,IAElCyjH,GAAUD,IACXC,EAAS,IAAIzB,GAAmB,GAAEhiH,cAClC7lB,KAAKqoI,iBAAiBviH,IAAID,EAAIyjH,IAG9BD,EACAC,EAAOlvH,QAAQhJ,EAAK87G,QACboc,GACPtpI,KAAKqoI,iBAAiBnyH,OAAO2P,EAErC,CAMAqjH,iBACIlpI,KAAKooI,QAAQ36H,QACTzN,KAAKqoI,kBACLroI,KAAKqoI,iBAAiBpgI,QAE1BjI,KAAKmoI,WAAa,CACtB,CAKAj6H,UAEI,MAAMmc,EAAarqB,KAAKsoI,qBAAqBnzG,YAE7C9K,EAAWiB,WAAWtB,8BAClBhqB,KAAKwoI,oBACJxoI,KAAKiV,QACNoV,EAAWuP,IACP4yF,GACAxsH,KAAK0oI,uBACTr+G,EAAWuP,IACP2zF,GACAvtH,KAAKqzG,aAEjB,EAWW,MAAMk2B,GAOjBhoI,YAAY8oB,EAAY5hB,GAOpBzI,KAAKkoI,GAAKz/H,EAENA,EAAI,GACJgB,GAAOE,KAAM,0CAAyClB,aAc1DzI,KAAKmoI,WAAa,EAOlBnoI,KAAKm1B,YAAc9K,EAQnBrqB,KAAKwpI,mBACC,IAAI3B,GAAkB,wBAQ5B7nI,KAAKypI,qBACC,IAAI5B,GAAkB,0BAQ5B7nI,KAAK0pI,mBACC,IAAI7B,GAAkB,wBAQ5B7nI,KAAK2pI,qBACC,IAAI9B,GAAkB,0BAQ5B7nI,KAAK4pI,gBACC,IAAI/B,GAAkB,oBAQ5B7nI,KAAK6pI,kBACC,IAAIhC,GAAkB,sBAQ5B7nI,KAAK8pI,oBACC,IAAIjC,GAAkB,qBAQ5B7nI,KAAK+pI,iBACC,IAAIlC,GAAkB,sBAQ5B7nI,KAAKgqI,mBACC,IAAInC,GAAkB,wBAO5B7nI,KAAKiqI,cAAgB,IAAIpC,GAAkB,oBAQ3C7nI,KAAKkqI,oBACC,IAAIrC,GAAkB,2BAO5B7nI,KAAKmqI,aAAe,IAAItC,GAAkB,mBAQ1C7nI,KAAKoqI,mBACC,IAAIvC,GAAkB,0BAQ5B7nI,KAAKqqI,uBACC,IAAIxC,GAAkB,iBAQ5B7nI,KAAKsqI,uBACC,IAAIzC,GAAkB,wBAO5B7nI,KAAKuqI,sBACC,IAAI1C,GAAkB,gBAQ5B7nI,KAAKwqI,sBACC,IAAI3C,GAAkB,uBAQ5B7nI,KAAKyqI,OAAS,IAAI5C,GAAkB,sBAEpC7nI,KAAK0qI,2BAAwBpqI,EAE7BN,KAAK2qI,qBAAuBv5H,IACxBpR,KAAKyoI,mBAAmBr3H,GACxBpR,KAAK4qI,kCAAkCx5H,EAAK,EAEhDiZ,EAAWX,GACP8iG,GACAxsH,KAAK2qI,sBAET3qI,KAAK6qI,oBAAsB,KACvBphI,GAAOgH,MAAM,uCACbzQ,KAAKkpI,iBACLlpI,KAAK8oI,gBAAgBI,iBACrBlpI,KAAK8qI,gBAAgB5B,gBAAgB,EAEzC7+G,EAAWX,GACP6jG,GACAvtH,KAAK6qI,qBAET7qI,KAAK+qI,uBAAyB,CAACtT,EAAWpjB,MAIpB,IAAdA,IACA5qG,GAAOE,KAAK,+BACZ3J,KAAKgrI,oBACT,EAEJ3gH,EAAWX,GACP6jG,GACAvtH,KAAK+qI,wBAET/qI,KAAK8oI,gBACC,IAAId,GAAmBhoI,MAAM,EAAiByI,GAEpDzI,KAAK8qI,gBACC,IAAI9C,GAAmBhoI,MAAM,EAAgByI,IAtN/CgB,GAAOE,KAAK,sCAuNpB,CAQA8+H,mBAAmBr3H,GAEf,IAAKA,EAGD,YAFA3H,GAAO7J,MAAM,YAKjB,MAAMqV,EAAQjV,KAAKm1B,YAAY+9E,cACzB+3B,EAAWjrI,KAAKm1B,YAAYqzD,sBAElC,IAAKvzE,GAASg2H,EAAW,EAKrB,OAUJ,MAAMxtH,EAAUrM,EAAKqM,QACfM,EAAY3M,EAAK2M,UACjBC,EAAa5M,EAAK4M,WAClBuI,EAAYnV,EAAKyM,UACjBD,EAAaxM,EAAKwM,WAExB,GAAKH,EAIE,GAAKM,EAIL,GAAKC,EAIL,GAAKuI,EAIL,GAAK3I,GA2DZ,GArDA5d,KAAKwpI,mBAAmBpvH,QAAQqD,EAAQ4D,MAAM1D,QAC9C3d,KAAKypI,qBAAqBrvH,QAAQqD,EAAQ4D,MAAM3D,UAEhD1d,KAAK0pI,mBAAmBtvH,QAAQqD,EAAQ9c,MAAMgd,QAC9C3d,KAAK2pI,qBAAqBvvH,QAAQqD,EAAQ9c,MAAM+c,UAE5CzP,GAAQ9C,gCACRnL,KAAK4pI,gBAAgBxvH,QAAQ2D,EAAUJ,QACvC3d,KAAK6pI,kBAAkBzvH,QAAQ2D,EAAUL,WAG7C1d,KAAK+pI,iBAAiB3vH,QAAQ4D,EAAWL,QACzC3d,KAAKgqI,mBAAmB5vH,QAAQ4D,EAAWN,UAC3C1d,KAAK8pI,oBAAoB1vH,QAAQ4D,EAAWmF,OAE5CnjB,KAAKyqI,OAAOrwH,QAAQhJ,EAAK67G,mBAErB1mG,IACAvmB,KAAKiqI,cAAc7vH,QACfpa,KAAKkrI,sBACD3kH,GAAW,EAAoB0M,GAAU,UAAVA,SACvCjzB,KAAKkqI,oBAAoB9vH,QACrBpa,KAAKkrI,sBACD3kH,GAAW,EAAoB0M,GAAU,UAAVA,UAEvCjzB,KAAKmqI,aAAa/vH,QACdpa,KAAKkrI,sBACD3kH,GAAW,EAAkB0M,GAAU,UAAVA,SACrCjzB,KAAKoqI,mBAAmBhwH,QACpBpa,KAAKkrI,sBACD3kH,GAAW,EAAkB0M,GAAU,UAAVA,WAGrCrV,IACA5d,KAAKqqI,uBAAuBjwH,QACxBpa,KAAKmrI,yBACDvtH,GAAY,EAAoBqV,GAAU,UAAVA,SAExCjzB,KAAKsqI,uBAAuBlwH,QACxBpa,KAAKmrI,yBACDvtH,GAAY,EAAoBqV,GAAU,UAAVA,UAExCjzB,KAAKuqI,sBAAsBnwH,QACvBpa,KAAKmrI,yBACDvtH,GAAY,EAAkBqV,GAAU,UAAVA,SAEtCjzB,KAAKwqI,sBAAsBpwH,QACvBpa,KAAKmrI,yBACDvtH,GAAY,EAAkBqV,GAAU,UAAVA,WAG1CjzB,KAAKmoI,YAAc,EAEfnoI,KAAKmoI,YAAcnoI,KAAKkoI,GAAI,CAE5B,MAAMU,EAAc,CAChBtjH,IAAKrQ,EACL,gBAAmBg2H,GAGnB75H,EAAK6M,WAAa7M,EAAK6M,UAAUva,QACjCrC,OAAOsgE,OAAOinE,EAAa,CACvB,qBACIx3H,EAAK6M,UAAU,GAAGsH,mBACtB,sBACInU,EAAK6M,UAAU,GAAGwH,oBACtB,eAAkBrU,EAAK6M,UAAU,GAAG7a,OAI5CpD,KAAKwpI,mBAAmBzB,aAAaa,GACrC5oI,KAAKypI,qBAAqB1B,aAAaa,GAEvC5oI,KAAK0pI,mBAAmB3B,aAAaa,GACrC5oI,KAAK2pI,qBAAqB5B,aAAaa,GAEnC36H,GAAQ9C,gCACRnL,KAAK4pI,gBAAgB7B,aAAaa,GAClC5oI,KAAK6pI,kBAAkB9B,aAAaa,IAExC5oI,KAAK+pI,iBAAiBhC,aAAaa,GACnC5oI,KAAKgqI,mBAAmBjC,aAAaa,GACrC5oI,KAAK8pI,oBAAoB/B,aAAaa,GAEtC5oI,KAAKiqI,cAAclC,aAAaa,GAC3BjlH,MAAM3jB,KAAKkqI,oBAAoBpC,cAChC9nI,KAAKkqI,oBAAoBnC,aAAaa,GAE1C5oI,KAAKmqI,aAAapC,aAAaa,GAC1BjlH,MAAM3jB,KAAKoqI,mBAAmBtC,cAC/B9nI,KAAKoqI,mBAAmBrC,aAAaa,GAGzC5oI,KAAKqqI,uBAAuBtC,aAAaa,GACpCjlH,MAAM3jB,KAAKsqI,uBAAuBxC,cACnC9nI,KAAKsqI,uBAAuBvC,aAAaa,GAE7C5oI,KAAKuqI,sBAAsBxC,aAAaa,GACnCjlH,MAAM3jB,KAAKwqI,sBAAsB1C,cAClC9nI,KAAKwqI,sBAAsBzC,aAAaa,GAG5C5oI,KAAKyqI,OAAO1C,aAAaa,GAEzB/gH,GAAWmF,cAAcjpB,GAAoB6kI,IAE7C5oI,KAAKkpI,gBACT,OAhHIz/H,GAAO7J,MAAM,sBAJb6J,GAAO7J,MAAM,uBAJb6J,GAAO7J,MAAM,wBAJb6J,GAAO7J,MAAM,uBAJb6J,GAAO7J,MAAM,eAiIrB,CAaAurI,yBAAyBC,EAAiBx1H,EAASod,GAC/C,IAAIq4G,EAAgB,EAChBC,EAAY,EAChB,MAAMC,EAAOvrI,KAAKm1B,YAAYvD,WAE9B,IAAK,MAAM45G,KAAUnqI,OAAO8G,KAAKijI,GAC7B,GAAIx1H,EAAU41H,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,MAAMl9G,EACAzY,EACI,KACA5V,KAAKm1B,YAAY7G,mBAAmBk9G,GACxCC,EAAmBL,EAAgBI,GAGzC,IAAK51H,GAAWyY,IAAgBo9G,EAAkB,CAC9C,MAAMC,EAAgB1rI,KAAK2rI,6BACvBF,EAAkBp9G,EAAa2E,GAE9BrP,MAAM+nH,KACPL,GAAiBK,EACjBJ,GAAa,EAErB,CACJ,CAGJ,OAAOD,EAAgBC,CAC3B,CAaAK,6BAA6BC,EAAQv9G,EAAa2E,GAC9C,IAAI67B,EAAQxtD,OAAO8G,KAAKyjI,GAAQluG,KAAI/rB,GAAQzL,OAAOyL,KAC/CkgE,EAAc,KAIlB,MAAMj9D,EAAM5U,KAAKm1B,YAAYo5F,0BAEzBlgG,GACAwjD,EAAcxjD,EAAY6I,qBAAqB7a,GAAUwK,OACrDgrD,IACAhjB,EACMA,EAAM52C,QACJtG,GAAQkgE,EAAY59C,MAChB5R,IACKA,EAAMmL,WACAnL,EAAMi1F,YAAc3lG,GACpB0Q,EAAM2Q,YAAcA,SAG/C6+C,EAAc7xE,KAAKm1B,YAAYnO,eAAe3K,GAAUwK,OACxDgoC,EACMA,EAAM52C,QACJtG,GAAQkgE,EAAY59C,MAChB5R,IACKA,EAAMmL,WACA5Y,EAAI0S,aAAajF,KAAW1Q,GAC5B0Q,EAAM2Q,YAAcA,OAG/C,IAAIq4G,EAAgB,EAChBQ,EAAgB,EAEpB,IAAK,MAAMl6H,KAAQk9C,EAAO,CACtB,MAAMi9E,EACA5lI,OAAO0lI,EAAOj6H,GAAMiR,QAAU1c,OAAO0lI,EAAOj6H,GAAMgR,QAGnDgB,MAAMmoH,IAAmBA,EAAiB,IAC3CT,GAAiBS,EACjBD,GAAiB,EAEzB,CAEA,OAAOR,EAAgBQ,CAC3B,CAYAX,sBAAsB3kH,EAAW3Q,EAASod,GACtC,IAAI+4G,EAAa,EACbT,EAAY,EAChB,MAAMC,EAAOvrI,KAAKm1B,YAAYvD,WAE9B,IAAK,MAAM45G,KAAUnqI,OAAO8G,KAAKoe,GAC7B,GAAI3Q,EAAU41H,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,MAAMl9G,EACAzY,EACI,KAAO5V,KAAKm1B,YAAY7G,mBAAmBk9G,GAC/CQ,EAAYzlH,EAAUilH,GAG5B,IAAK51H,GAAWyY,IAAgB29G,EAAW,CACvC,MAAMC,EACAjsI,KAAKksI,0BACHF,EAAW39G,EAAa2E,GAE3BrP,MAAMsoH,KACPF,GAAcE,EACdX,GAAa,EAErB,CACJ,CAGJ,OAAOS,EAAaT,CACxB,CAaAY,0BAA0BN,EAAQv9G,EAAa2E,GAC3C,IAAI67B,EAAQxtD,OAAO8G,KAAKyjI,GAAQluG,KAAI/rB,GAAQzL,OAAOyL,KAC/CkgE,EAAc,KAIlB,MAAMj9D,EAAM5U,KAAKm1B,YAAYo5F,0BAEzBlgG,GACAwjD,EAAcxjD,EAAY6I,qBAAqB7a,GAAUwK,OACrDgrD,IACAhjB,EACMA,EAAM52C,QACJtG,GAAQkgE,EAAY59C,MAChB5R,IAAUA,EAAMmL,WACTnL,EAAMi1F,YAAc3lG,GACpB0Q,EAAM2Q,YAAcA,SAG3C6+C,EAAc7xE,KAAKm1B,YAAYnO,eAAe3K,GAAUwK,OACxDgoC,EACMA,EAAM52C,QACJtG,GAAQkgE,EAAY59C,MAChB5R,IAAUA,EAAMmL,WACT5Y,EAAI0S,aAAajF,KAAW1Q,GAC5B0Q,EAAM2Q,YAAcA,OAG3C,IAAI+4G,EAAa,EACbF,EAAgB,EAEpB,IAAK,MAAMl6H,KAAQk9C,EAAO,CACtB,MAAMs9E,EAAcjmI,OAAO0lI,EAAOj6H,KAG7BgS,MAAMwoH,IAAgBA,EAAc,IACrCJ,GAAcI,EACdN,GAAiB,EAEzB,CAEA,OAAOE,EAAaF,CACxB,CASAjB,kCAAkCx5H,GAC9B,IAAKA,IAASA,EAAK6M,YAAc7M,EAAK6M,UAAUva,OAC5C,OAEJ,MAAM0oI,EAAiB,CACnB9mH,IAAKlU,EAAK6M,UAAU,GAAGqH,IACvB,qBAAwBlU,EAAK6M,UAAU,GAAGsH,mBAC1C,sBAAyBnU,EAAK6M,UAAU,GAAGwH,oBAC3C,eAAkBrU,EAAK6M,UAAU,GAAG7a,MhItdLF,MgIyd9BlD,KAAK0qI,uBAA0BvnG,KAAQipG,EAAgBpsI,KAAK0qI,yBAC7D1qI,KAAK0qI,sBAAwB0B,EAC7BvkH,GAAWmF,ehI3doB9pB,EgI2doBkpI,EhI3dF,CACzDhpI,KAAM5B,GAAgBC,iBACtBwB,OAAQ,kBACRC,gBgI0dA,CASA8nI,oBACIhrI,KAAKkpI,iBACLlpI,KAAK8oI,gBAAgBI,gBACzB,CAMAA,iBACIlpI,KAAKwpI,mBAAmB/7H,QACxBzN,KAAKypI,qBAAqBh8H,QAE1BzN,KAAK0pI,mBAAmBj8H,QACxBzN,KAAK2pI,qBAAqBl8H,QAE1BzN,KAAK4pI,gBAAgBn8H,QACrBzN,KAAK6pI,kBAAkBp8H,QAEvBzN,KAAK+pI,iBAAiBt8H,QACtBzN,KAAKgqI,mBAAmBv8H,QACxBzN,KAAK8pI,oBAAoBr8H,QAEzBzN,KAAKiqI,cAAcx8H,QACnBzN,KAAKkqI,oBAAoBz8H,QACzBzN,KAAKmqI,aAAa18H,QAClBzN,KAAKoqI,mBAAmB38H,QAExBzN,KAAKqqI,uBAAuB58H,QAC5BzN,KAAKsqI,uBAAuB78H,QAC5BzN,KAAKuqI,sBAAsB98H,QAC3BzN,KAAKwqI,sBAAsB/8H,QAE3BzN,KAAKyqI,OAAOh9H,QAEZzN,KAAKmoI,WAAa,CACtB,CAKAj6H,UACIlO,KAAKm1B,YAAYyE,IACb2zF,GACAvtH,KAAK6qI,qBACT7qI,KAAKm1B,YAAYyE,IACb4yF,GACAxsH,KAAK2qI,sBACT3qI,KAAKm1B,YAAYyE,IACb2zF,GACAvtH,KAAK+qI,wBACT/qI,KAAK8oI,gBAAgB56H,UACrBlO,KAAK8qI,gBAAgB58H,SACzB,4BCz+BW,MAAMm+H,GAQjB9qI,YAAY8oB,GACRrqB,KAAK6a,MAAQ,CACTspE,MAAO,CAEH,EAEJmoD,kBAAmB,MAGvB,MAAMtgH,EAAS3B,EAAWuH,WAE1B5xB,KAAK6a,MAAMspE,MAAMn4D,GAAU,IAAIugH,KAAJ,CAAiBvgH,EAAQ,MAAM,GAC1DhsB,KAAKqqB,WAAaA,EAElBA,EAAW5e,iBACPpS,GACA2G,KAAKwsI,mBAAmBp8G,KAAKpwB,OACjCqqB,EAAW5e,iBACPpS,GACA2G,KAAKysI,YAAYr8G,KAAKpwB,OAC1BqqB,EAAW5e,iBACPpS,GACA2G,KAAK0sI,aAAat8G,KAAKpwB,OAC3BqqB,EAAW5e,iBACPpS,GACA2G,KAAK2sI,qBAAqBv8G,KAAKpwB,OAEnCqqB,EAAWX,GACPrwB,IACI,CAACg1B,EAAWif,KAA8B,IAA5B,KAAElqC,EAAI,cAAEwpI,GAAet/F,EA3ClB,mBA4CXlqC,GACApD,KAAK6sI,mBAAmBx+G,EAAYwI,QAAS+1G,EACjD,IAERviH,EAAWvC,MACXuC,EAAWvC,KAAKiG,YACZC,GAAW,WAAXA,uBACAhuB,KAAK8+H,aAAa1uG,KAAKpwB,MAEnC,CAYAwsI,mBAAmBF,EAAmBh6G,EAAUzG,GAC5C,MAAMihH,EACA9sI,KAAK6a,MAAMspE,MAAMnkF,KAAK6a,MAAMyxH,mBAC5BS,EAAqB/sI,KAAK6a,MAAMspE,MAAMmoD,GAE5CQ,GAAsBA,EAAmBE,oBAAmB,GAC5DD,GAAsBA,EAAmBC,oBAAmB,EAAMnhH,GAClE7rB,KAAK6a,MAAMyxH,kBAAoBA,CACnC,CAUAG,YAAYzgH,EAAQqC,GACZA,EAAYiJ,YAIXt3B,KAAK6a,MAAMspE,MAAMn4D,KAClBhsB,KAAK6a,MAAMspE,MAAMn4D,GAAU,IAAIugH,KAAJ,CAAiBvgH,EAAQqC,EAAYsI,kBAExE,CAUA+1G,aAAa1gH,GACT,MAAMihH,EAAYjtI,KAAK6a,MAAMspE,MAAMn4D,GAE/BihH,GACAA,EAAUC,eAElB,CAUAP,qBAAqB3gH,EAAQmhH,GACzB,MAAMF,EAAYjtI,KAAK6a,MAAMspE,MAAMn4D,GAE/BihH,GACAA,EAAUG,eAAeD,EAEjC,CAUAN,mBAAmB7gH,EAAQ5a,GACvB,MAAM67H,EAAYjtI,KAAK6a,MAAMspE,MAAMn4D,GAE/BihH,GAAa77H,GACb67H,EAAUI,iBAAiBj8H,EAEnC,CAQA0O,WACI,OAAO9f,KAAK6a,MAAMspE,KACtB,CAQA26C,aAAawO,GACT,IAAK,MAAMthH,KAAUshH,EAAU,CAC3B,IAAIC,EACJ,MAAMC,EAAiBxtI,KAAKqqB,WAAWiE,mBAAmBtC,GAGrDwhH,GAAmBA,EAAel2G,aAC/Bt3B,KAAK6a,MAAMspE,MAAMn4D,IACjBuhH,EAAuBvtI,KAAK6a,MAAMspE,MAAMn4D,GAEnCuhH,EAAqB52G,kBACtB42G,EACKH,eAAeE,EAASthH,GAAQ2I,eAGzC44G,EAAuB,IAAIhB,KAAJ,CACnBvgH,EAAQshH,EAASthH,GAAQ2I,aAC7B30B,KAAK6a,MAAMspE,MAAMn4D,GAAUuhH,EAC3BA,EAAqBL,iBAGzBK,EAAqBE,yBACfH,EAASthH,GAAQyhH,yBAEnBttI,MAAMC,QAAQktI,EAASthH,GAAQ4gH,gBAC/BW,EAAqBG,iBAAiBJ,EAASthH,GAAQ4gH,eAGnE,CACJ,EC9LW,MAAMe,GAOjBpsI,YAAY85H,EAAMt7H,EAAM8b,EAAW+xH,GAC/B5tI,KAAKq7H,KAAOA,EACZr7H,KAAKD,KAAOA,EACZC,KAAK6b,UAAYA,EACjB7b,KAAK4tI,UAAYA,CACrB,ECdW,MAAMC,GAIjBtsI,YAAY8gB,GAERriB,KAAKqiB,MAAQA,EAGbriB,KAAK8tI,SAAW,KAIhB9tI,KAAKoR,KAAO,KAIZpR,KAAKD,KAAO,KAGZC,KAAK6b,UAAY,IACrB,ECpBJ,MAAMkyH,GAAa,aACbC,GAAY,YAOlB,SAASC,GAAcC,GACnB,QAA+B5tI,IAA3B4tI,EAAcJ,SACd,MAAM,IAAI5sI,MAAM,yEAGpBgtI,EAAcJ,SAASr3H,QACvBy3H,EAAcryH,UAAY,IAAIC,IAClC,CAOA,SAASqyH,GAAaD,GAClB,QAA+B5tI,IAA3B4tI,EAAcJ,SACd,MAAM,IAAI5sI,MAAM,wEAGpBgtI,EAAcJ,SAASv0H,MAC3B,CAMA,SAAS60H,KACL,GAAI3V,cAAc4V,gBAAgBN,IAC9B,OAAOA,GACJ,GAAItV,cAAc4V,gBAAgBL,IACrC,OAAOA,GAEX,MAAM,IAAI9sI,MACN,4DACR,CAQA,SAASotI,GAAcC,GAGnBvuI,KAAKwuI,UAAY,GAGjBxuI,KAAKyuI,SAAWL,KAGhBpuI,KAAKghI,aAAc,EAGnBhhI,KAAKuuI,gBAAkBA,CAC3B,CAKAD,GAAcF,yBAA2BA,GAOzCE,GAAcltI,UAAU2wE,SAAW,SAAS1vD,GACxC,GAAIA,EAAME,eAAgB,CAEtB,MAAM2rH,EAAgBluI,KAAK0uI,yBAAyBrsH,GAIpDriB,KAAKwuI,UAAUl/H,KAAK4+H,GAGpBluI,KAAK2uI,cAID3uI,KAAKghI,aACLiN,GAAcC,EAEtB,CACJ,EAOAI,GAAcltI,UAAUstI,yBAA2B,SAASrsH,GACxD,MAAM6rH,EAAgB,IAAIL,GAAcxrH,GAGlCusH,EAAiBV,EAAc7rH,MAAMkH,oBACrC7c,EAAS,IAAIohF,YAmBnB,OAjBA8gD,EAAevhD,iBAAiBj/E,SAAQiX,GAAK3Y,EAAOqlE,SAAS1sD,KAG7D6oH,EAAcJ,SAAW,IAAIrV,cAAc/rH,EACvC,CAAEO,SAAUjN,KAAKyuI,WAIrBP,EAAc98H,KAAO,GAGrB88H,EAAcJ,SAASpV,gBAAkB,SAASmW,GAC1CA,EAAUz9H,KAAKjD,KAAO,GACtB+/H,EAAc98H,KAAK9B,KAAKu/H,EAAUz9H,KAE1C,EAEO88H,CACX,EAYAI,GAAcltI,UAAU+tF,YAAc,SAAS9sE,GAC3C,GAAIA,EAAM0Q,eACN,OAGJ,MAAMra,EAAQ1Y,KAAKwuI,UACnB,IAAIzoI,EAEJ,IAAKA,EAAI,EAAGA,EAAI2S,EAAMhV,OAAQqC,IAC1B,GAAI2S,EAAM3S,GAAGsc,MAAMU,qBAAuBV,EAAMU,mBAAoB,CAChE,MAAM+rH,EAAmBp2H,EAAM3S,GAE3B/F,KAAKghI,YACLmN,GAAaW,GAGbp2H,EAAMnJ,OAAOxJ,EAAG,EAExB,CAIJ/F,KAAK2uI,aACT,EAOAL,GAAcltI,UAAUutI,YAAc,WAClC,MAAMtkH,EAAarqB,KAAKuuI,gBAExBvuI,KAAKwuI,UAAUpgI,SAAQ8/H,IACnB,GAAIA,EAAc7rH,MAAMzM,UACpBs4H,EAAcnuI,KAAO,sBAClB,CACH,MAAM8lB,EAAKqoH,EAAc7rH,MAAMU,mBAEzBoqH,EADc9iH,EAAWiE,mBAAmBzI,GACtB8Q,iBAEZ,cAAZw2G,IACAe,EAAcnuI,KAAOotI,EAE7B,IAER,EAKAmB,GAAcltI,UAAUqV,MAAQ,WAC5B,GAAIzW,KAAKghI,YACL,MAAM,IAAI9/H,MAAM,sCAKpBlB,KAAKghI,aAAc,EAGnBhhI,KAAKwuI,UAAUpgI,SAAQ8/H,GAAiBD,GAAcC,KAGtDhlI,QAAQ+G,IACH,2DACGjQ,KAAKwuI,UAAU9qI,2BAC3B,EAKA4qI,GAAcltI,UAAUmY,KAAO,WAE3BvZ,KAAKghI,aAAc,EAGnBhhI,KAAKwuI,UAAUpgI,SAAQ8/H,GAAiBC,GAAaD,KACrDhlI,QAAQ+G,IAAI,oBAChB,EAKAq+H,GAAcltI,UAAUsc,SAAW,WAC/B1d,KAAKwuI,UAAUpgI,SAAQ8/H,IACnB,MAAM7S,EAAO,IAAI5gG,KAAKyzG,EAAc98H,KAAM,CAAEhO,KAAMpD,KAAKyuI,WACjD1/F,EAAMrU,IAAIC,gBAAgB0gG,GAC1BvjH,EAAIqiB,SAASwgE,cAAc,KAEjCxgE,SAAS0I,KAAKwrB,YAAYv2C,GAC1BA,EAAEwoH,MAAQ,gBACVxoH,EAAE2mE,KAAO1vC,EACTj3B,EAAE4F,SAAY,QAAO1d,KAAKyuI,SAAS9nH,MAAM,KAAK,KAC9C7O,EAAEyoH,QACFz3H,OAAO4xB,IAAI8gG,gBAAgBzsF,EAAI,GAEvC,EAOAu/F,GAAcltI,UAAU2tI,oBAAsB,WAC1C,GAAI/uI,KAAKghI,YACL,MAAM,IAAI9/H,MACN,kEAIRlB,KAAK2uI,cAEL,MAAMj2H,EAAQ,GAUd,OARA1Y,KAAKwuI,UAAUpgI,SACX0/H,GACIp1H,EAAMpJ,KACF,IAAIq+H,GACA,IAAIlzG,KAAKqzG,EAAS18H,KAAM,CAAEhO,KAAMpD,KAAKyuI,WACrCX,EAAS/tI,KACT+tI,EAASjyH,cAElBnD,CACX,EAMA41H,GAAcltI,UAAU4tI,YAAc,WAClC,OAAOhvI,KAAKyuI,QAChB,EAKA,YClRe,MAAMQ,GAMjB1tI,YAAY2tI,EAAMC,EAAO9hF,GACrBrtD,KAAKkvI,KAAOA,EACZlvI,KAAKmvI,MAAQA,EACbnvI,KAAKqtD,IAAMA,CACf,CAMA+hF,UACI,OAAOpvI,KAAKkvI,IAChB,CAMAG,eACI,OAAOrvI,KAAKmvI,KAChB,CAMAG,aACI,OAAOtvI,KAAKqtD,GAChB,ECpCW,MAAMkiF,GAKjBhuI,cACI,MAAM,IAAIL,MAAM,yDACpB,CAWAk1C,KAAKo5F,EAAiBt4H,GAClBlX,KAAK81H,YAAY0Z,EAAgBnU,MAAM/uF,IAC/BtsC,KAAKyvI,OAAOnjG,GACZkjG,EAAgB5B,UAAY5tI,KAAK0vI,eAAepjG,IAEhDpjC,QAAQ+G,IAAI,wDACZu/H,EAAgB5B,UAAY,IAEhC12H,EAASs4H,EAAgB,GAEjC,CAWA1Z,YAAY6Z,EAAWz4H,GACnB,MAAM,IAAIhW,MAAM,+CACpB,CAiBAwuI,eAAepjG,GACX,MAAM,IAAIprC,MAAM,0CACpB,CAQAuuI,OAAOnjG,GACH,MAAM,IAAIprC,MAAM,0CACpB,EChEW,MAAM0uI,WAAsBC,GAIvCtuI,cACIqG,QAGA5H,KAAK+uC,IAqGb,WACI,MAAMxuC,EAAU,2DAEhB,QAAyBD,IAArBqzB,OAAOm8G,UACP5mI,QAAQ+G,IAAI1P,OACT,CACH,MAAMwvI,EAAWp8G,OAAOm8G,UAExB,QAA0BxvI,IAAtByvI,EAAShgG,UAA0BggG,EAAShgG,SAAS,YACrD,OAAOggG,EAEX7mI,QAAQ+G,IAAI1P,EAEhB,CACJ,CAnHmByvI,EACf,CASAla,YAAYma,EAAe/4H,GACvBhO,QAAQ+G,IAAK,6BAA4BjQ,KAAK+uC,OAC9C7lC,QAAQ+G,IAAK,8BAA6BggI,KAC1C,MAAMx0D,EAAU,IAAIy0D,eAEpBz0D,EAAQ00D,mBAAqB,WACzB,GAAI10D,EAAQ3nC,aAAeo8F,eAAeE,MAChB,MAAnB30D,EAAQhnE,OACXyC,EAASukE,EAAQ40D,mBACd,GAAI50D,EAAQ3nC,aAAeo8F,eAAeE,KAC7C,MAAM,IAAIlvI,MACL,yDAAwDu6E,EAAQhnE,SAI7E,EACAgnE,EAAQ60D,KAAK,OAAQtwI,KAAK+uC,KAC1B0sC,EAAQ80D,iBAAiB,eACrBC,GAAcpC,4BAClB3yD,EAAQrlC,KAAK65F,GACb/mI,QAAQ+G,IAAK,QAAOggI,IACxB,CAQAP,eAAepjG,GACX,MAAMtsB,EAASrX,KAAK24B,MAAMgL,GAAUmkG,QAIpCzwH,EAAO+xB,QACP,MAAMr5B,EAAQ,GAMd,OAJAsH,EAAO5R,SACH8gI,GAAQA,EAAKwB,QACNh4H,EAAMpJ,KAAK,IAAI2/H,GAAKC,EAAKA,KAAMA,EAAKz4H,MAAOy4H,EAAK7hF,QAEpD30C,CACX,CAOA+2H,OAAOnjG,GAIH,GAHApjC,QAAQ+G,IAAK,wBAAuBq8B,EAAS+C,cAGrB,iBAAb/C,EACP,OAAO,EAIX,IAAItJ,EAEJ,IACIA,EAAOr6B,KAAK24B,MAAMgL,EACtB,CAAE,MAAO1sC,GAGL,OAFAsJ,QAAQ+G,IAAIrQ,IAEL,CACX,CAGA,QAAqBU,IAAjB0iC,EAAKytG,QACL,OAAO,EAIX,MAAM/3H,EAAQsqB,EAAKytG,QAEnB,SAAM/3H,EAAM,KAAMA,EAAM,GAAG,cAM/B,EC3GJ,MAAMi4H,GAAe,SACfC,GAAkB,YAClBC,GAAqB,eACrBC,GAAiB,WAYvB,SAASC,KAEL/wI,KAAKwwI,cAAgB,IAAIlC,GAGzBtuI,KAAKgxI,qBAAuB,IAAIpB,GAGhC5vI,KAAKmhE,QAAU,KAIfnhE,KAAK6b,UAAY,KAGjB7b,KAAKixI,cAAgB,KAIrBjxI,KAAKkX,SAAW,KAIhBlX,KAAKkhE,QAAU,GAGflhE,KAAKukB,MAAQosH,GAIb3wI,KAAKkxI,WAAa,CACtB,CA8DA,SAASC,GAAaC,EAAa94D,GAO/B,GANApvE,QAAQ+G,IAEG,0FAAoBqoE,EAAOs1D,UAAUlqI,UAI5C40E,EAAOs1D,UAAUlqI,OAAS,EAAG,CAC7B,IAAIu2H,EAAS3hD,EAAOz8D,UAAUw1H,qBACxBD,EAAYv1H,UAAUw1H,qBAIxBpX,EAAS,IACTA,EAAS,GAGb,IAAIvhH,EAAQ,IAEZ4/D,EAAOs1D,UAAUx/H,SAAQkjI,IACrBA,EAAWnC,OAASlV,EACpBqX,EAAWjkF,KAAO4sE,EAClBvhH,GAAU,GAAE44H,EAAWpC,OAAO,IAElCx2H,GAAS,IACTxP,QAAQ+G,IAAIyI,GAKZ4/D,EAAOs1D,UAAU7tI,KAAOu4E,EAAOv4E,IACnC,CAGAqxI,EAAYlwE,QAAQ5xD,KAAKgpE,EAAOs1D,WAChCwD,EAAYjwE,UACZj4D,QAAQ+G,IAAK,oBAAmBmhI,EAAYjwE,WAG5CiwE,EAAYG,YAChB,CAiHA,SAASC,GAAmBC,GACxB,IAAK,IAAI1rI,EAAI,EAAGA,EAAI0rI,EAAoB/tI,OAAQqC,IACN,IAAlC0rI,EAAoB1rI,GAAGrC,QACvB+tI,EAAoBliI,OAAOxJ,EAAG,GAItC,OAAO0rI,EAAoB/tI,OAAS,CACxC,CAxNAqtI,GAAY3vI,UAAUqV,MAAQ,WAC1B,GAAIzW,KAAKukB,QAAUosH,GACf,MAAM,IAAIzvI,MACL,sDACGyvI,qCACA3wI,KAAKukB,gBAEjBvkB,KAAKukB,MAAQqsH,GACb5wI,KAAKwwI,cAAc/5H,QACnBzW,KAAK6b,UAAY,IAAIC,IACzB,EAQAi1H,GAAY3vI,UAAUmY,KAAO,SAAcrC,GACvC,GAAIlX,KAAKukB,QAAUqsH,GACf,MAAM,IAAI1vI,MACL,qDACG0vI,qCACA5wI,KAAKukB,gBAIjBrb,QAAQ+G,IAAI,8CACZjQ,KAAKwwI,cAAcj3H,OAGnB,MAAMm4H,EAAWP,GAAa/gH,KAAK,KAAMpwB,MAEzCA,KAAKwwI,cAAczB,sBAAsB3gI,SAAQohI,IAC7CxvI,KAAKgxI,qBAAqB56F,KAAKo5F,EAAiBkC,GAChD1xI,KAAKmhE,SAAS,IAIlBnhE,KAAKukB,MAAQssH,GAGb7wI,KAAKkX,SAAWA,CACpB,EA0DA65H,GAAY3vI,UAAUmwI,WAAa,WAC3BvxI,KAAKukB,QAAUssH,IAAuC,IAAjB7wI,KAAKmhE,SAG1CnhE,KAAK2xI,OAEb,EAMAZ,GAAY3vI,UAAUuwI,MAAQ,WAC1BzoI,QAAQ+G,IACH,sDACGjQ,KAAKkhE,QAAQx9D,UACrB1D,KAAKixI,cAAgB,GAOrB,MAAMW,EAAS5xI,KAAKkhE,QAGd2wE,EAAiB,GASvB,IANAL,GAAmBI,GAGnBA,EAAOxjI,SAAQsK,GA6FnB,SAA+BA,EAAOw2H,GAClC,GAAqB,IAAjBx2H,EAAMhV,OACNgV,EAAMpJ,KAAK4/H,OACR,CACH,GAAIx2H,EAAMA,EAAMhV,OAAS,GAAGyrI,OAASD,EAAKC,MAGtC,YAFAz2H,EAAMpJ,KAAK4/H,GAKf,IAAK,IAAInpI,EAAI,EAAGA,EAAI2S,EAAMhV,OAAQqC,IAC9B,GAAImpI,EAAKC,MAAQz2H,EAAM3S,GAAGopI,MAGtB,YAFAz2H,EAAMnJ,OAAOxJ,EAAG,EAAGmpI,GAK3Bx2H,EAAMpJ,KAAK4/H,EACf,CACJ,CAhH4B4C,CAAsBD,EAAgBn5H,KAGvD84H,GAAmBI,IAAS,CAE/B,IAAIG,EAAkBH,EAAO,GAE7BA,EAAOxjI,SAAQw/H,IACPA,EAAU,GAAGuB,MAAQ4C,EAAgB,GAAG5C,QACxC4C,EAAkBnE,EACtB,IAIJ,IAAIoE,EAAYD,EAAgBhgG,QAMhC,IAJA/xC,KAAKiyI,oBAAoBD,EAAWD,EAAgBhyI,MAI7CgyI,EAAgBruI,OAAS,GAAG,CAC/B,IAAIwuI,GAAe,EACnB,MAAMC,EAAgBJ,EAAgB,GAAG5C,MASzC,GAPAyC,EAAOxjI,SAAQw/H,IACPA,EAAU,GAAGuB,MAAQgD,IACrBD,GAAe,EACnB,IAIAA,EACA,MAGJF,EAAYD,EAAgBhgG,QAC5B/xC,KAAKiyI,oBAAoBD,EAAW,KACxC,CAEJ,CAGAhyI,KAAKukB,MAAQusH,GACT9wI,KAAKkX,UACLlX,KAAKkX,SAASlX,KAAKixI,cAE3B,EAQAF,GAAY3vI,UAAU6wI,oBAAsB,SAAS/C,EAAMnvI,GACnDA,UACAC,KAAKixI,eAAkB,KAAIlxI,KAC3BC,KAAKkxI,WAAanxI,EAAK2D,OAAS,GAEhC1D,KAAKkxI,WAAahC,EAAKA,KAAKxrI,OA/OJ,KAgPxB1D,KAAKixI,eAAiB,SACtBjxI,KAAKkxI,WAAa,GAEtBlxI,KAAKixI,eAAkB,IAAG/B,EAAKA,OAC/BlvI,KAAKkxI,YAAchC,EAAKA,KAAKxrI,OAAS,CAC1C,EAuDAqtI,GAAY3vI,UAAU2wE,SAAW,SAAS1vD,GACtCriB,KAAKwwI,cAAcz+D,SAAS1vD,EAChC,EAMA0uH,GAAY3vI,UAAU+tF,YAAc,SAAS9sE,GACzCriB,KAAKwwI,cAAcrhD,YAAY9sE,EACnC,EAOA0uH,GAAY3vI,UAAUgxI,iBAAmB,WACrC,GAAIpyI,KAAKukB,QAAUusH,GACf,MAAM,IAAI5vI,MACL,6DACG4vI,qCACA9wI,KAAKukB,gBAGjB,OAAOvkB,KAAKixI,aAChB,EAKAF,GAAY3vI,UAAUqpE,SAAW,WAC7B,OAAOzqE,KAAKukB,KAChB,EAMAwsH,GAAY3vI,UAAUqM,MAAQ,WAC1BzN,KAAKukB,MAAQosH,GACb3wI,KAAKmhE,QAAU,KACfnhE,KAAKixI,cAAgB,KACrBjxI,KAAK6b,UAAY,KACjB7b,KAAKkX,SAAW,KAChBlX,KAAKkhE,QAAU,GACflhE,KAAKkxI,WAAa,CACtB,EAEA,YCpWMznI,GAASgG,EAAAA,MAAAA,mDAUA,SAAS4iI,GAAmBhoH,GAEvCrqB,KAAKsN,SAAW,CAAC,EAEjBtN,KAAKqqB,WAAaA,EAClBrqB,KAAKqqB,WAAW40G,mBACZ,WAAYj/H,KAAKsyI,gBAAgBliH,KAAKpwB,MAC9C,CAEAqyI,GAAmBjxI,UAAUkxI,gBACvB,SAAShlI,EAAUilI,EAAahnF,GAC9B,IAAKvrD,KAAKqqB,WAAWw9B,QAAQ0D,GAKzB,YAJA9hD,GAAON,KACF,8CAA6CmE,IAC9Ci+C,GAKR,MAAMt7C,EAAM,GAEZ3C,EAAS0+B,SAAS59B,SAAQ0mD,IAEtB,MAAM/0D,EAAO+0D,EAAU5xD,WAAWnD,KAC5BqF,EAAU0vD,EAAUntD,MAEtB3H,KAAKsN,SAASvN,KAAUqF,IACxBpF,KAAKsN,SAASvN,GAAQqF,EACtBqE,GAAOE,KAAM,OAAM5J,cAAiBqF,KAEpC6K,EAAIX,KAAK,CACLuW,GAAI,oBACJivC,UAAW/0D,EACXqF,YAER,IAIA6K,EAAIvM,OAAS,GACbmkB,GAAWuE,QAAQzjB,KAAKC,UAAUqH,GAE1C,EASJoiI,GAAmBjxI,UAAUoxI,oBAAsB,SAASC,GACxD,OAAOzyI,KAAKsN,SAASmlI,EACzB,ECjEO,IAAKC,GAAyB,SAAzBA,GAAyB,OAAzBA,EAAyB,6BAAzBA,EAAyB,6BAAzBA,EAAyB,mBAAzBA,CAAyB,MAkBzBC,GAAwB,SAAxBA,GAAwB,OAAxBA,EAAwB,cAAxBA,EAAwB,gBAAxBA,EAAwB,wBAAxBA,EAAwB,0BAAxBA,EAAwB,sBAAxBA,CAAwB,MA4BxBC,GAAwB,SAAxBA,GAAwB,OAAxBA,EAAwB,0CAAxBA,EAAwB,oDAAxBA,CAAwB,MAe7B,MAAMC,GAAmBH,GAA0BG,iBAC7CC,GAAmBJ,GAA0BI,iBAC7CC,GAAcL,GAA0BK,YAExCC,GAAWL,GAAyBK,SACpCC,GAAYN,GAAyBM,UACrCC,GAAgBP,GAAyBO,cACzCC,GAAiBR,GAAyBQ,eAC1CC,GAAeT,GAAyBS,aAExCC,GAAsBT,GAAyBS,oBAC/CC,GAAuBV,GAAyBU,qBCjEvD7pI,IAASC,EAAAA,EAAAA,2DAMT6pI,GAAgB,gBAMP,MAAMC,WAA+B95G,GAWhDn4B,YAAYkyI,EAAY9+G,EAAahH,GACjC/lB,QAEA5H,KAAKyzI,WAAaA,EAClBzzI,KAAK20B,YAAcA,EACnB30B,KAAK2tB,SAAWA,EAShB3tB,KAAKukB,WAAQjkB,CACjB,CAKAiZ,OACQvZ,KAAKukB,QAAUmvH,IACZ1zI,KAAKukB,QAAUmvH,GAMtB1zI,KAAK2zI,aAAa,QALdlqI,GAAON,KAAK,kDAMpB,CAKAsN,QAGQzW,KAAKukB,QAAUmvH,IACZ1zI,KAAKukB,QAAUmvH,IACf1zI,KAAKukB,QAAUmvH,IACf1zI,KAAKukB,QAAUmvH,GAMtB1zI,KAAK2zI,aAAa,SALdlqI,GAAON,KAAK,wCAMpB,CAUAyqI,SAAS9+B,EAAU++B,GACf,GAAI/+B,IAAa90G,KAAKukB,MAClB,OAGJ,MAAMuvH,EAAW9zI,KAAKukB,MAEtBvkB,KAAKukB,MAAQuwF,EACb90G,KAAKya,aAAapR,KAAKkqI,GACnB,CACIvuH,QAAShlB,KAAKyzI,WACdI,gBACAC,WACAh/B,SAAU90G,KAAKukB,MACfoQ,YAAa30B,KAAK20B,aAG9B,CAQAo/G,iBAAiBtqH,GACbzpB,KAAK+tB,YAAYwlH,GAAe9pH,EACpC,CAOAuqH,oBAAoBvqH,GAChBzpB,KAAK4pB,eAAe2pH,GAAe9pH,EACvC,CAQAkqH,aAAa1wI,GACT,MAAMyjI,EAAU,CAAC,EACjBA,EAAiB,QAAK59H,OAAOg2C,SAASD,OACtC6nF,EAAe,MAAK1mI,KAAK2tB,SAASsd,WAAWI,KAAKvjB,KAAK63D,MAEvD,MAAMz8E,EAAa,CACf,MAAS,kCACT,OAAUD,EACV,SAAY0F,KAAKC,UAAU89H,GAC3BuN,WAAYj0I,KAAKyzI,YAGrBvwI,EAAWgxI,YAAcl0I,KAAK20B,YAE9B,MAAM0c,GAAKC,EAAAA,GAAAA,KAAI,CACXC,GAAIvxC,KAAK2tB,SAASg3B,YAClBvhD,KAAM,QACLqlC,EAAE,QAASvlC,GACXi1C,KAEL1uC,GAAOgH,MAAO,GAAExN,yBAA+BouC,EAAG8iG,UAClDn0I,KAAK2tB,SAASsd,WAAWkL,OACrB9E,GACA,SACAzxC,IACI6J,GAAO7J,MACF,aAAYqD,kCAAwCrD,GACzDI,KAAK4zI,SAASF,GAAiC,GAE3D,EC/JJ,MAAMjqI,IAASC,EAAAA,EAAAA,+CAUA,MAAM0qI,GAOjB7yI,YAAYosB,GACR3tB,KAAK2tB,SAAWA,EAChB3tB,KAAKya,aAAekT,EAASlT,aAC7BhR,GAAOgH,MAAM,uBACbzQ,KAAKs8E,SAAW,CAAC,EAEjBt8E,KAAKq0I,2BAA6Br0I,KAAKs0I,oBAAoBlkH,KAAKpwB,MAKhE2tB,EAASgE,oBAAoB,uBACzB3xB,KAAKu0I,oBAAoBnkH,KAAKpwB,MACtC,CAQAu0I,oBAAoBxkH,GAChB,MAAM7sB,EAAa6sB,EAAK7sB,WAExB,IAAKA,EACD,OAGJuG,GAAOgH,MAAM,+BAAgCvN,GAE7C,MAAM4xG,EAAW5xG,EAAWqhB,MAE5B,GAAIuwF,IAAa90G,KAAKukB,MAItB,OAAQuwF,GACR,KAAK0/B,GACL,KAAKA,GACL,KAAKA,GACL,KAAKA,GACL,KAAKA,GAAwB,CACzB,MAAMxvH,EAAU9hB,EAAW+wI,WAE3B,IAAKjvH,EACD,OAIJ,MAAMqI,EAAUrtB,KAAKs8E,SAASt3D,GAE1BqI,EACAA,EAAQumH,SAAS9+B,EAAU5xG,EAAWuxI,gBAEtChrI,GAAON,KAAK,kCAAmC6b,EAEvD,EAEJ,CAUA0vH,wBAAwBjB,EAAY9+G,GAChC,GAAI30B,KAAKs8E,SAASm3D,GAId,OAHAhqI,GAAON,KAAK,uDACRsqI,GAEG,IAAIvyI,MAAMszI,IAGrB,MAAMnnH,EAAU,IAAImmH,GAChBC,EAAY9+G,EAAa30B,KAAK2tB,UAMlC,OAJAN,EAAQ0mH,iBAAiB/zI,KAAKq0I,4BAE9Br0I,KAAKs8E,SAASm3D,GAAcpmH,EAErBA,CACX,CAQAinH,oBAAoB7lI,GAChB,MAAMuW,EAAUvW,EAAMuW,QAEtB,GAAIvW,EAAMqmG,WAAa0/B,IAChB/lI,EAAMqmG,WAAa0/B,GAAwB,CAC9C,MAAMnnH,EAAUrtB,KAAKs8E,SAASt3D,GAE9B,IAAKqI,EAID,YAHA5jB,GAAO7J,MAAM,6CACTolB,GAKRqI,EAAQ2mH,oBAAoBh0I,KAAKq0I,mCAC1Br0I,KAAKs8E,SAASt3D,EACzB,CAEAhlB,KAAKya,aAAapR,KACd2kB,GAAW,WAAXA,mCACAvf,EACR,ECvHJ,MAAMhF,IAASC,EAAAA,EAAAA,iDAEFirI,GAA+B,aAM7B,MAAMC,WAA2B9rC,GAI5CvnG,cACIqG,QAUA5H,KAAK60I,WAAa,IAAI71H,IAMtBhf,KAAK2tB,SAAW,KAMhB3tB,KAAK80I,kBAAoB,CAAE,EAM3B90I,KAAK+0I,mBAAqB,CAAE,EAU5B/0I,KAAKg1I,aAAe,IAAIh2H,GAC5B,CAQAi2H,gCACI,QAAIj1I,KAAK2tB,UACE3tB,KAAK2tB,SAASue,uBACjByoG,GACA,CAAEhtI,MAAOgB,KAAKC,UAAU5I,KAAK80I,oBAIzC,CAQAI,2BAA2BtnH,GAGvB,MAAMunH,EAAsBA,CAACvpF,EAAYjgC,KACrC3rB,KAAKya,aAAapR,KACd4+F,GACAr8C,EACAvvC,GAAUkL,MACVoE,EAAM,EAGd3rB,KAAKo1I,kBAAoB,CAACrlH,EAAMvF,KACvBxqB,KAAKq1I,+BAA+B7qH,IACrC2qH,EAAoB3qH,EAAqB,SAAfuF,EAAKpoB,MACnC,EAEJimB,EAAK+D,oBAAoB,aAAc3xB,KAAKo1I,mBAE5C,MAAME,EAAsBA,CAAC1pF,EAAYjgC,KACrC3rB,KAAKya,aAAapR,KACd4+F,GACAr8C,EACAvvC,GAAUwK,MACV8E,EAAM,EAGd3rB,KAAKu1I,kBAAoB,CAACxlH,EAAMvF,KACvBxqB,KAAKq1I,+BAA+B7qH,IACrC8qH,EAAoB9qH,EAAqB,SAAfuF,EAAKpoB,MACnC,EAEJimB,EAAK+D,oBAAoB,aAAc3xB,KAAKu1I,mBAE5C,MAAMC,EAAqBA,CAAC5pF,EAAY54B,KACpChzB,KAAKya,aAAapR,KACd4+F,GACAr8C,EAAY54B,EAAU,EAG9BhzB,KAAKy1I,kBAAoB,CAAC1lH,EAAMvF,KACvBxqB,KAAKq1I,+BAA+B7qH,IACrCgrH,EAAmBhrH,EAAMuF,EAAKpoB,MAClC,EAEJimB,EAAK+D,oBAAoB,YAAa3xB,KAAKy1I,mBAG3Cz1I,KAAK01I,mBAAqB,CAAC3lH,EAAMq8B,KAC7B,MAAMR,EAAaQ,GACb,MAAEzkD,GAAUooB,EACZ4lH,EAAiBhtI,KAAK24B,MAAM35B,GAC5BiuI,EAAqB51I,KAAKq1I,+BAA+BzpF,GACzDiqF,EACA71I,KAAK+0I,mBAAmBnpF,KAAgB5rD,KAAK+0I,mBAAmBnpF,GAAc,CAAC,GAErF,IAAK,MAAMnpC,KAAcphB,OAAO8G,KAAKwtI,GAAiB,KAAAG,EAClD,IAAIC,GAAgB,EACpB,MAAMjyI,EAAY2kG,GAA2BhmF,GACvCuzH,EAAgB9rI,QAAQyrI,EAAelzH,GAAYkJ,OACnDsqH,EAAiBJ,EAAoBpzH,KACnCozH,EAAoBpzH,GAAc,CAAEA,eAExCwzH,EAAetqH,QAAUqqH,IACzBD,GAAgB,EAChBE,EAAetqH,MAAQqqH,EACnBJ,IAAuB51I,KAAK80I,kBAAkBryH,IAC9CziB,KAAKya,aAAapR,KAAK4+F,GAAsCxlF,EAAYuzH,IAKjF,MAAME,EAAepyI,IAAcuY,GAAUwK,MACH,QADQivH,EAC5CH,EAAelzH,GAAYuQ,iBAAS,IAAA8iH,EAAAA,EAAI7iH,GAAU,UAAVA,YACxC3yB,EAEF21I,EAAejjH,YAAckjH,IAC7BD,EAAejjH,UAAYkjH,EAC3BH,GAAgB,EAIZH,IAAuB51I,KAAK80I,kBAAkBryH,IAC9CziB,KAAKya,aAAapR,KAAK4+F,GAA2CxlF,EAAYyzH,IAIlFH,GAAiBvzH,GAAAA,4BACjBxiB,KAAKya,aAAapR,KACd4+F,GACAxlF,EACA2pC,EACA4pF,EACAE,EAEZ,CAGA,MAAMC,EAAiB90I,OAAO8G,KAAKwtI,GAEnC,IAAK,MAAMlzH,KAAcphB,OAAO8G,KAAK0tI,IACW,IAAxCM,EAAev1I,QAAQ6hB,WAChBozH,EAAoBpzH,EAEnC,EAEJmL,EAAK+D,oBAAoB,aAAc3xB,KAAK01I,oBAG5C11I,KAAKo2I,mBAAqB3mH,IACtB,MAAMm8B,EAAar9B,GAAAA,QAAAA,mBAA2BkB,UAEvCzvB,KAAK+0I,mBAAmBnpF,GAE/B,IAAK,MAAQlkD,EAAKC,KAAW3H,KAAK60I,WAAWz5H,UACrCzT,IAAUikD,UACH5rD,KAAKg1I,aAAattI,EAEjC,EAEJkmB,EAAKniB,iBAAiBuiB,GAAW,WAAXA,gBAA4BhuB,KAAKo2I,mBAC3D,CASAf,+BAA+BzpF,GAAY,IAAAyqF,EACvC,MAAMnuF,EAAwB,QAAhBmuF,EAAGr2I,KAAK2tB,gBAAQ,IAAA0oH,OAAA,EAAbA,EAAelqF,gBAAgBP,GAEhD,OAAO1hD,QAAQg+C,GAAYA,EAASj0B,MAAKlE,GAAQA,EAAKE,UAAY0kH,KACtE,CASA2B,wBAAwB/1I,GAChBiiB,GAAAA,2BACA/Y,GAAOgH,MAAMlQ,GAEbkJ,GAAO7J,MAAMW,EAErB,CAKAo2E,iBAAiBhpB,EAAO7pD,EAAW2e,GAAY,IAAA8zH,EAC3C,MAOMC,EAA4B,QAAhBD,EAAGv2I,KAAK2tB,gBAAQ,IAAA4oH,OAAA,EAAbA,EAAepqF,gBAAgBwB,GAEpD,IAAK6oF,EAGD,YAFA/sI,GAAON,KAAM,8CAA6CwkD,KAI9D,IAAK3tD,KAAKq1I,+BAA+B1nF,GACrC,MAf2B8oF,MAC3B,GAAIz2I,KAAK2tB,SACL,OAAO3tB,KAAK2tB,SAASg+B,qBAAqBgC,EAAO7pD,GAErD2F,GAAON,KAAK,iDAAiD,EAWtDstI,GAGX,GAAIh0H,EACA,OAAOziB,KAAK+oG,kBAAkBp7C,EAAOlrC,GAGzC,MAAMi0H,EAAY,CACd/qH,OAAO,GAGX,GAAI7nB,IAAcuY,GAAUwK,MAAO,CAC/B6vH,EAAU1jH,eAAY1yB,EACtB,MAAMwrD,EAAgBpI,GAA2B8yF,EAAc,+BAE3D1qF,EAAcpoD,OAAS,IACvBgzI,EAAU1qF,UAAYF,EAAc,GAAGnkD,MAE/C,CAEA,OAAO+uI,CACX,CAKA3tC,kBAAkBp7C,EAAOlrC,GAAY,IAAAk0H,EACjC,MACMD,EAAY,CACd/qH,OAAO,EACPqH,UAHcy1E,GAA2BhmF,KAGhBpG,GAAUwK,MAAQoM,GAAU,UAAVA,YAAmB3yB,GAGlE,OAAON,KAAK+0I,mBAAmBpnF,GACiB,QADXgpF,EAC/B32I,KAAK+0I,mBAAmBpnF,GAAOlrC,UAAW,IAAAk0H,EAAAA,EAAID,OAC9Cp2I,CACV,CAKA0oG,aAAar3F,GACT,OAAO3R,KAAK60I,WAAWlwH,IAAIhT,EAC/B,CAKAs3F,mBAAmBt3F,GACf,OAAO3R,KAAKg1I,aAAarwH,IAAIhT,EACjC,CAKAsmE,iBAAiBixB,GACb,GAAKA,SAAAA,EAAUxlG,OAIf,IAAK,MAAMiO,KAAQu3F,EACflpG,KAAK60I,WAAW3+H,OAAOvE,EAE/B,CAMAilI,YAAYhpH,GACR,MAAMipH,EAAc72I,KAAK2tB,SAEzB3tB,KAAK2tB,SAAWC,EACZipH,IACAA,EAAYxrF,uBACR,aAAcrrD,KAAKo1I,mBACvByB,EAAYxrF,uBACR,aAAcrrD,KAAKu1I,mBACvBsB,EAAYxrF,uBACR,YAAarrD,KAAKy1I,mBACtBz1I,KAAK01I,oBACEmB,EAAYxrF,uBAAuBspF,GAA8B30I,KAAK01I,oBAC7E11I,KAAKo2I,oBACES,EAAYl9G,oBAAoB3L,GAAW,WAAXA,gBAA4BhuB,KAAKo2I,qBAExExoH,IACA5tB,KAAKk1I,2BAA2BtnH,GAChC5tB,KAAKi1I,gCAEb,CAKA7jE,aAAaz/D,EAAMi6C,GACf,GAAoB,iBAATj6C,EACP,MAAM,IAAI+2D,UAAW,QAAO/2D,uBAKhC,MAAMmlI,EAAgB92I,KAAK60I,WAAWlwH,IAAIhT,GAEtCmlI,GAAiBA,IAAkBlrF,GACnC5rD,KAAKs2I,wBAAyB,+BAA8BQ,QAAoBlrF,KAEpF5rD,KAAK60I,WAAW/uH,IAAInU,EAAMi6C,EAC9B,CAKAu9C,mBAAmB1mF,EAAYkJ,GAO3B,OANK3rB,KAAK80I,kBAAkBryH,KACxBziB,KAAK80I,kBAAkBryH,GAAc,CAAC,GAG1CziB,KAAK80I,kBAAkBryH,GAAYkJ,MAAQA,IAEvC3rB,KAAK2tB,UACE3tB,KAAKi1I,+BAIpB,CAKA9jE,mBAAmBx/D,EAAM8Q,GACrB,GAAoB,iBAAT9Q,EACP,MAAM,IAAI+2D,UAAW,QAAO/2D,uBAKhC,MAAMolI,EAAe/2I,KAAKg1I,aAAarwH,IAAIhT,GAEvColI,GAAgBA,IAAiBt0H,GACjCziB,KAAKs2I,wBAAyB,QAAO3kI,kCAAqColI,QAAmBt0H,KAGjGziB,KAAKg1I,aAAalvH,IAAInU,EAAM8Q,EAChC,CAKA2mF,kBAAkB3mF,EAAYuQ,GAK1B,OAJKhzB,KAAK80I,kBAAkBryH,KACxBziB,KAAK80I,kBAAkBryH,GAAc,CAAC,GAGtCziB,KAAK80I,kBAAkBryH,GAAYuQ,YAAcA,IAEjDhzB,KAAK80I,kBAAkBryH,GAAYuQ,UAAYA,IAAcC,GAAU,UAAVA,YAAmB3yB,EAAY0yB,EAErFhzB,KAAKi1I,gCAIpB,CAKA5rC,wBAAwBxjF,GACpB,MAAMgpC,EAAQ1uD,MAAMqqB,KAAKxqB,KAAK60I,YACzB58H,QAAO++H,GAASA,EAAM,KAAOnxH,IAC7B6X,KAAIs5G,GAASA,EAAM,KAEnBnoF,SAAAA,EAAOnrD,QAIZ1D,KAAKi4E,iBAAiBppB,EAC1B,EC5aJ,MAAMooF,GAAgB,CAClBC,oBAAqB,CACjB71H,MAAO,CACH81H,aAAc,EACdxvI,MAAO,GAEXhH,MAAO,CACHy2I,OAAQ,CACJD,aAAc,EACdxvI,MAAO,GAEX0vI,QAAS,CACLF,aAAc,EACdxvI,MAAO,IAGf0iB,WAAY,CACR8sH,aAAc,EACdxvI,MAAO,KAOnB,IAAI2vI,GAAc,CACdJ,oBAAqB,CACjB71H,MAAO,CACH81H,aAAc,EACdxvI,MAAO,GAEXhH,MAAO,CACHy2I,OAAQ,CACJD,aAAc,EACdxvI,MAAO,GAEX0vI,QAAS,CACLF,aAAc,EACdxvI,MAAO,IAGf0iB,WAAY,CACR8sH,aAAc,EACdxvI,MAAO,KAsBnB,SAAS4vI,GAA4BhzH,EAAO8F,GAExC,MAAMtO,EAAMD,KAAKC,OACX,oBAAEm7H,GAAwB3yH,GAE1B,MACFlD,EAAK,MACL1gB,GACAu2I,GACE,OACFE,EAAM,QACNC,GACA12I,EAEEsyE,EAAS5oD,EAAWrD,iBACpBw5F,EAAavtC,EAAOh/C,MAAK5R,GAAyB,UAAlBA,EAAMoL,YACtCizE,EAAaztB,EAAOh/C,MAAK5R,GAAyB,UAAlBA,EAAMoL,YACtC+pH,EAAc,IAAKN,GAWzB,GATK12B,IAAcA,EAAW70F,OAAUtB,GAKN,IAAvBhJ,EAAM81H,cACbK,EAAYn2H,MAAM81H,YAAcp7H,GALhCy7H,EAAYn2H,MAAQ,CAChB81H,aAAc,EACdxvI,MAAO0Z,EAAM1Z,QAAgC,IAAvB0Z,EAAM81H,YAAqB,EAAIp7H,EAAMsF,EAAM81H,cAMpEz2C,IAAcA,EAAW/0E,OAAUtB,EAWjC,CACH,MAAM,UAAE2I,GAAc0tE,GAEgB,IAAlC//F,EAAMqyB,GAAWmkH,cACjBK,EAAY72I,MAAMqyB,GAAWmkH,YAAcp7H,EAEnD,MAhBIy7H,EAAY72I,MAAQ,CAChBy2I,OAAQ,CACJD,aAAc,EACdxvI,MAAOyvI,EAAOzvI,QAAiC,IAAxByvI,EAAOD,YAAqB,EAAIp7H,EAAMq7H,EAAOD,cAExEE,QAAS,CACLF,aAAc,EACdxvI,MAAO0vI,EAAQ1vI,QAAkC,IAAzB0vI,EAAQF,YAAqB,EAAIp7H,EAAMs7H,EAAQF,eAWnF,MAAO,IACAD,KACAM,EAEX,CAGe,MAAMC,GAEjBl2I,YAAY8oB,GAERA,EAAW5e,iBAAiBpS,GAAyC,KACjEi+I,GAAc,CACVJ,oBAAqB,IACdK,GAA4BN,GAAe5sH,GAC9CA,WAAY,CACR8sH,YAAar7H,KAAKC,MAClBpU,MAAO,IAGlB,IAGL0iB,EAAW5e,iBAAiBpS,IAAqC,KAC7D,MAAM,oBAAE69I,GAAwBI,IAEoB,IAAhDJ,EAAoB7sH,WAAW8sH,cAGnCG,GAAc,CACVJ,oBAAqB,IACdA,KACAK,GAA4BD,GAAajtH,KAEnD,IAGLA,EAAW5e,iBAAiBpS,IAAmC,KAE3D,MAAM,oBAAE69I,GAAwBI,IAEoB,IAAhDJ,EAAoB7sH,WAAW8sH,cAOnCG,GAAc,CACVJ,oBAAqB,IACdA,KACAK,GAA4BD,GAAajtH,KAEnD,IAGLA,EAAW5e,iBAAiBpS,IAAqC,KAE7D,MAAM,oBAAE69I,GAAwBI,IAEoB,IAAhDJ,EAAoB7sH,WAAW8sH,cAOnCG,GAAc,CACVJ,oBAAqB,IACdA,KACAK,GAA4BD,GAAajtH,KAEnD,IAKLA,EAAW5e,iBAAiBpS,GAAuC,KAC/D,MAAM,oBAAE69I,GAAwBI,GAC1BI,EAAyB,IACxBH,GAA4BD,GAAajtH,GAC5CA,WAAY,CACR8sH,aAAc,EACdxvI,MAAOmU,KAAKC,MAAQm7H,EAAoB7sH,WAAW8sH,cAG3DtvH,GAAWmF,cArJvB,SAAwCvR,GACpC,MAAM,MAAE4F,EAAK,MAAE1gB,EAAK,WAAE0pB,GAAe5O,GAC/B,OAAE27H,EAAM,QAAEC,GAAY12I,EAE5B,MAAO,CACHsC,OAAQ,yBACRC,WAAY,CACRme,MAAOA,EAAM1Z,MACbyvI,OAAQA,EAAOzvI,MACf0iB,WAAYA,EAAW1iB,MACvB0vI,QAASA,EAAQ1vI,OAG7B,CAwIqCgwI,CAA+BD,GAAwB,GAExF,4BClIJ5uI,OAAO8uI,IAAM,CACTvtH,WAAY,CACZ,GAIJ,MAAM5gB,IAASC,EAAAA,EAAAA,iCAgBf,SAASmuI,GAAkB7qI,GACvB,MAAqB,iBAAVA,EACA3L,OAAOkP,OAAOyoD,MAAe/kC,MAAKtsB,GAASA,IAAUqF,EAAMg7C,gBAG/D,IACX,CAwCe,SAAS8vF,GAAgBj4I,GAAS,IAAAk4I,EAAAC,EAAAC,EAC7C,IAAKp4I,EAAQE,MAAQF,EAAQE,KAAKioD,gBAAkBnoD,EAAQE,KAAKsvC,WAAY,CACzE,MAAMuC,EACA,8GAIN,MADAnoC,GAAO7J,MAAMgyC,GACP,IAAI1wC,MAAM0wC,EACpB,CAIA,GAHA5xC,KAAKirC,WAAaprC,EAAQorC,WAC1BjrC,KAAK8nB,KAAsB,QAAlBiwH,EAAG/3I,KAAKirC,kBAAU,IAAA8sG,OAAA,EAAfA,EAAiBjwH,KAEzB9nB,KAAK8nB,KAAK2lC,cAAc5tD,EAAQE,KAAMF,EAAQm8C,cAAe,CAC7D,MAAMpK,EAAS,4DAKf,aAHO5xC,KAAKirC,kBACLjrC,KAAK8nB,KACZre,GAAO7J,MAAMgyC,GACP,IAAI1wC,MAAM0wC,EACpB,CACA5xC,KAAKya,aAAe,IAAIhT,MACxBzH,KAAKH,QAAUA,EACfG,KAAKk4I,aAAe,IAAI/qH,GAA4BntB,MAMpDA,KAAK26C,aAAe,IAAI37B,IAOxBhf,KAAKmqE,gBAAkB,IAAIyqE,GAE3B50I,KAAK0+B,MAAM7+B,GACXG,KAAKm4I,mBAAqB,IAAI9F,GAAmBryI,MAMjDA,KAAKutB,iBAAmB,KACxBvtB,KAAKuyB,oBAAsB,KAC3BvyB,KAAKo4I,YAAc,KACnBp4I,KAAKq4I,sBAAuB,EAC5Br4I,KAAKkxB,aAAc,EACnBlxB,KAAK6xB,iBAAkB,EACvB7xB,KAAK8xB,iBAAkB,EACvB9xB,KAAKgyB,iBAAmB,CACpB3Q,OAAO,EACP1gB,OAAO,GAEXX,KAAK8uB,gBAAiB,EAGtB9uB,KAAK4uB,kBAAoB,KAEzB5uB,KAAKivB,qBAAsB,EAG3BjvB,KAAK+uB,uBAAyB,KAM9B/uB,KAAKs4I,YAAa,EAGlBt4I,KAAK4O,WAAa,CAAC,EAOnB5O,KAAKitH,kBACC,IAAIH,GAAkB9sH,KAAMA,KAAKya,aAAc5a,GAMrDG,KAAKioI,oBACC,IAAIsB,GAAoBvpI,KAAMH,EAAQ8zB,OAAO4kH,cAAgB,IAM9D14I,EAAQ8zB,OAAOlL,qBAChBzoB,KAAKw4I,4BAA8B,IAAIxR,GAA2BhnI,OAMtEA,KAAKovB,4BAA6B,EAKlCpvB,KAAKy4I,sBAAwB,IAAIpM,GAAsBrsI,MAUvDA,KAAK04I,qBAAuB,KAE5B,MAAMC,EACAxyI,SAAStG,EAAQ8zB,OAAOrO,KAAOzlB,EAAQ8zB,OAAOrO,IAAIszH,eAAgB,IAOxE54I,KAAK44I,eAAiBj1H,MAAMg1H,GAAS,EAAIA,EACzClvI,GAAOE,KAAM,mBAAkB3J,KAAK44I,kBAQpC54I,KAAK64I,4BAA6B,EAQlC74I,KAAKslB,KAAM,EAMXtlB,KAAKstB,iBAAmB,KAExBttB,KAAK84I,kBAAoB,IAAI1E,GAAWp0I,KAAK4tB,MAC7C5tB,KAAK+4I,iBAAmB,IjBzR5B,MAQIx3I,YAAYosB,GAIR3tB,KAAKg5I,UAAY,CAAC,EAElBh5I,KAAKi5I,UAAYtrH,EAEjB3tB,KAAKinD,WAAajnD,KAAKinD,WAAW72B,KAAKpwB,MAEvCA,KAAKwwB,aAAexwB,KAAKwwB,aAAaJ,KAAKpwB,MAE3CA,KAAKi5I,UAAUx+H,aAAasT,YACxBC,GAAW,WAAXA,kBAA8BhuB,KAAKinD,YACvCjnD,KAAKi5I,UAAUx+H,aAAasT,YACxBC,GAAW,WAAXA,gBAA4BhuB,KAAKwwB,aACzC,CAQA0oH,WAAWxU,GACP,OAAO1kI,KAAKg5I,UAAUtU,EAC1B,CAQAyU,qBAAqB1S,GACjB,IAAIv9F,EAQJ,OANA7nC,OAAOkP,OAAOvQ,KAAKg5I,WAAW5qI,SAAQif,IAC9BA,EAAQ44G,gBAAkBQ,IAC1Bv9F,EAAI7b,EACR,IAGG6b,CACX,CAcA+d,WAAU3Z,GAAiC,IAAhC,iBAAE2a,EAAgB,SAAEC,GAAU5a,EACjCu5F,GAAkBzB,YAAYl9E,GAC9BloD,KAAKo5I,qBAAqBlxF,GACnBD,GACPjoD,KAAKq5I,qBAAqBnxF,EAElC,CAMA13B,aAAaf,GACT,MAAMpC,EAAUrtB,KAAKm5I,qBAAqB1pH,GAE1C,GAAIpC,EAAS,CAET,MAAMisH,EAAajsH,EAAQsC,YAG3BtC,EAAQq4G,UAAU,IAClBr4G,EAAQm5G,YAAY,MAEhBn5G,EAAQsC,cAAgB2pH,GACxBt5I,KAAKu5I,mBAAmBlsH,EAEhC,CACJ,CAkBAqyG,eAAe7/H,GACX,MAAMwtB,EAAU,IAAIg4G,GAAa,IAC1BxlI,EACHorC,WAAYjrC,KAAKi5I,UAAUhuG,aAG/B,OAAO5d,EAAQ5W,MAAM,CACjBiwH,QAAS7mI,EAAQ6mI,QACjBC,YAAa9mI,EAAQ8mI,YACrBhiF,YAAa3kD,KAAKi5I,UAAUt0F,YAC5BgM,SAAU9wD,EAAQ8wD,WAEjB5wC,MAAK,KAKG/f,KAAKk5I,WAAW7rH,EAAQs4G,WACzB3lI,KAAKw5I,YAAYnsH,GACjBrtB,KAAKu5I,mBAAmBlsH,IAGrBA,KAEVnN,OAAMtgB,IACHI,KAAKu5I,mBAAmBlsH,GAEjBhZ,QAAQE,OAAO3U,KAElC,CAUAogI,cAAc0E,GACV,MAAMr3G,EAAUrtB,KAAKk5I,WAAWxU,GAEhC,OAAIr3G,EACOA,EAAQ9T,KAAK,CAAEorC,YAAa3kD,KAAKi5I,UAAUt0F,cAG/CtwC,QAAQE,OAAO,IAAIrT,MAAM,0BACpC,CAQAs4I,YAAYnsH,GACRrtB,KAAKg5I,UAAU3rH,EAAQs4G,SAAWt4G,CACtC,CAWAosH,eAAe/U,EAAWjwH,EAAQgrC,GAC9B,MAAMpyB,EAAU,IAAIg4G,GAAa,CAC7Bp6F,WAAYjrC,KAAKi5I,UAAUhuG,WAC3B0Z,YAAa3kD,KAAKi5I,UAAUt0F,YAC5BlF,OACAilF,YACAjwH,WAKJ,OAFAzU,KAAKw5I,YAAYnsH,GAEVA,CACX,CAQAksH,mBAAmBlsH,EAASghD,GACxBruE,KAAKi5I,UAAUx+H,aAAapR,KACxB2kB,GAAW,WAAXA,uBAAmCX,EAASghD,EACpD,CASA+qE,qBAAqBlxF,GACjB,MAAMs8E,EAAcqC,GAAkBtC,wBAAwBr8E,GAE9D,IAAKs8E,EACD,OAGJ,MAAM,MAAE5kI,EAAK,UAAEyuE,EAAS,cAAEo2D,EAAa,UAAEC,EAAS,OAAEjwH,GAAW+vH,EAI/D,IAAIn3G,EAAUrtB,KAAKk5I,WAAWxU,GAKzBr3G,GAAsB,QAAX5Y,EAaZ4Y,GACGA,EAAQsC,cAAgBlb,GACxB4Y,EAAQ0D,aAAenxB,EAC1B6J,GAAON,KAAK,uCACRR,KAAKC,UAAU47H,KAKlBn3G,IACDA,EAAUrtB,KAAKy5I,eAAe/U,EAAWjwH,EAAQgwH,IAGrDp3G,EAAQk5G,oBAAoB9xH,GAExB7U,GACAytB,EAAQg5G,SAASzmI,GAGrBI,KAAKu5I,mBAAmBlsH,EAASghD,IA/B7B5kE,GAAON,KACH,qCACA,0CA8BZ,CASAkwI,qBAAqBnxF,GACjB,MAAM,kBAAE28E,EAAiB,KAAEplF,EAAI,UAAEilF,GAC3BmC,GAAkBlC,sBAAsBz8E,GAE9C,IAAKw8E,EAID,YAHAj7H,GAAON,KACH,2DAKR,IAAIkkB,EAAUrtB,KAAKk5I,WAAWxU,GAEzBr3G,IACDA,EAAUrtB,KAAKy5I,eAAe/U,EAAW,KAAMjlF,IAInDpyB,EAAQq4G,UAAU,MAClBr4G,EAAQm5G,YAAYt+E,EAASpd,aAAa,SAC1Czd,EAAQi5G,qBAAqBzB,GAE7B7kI,KAAKu5I,mBAAmBlsH,EAC5B,GiBX6CrtB,KAAK4tB,MAQlD5tB,KAAK05I,uCAAoCp5I,EAKrCN,KAAK25I,oBACLlwI,GAAOE,KAAK,sCAEZ3J,KAAK45I,eAAiB,IAAI/xG,GAAc7nC,OAGxCwiB,GAAAA,2BACA/Y,GAAOE,KAAK,qBAEZ3J,KAAK65I,iBAAmB,IAAIlY,GAAgB3hI,OAQhDA,KAAK85I,8BAA2Bx5I,EAOhCN,KAAK+5I,8BAA2Bz5I,EAGhCN,KAAKg6I,kBAEDn6I,EAAQ8zB,OAAOsmH,uBACfj6I,KAAKk6I,oBAAsB,IAAI5b,GAC/Bt+H,KAAKk6I,oBAAoB3b,eAAev+H,OAGxCH,EAAQ8zB,OAAOwmH,iBACfn6I,KAAKm6I,kBAGLt6I,EAAQ8zB,OAAOiuB,cACf5hD,KAAK4/H,cAAc,YACnB5/H,KAAK6/H,YACD,WACA,CACI38H,WAAY,CACRspC,MAAO,oCACP4tG,OAAO,MAKvB,MAAMtiJ,EAAOkI,KAEb8I,OAAO8uI,IAAM,CACTvtH,WAAY,CACRgwH,MAAOr6I,KACHs6I,mBACA,OAAOxiJ,EAAKyiJ,+BAA+B72I,OAAS,CACxD,EACAoc,SAAQA,IACGhoB,EAAKm1H,kBAAkBntG,WAElCk8D,mBAAkBA,IACPlkF,EAAKkkF,uBAKxBh8E,KAAKk3I,oBAAsB,IAAIO,GAAoBz3I,MACnDA,KAAKs8E,SAAW,CAAC,EACjBt8E,KAAK03B,KAAO73B,EAAQ63B,KACpB13B,KAAKw6I,mBAAqBvsI,GAAQ5G,qBAAqB,OACF,QADM2wI,EACxB,QADwBC,EACnDj4I,KAAKH,QAAQ8zB,OAAOuU,eAAO,IAAA+vG,OAAA,EAA3BA,EAA6BwC,wBAAgB,IAAAzC,GAAAA,EACzD,CAGAF,GAAgB12I,UAAUG,YAAcu2I,GAcxCA,GAAgB4C,gBAAkB,SAASjrH,GACvC,OAAOlB,GAAAA,QAAAA,eAAuBkB,EAClC,EAOAqoH,GAAgB12I,UAAUs9B,MAAQ,WAAuB,IAAAi8G,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAdn7I,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClDzD,KAAKk4I,aAAa/kH,qBAElB,MAAM,OAAEQ,GAAW3zB,KAAKH,QAGlB6tE,EAAgB,CAClBwX,iBAAkB2yD,GAAqC,QAApB8C,EAAChnH,EAAOi6C,oBAAY,IAAA+sE,OAAA,EAAnBA,EAAqBp1D,eACzDP,iBAAkB6yD,GAA4B,QAAX+C,EAACjnH,EAAOrO,WAAG,IAAAs1H,OAAA,EAAVA,EAAYr1D,eAChDR,sBAA0C,QAArB81D,EAAElnH,EAAOi6C,oBAAY,IAAAitE,OAAA,EAAnBA,EAAqB91D,sBAC5CK,kBAAmByyD,GAAqC,QAApBiD,EAACnnH,EAAOi6C,oBAAY,IAAAktE,OAAA,EAAnBA,EAAqB9sE,gBAC1DmX,kBAAmB0yD,GAA4B,QAAXkD,EAACpnH,EAAOrO,WAAG,IAAAy1H,OAAA,EAAVA,EAAY/sE,iBA6GrD,GA1GAhuE,KAAKi7I,eAAiB,IAAIn2D,GAAe9kF,KAAM0tE,GAC/C1tE,KAAKk7I,gBAAkBvnH,EAAOwnH,aAAexnH,EAAOwnH,aAAep8F,GAASnB,kBAC5E59C,KAAK4tB,KAAO5tB,KAAK8nB,KAAKm0B,WAClBj8C,KAAKH,QAAQE,KAAM,IACZ4zB,EACH+xB,QAAS1lD,KAAKk7I,iBAElBpD,GAAgB4C,iBAGpB16I,KAAKmqE,gBAAgBysE,YAAY52I,KAAK4tB,MACtC5tB,KAAKmqE,gBAAgBzgD,GACjBu+E,GAAgBI,gBAChB,CAAC5lF,EAAYmpC,EAAYjgC,EAAOqH,KAC5B,MAAM3E,EAAcruB,KAAK26C,aAAah2B,IAAIinC,GACpC9nD,EAAY2kG,GAA2BhmF,GAEzC4L,IACAA,EAAY6H,YAAYpyB,EAAW6nB,EAAOlJ,EAAYuQ,GACtDhzB,KAAKya,aAAapR,KAAKhQ,GAAkDg1B,GAC7E,IAIRruB,KAAKo7I,4BACCp7I,KAAKo7I,4BAA4BhrH,KAAKpwB,MAC5CA,KAAK4tB,KAAKG,YACNC,GAAW,WAAXA,uBAAmChuB,KAAKo7I,6BAE5Cp7I,KAAKq7I,yBAA2Br7I,KAAKq7I,yBAAyBjrH,KAAKpwB,MACnEA,KAAK4tB,KAAKG,YACNC,GAAW,WAAXA,oBAAgChuB,KAAKq7I,0BAEzCr7I,KAAKs7I,4BACCt7I,KAAKs7I,4BAA4BlrH,KAAKpwB,MAC5CA,KAAK4tB,KAAKG,YACNC,GAAW,WAAXA,uBAAmChuB,KAAKs7I,6BAE5Ct7I,KAAKu7I,kBAAoBv7I,KAAKu7I,kBAAkBnrH,KAAKpwB,MACrDA,KAAK4tB,KAAKG,YAAYC,GAAW,WAAXA,8BAClBhuB,KAAKu7I,mBAETv7I,KAAKw7I,kCAAoCx7I,KAAKw7I,kCAAkCprH,KAAKpwB,MACrFA,KAAK4tB,KAAKG,YAAYC,GAAW,WAAXA,eAA2BhuB,KAAKw7I,mCAEtDx7I,KAAKy7I,2BAA6Bz7I,KAAKy7I,2BAA2BrrH,KAAKpwB,MACvEA,KAAK07I,oBAAsB17I,KAAK07I,oBAAoBtrH,KAAKpwB,MACzDA,KAAK4tB,KAAKG,YAAYC,GAAW,WAAXA,eAA2BhuB,KAAK07I,qBACtD17I,KAAK4tB,KAAKG,YAAYC,GAAW,WAAXA,WAAuBhuB,KAAK07I,qBAClD17I,KAAK4tB,KAAKG,YAAYC,GAAW,WAAXA,iBAA6BhuB,KAAKy7I,4BACxDz7I,KAAK4tB,KAAKG,YAAYC,GAAW,WAAXA,cAA0BhuB,KAAK07I,qBAEnC,QAAlBV,EAAIrnH,EAAOgiG,eAAO,IAAAqlB,GAAdA,EAAgB5mH,UAChBp0B,KAAK21H,QAAU,IAAImB,GACf92H,KACA2zB,GACA,CAACpzB,EAASgxC,KACN,IACIvxC,KAAKilC,YAAY1kC,EAASgxC,GAAI,EAClC,CAAE,MAAO3xC,GACL6J,GAAON,KAAK,+CAAgDvJ,GAASA,EAAMmQ,IAC/E,MAIP/P,KAAKkuB,MACNluB,KAAKkuB,IAAM,IAAIiyF,GAAIngH,KAAMH,GACzBG,KAAKk4I,aAAajmH,oBAClBjyB,KAAK27I,sBAAsB37I,KAAKkuB,MAGpCluB,KAAK47I,uBAAyB,IAAI/Y,GAAuB7iI,KAAMA,KAAKkuB,KACpEluB,KAAK67I,oBAAsB,IAAIlY,GAAoB3jI,KAAMA,KAAKkuB,KAEzDluB,KAAKsrB,aACNtrB,KAAKsrB,WAAa,IAAIzD,GAAW7nB,KAAK8nB,KAAM,CACxCxU,UAAWtT,KAAKk7I,gBAChB3nI,SAAUogB,EAAOmoH,sBAAwBnoH,EAAOmoH,sBAAwB97I,KAAK4xB,WAC7E9gB,OAAQ6iB,EAAO7iB,QAAW,GAAE9Q,KAAKirC,WAAWprC,QAAQw/C,MAAMnL,UAAUl0C,KAAKH,QAAQE,OACjF8T,OAAQ8f,EAAO9f,OACfuU,gBAAiBuL,EAAOooH,yBACxBvoI,YAAamgB,EAAOngB,YACpBC,gBAAiBkgB,EAAOlgB,gBACxByU,iCAAkCyL,EAAOzL,iCACzC+C,SAAUjrB,KAAKH,QAAQE,KACvB4T,gBAAiBggB,EAAOhgB,gBACxBD,aAAcigB,EAAOqoH,wBAEzBn0H,GAAWe,UAAU5a,uBAAuB,CACxC,eAAkBhO,KAAKk7I,kBAIvBvnH,EAAOhL,wBACP3oB,KAAKsrB,WAAWlB,qBAAqBpqB,OAI7CA,KAAKk4I,aAAaxqH,yBAIlB1tB,KAAKk4I,aAAa7jH,2BAIdV,EAAOsoH,sBAAwBhuI,GAAQd,uBAGvC,GAAIwmB,EAAO2/F,mBAAoB,CAC3B7pH,GAAOE,KAAK,8DAEP3J,KAAKk8I,iBACNl8I,KAAKk8I,eAAiB,IAAI7oB,GAAiBrzH,KAAM2zB,EAAO2/F,qBAG5D,MAAM6oB,EAAwB,IAAI/mB,GAElC+mB,EAAsBzyH,GAAGmmG,IAAsC,IAC3D7vH,KAAKya,aAAapR,KAAKhQ,MAE3B2G,KAAKk8I,eAAepoB,uBAAuBqoB,EAC/C,MACI1yI,GAAON,KAAK,0FAMpB,GAAIwqB,EAAOyoH,yBAA2BnuI,GAAQd,uBAC1C,GAAIwmB,EAAO2/F,mBAAoB,CACtBtzH,KAAKk8I,iBACNl8I,KAAKk8I,eAAiB,IAAI7oB,GAAiBrzH,KAAM2zB,EAAO2/F,qBAG5D,MAAM+oB,EAAoB,IAAI9nB,GAE9B8nB,EAAkB3yH,GAAGmmG,IAAkC,IACnD7vH,KAAKya,aAAapR,KAAKhQ,MAE3B2G,KAAKk8I,eAAepoB,uBAAuBuoB,EAC/C,MACI5yI,GAAON,KAAK,0FAKhBwqB,EAAO2oH,yBAA2B3oH,EAAOlL,oBAAsBzR,GAAoBkB,0BACnFlY,KAAKu8I,wBAA0B,IAAIpsB,GAAuBnwH,MAC1DA,KAAKu8I,wBAAwB7yH,GAAGmmG,IAAgC,KAC5D7vH,KAAKya,aAAapR,KAAKhQ,GAAqC,IAEhE2G,KAAKu8I,wBAAwB7yH,GAAGmmG,IAA0C2sB,IACtEx8I,KAAKya,aAAapR,KAAKhQ,EAAgDmjJ,EAAe,KAI1F,iBAAkB7oH,GAClB3zB,KAAKssH,SAAS34F,EAAOmgD,cAOzB9zE,KAAKy8I,aAAe,IAAInlB,GAAqBt3H,MAG7CA,KAAK08I,4BAA8B,IAAI7rB,GAA4B7wH,MAE/D2zB,GAAUA,EAAOmsD,gBAAkBnsD,EAAOmsD,eAAe68D,YACzD38I,KAAKw8B,4BACD,SAAU7I,EAAOmsD,eAAe68D,YAIxC38I,KAAKw8B,4BAA4B,YAAax8B,KAAKi7I,eAAel1D,qBAM9DpyD,GAAUA,EAAOipH,uBAA0D,UAAjCjpH,EAAOipH,uBACjD58I,KAAKw8B,4BAA4B,yBAA0B7I,EAAOipH,sBAE1E,EAQA9E,GAAgB12I,UAAUZ,KAAO,SAAS6jD,GAAsC,IAA5BC,EAAkB7gD,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GAC9DzD,KAAK4tB,MACL5tB,KAAK4tB,KAAKptB,KAAK6jD,EAAUC,GAAoBvkC,MAAK,IAAM/f,KAAK68I,sBAErE,EAUA/E,GAAgB12I,UAAUojF,2BAA6B,SAAS3kF,GAC5D,OAAO2kF,GAA2BxxE,KAAKhT,KAAM,IACtCH,EACHmjF,iBAAkB80D,GAAgB4C,iBAE1C,EAKA5C,GAAgB12I,UAAU07I,SAAW,WACjC,OAAO98I,KAAK4tB,MAAQ5tB,KAAK4tB,KAAKkuB,MAClC,EAMAg8F,GAAgB12I,UAAU27I,aAAe,WACrC,OAAO7yI,QAAQlK,KAAKH,QAAQ8zB,OAAOrO,KAAOtlB,KAAKH,QAAQ8zB,OAAOrO,IAAI8O,eAGxB,IAA5Bp0B,KAAKH,QAAQ8zB,OAAOrO,GACtC,EAOAwyH,GAAgB12I,UAAU47I,qBAAuB,WAC7C,OAAO9yI,QAAQlK,KAAKH,QAAQ8zB,OAAOuU,SAC5BloC,KAAKH,QAAQ8zB,OAAOuU,QAAQ+0G,YACvC,EAOAnF,GAAgB12I,UAAUkuB,MAAQxV,eAAepF,GAyC7C,GAxCI1U,KAAKioI,sBACLjoI,KAAKioI,oBAAoB/5H,UACzBlO,KAAKioI,oBAAsB,MAG3BjoI,KAAKw4I,8BACLx4I,KAAKw4I,4BAA4BtqI,UACjClO,KAAKw4I,4BAA8B,MAGnCx4I,KAAK21H,UACL31H,KAAK21H,QAAQp8G,OACbvZ,KAAK21H,QAAU,MAGnB31H,KAAKgnB,iBAAiB5Y,SAAQiU,GAASriB,KAAKk9I,oBAAoB76H,KAEhEriB,KAAKkuB,IAAIC,qBAETnuB,KAAKm9I,oCAEDn9I,KAAKsrB,YACLtrB,KAAKsrB,WAAWpd,UAGpBlO,KAAKo9I,mBAAqBp9I,KAAKo9I,kBAAkB9tG,SAEjDtvC,KAAKq9I,uBAGDr9I,KAAKutB,mBACLvtB,KAAKutB,iBAAiBxT,QACtB/Z,KAAKutB,iBAAmB,MAExBvtB,KAAKstB,mBACLttB,KAAKstB,iBAAiBvT,QACtB/Z,KAAKstB,iBAAmB,OAIvBttB,KAAK4tB,KACN,MAAM,IAAI1sB,MAAM,wCAGpB,MAAM0sB,EAAO5tB,KAAK4tB,KA6BlB,IAAI0vH,EA1BJ1vH,EAAKhE,eACDoE,GAAW,WAAXA,uBACAhuB,KAAKo7I,6BACTxtH,EAAKhE,eACDoE,GAAW,WAAXA,oBACAhuB,KAAKq7I,0BACTztH,EAAKhE,eACDoE,GAAW,WAAXA,uBACAhuB,KAAKs7I,6BAET1tH,EAAKhE,eACDoE,GAAW,WAAXA,8BACAhuB,KAAKu7I,mBAET3tH,EAAKhE,eAAeoE,GAAW,WAAXA,eAA2BhuB,KAAKw7I,mCACpD5tH,EAAKhE,eAAeoE,GAAW,WAAXA,eAA2BhuB,KAAK07I,qBACpD9tH,EAAKhE,eAAeoE,GAAW,WAAXA,WAAuBhuB,KAAK07I,qBAChD9tH,EAAKhE,eAAeoE,GAAW,WAAXA,iBAA6BhuB,KAAKy7I,4BACtD7tH,EAAKhE,eAAeoE,GAAW,WAAXA,cAA0BhuB,KAAK07I,qBAEnD17I,KAAKk4I,aAAahlH,sBAElBlzB,KAAKmqE,gBAAgBysE,YAAY,MAEjC52I,KAAK4tB,KAAO,KAIZ,UACUA,EAAK0B,MAAM5a,EACrB,CAAE,MAAOwX,GACLoxH,EAAapxH,EAKblsB,KAAKg0B,kBAAkB5lB,SACnBigB,GAAeruB,KAAKwwB,aAAanC,EAAY8F,WACrD,CAMA,GAJIn0B,KAAKkuB,KACLluB,KAAKkuB,IAAI28F,UAGTyyB,EACA,MAAMA,CAEd,EAOAxF,GAAgB12I,UAAUm8I,yBAA2B,WACjD,OAAOrzI,QAAQlK,KAAK4tB,MAAQ5tB,KAAK4tB,KAAK9F,KAAKwlC,8BAC/C,EAKAwqF,GAAgB12I,UAAUisD,IAAM,WAC5B,GAAKrtD,KAAKu9I,2BAAV,CAKA,IAAKv9I,KAAK4tB,KACN,MAAM,IAAI1sB,MAAM,wCAGpBlB,KAAK4tB,KAAKy/B,KALV,MAHI5jD,GAAON,KAAK,2CASpB,EAOA2uI,GAAgB12I,UAAU8iI,sBAAwB,WAC9C,OAAOlkI,KAAKkzG,cAAgBlzG,KAAKstB,iBAAmBttB,KAAKutB,gBAC7D,EAOAuqH,GAAgB12I,UAAUwxB,iBAAmB,WACzC,MAAM0pD,EAAW,GAKjB,OAHAt8E,KAAKutB,kBAAoB+uD,EAAShtE,KAAKtP,KAAKutB,kBAC5CvtB,KAAKstB,kBAAoBgvD,EAAShtE,KAAKtP,KAAKstB,kBAErCgvD,CACX,EAQAw7D,GAAgB12I,UAAUu6I,sBAAwB,SAASztH,GACvDA,EAAIH,YAAYmE,GAAAA,QAAAA,mBAA6B,KACzC,IAAK,MAAMgnF,KAAcl5G,KAAKkuB,IAAI0O,YAC9Bs8E,EAAWnmF,gBAAkB/yB,KAAKokG,4BAA4B8U,EAClE,GAER,EAUA4+B,GAAgB12I,UAAUgjG,4BAA8B,SAASo5C,GAC7D,IAAIxqH,GAAawqH,GAAcA,EAAWhwH,UAAYiwH,KAAAA,KAAuBD,EAAWr8C,eAEpFnuE,IAAcyqH,KAAAA,SAA2Bz9I,KAAK09I,yB3F1zBjB,I2F2zB7B1qH,EAAYyqH,KAAAA,kBAGhBD,GAAcx9I,KAAKkuB,IAAIo9F,oBAAoBkyB,EAAW96H,gBAAiBsQ,EAC3E,EAKA8kH,GAAgB12I,UAAUoF,QAAU,WAChC,OAAOxG,KAAKH,QAAQE,KAAKsvC,UAC7B,EAKAyoG,GAAgB12I,UAAU4/E,cAAgB,WACtC,OAAOhhF,KAAKirC,UAChB,EAKA6sG,GAAgB12I,UAAUu8I,cAAgB,WACtC,OAAO39I,KAAKkxB,WAChB,EAKA4mH,GAAgB12I,UAAUw8I,WAAa,WACnC,OAAO1zI,QAAQlK,KAAKmxB,aACxB,EAKA2mH,GAAgB12I,UAAUy8I,aAAe,WACrC,OAAO79I,KAAKmxB,YAChB,EAKA2mH,GAAgB12I,UAAU2+C,sBAAwB,WAC9C,OAAO//C,KAAK4tB,MAAQ5tB,KAAK4tB,KAAKi3B,UAAU9E,uBAC5C,EAQA+3F,GAAgB12I,UAAU08I,mBAAqB,SAASC,GACpD,OAAO,IAAI1pI,SAAQ,CAACC,EAASC,KACpBvU,KAAK+/C,wBAKNg+F,EACA/9I,KAAK4tB,KAAKi3B,UAAU7B,iBAAiB1uC,EAASC,GAE9CvU,KAAK4tB,KAAKi3B,UAAUrC,YAAYluC,EAASC,GAPzCA,GAQJ,GAER,EAOAujI,GAAgB12I,UAAU4lB,eAAiB,SAASljB,GAChD,IAAImvE,EAAS,GAMb,OAJIjzE,KAAKkuB,MACL+kD,EAASjzE,KAAKkuB,IAAIlH,eAAeljB,IAG9BmvE,CACX,EAMA6kE,GAAgB12I,UAAU2qH,mBAAqB,WAC3C,OAAO/rH,KAAKkuB,IAAMluB,KAAKkuB,IAAI69F,qBAAuB,IACtD,EAMA+rB,GAAgB12I,UAAUwzE,mBAAqB,WAC3C,OAAO50E,KAAKkuB,IAAMluB,KAAKkuB,IAAI0mD,qBAAuB,IACtD,EAMAkjE,GAAgB12I,UAAUuzE,oBAAsB,WAC5C,OAAO30E,KAAKkuB,IAAMluB,KAAKkuB,IAAIymD,sBAAwB,IACvD,EAMAmjE,GAAgB12I,UAAU48I,oBAAsB,WAC5C,MAAO,CACHC,eAAgBj+I,KAAKsrB,WAAWxQ,oBAExC,EAWAg9H,GAAgB12I,UAAUsoB,GAAK,SAASw0H,EAAS7vI,GACzCrO,KAAKya,cACLza,KAAKya,aAAaiP,GAAGw0H,EAAS7vI,EAEtC,EAUAypI,GAAgB12I,UAAUw4B,IAAM,SAASskH,EAAS7vI,GAC1CrO,KAAKya,cACLza,KAAKya,aAAamP,eAAes0H,EAAS7vI,EAElD,EAGAypI,GAAgB12I,UAAUqK,iBAAmBqsI,GAAgB12I,UAAUsoB,GACvEouH,GAAgB12I,UAAUu4B,oBAAsBm+G,GAAgB12I,UAAUw4B,IAQ1Ek+G,GAAgB12I,UAAU69H,mBAAqB,SAASlE,EAAS1sH,GACzDrO,KAAK4tB,MACL5tB,KAAK4tB,KAAK+D,oBAAoBopG,EAAS1sH,EAE/C,EAOAypI,GAAgB12I,UAAU+8I,sBAAwB,SAASpjB,EAAS1sH,GAC5DrO,KAAK4tB,MACL5tB,KAAK4tB,KAAKy9B,uBAAuB0vE,EAAS1sH,EAElD,EAQAypI,GAAgB12I,UAAUg9I,gBAAkB,SAAS79I,GAA+B,IAAtB2oD,EAAWzlD,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,OACpEzD,KAAK4tB,MACL5tB,KAAK4tB,KAAKqX,YAAY1kC,EAAS2oD,EAEvC,EASA4uF,GAAgB12I,UAAUi9I,uBAAyB,SAASx4H,EAAItlB,GAA+B,IAAtB2oD,EAAWzlD,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,OAC/EzD,KAAK4tB,MACL5tB,KAAK4tB,KAAK6tB,mBAAmB51B,EAAItlB,EAAS2oD,EAElD,EAOA4uF,GAAgB12I,UAAUy+H,YAAc,SAAS9/H,EAAMwQ,GAC/CvQ,KAAK4tB,KACL5tB,KAAK4tB,KAAKse,uBAAuBnsC,EAAMwQ,IAAWvQ,KAAK4tB,KAAKke,eAE5DriC,GAAON,KAAK,+CAGpB,EAOA2uI,GAAgB12I,UAAU89H,gBAAkB,SAASn/H,EAAMwQ,GACvDvQ,KAAK6/H,YAAY9/H,EAAMwQ,GACvBvQ,KAAK4/H,cAAc7/H,EACvB,EAMA+3I,GAAgB12I,UAAUw+H,cAAgB,SAAS7/H,GAC3CC,KAAK4tB,MACL5tB,KAAK4tB,KAAKme,mBAAmBhsC,EAErC,EAMA+3I,GAAgB12I,UAAUgsI,eAAiB,SAASrtI,GAChD,GAAIC,KAAK4tB,KAAM,CACX,MAAM0wH,EAAU,OAEZv+I,EACAC,KAAK4tB,KAAKse,uBAAuBoyG,EAAS,CACtCp7I,WAAY,CAAEspC,MAAO,mCACrB7kC,MAAO5H,KACLC,KAAK4tB,KAAKke,eACT9rC,KAAK4tB,KAAKw9B,gBAAgBkzF,KACjCt+I,KAAK4tB,KAAKme,mBAAmBuyG,GAC7Bt+I,KAAK4tB,KAAKke,eAElB,CACJ,EAMAgsG,GAAgB12I,UAAU+nD,WAAa,SAAS1P,GACxCz5C,KAAK4tB,MAAQ5tB,KAAK4wB,cAClB5wB,KAAK4tB,KAAKu7B,WAAW1P,GAErBhwC,GAAON,KAAM,0BAAyBnJ,KAAK4tB,KAAO,GAAK,oBACnD5tB,KAAK4wB,cAAgB,GAAK,mCAEtC,EAMAknH,GAAgB12I,UAAUm9I,eAAiB,WACvC,QAAyBj+I,IAArBN,KAAKoxI,YAA2B,CAChCpxI,KAAKoxI,YAAc,IAAIL,GAGvB,MAAMyN,EAAmBx+I,KAAKgnB,eAAe3K,GAAUkL,OAEvD,IAAK,MAAMykG,KAAcwyB,EACrBx+I,KAAKoxI,YAAYr/D,SAASi6C,GAI9B,MAAMO,EAAoBvsH,KAAKkuB,IAAIonD,gBAAgBj5D,GAAUkL,OAE7D,IAAK,MAAM04F,KAAesM,EACtBvsH,KAAKoxI,YAAYr/D,SAASkuC,EAElC,CAEA,OAAOjgH,KAAKoxI,WAChB,EAOA0G,GAAgB12I,UAAUq9I,uBAAyB,WAC/C,OAAOz+I,KAAK4tB,KAAK43B,mBACrB,EASAsyF,GAAgB12I,UAAU2wE,SAAW,SAAS1vD,GAC1C,IAAKA,EACD,OAEAA,EAAME,gBAAkBviB,KAAKH,QAAQ8zB,OAAO9B,iBAC5CxP,EAAM1N,OAEN0N,EAAM0Q,gBAAkB/yB,KAAKH,QAAQ8zB,OAAO7B,iBAC5CzP,EAAM1N,OAGV,MAAM7Q,EAAYue,EAAMoL,UAClBmP,EAAc58B,KAAKkuB,IAAIlH,eAAeljB,GAG5C,GAAI84B,EAAYl5B,OAAS,EAAG,CAExB,GAAI2e,IAAUua,EAAY,GACtB,OAAOvoB,QAAQC,QAAQ+N,GAK3B,GAAIG,GAAAA,mCACG1e,IAAcuY,GAAUwK,QACvB+V,EAAY3I,MAAK5O,GAAKA,EAAE87E,iBAAmB9+E,EAAM8+E,iBAAiB,KAAAu9C,EACtE,MAAMj8H,EAAa8lF,GACfvoG,KAAK4xB,WACL9tB,EAC8B,QADrB46I,EACT1+I,KAAKgnB,eAAeljB,UAAU,IAAA46I,OAAA,EAA9BA,EAAgCh7I,QAEpC2e,EAAMk0D,cAAc9zD,GACpB,MAAMk8H,EAAmB,GAKzB,OAHA3+I,KAAKstB,kBAAoBqxH,EAAiBrvI,KAAKtP,KAAKstB,iBAAiBwkD,UAAU,CAAEzvD,KACjFriB,KAAKutB,kBAAoBoxH,EAAiBrvI,KAAKtP,KAAKutB,iBAAiBukD,UAAU,CAAEzvD,KAE1EhO,QAAQ29D,IAAI2sE,GACd5+H,MAAK,KACF/f,KAAK4+I,eAAev8H,GACpBriB,KAAKokG,4BAA4B/hF,GACjCriB,KAAK07I,oBAAoB17I,KAAKkkI,0BAE1BlkI,KAAK8uB,gBAAkB9uB,KAAKivB,sBAC5BjvB,KAAK6+I,qBAAqBx8H,EAC9B,GAEZ,CAEA,OAAOhO,QAAQE,OAAO,IAAIrT,MAAO,qBAAoB4C,6BACzD,CAEA,OAAO9D,KAAK64E,aAAa,KAAMx2D,GAC1BtC,MAAK,KAIEsC,EAAM8+E,iBAAmBluE,GAAU,UAAVA,SAAqBzQ,GAAAA,mCAC9CxiB,KAAK07I,oBAAoB17I,KAAKkkI,wBAClC,GAEZ,EAOA4T,GAAgB12I,UAAU09I,2BAA6B,SAASznI,EAAYzC,GACxE,MAAMmqI,EAAY/+I,KAAKuuH,0BAOlB35G,GAAOmqI,IAAcnqI,GACtB5U,KAAKya,aAAapR,KACdhQ,GACA2G,KAAK4xB,WAAYva,EAE7B,EAMAygI,GAAgB12I,UAAUy9I,qBAAuB,SAASx8H,GActD,IAAI0R,EAEJ,GAdI/zB,KAAK8uB,gBAAkBzM,EAAME,iBAAmBF,EAAMmL,WACtDxtB,KAAK8uB,gBAAiB,EAGtB9uB,KAAK4tB,KAAKk/B,gBAAgB9sD,KAAK4tB,KAAKusB,WAAW,EAAO99B,GAAUkL,QACzDvnB,KAAKivB,qBAAuB5M,EAAM0Q,iBAAmB1Q,EAAMmL,YAClExtB,KAAKivB,qBAAsB,EAG3BjvB,KAAK4tB,KAAKk/B,gBAAgB9sD,KAAK4tB,KAAKusB,WAAW,EAAO99B,GAAUwK,QAKhE7mB,KAAK4uB,mBAAqBvM,EAAME,eAAgB,CAChD,MAAMy8H,EAAUzwH,GAAAA,QAAAA,mBAA2BvuB,KAAK4uB,mBAEhDmF,EAAmB/zB,KAAK26C,aAAah2B,IAAIq6H,EAC7C,MAAO,GAAIh/I,KAAK+uB,wBAA0B1M,EAAM0Q,eAAgB,CAC5D,MAAMisH,EAAUzwH,GAAAA,QAAAA,mBAA2BvuB,KAAK+uB,wBAEhDgF,EAAmB/zB,KAAK26C,aAAah2B,IAAIq6H,EAC7C,CAMA,MAAMp1I,EACAqE,GAAQjH,gBAAkBqb,EAAM2Q,YAAcC,GAAU,UAAVA,QAAoBhlB,GAAQrE,8BAE5EyY,EAAM0Q,iBAAmBnpB,GACzB5J,KAAKokG,4BAA4B/hF,GAGrCriB,KAAKya,aAAapR,KAAKhQ,GAA0CgpB,EAAO0R,EAC5E,EASA+jH,GAAgB12I,UAAU69I,uBAAyB,WAK/C,OAAOj/I,KAAKgnB,iBACP/O,QAAOoK,IACJ,MAAM68H,EAAY78H,EAAMoL,UAExB,QAAIyxH,IAAc7iI,GAAUkL,QACdvnB,KAAKm/I,qBAAuBn/I,KAAKgyB,iBAAiB3Q,SACrDpT,GAAQnE,kBACRmE,GAAQjH,kBAERk4I,IAAc7iI,GAAUwK,QAAU7mB,KAAKo/I,sBAAwBp/I,KAAKgyB,iBAAiBrxB,KAIpF,GAExB,EAMAm3I,GAAgB12I,UAAU87I,oBAAsB,SAAS76H,GACrDA,EAAM8iF,cAAc,MACpBnlG,KAAKkuB,IAAIi+F,iBAAiB9pG,GAC1BA,EAAMsX,oBAAoBt7B,GAAqCgkB,EAAMg9H,aACjEh9H,EAAME,gBACNF,EAAMsX,oBAAoBt7B,GAA4CgkB,EAAMi9H,mBAM5Ej9H,EAAM0Q,gBAAkB1Q,EAAM2Q,YAAcC,GAAU,UAAVA,SAC5CjzB,KAAKsrB,WAAW9U,wBAAuB,GAG3CxW,KAAKya,aAAapR,KAAKhQ,GAAqCgpB,EAChE,EAQAy1H,GAAgB12I,UAAU+tF,YAAc,SAAS9sE,GAC7C,OAAOriB,KAAK64E,aAAax2D,EAAO,KACpC,EAWAy1H,GAAgB12I,UAAUy3E,aAAe,SAASM,EAAUC,GACxD,MAAMmmE,EAAepmE,aAAQ,EAARA,EAAUgoB,eACzBr9F,GAAYq1E,aAAQ,EAARA,EAAU1rD,aAAa2rD,aAAQ,EAARA,EAAU3rD,WAC7CyoH,EAAe98D,aAAQ,EAARA,EAAU+nB,eAE/B,GAAI3+E,GAAAA,mCAAkD22D,GAAYC,GAAYmmE,IAAiBrJ,EAC3F,MAAM,IAAIh1I,MAAO,kCAAiCq+I,+BAA0CrJ,oCAIhG,GAAI98D,EAAU,KAAAomE,EACV,MAAM/8H,EAAa02D,EACbA,EAASz2D,gBACT6lF,GACEvoG,KAAK4xB,WACL9tB,EAC8B,QADrB07I,EACTx/I,KAAKgnB,eAAeljB,UAAU,IAAA07I,OAAA,EAA9BA,EAAgC97I,QAExC01E,EAAS7C,cAAc9zD,EAC3B,CACA,MAAMg9H,EAA8Bz/I,QAASm5E,aAAQ,EAARA,EAAU9uD,YAEvD,OAAIo1H,GAA+BtmE,EAASzrE,UAGxC0rE,SAAAA,EAAU1rE,SAFH2G,QAAQE,OAAO,IAAI5U,GAAgBd,MAM1Cs6E,IAAasmE,GACbh2I,GAAON,KAAM,0CAAyCgwE,wCAInDn5E,KAAK0/I,gBAAgBD,EAA8BtmE,EAAW,KAAMC,GACtEr5D,MAAK,MACE0/H,GAAgCtmE,EAAS3rD,WAAc4rD,GACvDD,EAASqqB,iBAAgB,GAE7Bi8C,GAA+Bz/I,KAAKk9I,oBAAoB/jE,GACxDC,GAAYp5E,KAAK4+I,eAAexlE,IAG3BqmE,SAA+BtmE,GAAAA,EAAUpmD,gBAAmBqmD,SAAAA,EAAUrmD,iBACvE/yB,KAAKokG,4BAA4BhrB,GAErCp5E,KAAK07I,oBAAoB17I,KAAKkkI,yBACb,OAAb9qD,IAAsBp5E,KAAK8uB,gBAAkB9uB,KAAKivB,sBAClDjvB,KAAK6+I,qBAAqBzlE,GAGvB/kE,QAAQC,aAElB4L,OAAMtgB,IACH6J,GAAO7J,MAAO,wBAAuBA,aAAK,EAALA,EAAOuB,SAErCkT,QAAQE,OAAO3U,MAElC,EAcAk4I,GAAgB12I,UAAUs+I,gBAAkB,SAASvmE,EAAUC,GAC3D,MAAMumE,EAAuB,GAc7B,OAZI3/I,KAAKutB,iBACLoyH,EAAqBrwI,KAAKtP,KAAKutB,iBAAiBsrD,aAAaM,EAAUC,IAEvE3vE,GAAOE,KAAK,0CAGZ3J,KAAKstB,iBACLqyH,EAAqBrwI,KAAKtP,KAAKstB,iBAAiBurD,aAAaM,EAAUC,IAEvE3vE,GAAOE,KAAK,0CAGT0K,QAAQ29D,IAAI2tE,EACvB,EAUA7H,GAAgB12I,UAAUq6I,2BAA6B,SAASxtH,EAAeruB,EAAOkE,GAClF,IAAKmqB,EACD,OAEJxkB,GAAON,KAAM,0BAAyB8kB,cAA0BruB,aAAK,EAALA,EAAO8U,qBAAqB9U,aAAK,EAALA,EAAOmQ,QACnG,MAAMsS,EAAQriB,KAAKgnB,eAAeljB,GAAW,GAE7C9D,KAAKya,aAAapR,KAAKhQ,GAA6CgpB,EACxE,EAMAy1H,GAAgB12I,UAAUw9I,eAAiB,SAASxlE,GAChD,MAAMt1E,EAAYs1E,EAAS3rD,UAE3B,GAAI2rD,EAAS72D,gBAAmB62D,EAASrmD,gBAAkBqmD,EAASpmD,YAAcC,GAAU,UAAVA,QAAoB,CAElG,MACM2oE,EADUukB,GAAI9gB,oCAEfprE,MAAKmM,GAAKA,EAAExZ,OAAU,GAAEwyD,EAAS4nB,WAAWp6E,aAAewZ,EAAEisD,QAAUjT,EAAS4nB,WAAW3U,QAE5FuP,GACA/zE,GAAWiE,0BAA0Bq0F,GAAI5gB,4BAA4B3D,GAE7E,CAGA,IAAKxiB,EAAS12D,gBAAiB,KAAAk9H,EAC3B,MAAMn9H,EAAa8lF,GACfvoG,KAAK4xB,WACL9tB,EAC8B,QADrB87I,EACT5/I,KAAKgnB,eAAeljB,UAAU,IAAA87I,OAAA,EAA9BA,EAAgCl8I,QAEpC01E,EAAS7C,cAAc9zD,EAC3B,CAEAziB,KAAKkuB,IAAI09F,cAAcxyC,GACvBA,EAAS+rB,cAAcnlG,MAGnBA,KAAKkzG,eACLlzG,KAAK6/I,wCAITzmE,EAASimE,YAAcr/I,KAAK6+I,qBAAqBzuH,KAAKpwB,KAAMo5E,GAC5DA,EAAS3tE,iBAAiBpN,GAAqC+6E,EAASimE,aAEpEjmE,EAAS72D,iBACT62D,EAASkmE,kBAAoBt/I,KAAK8+I,2BAA2B1uH,KAAKpwB,MAClEo5E,EAAS3tE,iBAAiBpN,GAA4C+6E,EAASkmE,oBAGnFt/I,KAAKya,aAAapR,KAAKhQ,GAAmC+/E,EAC9D,EAQA0+D,GAAgB12I,UAAU0+I,iBAAmB,SAASz9H,GAClD,IAAI09H,GAAmB,EAMvB,OAJI19H,IACA09H,EAAmB//I,KAAKmqE,gBAAgBi/B,kBAAkB/mF,EAAMK,gBAAiBL,EAAM2Q,YAGpF+sH,CACX,EAUAjI,GAAgB12I,UAAUqiG,oBAAsB,SAAS3/F,EAAWo1G,EAAY1rF,GAC5E,IAAIwyH,GAAkB,EAMtB,OAJI9mC,IACA8mC,EAAkBhgJ,KAAKmqE,gBAAgBg/B,mBAAmB+P,EAAWx2F,gBAAiB8K,IAGnFwyH,CACX,EAQAlI,GAAgB12I,UAAU0hG,mBAAqB,SAASzgF,GACpD,MAAM49H,EAAc,GAcpB,OAZIjgJ,KAAKutB,iBACL0yH,EAAY3wI,KAAKtP,KAAKutB,iBAAiBwsD,aAAa13D,IAEpD5Y,GAAOgH,MAAM,6DAGbzQ,KAAKstB,iBACL2yH,EAAY3wI,KAAKtP,KAAKstB,iBAAiBysD,aAAa13D,IAEpD5Y,GAAOgH,MAAM,6DAGV4D,QAAQorB,WAAWwgH,EAC9B,EASAnI,GAAgB12I,UAAUmiG,wBAA0B,SAASlhF,GACzD,MAAM69H,EAAiB,GAavB,OAXIlgJ,KAAKutB,iBACL2yH,EAAe5wI,KAAKtP,KAAKutB,iBAAiB2sD,kBAAkB73D,IAE5D5Y,GAAOgH,MAAM,+DAEbzQ,KAAKstB,iBACL4yH,EAAe5wI,KAAKtP,KAAKstB,iBAAiB4sD,kBAAkB73D,IAE5D5Y,GAAOgH,MAAM,+DAGV4D,QAAQorB,WAAWygH,EAC9B,EAMApI,GAAgB12I,UAAU21B,QAAU,WAChC,OAAO/2B,KAAK4tB,KAAK8C,IACrB,EASAonH,GAAgB12I,UAAUk2B,SAAW,WACjC,OAAKt3B,KAAKirC,WAIH1c,GAAAA,QAAAA,iBAAyBvuB,KAAKirC,WAAW9W,YACxCn0B,KAAKH,QAAQ8zB,OAAO8mB,aAJjB,IAKf,EAOAq9F,GAAgB12I,UAAUwvB,YAAc,WACpC,OAAO5wB,KAAK4tB,KAAO5tB,KAAK4tB,KAAKgD,cAAgB,IACjD,EAOAknH,GAAgB12I,UAAU++I,KAAO,SAAS97F,GACtC,OAAKrkD,KAAK4wB,cAIH,IAAIvc,SAAQ,CAACC,EAASC,KACzBvU,KAAK4tB,KAAKg9B,SACNvG,GAAY,IACZ,IAAM/vC,MACN4X,GAAO3X,EAAO2X,KACd,IAAM3X,EAAOxc,IAA8C,IARxDsc,QAAQE,OAAO,IAAIrT,MAAM,0BAUxC,EAMA42I,GAAgB12I,UAAUg/I,OAAS,WAC/B,OAAOpgJ,KAAKmgJ,MAChB,EAMArI,GAAgB12I,UAAUyzG,SAAW,WACjC,OAAO70G,KAAK47I,uBAAuB/mC,UACvC,EAMAijC,GAAgB12I,UAAUyqH,oBAAsB,WAC5C,OAAO7rH,KAAKkuB,IAAI29F,qBACpB,EAUAisB,GAAgB12I,UAAUkrH,SAAW,SAASzkC,GAC1C,IAAK3hF,OAAOm6I,UAAUx4D,KAAW3hF,OAAOC,SAAS0hF,EAAO,IACpD,MAAM,IAAI3mF,MAAO,4BAA2B2mF,KAEhD,MAAMp/E,EAAIvC,OAAO2hF,GAEjB,GAAIp/E,GAAK,EACL,MAAM,IAAIg6D,WAAW,mCAKzB,GAHAziE,KAAK47I,uBAAuBtvB,SAAS7jH,GAGjCzI,KAAKstB,iBAAkB,CACvB,MAAMgzH,EAAsB,IAAN73I,EAEtBzI,KAAKstB,iBACA8sD,0BAA0BkmE,GAC1BpgI,OAAMtgB,IACH6J,GAAO7J,MAAO,2CAA0C0gJ,KAAkB1gJ,EAAM,GAE5F,CACJ,EAKAk4I,GAAgB12I,UAAU4yB,gBAAkB,WACxC,OAAO7zB,MAAMqqB,KAAKxqB,KAAK26C,aAAapqC,SACxC,EAOCunI,GAAgB12I,UAAUm5I,6BAA+B,WACtD,IAAI5/F,EAAe36C,KAAKg0B,kBAAkB/b,QAAOoW,IAAgBA,EAAYmH,UAI7E,OAFAmlB,EAAeA,EAAa1iC,QAAOoW,IAAW,IAAAkyH,EAAA,QAAKlyH,SAAwB,QAAbkyH,EAAXlyH,EAAaqH,mBAAW,IAAA6qH,GAAxBA,EAA0BC,gBAAgB,IAEtF7lG,CACX,EASAm9F,GAAgB12I,UAAUonF,oBAAsB,WAA8B,IAArBi4D,EAAWh9I,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GAC5Dk3C,EAAe36C,KAAKg0B,kBAOxB,OALKysH,IACD9lG,EAAeA,EAAa1iC,QAAOic,IAAMA,EAAEoD,cAIxCqjB,EAAaj3C,OAAS,CACjC,EAOAo0I,GAAgB12I,UAAUktB,mBAAqB,SAASzI,GACpD,OAAO7lB,KAAK26C,aAAah2B,IAAIkB,EACjC,EAMAiyH,GAAgB12I,UAAUs/I,WAAa,SAAS76H,GAC5C,MAAMwI,EAAcruB,KAAKsuB,mBAAmBzI,GAEvCwI,GAGLruB,KAAK4tB,KAAK68B,eAAep8B,EAAYoI,mBAAoB,QAC7D,EAOAqhH,GAAgB12I,UAAUu/I,YAAc,SAAS96H,GAC7C,MAAMwI,EAAcruB,KAAKsuB,mBAAmBzI,GACtC+6H,EAAW5gJ,KAAK4xB,aAAe/L,EAC/B6K,EAAO1wB,KAAK6gJ,gBAAkB,SAAW,OAE3CD,EACA5gJ,KAAK4tB,KAAK68B,eAAezqD,KAAKirC,WAAW9W,SAAUzD,GAC5CrC,GACPruB,KAAK4tB,KAAK68B,eAAep8B,EAAYoI,mBAAoB/F,EAEjE,EAOAonH,GAAgB12I,UAAU0/I,gBAAkB,SAASj7H,EAAInR,GACrD,MAAM2Z,EAAcruB,KAAKsuB,mBAAmBzI,GAEvCwI,GAGLruB,KAAK4tB,KAAKkvB,KAAKzuB,EAAY8F,SAAUzf,EACzC,EAOAojI,GAAgB12I,UAAUi8I,qBAAuB,WACzCr9I,KAAK+gJ,0BACG/gJ,KAAKutB,kBAAoBvtB,KAAKwoF,sBAAwB,KAC9D1/E,OAAOuwB,aAAar5B,KAAK+gJ,yBACzB/gJ,KAAK+gJ,wBAA0B,KAEvC,EAOAjJ,GAAgB12I,UAAUy7I,mBAAqB,YAEtC78I,KAAKutB,kBACCvtB,KAAKwoF,uBAAyB,IAC7BxoF,KAAK+gJ,0BACb/gJ,KAAK+gJ,wBAA0Bj4I,OAAO2wB,YAAW,KAC7Cz5B,KAAK+gJ,wBAA0B,KAC/Bl5H,GAAWmF,cAAcrpB,GACrB3B,GACA,CACIsjB,KAAK,EACL3d,MAvrDM,MAwrDP,GAxrDO,KA2rD1B,EAMAmwI,GAAgB12I,UAAU0rD,gBAAkB,SAASjnC,EAAI/hB,GACrD,MAAMk9I,EAAgBl9I,GAAwBuY,GAAUkL,MAExD,GAAIy5H,IAAkB3kI,GAAUkL,OAASy5H,IAAkB3kI,GAAUwK,MAGjE,YAFApd,GAAO7J,MAAO,2BAA0BohJ,KAK5C,MAAM3yH,EAAcruB,KAAKsuB,mBAAmBzI,GAEvCwI,GAGLruB,KAAK4tB,KAAKk/B,gBAAgBz+B,EAAY8F,UAAU,EAAM6sH,EAC1D,EAuBAlJ,GAAgB12I,UAAUkvB,eAAiB,SACnCb,EAAK8B,EAAMb,EAAM4G,EAAUzC,EAASpgB,EAAQqgB,EAAUwnB,EAAS2kG,EAAS7yH,EAAUu5B,GAAsB,IAAAu5F,EAAAC,EAAAC,EAAAC,EAC5G,MAAMx7H,EAAK0I,GAAAA,QAAAA,mBAA2BkB,GAEtC,GAAW,UAAP5J,GAAkB7lB,KAAK4xB,aAAe/L,EACtC,OAEJ,MAAMwI,EAAc,IAAIqG,GAAiBjF,EAAKzvB,KAAMuxB,EAAM+F,EAAUzC,EAASpgB,EAAQqgB,GAErFzG,EAAYyJ,iBAAiBmpH,GAC7B5yH,EAAYiK,QAAQ5H,GACpBrC,EAAYuJ,WAAW0kB,GACvBjuB,EAAYG,YAAYJ,GACxBC,EAAY8J,eAAewvB,GAG3B,MAAM60D,EAAex8G,KAAKkzG,cACqC,QADxBguC,EACZ,QADYC,EACjCnhJ,KAAKstB,wBAAgB,IAAA6zH,OAAA,EAArBA,EAAuBnwI,eAAeskE,gBAAgBzvD,UAAG,IAAAq7H,EAAAA,EAAI,GACJ,QADME,EAC1C,QAD0CC,EAC/DrhJ,KAAKutB,wBAAgB,IAAA8zH,OAAA,EAArBA,EAAuBrwI,eAAeskE,gBAAgBzvD,UAAG,IAAAu7H,EAAAA,EAAI,GAEnE,IAAK,MAAM/+H,KAASm6F,EAChBnuF,EAAYiH,QAAQhmB,KAAK+S,GAG7BriB,KAAK26C,aAAa70B,IAAID,EAAIwI,GAC1BruB,KAAKya,aAAapR,KACdhQ,GACAwsB,EACAwI,GAEJruB,KAAKshJ,gBAAgBjzH,GAGjBruB,KAAK88I,YACL98I,KAAKuhJ,uBAGTvhJ,KAAK68I,oBACT,EAWA/E,GAAgB12I,UAAU+tB,aAAe,WACrCnvB,KAAKuhJ,sBACT,EAQAzJ,GAAgB12I,UAAUkgJ,gBAAkB,SAASjzH,GACjDA,EAAYuI,cACP7W,MAAKqO,IACFC,EAAYgH,cAAgBjH,EAASrD,IAAI,0BACzC/qB,KAAKwhJ,oBAEDpzH,EAASrD,IAAI00D,KACbpxD,EAAY2B,YAAY,mBAAmB,GAG3C5B,EAASrD,IAAIwU,KACblR,EAAY2B,YAAY,iBAAiB,EAC7C,IAEH9P,OAAM,KAAM,GACrB,EAQA43H,GAAgB12I,UAAUmvB,wBAA0B,SAASd,EAAK6sB,GAI9D,MACMmlG,EADQzhJ,KAAKg0B,kBACUC,MAAKC,GAAKA,EAAEC,WAAa1E,IAEtD,GAAIgyH,EAAgB,CAChBA,EAAe7pH,WAAW0kB,GAC1B,MAAMz2B,EAAK0I,GAAAA,QAAAA,mBAA2BkB,GAEtCzvB,KAAKya,aAAapR,KACdhQ,GACAwsB,EACAy2B,EACR,CAMKmlG,EAAenrH,cAChBt2B,KAAKuhJ,sBAEb,EAEAzJ,GAAgB12I,UAAUovB,aAAe,SAASf,EAAK/a,GACnD,MAAMmR,EAAK0I,GAAAA,QAAAA,mBAA2BkB,GAEtC,GAAW,UAAP5J,GAAkB7lB,KAAK4xB,aAAe/L,EACtC,OAGJ,MAAM67H,EAAgB1hJ,KAAK4yB,mBAC3B,IAAI+uH,EAAoB,GAExB,IAAK,MAAMt0H,KAAWq0H,EAAe,CACjC,MAAMllC,EAAenvF,EAAQrc,eAAeskE,gBAAgBzvD,GAE5D22F,IAAiBmlC,EAAoB,IAAKA,KAAsBnlC,IAGhEnvF,EAAQ88C,gBAAgBk/B,wBAAwBxjF,GAC3CrD,GAAAA,4BAED6K,EAAQypD,2BAA2BjxD,EAE3C,CAEA87H,EAAkBvzI,SAAQiU,IAClBG,GAAAA,4BACAH,EAAMk0D,cAAc,MACpBl0D,EAAMm0D,SAAS,OAGfx2E,KAAKya,aAAapR,KAAKhQ,GAAqCgpB,EAChE,IAGJ,MAAMgM,EAAcruB,KAAK26C,aAAah2B,IAAIkB,GAEtCwI,IACAruB,KAAK26C,aAAazkC,OAAO2P,GACzB7lB,KAAKya,aAAapR,KAAKhQ,GAAiCwsB,EAAIwI,EAAa3Z,IAG3D,OAAd1U,KAAK4tB,OACL5tB,KAAKuhJ,sBAAqB,GAC1BvhJ,KAAKq9I,uBAEb,EAgBAvF,GAAgB12I,UAAU+uB,eAAiB,SACnCwsB,EACAqiG,EACA4C,EACAltI,EACAizC,GAIJ,GAAIq3F,IAAYh/I,KAAK4xB,WACjB,OAGJ,MAAMmC,EAAmB/zB,KAAK26C,aAAah2B,IAAIq6H,GAE/C,GAAIriG,EAMA,OALA38C,KAAKya,aAAapR,KACdhQ,GAA8B06B,EAAkBrf,EAAQizC,QAE5D3nD,KAAKsvB,QAAQylE,SAAQ,IAAM/0F,KAAK8nB,KAAKnO,eAKzC,MAAMkoI,EAAoB7hJ,KAAK26C,aAAah2B,IAAIi9H,GAEhDC,EAAkB5pH,cAAc0vB,GAEhC3nD,KAAKya,aAAapR,KACdhQ,GAA0C06B,EAAkB8tH,EAAmBntI,EACvF,EAMAojI,GAAgB12I,UAAUuvB,mBAAqB,SAASD,GAEpD1wB,KAAKya,aAAapR,KACdhQ,GAAyC2G,KAAK4xB,WAAYlB,EAClE,EAEAonH,GAAgB12I,UAAU4vB,kBAAoB,SAASvB,EAAKiB,GACxD,MAAM7K,EAAK0I,GAAAA,QAAAA,mBAA2BkB,GAChCpB,EAAcruB,KAAKsuB,mBAAmBzI,GAEvCwI,IAGLA,EAAYiK,QAAQ5H,GACpB1wB,KAAKya,aAAapR,KAAKhQ,GAAyCwsB,EAAI6K,GACxE,EAEAonH,GAAgB12I,UAAUqvB,qBAAuB,SAAShB,EAAKkF,GAC3D,MAAM9O,EAAK0I,GAAAA,QAAAA,mBAA2BkB,GAChCpB,EAAcruB,KAAKsuB,mBAAmBzI,GAEvCwI,GAIDA,EAAY+G,eAAiBT,IAIjCtG,EAAY+G,aAAeT,EAC3B30B,KAAKya,aAAapR,KACdhQ,GACAwsB,EACA8O,GACR,EAOAmjH,GAAgB12I,UAAU+wB,mBAAqB,SAAS9P,GACpD,GAAIA,EAAMpN,QAAUjV,KAAKkzG,cAGrB,YAFAzpG,GAAOE,KAAK,6DAGT,IAAK0Y,EAAMpN,OAASjV,KAAKkzG,cAG5B,YAFAzpG,GAAOE,KAAK,yDAKhB,MAAMkc,EAAKxD,EAAMU,mBACXsL,EAAcruB,KAAKsuB,mBAAmBzI,GAGxCwI,EACAA,EAAYiH,QAAQhmB,KAAK+S,GAEzB5Y,GAAOE,KAAM,iDAAgDkc,KAG7D7lB,KAAKoxI,aACLpxI,KAAKoxI,YAAYr/D,SAAS1vD,GAG9B,MAAM9H,EAAUva,KAAKya,aAErB4H,EAAM5W,iBACFpN,IACA,IAAMkc,EAAQlR,KAAKhQ,GAA0CgpB,KACjEA,EAAME,gBAAkBF,EAAM5W,iBAC1BpN,IACA,CAACgZ,EAAYzC,KACS5U,KAAKuuH,4BAEL35G,GACd2F,EAAQlR,KAAKhQ,GAAiDwsB,EAAIxO,EACtE,IAIRkD,EAAQlR,KAAKhQ,GAAmCgpB,EACpD,EASAy1H,GAAgB12I,UAAUkyB,eAAiB,SAASjG,EAASirD,GACrDt4E,KAAKstB,mBAAqBD,IAC1B5jB,GAAOE,KAAK,iBAEZ3J,KAAKstB,iBAAiBglD,UAAUgG,GAChCt4E,KAAKya,aAAapR,KAAKhQ,GAA8C2G,KAAKstB,kBAElF,EAUAwqH,GAAgB12I,UAAUmyB,gBAAkB,SAASlG,EAASy0H,GACtD9hJ,KAAKstB,mBAAqBD,IAC1B5jB,GAAOE,KAAK,wBACZ3J,KAAKstB,iBAAiBk9C,iBAAiBs3E,GAE/C,EAQAhK,GAAgB12I,UAAUgxB,qBAAuB,SAAS2vH,GACtD/hJ,KAAKg0B,kBAAkB5lB,SAAQigB,IAC3B,MAAM4kD,EAAS5kD,EAAY4H,YAE3B,IAAK,IAAIlwB,EAAI,EAAGA,EAAIktE,EAAOvvE,OAAQqC,IAC/B,GAAIktE,EAAOltE,KAAOg8I,EAAc,CAG5B1zH,EAAYiH,QAAQ/lB,OAAOxJ,EAAG,GAE9B/F,KAAKya,aAAapR,KAAKhQ,GAAqC0oJ,GAExD/hJ,KAAKoxI,aACLpxI,KAAKoxI,YAAYjiD,YAAY4yD,GAGjC,KACJ,CACJ,GACD/hJ,KACP,EAKA83I,GAAgB12I,UAAU4gJ,mBAAqB,SAAS/zH,EAAeyjD,GACnE,IAAIuwE,EACJ,MAAMn0E,EAAkB7/D,GAAQf,sBAC1Bg1I,EAAcxwE,EAAYz9C,KAAK,YAAYysB,KAAK,QAIlDotB,KAHwC,MAAhBo0E,GAAuC,MAAhBA,GAI/CD,EAAe,CACXvtI,OAAQ,UACRsgE,kBAAmB,eACnB9yB,SAAU,gEAELliD,KAAK+8I,iBAAmB/8I,KAAKg9I,wBAClC/uI,GAAQtH,cAAgB3G,KAAKw6I,mBACjCyH,EAAe,CACXvtI,OAAQ,UACRsgE,kBAAmB,eACnB9yB,SAAU,iEAEPliD,KAAKstB,iBAEZ20H,EAAe,CACXvtI,OAAQ,OACRsgE,kBAAmB,0BACnB9yB,SAAU,qCAENliD,KAAKmiJ,uBACbF,EAAe,CACXvtI,OAAQ,UACRsgE,kBAAmB,2BACnB9yB,SAAU,kEAEdr6B,GAAWmF,cAAcrpB,GAAkBvB,MAG3C6/I,EACAjiJ,KAAKoiJ,oBAAoBn0H,EAAeg0H,GAExCjiJ,KAAKqiJ,uBAAuBp0H,EAAeyjD,EAEnD,EAKAomE,GAAgB12I,UAAUiyB,eAAiB,SAASpF,EAAeyjD,EAAa31D,GAE5E,GAAIkS,EAAchZ,MACdjV,KAAKgiJ,mBAAmB/zH,EAAeyjD,OACpC,CACH,IAAK1xE,KAAK6nD,QAAQ55B,EAAcyjB,WAAY,CACxC,MAAMyc,EAAc,6CASpB,YAPAnuD,KAAKoiJ,oBACDn0H,EAAe,CACXvZ,OAAQ,iBACRsgE,kBAAmB7mB,EACnBjM,SAAUiM,GAItB,CACAnuD,KAAKsiJ,uBAAuBr0H,EAAeyjD,EAAa31D,EAC5D,CACJ,EAKA+7H,GAAgB12I,UAAUkhJ,uBAAyB,SAASr0H,EAAeyjD,EAAa31D,GAGpF/b,KAAKutB,iBAAmBU,EACxBjuB,KAAK4tB,KAAKyB,gBAAgB,oBAAsBtT,EAChD/b,KAAKw7I,oCAEDx7I,KAAKs4I,YACLzwH,GAAWiF,oBAAoBnpB,GAAkB9B,GAAuB,CAAEyjB,KAAK,KAGnF,MAAM0oG,EACAtjF,KAAEgnC,GACCz9C,KAAK,4DACLysB,KAAK,UAEd1gD,KAAKya,aAAapR,KAAKhQ,GAA6C20H,GAEpEhuH,KAAKq9I,uBACLx1H,GAAWmF,cAAcrpB,GACrB5B,GACA,CACIujB,KAAK,EACL3d,MAAOoU,KAGf,IACIkS,EAAcna,WACV9T,KAAK4tB,KACL5tB,KAAKkuB,IACLluB,KAAKmqE,gBACL,IACOnqE,KAAKH,QAAQ8zB,OAChB+5C,cAAe,CACX5pE,UAAWuY,GAAUwK,MACrBwsD,UAAWrzE,KAAKi7I,eAAe71D,kBAC/B9R,SAAUtzE,KAAKi7I,eAAe/1D,kBAElCvX,wBAAyB3tE,KAAKglC,iBAAmBxiB,GAAAA,0BAE7D,CAAE,MAAO5iB,GAIL,OAHA4S,KAAAA,iBAAsC5S,QACtC6J,GAAO7J,MAAMA,EAGjB,CAGAI,KAAK0uB,kBAAkBgjD,EAAazjD,EAAcjd,gBAElD,MAAM4rB,EAAc58B,KAAKi/I,yBAEzB,IACIhxH,EAAc68C,YACV4G,GACA,KAIQ1xE,KAAKkzG,eAAiBlzG,KAAKutB,kBAC3BvtB,KAAK6/I,wCAGT7/I,KAAKya,aAAapR,KAAKhQ,GAA8C40B,GAChEjuB,KAAKkzG,eACNlzG,KAAKya,aAAapR,KAAKhQ,GAAqD40B,EAChF,IAEJruB,IACI4S,KAAAA,iBAAsC5S,GACtC6J,GAAO7J,MAAM,2CAA4CA,EAAM,GAEnEg9B,GAIJ58B,KAAK09I,0BACEzvH,EAAcjd,eAAeshD,2BAA2BtyD,KAAK09I,0BAMpEj0I,GAAOE,KAAK,4CACZ3J,KAAKsrB,WAAWR,eACZ9qB,KAAKutB,iBAAiBvc,eACtB,SACJhR,KAAKsrB,WAAWxC,iBAAiB9oB,KAAKutB,iBAAiBvc,eAC3D,CAAE,MAAOxB,GACLgD,KAAAA,iBAAsChD,GACtC/F,GAAO7J,MAAM4P,EACjB,CACJ,EAWAsoI,GAAgB12I,UAAUstB,kBAAoB,SAASD,EAASnd,GAAI,IAAAixI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAChE,MAAMC,EAA8B,QAAlBP,EAAGviJ,KAAKirC,kBAAU,IAAAs3G,GAAS,QAATC,EAAfD,EAAiB1iJ,eAAO,IAAA2iJ,GAAe,QAAfC,EAAxBD,EAA0BO,qBAAa,IAAAN,OAAxB,EAAfA,EAAyCK,aACxDE,EAAgE,QAAtDN,EAAkB,QAAlBC,EAAG3iJ,KAAKirC,kBAAU,IAAA03G,GAAS,QAATC,EAAfD,EAAiB9iJ,eAAO,IAAA+iJ,GAAe,QAAfC,EAAxBD,EAA0BG,qBAAa,IAAAF,OAAxB,EAAfA,EAAyCG,kBAAU,IAAAN,GAAAA,EAChEO,EACkB,IADJv4G,KAAEjc,GAASwF,KAAK,yBAC/BivH,QAAQx/I,OACb,IAAIuiF,EAAQ,KAIZ,GAFAx8E,GAAOE,KAAM,iBAAgBs5I,eAAyBD,OAEhDC,GAAeD,IACjBt4G,KAAEjc,GAASwF,KAAK,iCACXuwC,UACA9mC,KAAIluB,GAAKA,EAAEs7B,aAAa,SACxB18B,SAAQ2gC,IACAk3C,GAAW68D,GAAgBA,IAAiB,IAAIpoH,IAAIqU,GAAKg0C,SAGlDkD,GACRx8E,GAAOE,KAAM,uCAAsCm5I,MAHnD78D,EAAQl3C,EACRtlC,GAAOE,KAAM,wBAAuBolC,KAGxC,IAGHk3C,IAAO,CACR,MAAMk9D,EAAaz4G,KAAEjc,GAASwF,KAAK,iCAC9BivH,QAEqB,IAAtBC,EAAWz/I,SACXuiF,EAAQk9D,EAAW,GAAGr4G,aAAa,OACnCrhC,GAAOE,KAAM,mBAAkBs8E,KAEvC,EAGAA,GAAWg9D,GAAeD,EAGnBC,EAEPjjJ,KAAKkuB,IAAI88F,wBAAwB15G,EAAI,MAErC7H,GAAON,KAAK,kFALZnJ,KAAKkuB,IAAI88F,wBAAwB,KAAM/kC,EAO/C,EAcA6xD,GAAgB12I,UAAUghJ,oBAAsB,SAASn0H,EAAepuB,GAChEA,SAAAA,EAASqiD,UACTz4C,GAAON,KAAKtJ,EAAQqiD,UAIxBj0B,EAAc28C,UACV,MACAhrE,IACI6J,GAAON,KACH,qEACiCvJ,EAAM,GAC5C,CACC8U,OAAQ7U,GAAWA,EAAQ6U,OAC3BsgE,kBAAmBn1E,GAAWA,EAAQm1E,kBACtCF,sBAAsB,GAElC,EAYAgjE,GAAgB12I,UAAUoyB,YAAc,SAASvF,EAAemnD,EAAiBC,GAI7E,GAHA5rE,GAAOE,KACF,eAAcyrE,OAAqBC,UAChCpnD,EAAchZ,SAClBgZ,IAAkBjuB,KAAKutB,iBACvBvtB,KAAKs4I,YAAa,EAElBzwH,GAAWmF,cACPrpB,GAAkB1B,GAAyB,CAAEqjB,KAAK,KAGlDtlB,KAAKsrB,aACLtrB,KAAKsrB,WAAWvC,gBACZ/oB,KAAKutB,iBAAiBvc,gBAC1BvH,GAAOE,KAAK,0BACZ3J,KAAKsrB,WAAWZ,cACZ1qB,KAAKutB,iBAAiBvc,iBAI9BhR,KAAKutB,iBAAmB,KAGxBvtB,KAAKkuB,IAAIsF,mBACN,GAAIvF,IAAkBjuB,KAAKstB,iBAAkB,CAChD,MAAM81H,EAAc,CAAC,EAIG,YAApBhuE,GAAgD,iBAAfC,GACjC5rE,GAAOE,KAAK,6BACZke,GAAWe,UAAU5a,uBAAuB,CAAEq1I,aAAa,KAChC,uBAApBjuE,GACW,eAAfC,EAIHxtD,GAAWe,UAAU5a,uBAAuB,CAAEs1I,WAAW,IAC9B,YAApBluE,GAAgD,YAAfC,IAGxC+tE,EAAYluE,gBAAiB,GAEjCl1E,KAAKujJ,gBAAgBH,EACzB,MACI35I,GAAO7J,MACH,2CACAquB,EAAc0mB,IACd1mB,EAAcyjB,UACd0jC,EACAC,EAEZ,EAMAyiE,GAAgB12I,UAAUivB,kBAAoB,SAASpC,GAC9CA,EAAchZ,QACfjV,KAAKsvB,QACLtvB,KAAKya,aAAapR,KAAKhQ,IAE/B,EAEAy+I,GAAgB12I,UAAUogJ,kBAAoB,WAC1C,IAAInJ,GAAuB,EAC3B,MAAM19F,EAAe36C,KAAKg0B,kBAG1B,IAAK,IAAIjuB,EAAI,EAAGA,EAAI40C,EAAaj3C,OAAQqC,GAAK,EAC1C,GAAI40C,EAAa50C,GAAGyyB,eAAgB,CAChC6/G,GAAuB,EACvB,KACJ,CAEAA,IAAyBr4I,KAAKq4I,uBAC9Br4I,KAAKq4I,qBAAuBA,EAC5Br4I,KAAKya,aAAapR,KACdhQ,GACAg/I,GAEZ,EAOAP,GAAgB12I,UAAUoiJ,gBAAkB,WACxC,OAAOxjJ,KAAKq4I,oBAChB,EAMAP,GAAgB12I,UAAUwwB,SAAW,WACjC,OACI5xB,KAAK4tB,MAAQ5tB,KAAK4tB,KAAKusB,UACjB5rB,GAAAA,QAAAA,mBAA2BvuB,KAAK4tB,KAAKusB,WACrC,IACd,EAEA29F,GAAgB12I,UAAUwmH,UAAY,SAASC,EAAOpsG,EAAUmrD,GAC5D,MAAM68E,EAAiBzjJ,KAAKuuH,0BAExBk1B,EACAA,EAAe77B,UAAUC,EAAOpsG,EAAUmrD,GAE1Cn9D,GAAON,KAAK,uCAEpB,EASA2uI,GAAgB12I,UAAUs+H,eAAiB,SAAS7/H,GAChD,OAAIG,KAAK4tB,KACE5tB,KAAK+4I,iBAAiBrZ,eAAe7/H,GAGzCwU,QAAQE,OAAO,IAAIrT,MAAM,sCACpC,EASA42I,GAAgB12I,UAAU4+H,cAAgB,SAAS0E,GAC/C,OAAI1kI,KAAK4tB,KACE5tB,KAAK+4I,iBAAiB/Y,cAAc0E,GAGxCrwH,QAAQE,OAAO,IAAIrT,MAAM,sCACpC,EAKA42I,GAAgB12I,UAAUsiJ,sBAAwB,WAAW,IAAAC,EAAAC,EAAAC,EACzD,OAAkD,QAAlDF,EAAgB,QAAhBC,EAAO5jJ,KAAK4tB,YAAI,IAAAg2H,GAAW,QAAXC,EAATD,EAAW/+F,iBAAS,IAAAg/F,OAAX,EAATA,EAAsB7jG,6BAAqB,IAAA2jG,GAAAA,CACtD,EAMA7L,GAAgB12I,UAAUirD,KAAO,SAAS70C,GACtC,OAAIxX,KAAK4tB,KACE5tB,KAAK4tB,KAAKy+B,KAAK70C,GAGnB,IAAInD,SAAQ,CAACC,EAASC,KACzBA,EAAO,IAAIrT,MAAM,sCAAsC,GAE/D,EAKA42I,GAAgB12I,UAAUmrD,OAAS,WAC/B,OAAIvsD,KAAK4tB,KACE5tB,KAAK4tB,KAAK2+B,SAGd,IAAIl4C,SAAQ,CAACC,EAASC,KACzBA,EAAO,IAAIrT,MAAM,sCAAsC,GAE/D,EAKA42I,GAAgB12I,UAAU0iJ,iBAAmB,WACzC,OAAO9jJ,KAAKqsD,KAAK,wBACrB,EAMAyrF,GAAgB12I,UAAU2iJ,gBAAkBjM,GAAgB12I,UAAUmrD,OAKtEurF,GAAgB12I,UAAUurD,eAAiB,WACvC,OAAI3sD,KAAK4tB,KACE5tB,KAAK4tB,KAAK++B,iBAGd,IACX,EAKAmrF,GAAgB12I,UAAUwrD,YAAc,WACpC,OAAI5sD,KAAK4tB,KACE5tB,KAAK4tB,KAAKg/B,cAGd,IACX,EAOAkrF,GAAgB12I,UAAU4iJ,mBAAqB,WAC3C,GAAIhkJ,KAAK4tB,KACL,OAAO5tB,KAAK4tB,KAAKi/B,cAEzB,EAUAirF,GAAgB12I,UAAUmtH,wBAA0B,WAChD,MAAMlhG,EAAUrtB,KAAKkzG,cAAgBlzG,KAAKstB,iBAAmBttB,KAAKutB,iBAElE,OAAOF,EAAUA,EAAQrc,eAAiB,IAC9C,EAUA8mI,GAAgB12I,UAAU46E,mBAAqB,WAC3C,MAAMynE,EAAiBzjJ,KAAKuuH,0BAE5B,OAAOk1B,EAAiBA,EAAeznE,qBAAuB,IAClE,EAQA87D,GAAgB12I,UAAU6iJ,oBAAsB,SAASC,GAChDlkJ,KAAK4wB,cAUV5wB,KAAK4tB,KAAKse,uBAAuB,aAAc,CAC3ChpC,WAAY,CACRme,MAAO6iI,EAAO7iI,MACd1gB,MAAOujJ,EAAOvjJ,MACd6rC,MAAO,2CAETxsC,KAAK4tB,KAAKke,eAfZriC,GAAON,KAAM,qCAAoCnJ,KAAK4tB,KAAO,GAAK,oBAC9D5tB,KAAK4wB,cAAgB,GAAK,mCAetC,EAMAknH,GAAgB12I,UAAU+iJ,oBAAsB,WAC5C,OAAOnkJ,KAAKgyB,gBAChB,EAKA8lH,GAAgB12I,UAAU+9I,kBAAoB,WAC1C,OAAOn/I,KAAK6xB,eAChB,EAKAimH,GAAgB12I,UAAUg+I,kBAAoB,WAC1C,OAAOp/I,KAAK8xB,eAChB,EAKAgmH,GAAgB12I,UAAUo2G,mBAAqB,WAC3C,OAAOx3G,KAAK4tB,KAAKyB,eACrB,EAKAyoH,GAAgB12I,UAAUo7B,4BAA8B,SAASz8B,EAAM4H,GACnE3H,KAAK6/H,YAAa,qBAAoB9/H,IAAQ,CAAE4H,SACpD,EAKAmwI,GAAgB12I,UAAUgjJ,+BAAiC,SAASrkJ,GAChEC,KAAK4/H,cAAe,qBAAoB7/H,KACxCC,KAAK4tB,KAAKke,cACd,EAQAgsG,GAAgB12I,UAAUijJ,4BAA8B,SAAStkJ,GAC7D,MAAMukJ,EAAWtkJ,KAAK4tB,KAAK22B,QAAQjB,MAAMrvB,MAAKsuB,GAC1CA,EAAKtyB,UAAa,qBAAoBlwB,MAG1C,OAAOukJ,EAAWA,EAAS38I,WAAQrH,CACvC,EAUAw3I,GAAgB12I,UAAUsrB,aAAe,SAAS63H,EAAiBC,GAC/D,OAAOxkJ,KAAKsrB,WAAWoB,aAAa63H,EAAiBC,EACzD,EASA1M,GAAgB12I,UAAUmqB,mBAAqB,WAC3C,OAAOvrB,KAAKsrB,WAAWC,oBAC3B,EAQAusH,GAAgB12I,UAAUqjJ,eAAiB,SAASpiI,GAAO,IAAAqiI,EACvD,OAAOriI,EAAMzM,UAA0C,QAAjC8uI,EAAG1kJ,KAAKuuH,iCAAyB,IAAAm2B,OAAA,EAA9BA,EAAgCp9H,aAAajF,GAASA,EAAMi1F,SACzF,EAQAwgC,GAAgB12I,UAAUk/F,eAAiB,SAASj+E,EAAO+9E,GACvD,MAAMxqF,EAAUyM,EAAMzM,UACtB,IAAIjE,EAAO,KACX,MAAMsD,EAAQoN,EAAMpN,MACd0vI,EAAe1vI,EAAQoN,EAAMU,mBAAqB,QAClD0gI,EACAxuI,EACIjV,KAAKstB,kBAAoBttB,KAAKstB,iBAAiBtc,eAC/ChR,KAAKutB,kBAAoBvtB,KAAKutB,iBAAiBvc,eAErD4E,EAEI6tI,IACA9xI,EAAO8xI,EAAen8H,aAAajF,IAGvC1Q,EAAO0Q,EAAMi1F,UAEZlX,EAAUv6E,IAAOlU,GAAS8xI,GAI/BzjJ,KAAKsrB,WAAW3V,4BACZ8tI,EACA9xI,EACAiE,EACA+uI,EACAtiI,EAAM6+E,gBACNd,EAAUv6E,GAClB,EASAiyH,GAAgB12I,UAAUqrB,mBAAqB,SAASlsB,GACpDsnB,GAAWuE,QAAQ7rB,EACvB,EASAu3I,GAAgB12I,UAAUymD,QAAU,SAAS0D,GACzC,OAAOvrD,KAAK4tB,KAAO5tB,KAAK4tB,KAAKi6B,QAAQ0D,GAAU,IACnD,EAKAusF,GAAgB12I,UAAUwjJ,+BAAiC,WACvD5kJ,KAAKya,aAAapR,KAAKhQ,EACnBtB,EACR,EAUA+/I,GAAgB12I,UAAUyjJ,oBAAsB,SAAStzG,EAAI7f,GACzD1xB,KAAKkuB,IAAIm+F,mBAAmB96E,EAAI7f,EACpC,EAOAomH,GAAgB12I,UAAUomF,yBAA2B,SAAS91D,GAC1D1xB,KAAKkuB,IAAIs5D,yBAAyB91D,EACtC,EAQAomH,GAAgB12I,UAAU0jJ,yBAA2B,SAASpzH,GAC1D1xB,KAAK6kJ,oBAAoB,GAAInzH,EACjC,EAgBAomH,GAAgB12I,UAAU6jC,YAAc,SAAS1kC,GAAkD,IAAzCgxC,EAAE9tC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GAAIshJ,EAAsBthJ,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GACrF,MAAMuhJ,SAAqBzkJ,EAK3B,GAAoB,WAAhBykJ,IACQD,GAA0C,WAAhBC,EAMtC,GAAID,EACA/kJ,KAAK6kJ,oBAAoBtzG,EAAIhxC,OAC1B,CACH,IAAI0kJ,EAAgB1kJ,EAIhB2oD,EAAc,OAElB,GAAoB,WAAhB87F,EAA0B,CAC1B97F,EAAc,eAGT+7F,EAAcplI,eAAemgB,MAC9BilH,EAAcjlH,IAAuB,IAGzC,IACIilH,EAAgBt8I,KAAKC,UAAUq8I,EACnC,CAAE,MAAOz1I,GAGL,YAFA/F,GAAO7J,MAAM,6CAA8C4P,EAG/D,CACJ,CAEI+hC,EACAvxC,KAAKq+I,uBAAuB9sG,EAAI0zG,EAAe/7F,GAG/ClpD,KAAKo+I,gBAAgB6G,EAAe/7F,EAE5C,MArCIz/C,GAAO7J,MAAO,kCAAiColJ,IAuCvD,EAEAlN,GAAgB12I,UAAUguH,wBAA0B,WAChD,OAAOpvH,KAAKkzG,cACNlzG,KAAK64I,2BAA6B74I,KAAKovB,0BACjD,EAQA0oH,GAAgB12I,UAAUmuB,uBAAyB,SAASlC,IACnDA,EAAQpY,OAASjV,KAAKH,QAAQ8zB,OAAO8/C,oBACtCzzE,KAAKya,aAAapR,KAAKhQ,EAAyCtB,EAExE,EAOA+/I,GAAgB12I,UAAUg6I,4BAA8B,SAAS/tH,GACzDA,EAAQpY,MACRjV,KAAK64I,4BAA6B,EAElC74I,KAAKovB,4BAA6B,EAElC/B,EAAQpY,QAAUjV,KAAKkzG,eACvBlzG,KAAKya,aAAapR,KAAKhQ,GAE/B,EAOAy+I,GAAgB12I,UAAUouB,uBAAyB,SAASnC,GAGpDA,EAAQpY,OAGR4S,GAAWe,UAAU5a,uBAAuB,CAAEs1I,WAAW,IAErDtjJ,KAAKstB,kBACLzF,GAAWiF,oBACPlpB,GACItB,GACA,CACI+rE,UAAWruE,KAAKstB,iBAAiBwU,eAIjD9hC,KAAKujJ,gBAAgB,CACjB7uI,OAAQ,qBACRsgE,kBAAmB,gBAEhB3nD,GAAWrtB,KAAKutB,mBAAqBF,IAC5CrtB,KAAKo9I,kBAAoB,IAAI/tB,GAAkBrvH,MAC/CA,KAAKo9I,kBAAkB3mI,MAAM4W,GAErC,EAOAyqH,GAAgB12I,UAAUi6I,yBAA2B,SAAShuH,GACtDA,EAAQpY,MACRjV,KAAK64I,4BAA6B,GAElC74I,KAAKovB,4BAA6B,EAClCpvB,KAAKo9I,mBAAqBp9I,KAAKo9I,kBAAkB9tG,UAGjDjiB,EAAQpY,QAAUjV,KAAKkzG,eACvBlzG,KAAKya,aAAapR,KAAKhQ,GAE/B,EAQAy+I,GAAgB12I,UAAUihJ,uBAAyB,SAASp0H,EAAeyjD,GACvE1xE,KAAK64I,4BAA6B,EAGlC74I,KAAKstB,iBAAmBW,EACxBjuB,KAAKw7I,oCAELx7I,KAAKstB,iBAAiBxZ,WAClB9T,KAAK4tB,KACL5tB,KAAKkuB,IACLluB,KAAKmqE,gBACL,IACOnqE,KAAKH,QAAQ8zB,OAChB+5C,cAAe,CACX5pE,UAAWuY,GAAUwK,MACrBwsD,UAAWrzE,KAAKi7I,eAAe91D,kBAC/B7R,SAAUtzE,KAAKi7I,eAAej2D,kBAElCrX,wBAAyB3tE,KAAKglC,iBAAmBxiB,GAAAA,2BAGzD/Y,GAAOE,KAAK,4CAEZ,IAAIu7I,EAAW32H,GAAAA,QAAAA,mBAA2BvuB,KAAKstB,iBAAiBokB,WAEhE,MAAMrjB,EAAcruB,KAAK26C,aAAah2B,IAAIugI,GAEtC72H,IACA62H,EAAW72H,EAAY4I,cAAgBiuH,GAG3CllJ,KAAKsrB,WAAWR,eACZ9qB,KAAKstB,iBAAiBtc,eACtBk0I,GAEJ,MAAMtoH,EAAc58B,KAAKgnB,iBAEzBhnB,KAAKstB,iBAAiBw9C,YAClB4G,GACA,KACIjoE,GAAOgH,MAAM,uCAEbzQ,KAAKya,aAAapR,KACdhQ,GACA40B,EAAc,IAEtBruB,IACI6J,GAAO7J,MACH,+CAAgDA,EAAM,GAE9Dg9B,EACR,EAMAk7G,GAAgB12I,UAAU+jJ,oBAAsB,WAC5CnlJ,KAAKolJ,iBAAiB,MAAOplJ,KAAKutB,iBAAiBvc,eAAeskE,kBACtE,EAMAwiE,GAAgB12I,UAAUikJ,oBAAsB,WAC5CrlJ,KAAKolJ,iBAAiB,MAAOplJ,KAAKstB,iBAAiBtc,eAAeskE,kBACtE,EAQAwiE,GAAgB12I,UAAUgkJ,iBAAmB,SAAS18B,EAASlM,GAC3D,IAAK,MAAMn6F,KAASm6F,GAGZh6F,GAAAA,4BAA2CxiB,KAAK26C,aAAa5vB,IAAI1I,EAAM+zF,oBACvE3sG,GAAOE,KAAM,iBAAgB++G,YAAkBrmG,KAC/CriB,KAAKmyB,mBAAmB9P,GAGpC,EASAy1H,GAAgB12I,UAAUk6I,4BAA8B,SAASrtH,GAC7DjuB,KAAKotI,eAAgB,GAAEptI,KAAKslJ,gBAAkBtlJ,KAAKslJ,eAAevlJ,QAAQC,KAAKH,QAAQorC,WAAWprC,QAAQ0lJ,YAC5E,OAA1BvlJ,KAAKstB,mBAILttB,KAAKwlJ,yBACCxlJ,KAAKstB,iBAAiBm/C,uBAGF,OAA1BzsE,KAAKutB,mBACLvtB,KAAKylJ,yBACCzlJ,KAAKutB,iBAAiBk/C,uBAGhC,IAAIzK,GAAO,EACX,MAAM0jF,EAAmB1lJ,KAAKH,QAAQ8zB,OAAO+xH,iBAsB7C,GAnBKz3H,EAAchZ,MAERjV,KAAKstB,mBAAqBW,GACjCxkB,GAAO7J,MAAM,0DAEboiE,GAAO,IACC/zC,EAAc6T,aACS,iBAArB4jH,GACPnqI,KAAKizB,SAAWk3G,IACnBj8I,GAAOE,KAAM,+BAA8B+7I,SAC3C79H,GAAWe,UAAU5a,uBAAuB,CAAEq1I,aAAa,IAC3DrjJ,KAAKujJ,gBAAgB,CACjB7uI,OAAQ,UACRsgE,kBAAmB,iBAGvBhT,GAAO,GAfPA,GAAO,GAkBNr+C,MAAM3jB,KAAKwlJ,4BACR7hI,MAAM3jB,KAAKylJ,0BAA2B,CAC1C,MAAME,EACA3lJ,KAAKwlJ,yBAA2BxlJ,KAAKylJ,yBAE3C59H,GAAWmF,cACPpqB,GACA,CAAE+E,MAAOg+I,GACjB,CAEI13H,EAAchZ,QAAUjV,KAAKkzG,eAC7BlzG,KAAKya,aAAapR,KAAKhQ,IAGvB2oE,IAMJhiE,KAAK4lJ,eAAc,GAGf5lJ,KAAKutB,iBACLvtB,KAAK6lJ,yBAELp8I,GAAOE,KAAK,mDAGhB3J,KAAKqlJ,sBAGDrlJ,KAAKutB,kBACLvtB,KAAK6/I,wCAGTp2I,GAAOE,KAAK,6CACZ3J,KAAKsrB,WAAWxC,iBAAiB9oB,KAAKstB,iBAAiBtc,gBAEvD6W,GAAWiF,oBACPlpB,GACIvB,GACA,CACIgsE,UAAWruE,KAAKstB,iBAAiBwU,eAGjD,EAUAg2G,GAAgB12I,UAAUm6I,kBAAoB,WAA0B,IAAjB3sI,EAAUnL,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjE,MAAMw+G,GAAW9+E,KAAQv0B,EAAY5O,KAAK4O,YAG1C,GADA5O,KAAK4O,WAAaA,EACdqzG,EAAS,CACTjiH,KAAKya,aAAapR,KAAKhQ,GAA0C2G,KAAK4O,YAEtE,MAAMk3I,EAA+D,SAA3C9lJ,KAAK4O,WAAW,uBACpCm3I,EAA+D,SAA3C/lJ,KAAK4O,WAAW,uBAEtC5O,KAAK85I,2BAA6BgM,IAClC9lJ,KAAK85I,yBAA2BgM,EAChC9lJ,KAAKya,aAAapR,KAAKhQ,EAAwDysJ,GAC/Er8I,GAAOE,KAAM,6CAA4Cm8I,MAGzD9lJ,KAAK+5I,2BAA6BgM,IAClC/lJ,KAAK+5I,yBAA2BgM,EAChC/lJ,KAAKya,aAAapR,KAAKhQ,GAAwD0sJ,GAC/Et8I,GAAOE,KAAM,6CAA4Co8I,MAIvC,CAIlB,gBAGU33I,SAAQ1G,SACMpH,IAApBsO,EAAWlH,IACXmgB,GAAWe,UAAU5a,uBAAuB,CACxC,CAACtG,EAAI0nC,QAAQ,IAAK,MAAOxgC,EAAWlH,IAE5C,GAER,CACJ,EAQAowI,GAAgB12I,UAAU01B,YAAc,SAASpvB,GAC7C,OAAO1H,KAAK4O,WAAWlH,EAC3B,EAMAowI,GAAgB12I,UAAU4kJ,4BAA8B,WAChDhmJ,KAAK04I,uBACLjvI,GAAOE,KAAK,mCACZ0vB,aAAar5B,KAAK04I,sBAClB14I,KAAK04I,qBAAuB,KAEpC,EAOAZ,GAAgB12I,UAAUykJ,uBAAyB,WAC/C7lJ,KAAKimJ,oBACD,MAAOjmJ,KAAKutB,iBAAiBvc,eAAeskE,kBACpD,EAOAwiE,GAAgB12I,UAAU8kJ,uBAAyB,WAC/ClmJ,KAAKimJ,oBACD,MAAOjmJ,KAAKstB,iBAAiBtc,eAAeskE,kBACpD,EASAwiE,GAAgB12I,UAAU6kJ,oBAAsB,SAASE,EAAiB3pC,GACtE,IAAK,MAAMn6F,KAASm6F,EAChB/yG,GAAOE,KAAM,mBAAkBw8I,YAA0B9jI,KACzDriB,KAAKoyB,qBAAqB/P,EAElC,EAMAy1H,GAAgB12I,UAAUglJ,qCAAuC,WAC7D38I,GAAOE,KAAK,sDACZ3J,KAAKutB,iBAAiBurD,wBAAuB,GACxC/4D,MAAK,KACFtW,GAAOE,KAAK,kDAAkD,IAEjEuW,OAAMtgB,IACH6J,GAAO7J,MAAM,2DAA4DA,EAAM,GAE3F,EASAk4I,GAAgB12I,UAAUwkJ,cAAgB,SAASvxC,GAC/C,GAAIr0G,KAAKslB,MAAQ+uF,EAAjB,CAMA,GADAr0G,KAAKslB,IAAM+uF,EACPA,EAAW,CACX5qG,GAAOE,KAAK,wCAIZke,GAAWe,UAAU5a,uBAAuB,CACxCs1I,WAAW,EACXD,aAAa,IAKjB,MAAM/C,EAAoC,IAApBtgJ,KAAK60G,WAE3B70G,KAAKstB,iBAAiB8sD,0BAA0BkmE,GAC3CpgI,OAAMtgB,IACH6J,GAAO7J,MAAO,gDAA+C0gJ,OAAmB1gJ,IAAQ,GAEpG,MACI6J,GAAOE,KAAK,mCAIZ3J,KAAKutB,kBACLvtB,KAAKsrB,WAAWE,gCACZxrB,KAAKutB,iBAAiBvc,gBAAiBqjG,GAI/Cr0G,KAAKo4I,YAAc,KAGnBp4I,KAAKya,aAAapR,KACdhQ,GACA2G,KACAA,KAAKslB,KACTtlB,KAAKya,aAAapR,KAAKhQ,GAAqD2G,KAAKkkI,yBAGjFlkI,KAAKya,aAAapR,KACdrJ,KAAKovH,0BACC/1H,GACAA,GA5CV,MAHIoQ,GAAOgH,MAAO,8CAA6C4jG,IAgDnE,EAOAyjC,GAAgB12I,UAAUilJ,iBAAmB,SAAS30G,GAElD,GADA1xC,KAAKgmJ,8BACDhmJ,KAAKstB,iBAGL,YAFA7jB,GAAO7J,MAAM,gCAKjBI,KAAK64I,4BAA6B,EAClC74I,KAAKstB,iBACCttB,KAAK8nB,KAAKmjB,WAAWijB,OAAOwvB,oBAC1B19E,KAAK4tB,KAAKusB,UACVzI,GACRjoC,GAAOE,KACH,gCAAiC3J,KAAK4tB,KAAKusB,UAAWzI,GAC1D1xC,KAAKw7I,oCAELx7I,KAAKstB,iBAAiBxZ,WAClB9T,KAAK4tB,KACL5tB,KAAKkuB,IACLluB,KAAKmqE,gBACL,IACOnqE,KAAKH,QAAQ8zB,OAChB+5C,cAAe,CACX5pE,UAAWuY,GAAUwK,MACrBwsD,UAAWrzE,KAAKi7I,eAAe91D,kBAC/B7R,SAAUtzE,KAAKi7I,eAAej2D,kBAElCrX,wBAAyB3tE,KAAKglC,iBAAmBxiB,GAAAA,2BAGzD/Y,GAAOE,KAAK,4CAEZ,IAAIu7I,EAAW32H,GAAAA,QAAAA,mBAA2BvuB,KAAKstB,iBAAiBokB,WAEhE,MAAMrjB,EAAcruB,KAAK26C,aAAah2B,IAAIugI,GAEtC72H,IACA62H,EAAW72H,EAAY4I,cAAgBiuH,GAG3CllJ,KAAKsrB,WAAWR,eACZ9qB,KAAKstB,iBAAiBtc,eACtBk0I,GAEJ,MAAMtoH,EAAc58B,KAAKgnB,iBAEzBhnB,KAAKstB,iBAAiB08B,OAAOptB,EACjC,EAMAk7G,GAAgB12I,UAAUy+I,sCAAwC,WAC9Dp2I,GAAOE,KAAK,wDACZ3J,KAAKutB,iBAAiBurD,wBAAuB,GACxC/4D,MAAK,KACFtW,GAAOE,KAAK,qDAAqD,IAEpEuW,OAAMtgB,IACH6J,GAAO7J,MAAM,4DAA6DA,EAAM,GAE5F,EASAk4I,GAAgB12I,UAAUmgJ,qBAAuB,SAAS+E,GACtD,IAAKtmJ,KAAK+8I,gBACC/8I,KAAKg9I,wBACJ/uI,GAAQtH,cAAgB3G,KAAKw6I,oBAC9Bx6I,KAAKglC,gBAGZ,YAFAv7B,GAAOE,KAAK,qBAIhB,MAAM48I,EAAQvmJ,KAAKg0B,kBACbs3G,EAAYib,EAAM7iJ,OAGlB8iJ,EAAgBxmJ,KAAKmiJ,qBAQ3B,IALKqE,GAAiBxmJ,KAAK04I,sBACvB14I,KAAKgmJ,+BAIJhmJ,KAAKstB,kBAAoBk5H,EAAe,CACzC,MAAMrxI,EAAOm2H,GAAaib,EAAM,GAG1BnnH,EAAOp/B,KAAK4xB,WACZ60H,EAAUtxI,EAAK0hB,QAErB,GAAIuI,EAAOqnH,EAKP,YAJAh9I,GAAOgH,MACH,2DACqC2uB,EAAMqnH,GAG5C,GAAIrnH,IAASqnH,EAGhB,YAFAh9I,GAAO7J,MAAM,kBAAmBw/B,EAAMqnH,GAK1C,MAAMh3H,EAAMta,EAAKgf,SAEjB,GAAImyH,EAAe,CACf,GAAItmJ,KAAK04I,qBAGL,YAFAjvI,GAAO7J,MAAM,+CAIjB6J,GAAOE,KACF,wBAAuB8lB,WACpBzvB,KAAK44I,6BACb54I,KAAK04I,qBAAuBj/G,WACxBz5B,KAAKqmJ,iBAAiBj2H,KAAKpwB,KAAMyvB,GACX,IAAtBzvB,KAAK44I,eACb,MACInvI,GAAOE,KAAM,wBAAuB8lB,KACpCzvB,KAAKqmJ,iBAAiB52H,EAE9B,MAAWzvB,KAAKstB,mBAAqBk5H,IACjC/8I,GAAOE,KAAM,uBAAsB3J,KAAKstB,iBAAiBokB,aAGrD1xC,KAAKstB,iBAAiBwU,aAAewpG,EAAY,GACjDzjH,GAAWiF,oBACPlpB,GAAerB,KAEvBvC,KAAKujJ,kBAEb,EAQAzL,GAAgB12I,UAAU+gJ,mBAAqB,WAC3C,MAAMoE,EAAQvmJ,KAAKg0B,kBACbs3G,EAAYib,EAAM7iJ,OAClBgjJ,OAAmGpmJ,IAAtFimJ,EAAMtyH,MAAKC,GAAwB,gBAAnBA,EAAEoC,cAAkCpC,EAAEiD,WAAWsoD,MAC9E+mE,EAA8B,IAAdlb,IAAoBob,EAI1C,OAFAj9I,GAAOgH,MAAO,mBAAkB66H,kBAA0Bob,QAAiBF,KAEpEA,CACX,EAaA1O,GAAgB12I,UAAUmiJ,gBAAkB,WAAuB,IAAd1jJ,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5D,MAAM,OACFiR,EAAS,UAAS,kBAClBsgE,EAAoB,0BAAyB,eAC7CE,GAAiB,GACjBr1E,EAEJ,IAAKG,KAAKstB,iBAGN,YAFA7jB,GAAO7J,MAAM,iCAKjB,MAAM+mJ,EAAoB3mJ,KAAKkzG,cAG3ByzC,IACI3mJ,KAAKutB,mBAAqB2nD,GAC1Bl1E,KAAKomJ,uCAITpmJ,KAAKkmJ,0BAITz8I,GAAOE,KAAK,4CACZ3J,KAAKsrB,WAAWvC,gBAAgB/oB,KAAKstB,iBAAiBtc,gBACtDvH,GAAOE,KAAK,yCACZ3J,KAAKsrB,WAAWZ,cAAc1qB,KAAKstB,iBAAiBtc,gBAEpDhR,KAAKstB,iBAAiBs9C,WAClB,KACInhE,GAAOE,KAAK,+BAA+B,IAE/C/J,IAemB,YAAX8U,GACAjL,GAAO7J,MAAM,iEAAkEA,EACnF,GACD,CACC8U,SACAsgE,oBACAF,qBAAsB90E,KAAK4tB,MACpB5tB,KAAKsuB,mBACJC,GAAAA,QAAAA,mBAA2BvuB,KAAKstB,iBAAiBokB,cAGjE1xC,KAAKstB,iBAAmB,KAGxBttB,KAAK4lJ,eAAc,GAEfe,IAEI3mJ,KAAKutB,mBAAqB2nD,EAC1Bl1E,KAAKmlJ,sBAEL17I,GAAOE,KAAK,iDAGxB,EAQAmuI,GAAgB12I,UAAUs6I,oBAAsB,SAASztH,EAAeqtD,GACpE,IAAKrtD,EACD,OAIJ,GAAIqtD,EAAK,CACL,GAAIA,EAAIsrE,KACJ,OAEJtrE,EAAIsrE,MAAO,CACf,CAEA,IACIC,EAAmB9G,EADnBC,GAAkB,EAEtB,MAAMpjH,EAAc3O,EAAcjd,eAAegW,iBAGjD,IAAK,MAAM3E,KAASua,EAChBiqH,EAAoB7mJ,KAAKyjG,oBAAoBphF,EAAMoL,UAAWpL,EAAOA,EAAMmL,WACvEnL,EAAMoL,YAAcpR,GAAUwK,QAC9Bk5H,EAAmB//I,KAAK8/I,iBAAiBz9H,IAE7C29H,EAAkBA,GAAmB6G,GAAqB9G,EAG9DC,GAAmBhgJ,KAAK4tB,KAAKke,cACjC,EAQAgsG,GAAgB12I,UAAU8xG,YAAc,WACpC,OAAOlzG,KAAKslB,GAChB,EAQAwyH,GAAgB12I,UAAU0lJ,sBAAwB,WAC9C,OAAI9mJ,KAAKkzG,cACElzG,KAAKstB,iBAAiBtc,eAAegrE,qBAGzC,IACX,EAQA87D,GAAgB12I,UAAUkxD,2BAA6B,SAASC,GAC5D,MAAsB,iBAAXA,GAAuB5uC,MAAM4uC,IACpC9oD,GAAO7J,MAAO,iBAAgB2yD,+CAEvB,IAGXvyD,KAAK09I,yBAA2BnrF,EAGhCvyD,KAAKutB,kBAAoBvtB,KAAKutB,iBAAiBvc,eAAeshD,2BAA2BC,GAGzFvyD,KAAKkuB,IAAIokC,2BAA2BC,IAE7B,EACX,EAKAulF,GAAgB12I,UAAU2lJ,gBAAkB,WACxC,MAAMR,EAAQvmJ,KAAKg0B,kBAGnB,GAAqB,IAAjBuyH,EAAM7iJ,OAKN,MAAM,IAAIxC,MACN,kEANgB,CACpB,MAAMgrD,EAAUq6F,EAAM,GAAGpyH,SAEzBn0B,KAAKqmJ,iBAAiBn6F,EAC1B,CAIJ,EAKA4rF,GAAgB12I,UAAU4lJ,eAAiB,SAASnnJ,GAChDG,KAAKujJ,gBAAgB1jJ,EACzB,EAMAi4I,GAAgB12I,UAAU6lJ,gBAAkB,WACxC,OAAOjnJ,KAAKy4I,sBAAsB34H,UACtC,EAMAg4H,GAAgB12I,UAAU8lJ,kBAAoB,SAASx1H,GAC/CA,EAAQuyD,gBACRjkF,KAAK8nB,KAAKk8D,uBAAuBhkF,KAAK4tB,KAAK6E,QAASf,EAE5D,EAmBAomH,GAAgB12I,UAAUkiI,uBAAyB,SAASV,GACxD5iI,KAAK47I,uBAAuBtY,uBAAuBV,EACvD,EAOAkV,GAAgB12I,UAAUgiI,uBAAyB,SAASjB,GACxDniI,KAAK47I,uBAAuBxY,uBAAuBjB,EACvD,EAUA2V,GAAgB12I,UAAU8yE,2BAA6B,SAASO,GAC5Dz0E,KAAK47I,uBAAuBvY,kCAAkC5uD,EAClE,EASAqjE,GAAgB12I,UAAUozE,yBAA2B,SAASC,GAC1D,OAAOz0E,KAAK67I,oBAAoBvX,+BAA+B7vD,EACnE,EAeAqjE,GAAgB12I,UAAUszI,wBAA0B,SAASjB,EAAY9+G,GACrE,OAAK30B,KAAK4tB,KAIH5tB,KAAK84I,kBACPpE,wBAAwBjB,EAAY9+G,GAJ9B,IAAIzzB,MAAMwyI,GAKzB,EAOAoE,GAAgB12I,UAAUo6I,kCAAoC,WAC1D,MAAM70F,EAAY3mD,KAAKgkJ,sBAEnBhkJ,KAAK05I,mCAAsC/yF,GAAgD,OAAnC3mD,KAAKuuH,4BAIjE1mG,GAAWmF,cAAchqB,GAAsB,SAAU,CACrD2jD,YACA7jC,cAAgB,GAAE6jC,KAAa3mD,KAAKk7I,qBAExCl7I,KAAK05I,kCAAoC59H,KAAKC,MAClD,EAMA+7H,GAAgB12I,UAAU+7I,kCAAoC,WAC1D,MAAMx2F,EAAY3mD,KAAKgkJ,qBAElBr9F,GAAc3mD,KAAK05I,mCAKxB7xH,GAAWmF,cAAchqB,GAAsB,OAAQ,CACnD2jD,YACA7jC,cAAgB,GAAE6jC,KAAa3mD,KAAKk7I,kBACpCrgI,MAAO,CACHY,SAAUF,KAAKgzB,OAAOzyB,KAAKC,MAAQ/b,KAAK05I,mCAAqC,KAC7EyN,KAAMnnJ,KAAKg+I,yBAGvB,EAOAlG,GAAgB12I,UAAUq7B,sBAAwB,WAC1Cz8B,KAAKstB,kBACLttB,KAAKujJ,gBAAgB,CACjBvuE,kBAAmB,UACnBE,gBAAgB,IAIpBl1E,KAAKutB,kBACLvtB,KAAKutB,iBAAiBq9C,UAClB,MACAhrE,IACI6J,GAAON,KAAK,8DAA+DvJ,EAAM,GAClF,CACC8U,OAAQ,UACRsgE,kBAAmB,mBACnBE,gBAAgB,EAChBJ,sBAAsB,IAIlC90E,KAAKuhJ,sBAAqB,EAC9B,EAOAzJ,GAAgB12I,UAAU4jC,cAAgB,WACtC,OAAO96B,QAAQlK,KAAK45I,gBAAkB55I,KAAK45I,eAAet9G,YAC9D,EAQAw7G,GAAgB12I,UAAUu4I,gBAAkB,WACxC,OAAO9xG,GAAcl9B,YAAY3K,KAAKH,QAAQ8zB,OAClD,EAQAmkH,GAAgB12I,UAAUgmJ,WAAa,SAAShzH,GACvCp0B,KAAK25I,kBAMV35I,KAAK45I,eAAevxG,WAAWjU,GAL3B3qB,GAAON,KAAK,2DAMpB,EASA2uI,GAAgB12I,UAAUimJ,sBAAwB,SAASrqH,GACvDh9B,KAAK45I,eAAel9G,iBAAiBM,EACzC,EAQA86G,GAAgB12I,UAAUsgC,kBAAoB,SAAS5e,GACnD,MAAMuL,EAAcruB,KAAKsuB,mBAAmBxL,GAEvCuL,GAILruB,KAAK45I,eAAel4G,kBAAkBrT,EAC1C,EAUAypH,GAAgB12I,UAAUs/B,wBAA0B,SAAS5d,EAAe6d,GACxE,MAAMtS,EAAcruB,KAAKsuB,mBAAmBxL,GAEvCuL,GAILruB,KAAK45I,eAAel5G,wBAAwBrS,EAAasS,EAC7D,EAOAm3G,GAAgB12I,UAAUkmJ,iBAAmB,WACzC,OAAOp9I,QAAQlK,KAAK4tB,MAAQ5tB,KAAK4tB,KAAK4+B,WAAW7hD,cACrD,EAOAmtI,GAAgB12I,UAAUy/I,cAAgB,WACtC,OAAO32I,QAAQlK,KAAK4tB,MAAQ5tB,KAAK4tB,KAAK4tB,mBAC1C,EAOAs8F,GAAgB12I,UAAUg7C,YAAc,WACpC,OAAIp8C,KAAK4tB,MAAQ5tB,KAAK4wB,cACX5wB,KAAK4tB,KAAK4+B,WAAW3W,SAGzBxhC,QAAQE,OACX,IAAIrT,MAAM,uDAClB,EAOA42I,GAAgB12I,UAAUmmJ,aAAe,WACjCvnJ,KAAK4tB,MAAQ5tB,KAAK4wB,cAClB5wB,KAAK4tB,KAAK4+B,WAAWlR,UAErB7xC,GAAON,KAAM,4BAA2BnJ,KAAK4tB,KAAO,GAAK,oBACrD5tB,KAAK4wB,cAAgB,GAAK,mCAEtC,EASAknH,GAAgB12I,UAAUomJ,UAAY,SAAS7yH,EAAaonB,GACxD,OAAI/7C,KAAK4tB,KACE5tB,KAAK4tB,KAAK4+B,WAAWhsD,KAAKm0B,EAAaonB,GAG3C1nC,QAAQE,OAAO,IAAIrT,MAAM,8BACpC,EASA42I,GAAgB12I,UAAUqmJ,cAAgB,WACtC,GAAIznJ,KAAK4tB,KACL,OAAO5tB,KAAK4tB,KAAK4+B,WAAW9Q,YAEpC,EAWAo8F,GAAgB12I,UAAUsmJ,iBAAmB,SAASnnJ,EAASslB,GAC3D,GAAI7lB,KAAK4tB,KACL,OAAI/H,EACO7lB,KAAK4tB,KAAK4+B,WAAW/Q,mBAAmB51B,EAAItlB,GAGhDP,KAAK4tB,KAAK4+B,WAAWvnB,YAAY1kC,EAEhD,EASAu3I,GAAgB12I,UAAUumJ,wBAA0B,SAASl+H,GACzD,GAAIzpB,KAAK4tB,KACL,OAAO5tB,KAAK4tB,KAAK4+B,WAAW7Q,mBAAmBlyB,EAEvD,EAQAquH,GAAgB12I,UAAUwmJ,0BAA4B,SAASv5I,GAC3D,GAAIrO,KAAK4tB,KACL,OAAO5tB,KAAK4tB,KAAK4+B,WAAW5Q,qBAAqBvtC,EAEzD,EAMAypI,GAAgB12I,UAAUymJ,gBAAkB,SAAShiI,GAC7C7lB,KAAK4tB,MACL5tB,KAAK4tB,KAAK4+B,WAAW3P,WAAWh3B,EAExC,EAOAiyH,GAAgB12I,UAAU0mJ,mBAAqB,SAASjiI,GAChD7lB,KAAK4tB,MACL5tB,KAAK4tB,KAAK4+B,WAAWzP,cAAcl3B,EAE3C,EAOAiyH,GAAgB12I,UAAU2mJ,wBAA0B,WAChD,OAAO79I,QAAQlK,KAAK4tB,MAAQ5tB,KAAK4tB,KAAK6+B,kBAAkB9hD,cAC5D,EAMAmtI,GAAgB12I,UAAU4mJ,mBAAqB,SAASlkJ,GAChD9D,KAAK4tB,MAAQ5tB,KAAK4wB,gBACd9sB,IAAcuY,GAAUkL,OAASzjB,IAAcuY,GAAUwK,OAC7D7mB,KAAK4tB,KAAK6+B,kBAAkB5W,QAAO,EAAM/xC,GAEzC2F,GAAON,KAAM,mCAAkCnJ,KAAK4tB,KAAO,GAAK,oBAC5D5tB,KAAK4wB,cAAgB,GAAK,qCAC1B5wB,KAAK4tB,MAAQ5tB,KAAK4wB,cAAgB,0BAA4B,KAE1E,EAMAknH,GAAgB12I,UAAU6mJ,oBAAsB,SAASnkJ,GACjD9D,KAAK4tB,MAAQ5tB,KAAK4wB,gBACd9sB,IAAcuY,GAAUkL,OAASzjB,IAAcuY,GAAUwK,OAC7D7mB,KAAK4tB,KAAK6+B,kBAAkB5W,QAAO,EAAO/xC,GAE1C2F,GAAON,KAAM,oCAAmCnJ,KAAK4tB,KAAO,GAAK,oBAC7D5tB,KAAK4wB,cAAgB,GAAK,qCAC1B5wB,KAAK4tB,MAAQ5tB,KAAK4wB,cAAgB,0BAA4B,KAE1E,EAQAknH,GAAgB12I,UAAU8mJ,oBAAsB,SAASpkJ,EAAW+hB,GAChE,GAAI7lB,KAAK4tB,MAAQ5tB,KAAK4wB,gBACd9sB,IAAcuY,GAAUkL,OAASzjB,IAAcuY,GAAUwK,OAAQ,CAErE,MAAMwH,EAAcruB,KAAKsuB,mBAAmBzI,GAE5C,IAAKwI,EACD,OAGJruB,KAAK4tB,KAAK6+B,kBAAkBrU,QAAQt0C,EAAWuqB,EAAY8F,SAC/D,MACI1qB,GAAON,KAAM,mCAAkCnJ,KAAK4tB,KAAO,GAAK,oBAC5D5tB,KAAK4wB,cAAgB,GAAK,qCAC1B5wB,KAAK4tB,MAAQ5tB,KAAK4wB,cAAgB,0BAA4B,KAE1E,EAQAknH,GAAgB12I,UAAU+mJ,mBAAqB,SAASrkJ,EAAW+hB,GAC/D,GAAI7lB,KAAK4tB,MAAQ5tB,KAAK4wB,gBACd9sB,IAAcuY,GAAUkL,OAASzjB,IAAcuY,GAAUwK,OAAQ,CAErE,MAAMwH,EAAcruB,KAAKsuB,mBAAmBzI,GAE5C,IAAKwI,EACD,OAGJruB,KAAK4tB,KAAK6+B,kBAAkBl4C,OAAOzQ,EAAWuqB,EAAY8F,SAC9D,MACI1qB,GAAON,KAAM,kCAAiCnJ,KAAK4tB,KAAO,GAAK,oBAC3D5tB,KAAK4wB,cAAgB,GAAK,qCAC1B5wB,KAAK4tB,MAAQ5tB,KAAK4wB,cAAgB,0BAA4B,KAE1E,EAOAknH,GAAgB12I,UAAUo7C,iBAAmB,WAAW,IAAA4rG,EACpD,OAAgB,QAAhBA,EAAOpoJ,KAAK4tB,YAAI,IAAAw6H,OAAA,EAATA,EAAW5rG,kBACtB,EAMCs7F,GAAgB12I,UAAUkkJ,aAAe,WACtC,GAAItlJ,KAAK03B,KACL,OAAO13B,KAAK03B,IAEpB,EAKAogH,GAAgB12I,UAAUwpE,UAAY,WAClC5qE,KAAK6/H,YAAY,YAAa,CAAC,EACnC,EAGAiY,GAAgB12I,UAAU44I,gBAAkB,WAExC,IAAIqO,EAAc,CAAC,EACnB,MAAMC,EAAiC,uBACjCC,EAA+B,qBAIrCvoJ,KAAK0pB,GAAGrwB,IAAiD,CAACg1B,EAAa2U,KAEnE,IAAMA,GAASA,EAAK5/B,OAASklJ,GAAkCtlH,EAAK5/B,OAASmlJ,EACzE,OAGJ,MAAMC,EAAsBxoJ,KAAKqkJ,4BAA4B,wBAE7D,IAAI,IAAAoE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEA,MAAMC,EAAsB/lH,EAAKgmH,WAC3BC,EAAkBjmH,EAAK3U,YAAYtuB,KAEzC,IAAImpJ,EAAuB,CAAEH,uBAE7B,GAAI/lH,EAAK5/B,OAASmlJ,GAAgCvlH,EAAKmmH,WAAaX,EAEhEU,EAAqBE,MAAQpmH,EAAKqe,KAClC6nG,EAAqBD,gBAAkBA,OAEpC,GAAIjmH,EAAK5/B,OAASklJ,IAAmCE,EAAqB,CAI7E,MAAM,KAAEnnG,GAASre,EAAKqmH,WAAW,GAM7BhB,EAAYU,sBAAwBA,EACpCG,EAAuBb,EAEvBa,EAAqBD,gBAAkBA,EAKtCjmH,EAAKsmH,WAGCtmH,EAAKumH,UAAY,KAIxBL,EAAqBM,OAASnoG,EAC9B6nG,EAAqBO,cAAWnpJ,GAMhC4oJ,EAAqBO,SAAWpoG,EAbhC6nG,EAAqBE,MAAQ/nG,CAgBrC,CAEA,IAAIqoG,EAAY,GAEhB,GAAIR,EAAqBE,MACrBM,EAAYR,EAAqBE,UAC9B,CAIHM,GAHeR,EAAqBM,QAAU,KAC7BN,EAAqBO,UAAY,GAGtD,CACA,MAAME,GAAiE,QAAxClB,EAAAzoJ,KAAK26C,aAAa3X,SAAiB,QAAb4lH,EAAJ5lH,EAAM3U,mBAAW,IAAAu6H,OAAb,EAAJA,EAAmB/iI,WAAG,IAAA4iI,GAAW,QAAXC,EAAxCD,EAA0C9yH,iBAAS,IAAA+yH,GAAM,QAANC,EAAnDD,EAAqDhxH,YAAI,IAAAixH,OAAjB,EAAxCA,EAA2D5oJ,QAASC,YAAoB,QAAhB6oJ,EAAJ7oJ,KAAMslJ,sBAAc,IAAAuD,OAAhB,EAAJA,EAAsB9oJ,MACzHC,KAAKya,aAAapR,KAAKhQ,GAA0C2pC,SAAiB,QAAb8lH,EAAJ9lH,EAAM3U,mBAAW,IAAAy6H,OAAb,EAAJA,EAAmBjjI,GAAI8jI,EAAuBD,EACnH,CAAE,MAAO9pJ,GACL6J,GAAO7J,MAAM,iDAAkDA,EACnE,IAER,EAGAk4I,GAAgB12I,UAAU+4I,gBAAkB,WACxCn6I,KAAKsrB,WAAW2B,2BAA0B,CAACle,EAAW2iB,KAClD,IAAI3xB,EAAO,GAAI8iC,EAAO,CAAC,EAEE,iBAAd9zB,GACPhP,EAAOgP,EACP8zB,EAAOnR,GACqB,iBAAd3iB,IACdhP,EAAOgP,EAAUhP,KACjB8iC,EAAO9zB,GAGX,MAAM66I,EAAe,CACjB7pJ,OACAkD,OAAQ4/B,EAAK5/B,OAAS4/B,EAAK5/B,OAAS,GACpCM,cAAes/B,EAAKt/B,cAAgBs/B,EAAKt/B,cAAgB,GACzDJ,OAAQ0/B,EAAK1/B,OAAS0/B,EAAK1/B,OAAS,GACpCD,WAAYyF,KAAKC,UAAU8oB,IAG/B1xB,KAAKya,aAAapR,KAAKhQ,GAAgDuwJ,EAAa,GAE5F,EAEA9R,GAAgB12I,UAAUyoJ,oBAAsB,WAAyB,IAAhBvxB,EAAM70H,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,MAC9DzD,KAAKk6I,oBAAoBxa,eAAepH,EAC5C,EAEAwf,GAAgB12I,UAAU0oJ,mBAAqB,WAC3C9pJ,KAAKk6I,oBAAoBla,eAC7B,EAEA8X,GAAgB12I,UAAUu+H,aAAe,WACrC3/H,KAAKk6I,oBAAoBva,aAAarH,OAC1C,EAEAwf,GAAgB12I,UAAUgiG,SAAW,SAASz3E,GAC1C3rB,KAAKk6I,oBAAoB92C,SAASz3E,EACtC,EAEAmsH,GAAgB12I,UAAUw2H,aAAe,SAASx5B,GAC9Cp+F,KAAKk6I,oBAAoBtiB,aAAax5B,EAC1C,EAEA05C,GAAgB12I,UAAU2oJ,kBAAoB,SAAStW,EAAY9+G,GAC/D,GAAI30B,KAAKs8E,SAASm3D,GACd,OAEJ,MAAMpmH,EAAUrtB,KAAK00I,wBAAwBjB,EAAY9+G,GAEzD30B,KAAKs8E,SAASm3D,GAAcpmH,EAC5BA,EAAQ5W,OACZ,EAEAqhI,GAAgB12I,UAAU4oJ,iBAAmB,SAASvW,GAC7CzzI,KAAKs8E,SAASm3D,KAGnBzzI,KAAKs8E,SAASm3D,GAAYl6H,cACnBvZ,KAAKs8E,SAASm3D,GACzB,EAMAqE,GAAgB12I,UAAUsrD,mBAAqB,WAAW,IAAAu9F,EACtD,OAAgB,QAAhBA,EAAOjqJ,KAAK4tB,YAAI,IAAAq8H,OAAA,EAATA,EAAWv9F,oBACtB,ECv1IA,MAAMw9F,GAAY,CAAE,YAAa,cAAe,aCNzC,MAAMC,GAAgB,CACzB1hI,oBAAoB,EACpBlM,MAAO,CACH6tI,0BAA0B,EAC1BC,qBAAqB,EACrBvtI,qBAAqB,IAchBwtI,GAAmB,CAC5BjrG,MAAO,CACHnL,OAAQ,aACRivC,IAAK,kBAETvwC,WAAY,8CACZ23G,WAAY,0BAKHC,GAAsB,CAC/BnrG,MAAO,CACHnL,OAAQ,iBACRivC,IAAK,sBAETvwC,WAAY,kDACZ23G,WAAY,0BAKHE,GAAmB,CAC5BxQ,sBAAsB,EACtByQ,yBAAyB,EACzBC,yBAAyB,EACzB1O,sBAAsB,EACtBK,wBAAwB,EACxBF,yBAAyB,EACzB9oB,oBAAoB,EACpBs3B,kBAAmB,YAsBnBnwG,aAAc,sBAGdowG,uBAAuB,EAUvBl1B,QAAS,CACL9kF,cAAe,GAEnBjoB,UAAW,CACP0qD,UAAU,GAmBdhuD,IAAK,CAOD8O,SAAS,IC5FF,SAAS02H,GAAgBnrE,EAAO10D,EAAU8/H,GACrD,IAAIlrJ,EACJ,MAAMmrJ,EAAMhrJ,KAAKirJ,SAAStrE,GAC1B3/E,KAAKD,KAAOkrB,EACZjrB,KAAK03B,KAAOszH,EAAIj0I,QAAQ2gB,KACxB73B,EAAUkrJ,EAAQ,IAAIP,IAAuB,IAAIF,IACjDzqJ,EAAQ+yC,WAAc,GAAE/yC,EAAQ+yC,mBAAmB3nB,IACnDjrB,KAAKH,QAAUA,EACfA,EAAQ0lJ,QAAUyF,EAAIj0I,QAAQotC,MAC9BnkD,KAAK8nB,KAAO,IAAI43D,GAAK7/E,EAAS8/E,GAC9B3/E,KAAK2/E,MAAQA,EACb3/E,KAAK+qJ,MAAQA,EAGb/qJ,KAAKyL,iBAAiBgtB,IAClB,CAACyyH,EAASn7I,EAAKmxE,EAAab,KACxBx4D,GAAWiF,oBlJ0NoBq+H,EAAEC,EAAoBC,EAAuBhrE,KAAe,CACnGj9E,KAAM5B,GAAgBC,iBACtBwB,OAAQ,oBACRC,WAAY,CACR,WAAckoJ,EACd,cAAiBC,KACdhrE,KkJ/NK8qE,CAA4BD,EAASn7I,EAAKswE,GAAS,IAI/DrgF,KAAKyL,iBAAiBgtB,IAClB1oB,IAMQA,GACA8X,GAAWmF,cACPs+H,GACA,CAAE/qJ,QAASwP,IAEnB8X,GAAWuE,QACPzjB,KAAKC,UACD,CACIid,GAAIylI,GACJv7I,QACD,GAEvB,CAEA+6I,GAAgB1pJ,UAAU6pJ,SAAW,SAAUtrE,GAC3C,IACE,OAAOh3E,KAAK24B,MAAMiqH,KAAK5rE,EAAMh5D,MAAM,KAAK,IAC1C,CAAE,MAAOnX,GACP,OAAO,IACT,CACF,EAOFs7I,GAAgB1pJ,UAAUoX,QAAU,WAAuB,IAAd3Y,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD,MAAM+nJ,EAAmBhiJ,GAAkBpB,QAAQ,0BAC7CqjJ,EAAmBjiJ,GAAkBpB,QAAQ,0BAE/CojJ,GAAoBA,EAAiB9nJ,OAAS,IAChD7D,EAAQgmB,GAAK2lI,GAGXC,GAAoBA,EAAiB/nJ,OAAS,IAChD7D,EAAQwkD,SAAWonG,GAGrBzrJ,KAAK8nB,KAAKtP,QAAQ3Y,EAAQgmB,GAAIhmB,EAAQwkD,SAC1C,EASAymG,GAAgB1pJ,UAAUszC,OAAS,SAAS70C,GACxCG,KAAK8nB,KAAK4sB,OAAO70C,EACrB,EAMAirJ,GAAgB1pJ,UAAUuY,WAAa,WAKnC,OAAO3Z,KAAK8nB,KAAKnO,cAAWlW,UAChC,EAOAqnJ,GAAgB1pJ,UAAU+yB,OAAS,WAC/B,OAAOn0B,KAAK8nB,KAAKqM,QACrB,EAMA22H,GAAgB1pJ,UAAUsqJ,SAAW,SAAS/rE,GAC1C3/E,KAAK2/E,MAAQA,CACjB,EAUAmrE,GAAgB1pJ,UAAUuqJ,oBAAsB,WAAqB,IAAZ9rJ,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAC,CAAC,EAC9D5D,EAAU,IAAK4qJ,MACR5qJ,GAEPA,EFjFG,SAAqB4qJ,GACxB,MAAMz0F,EA5CH,WAA0C,IAAlB41F,IAASnoJ,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,KAAAA,UAAA,GACpC,MAAMooJ,EAAW/sG,SAAS7P,OAAS6P,SAAS7P,OAAS6P,SAASrX,KACxDuuB,EAAS,CAAC,EACV81F,EAAaD,GAAYA,EAASvtG,OAAO,GAC1C33B,MAAM,MAAQ,GAEnB,GAAIm4B,SAASrX,MAA8B,IAAtBqkH,EAAWpoJ,OAAc,CAC1C,MAAMqoJ,EAAaD,EAAW,GAE9B,GAAIC,EAAW94G,WAAW,MAAyC,IAAjC84G,EAAWplI,MAAM,KAAKjjB,OACpD,OAAOsyD,CAEf,CA2BA,OAzBA81F,EAAW19I,SAAQ49I,IACf,MAAMC,EAAQD,EAAKrlI,MAAM,KACnBjf,EAAMukJ,EAAM,GAElB,IAAKvkJ,GAAOwiJ,GAAUn6G,SAASroC,EAAIif,MAAM,KAAK,IAC1C,OAGJ,IAAIhf,EAEJ,IAGI,GAFAA,EAAQskJ,EAAM,IAETL,EAAW,CACZ,MAAMM,EAAUnpG,mBAAmBp7C,GAC9BynC,QAAQ,MAAO,KACpBznC,EAAoB,cAAZukJ,OAA0B5rJ,EAAYg8H,GAAAA,MAAa4vB,EAC/D,CACJ,CAAE,MAAO18I,GAEL,YADAtG,QAAQ+G,IAAK,wCAAuCy7C,OAAO/jD,KAE/D,CAEAquD,EAAOtuD,GAAOC,CAAK,IAEhBquD,CACX,CAImBm2F,GAsBf,OArBA9qJ,OAAO8G,KAAK6tD,GACP5nD,SAAQ69I,IACL,MAAMvkJ,EAAMukJ,EAAM78G,QAAQ,UAAW,IACrC,OAAQ1nC,GACR,IAAK,qBACD+iJ,EAAiB7hI,UAAU0qD,SAAWtd,EAAOi2F,GAC7C,MACJ,IAAK,sBACDxB,EAAiB54H,gBAAkBmkC,EAAOi2F,GAC1C,MACJ,IAAK,sBACDxB,EAAiB34H,gBAAkBkkC,EAAOi2F,GAC1C,MACJ,IAAK,cACDxB,EAAiBnlI,IAAI8O,QAAU4hC,EAAOi2F,GACtC,MACJ,QACIxB,EAAiB/iJ,GAAOsuD,EAAOi2F,GACnC,IAER/iJ,QAAQ+G,IAAI,mBAAmBw6I,GACxBA,CACX,CEyDc2B,CAAYvsJ,GACtB,MAAME,EAAOC,KAAKD,KASlB,OARIC,KAAK+qJ,QACLlrJ,EAAU,IAAIA,EAAS46C,aAAc,4BAGrC56C,EAAQ+hD,aACR5hD,KAAKwrC,WA7IsB,mCAgJxB,IAAIssG,GAAgB,CACvB/3I,OACA4zB,OAAQ9zB,EACRorC,WAAYjrC,KACZ03B,KAAM13B,KAAK03B,MAEnB,EAOAozH,GAAgB1pJ,UAAUqK,iBAAmB,SAASgD,EAAOgb,GACzDzpB,KAAK8nB,KAAKiG,YAAYtf,EAAOgb,EACjC,EAOAqhI,GAAgB1pJ,UAAUu4B,oBAAsB,SAASlrB,EAAOgb,GAC5DzpB,KAAK8nB,KAAK8B,eAAenb,EAAOgb,EACpC,EAKAqhI,GAAgB1pJ,UAAUo2G,mBAAqB,WAC3C,OAAOx3G,KAAK8nB,KAAKuH,eACrB,EASAy7H,GAAgB1pJ,UAAUoqC,WAAa,SAASpU,GAAyB,IAAhBqU,EAAMhoC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GAC3DzD,KAAK8nB,KAAK44D,KAAKl1C,WAAWpU,EAASqU,GAAQ,EAC/C,EASAq/G,GAAgB1pJ,UAAUyqC,cAAgB,SAASzU,GAAyB,IAAhBqU,EAAMhoC,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,IAAAA,UAAA,GAC9DzD,KAAK8nB,KAAK44D,KAAK70C,cAAczU,EAASqU,GAAQ,EAClD,EAKAq/G,GAAgB1pJ,UAAUirJ,QAAU,WAChC,MAAMj7I,EAAOpR,KAAK8nB,KAAKs7D,eAEjB5lC,EAAW,CAAC,EAElBA,EAASsgE,KAAO,IAAIhiG,KACpB0hC,EAASzO,IAAMjmC,OAAOg2C,SAAS2/B,KAC/BjhC,EAAShwC,GAAKtI,UAAUD,UAExB,MAAMgL,EAAMjQ,KAAK8nB,KAAKu7D,aAQtB,OANIpzE,IACAutC,EAAS11B,KAAO7X,GAGpBmB,EAAKosC,SAAWA,EAETpsC,CACX,ECnOO,IAAKk7I,GAAuB,SAAvBA,GAAuB,OAAvBA,EAAuB,gDAAvBA,EAAuB,8CAAvBA,EAAuB,kEAAvBA,EAAuB,oDAAvBA,CAAuB,MAiC5B,MAAMC,GAAsBD,GAAwBC,oBAC9CC,GAAsBF,GAAwBE,oBAC9CC,GAA6BH,GAAwBG,2BACrDC,GAAsBJ,GAAwBI,oBC/BrDC,GAAwB,aAExBC,GAAwB,SA6T9B,OAxTA,MAKIrrJ,cACIvB,KAAKomF,cAAgB,IAAI3+E,MACzBzH,KAAK6sJ,aAAe,CAAC,EAErB1sC,GAAIpyF,YACAmE,GAAAA,QAAAA,qBACApyB,GACIE,KAAKomF,cAAc/8E,KACfijJ,GACAxsJ,KACZqgH,GAAIpyF,YACAmE,GAAAA,QAAAA,uBACApyB,GACIE,KAAK8sJ,iBACD9sJ,KAAK28F,uBACL78F,KAGZqgH,GAAIpyF,YACAmE,GAAAA,QAAAA,qBACA66H,GAAe/sJ,KAAKgtJ,yBAAyBD,KAIjD/sJ,KAAKitJ,yBAA2B,IAAI54I,SAAQC,IACxC,IAAKpP,UAAU6nJ,YAGX,YAFAz4I,GAAQ,GAKZ,MAAMxc,EAAOkI,KAEPq/B,EAAW,GAEjBA,EAAS/vB,KAAKpK,UAAU6nJ,YAAYG,MAAM,CAAEntJ,KAAM6sJ,KAC7C7sI,MAAKtL,IACFzU,KAAKgtJ,yBAAyB,CAC1B,CAAC3wI,GAAUwK,OAAQ7mB,KAAKmtJ,sBAAsB14I,KAElDA,EAAO24I,SAAW,WACd,IACIt1J,EAAKk1J,yBAAyB,CAC1B,CAAC3wI,GAAUwK,OAAQ/uB,EAAKq1J,sBAAsBntJ,OAEtD,CAAE,MAAOJ,GACL,CAER,GAEO,KAEVsgB,OAAM,KAAM,KAEjBmf,EAAS/vB,KAAKpK,UAAU6nJ,YAAYG,MAAM,CAAEntJ,KAAM4sJ,KAC7C5sI,MAAKtL,IACFzU,KAAKgtJ,yBAAyB,CAC1B,CAAC3wI,GAAUkL,OAAQvnB,KAAKmtJ,sBAAsB14I,KAElDA,EAAO24I,SAAW,WACd,IACIt1J,EAAKk1J,yBAAyB,CAC1B,CAAC3wI,GAAUkL,OAAQzvB,EAAKq1J,sBAAsBntJ,OAEtD,CAAE,MAAOJ,GACL,CAER,GAEO,KAEVsgB,OAAM,KAAM,KAEjB7L,QAAQ29D,IAAI3yC,GAAUtf,MAAKmhD,GAAW5sD,EAAQ4sD,EAAQslC,OAAM6mD,GAAaA,MAAY,GAG7F,CAUAF,wBAA6C,IAAvBG,EAAgB7pJ,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAItC,MAAMgR,EAAS64I,EAAiB/oI,OAAS+oI,EAAiB74I,OAE1D,GAAsB,iBAAXA,EACP,MAAM,IAAIi0D,UAGd,MA3G0B,YA2GnBj0D,CACX,CASAu4I,yBAAyBD,GAEf,CAAE1wI,GAAUkL,MAAOlL,GAAUwK,OAC1B9Z,MAAK3J,GAAQA,KAAQ2pJ,GAAeA,EAAY3pJ,KAAUpD,KAAK6sJ,aAAazpJ,OAGjFpD,KAAK6sJ,aAAe,IACb7sJ,KAAK6sJ,gBACLE,GAEP/sJ,KAAKomF,cAAc/8E,KAAKijJ,GAA6CtsJ,KAAK6sJ,eAEtE7sJ,KAAK6sJ,aAAaxwI,GAAUkL,QAAUvnB,KAAK6sJ,aAAaxwI,GAAUwK,SAIlE7mB,KAAKmsF,kBAAiB,SAGlC,CAOA2gE,iBAAiBS,EAAUztJ,GACvB,MAAM87F,EACA97F,EAAQm0B,MACNmM,GAAgB,gBAAXA,EAAExZ,MAA0BwZ,EAAEksD,WAAaihE,IAEpD3xD,GACA/zE,GAAWiE,0BACPq0F,GAAI5gB,4BAA4B3D,GAE5C,CAMAzP,iBAAiBj1E,GACbipG,GAAIh0B,iBAAiBj1E,EACzB,CAQA4lF,wBACI,OAAOqjB,GAAIrjB,uBACf,CASAJ,wBAAwBsC,GACpB,OAAOmhB,GAAIzjB,wBAAwBsC,EACvC,CASAwuD,0BAA0BpqJ,GACtB,OAAO,IAAIiR,SAAQC,IAGXlR,KAAQpD,KAAK6sJ,aACbv4I,EAAQtU,KAAK6sJ,aAAazpJ,IAM9BpD,KAAKitJ,yBAAyBltI,MAAKstI,IAC/B,IAAKA,EAGD,YAFA/4I,GAAQ,GAKZ,MAAM+qB,EAAW,GAEjB,OAAQj8B,GACR,KAAKiZ,GAAUwK,MACXwY,EAAS/vB,KACLpK,UAAU6nJ,YAAYG,MAAM,CACxBntJ,KAAM6sJ,MAEd,MACJ,KAAKvwI,GAAUkL,MACX8X,EAAS/vB,KACLpK,UAAU6nJ,YAAYG,MAAM,CACxBntJ,KAAM4sJ,MAEd,MACJ,QACIttH,EAAS/vB,KACLpK,UAAU6nJ,YAAYG,MAAM,CACxBntJ,KAAM6sJ,MAEdvtH,EAAS/vB,KACLpK,UAAU6nJ,YAAYG,MAAM,CACxBntJ,KAAM4sJ,MAIlBt4I,QAAQ29D,IAAI3yC,GAAUtf,MAClBmhD,GAAW5sD,EAAQ4sD,EAAQslC,OAAM8mD,IAC7B,IACI,OAAOttJ,KAAKmtJ,sBAAsBG,EACtC,CAAE,MACE,OAAO,CACX,QAEJ,IAAMh5I,GAAQ,IACjB,GACH,GAEV,CAOAm5I,gCACI,QACKx/I,GAAQtH,aAAesH,GAAQ3G,kBAAkB,QAC/C2G,GAAQlE,eAEnB,CAOA4yF,uBACI,OAAOwjB,GAAIxjB,sBACf,CAUAyC,qBAAqB9S,GAWjB,OAVyB6zB,GAAI9gB,oCAER37F,OAAS,GAI1B1D,KAAK8sJ,iBACDxgE,EAAU6zB,GAAI9gB,qCAGf8gB,GAAI/gB,qBAAqB9S,EACpC,CAOA7gF,iBAAiBgD,EAAOJ,GACpBrO,KAAKomF,cAAcr4D,YAAYtf,EAAOJ,EAC1C,CAOAsrB,oBAAoBlrB,EAAOJ,GACvBrO,KAAKomF,cAAcx8D,eAAenb,EAAOJ,EAC7C,CAMAq/I,UAAUj/I,GAAgB,QAAA2D,EAAA3O,UAAAC,OAANoP,EAAI,IAAA3S,MAAAiS,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJQ,EAAIR,EAAA,GAAA7O,UAAA6O,GACpBtS,KAAKomF,cAAc/8E,KAAKoF,KAAUqE,EACtC,GC9TErJ,IAASC,EAAAA,EAAAA,wDAoFf,SAASikJ,GAAkBpyD,GACvB,IAAK,MAAMK,KAAUL,EACjBK,EAAOiI,YAEf,CC3FA,MAAMp6F,IAASC,EAAAA,EAAAA,8DAKA,MAAMkkJ,WAA6B9kD,GAI9CvnG,cACIqG,QAMA5H,KAAK60I,WAAa,IAAI71H,IAMtBhf,KAAK2tB,SAAW,IACpB,CAKAgpD,iBAAiBhpB,EAAO7pD,EAAW2e,GAC/B,MAAO,CAAC,CACZ,CAKAsmF,kBAAkBp7C,EAAOlrC,GAEzB,CAKAumF,aAAar3F,GACT,OAAO3R,KAAK60I,WAAWlwH,IAAIhT,EAC/B,CAKAs3F,mBAAmBt3F,GAEnB,CAKAsmE,iBAAiBixB,GACb,GAAKA,SAAAA,EAAUxlG,OAIf,IAAK,MAAMiO,KAAQu3F,EACflpG,KAAK60I,WAAW3+H,OAAOvE,EAE/B,CAMAilI,YAAYhpH,GACR5tB,KAAK2tB,SAAWC,CACpB,CAKAwjD,aAAaz/D,EAAMi6C,GACf,GAAoB,iBAATj6C,EACP,MAAM,IAAI+2D,UAAW,QAAO/2D,uBAKhC,MAAMmlI,EAAgB92I,KAAK60I,WAAWlwH,IAAIhT,GAEtCmlI,GAAiBA,IAAkBlrF,GACnCniD,GAAO7J,MAAO,+BAA8Bk3I,QAAoBlrF,KAEpE5rD,KAAK60I,WAAW/uH,IAAInU,EAAMi6C,EAC9B,CAKAu9C,mBAAmB1mF,EAAYkJ,GAC3B,OAAO,CACX,CAKAy9E,kBAAkB3mF,EAAYuQ,GAC1B,OAAO,CACX,CAKAm+C,mBAAmBx/D,EAAM8Q,GAAc,CAMvC4mF,wBAAwBxjF,GACpB,MAAMgpC,EAAQ1uD,MAAMqqB,KAAKxqB,KAAK60I,YACzB58H,QAAO++H,GAASA,EAAM,KAAOnxH,IAC7B6X,KAAIs5G,GAASA,EAAM,KAEnBnoF,SAAAA,EAAOnrD,QAIZ1D,KAAKi4E,iBAAiBppB,EAC1B,EC7HG,IAAKg/F,GAAO,SAAPA,GAAO,OAAPA,EAAO,wBAAPA,EAAO,gDAAPA,EAAO,4BAAPA,EAAO,8BAAPA,EAAO,gCAAPA,EAAO,0BAAPA,CAAO,MCOnB,MAAMpkJ,IAASC,EAAAA,EAAAA,2DASA,MAAMokJ,GAgBjBvsJ,cAA0B,IAAd1B,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnBzD,KAAK+yC,SAAW,CACZi3B,SAAU,CAAC,EACXloC,aAAa,EACbisH,cAAc,EACdC,cAAc,KACXnuJ,GASPG,KAAKs1B,QAAU,GAOft1B,KAAKiuJ,gBAAkB,KAGvBjuJ,KAAKkuJ,SAAWluJ,KAAKkuJ,SAAS99H,KAAKpwB,MACnCA,KAAKmuJ,gBAAkBnuJ,KAAKmuJ,gBAAgB/9H,KAAKpwB,MACjDA,KAAKouJ,eAAiBpuJ,KAAKouJ,eAAeh+H,KAAKpwB,KACnD,CAQAquJ,aACI,OAAOruJ,KAAK+yC,SAASmZ,OACzB,CASAoiG,eAAeC,GACX,OAAQA,EAAQ7tG,KAAK,WACrB,KAAKmtG,GAAQW,OACTxuJ,KAAKyuJ,iBAAiBF,GACtB,MAEJ,KAAKV,GAAQa,SACT1uJ,KAAK2uJ,mBAAmBJ,GACxB,MAEJ,KAAKV,GAAQe,UACT5uJ,KAAK6uJ,oBAAoBN,GACzB,MAEJ,KAAKV,GAAQiB,eACT9uJ,KAAK+uJ,iBAAiBR,GAG9B,CAUA93I,QAAwB,IAAlBmmB,EAAWn5B,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GACZzD,KAAKiuJ,kBAITjuJ,KAAKs1B,QAAUt1B,KAAKs1B,QAAQqlC,OAAO/9B,GAEnC58B,KAAKiuJ,gBAAkBjuJ,KAAKgvJ,wBAE5BhvJ,KAAKiuJ,gBAAgBjkG,OAAOptB,GAChC,CAQArjB,OACQvZ,KAAKiuJ,iBACLjuJ,KAAKiuJ,gBAAgBrjF,YAGzB5qE,KAAK6uJ,qBACT,CASAG,wBAOI,MAWMC,EAAiB,CAGnBj/G,WAAW,EACXke,OAAQ,CACJ0c,UAAWA,QAEfz0B,OAAQn2C,KAAKouJ,eAIb3iJ,iBAAkBA,IAAM,QAWtByjJ,EAAe,CACjB5wE,WAAYkB,MACTx/E,KAAK+yC,SAASi3B,UAgCfmlF,EAAW,CACb1jJ,iBAAkBA,OAClBkmB,oBAAqBA,OACrBtC,gBAAiB,GACjB5U,aAAc,CAAEpR,KArBJoF,IACZ,OAAQA,GACR,KAAKuf,GAAW,WAAXA,sBACL,KAAKA,GAAW,WAAXA,kBACDhuB,KAAKkuJ,SAASL,GAAQx1J,iBAAkBoW,GAE5C,GAgBAkrB,oBAAqBA,OACrB0xB,uBAAwBA,OACxB3C,2BAA4BA,KAAM,GAiBtC1oD,KAAK+iI,KAAO,IAAI5iB,GAVO,CACnBvuF,SAAUA,IAAM,IASgB,CAAC,GAOrC5xB,KAAK+iI,KAAKh1G,YACNmE,GAAAA,QAAAA,mBACAlyB,KAAKmuJ,iBAGT,MAAM1K,EAAiB,IAAIt4E,QACvB7qE,OACAA,EACAN,KAAK+yC,SAASmZ,QACd+iG,EACA,CACIvyE,oBAAqB18E,KAAK+yC,SAASg7G,aACnCpxE,oBAAqB38E,KAAK+yC,SAASi7G,cAEvCkB,GACA,EACAlvJ,KAAK+yC,SAASjR,aAGZwoC,EAAiB,IAAIsjF,GAU3B,OARAtjF,EAAessE,YAAYuY,GAM3B1L,EAAe3vI,WAAWq7I,EAAUnvJ,KAAK+iI,KAAMz4D,EA7H5B,CAAC,GA+Hbm5E,CACX,CAWAyK,SAAS9C,GAAyB,IAAd/qE,EAAO58E,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GAC1BzD,KAAK+yC,SAAS+X,QAAQ9qD,KAAK+yC,SAASmZ,QAASk/F,EAAW/qE,EAC5D,CAWA8tE,gBAAgBiB,GACZpvJ,KAAKs1B,QAAQhmB,KAAK8/I,GAElBpvJ,KAAK+yC,SAASs8G,eAAeD,EACjC,CAUAhB,eAAe/8G,GACXrxC,KAAK+yC,SAASu8G,cAActvJ,KAAK+yC,SAASmZ,QAAS7a,EACvD,CAWAo9G,iBAAiBF,GACRvuJ,KAAKiuJ,gBAMVjuJ,KAAKiuJ,gBAAgB37E,UAAUi8E,GAL3B9kJ,GAAO7J,MAAM,qDAMrB,CAUA+uJ,mBAAmBJ,GACXvuJ,KAAKiuJ,gBACLxkJ,GAAO7J,MAAM,sDAKjBI,KAAKiuJ,gBAAkBjuJ,KAAKgvJ,wBAE5BhvJ,KAAKiuJ,gBAAgBnjF,YACjByjF,GACA,SACA,IAAMvuJ,KAAKkuJ,SACPluJ,KAAK+yC,SAASmZ,QACd2hG,GAAQx1J,iBACR,4BAGZ,CASAw2J,sBACI7uJ,KAAKs1B,QAAQlnB,SAAQiU,GAASA,EAAMnU,YACpClO,KAAKs1B,QAAU,GAEXt1B,KAAKiuJ,iBACLjuJ,KAAKiuJ,gBAAgB94E,eAGrBn1E,KAAK+iI,OACL/iI,KAAK+iI,KAAKn5G,eACNsI,GAAAA,QAAAA,mBACAlyB,KAAKmuJ,iBAGTnuJ,KAAK+iI,KAAKlY,UAElB,CAUAkkC,iBAAiBR,GACbvuJ,KAAKiuJ,gBAAgBzjF,iBAAiB+jF,EAC1C,ECvYJ,MAAM9kJ,IAASC,EAAAA,EAAAA,gECJT6lJ,GAAuB,qBACvBh1I,GAAU,IAAI9S,MACpB,IAAI+nJ,IAAe,EACfC,GAAM,KAsHV,UACInzI,KAtDGxC,eAAoBja,GACvB,GAAI2vJ,GACA,MAAM,IAAItuJ,MAAM,oCAGpB,MAAM,YAAEsS,EAAW,gBAAEC,EAAe,0BAAEwU,GAA8BpoB,EAEpE,IAAK2T,IAAgBC,GAAmBwU,EACpC,MAAM,IAAI/mB,MAAM,yBAOpB,aAzEJ,SAAqBrB,GACjB,IAAIoO,GAAQjH,gBAIZ,OAAO,IAAIqN,SAAQC,IACf6T,KAAAA,WACItoB,EAAQk8I,0BAA4Bn9I,IACxB,GACE,OACI0B,EACCgU,EAAQ,GAEvC,CAwDUo7I,CAAY7vJ,GAElB4vJ,GAAM,IAAI3mJ,OAAOqK,UA1CrB,SAAqBtT,GACjB,OAAO,IAAIwU,SAAQ,CAACC,EAASC,KACzB,MAAMo7I,EAAQ9vJ,EAAQ2T,YAChBo8I,EAAY/vJ,EAAQ4T,gBACpBuY,EAASnsB,EAAQs7I,cAAgBt7I,EAAQi8I,uBAAyB/8F,GAASnB,kBAEjF6xG,GAAI37I,WAAW67I,EAAOC,EAAW5jI,GAAQ,CAACvX,EAAQlU,KAC/B,YAAXkU,GACAg7I,GAAI/lI,GAAG6lI,IAAsB,WAAa,QAAAn9I,EAAA3O,UAAAC,OAAToP,EAAI,IAAA3S,MAAAiS,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJQ,EAAIR,GAAA7O,UAAA6O,GACjCiI,GAAQlR,KAAKkmJ,MAAyBz8I,EAC1C,IACA08I,IAAe,EACfl7I,KAEAC,EAAO,CACHE,SACAlU,WAER,GACD,KAAM,CAAEsvJ,oBAAoB,GAAO,GAE9C,CAuBW33B,CAAYr4H,EACvB,EAuCIiwJ,QAxBG,WACH,OAAKN,GAIE,IAAIn7I,SAAQ,CAACC,EAASC,KACzBgG,GAAQmP,GAAG6lI,IAAsB,CAAC96I,EAAQid,KACvB,YAAXjd,EACAH,EAAQod,GAERnd,EAAO,CACHE,SACAid,WAER,IAIJ+9H,GAAIM,iBAAiB,IAhBd17I,QAAQE,OAAO,gBAkB9B,6BC3HA,MAAM9K,IAASC,EAAAA,EAAAA,6CAMA,MAAMsmJ,GAIjBzuJ,cACIvB,KAAKiwJ,UAAW,EAChBjwJ,KAAKkwJ,cAAgB,GACrBlwJ,KAAKmwJ,gBAAkB,EAC3B,CAOAC,eAAe1jJ,GACNA,EAAO2gF,kBACR5jF,GAAON,KAAK,mDAGhBnJ,KAAKkwJ,cAAc5gJ,KAAK5C,EAC5B,CASA+J,QAEI,GAAIzW,KAAKiwJ,SACL,OAAOjwJ,KAAKqwJ,UAAU3jJ,OAK1B,GAFA1M,KAAKyxH,cAAgBV,MAEhB/wH,KAAKkwJ,cAAcxsJ,OAGpB,OAFA+F,GAAON,KAAK,8DAEL,KAGXnJ,KAAKiwJ,UAAW,EAEhBjwJ,KAAKqwJ,UAAYrwJ,KAAKyxH,cAAc6+B,+BAEpC,IAAK,MAAM5jJ,KAAU1M,KAAKkwJ,cAAe,CACrC,MAAMK,EAAYvwJ,KAAKyxH,cAAcl5G,wBAAwB7L,GAE7D6jJ,EAAU/3I,QAAQxY,KAAKqwJ,WAGvBrwJ,KAAKmwJ,gBAAgB7gJ,KAAKihJ,EAC9B,CAEA,OAAOvwJ,KAAKqwJ,UAAU3jJ,MAC1B,CAOAe,QACIzN,KAAKiwJ,UAAW,EAChBjwJ,KAAKkwJ,cAAgB,GAGrB,IAAK,MAAMK,KAAavwJ,KAAKmwJ,gBACzBI,EAAU52I,aAGd3Z,KAAKmwJ,gBAAkB,GAEnBnwJ,KAAKyxH,gBACLzxH,KAAKyxH,mBAAgBnxH,EAE7B,EC7EG,MAgDMkwJ,GACP91H,IAAIC,gBAAgB,IAAIF,KAAK,CAtBrB,gaAsB+B,CAAEr3B,KAAM,4BC/CtC,MAAMqtJ,GAUjBlvJ,YAAYu9F,GAAa,IAAA4xD,EACrB,MAAMC,EAAWx2H,SAASwgE,cAAc,OAClCi2D,EAAkB9xD,EAAYxR,iBAAiB,IAC/C,OAAE1qE,EAAM,MAAED,EAAK,UAAE4D,GAA2C,QAAhCmqI,EAAGE,EAAgBj+D,qBAAa,IAAA+9D,EAAAA,EAAIE,EAAgBvyD,iBAEtFr+F,KAAK6wJ,QAAU12H,SAASwgE,cAAc,UACtC36F,KAAK8wJ,KAAO9wJ,KAAK6wJ,QAAQE,WAAW,MAEpC/wJ,KAAKgxJ,gBAAkB72H,SAASwgE,cAAc,SAC9C36F,KAAKixJ,cAAgB92H,SAASwgE,cAAc,SAC5Cg2D,EAAStiG,YAAYruD,KAAKixJ,eAC1BN,EAAStiG,YAAYruD,KAAKgxJ,iBACJ,OAAlB72H,SAAS0I,MACT1I,SAAS0I,KAAKwrB,YAAYsiG,GAI9B3wJ,KAAKkxJ,WAAa/qJ,SAASogB,EAAW,IACtCvmB,KAAKixJ,cAActuI,MAAQxc,SAASwc,EAAO,IAC3C3iB,KAAKixJ,cAAcruI,OAASzc,SAASyc,EAAQ,IAC7C5iB,KAAKixJ,cAAcE,UAAW,EAC9BnxJ,KAAKixJ,cAAcx0D,UAAYqC,EAG/B9+F,KAAKixJ,cAAcG,OAGnBT,EAASrwB,MAAM+wB,QAAU,OAGzBrxJ,KAAKsxJ,mBAAqBtxJ,KAAKsxJ,mBAAmBlhI,KAAKpwB,KAC3D,CASAsxJ,mBAAmBhlH,GDhCS,ICiCpBA,EAASl7B,KAAKyU,IACd7lB,KAAKuxJ,cAEb,CAQAA,eAAe,IAAAC,EAEX,MAAQnvI,GAAUriB,KAAKyxJ,eAAenkE,kBAChC,OAAE1qE,EAAM,MAAED,GAA6B,QAAtB6uI,EAAGnvI,EAAMswE,qBAAa,IAAA6+D,EAAAA,EAAInvI,EAAMg8E,iBAEvDr+F,KAAK6wJ,QAAQluI,MAAQxc,SAASwc,EAAO,IACrC3iB,KAAK6wJ,QAAQjuI,OAASzc,SAASyc,EAAQ,IACvC5iB,KAAK8wJ,KAAKY,UAAU1xJ,KAAKgxJ,gBAAiB,EAAG,EAAGhxJ,KAAK6wJ,QAAQluI,MAAO3iB,KAAK6wJ,QAAQjuI,QACjF5iB,KAAK8wJ,KAAKY,UAAU1xJ,KAAKixJ,cAAejxJ,KAAK6wJ,QAAQluI,MAAQ3iB,KAAKixJ,cAActuI,MAAO3iB,KAAK6wJ,QAAQjuI,OAC9F5iB,KAAKixJ,cAAcruI,OAAQ5iB,KAAKixJ,cAActuI,MAAO3iB,KAAKixJ,cAAcruI,QAG9E5iB,KAAK8wJ,KAAKa,YACV3xJ,KAAK8wJ,KAAKc,UAAY,EACtB5xJ,KAAK8wJ,KAAKe,YAAc,UACxB7xJ,KAAK8wJ,KAAKgB,KAAK9xJ,KAAK6wJ,QAAQluI,MAAQ3iB,KAAKixJ,cAActuI,MAAO3iB,KAAK6wJ,QAAQjuI,OAAS5iB,KAAKixJ,cAAcruI,OACnG5iB,KAAKixJ,cAActuI,MAAO3iB,KAAKixJ,cAAcruI,QACjD5iB,KAAK8wJ,KAAKiB,QACd,CASAz1H,UAAUo4C,GACN,OAAOA,EAAgB3hD,gBAAgD,YAA9B2hD,EAAgB1hD,SAC7D,CAQAuxE,YAAYjG,GAAe,IAAA0zD,EACvB,MAAMpB,EAAkBtyD,EAAchR,iBAAiB,IACjD,OAAE1qE,EAAM,MAAED,GAAuC,QAAhCqvI,EAAGpB,EAAgBj+D,qBAAa,IAAAq/D,EAAAA,EAAIpB,EAAgBvyD,iBAqB3E,OAlBAr+F,KAAKyxJ,eAAiBnzD,EACtBt+F,KAAKgxJ,gBAAgBruI,MAAQxc,SAASwc,EAAO,IAC7C3iB,KAAKgxJ,gBAAgBpuI,OAASzc,SAASyc,EAAQ,IAC/C5iB,KAAKgxJ,gBAAgBG,UAAW,EAChCnxJ,KAAKgxJ,gBAAgBv0D,UAAY6B,EAGjCt+F,KAAKgxJ,gBAAgBI,OAErBpxJ,KAAK6wJ,QAAQluI,MAAQxc,SAASwc,EAAO,IACrC3iB,KAAK6wJ,QAAQjuI,OAASzc,SAASyc,EAAQ,IACvC5iB,KAAKiyJ,uBAAyB,IAAIp3H,OAAO21H,GAAmB,CAAEzwJ,KAAM,4BACpEC,KAAKiyJ,uBAAuB/pE,UAAYloF,KAAKsxJ,mBAC7CtxJ,KAAKiyJ,uBAAuBrlJ,YAAY,CACpCiZ,GDxHgB,ECyHhB3B,OAAQ,IAAOlkB,KAAKkxJ,aAGjBlxJ,KAAK6wJ,QAAQqB,cAAclyJ,KAAKkxJ,WAC3C,CAOA1sD,aACIxkG,KAAKiyJ,uBAAuBrlJ,YAAY,CACpCiZ,GD5HkB,IC8HtB7lB,KAAKiyJ,uBAAuBrnF,WAChC,ECpJJ,IACMunF,GAaN,UAbMA,GAAa,0BAGnB,SAASC,GAGJ,IAAqDC,GAAjDD,OAAuB,KAF9BA,EAASA,GAAU,CAAC,GAEsBA,EAAO,CAAC,GAA2D,MAAE,IAAI/9I,SAAQ,SAASC,EAAQC,GAAQ89I,EAAoB/9I,CAAiC,IAAG,IAA2B5M,EAAvB4qJ,EAAgB,CAAC,EAAU,IAAI5qJ,KAAO0qJ,EAAWA,EAAOvyI,eAAenY,KAAM4qJ,EAAgB5qJ,GAAK0qJ,EAAO1qJ,IAAM,IAAyG6qJ,EAA6BC,EAAlIC,EAAW,GAAgNF,EAAmC,iBAATzpJ,OAAkB0pJ,EAA6C,mBAAhBE,cAAgE,iBAAVrlJ,SAA8C,iBAAnBA,QAAQC,UAA4BD,QAAQC,SAASyiB,KAAuG,IAA4K4iI,EAAxKC,EAAgB,IAAqLL,GAAoBC,KAA0BA,EAAuBI,EAAgB96J,KAAKgnD,SAAS2/B,KAAatkD,SAAS04H,gBAAeD,EAAgBz4H,SAAS04H,cAAcv4H,KAAO63H,KAAYS,EAAgBT,IAAoDS,EAAH,IAAnCA,EAAgBhyJ,QAAQ,SAA8BgyJ,EAAgBt0G,OAAO,EAAEs0G,EAAgB1nI,YAAY,KAAK,GAAwB,GAAmIsnI,IAAuBG,EAAW,SAAoB5jH,GAAK,IAAI+jH,EAAI,IAAI5iB,eAAuF,OAAxE4iB,EAAIxiB,KAAK,MAAMvhG,GAAI,GAAO+jH,EAAIC,aAAa,cAAcD,EAAI18G,KAAK,MAAa,IAAIz9B,WAAWm6I,EAAIxmH,SAAS,IAA8V,IAAiY0mH,EAAmOC,EAAhmBC,EAAId,EAAc,OAAGlpJ,QAAQ+G,IAAImgB,KAAKlnB,SAAagjB,EAAIkmI,EAAiB,UAAGlpJ,QAAQC,KAAKinB,KAAKlnB,SAAS,IAAIxB,KAAO4qJ,EAAoBA,EAAgBzyI,eAAenY,KAAM0qJ,EAAO1qJ,GAAK4qJ,EAAgB5qJ,IAAM4qJ,EAAgB,KAAQF,EAAkB,YAAEK,EAAWL,EAAkB,WAAKA,EAAoB,aAAcA,EAAoB,YAAKA,EAAa,MAAQA,EAAa,KAAoBA,EAAmB,aAAEY,EAAWZ,EAAmB,YAAuBA,EAAsB,eAAgBA,EAAsB,cAA0B,iBAAde,aAAwBjnI,EAAI,mCAAkD,IAAiO+5C,EAAamtF,EAAsBC,EAAhQC,EAAU,IAAIH,YAAYI,MAAM,CAAC,QAAU,EAAE,QAAU,EAAI,QAAU,YAAgBC,GAAM,EAAoM,SAASC,EAA2Br4B,GAAKn1D,EAAOm1D,EAAIg3B,EAAc,MAAQ,IAAIsB,UAAUt4B,GAAKg3B,EAAe,OAAS,IAAIuB,WAAWv4B,GAAKg3B,EAAe,OAAEiB,EAAO,IAAIO,WAAWx4B,GAAKg3B,EAAe,OAAEgB,EAAO,IAAIz6I,WAAWyiH,GAAKg3B,EAAgB,QAAU,IAAIyB,YAAYz4B,GAAKg3B,EAAgB,QAAU,IAAI0B,YAAY14B,GAAKg3B,EAAgB,QAAU,IAAI5gC,aAAa4J,GAAKg3B,EAAgB,QAAU,IAAI2B,aAAa34B,EAAI,CAAC,IAAkD44B,EAAuB5B,EAAuB,gBAAG,SAA2V,SAAS6B,EAAqBC,GAAW,KAAMA,EAAUxwJ,OAAO,GAAE,CAAC,IAAIwT,EAASg9I,EAAUniH,QAAQ,GAAoB,mBAAV76B,EAAV,CAA0D,IAAImpD,EAAKnpD,EAASmpD,KAAsB,iBAAPA,OAAmC//D,IAAf4W,EAASi9I,IAAiB/B,EAAkB,UAAE/xF,GAAW+xF,EAAmB,WAAE/xF,EAAKnpD,EAASi9I,KAAW9zF,OAAoB//D,IAAf4W,EAASi9I,IAAgB,KAAKj9I,EAASi9I,IAAzM,MAAzBj9I,EAASk7I,EAA8N,CAAC,EAAnqBa,EAAtBb,EAAmB,WAAcA,EAAmB,WAAkB,IAAIe,YAAYiB,OAAO,CAAC,QAAUJ,EAAhxB,MAAszB,QAAU,WAA2C/tF,EAAOgtF,EAAWhtF,QAAO+tF,EAAuB/tF,EAAOqyB,WAAWm7D,EAA2BxtF,GAAQotF,EAAOgB,OAA7Y,QAAwxB,IAAIC,EAAa,GAAOC,EAAW,GAAOC,EAAW,GAAOC,EAAc,GAA6sBC,EAAgB,EAAMC,EAAqB,KAASC,EAAsB,KAA2iB,SAASC,EAAMh3C,GAA2K,MAAlKu0C,EAAgB,SAAGA,EAAgB,QAAEv0C,GAAeq1C,EAATr1C,GAAM,IAAa3xF,EAAI2xF,GAAM21C,GAAM,EAAkB31C,EAAK,SAASA,EAAK,+CAAqD,IAAIs1C,YAAY2B,aAAaj3C,EAAK,CAA5Ru0C,EAAwB,gBAAE,CAAC,EAAEA,EAAwB,gBAAE,CAAC,EAAgZ,SAAS2C,EAAUC,GAAU,OAArL1rH,EAAsM0rH,EAAlMxpE,EAA4G,wCAA7F9/B,OAAOtqD,UAAU6xC,WAAW3J,EAAI2J,WAAWu4C,GAA8B,IAAtBliD,EAAI1oC,QAAQ4qF,GAArG,IAAmBliD,EAAIkiD,CAAyN,CAAC,IAAlmKypE,EAAsmKC,EAAe,eAAwF,SAASC,IAAY,IAAI,GAAGnC,EAAY,OAAO,IAAIr6I,WAAWq6I,GAAY,GAAGL,EAAY,OAAOA,EAAWuC,GAAqB,KAAK,iDAAkD,CAAC,MAAMhpI,GAAK2oI,EAAM3oI,EAAI,CAAC,CAAu5D,SAASkpI,EAA0BjnJ,GAAM,IAAqG,OAAjG8kJ,EAAWoC,KAAKlnJ,EAAK83D,EAAOqyB,WAAW,QAAQ,IAAIm7D,EAA2BR,EAAWhtF,QAAe,CAAC,CAAC,MAAMz2D,GAAG,CAAC,CAA30EulJ,EAAUG,KAAlpKD,EAA6rKC,EAA1BA,EAA1pK9C,EAAmB,WAAUA,EAAmB,WAAE6C,EAAKrC,GAAwBA,EAAgBqC,GAAqgOV,EAAWjlJ,KAAK,CAAC+wD,KAAK,WAAWi1F,GAAoB,IAAy4B,IAAynCC,EAArnCC,EAAc,CAAC,EAAx5B,SAAgCC,EAAKn7H,EAAIqD,GAAKy1H,EAAOsC,WAAWD,EAAKn7H,EAAIA,EAAIqD,EAAI,EAAk2B,EAAroB,SAAiCg4H,GAAeA,KAA8B,EAAE,IAAIC,EAApQxC,EAAO1vJ,OAA6TmyJ,EAAY,WAAW,GAAGF,EAAcE,EAAa,OAAO,EAA+B,IAAzB,IAAnvLjtH,EAAoxLktH,EAAQ,EAAEA,GAAS,EAAEA,GAAS,EAAE,CAAC,IAAIC,EAAkBH,GAAS,EAAE,GAAGE,GAAiP,GAAxOC,EAAkBx6I,KAAK4yB,IAAI4nH,EAAkBJ,EAAc,WAA0IP,EAAnH75I,KAAK4yB,IAAI0nH,IAA77LjtH,EAAi9LrtB,KAAKC,IAAnN,SAAmOm6I,EAAcI,IAA7U,MAA7oL,IAAGntH,GAA0oL,MAA9nLA,EAA8nL,OAA5mLA,KAA+hM,OAAO,CAAK,CAAC,OAAO,CAAK,EAA2E,OAASqqH,EAAW,MAAQK,GAAoCgC,GAAr3E,WAAsB,IAAI3rJ,EAAK,CAAC,EAAI6rJ,GAAe,SAASQ,EAAgBvqI,EAAS9zB,GAAQ,IAAID,EAAQ+zB,EAAS/zB,QAAQ06J,EAAY,IAAE16J,EAAxtD,SAA6BmuB,GAA6G,GAAzG6uI,IAAqBtC,EAA+B,wBAAGA,EAA+B,uBAAEsC,GAAqC,GAAjBA,IAA8C,OAAvBC,IAA6Bj7I,cAAci7I,GAAsBA,EAAqB,MAAQC,GAAsB,CAAC,IAAI19I,EAAS09I,EAAsBA,EAAsB,KAAK19I,GAAU,CAAE,CAA63C++I,EAAuC,CAAsC,SAASC,EAA0Bl8B,GAAQg8B,EAAgBh8B,EAAiB,SAAE,CAAC,SAASm8B,EAAuBh7H,GAAU,OAA1tB63H,IAAaT,IAAoBC,GAAuC,mBAARz8G,MAAwQ,IAAI1hC,SAAQ,SAASC,EAAQC,GAAQD,EAAQ6gJ,IAAY,IAAtSp/G,MAAMm/G,EAAe,CAACh0E,YAAY,gBAAgBnhE,MAAK,SAASusB,GAAU,IAAIA,EAAa,GAAG,KAAK,uCAAuC4oH,EAAe,IAAI,OAAO5oH,EAAsB,aAAG,IAAGpsB,OAAM,WAAW,OAAOi1I,GAAW,KAAsbp1I,MAAK,SAASq2I,GAAQ,OAAOjD,YAAYkD,YAAYD,EAAOzsJ,EAAK,IAAGoW,KAAKob,GAAS,SAASzmB,GAAQwX,EAAI,0CAA0CxX,GAAQmgJ,EAAMngJ,EAAO,GAAE,CAAwjB,GAA1wFggJ,IAAqBtC,EAA+B,wBAAGA,EAA+B,uBAAEsC,GAAqrFtC,EAAwB,gBAAG,IAAgE,OAAhDA,EAAwB,gBAAEzoJ,EAAKqsJ,EAA+B,CAAC,MAAMxmJ,GAAgE,OAA7D0c,EAAI,sDAAsD1c,IAAU,CAAK,EAAtvB,WAA4B,GAAIwjJ,GAAsD,mBAAnCG,YAAYmD,sBAAoCvB,EAAUG,IAAgC,mBAARn/G,MAAwX,OAAOogH,EAAuBD,GAAlYngH,MAAMm/G,EAAe,CAACh0E,YAAY,gBAAgBnhE,MAAK,SAASusB,GAAqE,OAAhD6mH,YAAYmD,qBAAqBhqH,EAAS3iC,GAAoBoW,KAAKm2I,GAA0B,SAASxhJ,GAAuG,OAA/FwX,EAAI,kCAAkCxX,GAAQwX,EAAI,6CAAoDiqI,EAAuBD,EAA0B,GAAE,GAAiE,CAAkMK,EAA2B,CAAwjCC,GAAoCpE,EAA2B,mBAAE,WAAW,OAAOkD,EAAmBlD,EAA2B,mBAAEA,EAAY,IAAK,GAAG7/I,MAAM,KAAK9O,UAAU,GAA48B,SAASgzJ,EAAI3jJ,GAA8F,SAAS4jJ,IAAWnB,IAAiBA,GAAU,EAAKnD,EAAkB,WAAE,EAAQoB,IAAj2LS,EAAqBM,GAA+BN,EAAqBO,GAA6zLnC,EAAoBD,GAAWA,EAA6B,sBAAEA,EAA6B,uBAA54L,WAAmB,GAAGA,EAAgB,QAAiF,IAAjD,mBAAnBA,EAAgB,UAAcA,EAAgB,QAAE,CAACA,EAAgB,UAASA,EAAgB,QAAE1uJ,QAA6Jo9D,EAAxIsxF,EAAgB,QAAErgH,QAA0H0iH,EAAc/7F,QAAQoI,GAAhD,IAAsBA,EAA5GmzF,EAAqBQ,EAAc,CAA6qLkC,IAAS,CAArT7jJ,EAAKA,GAAM2/I,EAAciC,EAAgB,IAA5+L,WAAkB,GAAGtC,EAAe,OAA8E,IAA/C,mBAAlBA,EAAe,SAAcA,EAAe,OAAE,CAACA,EAAe,SAASA,EAAe,OAAE1uJ,QAA+co9D,EAA3bsxF,EAAe,OAAErgH,QAA8auiH,EAAa57F,QAAQoI,GAA9C,IAAqBA,EAAhamzF,EAAqBK,EAAa,CAA4xLsC,GAAYlC,EAAgB,IAA0OtC,EAAkB,WAAGA,EAAkB,UAAE,cAAc34H,YAAW,WAAWA,YAAW,WAAW24H,EAAkB,UAAE,GAAG,GAAE,GAAGsE,GAAO,GAAE,IAAQA,KAAQ,CAAmB,GAA/6CtE,EAAsB,cAAE,WAAW,OAAqBA,EAAsB,cAAEA,EAAY,IAAK,GAAG7/I,MAAM,KAAK9O,UAAU,EAAsB2uJ,EAAwB,gBAAE,WAAW,OAAuBA,EAAwB,gBAAEA,EAAY,IAAK,GAAG7/I,MAAM,KAAK9O,UAAU,EAAc2uJ,EAAgB,QAAE,WAAW,OAAeA,EAAgB,QAAEA,EAAY,IAAK,GAAG7/I,MAAM,KAAK9O,UAAU,EAAuB2uJ,EAAyB,iBAAE,WAAW,OAAwBA,EAAyB,iBAAEA,EAAY,IAAK,GAAG7/I,MAAM,KAAK9O,UAAU,EAAY2uJ,EAAc,MAAE,WAAW,OAAaA,EAAc,MAAEA,EAAY,IAAK,GAAG7/I,MAAM,KAAK9O,UAAU,EAA6B2uJ,EAA+B,uBAAE,WAAW,OAA8BA,EAA+B,uBAAEA,EAAY,IAAK,GAAG7/I,MAAM,KAAK9O,UAAU,EAAgBmxJ,EAAsB,SAASiC,IAAgBtB,GAAUkB,IAAUlB,IAAUX,EAAsBiC,EAAS,EAAuezE,EAAY,IAAEqE,EAAOrE,EAAgB,QAAiF,IAAjD,mBAAnBA,EAAgB,UAAcA,EAAgB,QAAE,CAACA,EAAgB,UAASA,EAAgB,QAAE1uJ,OAAO,GAAG0uJ,EAAgB,QAAEx+F,KAAlBw+F,GAGxxV,OAHs0VqE,IAG/zVrE,EAAOzxG,KAChB,GCUe,MAAMm2G,GAOjBv1J,YAAYw1J,GAGR,IAMI,GALA/2J,KAAKg3J,eAAiBD,EAGtB/2J,KAAKi3J,cAAgBj3J,KAAKg3J,eAAeE,QA1BzBC,OA4BXn3J,KAAKi3J,cACN,MAAM/1J,MAAM,8CAKhB,GAFAlB,KAAKo3J,eAAiBp3J,KAAKg3J,eAAeE,QAhC1BC,OAkCXn3J,KAAKo3J,eAEN,MADAL,EAAcM,MAAMr3J,KAAKi3J,eACnB/1J,MAAM,+CAMhBlB,KAAKs3J,sBAAwBt3J,KAAKi3J,cAAgB,EAElDj3J,KAAKu3J,SAAWv3J,KAAKg3J,eAAeQ,iBACxC,CAAE,MAAO53J,GAGL,MADAI,KAAKy3J,wBACC73J,CACV,CACJ,CAQA83J,2BAA2BjlC,GACvBzyH,KAAKg3J,eAAeW,QAAQ7xI,IAAI2sG,EAAWzyH,KAAKs3J,sBACpD,CAQAM,mBAAmBC,GACf,IAAK,MAAQ36H,EAAOv1B,KAAWkwJ,EAASz8I,UACpCy8I,EAAS36H,GAAiB,MAARv1B,CAE1B,CAQA8vJ,wBAEQz3J,KAAKi3J,gBACLj3J,KAAKg3J,eAAeK,MAAMr3J,KAAKi3J,eAC/Bj3J,KAAKi3J,cAAgB,MAGrBj3J,KAAKo3J,iBACLp3J,KAAKg3J,eAAeK,MAAMr3J,KAAKo3J,gBAC/Bp3J,KAAKo3J,eAAiB,MAGtBp3J,KAAKu3J,WACLv3J,KAAKg3J,eAAec,iBAAiB93J,KAAKu3J,UAC1Cv3J,KAAKu3J,SAAW,KAExB,CAOA1lC,kBACI,OA7G6B,GA8GjC,CAOAF,0BACI,OA5Gc,KA6GlB,CAQA9G,UAEQ7qH,KAAKozH,aAITpzH,KAAKy3J,wBAELz3J,KAAKozH,YAAa,EACtB,CASAT,uBAAuBolC,GACnB,GAAI/3J,KAAKozH,WACL,MAAM,IAAIlyH,MAAM,sEAGpB,MAAM82J,EAAiBD,EAASr0J,OAEhC,GAxJ6B,MAwJzBs0J,EACA,MAAM,IAAI92J,MAAO,wEAAuE82J,KAM5F,OAHAh4J,KAAK43J,mBAAmBG,GACxB/3J,KAAK03J,2BAA2BK,GAEzB/3J,KAAKg3J,eAAeiB,uBAAuBj4J,KAAKu3J,SAAUv3J,KAAKo3J,eAAgBp3J,KAAKi3J,cAC/F,EC1JJ,IAAIiB,6BCNG,MCwBM1H,GAAoB91H,IAAIC,gBAAgB,IAAIF,KAAK,CArBhD,gaAqB0D,CAAEr3B,KAAM,4BCVjE,MAAM+0J,GAKjB52J,YAAY2V,GACRlX,KAAKkX,SAAWA,EAChBlX,KAAKo4J,eAAiBj+H,SAASwgE,cAAc,UAC7C36F,KAAKq4J,sBAAwBr4J,KAAKo4J,eAAerH,WAAW,MAC5D/wJ,KAAKixJ,cAAgB92H,SAASwgE,cAAc,SAG5C36F,KAAKs4J,oBAAsBt4J,KAAKs4J,oBAAoBloI,KAAKpwB,MACzDA,KAAKu4J,uBAAyBv4J,KAAKu4J,uBAAuBnoI,KAAKpwB,MAC/DA,KAAKw4J,cAAgB,IAAI39H,OAAO21H,GAAmB,CAAEzwJ,KAAM,8BAC3DC,KAAKw4J,cAActwE,UAAYloF,KAAKs4J,mBACxC,CAUA/zD,YAAY73F,EAAQsmB,GAChB,OAAO,IAAI3e,SAAQ,CAACC,EAASC,KAAW,IAAAkkJ,EAClB,YAAdzlI,GACAze,IAEJ,MAAM2qG,EAAexyG,EAAO4gF,iBAAiB,IACvC,OAAE1qE,EAAM,MAAED,GACgB,QADT81I,EACjBv5C,EAAavsB,qBAAa,IAAA8lE,EAAAA,EAAIv5C,EAAa7gB,iBAEjDr+F,KAAK04J,cAAgB91I,EACrB5iB,KAAK24J,aAAeh2I,EACpB3iB,KAAKo4J,eAAex1I,OAASzc,SAASyc,EAAQ,IAC9C5iB,KAAKo4J,eAAez1I,MAAQxc,SAASwc,EAAO,IAC5C3iB,KAAKixJ,cAAcruI,OAASzc,SAASyc,EAAQ,IAC7C5iB,KAAKixJ,cAActuI,MAAQxc,SAASwc,EAAO,IAC3C3iB,KAAKixJ,cAAcx0D,UAAY/vF,EAC/B1M,KAAKixJ,cAAcG,OAGnBpxJ,KAAKixJ,cAAcxlJ,iBAAiB,aAAczL,KAAKu4J,wBACvDjkJ,GAAS,GAEjB,CAOAkwF,aACIxkG,KAAKw4J,cAAc5rJ,YAAY,CAAEiZ,GF3CX,IE4CtB7lB,KAAKixJ,cAAct3H,oBAAoB,aAAc35B,KAAKu4J,uBAC9D,CAWAA,yBACI,MACMK,EADez+H,SAASwgE,cAAc,UACHo2D,WAAW,MAEpD6H,EAAoBlH,UAAU1xJ,KAAKixJ,cAAe,EAAG,EAAGjxJ,KAAK24J,aAAc34J,KAAK04J,eAChF,MAAM,KAAEtnJ,GAASwnJ,EAAoBC,aAAa,EAAG,EAAG74J,KAAK24J,aAAc34J,KAAK04J,eAEhF14J,KAAK84J,iBAAmB1nJ,EACxBpR,KAAKw4J,cAAc5rJ,YAAY,CAC3BiZ,GF3EgB,EE4EhB3B,OFxFiB,KE0FzB,CASAo0I,oBAAoB/3J,GAChB,OFrEwB,IEqEjBA,EAAQ6Q,KAAKyU,IAA2B7lB,KAAK+4J,mBACxD,CASAC,yBAAyBC,GACrB,OAAOA,GFpHkB,GEqH7B,CAQAF,oBACI/4J,KAAKq4J,sBAAsB3G,UAAU1xJ,KAAKixJ,cAAe,EAAG,EAAGjxJ,KAAK24J,aAAc34J,KAAK04J,eACvF,MAAM,KAAEtnJ,GAASpR,KAAKq4J,sBAAsBQ,aAAa,EAAG,EAAG74J,KAAK24J,aAAc34J,KAAK04J,eACjFQ,EAAaC,KAAW/nJ,EAAMpR,KAAK84J,iBAAkB,KAAM94J,KAAK24J,aAAc34J,KAAK04J,eAErF14J,KAAKg5J,yBAAyBE,KAC9Bl5J,KAAK84J,iBAAmB1nJ,EACxBpR,KAAKkX,SAASlX,KAAKo4J,gBAE3B,EC3IG,MAAMgB,GACF,QADEA,GAEM,gBCwDN5I,GAAoB91H,IAAIC,gBAAgB,IAAIF,KAAK,CArBhD,8ZAqB0D,CAAEr3B,KAAM,4BC1CjE,MAAMi2J,GAQjB93J,YAAY+3J,EAAOz5J,GAQ+E,IAAA05J,EAAAC,EAAAC,EAP9Fz5J,KAAK+yC,SAAWlzC,EAEZG,KAAK+yC,SAAS2mH,kBAAkBC,iBAAmBP,KACnDp5J,KAAK45J,cAAgBz/H,SAASwgE,cAAc,OAC5C36F,KAAK45J,cAAcC,YAAc,YACjC75J,KAAK45J,cAAct/H,IAAMt6B,KAAK+yC,SAAS2mH,kBAAkBI,eAEzD95J,KAAK+yC,SAAS2mH,kBAAkBC,iBAAmBP,KACnDp5J,KAAK+5J,cAAgB5/H,SAASwgE,cAAc,SAC5C36F,KAAK+5J,cAAc5I,UAAW,EAC9BnxJ,KAAK+5J,cAAct9D,UAAyB,QAAhB88D,EAAGv5J,KAAK+yC,gBAAQ,IAAAwmH,GAAmB,QAAnBC,EAAbD,EAAeG,yBAAiB,IAAAF,GAAe,QAAfC,EAAhCD,EAAkCM,qBAAa,IAAAL,OAAlC,EAAbA,EAAiD/sJ,QAEpF1M,KAAKg6J,OAASV,EACdt5J,KAAKi6J,wBAA0Bj6J,KAAK+yC,SAASpwB,MAAQ3iB,KAAK+yC,SAASnwB,OAGnE5iB,KAAKk6J,kBAAoBl6J,KAAKk6J,kBAAkB9pI,KAAKpwB,MAGrDA,KAAKm6J,qBAAuBhgI,SAASwgE,cAAc,UACnD36F,KAAKm6J,qBAAqBpJ,WAAW,MACrC/wJ,KAAKo6J,mBAAqBjgI,SAASwgE,cAAc,QACrD,CASAu/D,kBAAkB5tH,GD1BM,IC2BhBA,EAASl7B,KAAKyU,IACd7lB,KAAKq6J,aAEb,CAOAC,oBACIt6J,KAAKu6J,iBAAiBC,yBAA2B,OAM7Cx6J,KAAK+yC,SAAS2mH,kBAAkBC,iBAAmBP,GACnDp5J,KAAKu6J,iBAAiBtiJ,OAAS,YAE/BjY,KAAKu6J,iBAAiBtiJ,OAAS,YAGnCjY,KAAKu6J,iBAAiB7I,UAClB1xJ,KAAKy6J,wBACL,EACA,EACAz6J,KAAK+yC,SAASpwB,MACd3iB,KAAK+yC,SAASnwB,OACd,EACA,EACA5iB,KAAKo6J,mBAAmBz3I,MACxB3iB,KAAKo6J,mBAAmBx3I,QAE5B5iB,KAAKu6J,iBAAiBC,yBAA2B,YACjDx6J,KAAKu6J,iBAAiBtiJ,OAAS,OAK/BjY,KAAKu6J,iBAAiB7I,UAAU1xJ,KAAKo6J,mBAAoB,EAAG,GAK5Dp6J,KAAKu6J,iBAAiBC,yBAA2B,mBAC7Cx6J,KAAK+yC,SAAS2mH,kBAAkBC,iBAAmBP,IACnDp5J,KAAKu6J,iBAAiB7I,UAClB1xJ,KAAK45J,cACL,EACA,EACA55J,KAAKo6J,mBAAmBz3I,MACxB3iB,KAAKo6J,mBAAmBx3I,QAG5B5iB,KAAK+yC,SAAS2mH,kBAAkBC,iBAAmBP,GACnDp5J,KAAKu6J,iBAAiB7I,UAClB1xJ,KAAK+5J,cACL,EACA,EACA/5J,KAAK06J,wBAAwB/3I,MAC7B3iB,KAAK06J,wBAAwB93I,SAGjC5iB,KAAKu6J,iBAAiBtiJ,OAAU,QAAOjY,KAAK+yC,SAAS2mH,kBAAkBiB,eACvE36J,KAAKu6J,iBAAiB7I,UAAU1xJ,KAAKo6J,mBAAoB,EAAG,GAEpE,CAOAQ,eACI56J,KAAKg6J,OAAOa,gBACZ,MAAMC,EAAqB96J,KAAKg6J,OAAOe,yBAA2B,EAElE,IAAK,IAAIh1J,EAAI,EAAGA,EAAI/F,KAAKi6J,wBAAyBl0J,IAAK,CACnD,MAAMi1J,EAAah7J,KAAKg6J,OAAOrC,QAAQmD,EAA0B,EAAJ/0J,GACvDk1J,EAASj7J,KAAKg6J,OAAOrC,QAAQmD,EAA0B,EAAJ/0J,EAAS,GAC5DgsC,EAAQx2B,KAAKC,IAAIw/I,EAAYC,GAC7BC,EAAgB3/I,KAAK4/I,IAAIH,EAAajpH,GACtCqpH,EAAY7/I,KAAK4/I,IAAIF,EAASlpH,GAGpC/xC,KAAKq7J,kBAAkBjqJ,KAAU,EAAJrL,EAAS,GAAM,IAAMq1J,GAAcF,EAAgBE,EACpF,CACAp7J,KAAKs7J,qBAAqBC,aAAav7J,KAAKq7J,kBAAmB,EAAG,EACtE,CAQAhB,cAAc,IAAAmB,EAAAC,EAAAC,EACV,MAAMC,EAAiC,QAAhBH,EAAGx7J,KAAK+yC,gBAAQ,IAAAyoH,GAAmB,QAAnBC,EAAbD,EAAe9B,yBAAiB,IAAA+B,GAAe,QAAfC,EAAhCD,EAAkC3B,qBAAa,IAAA4B,OAAlC,EAAbA,EAAiDr5I,MAEvEs5I,IACA37J,KAAK06J,wBAA0BiB,EAAkBhpE,YAAcgpE,EAAkBhpE,cAC3EgpE,EAAkBt9D,kBAE5Br+F,KAAK47J,eACL57J,KAAK46J,eACL56J,KAAKs6J,oBAELt6J,KAAK67J,sBAAsBjvJ,YAAY,CACnCiZ,GD3Je,EC4Jf3B,OAAQ,IAAO,IAEvB,CAOA03I,eACI57J,KAAKs7J,qBAAqB5J,UACtB1xJ,KAAKo6J,mBACL,EACA,EACAp6J,KAAKo6J,mBAAmBz3I,MACxB3iB,KAAKo6J,mBAAmBx3I,OACxB,EACA,EACA5iB,KAAK+yC,SAASpwB,MACd3iB,KAAK+yC,SAASnwB,QAGlB,MAAMk5I,EAAY97J,KAAKs7J,qBAAqBzC,aACxC,EACA,EACA74J,KAAK+yC,SAASpwB,MACd3iB,KAAK+yC,SAASnwB,QAEZm5I,EAAoB/7J,KAAKg6J,OAAOgC,wBAA0B,EAEhE,IAAK,IAAIj2J,EAAI,EAAGA,EAAI/F,KAAKi6J,wBAAyBl0J,IAC9C/F,KAAKg6J,OAAOrC,QAAQoE,EAAyB,EAAJh2J,GAAU+1J,EAAU1qJ,KAAS,EAAJrL,GAAS,IAC3E/F,KAAKg6J,OAAOrC,QAAQoE,EAAyB,EAAJh2J,EAAS,GAAK+1J,EAAU1qJ,KAAU,EAAJrL,EAAS,GAAK,IACrF/F,KAAKg6J,OAAOrC,QAAQoE,EAAyB,EAAJh2J,EAAS,GAAK+1J,EAAU1qJ,KAAU,EAAJrL,EAAS,GAAK,GAE7F,CASAu2B,UAAUo4C,GACN,OAAOA,EAAgB3hD,gBAAgD,WAA9B2hD,EAAgB1hD,SAC7D,CAQAuxE,YAAY73F,GACR1M,KAAK67J,sBAAwB,IAAIhhI,OAAO21H,GAAmB,CAAEzwJ,KAAM,uBACnEC,KAAK67J,sBAAsB3zE,UAAYloF,KAAKk6J,kBAC5C,MAAMtJ,EAAkBlkJ,EAAO4gF,iBAAiB,IAC1C,OAAE1qE,EAAM,UAAE2D,EAAS,MAAE5D,GACrBiuI,EAAgBj+D,YAAci+D,EAAgBj+D,cAAgBi+D,EAAgBvyD,iBAsBpF,OApBAr+F,KAAKq7J,kBAAoB,IAAIY,UAAUj8J,KAAK+yC,SAASpwB,MAAO3iB,KAAK+yC,SAASnwB,QAC1E5iB,KAAKy6J,wBAA0BtgI,SAASwgE,cAAc,UACtD36F,KAAKy6J,wBAAwB93I,MAAQ3iB,KAAK+yC,SAASpwB,MACnD3iB,KAAKy6J,wBAAwB73I,OAAS5iB,KAAK+yC,SAASnwB,OACpD5iB,KAAKs7J,qBAAuBt7J,KAAKy6J,wBAAwB1J,WAAW,MAEpE/wJ,KAAKm6J,qBAAqBx3I,MAAQxc,SAASwc,EAAO,IAClD3iB,KAAKm6J,qBAAqBv3I,OAASzc,SAASyc,EAAQ,IACpD5iB,KAAKu6J,iBAAmBv6J,KAAKm6J,qBAAqBpJ,WAAW,MAC7D/wJ,KAAKo6J,mBAAmBz3I,MAAQxc,SAASwc,EAAO,IAChD3iB,KAAKo6J,mBAAmBx3I,OAASzc,SAASyc,EAAQ,IAClD5iB,KAAKo6J,mBAAmBjJ,UAAW,EACnCnxJ,KAAKo6J,mBAAmB39D,UAAY/vF,EACpC1M,KAAKo6J,mBAAmB8B,aAAe,KACnCl8J,KAAK67J,sBAAsBjvJ,YAAY,CACnCiZ,GDxOW,ECyOX3B,OAAQ,IAAO,IACjB,EAGClkB,KAAKm6J,qBAAqBjI,cAAc/rJ,SAASogB,EAAW,IACvE,CAOAi+E,aACIxkG,KAAK67J,sBAAsBjvJ,YAAY,CACnCiZ,GD7OiB,ICgPrB7lB,KAAK67J,sBAAsBjxF,WAC/B,gDClQJ,MAKMuxF,GACO,CACLv5I,OAAQ,GACRD,MAAO,KAHTw5I,GAKQ,CACNv5I,OAAQ,IACRD,MAAO,KC6BTlZ,IAASC,EAAAA,EAAAA,uCAef,SAAS0yJ,GAAkCv8J,GACvC,MAAMqD,EAAkB,CAAC,EAUzB,OARAA,EAA4B,gBAAIrD,EAAQC,QAAQiwC,SAAS,SACzD7sC,EAA4B,gBAAIrD,EAAQC,QAAQiwC,SAAS,SACzD7sC,EAAqC,yBAAIrD,EAAQC,QAAQiwC,SAAS,WAE9D7sC,EAAWm5J,kBACXn5J,EAAW0a,WAAa/d,EAAQ+d,YAG7B1a,CACX,CA4CA,UAEIkC,QAAS,kBAET0lJ,gBAAe,GASfwR,uBf9GW,MAeX/6J,cAA0B,IAAd1B,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnB,MAAM,gBACF84J,KACG7+D,GACH79F,EAOJG,KAAK+yC,SAAW,CACZi3B,SAAUuyF,GAAmBA,EAAgBz0I,KAAKmjB,WAAWijB,OAAOuuB,gBACjEihB,GAQP19F,KAAKiuJ,gBAAkB,KAGvBjuJ,KAAKw8J,cAAgBx8J,KAAKw8J,cAAcpsI,KAAKpwB,MAC7CA,KAAKouJ,eAAiBpuJ,KAAKouJ,eAAeh+H,KAAKpwB,MAC/CA,KAAKmuJ,gBAAkBnuJ,KAAKmuJ,gBAAgB/9H,KAAKpwB,KACrD,CAgBAsuJ,eAAe/tJ,GACX,MAAM2rD,EAAU3rD,EAAQiqB,KAExB,IAAK0hC,EACD,OAMJ,GAAIlsD,KAAKiuJ,iBACFjuJ,KAAKiuJ,gBAAgBI,eAAiBniG,EAOzC,YANAlsD,KAAKw8J,cACDtwG,EACA2hG,GAAQx1J,iBACR,YAMR,MAAMg5C,EAAKrxC,KAAKy8J,oBAAoBl8J,EAAQ6Q,KAAKigC,IAC3Ck9G,EAAUl9G,GAAMA,EAAGpd,KAAK,UACxBhxB,EAASsrJ,GAAWA,EAAQ7tG,KAAK,UAEnCz9C,IAAW4qJ,GAAQa,WACnB1uJ,KAAKiuJ,gBAAkBjuJ,KAAKgvJ,sBAAsB9iG,EAAS,CACvDpqB,aAAa,EACbksH,cAAc,KAMlBhuJ,KAAKiuJ,iBACLjuJ,KAAKiuJ,gBAAgBK,eAAeC,GAKpCtrJ,IAAW4qJ,GAAQx1J,kBAChB4K,IAAW4qJ,GAAQ6O,aACnBz5J,IAAW4qJ,GAAQe,WACtB5uJ,KAAK28J,sBAIb,CAWAlmJ,MAAMy1C,GAA2B,IAAlBtvB,EAAWn5B,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GACzBzD,KAAKiuJ,gBAAkBjuJ,KAAKgvJ,sBAAsB9iG,EAAS,CACvDpqB,aAAa,EACbksH,cAAc,IAGlBpxH,EAAYxuB,SAAQ,CAAC8qG,EAAY0jD,KAC7B,MAAMC,EAAuBt0D,GAA2B,OAAQ2Q,EAAWzrF,UAAWmvI,GAEtF1jD,EAAW3iC,cAAcsmF,EAAqB,IAGlD78J,KAAKiuJ,gBAAgBx3I,MAAMmmB,EAC/B,CAOArjB,OACQvZ,KAAKiuJ,iBACLjuJ,KAAKiuJ,gBAAgB10I,OAGzBvZ,KAAKiuJ,gBAAkB,IAC3B,CAUAwO,oBAAoBK,GAChB,IACI,MAAMC,GAAS,IAAIC,WAAYC,gBAAgBH,EAAK,YAEpD,OAAOpyH,KAAEqyH,EACb,CAAE,MAAOvtJ,GAGL,OAFA/F,GAAO7J,MAAM,kDAEN,IACX,CACJ,CAaAovJ,sBAAsB9iG,GAAuB,IAAdrsD,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtC,IAAKyoD,EACD,MAAM,IAAIhrD,MAAM,mDAGpB,MAAMgsE,EAAY,CACdlD,SAAUhqE,KAAK+yC,SAASi3B,SACxBlf,QAAS9qD,KAAKw8J,cACdnN,eAAgBrvJ,KAAKmuJ,gBACrBmB,cAAetvJ,KAAKouJ,eACpBliG,aACGrsD,GAGP,OAAO,IAAIiuJ,GAAkB5gF,EACjC,CAgBAsvF,cAActwG,EAASk/F,GAAyB,IAAd/qE,EAAO58E,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,GACxCgG,GAAO7J,MACH,oCAAqCssD,EAASk/F,EAAW/qE,GAE7D,MAAMhvC,GAAKC,EAAAA,GAAAA,KAAI,CACXC,GAAI2a,EACJ9oD,KAAM,QAELqlC,EAAE,SAAU,CACT+D,MAAO,oBACPvpC,OAAQmoJ,IAEX3iH,EAAE,WACFpjB,EAAEg7D,GACFloC,KAELn4C,KAAKouJ,eAAeliG,EAAS7a,GAEzBrxC,KAAKiuJ,iBACFjuJ,KAAKiuJ,gBAAgBI,eAAiBniG,GACzClsD,KAAK28J,sBAEb,CAaAxO,gBAAgBiB,GACZ,IAAKpvJ,KAAK+yC,SAASs8G,eAIf,OAHA5lJ,GAAO7J,MAAM,gDACbwvJ,EAAiBlhJ,UAKrB,MAAMgvJ,EAAU9N,EAAiBr8H,eACjC,IAAIC,EAEAkqI,IACAlqI,EAAYhzB,KAAK+yC,SAASoqH,sBACpBlqI,GAAU,UAAVA,QAAoBA,GAAU,UAAVA,QAK9B,MAAMgsE,EAAcmwD,EAAiB7lI,oBAC/B6zI,EAAmBj9C,GAAIk9C,kBACzB,CACI,CACI/wE,SACK,SAAQtsF,KAAKiuJ,gBAAgBI,eAClCvqJ,UAAWo5J,EAAU7gJ,GAAUwK,MAAQxK,GAAUkL,MACjDyqC,WAAY,QACZtlD,OAAQuyF,EACR58E,MAAO48E,EAAY3R,iBAAiB,GACpCt6D,eAIZhzB,KAAK+yC,SAASs8G,eAAe+N,EAAiB,GAClD,CAUAhP,eAAeliG,EAAS7a,GACpB,GAAKrxC,KAAK+yC,SAASu8G,cAInB,IACI,MAAMgO,GACA,IAAIC,eAAgBC,kBAAkBnsH,EAAG8iG,UAAY9iG,GAE3DrxC,KAAK+yC,SAASu8G,cAAcpjG,EAAS,CAAE7a,GAAIisH,GAC/C,CAAE,MAAO9tJ,GACL/F,GAAO7J,MAAM,iDACjB,CACJ,CAQA+8J,uBACI38J,KAAKuZ,OAELvZ,KAAK+yC,SAAS0qH,oBACPz9J,KAAK+yC,SAAS0qH,oBACzB,GevMA5+D,QAAS,CACL6+D,sBCxHD,SAA+BhxJ,GAClC,OAAKgkF,iBAAiBtvF,UAAUuxF,aACxBjC,iBAAiBtvF,UAAUi9F,eAI5BhqF,QAAQC,QAAQ,IAAIm8I,GAA2B/jJ,IAH3C2H,QAAQE,OAAO,IAAIrT,MAAM,6CAIxC,EDkHQy8J,uBRlHD,WAKH,OAJKzF,KACDA,GAAgB0F,MAGb1F,GAAcn4I,MAAK89I,GAAO,IAAI/G,GAAiB+G,IAC1D,EQ6GQC,8BE1HD,SAAuC5mJ,GAC1C,OAAKw5E,iBAAiBtvF,UAAUuxF,aAAgBjC,iBAAiBtvF,UAAUi9F,eAIpEhqF,QAAQC,QAAQ,IAAI6jJ,GAAwBjhJ,IAHxC7C,QAAQE,OAAO,IAAIrT,MAAM,0CAIxC,EFqHQ68J,8BDzGDjkJ,eAA6C4/I,EAAmBsE,GACnE,IAAKttE,iBAAiBtvF,UAAUuxF,cAAgBjC,iBAAiBtvF,UAAUi9F,eACvE,MAAM,IAAIn9F,MAAM,8CAEpB,IAAI+8J,EACAC,EAMJ,IAAI,IAAAC,EAAAC,EACAF,EAAYzuJ,EAAQ,MAEhBwuJ,EADS,QAAbE,EAAID,SAAS,IAAAC,GAAS,QAATC,EAATD,EAAW/mI,eAAO,IAAAgnI,GAAlBA,EAAoBC,WACLC,aAEAC,MAEvB,CAAE,MAAOryI,GACL,MACJ,CAEA,MAAMsyI,EAAoBP,EAAOQ,8BAC3BC,QAAsB3oH,MAAMmoH,EAAU9mI,QAAQinI,KA9C1C,+CADD,gDAiDT,IAAKK,EAAcx9G,GACf,MAAM,IAAIhgD,MAAM,oCAGpB,MAAMo4J,QAAcoF,EAAcC,cAElCV,EAAO7K,OAAOttI,IAAI,IAAInN,WAAW2gJ,GAAQkF,GAEzCP,EAAOW,WAAWtF,EAAMhhE,YAExB,MAAMz4F,EAAU,IACTq+J,EAAU9mI,QAAQinI,KAAOlC,GAAkCA,GAC9DzC,qBAGJ,OAAO,IAAIL,GAA4B4E,EAAQp+J,EACnD,GCkEIg/J,UAAW,CACPC,UGzIR,CACIl/J,MAAO,CACHm/J,KAAM,OACNC,MAAO,QACPC,oBAAqB,sBACrBC,mBAAoB,qBACpBC,oBAAqB,uBAEzB1/G,KAAM,CACF2/G,KAAM,OACNC,OAAQ,UAEZ5qJ,OAAQ,CACJgjC,IAAK,MACLD,GAAI,KACJkyB,QAAS,YH2HT41F,WAAY5rB,EACZluF,oBAAqBjO,EACrB+9D,qBAAsBnD,IAE1BtsE,OAAQ,CACJxb,WAAYhxB,EACZ4xC,WAAYxS,EACZ8mI,UAAW1vC,EACXxtG,MAAOhkB,EACPgM,aAAciiJ,EACdr/B,kBAAmBT,EACnBmJ,QAASL,GAEbrZ,OAAQ,CACJ5xF,WAAYtyB,EACZkzC,WAAYpS,EACZxW,MAAOxjB,GAEX2gK,WAAY,CACR7/J,gBAAeA,IAEnB8/J,UAAWC,IAAAA,OACXr1J,aAAcs1J,GACd/2I,UAAWf,GAAWe,UACtB9U,aAAyB,IAAdjU,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClBzD,KAAKsc,KAAKzc,EACd,EACAyc,OAAwC,IAAnCzc,EAA4B4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7Bm8J,EAAa,IAAIzV,MAAkBtqJ,GACvCk/C,GAASziC,KAAKsjJ,EAAWjiH,iBACzB91B,GAAWvL,KAAKsjJ,GAChB,MAAMrjJ,EAAQqjJ,EAAWrjJ,OAAS,CAAC,EAoBnC,GAjBAiG,GAAAA,KAAkBjG,GAIbzT,OAAOumB,kBACRvmB,OAAOumB,gBAAkB,CAAC,IAGS,IAAnCxvB,EAAQggK,wBACR7/J,KAAK4oB,UAAU1a,UAGfrO,EAAQigK,4BACRttJ,KAAAA,WACIxS,KAAK+/J,wBAAwB3vI,KAAKpwB,OAGtCA,KAAKoF,QAAS,CACd,MAAM0rB,EAAY,CACdjL,GAAI,oBACJivC,UAAW,0BACX1vD,QAASpF,KAAKoF,SAGlByiB,GAAWuE,QAAQzjB,KAAKC,UAAUkoB,GACtC,CAEA,OAAOqvF,GAAI7jG,KAAKzc,EACpB,EAOAs/F,wBAAuBA,IACZghB,GAAIhhB,0BAWf6gE,kBAAiBA,IACN7/C,GAAI6/C,oBAGfC,YAAY3rI,GACRorI,IAAAA,YAAmBprI,EACvB,EAUA4rI,gBAAgB5rI,EAAOzO,GACnB65I,IAAAA,gBAAuBprI,EAAOzO,EAClC,EAQAs6I,sBAAsBC,GAClBV,IAAAA,mBAA0BU,EAC9B,EAQAC,yBAAyBD,GACrBV,IAAAA,sBAA6BU,EACjC,EASAE,oBAAoBzgK,GAChB6/J,IAAAA,iBAAwB7/J,EAC5B,EAwCAw9J,oBAA+F,IAA7Ex9J,EAAiC4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAG88J,EAAmC98J,UAAAC,OAAA,EAAAD,UAAA,QAAAnD,EACzF,GAAIwI,OAAOg2C,SAAS2/B,KAAK79E,QAAQ,gBAAkB,EAC/C,MAAO,GAGX,IAAI4/J,GAAmB,EAEvB,MAAM,iCAAEC,EAAgC,qBAAEC,KAAyBC,GAAgB9gK,EAoBnF,OAnB6B4gK,IAAoCF,GAEpCpgD,GAAI7gB,2CAGtBohE,GACP53J,OAAO2wB,YAAW,KACT+mI,GACDb,GAAAA,UAA4BrT,GAChC,GAlRwB,KA6Q5BqT,GAAAA,UAA4BrT,GAAoDr+I,GAAQzH,WASvFsC,OAAOumB,kBACRvmB,OAAOumB,gBAAkB,CAAC,GAE9BvmB,OAAOumB,gBAAgB,2BACjBvmB,OAAO4pB,YAAY3W,MAElBokG,GAAI1iB,+BAA+BkjE,GACrC5gJ,MAAKkzD,IAWF,GAVAutF,GAAmB,EAEnB13J,OAAOumB,gBAAgB,yBACjBvmB,OAAO4pB,YAAY3W,MAEzB8L,GAAWmF,cACPxpB,GACI,UACA44J,GAAkCuE,KAEtC3gK,KAAK4gK,yBACL,IAAK,IAAI76J,EAAI,EAAGA,EAAIktE,EAAOvvE,OAAQqC,IAAK,CACpC,MAAMsc,EAAQ4wD,EAAOltE,GAEjBsc,EAAMoL,YAAcpR,GAAUkL,OAC9BM,GAAWsB,gBAAgB9G,EACvBA,EAAMkS,cAAcnE,KAAK/N,GAErC,CAIJ,MAAMw+I,EACA1gD,GAAI9gB,oCAEV,GAAIwhE,EACA,IAAK,IAAI96J,EAAI,EAAGA,EAAIktE,EAAOvvE,OAAQqC,IACjBktE,EAAOltE,GAEf28F,+BACFm+D,GAMZ,IAAK,MAAMx+I,KAAS4wD,EACZ5wD,EAAMjf,OAASiZ,GAAUwK,OACF,YAApBxE,EAAM2Q,WACThzB,KAAK8gK,0BAA0Bz+I,EAAMA,MAAO,UAIpD,OAAO4wD,CAAM,IAEhB/yD,OAAMtgB,IAGH,GAFA4gK,GAAmB,EAEf5gK,EAAMG,OAASlB,GAA8C,CAI7D,MAAMiyB,EAAY,CACdjL,GAAI,8BACJtlB,QAASX,EAAMW,SAGnBsnB,GAAWuE,QAAQzjB,KAAKC,UAAUkoB,IAElCjJ,GAAWmF,cACPxpB,GACI,UACA,CACIkR,OAAQ,oCAExB,MAAO,GAAI9U,EAAMG,OAASlB,GAA4B,CAElD,MAAMiyB,EAAY,CACdjL,GAAI,2BACJpR,OAAQ7U,EAAMK,IAAIH,SAGtB+nB,GAAWuE,QAAQzjB,KAAKC,UAAUkoB,IAElC,MAAM5tB,EACAk5J,GAAkCv8J,GAExCqD,EAAWwR,OAAS,mBACpBxR,EAAWpD,QAAUF,EAAMK,IAAIH,QAAQU,KAAK,KAC5CqnB,GAAWmF,cACPxpB,GAAwB,QAASN,GACzC,KAAO,CAEH2kB,GAAWoE,uBAAuBrsB,GAElC,MAAMsD,EACAk5J,GAAkCv8J,GAExCqD,EAAWwR,OAAS9U,EAAMG,KAC1B8nB,GAAWmF,cACPxpB,GAAwB,QAASN,GACzC,CAKA,OAHA4F,OAAOumB,gBAAgB,yBACjBvmB,OAAO4pB,YAAY3W,MAElB1H,QAAQE,OAAO3U,EAAM,GAExC,EAkBAmhK,sBAAqBA,CAACC,EAAoBtvC,EAAYP,IAC3CF,GAAgB3vH,OAAO0/J,EAAoBtvC,EAAYP,GASlE8vC,iBAAgBA,IACL,IAAIjR,GAQfkR,qBAAoBA,InBncb,IAAI7sJ,SAAQC,IACf6rG,GAAIh0B,kBAAiBrsF,IACjB,MAAMqhK,EAAerhK,EAAQmY,QAAO2jF,GAA0B,eAAhBA,EAAOh1E,OAC/Cw6I,EAAqB,GAG3B,IAAK,MAAMC,KAAaF,EAAc,CAClC,MAAMG,EAAgBnhD,GAAI1iB,+BAA+B,CAAE39F,QAAS,CAAE,SAClEs+F,YAAaijE,EAAU/0E,WAAYvsE,MAAKkzD,IAIxC,MAAM5wD,EAAQ4wD,EAAO,GAIrB,OAFAprD,GAAWsB,gBAAgB9G,EAAOA,EAAMkS,cAAcnE,KAAK/N,IAEpDA,CAAK,IAGhB++I,EAAmB9xJ,KAAKgyJ,EAC5B,CAEAjtJ,QAAQorB,WAAW2hI,GAAoBrhJ,MAAKwhJ,IACxC,MAAMC,EAAqBD,EAAatpJ,QAAOic,GAAkB,cAAbA,EAAEzf,SAChDgtJ,EAAmBF,EAAatpJ,QAAOic,GAAkB,aAAbA,EAAEzf,SAG9CsmF,EAAmBymE,EAAmB9jI,KAAIxJ,GAAKA,EAAEvsB,QACjD+5J,EAAgBD,EAAiB/jI,KAAIxJ,GAAKA,EAAEvsB,QAElD,IAAK,MAAM+M,KAAUgtJ,EACjBj4J,GAAO7J,MAAM,8CAA+C8U,GAIhE,IAAK,MAAMknF,KAAUb,EACjBa,EAAOlyE,GAAGrrB,IAA4CgZ,IAK9CA,EAAa,OACbs2I,GAAkB5yD,GAClBzmF,EAAQ,CAAEg4E,SAAUsP,EAAOtP,SACvBq1E,YAAa/lE,EAAOv5E,MAAMgqE,QAClC,IAKR5yD,YAAW,KACPk0H,GAAkB5yD,GAClBzmF,EAAQ,CACJg4E,SAAU,GACVq1E,YAAa,IAChB,GAjEK,IAkEW,GAEvB,GAEJ,ImBmZN7kE,wBAII,OAHArzF,GAAON,KAAK,yFAGLnJ,KAAKqK,aAAayyF,uBAC7B,EAWAJ,wBAAwBsC,GAIpB,OAHAv1F,GAAON,KAAK,2FAGLnJ,KAAKqK,aAAaqyF,wBAAwBsC,EACrD,EASAyuD,gCACI,OAAOztJ,KAAKqK,aAAaojJ,+BAC7B,EAOAmT,uBAAsBA,IACX/4I,GAAWW,oBAAsBxR,GAAoBkB,wBAShEi0E,iBAAiBj1E,GACbzN,GAAON,KAAK,oFAEZnJ,KAAKqK,aAAa8hF,iBAAiBj1E,EACvC,EAUA6oJ,wBAAwBx/J,EAAS4C,EAAQy+J,EAAQC,EAAOjiK,GACpD6J,GAAO7J,MACF,mBAAkBW,IAClB,WAAU4C,IACV,SAAQy+J,IACR,WAAUC,IACX,eAAgBjiK,GACpBioB,GAAWgF,kBAAkBjtB,EACjC,EASAkiK,eAAcx0H,GAAoC,IAAnC,SAAEF,EAAQ,YAAE1nB,EAAW,QAAE26D,GAAQ/yC,EAC5CzlB,GAAWmF,cIrjBZ,SAA+BsgB,GAAqC,IAApC,SAAEF,EAAQ,YAAE1nB,EAAW,QAAE26D,GAAS/yC,EACrE,MAAMpqC,EAAa,CAAEkqC,YAMrB,OAHA1nB,IAAgBxiB,EAAWwiB,YAAcA,GACzC26D,IAAYn9E,EAAWm9E,QAAUA,GAE1B,CACHp9E,OAAQ,eACRC,aAER,CJ2iBY6+J,CAA4C,CACxC30H,WAAU1nB,cAAa26D,aAE/BryC,GAAAA,kBAA8B,CAAEZ,YACpC,EASA0zH,0BAA0Bz+I,EAAO2/I,GACzB,gBAAiB3/I,GACjBA,EAAM4/I,YAAcD,EAChB3/I,EAAM4/I,cAAgBD,GACtBv4J,GAAOgH,MAAM,oCAGjBhH,GAAOgH,MAAM,uDAErB,EAEAyxJ,YAAW,GAQXC,KAAM,CACFC,SAAQ,KACRj6I,WAAU,KACVla,QAAOA,qBKvlBf,MAAMo0J,EAAwB5yJ,EAAAA,MAAAA,EA4B9B9X,EAAOD,QAPP,SAAkCC,GAC9B,MAC4C,iBAAjCmR,OAAOgvH,sBACRz2H,OAAOsgE,OAAO,CAAC,EAAG74D,OAAOgvH,sBAAuBngI,GAChDA,CACd,CAEiB2qK,CAAyBD,aCmJ1C1qK,EAAOD,QA1KP,MAWI6J,YAAYyqB,EAAQ2I,EAAa4tI,GAC7BviK,KAAKwiK,QAAUx2I,EACfhsB,KAAKotI,eAAez4G,GACpB30B,KAAKyiK,cAAgBF,IAAgB,EACrCviK,KAAKgtI,oBAAmB,GACxBhtI,KAAKytI,yBAA2B,EAChCztI,KAAK0iK,sBAAwB,EAC7B1iK,KAAK2iK,oBAAqB,EAC1B3iK,KAAK4iK,WAAY,EACjB5iK,KAAK6iK,UAAW,EAChB7iK,KAAK8iK,eAAiB,EAC1B,CAOAC,YACI,OAAO/iK,KAAKwiK,OAChB,CAOA7rI,iBACI,OAAO32B,KAAK20B,WAChB,CAQAy4G,eAAeD,GACXntI,KAAK20B,YAAcw4G,CACvB,CAOAo1B,eACI,OAAOviK,KAAKyiK,aAChB,CAOAO,oBACI,OAAOhjK,KAAK2iK,kBAChB,CAWA31B,mBAAmBi2B,EAAsBp3I,GACrC,GAAK7rB,KAAKgjK,sBAAuBC,GAAyBp3I,GAEnD,GAAI7rB,KAAKgjK,oBACZ,GAAKC,GAQE,GAAIjjK,KAAK4iK,YAAc/2I,EAC1B7rB,KAAK0iK,sBAAwB5mJ,KAAKC,WAC/B,IAAK/b,KAAK4iK,WAAa/2I,EAAS,CACnC,MACMq3I,EADMpnJ,KAAKC,MACS/b,KAAK0iK,sBAE/B1iK,KAAKytI,0BAA4By1B,EACjCljK,KAAK0iK,sBAAwB,CACjC,OAfI,IAAK1iK,KAAK4iK,UAAW,CACjB,MACMM,EADMpnJ,KAAKC,MACS/b,KAAK0iK,sBAE/B1iK,KAAKytI,0BAA4By1B,EACjCljK,KAAK0iK,sBAAwB,CACjC,OATJ1iK,KAAK0iK,sBAAwB5mJ,KAAKC,MAqBtC/b,KAAK2iK,mBAAqBM,EAC1BjjK,KAAK4iK,UAAY/2I,CACrB,CAOAs3I,8BACI,IAAIhgJ,EAAQnjB,KAAKytI,yBAMjB,OAJIztI,KAAKgjK,sBAAwBhjK,KAAK4iK,YAClCz/I,GAASrH,KAAKC,MAAQ/b,KAAK0iK,uBAGxBv/I,CACX,CAOAigJ,UACI,OAAOpjK,KAAK6iK,QAChB,CAOA31B,gBACIltI,KAAK6iK,UAAW,EAChB7iK,KAAKgtI,oBAAmB,EAC5B,CAOAq2B,mBACI,OAAOrjK,KAAK8iK,cAChB,CAQAp1B,iBAAiBd,GACb5sI,KAAK8iK,eAAiBl2B,CAC1B,CAQAS,iBAAiBT,GACb5sI,KAAK8iK,eAAexzJ,KAAKs9H,EAC7B,gBC9KsCp9H,EAAtC8uJ,GAAsK9uJ,GAAhIA,EAAE,oBAAoB2qB,UAAUA,SAAS04H,cAAc14H,SAAS04H,cAAcv4H,SAAI,+DAA+D,SAAS7xB,GAAG,IAAI4c,EAAE+lE,EAAEtzE,OAAE,KAAUrP,EAAEA,GAAG,CAAC,GAAGA,EAAE,CAAC,EAAEqP,EAAE6oC,MAAM,IAAItsC,SAAQ,SAAS7E,EAAE/G,GAAG4c,EAAE7V,EAAE47E,EAAE3iF,CAAC,IAAG,IAAI6xH,EAAEpxF,EAAE,CAAC,EAAE,IAAIoxF,KAAKxiH,EAAEA,EAAE+H,eAAey6G,KAAKpxF,EAAEoxF,GAAGxiH,EAAEwiH,IAAI,IAAIgpC,EAAmDpvI,EAAK4lC,EAAtD/zD,EAAE,GAAG0iC,EAAE,iBAAiBwD,EAAE,SAASz8B,EAAE/G,GAAG,MAAMA,CAAC,EAAYyrB,EAAE,iBAAiBprB,OAAOgxD,EAAE,mBAAmB44F,cAAc4Q,EAAE,iBAAiBj2J,SAAS,iBAAiBA,QAAQC,UAAU,iBAAiBD,QAAQC,SAASyiB,KAAK,IAAIqQ,EAAE/T,EAAEwc,EAAE,GAAI3U,GAAIovI,GAAIxpG,GAAyf5lC,GAAG4lC,KAAKA,EAAEjxB,EAAE/wC,KAAKgnD,SAAS2/B,KAAK,oBAAoBtkD,UAAUA,SAAS04H,gBAAgBhqH,EAAE1O,SAAS04H,cAAcv4H,KAAK9qB,IAAIq5B,EAAEr5B,GAAGq5B,EAAE,IAAIA,EAAEjoC,QAAQ,SAASioC,EAAEyV,OAAO,EAAEzV,EAAE3d,YAAY,KAAK,GAAG,GAA+F4uC,IAAIztC,EAAE,SAAS7c,GAAG,IAAI/G,EAAE,IAAIynI,eAAe,OAAOznI,EAAE6nI,KAAK,MAAM9gI,GAAE,GAAI/G,EAAEsqJ,aAAa,cAActqJ,EAAE2tC,KAAK,MAAM,IAAIz9B,WAAWlQ,EAAE6jC,SAAS,GAAGlM,EAAE,SAAS5wB,EAAE/G,EAAE4c,GAAG,IAAI+lE,EAAE,IAAI8kD,eAAe9kD,EAAEklD,KAAK,MAAM9gI,GAAE,GAAI47E,EAAE2nE,aAAa,cAAc3nE,EAAEm4E,OAAO,WAAW,KAAKn4E,EAAE32E,QAAQ,GAAG22E,EAAE32E,QAAQ22E,EAAE9+C,SAAS7jC,EAAE2iF,EAAE9+C,UAAUjnB,GAAG,EAAE+lE,EAAEtwD,QAAQzV,EAAE+lE,EAAEh1C,KAAK,KAAK,IAAniC/pB,EAAE,SAAS7c,GAAG,IAAI/G,EAAI,MAAM,mBAAmB+6J,WAAW,IAAI7qJ,WAAW6qJ,WAAWh0J,KAAwB,iBAAnB/G,EAAEg7J,KAAKj0J,EAAE,YAA8BqrC,EAAE,0BAA9Gx1B,GAAsI5c,EAAE,EAAE,oBAAoBi7J,WAAW39J,EAAE29J,gBAAW,IAASjgK,YAAYsC,EAAEtC,WAAW,mBAAmBkgK,OAAO13H,EAAE,SAASz8B,GAAGm0J,KAAKn0J,EAAE,GAAG,oBAAoBo0J,QAAQ,oBAAoB16J,UAAUA,QAAQ,CAAC,GAAGA,QAAQ+G,IAAI2zJ,MAAM16J,QAAQC,KAAKD,QAAQtJ,MAAM,oBAAoBikK,SAASA,SAASD,QAA+mB,IAAIE,EAAEC,EAAErgJ,EAAEqmB,EAAEjyB,EAAE8rJ,OAAO16J,QAAQ+G,IAAImgB,KAAKlnB,SAAS6O,EAAED,EAAE+rJ,UAAU36J,QAAQC,KAAKinB,KAAKlnB,SAAS,IAAIoxH,KAAKpxF,EAAEA,EAAErpB,eAAey6G,KAAKxiH,EAAEwiH,GAAGpxF,EAAEoxF,IAAIpxF,EAAE,KAAKpxB,EAAErU,YAAYsC,EAAE+R,EAAErU,WAAWqU,EAAEksJ,cAAcv7H,EAAE3wB,EAAEksJ,aAAalsJ,EAAE6rJ,OAAO13H,EAAEn0B,EAAE6rJ,MAAM7rJ,EAAEk7I,aAAa8Q,EAAEhsJ,EAAEk7I,YAAYl7I,EAAEmsJ,gBAAgBF,EAAEjsJ,EAAEmsJ,eAAe,iBAAiB9Q,aAAat4G,EAAE,mCAAmC,IAAaqpH,EAAEC,EAAEC,EAAEC,EAAfz5H,GAAE,EAAe05H,EAAE,oBAAoBC,YAAY,IAAIA,YAAY,aAAQ,EAAO,SAASC,EAAEh1J,EAAE/G,EAAE4c,GAAG,IAAI,IAAI+lE,EAAE3iF,EAAE4c,EAAEvN,EAAErP,EAAE+G,EAAEsI,MAAMA,GAAGszE,MAAMtzE,EAAE,GAAGA,EAAErP,EAAE,IAAI+G,EAAEi1J,UAAUH,EAAE,OAAOA,EAAEI,OAAOl1J,EAAEi1J,SAASh8J,EAAEqP,IAAI,IAAI,IAAIwiH,EAAE,GAAG7xH,EAAEqP,GAAG,CAAC,IAAIoxB,EAAE15B,EAAE/G,KAAK,GAAG,IAAIygC,EAAE,CAAC,IAAIo6H,EAAE,GAAG9zJ,EAAE/G,KAAK,GAAG,MAAM,IAAIygC,GAAG,CAAC,IAAInjC,EAAE,GAAGyJ,EAAE/G,KAAK,IAAIygC,EAAE,MAAM,IAAIA,IAAI,GAAGA,IAAI,GAAGo6H,GAAG,EAAEv9J,GAAG,EAAEmjC,IAAI,GAAGo6H,GAAG,GAAGv9J,GAAG,EAAE,GAAGyJ,EAAE/G,MAAM,MAAM6xH,GAAG5uE,OAAOi5G,aAAaz7H,OAAO,CAAC,IAAIT,EAAES,EAAE,MAAMoxF,GAAG5uE,OAAOi5G,aAAa,MAAMl8H,GAAG,GAAG,MAAM,KAAKA,EAAE,CAAC,MAAM6xF,GAAG5uE,OAAOi5G,cAAc,GAAGz7H,IAAI,EAAEo6H,EAAE,MAAMhpC,GAAG5uE,OAAOi5G,aAAaz7H,EAAE,CAAC,OAAOoxF,CAAC,CAAC,SAASsqC,EAAEp1J,GAAG00J,EAAE10J,EAAEsI,EAAE+sJ,MAAMV,EAAE,IAAIzQ,UAAUlkJ,GAAGsI,EAAEgtJ,OAAO,IAAInR,WAAWnkJ,GAAGsI,EAAEu7I,OAAOgR,EAAE,IAAIzQ,WAAWpkJ,GAAGsI,EAAEs7I,OAAOgR,EAAE,IAAIzrJ,WAAWnJ,GAAGsI,EAAEitJ,QAAQ,IAAIlR,YAAYrkJ,GAAGsI,EAAEktJ,QAAQ,IAAIlR,YAAYtkJ,GAAGsI,EAAE6/I,QAAQ,IAAInmC,aAAahiH,GAAGsI,EAAEmtJ,QAAQ,IAAIlR,aAAavkJ,EAAE,CAACsI,EAAEotJ,eAAe,IAAIC,EAAEC,EAAE,GAAGx8H,EAAE,GAAGy8H,EAAE,GAAGC,EAAE,GAAG18H,EAAEt5B,KAAK,CAAC+wD,KAAK,WAAWklG,GAAI,IAAI,IAAIC,EAAE,EAAEC,EAAE,KAAKC,EAAE,KAAK,SAAS7qH,EAAErrC,GAAGsI,EAAE6tJ,SAAS7tJ,EAAE6tJ,QAAQn2J,GAAGuI,EAAEvI,GAAG,IAAIo7B,GAAE,EAAKp7B,EAAE,SAASA,EAAE,+CAA+C,IAAI/G,EAAE,IAAI0qJ,YAAY2B,aAAatlJ,GAAG,MAAM47E,EAAE3iF,GAAGA,CAAC,CAAC,SAASm9J,EAAEp2J,EAAE/G,GAAG,OAAOijD,OAAOtqD,UAAU6xC,WAAWzjC,EAAEyjC,WAAWxqC,GAAG,IAAI+G,EAAE5O,QAAQ6H,EAAE,CAAyF,SAASo9J,EAAEr2J,GAAG,OAAOo2J,EAAEp2J,EAA/D,wCAAmE,CAAiB,SAASs2J,EAAEt2J,GAAG,OAAOo2J,EAAEp2J,EAAjC,UAAqC,CAA/JsI,EAAEiuJ,gBAAgB,CAAC,EAAEjuJ,EAAEkuJ,gBAAgB,CAAC,EAAwH,IAAIC,EAAEC,EAAE,0CAA0C,SAASC,EAAE32J,GAAG,IAAI,GAAGA,GAAG02J,GAAGpC,EAAE,OAAO,IAAInrJ,WAAWmrJ,GAAG,GAAGz3I,EAAE,OAAOA,EAAE7c,GAAG,KAAK,iDAAiD,CAAC,MAAMA,GAAGqrC,EAAErrC,EAAE,CAAC,CAAC,SAAS42J,EAAE52J,GAAG,KAAKA,EAAE9L,OAAO,GAAG,CAAC,IAAI+E,EAAE+G,EAAEuiC,QAAQ,GAAG,mBAAmBtpC,EAAE,CAAC,IAAI4c,EAAE5c,EAAE43D,KAAK,iBAAiBh7C,OAAE,IAAS5c,EAAE0rJ,IAAIgR,EAAExgJ,IAAIU,EAAN8/I,GAAWA,EAAExgJ,IAAIU,EAAN8/I,CAAS18J,EAAE0rJ,KAAK9uI,OAAE,IAAS5c,EAAE0rJ,IAAI,KAAK1rJ,EAAE0rJ,IAAI,MAAM1rJ,EAAEqP,EAAE,CAAC,CAA+J,SAASuuJ,EAAE72J,GAAG,OAAO60J,EAAEj2E,KAAM,GAAG5+E,EAAEA,CAAC,CAAC,SAAS82J,EAAE92J,GAAG,IAAI,OAAOkU,EAAE2xI,KAAK7lJ,EAAE00J,EAAE5rE,WAAW,QAAQ,IAAIssE,EAAElhJ,EAAEuiD,QAAQ,CAAC,CAAC,MAAMz2D,GAAG,CAAC,CAArRq2J,EAAEK,GAAUD,EAAE3C,EAAE,WAAW,IAAI9zJ,EAAEnC,QAAQk5J,SAAS,OAAO,IAAI/2J,EAAE,GAAGA,EAAE,GAAG,GAAG,EAAE,oBAAoBg3J,QAAQA,QAAQ,WAAW,OAAO9zI,YAAY3W,KAAK,EAAmI,IAAI0qJ,EAAE,CAAC,EAAE,SAASC,IAAI,IAAIA,EAAEC,QAAQ,CAAC,IAAIn3J,EAAE,CAACo3J,KAAK,WAAWC,QAAQ,WAAWC,KAAK,IAAIC,IAAI,IAAIC,KAAK,iBAAiBC,MAAM,iBAAiB/hK,WAAWA,UAAUgiK,WAAWhiK,UAAUgiK,UAAU,IAAI,KAAK93H,QAAQ,IAAI,KAAK,SAASxE,EAAEnC,GAAG,kBAAkB,IAAI,IAAIhgC,KAAKg+J,EAAEj3J,EAAE/G,GAAGg+J,EAAEh+J,GAAG,IAAI4c,EAAE,GAAG,IAAI,IAAI5c,KAAK+G,EAAE6V,EAAE/V,KAAK7G,EAAE,IAAI+G,EAAE/G,IAAIi+J,EAAEC,QAAQthJ,CAAC,CAAC,OAAOqhJ,EAAEC,OAAO,CAAC,IAAuTj8H,EAAnTy8H,EAAE,CAACC,SAAS,CAAC,EAAEttC,QAAQ,CAAC,KAAK,GAAG,IAAIutC,UAAU,SAAS73J,EAAE/G,GAAG,IAAI4c,EAAE8hJ,EAAErtC,QAAQtqH,GAAG,IAAI/G,GAAG,KAAKA,IAAI,IAAI+G,EAAEu6B,EAAEhyB,GAAGysJ,EAAEn/I,EAAE,IAAIA,EAAE3hB,OAAO,GAAG2hB,EAAE/V,KAAK7G,EAAE,EAAE6+J,aAAQ,EAAO3iJ,IAAI,WAAW,OAAOwiJ,EAAEG,SAAS,EAAEjD,EAAE8C,EAAEG,QAAQ,GAAG,EAAE,EAAEC,OAAO,SAAS/3J,GAAG,OAAO,SAASA,EAAE/G,GAAG,OAAO+G,EAAEg1J,EAAEJ,EAAE50J,OAA3B,GAAgC,EAAE,CAAlC,CAAoCA,EAAE,EAAEg4J,MAAM,SAASh4J,EAAE/G,GAAG,OAAO+G,CAAC,GAASi4J,EAAG,CAAC3vJ,EAAE,WAAW+iC,GAAG,EAAEpyC,EAAE,SAAS+G,EAAE/G,GAAG,IAAI4c,EAAE,GAAG,IAAI7V,EAAE6V,EAAEvJ,KAAKC,UAAU,CAAC,GAAG,IAAIvM,GAAG,IAAIA,EAAM,OAAO62J,EAAE,KAAK,EAAEhhJ,EAAE4gJ,GAAG,CAAC,OAAO5B,EAAE57J,GAAG,GAAG4c,EAAE,IAAI,EAAEg/I,EAAE57J,EAAE,GAAG,GAAG4c,EAAE,IAAI,IAAI,IAAI,EAAE,CAAC,EAAEtf,EAAE,SAASyJ,EAAE/G,GAAGoyC,EAAE,8HAA8H,EAAErrC,EAAE,SAASA,EAAE/G,GAAGoyC,EAAE,8HAA8H,EAAEif,EAAE,SAAStqD,EAAE/G,EAAE4c,GAAG++I,EAAE1O,WAAWlmJ,EAAE/G,EAAEA,EAAE4c,EAAE,EAAEgH,EAAE,SAAS7c,GAAGA,KAAK,EAAE,IAAI/G,EAAE27J,EAAE1gK,OAAO,GAAG8L,EAAE,WAAW,OAAM,EAAG,IAAI,IAAI6V,EAAIvN,EAAE,EAAEA,GAAG,EAAEA,GAAG,EAAE,CAAC,IAAIwiH,EAAE7xH,GAAG,EAAE,GAAGqP,GAAG,GAAGwiH,EAAE/+G,KAAK4yB,IAAImsF,EAAE9qH,EAAE,WAAW82J,EAAE/qJ,KAAK4yB,IAAI,aAAa9oB,EAAE9J,KAAKC,IAAI,SAAShM,EAAE8qH,IAAO,MAAO,IAAIj1G,GAAX,MAAgBA,EAAhB,OAAqBA,KAAK,OAAM,CAAE,CAAC,OAAM,CAAE,EAAEi1G,EAAE,SAAS9qH,GAAG,IAAI,IAAI/G,EAAEw9J,IAAIA,IAAIx9J,EAAE+G,IAAI,EAAE0kB,EAAE,SAAS1kB,EAAE/G,GAAG,IAAI4c,EAAE,EAAE,OAAOqhJ,IAAIt4J,SAAQ,SAASg9E,EAAEtzE,GAAG,IAAIwiH,EAAE7xH,EAAE4c,EAAEg/I,EAAE70J,EAAE,EAAEsI,GAAG,GAAGwiH,EAAE,SAAS9qH,EAAE/G,EAAE4c,GAAG,IAAI,IAAI+lE,EAAE,EAAEA,EAAE57E,EAAE9L,SAAS0nF,EAAE+4E,EAAE17J,KAAK,GAAG+G,EAAE06B,WAAWkhD,GAAO+4E,EAAE17J,GAAG,GAAG,CAAE,CAAnF,CAAqF2iF,EAAEkvC,GAAGj1G,GAAG+lE,EAAE1nF,OAAO,CAAC,IAAG,CAAC,EAAEogK,EAAE,SAASt0J,EAAE/G,GAAG,IAAI4c,EAAEqhJ,IAAIrC,EAAE70J,GAAG,GAAG6V,EAAE3hB,OAAO,IAAI0nF,EAAE,EAAE,OAAO/lE,EAAEjX,SAAQ,SAASoB,GAAG47E,GAAG57E,EAAE9L,OAAO,CAAC,IAAG2gK,EAAE57J,GAAG,GAAG2iF,EAAE,CAAC,EAAE/hD,EAAE,SAAS75B,IAAI,SAASA,EAAE/G,GAAiBs7J,IAASjsJ,EAAE4vJ,QAAQ5vJ,EAAE4vJ,OAAOl4J,GAAGo7B,GAAE,GAAIqB,EAAEz8B,EAAE,IAAIm4J,GAAGn4J,GAAI,CAAhF,CAAkFA,EAAE,EAAEu0J,EAAE,SAASv0J,GAAG,OAAO,CAAC,EAAEqrC,EAAE,SAASrrC,EAAE/G,EAAE4c,EAAE+lE,EAAEtzE,GAAG,EAAE2wB,EAAE,SAASj5B,EAAE/G,EAAE4c,EAAE+lE,GAAG,IAAI,IAAItzE,EAAE,EAAEwiH,EAAE,EAAEA,EAAEj1G,EAAEi1G,IAAI,CAAC,IAAI,IAAIpxF,EAAEm7H,EAAE57J,EAAE,EAAE6xH,GAAG,GAAGgpC,EAAEe,EAAE57J,GAAG,EAAE6xH,EAAE,IAAI,GAAGv0H,EAAE,EAAEA,EAAEu9J,EAAEv9J,IAAIohK,EAAEE,UAAU73J,EAAE40J,EAAEl7H,EAAEnjC,IAAI+R,GAAGwrJ,CAAC,CAAC,OAAOe,EAAEj5E,GAAG,GAAGtzE,EAAE,CAAC,EAAEsoB,EAAE,WAAW,OAAO,CAAC,EAAE6L,EAAE,WAAW,OAAO,EAAE,EAAEl0B,EAAE,SAASvI,GAAG,OAAOA,GAAG,KAAK,GAAolC,KAAK,GAAG,OAAO,MAAnlC,KAAK,GAAG,OAAO,OAAO,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAA2B,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,EAAE,OAAO,IAAI,KAAK,IAAI,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,EAAE,OAAO,GAAG,KAAK,EAAE,OAAO,EAAE,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,MAAM,iBAAiBtK,WAAWA,UAAU0iK,qBAAqB,EAAE,OAAOvB,EAAE,KAAK,CAAC,GAAGd,GAAI,WAAW,IAAI/1J,EAAE,CAACsI,EAAE2vJ,GAAI,SAASh/J,EAAE+G,EAAE/G,GAAG,IAAI4c,EAAE7V,EAAE9X,QAAQogB,EAAE+vJ,IAAIxiJ,EAAEu/I,GAAGlhJ,EAAE5L,EAAE+vJ,IAAIjiG,GAAGK,QAAQk/F,EAAErtJ,EAAE+vJ,IAAIpC,EAAE,SAASj2J,GAAG,GAAGg2J,IAAI1tJ,EAAEgwJ,wBAAwBhwJ,EAAEgwJ,uBAAuBtC,GAAG,GAAGA,IAAI,OAAOC,IAAI/rJ,cAAc+rJ,GAAGA,EAAE,MAAMC,GAAG,CAAC,IAAIj9J,EAAEi9J,EAAEA,EAAE,KAAKj9J,GAAG,CAAC,CAA3I,EAA8I,CAAC,SAAS4c,EAAE7V,GAAG/G,EAAE+G,EAAEic,SAAS,CAAC,SAAS6uG,EAAE7xH,GAAG,OAAO,WAAW,IAAIq7J,IAAI5vI,GAAG4lC,GAAG,CAAC,GAAG,mBAAmB/jB,QAAQ+vH,EAAEI,GAAG,OAAOnwH,MAAMmwH,EAAE,CAAChlF,YAAY,gBAAgBnhE,MAAK,SAASvQ,GAAG,IAAIA,EAAE0xC,GAAG,KAAK,uCAAuCglH,EAAE,IAAI,OAAO12J,EAAEmvJ,aAAa,IAAGz+I,OAAM,WAAW,OAAOimJ,EAAED,EAAE,IAAG,GAAG9lI,EAAE,OAAO,IAAI/rB,SAAQ,SAAS7E,EAAE/G,GAAG23B,EAAE8lI,GAAE,SAASz9J,GAAG+G,EAAE,IAAImJ,WAAWlQ,GAAG,GAAEA,EAAE,GAAE,CAAC,OAAO4L,QAAQC,UAAUyL,MAAK,WAAW,OAAOomJ,EAAED,EAAE,GAAE,CAApX,GAAwXnmJ,MAAK,SAAStX,GAAG,OAAO0qJ,YAAYkD,YAAY5tJ,EAAE+G,EAAE,IAAGuQ,KAAKtX,GAAE,SAAS+G,GAAGuI,EAAE,0CAA0CvI,GAAGqrC,EAAErrC,EAAE,GAAE,CAAC,GAAGg2J,IAAI1tJ,EAAEgwJ,wBAAwBhwJ,EAAEgwJ,uBAAuBtC,GAAG1tJ,EAAEiwJ,gBAAgB,IAAI,OAAOjwJ,EAAEiwJ,gBAAgBv4J,EAAE/G,EAAE,CAAC,MAAM+G,GAAG,OAAOuI,EAAE,sDAAsDvI,IAAG,CAAE,EAAEs0J,GAAG,mBAAmB3Q,YAAYmD,sBAAsBuP,EAAEK,IAAIJ,EAAEI,IAAI,mBAAmBnwH,MAAMukF,EAAEj1G,GAAG0wB,MAAMmwH,EAAE,CAAChlF,YAAY,gBAAgBnhE,MAAK,SAAStX,GAAG,OAAO0qJ,YAAYmD,qBAAqB7tJ,EAAE+G,GAAGuQ,KAAKsF,GAAE,SAAS7V,GAAG,OAAOuI,EAAE,kCAAkCvI,GAAGuI,EAAE,6CAA6CuiH,EAAEj1G,EAAE,GAAE,KAAInF,MAAMkrE,EAAE,CAA/xC,GAAmyCtzE,EAAEw9I,mBAAmB,WAAW,OAAOiQ,EAAGztJ,EAAEw9I,mBAAmBx9I,EAAE+vJ,IAAIz8E,GAAG74E,MAAM,KAAK9O,UAAU,GAAG2qF,GAAIt2E,EAAE2mJ,4BAA4B,WAAW,OAAO3mJ,EAAE2mJ,4BAA4B3mJ,EAAE+vJ,IAAI3+H,GAAG32B,MAAM,KAAK9O,UAAU,EAAEqU,EAAEkkJ,sBAAsB,WAAW,OAAOlkJ,EAAEkkJ,sBAAsBlkJ,EAAE+vJ,IAAIxiJ,GAAG9S,MAAM,KAAK9O,UAAU,EAAEqU,EAAEkwJ,gBAAgB,WAAW,OAAOlwJ,EAAEkwJ,gBAAgBlwJ,EAAE+vJ,IAAIvE,GAAG/wJ,MAAM,KAAK9O,UAAU,EAAEqU,EAAEmwJ,eAAe,WAAW,OAAOnwJ,EAAEmwJ,eAAenwJ,EAAE+vJ,IAAInkJ,GAAGnR,MAAM,KAAK9O,UAAU,EAAEqU,EAAEowJ,sBAAsB,WAAW,OAAOpwJ,EAAEowJ,sBAAsBpwJ,EAAE+vJ,IAAI99H,GAAGx3B,MAAM,KAAK9O,UAAU,EAAEqU,EAAEijJ,uBAAuB,WAAW,OAAOjjJ,EAAEijJ,uBAAuBjjJ,EAAE+vJ,IAAIj/H,GAAGr2B,MAAM,KAAK9O,UAAU,EAAEqU,EAAEqwJ,iBAAiB,WAAW,OAAOrwJ,EAAEqwJ,iBAAiBrwJ,EAAE+vJ,IAAIh/H,GAAGt2B,MAAM,KAAK9O,UAAU,EAAEqU,EAAEswJ,gBAAgB,WAAW,OAAOtwJ,EAAEswJ,gBAAgBtwJ,EAAE+vJ,IAAI1B,GAAG5zJ,MAAM,KAAK9O,UAAU,EAAEqU,EAAEuwJ,uBAAuB,WAAW,OAAOvwJ,EAAEuwJ,uBAAuBvwJ,EAAE+vJ,IAAI3D,GAAG3xJ,MAAM,KAAK9O,UAAU,EAAEqU,EAAE8mJ,WAAW,WAAW,OAAO9mJ,EAAE8mJ,WAAW9mJ,EAAE+vJ,IAAI/B,GAAGvzJ,MAAM,KAAK9O,UAAU,EAAEqU,EAAE+iJ,cAAc,WAAW,OAAO/iJ,EAAE+iJ,cAAc/iJ,EAAE+vJ,IAAI1C,GAAG5yJ,MAAM,KAAK9O,UAAU,EAAEqU,EAAEwwJ,kBAAkB,WAAW,OAAOl6E,EAAGt2E,EAAEwwJ,kBAAkBxwJ,EAAE+vJ,IAAIxD,GAAG9xJ,MAAM,KAAK9O,UAAU,GAAG,SAASkkK,GAAGn4J,GAAGxP,KAAKD,KAAK,aAAaC,KAAKO,QAAQ,gCAAgCiP,EAAE,IAAIxP,KAAKyU,OAAOjF,CAAC,CAAC,SAAS+4J,GAAG/4J,GAAG,SAAS/G,IAAIiiC,IAAIA,GAAE,EAAG5yB,EAAEy9I,WAAU,EAAG3qH,IAAOw7H,EAAEx9H,GAAGw9H,EAAEf,GAAGhgJ,EAAEvN,GAAGA,EAAE0wJ,sBAAsB1wJ,EAAE0wJ,uBAAuB,WAAW,GAAG1wJ,EAAE6+I,QAAQ,IAAI,mBAAmB7+I,EAAE6+I,UAAU7+I,EAAE6+I,QAAQ,CAAC7+I,EAAE6+I,UAAU7+I,EAAE6+I,QAAQjzJ,QAAQ8L,EAAEsI,EAAE6+I,QAAQ5kH,QAAQuzH,EAAE5sG,QAAQlpD,GAAG,IAAIA,EAAE42J,EAAEd,EAAE,CAA/I,IAAoJ,CAAC91J,EAAEA,GAAGzJ,EAAEy/J,EAAE,IAAK,WAAW,GAAG1tJ,EAAE8+I,OAAO,IAAI,mBAAmB9+I,EAAE8+I,SAAS9+I,EAAE8+I,OAAO,CAAC9+I,EAAE8+I,SAAS9+I,EAAE8+I,OAAOlzJ,QAAQ8L,EAAEsI,EAAE8+I,OAAO7kH,QAAQqzH,EAAE1sG,QAAQlpD,GAAG,IAAIA,EAAE42J,EAAEhB,EAAE,CAAzI,GAA6II,EAAE,IAAI1tJ,EAAE4tH,WAAW5tH,EAAE4tH,UAAU,cAAcjsG,YAAW,WAAWA,YAAW,WAAW3hB,EAAE4tH,UAAU,GAAG,GAAE,GAAGj9H,GAAG,GAAE,IAAIA,KAAK,CAAC,GAAGi9J,EAAE,SAASl2J,IAAIk7B,GAAG69H,KAAK79H,IAAIg7H,EAAEl2J,EAAE,EAAEsI,EAAE2+I,IAAI8R,GAAGzwJ,EAAE2wJ,QAAQ,IAAI,mBAAmB3wJ,EAAE2wJ,UAAU3wJ,EAAE2wJ,QAAQ,CAAC3wJ,EAAE2wJ,UAAU3wJ,EAAE2wJ,QAAQ/kK,OAAO,GAAGoU,EAAE2wJ,QAAQ70G,KAAV97C,GAAkB,OAAOisJ,GAAE,EAAGwE,KAAK9/J,EAAEk4C,KAAK,GAAuDhpD,EAAOD,QAAQ4mK,eCA3oV9uJ,EAAlC+uJ,GAAkK/uJ,GAAhIA,EAAE,oBAAoB2qB,UAAUA,SAAS04H,cAAc14H,SAAS04H,cAAcv4H,SAAI,0DAA+D,SAAS7xB,GAAG,IAAI4c,EAAE+lE,EAAEtzE,OAAE,KAAUrP,EAAEA,GAAG,CAAC,GAAGA,EAAE,CAAC,EAAEqP,EAAE6oC,MAAM,IAAItsC,SAAQ,SAAS7E,EAAE/G,GAAG4c,EAAE7V,EAAE47E,EAAE3iF,CAAC,IAAG,IAAI6xH,EAAEgpC,EAAE,CAAC,EAAE,IAAIhpC,KAAKxiH,EAAEA,EAAE+H,eAAey6G,KAAKgpC,EAAEhpC,GAAGxiH,EAAEwiH,IAAI,IAAIpxF,EAAmDhV,EAAK4lC,EAAtD/zD,EAAE,GAAG0iC,EAAE,iBAAiBwD,EAAE,SAASz8B,EAAE/G,GAAG,MAAMA,CAAC,EAAYyrB,EAAE,iBAAiBprB,OAAOgxD,EAAE,mBAAmB44F,cAAcxpH,EAAE,iBAAiB77B,SAAS,iBAAiBA,QAAQC,UAAU,iBAAiBD,QAAQC,SAASyiB,KAAK,IAAIqQ,EAAE/T,EAAEwc,EAAE,GAAI3U,GAAIgV,GAAI4wB,GAAyf5lC,GAAG4lC,KAAKA,EAAEjxB,EAAE/wC,KAAKgnD,SAAS2/B,KAAK,oBAAoBtkD,UAAUA,SAAS04H,gBAAgBhqH,EAAE1O,SAAS04H,cAAcv4H,KAAK9qB,IAAIq5B,EAAEr5B,GAAGq5B,EAAE,IAAIA,EAAEjoC,QAAQ,SAASioC,EAAEyV,OAAO,EAAEzV,EAAE3d,YAAY,KAAK,GAAG,GAA+F4uC,IAAIztC,EAAE,SAAS7c,GAAG,IAAI/G,EAAE,IAAIynI,eAAe,OAAOznI,EAAE6nI,KAAK,MAAM9gI,GAAE,GAAI/G,EAAEsqJ,aAAa,cAActqJ,EAAE2tC,KAAK,MAAM,IAAIz9B,WAAWlQ,EAAE6jC,SAAS,GAAGlM,EAAE,SAAS5wB,EAAE/G,EAAE4c,GAAG,IAAI+lE,EAAE,IAAI8kD,eAAe9kD,EAAEklD,KAAK,MAAM9gI,GAAE,GAAI47E,EAAE2nE,aAAa,cAAc3nE,EAAEm4E,OAAO,WAAW,KAAKn4E,EAAE32E,QAAQ,GAAG22E,EAAE32E,QAAQ22E,EAAE9+C,SAAS7jC,EAAE2iF,EAAE9+C,UAAUjnB,GAAG,EAAE+lE,EAAEtwD,QAAQzV,EAAE+lE,EAAEh1C,KAAK,KAAK,IAAniC/pB,EAAE,SAAS7c,GAAG,IAAI/G,EAAI,MAAM,mBAAmB+6J,WAAW,IAAI7qJ,WAAW6qJ,WAAWh0J,KAAwB,iBAAnB/G,EAAEg7J,KAAKj0J,EAAE,YAA8Bo2J,EAAE,0BAA9GvgJ,GAAsI5c,EAAE,EAAE,oBAAoBi7J,WAAW39J,EAAE29J,gBAAW,IAASjgK,YAAYsC,EAAEtC,WAAW,mBAAmBkgK,OAAO13H,EAAE,SAASz8B,GAAGm0J,KAAKn0J,EAAE,GAAG,oBAAoBo0J,QAAQ,oBAAoB16J,UAAUA,QAAQ,CAAC,GAAGA,QAAQ+G,IAAI2zJ,MAAM16J,QAAQC,KAAKD,QAAQtJ,MAAM,oBAAoBikK,SAASA,SAASD,QAA+mB,IAAIE,EAAEC,EAAErgJ,EAAEqmB,EAAEjyB,EAAE8rJ,OAAO16J,QAAQ+G,IAAImgB,KAAKlnB,SAAS6O,EAAED,EAAE+rJ,UAAU36J,QAAQC,KAAKinB,KAAKlnB,SAAS,IAAIoxH,KAAKgpC,EAAEA,EAAEzjJ,eAAey6G,KAAKxiH,EAAEwiH,GAAGgpC,EAAEhpC,IAAIgpC,EAAE,KAAKxrJ,EAAErU,YAAYsC,EAAE+R,EAAErU,WAAWqU,EAAEksJ,cAAcv7H,EAAE3wB,EAAEksJ,aAAalsJ,EAAE6rJ,OAAO13H,EAAEn0B,EAAE6rJ,MAAM7rJ,EAAEk7I,aAAa8Q,EAAEhsJ,EAAEk7I,YAAYl7I,EAAEmsJ,gBAAgBF,EAAEjsJ,EAAEmsJ,eAAe,iBAAiB9Q,aAAayS,EAAE,mCAAmC,IAAa1B,EAAEG,EAAEC,EAAEH,EAAfv5H,GAAE,EAAew5H,EAAE,oBAAoBG,YAAY,IAAIA,YAAY,aAAQ,EAAO,SAASK,EAAEp1J,EAAE/G,EAAE4c,GAAG,IAAI,IAAI+lE,EAAE3iF,EAAE4c,EAAEvN,EAAErP,EAAE+G,EAAEsI,MAAMA,GAAGszE,MAAMtzE,EAAE,GAAGA,EAAErP,EAAE,IAAI+G,EAAEi1J,UAAUL,EAAE,OAAOA,EAAEM,OAAOl1J,EAAEi1J,SAASh8J,EAAEqP,IAAI,IAAI,IAAIwiH,EAAE,GAAG7xH,EAAEqP,GAAG,CAAC,IAAIwrJ,EAAE9zJ,EAAE/G,KAAK,GAAG,IAAI66J,EAAE,CAAC,IAAIp6H,EAAE,GAAG15B,EAAE/G,KAAK,GAAG,MAAM,IAAI66J,GAAG,CAAC,IAAIv9J,EAAE,GAAGyJ,EAAE/G,KAAK,IAAI66J,EAAE,MAAM,IAAIA,IAAI,GAAGA,IAAI,GAAGp6H,GAAG,EAAEnjC,GAAG,EAAEu9J,IAAI,GAAGp6H,GAAG,GAAGnjC,GAAG,EAAE,GAAGyJ,EAAE/G,MAAM,MAAM6xH,GAAG5uE,OAAOi5G,aAAarB,OAAO,CAAC,IAAI76H,EAAE66H,EAAE,MAAMhpC,GAAG5uE,OAAOi5G,aAAa,MAAMl8H,GAAG,GAAG,MAAM,KAAKA,EAAE,CAAC,MAAM6xF,GAAG5uE,OAAOi5G,cAAc,GAAGrB,IAAI,EAAEp6H,EAAE,MAAMoxF,GAAG5uE,OAAOi5G,aAAarB,EAAE,CAAC,OAAOhpC,CAAC,CAAC,SAAS6qC,EAAE31J,GAAG00J,EAAE10J,EAAEsI,EAAE+sJ,MAAMR,EAAE,IAAI3Q,UAAUlkJ,GAAGsI,EAAEgtJ,OAAO,IAAInR,WAAWnkJ,GAAGsI,EAAEu7I,OAAO8Q,EAAE,IAAIvQ,WAAWpkJ,GAAGsI,EAAEs7I,OAAOkR,EAAE,IAAI3rJ,WAAWnJ,GAAGsI,EAAEitJ,QAAQ,IAAIlR,YAAYrkJ,GAAGsI,EAAEktJ,QAAQ,IAAIlR,YAAYtkJ,GAAGsI,EAAE6/I,QAAQ,IAAInmC,aAAahiH,GAAGsI,EAAEmtJ,QAAQ,IAAIlR,aAAavkJ,EAAE,CAACsI,EAAEotJ,eAAe,IAAIV,EAAEY,EAAE,GAAGx8H,EAAE,GAAGy8H,EAAE,GAAGC,EAAE,GAAG18H,EAAEt5B,KAAK,CAAC+wD,KAAK,WAAWklG,GAAI,IAAI,IAAIC,EAAE,EAAEE,EAAE,KAAK7qH,EAAE,KAAK,SAAS+qH,EAAEp2J,GAAGsI,EAAE6tJ,SAAS7tJ,EAAE6tJ,QAAQn2J,GAAGuI,EAAEvI,GAAG,IAAIo7B,GAAE,EAAKp7B,EAAE,SAASA,EAAE,+CAA+C,IAAI/G,EAAE,IAAI0qJ,YAAY2B,aAAatlJ,GAAG,MAAM47E,EAAE3iF,GAAGA,CAAC,CAAC,SAAS4gC,EAAE75B,EAAE/G,GAAG,OAAOijD,OAAOtqD,UAAU6xC,WAAWzjC,EAAEyjC,WAAWxqC,GAAG,IAAI+G,EAAE5O,QAAQ6H,EAAE,CAAyF,SAASg9J,EAAEj2J,GAAG,OAAO65B,EAAE75B,EAA/D,wCAAmE,CAAiB,SAASs2J,EAAEt2J,GAAG,OAAO65B,EAAE75B,EAAjC,UAAqC,CAA/JsI,EAAEiuJ,gBAAgB,CAAC,EAAEjuJ,EAAEkuJ,gBAAgB,CAAC,EAAwH,IAAIC,EAAEC,EAAE,qCAAqC,SAASC,EAAE32J,GAAG,IAAI,GAAGA,GAAG02J,GAAGpC,EAAE,OAAO,IAAInrJ,WAAWmrJ,GAAG,GAAGz3I,EAAE,OAAOA,EAAE7c,GAAG,KAAK,iDAAiD,CAAC,MAAMA,GAAGo2J,EAAEp2J,EAAE,CAAC,CAAC,SAAS42J,EAAE52J,GAAG,KAAKA,EAAE9L,OAAO,GAAG,CAAC,IAAI+E,EAAE+G,EAAEuiC,QAAQ,GAAG,mBAAmBtpC,EAAE,CAAC,IAAI4c,EAAE5c,EAAE43D,KAAK,iBAAiBh7C,OAAE,IAAS5c,EAAE0rJ,IAAIqQ,EAAE7/I,IAAIU,EAANm/I,GAAWA,EAAE7/I,IAAIU,EAANm/I,CAAS/7J,EAAE0rJ,KAAK9uI,OAAE,IAAS5c,EAAE0rJ,IAAI,KAAK1rJ,EAAE0rJ,IAAI,MAAM1rJ,EAAEqP,EAAE,CAAC,CAA+J,SAASuuJ,EAAE72J,GAAG,OAAO20J,EAAE/1E,KAAM,GAAG5+E,EAAEA,CAAC,CAAC,SAAS82J,EAAE92J,GAAG,IAAI,OAAOkU,EAAE2xI,KAAK7lJ,EAAE00J,EAAE5rE,WAAW,QAAQ,IAAI6sE,EAAEzhJ,EAAEuiD,QAAQ,CAAC,CAAC,MAAMz2D,GAAG,CAAC,CAArRi2J,EAAES,GAAUD,EAAE/8H,EAAE,WAAW,IAAI15B,EAAEnC,QAAQk5J,SAAS,OAAO,IAAI/2J,EAAE,GAAGA,EAAE,GAAG,GAAG,EAAE,oBAAoBg3J,QAAQA,QAAQ,WAAW,OAAO9zI,YAAY3W,KAAK,EAAmI,IAAI0qJ,EAAE,CAAC,EAAE,SAASC,IAAI,IAAIA,EAAEC,QAAQ,CAAC,IAAIn3J,EAAE,CAACo3J,KAAK,WAAWC,QAAQ,WAAWC,KAAK,IAAIC,IAAI,IAAIC,KAAK,iBAAiBC,MAAM,iBAAiB/hK,WAAWA,UAAUgiK,WAAWhiK,UAAUgiK,UAAU,IAAI,KAAK93H,QAAQ,IAAI,KAAK,SAASxE,EAAEnC,GAAG,kBAAkB,IAAI,IAAIhgC,KAAKg+J,EAAEj3J,EAAE/G,GAAGg+J,EAAEh+J,GAAG,IAAI4c,EAAE,GAAG,IAAI,IAAI5c,KAAK+G,EAAE6V,EAAE/V,KAAK7G,EAAE,IAAI+G,EAAE/G,IAAIi+J,EAAEC,QAAQthJ,CAAC,CAAC,OAAOqhJ,EAAEC,OAAO,CAAC,IAAuTj8H,EAAnTy8H,EAAE,CAACC,SAAS,CAAC,EAAEttC,QAAQ,CAAC,KAAK,GAAG,IAAIutC,UAAU,SAAS73J,EAAE/G,GAAG,IAAI4c,EAAE8hJ,EAAErtC,QAAQtqH,GAAG,IAAI/G,GAAG,KAAKA,IAAI,IAAI+G,EAAEu6B,EAAEhyB,GAAG6sJ,EAAEv/I,EAAE,IAAIA,EAAE3hB,OAAO,GAAG2hB,EAAE/V,KAAK7G,EAAE,EAAE6+J,aAAQ,EAAO3iJ,IAAI,WAAW,OAAOwiJ,EAAEG,SAAS,EAAEnD,EAAEgD,EAAEG,QAAQ,GAAG,EAAE,EAAEC,OAAO,SAAS/3J,GAAG,OAAO,SAASA,EAAE/G,GAAG,OAAO+G,EAAEo1J,EAAEN,EAAE90J,OAA3B,GAAgC,EAAE,CAAlC,CAAoCA,EAAE,EAAEg4J,MAAM,SAASh4J,EAAE/G,GAAG,OAAO+G,CAAC,GAASi4J,EAAG,CAAC3vJ,EAAE,WAAW8tJ,GAAG,EAAEn9J,EAAE,SAAS+G,EAAE/G,GAAG,IAAI4c,EAAE,GAAG,IAAI7V,EAAE6V,EAAEvJ,KAAKC,UAAU,CAAC,GAAG,IAAIvM,GAAG,IAAIA,EAAM,OAAO62J,EAAE,KAAK,EAAEhhJ,EAAE4gJ,GAAG,CAAC,OAAO9B,EAAE17J,GAAG,GAAG4c,EAAE,IAAI,EAAE8+I,EAAE17J,EAAE,GAAG,GAAG4c,EAAE,IAAI,IAAI,IAAI,EAAE,CAAC,EAAEtf,EAAE,SAASyJ,EAAE/G,GAAGm9J,EAAE,8HAA8H,EAAEp2J,EAAE,SAASA,EAAE/G,GAAGm9J,EAAE,8HAA8H,EAAE9rG,EAAE,SAAStqD,EAAE/G,EAAE4c,GAAGi/I,EAAE5O,WAAWlmJ,EAAE/G,EAAEA,EAAE4c,EAAE,EAAEgH,EAAE,SAAS7c,GAAGA,KAAK,EAAE,IAAI/G,EAAE67J,EAAE5gK,OAAO,GAAG8L,EAAE,WAAW,OAAM,EAAG,IAAI,IAAI6V,EAAIvN,EAAE,EAAEA,GAAG,EAAEA,GAAG,EAAE,CAAC,IAAIwiH,EAAE7xH,GAAG,EAAE,GAAGqP,GAAG,GAAGwiH,EAAE/+G,KAAK4yB,IAAImsF,EAAE9qH,EAAE,WAAW82J,EAAE/qJ,KAAK4yB,IAAI,aAAa9oB,EAAE9J,KAAKC,IAAI,SAAShM,EAAE8qH,IAAO,MAAO,IAAIj1G,GAAX,MAAgBA,EAAhB,OAAqBA,KAAK,OAAM,CAAE,CAAC,OAAM,CAAE,EAAEi1G,EAAE,SAAS9qH,GAAG,IAAI,IAAI/G,EAAEw9J,IAAIA,IAAIx9J,EAAE+G,IAAI,EAAE0kB,EAAE,SAAS1kB,EAAE/G,GAAG,IAAI4c,EAAE,EAAE,OAAOqhJ,IAAIt4J,SAAQ,SAASg9E,EAAEtzE,GAAG,IAAIwiH,EAAE7xH,EAAE4c,EAAE8+I,EAAE30J,EAAE,EAAEsI,GAAG,GAAGwiH,EAAE,SAAS9qH,EAAE/G,EAAE4c,GAAG,IAAI,IAAI+lE,EAAE,EAAEA,EAAE57E,EAAE9L,SAAS0nF,EAAEi5E,EAAE57J,KAAK,GAAG+G,EAAE06B,WAAWkhD,GAAOi5E,EAAE57J,GAAG,GAAG,CAAE,CAAnF,CAAqF2iF,EAAEkvC,GAAGj1G,GAAG+lE,EAAE1nF,OAAO,CAAC,IAAG,CAAC,EAAEogK,EAAE,SAASt0J,EAAE/G,GAAG,IAAI4c,EAAEqhJ,IAAIvC,EAAE30J,GAAG,GAAG6V,EAAE3hB,OAAO,IAAI0nF,EAAE,EAAE,OAAO/lE,EAAEjX,SAAQ,SAASoB,GAAG47E,GAAG57E,EAAE9L,OAAO,CAAC,IAAGygK,EAAE17J,GAAG,GAAG2iF,EAAE,CAAC,EAAE/hD,EAAE,SAAS75B,IAAI,SAASA,EAAE/G,GAAiBs7J,IAASjsJ,EAAE4vJ,QAAQ5vJ,EAAE4vJ,OAAOl4J,GAAGo7B,GAAE,GAAIqB,EAAEz8B,EAAE,IAAIm4J,GAAGn4J,GAAI,CAAhF,CAAkFA,EAAE,EAAEu0J,EAAE,SAASv0J,GAAG,OAAO,CAAC,EAAEqrC,EAAE,SAASrrC,EAAE/G,EAAE4c,EAAE+lE,EAAEtzE,GAAG,EAAE2wB,EAAE,SAASj5B,EAAE/G,EAAE4c,EAAE+lE,GAAG,IAAI,IAAItzE,EAAE,EAAEwiH,EAAE,EAAEA,EAAEj1G,EAAEi1G,IAAI,CAAC,IAAI,IAAIgpC,EAAEa,EAAE17J,EAAE,EAAE6xH,GAAG,GAAGpxF,EAAEi7H,EAAE17J,GAAG,EAAE6xH,EAAE,IAAI,GAAGv0H,EAAE,EAAEA,EAAEmjC,EAAEnjC,IAAIohK,EAAEE,UAAU73J,EAAE80J,EAAEhB,EAAEv9J,IAAI+R,GAAGoxB,CAAC,CAAC,OAAOi7H,EAAE/4E,GAAG,GAAGtzE,EAAE,CAAC,EAAEsoB,EAAE,WAAW,OAAO,CAAC,EAAE6L,EAAE,WAAW,OAAO,EAAE,EAAEl0B,EAAE,SAASvI,GAAG,OAAOA,GAAG,KAAK,GAAolC,KAAK,GAAG,OAAO,MAAnlC,KAAK,GAAG,OAAO,OAAO,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAA2B,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,EAAE,OAAO,IAAI,KAAK,IAAI,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,EAAE,OAAO,GAAG,KAAK,EAAE,OAAO,EAAE,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,MAAM,iBAAiBtK,WAAWA,UAAU0iK,qBAAqB,EAAE,OAAOvB,EAAE,KAAK,CAAC,GAAGd,GAAI,WAAW,IAAI/1J,EAAE,CAACsI,EAAE2vJ,GAAI,SAASh/J,EAAE+G,EAAE/G,GAAG,IAAI4c,EAAE7V,EAAE9X,QAAQogB,EAAE+vJ,IAAIxiJ,EAAE8/I,GAAGzhJ,EAAE5L,EAAE+vJ,IAAIjiG,GAAGK,QAAQu+F,EAAE1sJ,EAAE+vJ,IAAIpC,EAAE,SAASj2J,GAAG,GAAGg2J,IAAI1tJ,EAAEgwJ,wBAAwBhwJ,EAAEgwJ,uBAAuBtC,GAAG,GAAGA,IAAI,OAAOE,IAAIhsJ,cAAcgsJ,GAAGA,EAAE,MAAM7qH,GAAG,CAAC,IAAIpyC,EAAEoyC,EAAEA,EAAE,KAAKpyC,GAAG,CAAC,CAA3I,EAA8I,CAAC,SAAS4c,EAAE7V,GAAG/G,EAAE+G,EAAEic,SAAS,CAAC,SAAS6uG,EAAE7xH,GAAG,OAAO,WAAW,IAAIq7J,IAAI5vI,GAAG4lC,GAAG,CAAC,GAAG,mBAAmB/jB,QAAQ+vH,EAAEI,GAAG,OAAOnwH,MAAMmwH,EAAE,CAAChlF,YAAY,gBAAgBnhE,MAAK,SAASvQ,GAAG,IAAIA,EAAE0xC,GAAG,KAAK,uCAAuCglH,EAAE,IAAI,OAAO12J,EAAEmvJ,aAAa,IAAGz+I,OAAM,WAAW,OAAOimJ,EAAED,EAAE,IAAG,GAAG9lI,EAAE,OAAO,IAAI/rB,SAAQ,SAAS7E,EAAE/G,GAAG23B,EAAE8lI,GAAE,SAASz9J,GAAG+G,EAAE,IAAImJ,WAAWlQ,GAAG,GAAEA,EAAE,GAAE,CAAC,OAAO4L,QAAQC,UAAUyL,MAAK,WAAW,OAAOomJ,EAAED,EAAE,GAAE,CAApX,GAAwXnmJ,MAAK,SAAStX,GAAG,OAAO0qJ,YAAYkD,YAAY5tJ,EAAE+G,EAAE,IAAGuQ,KAAKtX,GAAE,SAAS+G,GAAGuI,EAAE,0CAA0CvI,GAAGo2J,EAAEp2J,EAAE,GAAE,CAAC,GAAGg2J,IAAI1tJ,EAAEgwJ,wBAAwBhwJ,EAAEgwJ,uBAAuBtC,GAAG1tJ,EAAEiwJ,gBAAgB,IAAI,OAAOjwJ,EAAEiwJ,gBAAgBv4J,EAAE/G,EAAE,CAAC,MAAM+G,GAAG,OAAOuI,EAAE,sDAAsDvI,IAAG,CAAE,EAAEs0J,GAAG,mBAAmB3Q,YAAYmD,sBAAsBmP,EAAES,IAAIJ,EAAEI,IAAI,mBAAmBnwH,MAAMukF,EAAEj1G,GAAG0wB,MAAMmwH,EAAE,CAAChlF,YAAY,gBAAgBnhE,MAAK,SAAStX,GAAG,OAAO0qJ,YAAYmD,qBAAqB7tJ,EAAE+G,GAAGuQ,KAAKsF,GAAE,SAAS7V,GAAG,OAAOuI,EAAE,kCAAkCvI,GAAGuI,EAAE,6CAA6CuiH,EAAEj1G,EAAE,GAAE,KAAInF,MAAMkrE,EAAE,CAA/xC,GAAmyCtzE,EAAEw9I,mBAAmB,WAAW,OAAOiQ,EAAGztJ,EAAEw9I,mBAAmBx9I,EAAE+vJ,IAAIz8E,GAAG74E,MAAM,KAAK9O,UAAU,GAAG2qF,GAAIt2E,EAAE2mJ,4BAA4B,WAAW,OAAO3mJ,EAAE2mJ,4BAA4B3mJ,EAAE+vJ,IAAI3+H,GAAG32B,MAAM,KAAK9O,UAAU,EAAEqU,EAAEkkJ,sBAAsB,WAAW,OAAOlkJ,EAAEkkJ,sBAAsBlkJ,EAAE+vJ,IAAIxiJ,GAAG9S,MAAM,KAAK9O,UAAU,EAAEqU,EAAEkwJ,gBAAgB,WAAW,OAAOlwJ,EAAEkwJ,gBAAgBlwJ,EAAE+vJ,IAAIvE,GAAG/wJ,MAAM,KAAK9O,UAAU,EAAEqU,EAAEmwJ,eAAe,WAAW,OAAOnwJ,EAAEmwJ,eAAenwJ,EAAE+vJ,IAAInkJ,GAAGnR,MAAM,KAAK9O,UAAU,EAAEqU,EAAEowJ,sBAAsB,WAAW,OAAOpwJ,EAAEowJ,sBAAsBpwJ,EAAE+vJ,IAAI99H,GAAGx3B,MAAM,KAAK9O,UAAU,EAAEqU,EAAEijJ,uBAAuB,WAAW,OAAOjjJ,EAAEijJ,uBAAuBjjJ,EAAE+vJ,IAAIj/H,GAAGr2B,MAAM,KAAK9O,UAAU,EAAEqU,EAAEqwJ,iBAAiB,WAAW,OAAOrwJ,EAAEqwJ,iBAAiBrwJ,EAAE+vJ,IAAIh/H,GAAGt2B,MAAM,KAAK9O,UAAU,EAAEqU,EAAEswJ,gBAAgB,WAAW,OAAOtwJ,EAAEswJ,gBAAgBtwJ,EAAE+vJ,IAAI1B,GAAG5zJ,MAAM,KAAK9O,UAAU,EAAEqU,EAAEuwJ,uBAAuB,WAAW,OAAOvwJ,EAAEuwJ,uBAAuBvwJ,EAAE+vJ,IAAI3D,GAAG3xJ,MAAM,KAAK9O,UAAU,EAAEqU,EAAE8mJ,WAAW,WAAW,OAAO9mJ,EAAE8mJ,WAAW9mJ,EAAE+vJ,IAAI/B,GAAGvzJ,MAAM,KAAK9O,UAAU,EAAEqU,EAAE+iJ,cAAc,WAAW,OAAO/iJ,EAAE+iJ,cAAc/iJ,EAAE+vJ,IAAI1C,GAAG5yJ,MAAM,KAAK9O,UAAU,EAAEqU,EAAEwwJ,kBAAkB,WAAW,OAAOl6E,EAAGt2E,EAAEwwJ,kBAAkBxwJ,EAAE+vJ,IAAIxD,GAAG9xJ,MAAM,KAAK9O,UAAU,GAAG,SAASkkK,GAAGn4J,GAAGxP,KAAKD,KAAK,aAAaC,KAAKO,QAAQ,gCAAgCiP,EAAE,IAAIxP,KAAKyU,OAAOjF,CAAC,CAAC,SAAS+4J,GAAG/4J,GAAG,SAAS/G,IAAIiiC,IAAIA,GAAE,EAAG5yB,EAAEy9I,WAAU,EAAG3qH,IAAOw7H,EAAEx9H,GAAGw9H,EAAEf,GAAGhgJ,EAAEvN,GAAGA,EAAE0wJ,sBAAsB1wJ,EAAE0wJ,uBAAuB,WAAW,GAAG1wJ,EAAE6+I,QAAQ,IAAI,mBAAmB7+I,EAAE6+I,UAAU7+I,EAAE6+I,QAAQ,CAAC7+I,EAAE6+I,UAAU7+I,EAAE6+I,QAAQjzJ,QAAQ8L,EAAEsI,EAAE6+I,QAAQ5kH,QAAQuzH,EAAE5sG,QAAQlpD,GAAG,IAAIA,EAAE42J,EAAEd,EAAE,CAA/I,IAAoJ,CAAC91J,EAAEA,GAAGzJ,EAAEy/J,EAAE,IAAK,WAAW,GAAG1tJ,EAAE8+I,OAAO,IAAI,mBAAmB9+I,EAAE8+I,SAAS9+I,EAAE8+I,OAAO,CAAC9+I,EAAE8+I,SAAS9+I,EAAE8+I,OAAOlzJ,QAAQ8L,EAAEsI,EAAE8+I,OAAO7kH,QAAQqzH,EAAE1sG,QAAQlpD,GAAG,IAAIA,EAAE42J,EAAEhB,EAAE,CAAzI,GAA6II,EAAE,IAAI1tJ,EAAE4tH,WAAW5tH,EAAE4tH,UAAU,cAAcjsG,YAAW,WAAWA,YAAW,WAAW3hB,EAAE4tH,UAAU,GAAG,GAAE,GAAGj9H,GAAG,GAAE,IAAIA,KAAK,CAAC,GAAGoyC,EAAE,SAASrrC,IAAIk7B,GAAG69H,KAAK79H,IAAImQ,EAAErrC,EAAE,EAAEsI,EAAE2+I,IAAI8R,GAAGzwJ,EAAE2wJ,QAAQ,IAAI,mBAAmB3wJ,EAAE2wJ,UAAU3wJ,EAAE2wJ,QAAQ,CAAC3wJ,EAAE2wJ,UAAU3wJ,EAAE2wJ,QAAQ/kK,OAAO,GAAGoU,EAAE2wJ,QAAQ70G,KAAV97C,GAAkB,OAAOisJ,GAAE,EAAGwE,KAAK9/J,EAAEk4C,KAAK,GAAuDhpD,EAAOD,QAAQ6mK,YCkCxqV5mK,EAAOD,QAlCU,CAsBbgxK,gBAAeA,CAACC,EAAY19I,EAAU29I,IAGf,iBAFPD,EAGD,KAHCA,EAMDv5H,QAAQ,SAAUnkB,GACxBmkB,QAAQ,iBAAiC,IAAhBw5H,cCvBtC,SAAS96I,EAAsBwM,EAAKm7H,GAChC,IAAKn7H,IAAQm7H,GAAmC,mBAApBn7H,EAAIvM,aACJ,mBAAd0nI,EAAKpsJ,KACf,MAAM,IAAInI,MAAM,qDAEpBlB,KAAKs6B,IAAMA,EACXt6B,KAAKy1J,KAAOA,CAChB,CAUA3nI,EAAsB1sB,UAAU8tB,QAAU,WAAkB,QAAA9c,EAAA3O,UAAAC,OAANoP,EAAI,IAAA3S,MAAAiS,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJQ,EAAIR,GAAA7O,UAAA6O,GACtD,MAAMu2J,EAAW/1J,EAAK,GAItBA,EAAK,GAAK9S,KAAKy1J,KAGfz1J,KAAKs6B,IAAIvM,YACL86I,EACAC,SAAS1nK,UAAUgvB,KAAK7d,MAAMvS,KAAKy1J,KAAKpsJ,KAAMyJ,GACtD,EAEAnb,EAAOD,QAAUo2B,YC1BjB,MAAMvf,EAAW,GAGXw6J,EAAoBjgK,OAAOgyB,QAY3BkuI,EAA0BlgK,OAAOmgK,qBAYvCngK,OAAOgyB,QAlBP,WAA0C,QAAA1oB,EAAA3O,UAAAC,OAANoP,EAAI,IAAA3S,MAAAiS,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJQ,EAAIR,GAAA7O,UAAA6O,GACpC/D,EAASH,SAAQC,GAAWA,KAAWyE,KACvCi2J,GAAqBA,KAAqBj2J,EAC9C,EAgBAhK,OAAOmgK,qBAPP,SAAuCx6J,GACnCF,EAASH,SAAQC,GAAWA,EAAQ,KAAM,KAAM,KAAM,KAAMI,EAAMiG,UAClEs0J,GAA2BA,EAAwBv6J,EACvD,EAMA,MAAM+D,EAAuB,CAKzBgiC,WAAWnmC,GACPE,EAASe,KAAKjB,EAClB,EAMAoR,iBAAiB7f,GACb,MAAMspK,EAAapgK,OAAOgyB,QAErBouI,GAGLA,EAAW,KAAM,KAAM,KAAM,KAAMtpK,EACvC,EAMAupK,8BAA8BvpK,GAC1B,MAAMspK,EAAapgK,OAAOmgK,qBAErBC,GAGLA,EAAWtpK,EACf,GAIJjI,EAAOD,QAAU8a,YC5DjB,SAAS42J,EAAUj7H,EAAK3yB,GACpB,OAAOD,KAAKgzB,MAAMhzB,KAAKizB,UAAYhzB,EAAM2yB,EAAM,IAAMA,CACzD,CAOA,SAASk7H,EAAcroG,GACnB,OAAOA,EAAIooG,EAAU,EAAGpoG,EAAIt9D,OAAS,GACzC,CAoBA,MAAM2zD,EAAa,CAKfiyG,eAAcA,IACHD,EA7CI,oBAoDfE,gBAAgB9/H,GACZ,IAAIp0B,EAAM,GAEV,KAAOo0B,KACHp0B,GAAOrV,KAAKspK,iBAGhB,OAAOj0J,CACX,EACAg0J,gBACAG,kBApCJ,SAA2B9lK,GACvB,IAAIsc,EAAS,GAEb,IAAK,IAAIja,EAAI,EAAGA,EAAIrC,EAAQqC,GAAK,EAC7Bia,GAAUqpJ,EApCZ,kEAuCF,OAAOrpJ,CACX,EA6BIopJ,aAGJzxK,EAAOD,QAAU2/D,iBC5EjB,MAAMoyG,EAAyBh6J,EAAQ,MAQjC0Y,EAAa,CAgBfuhJ,WACQpvI,EACAxgB,EACA6vJ,EACAC,EACAC,EACArqJ,GACJ,MAAM4gB,EAAIjG,SACJlK,EAAU,SACV65I,EAAS1pI,EAAEu6D,cAAc1qE,GACzB85I,EAAgB3pI,EAAEgnB,qBAAqBn3B,GAAS,GAItD,GAFA65I,EAAOhwJ,MAAQA,EAEX8vJ,EAAa,CAGb,MAAMI,EAAWP,IAEjB,GAAIO,EAAU,CACV,MAAMC,EAAYD,EAAS1vI,IACrB4vI,EACAD,EAAU/5I,UAAU,EAAG+5I,EAAU/+I,YAAY,KAAO,GAEtD++I,GAAaC,IAEb5vI,EAAM4vI,EAAgB5vI,EAE9B,CACJ,CAEIuvI,IACAC,EAAOvG,OAASsG,GAEhBrqJ,IACAsqJ,EAAOhvI,QAAUtb,GAGrBsqJ,EAAOxvI,IAAMA,EACTqvI,EACAI,EAAcI,WAAW7lG,aAAawlG,EAAQC,GAE9CA,EAAcI,WAAW97G,YAAYy7G,EAE7C,GAKJnyK,EAAOD,QAAUywB,kBCzEjB,MAAMkvC,EAAa5nD,EAAQ,MASrB0gF,EAAQ,CACV,UAAW,QAAS,UAAW,QAAS,QAAS,WAAY,OAC7D,SAAU,QAAS,WAAY,MAAO,OAAQ,WAAY,UAC1D,UAAW,WAAY,QAAS,UAAW,MAAO,OAAQ,YAC1D,UAAW,OAAQ,OAAQ,QAAS,UAAW,QAAS,WAAY,QACpE,SAAU,UAAW,QAAS,SAAU,SAAU,SAAU,QAC5D,SAAU,SAAU,WAAY,SAAU,SAAU,SAAU,UAC9D,WAAY,SAAU,SAAU,WAAY,QAAS,QAAS,QAC9D,UAAW,WAAY,QAAS,QAAS,OAAQ,QAAS,QAAS,SACnE,QAAS,SAAU,QAAS,KAAM,SAAU,OAAQ,QAAS,SAC7D,SAAU,SAAU,OAAQ,SAAU,UAAW,WAAY,UAC7D,QAAS,SAAU,OAAQ,QAAS,OAAQ,QAAS,YACrD,aAAc,OAAQ,QAAS,QAAS,aAAc,aACtD,UAAW,SAAU,OAAQ,QAAS,YAAa,YAAa,YAChE,aAAc,aAAc,cAAe,YAAa,UACxD,WAAY,SAAU,SAAU,SAAU,aAAc,MAAO,UAC/D,UAAW,SAAU,SAAU,UAAW,UAAW,MAAO,OAAQ,QACpE,SAAU,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACpE,QAAS,QAAS,QAAS,SAAU,QAAS,UAAW,OAAQ,WACjE,OAAQ,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SAClE,QAAS,QAAS,SAAU,QAAS,SAAU,SAAU,UACzD,SAAU,SAAU,QAAS,QAAS,QAAS,QAAS,QAAS,UACjE,SAAU,SAAU,QAAS,UAAW,UAAW,OAAQ,QAAS,OACpE,QAAS,QAAS,OAAQ,SAAU,MAAO,OAAQ,MAAO,SAC1D,WAAY,QAAS,QAAS,YAAa,YAAa,WAAY,QACpE,WAAY,YAAa,SAAU,SAAU,OAAQ,QAAS,SAC9D,WAAY,WAAY,WAAY,WAAY,SAAU,QAAS,QACnE,SAAU,QAAS,SAAU,QAAS,QAAS,SAAU,SAAU,OACnE,UAAW,WAAY,YAAa,WAAY,UAAW,YAC3D,OAAQ,UAAW,UAAW,QAAS,QAAS,SAAU,UAC1D,aAAc,SAAU,YAAa,YAAa,UAAW,aAC7D,WAAY,UAAW,SAAU,SAAU,OAAQ,QAAS,MAC5D,UAAW,UAAW,OAAQ,YAAa,UAAW,QAAS,SAC/D,QAAS,MAAO,SAAU,UAAW,OAAQ,QAAS,UAAW,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,SAAU,UAAW,OACrE,OAAQ,SAAU,UAAW,UAAW,OAAQ,MAAO,SAAU,SACjE,QAAS,QAAS,UAAW,UAAW,MAAO,OAAQ,SAAU,WACjE,SAAU,QAAS,UAAW,SAAU,SAAU,OAAQ,UAC1D,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,YAC1D,SAAU,SAAU,UAAW,YAAa,WAAY,UACxD,UAAW,UAAW,SAAU,SAAU,SAAU,SAAU,SAC9D,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,OAAQ,QAAS,OACnE,SAAU,SAAU,UAAW,SAAU,QAAS,UAAW,QAC7D,OAAQ,aAAc,SAAU,SAAU,WAAY,OAAQ,UAC9D,OAAQ,QAAS,QAAS,MAAO,WAAY,WAAY,UACzD,SAAU,QAAS,SAAU,WAAY,aAAc,YACvD,UAAW,WAAY,WAAY,WAAY,UAAW,SAC1D,WAAY,UAAW,QAAS,OAAQ,QAAS,SAAU,UAC3D,WAAY,QAAS,SAAU,OAAQ,UAAW,SAAU,QAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,SAAU,OACrE,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,SACzD,UAAW,QAAS,KAAM,SAAU,QAAS,SAAU,SAAU,QACjE,OAAQ,OAAQ,SAAU,WAAY,UAAW,SAAU,QAC3D,UAAW,QAAS,SAAU,SAAU,UAAW,SAAU,SAC7D,UAAW,UAAW,UAAW,QAAS,UAAW,UAAW,SAChE,SAAU,UAAW,UAAW,SAAU,UAAW,UAAW,UAChE,SAAU,UAAW,UAAW,QAAS,OAAQ,QAAS,OAAQ,QAClE,SAAU,UAAW,QAAS,UAAW,YAAa,SAAU,UAChE,WAAY,UAAW,QAAS,UAAW,WAAY,QAAS,YAChE,QAAS,QAAS,SAAU,WAAY,SAAU,QAAS,QAC3D,SAAU,QAAS,SAAU,QAAS,OAAQ,MAAO,QAAS,SAC9D,QAAS,WAAY,SAAU,UAAW,SAAU,OAAQ,QAC5D,SAAU,UAAW,OAAQ,QAAS,UAAW,OAAQ,UACzD,SAAU,SAAU,UAAW,SAAU,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,UAAW,aAAc,UACxD,UAAW,UAAW,OAAQ,QAAS,UAAW,SAAU,WAC5D,SAAU,QAAS,SAAU,QAAS,SAAU,WAAY,SAC5D,UAAW,WAAY,UAAW,SAAU,UAAW,QAAS,YAChE,SAAU,WAAY,WAAY,UAAW,WAAY,SACzD,UAAW,SAAU,SAAU,OAAQ,WAAY,QAAS,UAC5D,UAAW,SAAU,YAAa,YAAa,UAAW,SAC1D,WAAY,WAAY,YAAa,YAAa,WAAY,UAC9D,QAAS,QAAS,SAAU,UAAW,QAAS,SAAU,UAC1D,UAAW,YAAa,YAAa,QAAS,SAAU,QAAS,OACjE,QAAS,WAAY,QAAS,SAAU,WAAY,SAAU,WAC9D,UAAW,WAAY,UAAW,UAAW,UAAW,YACxD,QAAS,UAAW,WAAY,QAAS,OAAQ,UAAW,UAC5D,UAAW,UAAW,UAAW,OAAQ,WAAY,WAAY,QACjE,QAAS,SAAU,UAAW,aAAc,YAAa,aACzD,YAAa,YAAa,WAAY,aAAc,cACpD,UAAW,QAAS,QAAS,SAAU,QAAS,SAAU,QAC1D,WAAY,QAAS,SAAU,QAAS,aAAc,QAAS,WAC/D,QAAS,QAAS,SAAU,UAAW,UAAW,WAAY,OAC9D,UAAW,UAAW,aAAc,aAAc,UAAW,OAC7D,SAAU,QAAS,SAAU,QAAS,YAAa,WAAY,UAC/D,QAAS,UAAW,WAAY,SAAU,QAAS,QAAS,OAAQ,OACpE,QAAS,OAAQ,UAAW,QAAS,UAAW,SAAU,OAAQ,SAClE,SAAU,WAAY,aAAc,SAAU,SAAU,SAAU,QAClE,SAAU,YAAa,aAAc,WAAY,SAAU,OAC3D,UAAW,SAAU,WAAY,UAAW,SAAU,SAAU,SAChE,SAAU,YAAa,UAAW,UAAW,SAAU,UAAW,OAClE,OAAQ,WAAY,MAAO,QAAS,WAAY,SAAU,UAC1D,WAAY,WAAY,YAAa,aAAc,OAAQ,UAC3D,UAAW,SAAU,OAAQ,SAAU,SAAU,UAAW,QAC5D,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,OACnE,SAAU,SAAU,SAAU,UAAW,SAAU,SAAU,SAC7D,SAAU,QAAS,MAAO,OAAQ,SAAU,OAAQ,WAAa,UACjE,SAAU,UAAW,WAAY,WAAY,SAAU,SAAU,QACjE,QAAS,SAAU,SAAU,UAAW,UAAW,QAAS,QAC5D,SAAU,UAAW,SAAU,QAAS,SAAU,SAAU,UAC5D,QAAS,SAAU,UAAW,SAAU,UAAW,SAAU,UAC7D,SAAU,SAAU,SAAU,QAAS,UAAW,QAAS,OAAQ,QACnE,QAAS,SAAU,QAAS,UAAW,OAAQ,SAAU,MAAO,SAChE,QAAS,QAAS,SAAU,OAAQ,WAAY,SAAU,UAC1D,SAAU,SAAU,UAAW,MAAO,QAAS,OAAQ,QAAS,QAChE,SAAU,UAAW,UAAW,UAAW,QAAS,UAAW,OAC/D,QAAS,SAAU,UAAW,SAAU,UAAW,WAAY,QAC/D,UAAW,WAAY,UAAW,WAAY,YAAa,SAAU,OACrE,QAAS,SAAU,OAAQ,UAAW,UAAW,SAAU,SAC3D,QAAS,SAAU,QAAS,UAAW,UAAW,UAAW,UAC7D,UAAW,SAAU,UAAW,SAAU,WAAY,WAAY,UAClE,UAAW,QAAS,UAAW,QAAS,QAAS,QAAS,UAC1D,QAAS,UAAW,SAAU,SAAU,UAAW,QAAS,SAC5D,QAAS,SAAU,SAAU,UAAW,OAAQ,OAAQ,OAAQ,QAChE,OAAQ,QAAS,UAAW,UAAW,WAAY,WAAY,WAC/D,UAAW,UAAW,YAAa,MAAO,SAAU,SAAU,UAC9D,QAAS,UAAW,SAAU,QAAS,OAAQ,SAAU,SAAU,QACnE,WAAY,UAAW,SAAU,SAAU,SAAU,OAAQ,UAC7D,QAAS,QAAS,QAAS,OAAQ,QAAS,SAAU,QAAS,SAC/D,UAAW,SAAU,QAAS,SAAU,QAAS,OAAQ,UACzD,UAAW,UAAW,aAAc,SAAU,SAAU,OAAQ,QAChE,KAAM,MAAO,MAAO,QAAS,OAAQ,QAAS,UAAW,SAAU,SACnE,SAAU,OAAQ,UAAW,SAAU,UAAW,QAAS,SAC3D,QAAS,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,OAClE,SAAU,SAAU,SAAU,OAAQ,QAAS,SAAU,SACzD,WAAY,WAAY,WAAY,UAAW,SAAU,QAAS,SAClE,UAAW,WAAY,WAAY,MAAO,QAAS,SAAU,QAC7D,UAAW,SAAU,SAAU,UAAW,QAAS,YAAa,QAChE,SAAU,SAAU,SAAU,QAAS,YAAa,OAAQ,QAC5D,QAAS,SAAU,UAAW,QAAS,YAAa,QAAS,SAC7D,OAAQ,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,UACjE,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,SACnE,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,OAAQ,UAC/D,SAAU,SAAU,QAAS,UAAW,UAAW,QAAS,OAAQ,OACpE,QAAS,SAAU,WAAY,SAAU,SAAU,QAAS,OAC5D,UAAW,WAAY,aAAc,QAAS,SAAU,QAAS,SACjE,OAAQ,QAAS,MAAO,OAAQ,QAAS,QAAS,OAAQ,SAC1D,UAAW,UAAW,MAAO,WAAY,OAAQ,QAAS,QAAS,QACnE,SAAU,OAAQ,QAAS,OAAQ,SAAU,OAAQ,SAAU,YAC/D,YAAa,UAAW,QAAS,QAAS,QAAS,OAAQ,YAC3D,YAAa,OAAQ,UAAW,YAAa,QAAS,SAAU,UAChE,UAAW,UAAW,SAAU,WAAY,OAAQ,QAAS,QAC7D,UAAW,QAAS,QAAS,SAAU,SAAU,UAAW,OAAQ,QACpE,UAAW,OAAQ,SAAU,UAAW,MAAO,SAAU,OACzD,aAAc,QAAS,MAAO,UAAW,SAAU,WAAY,UAC/D,WAAY,QAAS,OAAQ,QAAS,QAAS,UAAW,WAC1D,OAAQ,SAAU,UAAW,MAAO,SAAU,QAAS,SAAU,WACjE,SAAU,SAAU,MAAO,OAAQ,WAAY,UAAW,WAC1D,WAAY,SAAU,SAAU,QAAS,SAAU,SAAU,OAC7D,WAAY,QAAS,QAAS,YAAa,WAAY,OAAQ,QAC/D,SAAU,SAAU,QAAS,WAAY,MAAO,WAAY,YAC5D,UAAW,UAAW,UAAW,UAAW,OAAQ,QAAS,OAC7D,SAAU,UAAW,SAAU,UAAW,YAAa,YACvD,UAAW,YAAa,YAAa,SAAU,QAAS,UAAW,QACnE,OAAQ,QAAS,UAAW,SAAU,WAAY,YAAa,WAC/D,aAAc,WAAY,QAAS,SAAU,UAAW,SAAU,QAClE,SAAU,YAAa,QAAS,SAAU,OAAQ,UAAW,YAC7D,YAAa,UAAW,OAAQ,OAAQ,UAAW,SAAU,WAC7D,UAAW,SAAU,UAAW,SAAU,UAAW,UAAW,WAChE,QAAS,QAAS,SAAU,QAAS,MAAO,QAAS,UAAW,OAChE,UAAW,UAAW,YAAa,UAAW,WAAY,MAAO,WACjE,SAAU,YAAa,YAAa,aAAc,WAAY,WAC9D,UAAW,SAAU,YAAa,SAAU,UAAW,QAAS,UAChE,WAAY,SAAU,QAAS,SAAU,WAAY,MAAO,SAC5D,SAAU,UAAW,WAAY,QAAS,QAAS,UAAW,OAC9D,OAAQ,UAAW,WAAY,WAAY,WAAY,WACvD,WAAY,UAAW,SAAU,OAAQ,SAAU,SAAU,UAC7D,SAAU,UAAW,QAAS,SAAU,UAAW,SAAU,QAC7D,SAAU,WAAY,QAAS,SAAU,QAAS,YAAa,SAC/D,UAAW,QAAS,OAAQ,QAAS,WAAY,WAAY,UAC7D,QAAS,WAAY,UAAW,UAAW,SAAU,YAAa,SAClE,QAAS,YAAa,WAAY,SAAU,SAAU,MAAO,SAC7D,OAAQ,UAAW,MAAO,OAAQ,YAAa,SAAU,SAAU,SACnE,SAAU,MAAO,UAAW,QAAS,QAAS,QAAS,SAAU,OACjE,QAAS,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SACnE,WAAY,QAAS,SAAU,UAAW,SAAU,SAAU,SAC9D,QAAS,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,QACnE,UAAW,SAAU,QAAS,SAAU,QAAS,QAAS,SAC1D,SAAU,QAAS,SAAU,SAAU,UAAW,YAAa,QAC/D,YAAa,QAAS,UAAW,SAAU,UAAW,UAAW,WACjE,WAAY,UAAW,QAAS,SAAU,SAAU,SAAU,UAC9D,UAAW,QAAS,YAAa,UAAW,UAAW,QAAS,SAChE,WAAY,QAAS,SAAU,SAAU,SAAU,SAAU,QAC7D,OAAQ,SAAU,UAAW,WAAY,QAAS,UAAW,SAC7D,SAAU,OAAQ,SAAU,SAAU,OAAQ,QAAS,WAAY,SACnE,QAAS,MAAO,UAAW,OAAQ,MAAO,QAAS,SAAU,UAC7D,WAAY,MAAO,MAAO,QAAS,SAAU,MAAO,QAAS,SAC7D,WAAY,UAAW,OAAQ,OAAQ,SAAU,QAAS,QAAS,SACnE,UAAW,WAAY,WAAY,OAAQ,UAAW,OAAQ,SAC9D,SAAU,SAAU,SAAU,SAAU,OAAQ,SAAU,QAAS,QACnE,MAAO,OAAQ,QAAS,MAAO,WAAY,SAAU,SAAU,OAC/D,QAAS,WAAY,UAAW,OAAQ,YAAa,SAAU,UAC/D,UAAW,QAAS,SAAU,YAAa,UAAW,WAAY,OAClE,OAAQ,QAAS,QAAS,QAAS,SAAU,QAAS,SAAU,SAChE,QAAS,QAAS,UAAW,OAAQ,QAAS,SAAU,QAAS,QACjE,QAAS,SAAU,QAAS,QAAS,WAAY,QAAS,UAC1D,QAAS,QAAS,QAAS,QAAS,UAAW,SAAU,MAAO,OAChE,QAAS,OAAQ,UAAW,UAAW,QAAS,SAAU,SAAU,QACpE,QAAS,SAAU,SAAU,OAAQ,SAAU,WAAY,YAC3D,QAAS,QAAS,QAAS,QAAS,SAAU,UAAW,SACzD,UAAW,SAAU,SAAU,QAAS,SAAU,QAAS,SAC3D,UAAW,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAC3D,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,OACrE,WAAY,SAAU,SAAU,MAAO,WAAY,WAAY,OAC/D,WAAY,UAAW,UAAW,SAAU,OAAQ,UAAW,SAC/D,WAAY,WAAY,WAAY,SAAU,QAAS,SAAU,UACjE,SAAU,QAAS,UAAW,SAAU,UAAW,WAAY,SAC/D,QAAS,SAAU,SAAU,UAAW,SAAU,UAAW,QAC7D,OAAQ,QAAS,UAAW,SAAU,UAAW,QAAS,UAC1D,QAAS,OAAQ,SAAU,QAAS,QAAS,SAAU,UAAW,SAClE,QAAS,KAAM,OAAQ,QAAS,SAAU,SAAU,UAAW,SAC/D,QAAS,UAAW,UAAW,QAAS,OAAQ,MAAO,OAAQ,SAC/D,SAAU,OAAQ,QAAS,SAAU,UAAW,WAAY,OAC5D,YAAa,YAAa,UAAW,SAAU,WAAY,UAC3D,QAAS,MAAO,QAAS,UAAW,WAAY,WAAY,SAC5D,UAAW,QAAS,SAAU,QAAS,SAAU,QAAS,OAAQ,SAClE,WAAY,SAAU,YAAa,OAAQ,SAAU,UAAW,SAChE,UAAW,WAAY,QAAS,QAAS,QAAS,SAAU,UAC5D,SAAU,MAAO,QAAS,QAAS,UAAW,QAAS,OAAQ,OAC/D,QAAS,SAAU,OAAQ,QAAS,QAAS,SAAU,UACvD,WAAY,QAAS,SAAU,SAAU,QAAS,SAAU,OAC5D,SAAU,SAAU,SAAU,UAAW,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,QAAS,QAAS,OAAQ,QAAS,OAClE,QAAS,QAAS,QAAS,SAAU,OAAQ,SAAU,SAAU,SACjE,UAAW,UAAW,OAAQ,QAAS,UAAW,QAAS,OAAQ,SACnE,UAAW,UAAW,SAAU,SAAU,SAAU,OAAQ,OAC5D,SAAU,UAAW,QAAS,OAAQ,UAAW,WAAY,SAC7D,SAAU,OAAQ,SAAU,SAAU,QAAS,SAAU,WACzD,SAAU,WAAY,QAAS,YAAa,WAAY,UACxD,UAAW,WAAY,YAAa,YAAa,WAAY,WAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,UAAW,UAClE,SAAU,QAAS,MAAO,OAAQ,SAAU,SAAU,QAAS,SAC/D,SAAU,WAAY,SAAU,QAAS,SAAU,SAAU,SAC7D,QAAS,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,QAAS,SAClE,SAAU,SAAU,MAAO,UAAW,SAAU,WAAY,QAC5D,UAAW,UAAW,UAAW,UAAW,QAAS,SAAU,QAC/D,WAAY,SAAU,OAAQ,UAAW,UAAW,QAAS,QAC7D,QAAS,QAAS,WAAY,SAAU,SAAU,OAAQ,QAAS,SACnE,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAS,MAAO,WAC9D,OAAQ,MAAO,OAAQ,OAAQ,UAAW,UAAW,QAAS,OAC9D,OAAQ,OAAQ,QAAS,OAAQ,SAAU,QAAS,OAAQ,QAAS,OACrE,SAAU,WAAY,UAAW,WAAY,YAAa,aAC1D,aAAc,SAAU,UAAW,UAAW,WAAY,OAAQ,SAClE,OAAQ,OAAQ,QAAS,UAAW,QAAS,QAAS,OAAQ,QAC9D,OAAQ,WAAY,YAAa,QAAS,SAAU,QAAS,UAC7D,SAAU,QAAS,SAAU,OAAQ,QAAS,UAAW,QAAS,QAClE,QAAS,QAAS,SAAU,SAAU,WAAY,WAAY,WAC9D,YAAa,SAAU,UAAW,QAAS,SAAU,SAAU,SAC/D,UAAW,UAAW,SAAU,UAAW,QAAS,UAAW,WAC/D,SAAU,QAAS,QAAS,SAAU,MAAO,QAAS,SAAU,SAChE,SAAU,OAAQ,MAAO,OAAQ,QAAS,UAAW,OAAQ,QAC7D,SAAU,QAAS,QAAS,SAAU,QAAS,SAAU,QAAS,SAClE,SAAU,MAAO,QAAS,OAAQ,UAAW,WAAY,QAAS,SAClE,SAAU,SAAU,UAAW,UAAW,WAAY,QAAS,OAC/D,SAAU,SAAU,QAAS,SAAU,SAAU,OAAQ,QAAS,UAClE,OAAQ,MAAO,QAAS,OAAQ,QAAS,QAAS,MAAO,OAAQ,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,UAAW,QAC3D,UAAW,WAAY,SAAU,QAAS,OAAQ,SAAU,OAC5D,UAAW,QAAS,UAAW,UAAW,SAAU,SAAU,UAC9D,SAAU,OAAQ,WAAY,UAAW,QAAS,OAAQ,SAC1D,SAAU,YAAa,QAAS,QAAS,OAAQ,OAAQ,SAAU,OACnE,MAAO,SAAU,QAAS,SAAU,QAAS,QAAS,OAAQ,UAC9D,QAAS,SAAU,SAAU,UAAW,UAAW,OAAQ,SAC3D,QAAS,SAAU,MAAO,QAAS,SAAU,UAAW,WACxD,SAAU,MAAO,QAAS,QAAS,QAAS,UAAW,QAAS,WAChE,SAAU,UAAW,QAAS,UAAW,SAAU,OAAQ,QAC3D,SAAU,MAAO,SAAU,QAAS,OAAQ,QAAS,QAAS,OAC9D,OAAQ,OAAQ,OAAQ,OAAQ,UAAW,SAAU,MAAO,OAAQ,QACpE,OAAQ,OAAQ,QAAS,UAAW,QAAS,UAAW,QAAS,MACjE,QAAS,OAAQ,QAAS,OAAQ,YAAa,OAAQ,WACvD,UAAW,WAAY,WAAY,UAAW,WAAY,QAAS,QACnE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,MAClE,SAAU,QAAS,UAAW,SAAU,WAAY,YAAa,SACjE,WAAY,SAAU,OAAQ,QAAS,QAAS,QAAS,UACzD,UAAW,WAAY,UAAW,UAAW,SAAU,UAAW,SAClE,UAAW,UAAW,QAAS,SAAU,SAAU,UAAW,OAC9D,OAAQ,SAAU,YAAa,YAAa,WAAY,WACxD,YAAa,UAAW,SAAU,QAAS,SAAU,SAAU,WAC/D,YAAa,YAAa,aAAc,aAAc,YAAa,QACnE,SAAU,SAAU,UAAW,aAAc,QAAS,SAAU,SAChE,SAAU,UAAW,UAAW,WAAY,WAAY,UACxD,UAAW,QAAS,UAAW,WAAY,WAAY,UAAW,UAClE,WAAY,SAAU,QAAS,SAAU,SAAU,UAAW,UAC9D,aAAc,WAAY,UAAW,OAAQ,SAAU,SAAU,SACjE,UAAW,SAAU,SAAU,SAAU,UAAW,UAAW,WAC/D,WAAY,QAAS,SAAU,UAAW,UAAW,QAAS,SAC9D,OAAQ,SAAU,WAAY,SAAU,QAAS,QAAS,SAC1D,UAAW,WAAY,UAAW,UAAW,OAAQ,SAAU,SAC/D,OAAQ,QAAS,SAAU,UAAW,UAAW,WAAY,UAC7D,WAAY,QAAS,MAAO,QAAS,SAAU,aAAc,aAC7D,cAAe,SAAU,UAAW,SAAU,UAAW,MAAO,OAChE,UAAW,WAAY,OAAQ,SAAU,UAAW,QAAS,QAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,OAAQ,SAC/D,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,UAC1D,SAAU,SAAU,SAAU,UAAW,SAAU,UAAW,WAC9D,WAAY,OAAQ,QAAS,SAAU,UAAW,SAAU,SAC5D,OAAQ,MAAO,UAAW,QAAS,UAAW,WAAY,UAC1D,UAAW,SAAU,UAAW,WAAY,SAAU,UAAW,OACjE,QAAS,QAAS,QAAS,UAAW,SAAU,SAAU,OAAQ,SAClE,OAAQ,UAAW,SAAU,UAAW,WAAY,SAAU,SAC9D,WAAY,QAAS,UAAW,WAAY,SAAU,UAAW,UACjE,UAAW,WAAY,WAAY,SAAU,SAAU,QAAS,OAChE,SAAU,UAAW,SAAU,YAAa,aAAc,UAC1D,QAAS,QAAS,SAAU,SAAU,SAAU,WAAY,SAC5D,OAAQ,QAAS,QAAS,SAAU,SAAU,UAAW,WACzD,SAAU,OAAQ,SAAU,SAAU,UAAW,MAAO,OAAQ,SAChE,QAAS,OAAQ,SAAU,OAAQ,QAAS,QAAS,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,OAAQ,SAAU,QAAS,SACjE,WAAY,UAAW,OAAQ,QAAS,MAAO,UAAW,UAC1D,UAAW,SAAU,YAAa,YAAa,YAAa,SAC5D,SAAU,OAAQ,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,QACpE,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,OAAQ,SACjE,SAAU,MAAO,WAAY,YAAa,UAAW,OAAQ,WAC7D,WAAY,OAAQ,SAAU,UAAW,SAAU,YAAa,QAChE,SAAU,QAAS,QAAS,OAAQ,UAAW,OAAQ,OAAQ,OAC/D,QAAS,MAAO,OAAQ,SAAU,QAAS,SAAU,QAAS,OAC9D,QAAS,OAAQ,OAAQ,UAAW,WAAY,SAAU,QAAS,SACnE,SAAU,UAAW,OAAQ,UAAW,MAAO,OAAQ,SAAU,OACjE,SAAU,OAAQ,UAAW,MAAO,QAAS,SAAU,OAAQ,SAC/D,OAAQ,MAAO,OAAQ,MAAO,OAAQ,QAAS,OAAQ,OAAQ,SAC/D,QAAS,MAAO,QAAS,OAAQ,MAAO,OAAQ,OAAQ,UAAW,MACnE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,SAAU,UAC3D,OAAQ,QAAS,QAAS,QAAS,UAAW,UAAW,UAAW,QACpE,UAAW,SAAU,UAAW,OAAQ,OAAQ,SAAU,OAAQ,UAClE,QAAS,OAAQ,MAAO,OAAQ,SAAU,QAAS,QAAS,QAC5D,SAAU,QAAS,QAAS,QAAS,SAAU,UAAW,WAAY,MACtE,WAAY,WAAY,UAAW,QAAS,SAAU,OAAQ,QAC9D,UAAW,SAAU,SAAU,QAAS,UAAW,WAAY,QAC/D,SAAU,WAAY,WAAY,QAAS,QAAS,OAAQ,QAC5D,QAAS,SAAU,SAAU,SAAU,UAAW,SAAU,SAC5D,SAAU,OAAQ,SAAU,QAAS,QAAS,SAAU,WACxD,UAAW,UAAW,QAAS,SAAU,WAAY,YACrD,aAAc,WAAY,QAAS,UAAW,UAAW,SAAU,QACnE,UAAW,UAAW,UAAW,SAAU,WAAY,MAAO,SAC9D,SAAU,UAAW,SAAU,UAAW,QAAS,QAAS,UAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,QAAS,QACpE,SAAU,QAAS,UAAW,YAAa,SAAU,SAAU,UAC/D,UAAW,OAAQ,QAAS,MAAO,UAAW,WAAY,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,UAAW,QAAS,OACrE,QAAS,QAAS,SAAU,WAAY,OAAQ,SAAU,QAC1D,WAAY,YAAa,OAAQ,QAAS,SAAU,OAAQ,QAC5D,QAAS,SAAU,OAAQ,MAAO,MAAO,QAAS,WAAY,QAC9D,UAAW,OAAQ,QAAS,UAAW,WAAY,QAAS,UAC5D,UAAW,SAAU,WAAY,OAAQ,SAAU,SAAU,QAC7D,OAAQ,YAAa,QAAS,OAAQ,QAAS,OAAQ,SAAU,SACjE,UAAW,UAAW,QAAS,QAAS,QAAS,QAAS,MAAO,WACjE,SAAU,UAAW,UAAW,UAAW,OAAQ,UAAW,QAC9D,SAAU,UAAW,SAAU,OAAQ,UAAW,QAAS,MAAO,UAClE,QAAS,YAAa,OAAQ,OAAQ,UAAW,UAAW,WAC5D,YAAa,UAAW,WAAY,UAAW,UAAW,SAAU,OACpE,UAAW,UAAW,YAAa,WAAY,UAAW,UAC1D,QAAS,SAAU,SAAU,OAAQ,SAAU,QAAS,SAAU,UAClE,SAAU,UAAW,MAAO,QAAS,QAAS,UAAW,QAAS,QAClE,OAAQ,QAAS,UAAW,OAAQ,SAAU,OAAQ,SAAU,UAChE,QAAS,OAAQ,QAAS,SAAU,OAAQ,QAAS,QAAS,QAC9D,QAAS,UAAW,QAAS,SAAU,UAAW,UAAW,QAC7D,QAAS,OAAQ,QAAS,SAAU,QAAS,QAAS,WACtD,YAAa,MAAO,UAAW,WAAY,SAAU,QAAS,SAC9D,QAAS,SAAU,SAAU,WAAY,QAAS,UAAW,QAC7D,WAAY,UAAW,UAAW,SAAU,QAAS,QAAS,SAC9D,QAAS,OAAQ,UAAW,UAAW,WAAY,SAAU,WAC7D,WAAY,OAAQ,UAAW,SAAU,SAAU,OAAQ,YAC3D,UAAW,SAAU,SAAU,SAAU,SAAU,WAAY,OAC/D,OAAQ,SAAU,UAAW,QAAS,QAAS,SAAU,WACzD,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,SAC9D,QAAS,SAAU,QAAS,QAAS,SAAU,UAAW,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,WAAY,UAC7D,WAAY,UAAW,SAAU,UAAW,QAAS,MAAO,SAC5D,SAAU,SAAU,UAAW,SAAU,SAAU,QAAS,MAAO,SACnE,SAAU,UAAW,SAAU,OAAQ,QAAS,SAAU,QAC1D,UAAW,QAAS,QAAS,QAAS,QAAS,SAAU,SACzD,UAAW,SAAU,QAAS,OAAQ,WAAY,UAAW,UAC7D,SAAU,WAAY,SAAU,UAAW,YAAa,YACxD,WAAY,UAAW,UAAW,WAAY,QAAS,SAAU,UACjE,QAAS,SAAU,SAAU,QAAS,QAAS,SAAU,UAAW,QACpE,UAAW,OAAQ,QAAS,SAAU,SAAU,QAAS,SAAU,SACnE,YAAa,SAAU,UAAW,MAAO,QAAS,QAAS,SAC3D,QAAS,QAAS,SAAU,QAAS,OAAQ,QAAS,OAAQ,QAC9D,UAAW,UAAW,UAAW,OAAQ,SAAU,SAAU,MAAO,QACpE,UAAW,SAAU,WAAY,UAAW,WAAY,UAAW,QACnE,OAAQ,SAAU,QAAS,OAAQ,WAAY,SAAU,OAAQ,SACjE,OAAQ,WAAY,WAAY,UAAW,UAAW,WAAY,SAClE,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QAAS,SACjE,UAAW,UAAW,WAAY,QAAS,UAAW,OAAQ,OAC9D,QAAS,QAAS,OAAQ,MAAO,MAAO,QAAS,SAAU,SAC3D,QAAS,OAAQ,OAAQ,QAAS,WAAY,SAAU,MAAO,QAC/D,SAAU,QAAS,SAAU,SAAU,MAAO,WAAY,WAC1D,QAAS,UAAW,SAAU,UAAW,QAAS,SAAU,UAC5D,SAAU,OAAQ,UAAW,SAAU,WAAY,UAAW,UAC9D,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,QAAS,OACnE,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,UAC3D,QAAS,SAAU,SAAU,SAAU,MAAO,SAAU,QAAS,QACjE,QAAS,SAAU,OAAQ,WAAY,YAAa,YAAa,UACjE,SAAU,MAAO,QAAS,UAAW,SAAU,OAAQ,QAAS,QAChE,QAAS,QAAS,OAAQ,QAAS,SAAU,SAAU,QAAS,SAChE,OAAQ,QAAS,SAAU,UAAW,SAAU,SAAU,SAC1D,WAAY,QAAS,UAAW,UAAW,SAAU,QAAS,SAC9D,WAAY,OAAQ,QAAS,QAAS,QAAS,UAAW,WAC1D,WAAY,SAAU,QAAS,SAAU,WAAY,SAAU,SAC/D,WAAY,WAAY,OAAQ,OAAQ,OAAQ,SAAU,UAC1D,WAAY,SAAU,WAAY,WAAY,OAAQ,QAAS,QAC/D,SAAU,UAAW,SAAU,SAAU,QAAS,OAAQ,SAC1D,SAAU,OAAQ,SAAU,QAAS,UAAW,SAAU,aAC1D,UAAW,QAAS,SAAU,UAAW,SAAU,UAAW,SAC9D,UAAW,UAAW,QAAS,UAAW,UAAW,WAAY,UACjE,UAAW,aAAc,OAAQ,QAAS,UAAW,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,SAAU,SAAU,SAC1D,WAAY,WAAY,YAAa,SAAU,UAAW,UAC1D,QAAS,QAAS,SAAU,SAAU,UAAW,SAAU,UAC3D,SAAU,UAAW,SAAU,UAAW,WAAY,UAAW,UACjE,SAAU,SAAU,YAAa,UAAW,UAAW,OAAQ,UAC/D,UAAW,SAAU,SAAU,OAAQ,QAAS,YAAa,QAC7D,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAClE,QAAS,OAAQ,OAAQ,QAc7Bx4F,EAAOD,QAAU,CACb0yK,iBARJ,WAII,MAAQ,GAHK/yG,EAAWgyG,cAAcl5E,MACvB94B,EAAWmyG,kBAAkB,IAGhD,8BCjbA,MAAMa,EACS,iJAIf3yK,EAAQ4pC,MAAQ,SAAU+f,GAItB,MAAMipH,EAAkC,iBAAnB7mK,UAAAC,QAAA,OAAApD,EAAAmD,UAAA,MAA2BA,UAAAC,QAAA,OAAApD,EAAAmD,UAAA,IAC1C8mK,GAAU9mK,UAAAC,QAAA,IAAAD,UAAAC,OAAA,GAAc,IAAM4mK,EAAY7mK,UAAAC,QAAA,OAAApD,EAAAmD,UAAA,QAAanD,EACvDT,GAAW4D,UAAAC,QAAA,IAAAD,UAAAC,OAAA,GAAc,IAACD,UAAAC,QAAA,OAAApD,EAAAmD,UAAA,KAAgB6mK,GAAgB,CAAC,EAI3D/xH,EAAM5vC,KAAK24B,MAAM+f,EAAMkpH,GAI7B,MAA4B,WAAxB1qK,EAAQ2qK,YACDjyH,EAKNA,GACc,iBAARA,GAON8I,EAAKl8C,MAAMklK,IAMhB3yK,EAAQ+yK,KAAKlyH,EAAK14C,GAEX04C,GAbIA,CAcf,EAGA7gD,EAAQ+yK,KAAO,SAAUlyH,GAAmB,IAAd14C,EAAO4D,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEjC8oB,EAAO,CAACgsB,GAEZ,KAAOhsB,EAAK7oB,QAAQ,CAChB,MAAM4/C,EAAQ/2B,EACdA,EAAO,GAEP,IAAK,MAAMwD,KAAQuzB,EAAO,CACtB,GAAIjiD,OAAOD,UAAUye,eAAe7M,KAAK+c,EAAM,aAAc,CACzD,GAA4B,WAAxBlwB,EAAQ2qK,YACR,MAAM,IAAIE,YAAY,uDAGnB36I,EAAK46I,SAChB,CAEA,IAAK,MAAMjjK,KAAOqoB,EAAM,CACpB,MAAMpoB,EAAQooB,EAAKroB,GACfC,GACiB,iBAAVA,GAEP4kB,EAAKjd,KAAKygB,EAAKroB,GAEvB,CACJ,CACJ,CACJ,EAGAhQ,EAAQkzK,UAAY,SAAUvpH,EAAMkpH,GAEhC,IACI,OAAO7yK,EAAQ4pC,MAAM+f,EAAMkpH,EAC/B,CACA,MAAOM,GACH,OAAO,IACX,CACJ,kBCxEA,IAAInL,EAASjwJ,EAAQ,MAgDrB,SAASq7J,EAAaC,EAAYlrK,GAC9BG,KAAK+qK,WAAaA,EAClB/qK,KAAKgrK,oBAAmBnrK,IAAWA,EAAQmrK,mBAAmBnrK,EAAQmrK,iBACtEhrK,KAAKirK,cAAgBprK,GAAWA,EAAQorK,cAAgBprK,EAAQorK,cAAe,IAC/EjrK,KAAKkrK,eAAiBrrK,GAAWA,EAAQqrK,eAAiBrrK,EAAQqrK,eAAiB,IAGnF7pK,OAAO8G,KAAKu3J,EAAOyL,QAAQ/8J,QAC3B,SAAUg9J,GAENprK,KADiB0/J,EAAOyL,OAAOC,IACZ,WACfprK,KAAKqrK,KAAK94J,MAAMvS,KAAMyD,UAC1B,EAAE2sB,KAAKpwB,KAAMorK,EACjB,EAAEh7I,KAAKpwB,OAMPA,KAAKsrK,oBAAsB,KAM3BtrK,KAAK6kE,MAAQ,GAKb7kE,KAAKurK,SAAW,EAMhBvrK,KAAKwrK,YAAc,EACvB,CAgBAV,EAAa1pK,UAAUwH,UAAY,SAAU6iK,GACzC,IACI,OAAO9iK,KAAKC,UAAU6iK,EAC1B,CAAE,MAAO7rK,GACL,MAAO,8BACX,CACJ,EAiBAkrK,EAAa1pK,UAAUsqK,iBAAmB,SAC1CN,GAEI,IADA,IAAIr7J,EAAM,GACDhK,EAAI,EAAG0jC,EAAMhmC,UAAUC,OAAQqC,EAAI0jC,EAAK1jC,IAAK,CAClD,IAAIouJ,EAAM1wJ,UAAUsC,IAEf/F,KAAKgrK,kBAAoBI,IAAa1L,EAAOyL,OAAOnM,OACtC,iBAAR7K,IACPA,EAAMn0J,KAAK4I,UAAUurJ,IAEzBpkJ,GAAOokJ,EACHpuJ,IAAM0jC,EAAM,IACZ15B,GAAO,IAEf,CACA,OAAOA,EAAIrM,OAASqM,EAAM,IAC9B,EAQA+6J,EAAa1pK,UAAUiqK,KAAO,WAG1B,IAAIlnJ,EAAY1gB,UAAU,GACtBsM,EAAM/P,KAAK0rK,iBAAiBn5J,MAAMvS,KAAMyD,WAC5C,GAAIsM,EAAK,CAEL,IAAI47J,EAAc3rK,KAAK6kE,MAAM7kE,KAAK6kE,MAAMnhE,OAAS,IAC3BioK,GAAeA,EAAYtqH,QACzBtxC,EACpB47J,EAAYltH,OAAS,GAErBz+C,KAAK6kE,MAAMv1D,KAAK,CACZ+xC,KAAMtxC,EACNoU,UAAWA,EACXs6B,MAAO,IAEXz+C,KAAKurK,UAAYx7J,EAAIrM,OAE7B,CAEI1D,KAAKurK,UAAYvrK,KAAKkrK,gBACtBlrK,KAAK4rK,QAAO,GAAkB,EAEtC,EAMAd,EAAa1pK,UAAUqV,MAAQ,WAC3BzW,KAAK6rK,4BACT,EAOAf,EAAa1pK,UAAUyqK,2BAA6B,WAC5C7rK,KAAKsrK,sBACLxiK,OAAOuwB,aAAar5B,KAAKsrK,qBACzBtrK,KAAKsrK,oBAAsB,MAG/BtrK,KAAKsrK,oBAAsBxiK,OAAO2wB,WAC9Bz5B,KAAK4rK,OAAOx7I,KACRpwB,MAAM,GAA0B,GACpCA,KAAKirK,cACb,EAMAH,EAAa1pK,UAAUw0C,MAAQ,WAC3B51C,KAAK4rK,QACD,GACA,EACR,EAaAd,EAAa1pK,UAAUwqK,OAAS,SAASvnF,EAAOynF,GAExC9rK,KAAKurK,SAAW,IAAMvrK,KAAK+qK,WAAWgB,WAAa1nF,KAG/CrkF,KAAK+qK,WAAWgB,WAEZ/rK,KAAKwrK,YAAY9nK,SACjB1D,KAAKwrK,YAAYp9J,QACb,SAAU49J,GACNhsK,KAAK+qK,WAAWkB,UAAUD,EAC9B,EAAE57I,KAAKpwB,OAGXA,KAAKwrK,YAAc,IAGvBxrK,KAAK+qK,WAAWkB,UAAUjsK,KAAK6kE,QAE/B7kE,KAAKwrK,YAAYl8J,KAAKtP,KAAK6kE,OAG/B7kE,KAAK6kE,MAAQ,GACb7kE,KAAKurK,SAAW,GAGhBO,GACA9rK,KAAK6rK,4BAEb,EAMAf,EAAa1pK,UAAUmY,KAAO,WAE1BvZ,KAAK4rK,QAAO,GAA0B,EAC1C,EAEAj0K,EAAOD,QAAUozK,YC/PjB,IAAIK,EAAS,CACT,MAAS,EACT,MAAS,EACT,KAAQ,EACR,IAAO,EACP,KAAQ,EACR,MAAS,GAObzL,EAAOwM,iBAAmBhjK,QAM1B,IAAIijK,EAAmB,CAAEzM,EAAOwM,kBAOhCxM,EAAO0M,mBAAqB,SAASnuJ,IACY,IAAzCkuJ,EAAiBvrK,QAAQqd,IACzBkuJ,EAAiB78J,KAAK2O,EAE9B,EAOAyhJ,EAAO2M,sBAAwB,SAASpuJ,GACpC,IAAIquJ,EAAeH,EAAiBvrK,QAAQqd,IACtB,IAAlBquJ,GACAH,EAAiB58J,OAAO+8J,EAAc,EAE9C,EAKA,IAAIC,EAAgB,CAAC,EA0DrB,SAASt8J,IACL,IAAIxG,EAAShG,UAAU,GAAI6wB,EAAQ7wB,UAAU,GACzCqP,EAAO3S,MAAMiB,UAAUf,MAAM2S,KAAKvP,UAAW,GACjD,KAAG0nK,EAAO72I,GAAS7qB,EAAO6qB,OAQ1B,IAJA,IAAIk4I,IACI/iK,EAAO5J,QAAQ4sK,mBAAqBF,EAAcE,oBAlD9D,WACI,IAAID,EAAa,CACbt6J,WAAY,GACZw6J,aAAc,GACdz5G,KAAM,KACN05G,OAAQ,MAGR/sK,EAAQ,IAAIsB,MACZC,EAAQvB,EAAMuB,MAAOvB,EAAMuB,MAAMwlB,MAAM,MAAQ,GACnD,IAAIxlB,GAASA,EAAMuC,OAAS,EACxB,OAAO8oK,EAEX,IAAIngJ,EAAI,KAIR,OAHGlrB,EAAM,KACLkrB,EAAIlrB,EAAM,GAAGgE,MAAM,iDAEnBknB,GAAKA,EAAE3oB,QAAU,GAEe,IAA7BvC,EAAM,GAAGP,QAAQ,QAEhB4rK,EAAWt6J,WAAa/Q,EAAM,GAAGm9C,OAAO,EAAGn9C,EAAM,GAAGP,QAAQ,MAG5D4rK,EAAWt6J,WAAa/Q,EAAM,GAAGm9C,OAAO,EAAGn9C,EAAM,GAAGP,QAAQ,MAEzD4rK,IAGXA,EAAWt6J,WAAama,EAAE,GAC1BmgJ,EAAWE,aAAergJ,EAAE,GAC5BmgJ,EAAWv5G,KAAO5mC,EAAE,GACpBmgJ,EAAWG,OAAStgJ,EAAE,GACfmgJ,EACX,CAiBYI,GACJC,EAAaV,EAAiBxxG,OAAOlxD,EAAOojK,YACxC9mK,EAAI,EAAGA,EAAI8mK,EAAWnpK,OAAQqC,IAAK,CACvC,IAAIsf,EAAIwnJ,EAAW9mK,GACf+zD,EAAIz0C,EAAEiP,GACV,GAAGwlC,GAAmB,mBAAPA,EAAmB,CAC9B,IAAIgzG,EAAc,GAElBA,EAAYx9J,MAAK,IAAIwM,MAAOixJ,eAExBtjK,EAAOoc,IACPinJ,EAAYx9J,KAAK,IAAM7F,EAAOoc,GAAK,KAGnC2mJ,GAAcA,EAAWt6J,WAAWxO,OAAS,GAC7CopK,EAAYx9J,KAAK,IAAMk9J,EAAWt6J,WAAa,OAGnD,IAAI86J,EAAeF,EAAYnyG,OAAO7nD,GAEtCgnD,EAAE1pC,KAAK/K,GAAG9S,MAAM8S,EAAG2nJ,EACvB,CACJ,CACJ,CAcA,SAAStN,EAAOprI,EAAOzO,EAAIgnJ,EAAYhtK,GACnCG,KAAK6lB,GAAKA,EACV7lB,KAAKH,QAAUA,GAAW,CAAC,EAC3BG,KAAK6sK,WAAaA,EACd7sK,KAAK6sK,aACL7sK,KAAK6sK,WAAa,IAEtB7sK,KAAKs0B,MAAQ62I,EAAO72I,GAEpB,IADA,IAAI24I,EAAU5rK,OAAO8G,KAAKgjK,GAClBplK,EAAI,EAAGA,EAAIknK,EAAQvpK,OAAQqC,IAC/B/F,KAAKitK,EAAQlnK,IACTkK,EAAImgB,KAAK,KAAMpwB,KAAMitK,EAAQlnK,GAEzC,CA/GA25J,EAAOwN,iBAAmB,SAASrtK,GAC/B0sK,EAAgB1sK,GAAW,CAAC,CAChC,EAmHA6/J,EAAOt+J,UAAU+rK,SAAW,SAAU74I,GAClCt0B,KAAKs0B,MAAQ62I,EAAO72I,EACxB,EACA38B,EAAOD,QAAUgoK,EAKjBA,EAAOyL,OAAS,CACZiC,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,IAAK,MACLC,KAAM,OACNxO,MAAO,yBC7LX,IAAIU,EAASjwJ,EAAQ,MACjBq7J,EAAer7J,EAAQ,MAwBvBg+J,EAAY,CAAC,EAKbC,EAAU,GAKVC,EAAWjO,EAAOyL,OAAOiC,MAG7Bz1K,EAAOD,QAAU,CAMb00K,mBAAoB,SAASnuJ,GACzByhJ,EAAO0M,mBAAmBnuJ,EAC9B,EAMAouJ,sBAAuB,SAASpuJ,GAC5ByhJ,EAAO2M,sBAAsBpuJ,EACjC,EAKAivJ,iBAAkB,SAASrtK,GACvB6/J,EAAOwN,iBAAiBrtK,EAC5B,EAKA6J,UAAW,SAASmc,EAAIgnJ,EAAYhtK,GAChC,IAAI4J,EAAS,IAAIi2J,EAAOiO,EAAU9nJ,EAAIgnJ,EAAYhtK,GAOlD,OANGgmB,GACC4nJ,EAAU5nJ,GAAM4nJ,EAAU5nJ,IAAO,GACjC4nJ,EAAU5nJ,GAAIvW,KAAK7F,IAEnBikK,EAAQp+J,KAAK7F,GAEVA,CACX,EAQAy2J,gBAAiB,SAAS5rI,EAAOzO,GAE7B,IADA,IAAIi0C,EAAIj0C,EAAK4nJ,EAAU5nJ,IAAO,GAAM6nJ,EAC5B3nK,EAAI,EAAGA,EAAI+zD,EAAEp2D,OAAQqC,IACzB+zD,EAAE/zD,GAAGonK,SAAS74I,EAEtB,EAKA2rI,YAAa,SAAU3rI,GACnBq5I,EAAWr5I,EAEX,IADA,IAAIvuB,EAAI,EACFA,EAAI2nK,EAAQhqK,OAAQqC,IACtB2nK,EAAQ3nK,GAAGonK,SAAS74I,GAGxB,IAAI,IAAIzO,KAAM4nJ,EAAW,CACrB,IAAI3zG,EAAI2zG,EAAU5nJ,IAAO,GACzB,IAAI9f,EAAI,EAAGA,EAAI+zD,EAAEp2D,OAAQqC,IACrB+zD,EAAE/zD,GAAGonK,SAAS74I,EAEtB,CACJ,EAIA62I,OAAQzL,EAAOyL,OAIfL,aAAcA,aChIlB,IAAI8C,EAAUj2K,EAAOD,QAAU,CAC7BgsB,EAAG,CAAC,CACF3jB,KAAM,UACN8tK,IAAK,YAEPvzC,EAAG,CAAC,CAGFv6H,KAAM,SACN8tK,IAAK,wCACL19E,MAAO,CAAC,WAAY,YAAa,iBAAkB,UAAW,QAAS,WACvEmoC,OAAQ,wBAGVpvF,EAAG,CAAC,CAAEnpC,KAAM,SACZgG,EAAG,CAAC,CAAEhG,KAAM,gBACZujK,EAAG,CAAC,CAAEvjK,KAAM,QACZyP,EAAG,CAAC,CAAEzP,KAAM,UACZm0B,EAAG,CAAC,CAAEn0B,KAAM,UACZomK,EAAG,CAAC,CAAEpmK,KAAM,cACZqrF,EAAG,CAAC,CAAErrF,KAAM,YAEZslB,EAAG,CAAC,CAEFtlB,KAAM,SACN8tK,IAAK,eACL19E,MAAO,CAAC,QAAS,QACjBmoC,OAAQ,UAEV7vF,EAAG,CAAC,CAEF1oC,KAAM,aACN8tK,IAAK,mBACL19E,MAAO,CAAC,UAAW,MACnBmoC,OAAQ,eAEVvgH,EAAG,CAAC,CAEFzI,KAAM,YACNu+J,IAAK,4BACL19E,MAAO,CAAC,OAAQ,SAChBmoC,OAAQ,UAEVjsG,EAAG,CAAC,CAIFwhJ,IAAK,kCACL19E,MAAO,CAAC,OAAQ,OAAQ,WAAY,YACpCmoC,OAAQ,gBAEVxgH,EAAG,CACD,CAEExI,KAAM,MACNu+J,IAAK,yDACL19E,MAAO,CAAC,UAAW,QAAS,OAAQ,YACpCmoC,OAAQ,SAAUgC,GAChB,OAAQA,EAAEhgB,SACN,qBACAggB,EAAEp+G,KACA,kBACA,cACR,GAEF,CAGE5M,KAAM,OACNu+J,IAAK,wBACL19E,MAAO,CAAC,UAAW,UACnBmoC,OAAQ,cAEV,CAEEv4H,KAAM,UACN8tK,IAAK,gBACLv1C,OAAQ,cAEV,CAEEv4H,KAAM,OACN8tK,IAAK,sCACL19E,MAAO,CAAC,OAAQ,UAAW,QAAS,WACpCmoC,OAAQ,SAAUgC,GAChB,OAAqB,MAAbA,EAAEt1G,QACN,qBACA,SACN,GAEF,CAEE1V,KAAM,eACNu+J,IAAK,kCACL19E,MAAO,CAAC,UAAW,SACnBmoC,OAAQ,yBAEV,CAEEhpH,KAAM,SACNu+J,IAAK,6CACL19E,MAAO,CAAC,UAAW,OAAQ,WAC3BmoC,OAAQ,SAAUgC,GAChB,OAAqB,MAAbA,EAAEwzC,QACN,mBACA,eACN,GAEF,CAIEx+J,KAAM,MACNu+J,IAAK,uFACL19E,MAAO,CAAC,QAAS,YAAa,cAAe,MAAO,UACpDmoC,OAAQ,SAAUgC,GAChB,MACE,aACCA,EAAEpkE,UAAY,MAAQ,OACtBokE,EAAE,eAAiB,MAAQ,MAC5B,OACCA,EAAE3mG,OAAS,MAAQ,GAExB,GAEF,CAEE5zB,KAAM,mBACN8tK,IAAK,yBAEP,CAEEv+J,KAAM,SACNu+J,IAAK,0CACL19E,MAAO,CAAC,KAAM,QAAS,SAAU,iBACjCmoC,OAAQ,SAAUgC,GAChB,OAA2B,MAAnBA,EAAEyzC,cACN,qBACA,iBACN,GAEF,CAEEhuK,KAAM,QACN8tK,IAAK,eACLv1C,OAAQ,YAEV,CAEEv4H,KAAM,iBACN8tK,IAAK,6BACLv1C,OAAQ,iBAEV,CAEEv4H,KAAM,MACN8tK,IAAK,gBACLv1C,OAAQ,UAEV,CAEEv4H,KAAM,OACN8tK,IAAK,aACLv1C,OAAQ,WAEV,CAEEv4H,KAAM,QACN8tK,IAAK,yBACLv1C,OAAQ,YAEV,CAEEv4H,KAAM,WACN8tK,IAAK,4BACLv1C,OAAQ,eAEV,CAEEv4H,KAAM,YACN8tK,IAAK,0CAEP,CAEE9tK,KAAM,UACN8tK,IAAK,eAEP,CAEE9tK,KAAM,WACN8tK,IAAK,mBACLv1C,OAAQ,gBAEV,CAEEv4H,KAAM,SACN8tK,IAAK,iBACLv1C,OAAQ,cAEV,CAEEv4H,KAAM,cACN8tK,IAAK,2BACL19E,MAAO,CAAC,OAAQ,QAChBmoC,OAAQ,qBAEV,CAMEhpH,KAAK,aACLu+J,IAAK,+KACL19E,MAAO,CAAC,aAAc,YAAa,YAAa,WAAY,KAAM,OAAQ,OAAQ,QAAS,QAAS,UAAW,aAAc,aAAc,gBAC3ImoC,OAAQ,SAAUgC,GAChB,IAAIhxF,EAAM,qCAaV,OAXAA,GAAmB,MAAXgxF,EAAE0zC,MAAiB,qBAAuB,OAGlD1kI,GAAqB,MAAbgxF,EAAErlE,QAAmB,cAAgB,KAEzB,MAAhBqlE,EAAEtlE,aACJ1rB,GAAO,mBAGTA,GAA2B,MAAnBgxF,EAAE,cAAyB,iBAAmB,OACzB,MAArBA,EAAE,gBAA2B,mBAAqB,KAE5D,GAEF,CAEEv6H,KAAM,kBACN8tK,IAAK,wBAEP,CAEE9tK,KAAM,mBACN8tK,IAAK,0BACLv1C,OAAQ,wBAEV,CAEEv4H,KAAM,aACN8tK,IAAK,qBACLv1C,OAAQ,kBAEV,CAEEhpH,KAAM,QACNu+J,IAAK,kCACL19E,MAAO,CAAC,KAAM,YAAa,SAC3BmoC,OAAQ,SAAUgC,GAChB,IAAIhxF,EAAM,UAOV,OANmB,MAAfgxF,EAAE5iE,YACJpuB,GAAO,MACQ,MAAXgxF,EAAE3yH,QACJ2hC,GAAO,QAGJA,CACT,GAEF,CAGEh6B,KAAM,aAENu+J,IAAK,mEACL19E,MAAO,CAAC,YAAa,SACrBmoC,OAAQ,oBAEV,CAEEv4H,KAAM,eACN8tK,IAAK,gCACL19E,MAAO,CAAC,WAAY,SACpBmoC,OAAQ,wBAEV,CAEEhpH,KAAM,SACNu+J,IAAK,oBACL19E,MAAO,CAAC,OAAQ,QAChBmoC,OAAQ,eAEV,CAEEv4H,KAAM,UACN8tK,IAAK,eAEP,CAEE9tK,KAAM,YACN8tK,IAAK,iBAEP,CAEE9tK,KAAM,UACN8tK,IAAK,sCACL19E,MAAO,CAAC,gBAAiB,MAAO,kBAChCmoC,OAAQ,SAAUgC,GAChB,OAA4B,MAApBA,EAAEviC,eACN,mBACA,eACN,GAEF,CAEEh4F,KAAM,cACN8tK,IAAK,0BACLv1C,OAAQ,oBAEV,CAEEhpH,KAAM,OACNu+J,IAAK,sCACL19E,MAAO,CAAC,KAAM,YAAa,UAC3BmoC,OAAQ,SAAUgC,GAChB,OAAQA,EAAEtkE,OAAU,eAAiB,WACvC,GAEF,CAIE1mD,KAAM,aACNu+J,IAAK,IAAIl8E,OAEP,wKAMFxB,MAAO,CAAC,KAAM,OAAQ,SAAU,OAAQ,UACxCmoC,OAAQ,SAAUgC,GAChB,MAAO,sBAAwBA,EAAE2zC,KAAO,SAAW,GACrD,GAEF,CAGEluK,KAAM,YACN8tK,IAAK,IAAIl8E,OAEP,2FAQFxB,MAAO,CAAC,OAAQ,QAAS,OAAQ,SACjCmoC,OAAQ,SAAUgC,GAChB,MAAO,mBAAqBA,EAAE2zC,KAAO,SAAW,GAClD,GAEF,CAKEluK,KAAM,eACN8tK,IAAK,kCACL19E,MAAO,CAAC,SACRmoC,OAAQ,iBAEV,CAGEv4H,KAAM,YACN8tK,IAAK,8BACLv1C,OAAQ,gBAEV,CAGEv4H,KAAM,eACN8tK,IAAK,6DACL19E,MAAO,CAAC,aAAc,UAAW,eAAgB,cAAe,WAChEmoC,OAAQ,iCAEV,CAEEv4H,KAAM,aACN8tK,IAAK,kBAEP,CAEE9tK,KAAM,QACN8tK,IAAK,cACLv1C,OAAQ,YAEV,CAGEv4H,KAAM,WACN8tK,IAAK,oBACLv1C,OAAQ,gBAEV,CAGEv4H,KAAM,iBACN8tK,IAAK,2BACLv1C,OAAQ,uBAEV,CAGEhpH,KAAK,cACLu+J,IAAK,kCACL19E,MAAO,CAAC,SAAU,aAClBmoC,OAAQ,SAAUgC,GAChB,MAAO,gBAAiC,MAAfA,EAAE4zC,UAAoB,MAAQ,GACzD,GAEF,CAGEnuK,KAAK,WACL8tK,IAAK,wEACL19E,MAAO,CAAC,KAAM,iBAAkB,kBAAmB,gBAAiB,mBACpEmoC,OAAQ,SAAUgC,GAChB,IAAIhxF,EAAM,YAKV,OAJAA,GAAgB,MAARgxF,EAAEz0G,GAAa,WAAa,OACpCyjB,GAA6B,MAArBgxF,EAAE6zC,gBAA0B,MAAQ,IAC5C7kI,GAA2B,MAAnBgxF,EAAE8zC,cAAwB,WAAa,KAClB,MAArB9zC,EAAE+zC,gBAA0B,MAAQ,GAE9C,GAEF,CAEEtuK,KAAM,WACN8tK,IAAK,gBACLv1C,OAAQ,aAEV,CAEEv4H,KAAM,UACN8tK,IAAK,gBACLv1C,OAAQ,cAGV,CAEEv4H,KAAM,gBACN8tK,IAAK,iCACLv1C,OAAQ,gBAEV,CAEEv4H,KAAM,aACN8tK,IAAK,gBACLv1C,OAAQ,aAEV,CAEEv4H,KAAM,aACN8tK,IAAK,gBACLv1C,OAAQ,aAEV,CAEEv4H,KAAM,cACN8tK,IAAK,wCACL19E,MAAO,CAAC,KAAM,WACdmoC,OAAQ,uBAEV,CAEEhpH,KAAM,UACN6gF,MAAO,CAAC,YAMd9uF,OAAO8G,KAAKylK,GAASx/J,SAAQ,SAAU1G,GAC1BkmK,EAAQlmK,GACd0G,SAAQ,SAAUmqC,GAChBA,EAAIs1H,MACPt1H,EAAIs1H,IAAM,QAEPt1H,EAAI+/E,SACP//E,EAAI+/E,OAAS,KAEjB,GACF,oBC7eA,IAAIn1E,EAAS1zC,EAAQ,MACjB6+J,EAAS7+J,EAAQ,MAErB/X,EAAQ8uH,MAAQ8nD,EAChB52K,EAAQ4pC,MAAQ6hB,EAAO7hB,MACvB5pC,EAAQ62K,YAAcprH,EAAOorH,YAC7B72K,EAAQ82K,gBAAkBrrH,EAAOqrH,gBACjC92K,EAAQ+2K,cAAgBtrH,EAAOsrH,cAC/B/2K,EAAQg3K,sBAAwBvrH,EAAOurH,sBACvCh3K,EAAQi3K,qBAAuBxrH,EAAOwrH,qBACtCj3K,EAAQk3K,yBAA2BzrH,EAAOyrH,yCCV1C,IAAIC,EAAa,SAAUnrJ,GACzB,OAAOgoC,OAAOxlD,OAAOwd,MAAQA,EAAIxd,OAAOwd,GAAKA,CAC/C,EAeIorJ,EAAW,SAAUv2H,EAAKuG,EAAUsP,GACtC,IAAI2gH,EAAax2H,EAAIx4C,MAAQw4C,EAAI43C,MAC7B53C,EAAIjpC,OAASwvC,EAASvG,EAAIjpC,MAC5BwvC,EAASvG,EAAIjpC,MAAQ,GAEdy/J,IAAejwH,EAASvG,EAAIx4C,QACnC++C,EAASvG,EAAIx4C,MAAQ,CAAC,GAExB,IAAIivK,EAAcz2H,EAAIjpC,KACpB,CAAC,EACDy/J,EAAajwH,EAASvG,EAAIx4C,MAAQ++C,GAvBf,SAAU35C,EAAO25C,EAAUqxC,EAAO8+E,GACvD,GAAIA,IAAY9+E,EACdrxC,EAASmwH,GAAWJ,EAAW1pK,EAAM,SAGrC,IAAK,IAAIY,EAAI,EAAGA,EAAIoqF,EAAMzsF,OAAQqC,GAAK,EACnB,MAAdZ,EAAMY,EAAE,KACV+4C,EAASqxC,EAAMpqF,IAAM8oK,EAAW1pK,EAAMY,EAAE,IAIhD,CAcEmpK,CAAiB9gH,EAAQjpD,MAAMozC,EAAIs1H,KAAMmB,EAAaz2H,EAAI43C,MAAO53C,EAAIx4C,MAEjEw4C,EAAIjpC,MACNwvC,EAASvG,EAAIjpC,MAAMA,KAAK0/J,EAE5B,EAEIpB,EAAUn+J,EAAQ,MAClB0/J,EAAYx9E,OAAOvwF,UAAU+I,KAAKimB,KAAK,iBAE3C14B,EAAQ4pC,MAAQ,SAAUy2B,GACxB,IAAI1qC,EAAU,CAAC,EACXorB,EAAQ,GACRqG,EAAWzxB,EAoBf,OAjBA0qC,EAAIpxC,MAAM,gBAAgB1O,OAAOk3J,GAAW/gK,SAAQ,SAAU0rD,GAC5D,IAAI12D,EAAO02D,EAAE,GACT1L,EAAU0L,EAAEz5D,MAAM,GACT,MAAT+C,IACFq1C,EAAMnpC,KAAK,CAAC+oD,IAAK,GAAIY,KAAM,KAC3Bna,EAAWrG,EAAMA,EAAM/0C,OAAO,IAGhC,IAAK,IAAI2lC,EAAI,EAAGA,GAAKukI,EAAQxqK,IAAS,IAAIM,OAAQ2lC,GAAK,EAAG,CACxD,IAAIkP,EAAMq1H,EAAQxqK,GAAMimC,GACxB,GAAIkP,EAAIs1H,IAAI1jK,KAAKikD,GACf,OAAO0gH,EAASv2H,EAAKuG,EAAUsP,EAEnC,CACF,IAEA/gC,EAAQorB,MAAQA,EACTprB,CACT,EAEA,IAAI+hJ,EAAe,SAAUC,EAAKvmF,GAChC,IAAI5/C,EAAI4/C,EAAKniE,MAAM,QAAS,GAM5B,OALiB,IAAbuiB,EAAExlC,OACJ2rK,EAAInmI,EAAE,IAAM2lI,EAAW3lI,EAAE,IACH,IAAbA,EAAExlC,QAAgBolF,EAAKplF,OAAS,IACzC2rK,EAAInmI,EAAE,SAAM5oC,GAEP+uK,CACT,EAEA33K,EAAQ62K,YAAc,SAAUjlI,GAC9B,OAAOA,EAAI3iB,MAAM,QAAQ9O,OAAOu3J,EAAc,CAAC,EACjD,EAGA13K,EAAQ82K,gBAAkB92K,EAAQ62K,YAElC72K,EAAQ+2K,cAAgB,SAAUnlI,GAChC,OAAOA,EAAI+F,WAAW1oB,MAAM,KAAK+W,IAAIx3B,OACvC,EAEAxO,EAAQg3K,sBAAwB,SAAUplI,GAGxC,IAFA,IAAI6mC,EAAa,GACbzc,EAAQpqB,EAAI3iB,MAAM,KAAK+W,IAAImxI,GACtB9oK,EAAI,EAAGA,EAAI2tD,EAAMhwD,OAAQqC,GAAK,EACrCoqE,EAAW7gE,KAAK,CACdwlD,UAAWpB,EAAM3tD,GACjBgf,GAAI2uC,EAAM3tD,EAAI,GACdkf,KAAMyuC,EAAM3tD,EAAI,KAGpB,OAAOoqE,CACT,EAEAz4E,EAAQi3K,qBAAuB,SAAUrlI,GACvC,OAAOA,EAAI3iB,MAAM,KAAK+W,KAAI,SAAUw7B,GAClC,OAAOA,EAAKhpC,UAAU,EAAGgpC,EAAKx1D,OAAO,GAAGijB,MAAM,KAAK9O,OAAOu3J,EAAc,CAAC,EAC3E,GACF,EAEA13K,EAAQk3K,yBAA2B,SAAUtlI,GAC3C,OAAOA,EAAI3iB,MAAM,KAAK+W,KAAI,SAAUhxB,GAClC,OAAOA,EAAOia,MAAM,KAAK+W,KAAI,SAAU46F,GACrC,IAAIg3C,EAAM/oG,GAAS,EASnB,MAPkB,MAAd+xD,EAAO,GACTg3C,EAAOT,EAAWv2C,IAElBg3C,EAAOT,EAAWv2C,EAAOpoG,UAAU,EAAGooG,EAAO50H,SAC7C6iE,GAAS,GAGJ,CACL+oG,KAAMA,EACN/oG,OAAQA,EAEZ,GACF,GACF,kBC3HA,IAAIqnG,EAAUn+J,EAAQ,MAGlB8/J,EAAe,WACfj3C,EAAS,SAAUk3C,GACrB,IAAIzpK,EAAI,EACJ+M,EAAOrP,UACPgmC,EAAM32B,EAAKpP,OACf,OAAO8rK,EAAUpgI,QAAQmgI,GAAc,SAAU3mI,GAC/C,GAAI7iC,GAAK0jC,EACP,OAAOb,EAET,IAAIurH,EAAMrhJ,EAAK/M,GAEf,OADAA,GAAK,EACG6iC,GACR,IAAK,KACH,MAAO,IACT,IAAK,KACH,OAAO8iB,OAAOyoG,GAChB,IAAK,KACH,OAAOjuJ,OAAOiuJ,GAChB,IAAK,KACH,MAAO,GAEX,GAEF,EAEIsb,EAAW,SAAUrsK,EAAMm1C,EAAKuG,GAClC,IAIIhsC,EAAO,CAAC1P,EAAO,KAJTm1C,EAAI+/E,kBAAkBwwC,SAC7BvwH,EAAI+/E,OAAO//E,EAAIjpC,KAAOwvC,EAAWA,EAASvG,EAAIx4C,OAC/Cw4C,EAAI+/E,SAGN,GAAI//E,EAAI43C,MACN,IAAK,IAAIpqF,EAAI,EAAGA,EAAIwyC,EAAI43C,MAAMzsF,OAAQqC,GAAK,EAAG,CAC5C,IAAI0C,EAAI8vC,EAAI43C,MAAMpqF,GACdwyC,EAAIx4C,KACN+S,EAAKxD,KAAKwvC,EAASvG,EAAIx4C,MAAM0I,IAG7BqK,EAAKxD,KAAKwvC,EAASvG,EAAI43C,MAAMpqF,IAEjC,MAGA+M,EAAKxD,KAAKwvC,EAASvG,EAAIx4C,OAEzB,OAAOu4H,EAAO/lH,MAAM,KAAMO,EAC5B,EAII48J,EAAoB,CACtB,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IAAK,KAElBC,EAAoB,CAAC,IAAK,IAAK,IAAK,KAGxCh4K,EAAOD,QAAU,SAAU21B,EAASg4E,GAClCA,EAAOA,GAAQ,CAAC,EAEO,MAAnBh4E,EAAQjoB,UACVioB,EAAQjoB,QAAU,GAEA,MAAhBioB,EAAQttB,OACVstB,EAAQttB,KAAO,KAEjBstB,EAAQorB,MAAMrqC,SAAQ,SAAUmpD,GACR,MAAlBA,EAAMgB,WACRhB,EAAMgB,SAAW,GAErB,IAEA,IAAIq3G,EAAavqE,EAAKuqE,YAAcF,EAChCG,EAAaxqE,EAAKwqE,YAAcF,EAChC53G,EAAM,GAkCV,OA/BA63G,EAAWxhK,SAAQ,SAAUhL,GAC3BwqK,EAAQxqK,GAAMgL,SAAQ,SAAUmqC,GAC1BA,EAAIx4C,QAAQstB,GAAgC,MAArBA,EAAQkrB,EAAIx4C,MACrCg4D,EAAIzoD,KAAKmgK,EAASrsK,EAAMm1C,EAAKlrB,IAEtBkrB,EAAIjpC,QAAQ+d,GAAgC,MAArBA,EAAQkrB,EAAIjpC,OAC1C+d,EAAQkrB,EAAIjpC,MAAMlB,SAAQ,SAAUy8B,GAClCktB,EAAIzoD,KAAKmgK,EAASrsK,EAAMm1C,EAAK1N,GAC/B,GAEJ,GACF,IAGAxd,EAAQorB,MAAMrqC,SAAQ,SAAUmpD,GAC9BQ,EAAIzoD,KAAKmgK,EAAS,IAAK7B,EAAQvhJ,EAAE,GAAIkrC,IAErCs4G,EAAWzhK,SAAQ,SAAUhL,GAC3BwqK,EAAQxqK,GAAMgL,SAAQ,SAAUmqC,GAC1BA,EAAIx4C,QAAQw3D,GAA4B,MAAnBA,EAAMhf,EAAIx4C,MACjCg4D,EAAIzoD,KAAKmgK,EAASrsK,EAAMm1C,EAAKgf,IAEtBhf,EAAIjpC,QAAQioD,GAA4B,MAAnBA,EAAMhf,EAAIjpC,OACtCioD,EAAMhf,EAAIjpC,MAAMlB,SAAQ,SAAUy8B,GAChCktB,EAAIzoD,KAAKmgK,EAASrsK,EAAMm1C,EAAK1N,GAC/B,GAEJ,GACF,GACF,IAEOktB,EAAIv3D,KAAK,QAAU,MAC5B,kBClGA,IAAI46B,EAAY3rB,EAAQ,MACpBqgK,EAAiBrgK,EAAQ,MACzBsgK,EAAaD,EAAeC,WAC5BC,EAAaF,EAAeE,WAQhC,SAAS14G,EAAkBC,EAAO5lD,EAAM6lD,GACpC,OAAOD,EACF1I,MACA52C,QAAO,SAAS6+C,GAAY,OAAOA,EAASjxC,KAAOlU,CAAM,IACzDsG,QAAO,SAAS6+C,GAAY,OAAOA,EAASY,YAAcF,CAAe,IACzE95B,KAAI,SAASo5B,GAAY,OAAOA,EAASnvD,KAAO,IAAG,EAC5D,CAIA,SAAS41G,EAAU19G,GAEfG,KAAKH,QAAUA,GAAoB,CAAC,EAE/BG,KAAKH,QAAQgxG,cACd7wG,KAAKH,QAAQgxG,YAnBO,GAqBxB3nG,QAAQ+G,IAAI,uBAAyBjQ,KAAKH,QAAQgxG,YAAc,WAMhE7wG,KAAK0sG,UAAY,EACrB,CAgBA,SAASujE,EAAa5iJ,EAASpqB,GACZ,MAAXoqB,GAAoBltB,MAAMC,QAAQitB,EAAQorB,QAI9CprB,EAAQorB,MAAMrqC,SAAQ,SAAUmpD,GACT,UAAfA,EAAMn0D,MACNH,EAAOs0D,EAEf,GACJ,CAEA,SAAS24G,EAAoB36G,GAEzB,OAAOA,GAAgB,MAARA,GACRA,EAAKnyD,MAAqB,IAAbmyD,EAAKnyD,MAClBmyD,EAAKwC,KAAmB,IAAZxC,EAAKwC,GAC5B,CAiJAwlD,EAAUn8G,UAAUouG,eAAiB,WACjCxvG,KAAK0sG,UAAY,EACrB,EAUA6Q,EAAUn8G,UAAUquG,aAAe,SAAS5gD,GACxC7uD,KAAK0sG,UAAY79C,CACrB,EAWA0uD,EAAUn8G,UAAU4vG,gBAAkB,SAAUz5C,GAC5C,IAAIJ,EAAWI,EAAMP,YACjBO,EAAMP,WAAW/iC,MAAK,SAASkwB,GAAS,MAA2B,QAApBA,EAAM6J,SAAqB,IAC9E,OAAImJ,EACOA,EAAStI,MACXloC,MAAM,KACN+W,KAAI,SAASm6B,GAAW,OAAO1xD,SAAS0xD,EAAS,IAE/C,CAACN,EAAM1I,MAAM,GAAGhpC,GAE/B,EAEA03F,EAAUn8G,UAAU+uK,sBAAwB,SAAUC,EAAaC,GAE/D,IADA,IAAIzhH,EAAU,CAAC,EACN7oD,EAAI,EAAGA,EAAIqqK,EAAY1sK,SAAUqC,EAAG,CACzC,IAAIuqK,EAAUF,EAAYrqK,GACtBswE,EAAUg6F,EAAYtqK,IAAM,KAChC6oD,EAAQ0hH,GAAWj6F,CACvB,CACA,OAAOznB,CACX,EAEA2uD,EAAUn8G,UAAUmvK,2BAA6B,SAASh5G,GACtDruD,QAAQ+G,IAAI,sCAAuCjQ,KAAK0sG,WACxD,IAAI8jE,EAAcxwK,KAAKgxG,gBAAgBz5C,GACvCruD,QAAQ+G,IAAI,sCAAuCugK,GACnD,IAAIv/D,EAAU35C,EAAiBC,EAAOi5G,EAAY,GAAI,QAClDr/D,EAAW75C,EAAiBC,EAAOi5G,EAAY,GAAI,SACnDC,EAAiBzwK,KAAKmwK,sBAAsBK,EAAaxwK,KAAK0sG,WAClExjG,QAAQ+G,IAAI,uCAAwCwgK,GAGpD,IAAIC,EAAa1wK,KAAK0sG,UACjBz0F,QAAO,SAAStG,GAAQ,OAAwD,IAAjDtQ,OAAOkP,OAAOkgK,GAAgB7vK,QAAQ+Q,EAAc,IA2BxF,OA1BAzI,QAAQ+G,IAAI,oCAAqCygK,GAGjDn5G,EAAM1I,MAAMzgD,SAAQ,SAASuD,GACrB8+J,EAAe9+J,EAAKkU,MACpBlU,EAAKkU,GAAK4qJ,EAAe9+J,EAAKkU,IAEtC,IAEA6qJ,EAAWtiK,SAAQ,SAASuD,GACxB4lD,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAIlU,EACJ+lD,UAAW,OACX/vD,MAAOspG,IAEX15C,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAIlU,EACJ+lD,UAAW,QACX/vD,MAAOwpG,GAEf,IACA55C,EAAMP,WAAaO,EAAMP,YAAc,GACvCO,EAAMP,WAAW1nD,KAAK,CAClB0+C,UAAW,MACXa,MAAO7uD,KAAK0sG,UAAUlsG,KAAK,OAExB+2D,CACX,EAEAgmD,EAAUn8G,UAAUuvK,oBAAsB,SAASp5G,EAAON,GACtD,IAAI25G,EAAsB,SAASr5G,EAAO5lD,GACtC4lD,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAIlU,EACJ+lD,UAAW,QACX/vD,MAAOwnG,IAEX53C,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAIlU,EACJ+lD,UAAW,OACX/vD,MAAOunG,GAEf,EACIA,EAAkB53C,EAAiBC,EAAON,EAAa,QACvDk4C,EAAmB73C,EAAiBC,EAAON,EAAa,SAKxDj3D,KAAKH,QAAQiuE,kBAAoBohC,IACjCA,EAAkB33C,EAAMmD,KACLnD,EAAM1I,MACZzgD,SAAQuD,IACjB4lD,EAAM1I,MAAMv/C,KAAK,CACbuW,GAAIlU,EAAKkU,GACT6xC,UAAW,OACX/vD,MAAOunG,GACT,KAMV,IADA,IAAIoC,EAAW,GACNvrG,EAAI,EAAGA,EAAI/F,KAAKH,QAAQgxG,YAAc,IAAK9qG,EAAG,CACnD,IAAIwrG,EA/RDh2F,KAAKgzB,MAAsB,WAAhBhzB,KAAKizB,UADb,EAiSNoiI,EAAoBr5G,EAAOg6C,GAC3BD,EAAShiG,KAAKiiG,EAClB,CAMA,OALAh6C,EAAMP,WAAaO,EAAMP,YAAc,GACvCO,EAAMP,WAAW1nD,KAAK,CAClB0+C,UAAW,MACXa,MAAOoI,EAAc,IAAMq6C,EAAS9wG,KAAK,OAEtC+2D,CACX,EAmBAgmD,EAAUn8G,UAAUyvK,kBAAoB,SAASt5G,GAG7C,IAAIN,EACAJ,EAAWU,EAAM1I,OAAS0I,EAAM1I,MAC/BnxB,KAAI,SAASo5B,GAAY,OAAOA,EAASjxC,EAAI,IAC7C5N,QAAO,SAAStG,EAAMurB,EAAOxkB,GAC1B,OAAOA,EAAM9X,QAAQ+Q,KAAUurB,CACnC,IACCx5B,QAAU,EACXqzD,EAAaQ,EAAMP,YAAcO,EAAMP,WAAWtzD,QAAW,EAEjE,GAAiB,IAAbmzD,GAAkBA,EAAW,EAE7B,OAAOU,EAEX,GAAgB,GAAZV,GAA+B,IAAdE,EAEjB,OAAOQ,EAGX,GAAiB,IAAbV,EACAI,EAAcM,EAAM1I,MAAM,GAAGhpC,OAC1B,CAGH,IAAIqxC,EAAWK,EAAMP,WAAW/+C,QAAO,SAASksC,GAAS,MAA2B,QAApBA,EAAM6J,SAAqB,IAAG,GAC9F,IAAIkJ,EAIA,OAAOK,EAHPN,EAAc9wD,SAAS+wD,EAASrI,MAAMloC,MAAM,KAAK,GAKzD,CAiBA,OAhBAzd,QAAQ+G,IAAI,qCAAsCjQ,KAAK0sG,WACvDxjG,QAAQ+G,IAAI,qCAAuCgnD,IAEY,IAAzCj3D,KAAK0sG,UAAU9rG,QAAQq2D,IAGzC/tD,QAAQ+G,IAAI,2EAEZsnD,EAAQv3D,KAAKuwK,2BAA2Bh5G,KAExCruD,QAAQ+G,IAAI,2EAEZsnD,EAAQv3D,KAAK2wK,oBAAoBp5G,EAAON,IAG5Cj3D,KAAK0sG,UAAY1sG,KAAKgxG,gBAAgBz5C,GAC/BA,CACX,EAYAgmD,EAAUn8G,UAAU6kH,uBAAyB,SAAU1wD,EAAMu7G,GAEzD,IAAKZ,EAAoB36G,GACrB,OAAOA,EAGX,IAAIloC,EAAU+N,EAAUkG,MAAMi0B,EAAKwC,KAE/BjgE,EAAOkI,KAqBX,OApBAiwK,EAAa5iJ,GAAS,SAAUkqC,GAGxBz/D,EAAK+H,QAAQ29G,uBAjXzB,SAAgCjmD,GAE5B,GAAKA,GAAUp3D,MAAMC,QAAQm3D,EAAMP,YASnC,IALA,IAAIvI,EAAUshH,EAAWx4G,GACrBw5G,EAAQ,GAGR1nI,EAAIkuB,EAAMP,WAAWtzD,OAClB2lC,KAEH,GAAsC,QAAlCkuB,EAAMP,WAAW3tB,GAAG2kB,UAAxB,CAMA,IAFA,IAAIkkD,EAAiB36C,EAAMP,WAAW3tB,GAAGwlB,MAAMloC,MAAM,KAE5C5gB,EAAI,EAAGA,EAAImsG,EAAexuG,OAAQqC,IAAK,CAE5C,IAAI4L,EAAOugG,EAAensG,GAC1BgrK,EAAMzhK,KAAKqC,GAEX,IAAI+hD,EAAQjF,EAAQ98C,GAAM+oD,KAAK/zC,MAAM,KACrC8nC,EAAQ98C,GAAM+oD,KAAO,CAAChH,EAAM,GAAI,IAAK3tD,EAAG,IAAK2tD,EAAM,GAAI,IAAK3tD,GAAGvF,KAAK,IACpEiuD,EAAQ98C,GAAMy9F,MAAQ,CAAC3gD,EAAQ98C,GAAMy9F,MAAO,IAAKrpG,GAAGvF,KAAK,IAGzD+2D,EAAMP,WAAW5oD,SAAQ,SAAU4iK,GAC/B,GAA+B,QAA3BA,EAAahjH,UAAjB,CAIA,IAAIijH,EAAeD,EAAaniH,MAAMloC,MAAM,MACR,IAAhCsqJ,EAAarwK,QAAQ+Q,IAKzBs/J,EAAa7iK,SAAQ,SAAU8iK,GAC3BziH,EAAQyiH,GAAax2G,KAAOjM,EAAQ98C,GAAM+oD,KAC1CjM,EAAQyiH,GAAa9hE,MAAQ3gD,EAAQ98C,GAAMy9F,MACvC8hE,IAAgBv/J,GAChBo/J,EAAMzhK,KAAK4hK,EAEnB,GAdA,CAiBJ,GACJ,CAEA35G,EAAM1I,MAAQmhH,EAAWvhH,EAASsiH,GAClCx5G,EAAMP,WAAWznD,OAAO85B,EAAG,EAtC3B,CAwCR,CA2TYm0E,CAAuBjmD,GAzTnC,SAAgCA,GAE5B,GAAKA,GAAUp3D,MAAMC,QAAQm3D,EAAMP,YAAnC,CAMA,IAAIvI,EAAUshH,EAAWx4G,GAGzBA,EAAMP,WAAW5oD,SAAQ,SAAU+iK,GAC/B,GAAiC,QAA7BA,EAAenjH,UAAnB,CAIA9kD,QAAQS,KAAK,wBAA0BwnK,EAAetiH,OAEtDsiH,EAAeC,MAAO,EAKtB,IAHA,IAAIl/D,EAAiBi/D,EAAetiH,MAAMloC,MAAM,KAGvC5gB,EAAI,EAAGA,EAAImsG,EAAexuG,OAAQqC,IAAK,CAE5C,IAAI4L,EAAOugG,EAAensG,UACnB0oD,EAAQ98C,GAGf4lD,EAAMP,WAAW5oD,SAAQ,SAAU4iK,GAC/B,GAA+B,QAA3BA,EAAahjH,UAAjB,CAIA,IAAIijH,EAAeD,EAAaniH,MAAMloC,MAAM,MACR,IAAhCsqJ,EAAarwK,QAAQ+Q,KAKzBs/J,EAAa7iK,SAAQ,SAAU8iK,UACpBziH,EAAQyiH,EACnB,IAGAF,EAAaI,MAAO,EAbpB,CAcJ,GACJ,CAjCA,CAoCJ,IAEA75G,EAAM1I,MAAQmhH,EAAWvhH,GAIzB,IADA,IAAI1oD,EAAIwxD,EAAMP,WAAWtzD,OAClBqC,KACCwxD,EAAMP,WAAWjxD,GAAGqrK,MACpB75G,EAAMP,WAAWznD,OAAOxJ,EAAG,EApDnC,MAHImD,QAAQS,KAAK,4DA0DrB,CA8PY0nK,CAAuB95G,IAOtBz/D,EAAK+H,QAAQiuE,iBAAmBgjG,EA3P7C,SAA8Bv5G,GACrBA,IAIAp3D,MAAMC,QAAQm3D,EAAM+5G,WACrB/5G,EAAM+5G,QAAU,IAGf/5G,EAAM+5G,QAAQvkK,MACX,SAAUhH,GAAK,MAAmB,6BAAZA,EAAE4B,KAAqC,KACjE4vD,EAAM+5G,QAAQhiK,KAAK,CAAC,MAAS,6BAErC,CA+OYiiK,CAAqBh6G,GApQjC,SAA8BA,GACrBA,QAAsC,IAAtBA,EAAMi6G,cAI3Bj6G,EAAMi6G,iBAAclxK,EACxB,CAgQYmxK,CAAqBl6G,EAE7B,IAEO,IAAIob,sBAAsB,CAC7BvvE,KAAMmyD,EAAKnyD,KACX20D,IAAK38B,EAAUorF,MAAMn5F,IAE7B,EASAkwF,EAAUn8G,UAAUywG,sBAAwB,SAAUt8C,GAElD,IAAK26G,EAAoB36G,GACrB,OAAOA,EAGX,IAAIloC,EAAU+N,EAAUkG,MAAMi0B,EAAKwC,KAE/BjgE,EAAOkI,KASX,OARAiwK,EAAa5iJ,GAAS,SAAUkqC,GACL,YAAnBA,EAAMrB,WAA8C,YAAnBqB,EAAMrB,WAI3Cp+D,EAAK+4K,kBAAkBt5G,EAC3B,IAEO,IAAIob,sBAAsB,CAC7BvvE,KAAMmyD,EAAKnyD,KACX20D,IAAK38B,EAAUorF,MAAMn5F,IAE7B,EAIA11B,EAAOD,QAAU6lH,gBCrejB7lH,EAAQs4K,WAAa,SAASvhH,EAASsiH,GACrC,IAAIliH,EAAQ,GAGZ,QAAuB,IAAZJ,GACyB,IAAhCptD,OAAO8G,KAAKsmD,GAAS/qD,OAAc,CAEhCvD,MAAMC,QAAQ2wK,KACjBA,EAAQ,IAIV,IAAK,IAAIhrK,EAAI,EAAGA,EAAIgrK,EAAMrtK,OAAQqC,IAAK,CACrC,IAAI4L,EAAOo/J,EAAMhrK,GACb5C,EAASsrD,EAAQ98C,GACrBtQ,OAAO8G,KAAKhF,GAAQiL,SAAQ,SAAUspD,GACpC7I,EAAMv/C,KAAK,CACTuW,GAAIlU,EACJ+lD,UAAWA,EACX/vD,MAAOxE,EAAOu0D,IAElB,GACF,CAGAr2D,OAAO8G,KAAKsmD,GAASrgD,SAAQ,SAAUuD,GAErC,GADAA,EAAOxL,SAASwL,KACZo/J,EAAMnwK,QAAQ+Q,IAAS,GAA3B,CAKA,IAAIxO,EAASsrD,EAAQ98C,GACrBtQ,OAAO8G,KAAKhF,GAAQiL,SAAQ,SAAUspD,GACpC7I,EAAMv/C,KAAK,CACTuW,GAAIlU,EACJ+lD,UAAWA,EACX/vD,MAAOxE,EAAOu0D,IAElB,GATA,CAUF,GACF,CAEA,OAAO7I,CACT,EAEAn3D,EAAQq4K,WAAa,SAAUx4G,GAC7B,IAAI9I,EAAU,CAAC,EASf,YAP2B,IAAhB8I,EAAM1I,OAAyB1uD,MAAMC,QAAQm3D,EAAM1I,QAC5D0I,EAAM1I,MAAMzgD,SAAQ,SAAUuD,GACvB88C,EAAQ98C,EAAKkU,MAChB4oC,EAAQ98C,EAAKkU,IAAM,CAAC,GACtB4oC,EAAQ98C,EAAKkU,IAAIlU,EAAK+lD,WAAa/lD,EAAKhK,KAC1C,IAEK8mD,CACT,6BC/EA/2D,EAAQ4gG,WAuCR,SAAqBo5E,GACnB,IAAIC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAC3B,OAAuC,GAA9BE,EAAWC,GAAuB,EAAKA,CAClD,EA3CAp6K,EAAQq6K,YAiDR,SAAsBL,GACpB,IAAI7kI,EAcA9mC,EAbA4rK,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAEvB3wG,EAAM,IAAIgxG,EAVhB,SAAsBN,EAAKG,EAAUC,GACnC,OAAuC,GAA9BD,EAAWC,GAAuB,EAAKA,CAClD,CAQoBG,CAAYP,EAAKG,EAAUC,IAEzCI,EAAU,EAGVzoI,EAAMqoI,EAAkB,EACxBD,EAAW,EACXA,EAGJ,IAAK9rK,EAAI,EAAGA,EAAI0jC,EAAK1jC,GAAK,EACxB8mC,EACGslI,EAAUT,EAAIxnI,WAAWnkC,KAAO,GAChCosK,EAAUT,EAAIxnI,WAAWnkC,EAAI,KAAO,GACpCosK,EAAUT,EAAIxnI,WAAWnkC,EAAI,KAAO,EACrCosK,EAAUT,EAAIxnI,WAAWnkC,EAAI,IAC/Bi7D,EAAIkxG,KAAcrlI,GAAO,GAAM,IAC/Bm0B,EAAIkxG,KAAcrlI,GAAO,EAAK,IAC9Bm0B,EAAIkxG,KAAmB,IAANrlI,EAmBnB,OAhBwB,IAApBilI,IACFjlI,EACGslI,EAAUT,EAAIxnI,WAAWnkC,KAAO,EAChCosK,EAAUT,EAAIxnI,WAAWnkC,EAAI,KAAO,EACvCi7D,EAAIkxG,KAAmB,IAANrlI,GAGK,IAApBilI,IACFjlI,EACGslI,EAAUT,EAAIxnI,WAAWnkC,KAAO,GAChCosK,EAAUT,EAAIxnI,WAAWnkC,EAAI,KAAO,EACpCosK,EAAUT,EAAIxnI,WAAWnkC,EAAI,KAAO,EACvCi7D,EAAIkxG,KAAcrlI,GAAO,EAAK,IAC9Bm0B,EAAIkxG,KAAmB,IAANrlI,GAGZm0B,CACT,EA5FAtpE,EAAQ06K,cAkHR,SAAwBC,GAQtB,IAPA,IAAIxlI,EACApD,EAAM4oI,EAAM3uK,OACZ4uK,EAAa7oI,EAAM,EACnBiqB,EAAQ,GACR6+G,EAAiB,MAGZxsK,EAAI,EAAGysK,EAAO/oI,EAAM6oI,EAAYvsK,EAAIysK,EAAMzsK,GAAKwsK,EACtD7+G,EAAMpkD,KAAKmjK,EACTJ,EAAOtsK,EAAIA,EAAIwsK,EAAkBC,EAAOA,EAAQzsK,EAAIwsK,IAsBxD,OAjBmB,IAAfD,GACFzlI,EAAMwlI,EAAM5oI,EAAM,GAClBiqB,EAAMpkD,KACJojK,EAAO7lI,GAAO,GACd6lI,EAAQ7lI,GAAO,EAAK,IACpB,OAEsB,IAAfylI,IACTzlI,GAAOwlI,EAAM5oI,EAAM,IAAM,GAAK4oI,EAAM5oI,EAAM,GAC1CiqB,EAAMpkD,KACJojK,EAAO7lI,GAAO,IACd6lI,EAAQ7lI,GAAO,EAAK,IACpB6lI,EAAQ7lI,GAAO,EAAK,IACpB,MAIG6mB,EAAMlzD,KAAK,GACpB,EA5IA,IALA,IAAIkyK,EAAS,GACTP,EAAY,GACZH,EAA4B,oBAAfr5J,WAA6BA,WAAaxY,MAEvDy7E,EAAO,mEACF71E,EAAI,EAAsBA,EAAb61E,KAAwB71E,EAC5C2sK,EAAO3sK,GAAK61E,EAAK71E,GACjBosK,EAAUv2F,EAAK1xC,WAAWnkC,IAAMA,EAQlC,SAAS6rK,EAASF,GAChB,IAAIjoI,EAAMioI,EAAIhuK,OAEd,GAAI+lC,EAAM,EAAI,EACZ,MAAM,IAAIvoC,MAAM,kDAKlB,IAAI2wK,EAAWH,EAAI9wK,QAAQ,KAO3B,OANkB,IAAdixK,IAAiBA,EAAWpoI,GAMzB,CAACooI,EAJcA,IAAapoI,EAC/B,EACA,EAAKooI,EAAW,EAGtB,CAmEA,SAASY,EAAaJ,EAAO57J,EAAO42C,GAGlC,IAFA,IAAIxgB,EARoBlP,EASpBq8F,EAAS,GACJj0H,EAAI0Q,EAAO1Q,EAAIsnD,EAAKtnD,GAAK,EAChC8mC,GACIwlI,EAAMtsK,IAAM,GAAM,WAClBssK,EAAMtsK,EAAI,IAAM,EAAK,QACP,IAAfssK,EAAMtsK,EAAI,IACbi0H,EAAO1qH,KAdFojK,GADiB/0I,EAeMkP,IAdT,GAAK,IACxB6lI,EAAO/0I,GAAO,GAAK,IACnB+0I,EAAO/0I,GAAO,EAAI,IAClB+0I,EAAa,GAAN/0I,IAaT,OAAOq8F,EAAOx5H,KAAK,GACrB,CAlGA2xK,EAAU,IAAIjoI,WAAW,IAAM,GAC/BioI,EAAU,IAAIjoI,WAAW,IAAM,qBCnBkCvyC,EAAOD,QAAiJ,SAAS8X,GAAG,IAAI6V,EAAE,CAAC,EAAE,SAAS+lE,EAAErlF,GAAG,GAAGsf,EAAEtf,GAAG,OAAOsf,EAAEtf,GAAGrO,QAAQ,IAAI+Q,EAAE4c,EAAEtf,GAAG,CAACA,EAAI+zD,GAAE,EAAGpiE,QAAQ,CAAC,GAAG,OAAO8X,EAAEzJ,GAAGiN,KAAKvK,EAAE/Q,QAAQ+Q,EAAEA,EAAE/Q,QAAQ0zF,GAAG3iF,EAAEqxD,GAAE,EAAGrxD,EAAE/Q,OAAO,CAAC,OAAO0zF,EAAE/+D,EAAE7c,EAAE47E,EAAE3iD,EAAEpjB,EAAE+lE,EAAEhrD,EAAE,SAAS5wB,EAAE6V,EAAEtf,GAAGqlF,EAAEkvC,EAAE9qH,EAAE6V,IAAIhkB,OAAOwG,eAAe2H,EAAE6V,EAAE,CAACvd,YAAW,EAAG6c,IAAI5e,GAAG,EAAEqlF,EAAEA,EAAE,SAAS57E,GAAG,oBAAoBsqB,QAAQA,OAAOomC,aAAa7+D,OAAOwG,eAAe2H,EAAEsqB,OAAOomC,YAAY,CAACv4D,MAAM,WAAWtG,OAAOwG,eAAe2H,EAAE,aAAa,CAAC7H,OAAM,GAAI,EAAEyjF,EAAE/lE,EAAE,SAAS7V,EAAE6V,GAAG,GAAG,EAAEA,IAAI7V,EAAE47E,EAAE57E,IAAI,EAAE6V,EAAE,OAAO7V,EAAE,GAAG,EAAE6V,GAAG,iBAAiB7V,GAAGA,GAAGA,EAAEmjK,WAAW,OAAOnjK,EAAE,IAAIzJ,EAAE1E,OAAOC,OAAO,MAAM,GAAG8pF,EAAEA,EAAErlF,GAAG1E,OAAOwG,eAAe9B,EAAE,UAAU,CAAC+B,YAAW,EAAGH,MAAM6H,IAAI,EAAE6V,GAAG,iBAAiB7V,EAAE,IAAI,IAAI/G,KAAK+G,EAAE47E,EAAEhrD,EAAEr6B,EAAE0C,EAAE,SAAS4c,GAAG,OAAO7V,EAAE6V,EAAE,EAAE+K,KAAK,KAAK3nB,IAAI,OAAO1C,CAAC,EAAEqlF,EAAE3iF,EAAE,SAAS+G,GAAG,IAAI6V,EAAE7V,GAAGA,EAAEmjK,WAAW,WAAW,OAAOnjK,EAAEojK,OAAO,EAAE,WAAW,OAAOpjK,CAAC,EAAE,OAAO47E,EAAEhrD,EAAE/a,EAAE,IAAIA,GAAGA,CAAC,EAAE+lE,EAAEkvC,EAAE,SAAS9qH,EAAE6V,GAAG,OAAOhkB,OAAOD,UAAUye,eAAe7M,KAAKxD,EAAE6V,EAAE,EAAE+lE,EAAEl3D,EAAE,GAAGk3D,EAAEA,EAAEliD,EAAE,GAAG,CAAp5B,CAAs5B,CAAC,GAAG,SAAS15B,EAAE6V,EAAE+lE,GAAG,aAAa/lE,EAAEstJ,YAAW,EAAGttJ,EAAEutJ,aAAQ,EAAO,IAAI7sK,EAAEqlF,EAAE,IAAI3iF,EAAE,WAAW,SAAS+G,IAAI,CAAC,OAAOA,EAAEqjK,cAAc,SAASrjK,EAAE6V,GAAG,IAAI+lE,EAAE/lE,EAAElgB,MAAMqK,GAAG,OAAO47E,GAAGA,EAAE1nF,OAAO,GAAG0nF,EAAE,IAAI,EAAE,EAAE57E,EAAEsjK,eAAe,SAAStjK,EAAE6V,GAAG,IAAI+lE,EAAE/lE,EAAElgB,MAAMqK,GAAG,OAAO47E,GAAGA,EAAE1nF,OAAO,GAAG0nF,EAAE,IAAI,EAAE,EAAE57E,EAAEujK,oBAAoB,SAASvjK,EAAE6V,EAAE+lE,GAAG,GAAG57E,EAAErF,KAAKkb,GAAG,OAAO+lE,CAAC,EAAE57E,EAAEwjK,sBAAsB,SAASxjK,GAAG,OAAOA,GAAG,IAAI,KAAK,MAAM,KAAK,IAAI,KAA0C,IAAI,SAAS,MAAM,KAA7C,IAAI,SAAS,MAAM,OAA+B,IAAI,SAAS,MAAM,OAAO,IAAI,SAAS,MAAM,QAAQ,IAAI,SAAS,MAAM,IAAI,IAAI,SAAS,MAAM,IAAI,IAAI,SAAS,MAAM,MAAM,IAAI,UAAU,MAAM,KAAK,QAAQ,OAAO,EAAEA,EAAEyjK,oBAAoB,SAASzjK,GAAG,IAAI6V,EAAE7V,EAAEmX,MAAM,KAAKpX,OAAO,EAAE,GAAGmuB,KAAK,SAASluB,GAAG,OAAOrJ,SAASqJ,EAAE,KAAK,CAAC,IAAI,GAAG6V,EAAE/V,KAAK,GAAG,KAAK+V,EAAE,GAAG,OAAOA,EAAE,IAAI,KAAK,EAAE,MAAM,UAAU,KAAK,EAAE,MAAM,eAAe,KAAK,EAAE,MAAM,OAAO,KAAK,EAAE,MAAM,gBAAgB,KAAK,EAAE,MAAM,YAAY,KAAK,GAAG,MAAM,WAAW,KAAK,GAAG,MAAM,aAAa,KAAK,GAAG,MAAM,SAAS,KAAK,GAAG,MAAM,cAAc,KAAK,GAAG,MAAM,SAAS,KAAK,GAAG,MAAM,WAAW,QAAQ,OAAO,EAAE7V,EAAE0jK,sBAAsB,SAAS1jK,GAAG,IAAI6V,EAAE7V,EAAEmX,MAAM,KAAKpX,OAAO,EAAE,GAAGmuB,KAAK,SAASluB,GAAG,OAAOrJ,SAASqJ,EAAE,KAAK,CAAC,IAAI,GAAG6V,EAAE/V,KAAK,KAAK,IAAI+V,EAAE,IAAIA,EAAE,GAAG,GAAG,OAAO,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,UAAU,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAE,QAAQ,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,SAAS,IAAIA,EAAE,IAAI,IAAIA,EAAE,GAAG,QAAQ,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,cAAc,IAAIA,EAAE,GAAG,YAAY,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,qBAAqB,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,aAAa,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAE,SAAS,IAAIA,EAAE,GAAG,WAAW,IAAIA,EAAE,GAAG,cAAc,IAAIA,EAAE,GAAG,SAAS,IAAIA,EAAE,GAAG,OAAO,IAAIA,EAAE,GAAG,WAAM,CAAM,EAAE7V,EAAE2jK,oBAAoB,SAAS3jK,GAAG,OAAOA,EAAEmX,MAAM,KAAKjjB,MAAM,EAAE8L,EAAE4jK,gBAAgB,SAAS/tJ,EAAE+lE,EAAErlF,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAI0C,EAAE+G,EAAE2jK,oBAAoB9tJ,GAAG6jB,EAAE15B,EAAE2jK,oBAAoB/nF,GAAGkvC,EAAE/+G,KAAKC,IAAI/S,EAAEygC,GAAGpxB,EAAE,EAAEwrJ,EAAE9zJ,EAAEkuB,IAAI,CAACrY,EAAE+lE,IAAI,SAAS/lE,GAAG,IAAI+lE,EAAEkvC,EAAE9qH,EAAE2jK,oBAAoB9tJ,GAAGtf,EAAEsf,EAAE,IAAIllB,MAAMirF,EAAE,GAAG5qF,KAAK,MAAM,OAAOgP,EAAEkuB,IAAI33B,EAAE4gB,MAAM,MAAM,SAASnX,GAAG,OAAO,IAAIrP,MAAM,GAAGqP,EAAE9L,QAAQlD,KAAK,KAAKgP,CAAC,IAAIgpD,SAAS,IAAI,IAAIzyD,IAAI+R,EAAEwiH,EAAE/+G,KAAK4yB,IAAI1lC,EAAEygC,IAAIoxF,GAAG,EAAEA,GAAGxiH,GAAG,CAAC,GAAGwrJ,EAAE,GAAGhpC,GAAGgpC,EAAE,GAAGhpC,GAAG,OAAO,EAAE,GAAGgpC,EAAE,GAAGhpC,KAAKgpC,EAAE,GAAGhpC,GAAG,CAAC,GAAGA,IAAIxiH,EAAE,OAAO,EAAEwiH,GAAG,CAAC,MAAM,GAAGgpC,EAAE,GAAGhpC,GAAGgpC,EAAE,GAAGhpC,GAAG,OAAO,CAAC,CAAC,EAAE9qH,EAAEkuB,IAAI,SAASluB,EAAE6V,GAAG,IAAI+lE,EAAErlF,EAAE,GAAG,GAAG5F,MAAMiB,UAAUs8B,IAAI,OAAOv9B,MAAMiB,UAAUs8B,IAAI1qB,KAAKxD,EAAE6V,GAAG,IAAI+lE,EAAE,EAAEA,EAAE57E,EAAE9L,OAAO0nF,GAAG,EAAErlF,EAAEuJ,KAAK+V,EAAE7V,EAAE47E,KAAK,OAAOrlF,CAAC,EAAEyJ,EAAE6jK,gBAAgB,SAAS7jK,GAAG,OAAOzJ,EAAEutK,oBAAoB9jK,EAAE,EAAEA,EAAE+jK,sBAAsB,SAAS/jK,GAAG,OAAOzJ,EAAEytK,YAAYhkK,IAAI,EAAE,EAAEA,CAAC,CAAvvE,GAA2vE6V,EAAEutJ,QAAQnqK,EAAE+G,EAAE9X,QAAQ2tB,EAAEutJ,OAAO,EAAE,GAAG,SAASpjK,EAAE6V,EAAE+lE,GAAG,aAAa/lE,EAAEstJ,YAAW,EAAGttJ,EAAEouJ,WAAWpuJ,EAAEquJ,OAAOruJ,EAAEsuJ,cAActuJ,EAAEmuJ,YAAYnuJ,EAAEiuJ,yBAAoB,EAAOjuJ,EAAEiuJ,oBAAoB,CAAC,cAAc,cAAc,kBAAkB,UAAUM,KAAK,OAAOC,WAAW,aAAaC,OAAO,SAASC,SAAS,WAAWC,SAAS,WAAWC,QAAQ,UAAUC,MAAM,QAAQC,QAAQ,UAAU,gBAAgB,gBAAgBC,UAAU,YAAY,oBAAoB,KAAK,WAAW,WAAWC,QAAQ,UAAU,iBAAiB,OAAO,aAAa,KAAK,sBAAsB,QAAQC,MAAM,QAAQ,cAAc,cAAcC,UAAU,YAAYC,OAAO,SAASC,SAAS,WAAWC,GAAG,KAAKC,OAAO,SAASC,OAAO,SAASC,SAAS,WAAW,+BAA+B,mBAAmBC,UAAU,YAAYC,SAAS,WAAWC,MAAM,QAAQC,MAAM,QAAQ,aAAa,KAAKC,QAAQ,UAAU,gBAAgB,QAAQC,OAAO,SAAS,iBAAiB,SAASC,KAAK,QAAQ/vJ,EAAEmuJ,YAAY,CAAC6B,YAAY,cAAcC,QAAQ,kBAAkBC,KAAK,OAAOC,WAAW,aAAaC,OAAO,SAASloK,SAAS,WAAWmoK,SAAS,WAAWC,QAAQ,UAAUr2H,MAAM,QAAQs2H,QAAQ,UAAUC,UAAU,YAAYC,cAAc,gBAAgBC,GAAG,oBAAoBC,SAAS,WAAWC,QAAQ,UAAUC,KAAK,iBAAiBC,GAAG,aAAaC,MAAM,sBAAsBC,MAAM,QAAQC,YAAY,cAAcC,UAAU,YAAYC,OAAO,SAASC,SAAS,WAAWC,GAAG,aAAaC,OAAO,kBAAkBC,OAAO,SAASC,SAAS,WAAWC,iBAAiB,+BAA+BC,UAAU,YAAYC,SAAS,WAAWC,MAAM,QAAQC,MAAM,QAAQC,GAAG,aAAaC,QAAQ,UAAUC,MAAM,gBAAgBC,OAAO,SAASC,OAAO,kBAAkBlyJ,EAAEsuJ,cAAc,CAAC6D,OAAO,SAASC,OAAO,SAASpgC,QAAQ,UAAUqgC,GAAG,MAAMryJ,EAAEquJ,OAAO,CAACiE,aAAa,gBAAgBC,QAAQ,UAAUC,MAAM,QAAQC,IAAI,MAAMC,QAAQ,UAAUC,MAAM,QAAQnE,WAAW,aAAaD,KAAK,OAAOqB,MAAM,QAAQgD,MAAM,QAAQC,SAAS,YAAYC,aAAa,gBAAgB/C,KAAK,QAAQ/vJ,EAAEouJ,WAAW,CAAC2E,SAAS,WAAWC,MAAM,QAAQC,QAAQ,UAAUC,OAAO,SAASC,MAAM,QAAQC,OAAO,SAAS,EAAE,GAAG,SAASjpK,EAAE6V,EAAE+lE,GAAG,aAAa/lE,EAAEstJ,YAAW,EAAGttJ,EAAEutJ,aAAQ,EAAO,IAAI7sK,EAAE0C,GAAG1C,EAAEqlF,EAAE,MAAMrlF,EAAE4sK,WAAW5sK,EAAE,CAAC6sK,QAAQ7sK,GAAGmjC,EAAEkiD,EAAE,IAAI,SAASkvC,EAAE9qH,EAAE6V,GAAG,IAAI,IAAI+lE,EAAE,EAAEA,EAAE/lE,EAAE3hB,OAAO0nF,IAAI,CAAC,IAAIrlF,EAAEsf,EAAE+lE,GAAGrlF,EAAE+B,WAAW/B,EAAE+B,aAAY,EAAG/B,EAAEgC,cAAa,EAAG,UAAUhC,IAAIA,EAAEiC,UAAS,GAAI3G,OAAOwG,eAAe2H,EAAEzJ,EAAE2B,IAAI3B,EAAE,CAAC,CAAC,IAAI+R,EAAE,WAAW,SAAStI,IAAI,CAAC,IAAI6V,EAAItf,EAAE,OAAOyJ,EAAEkpK,UAAU,SAASlpK,EAAE6V,GAAG,QAAG,IAASA,IAAIA,GAAE,GAAI,iBAAiB7V,EAAE,MAAM,IAAItO,MAAM,gCAAgC,OAAO,IAAIuH,EAAEmqK,QAAQpjK,EAAE6V,EAAE,EAAE7V,EAAE8xB,MAAM,SAAS9xB,GAAG,OAAO,IAAI/G,EAAEmqK,QAAQpjK,GAAG63D,WAAW,EAAEhiD,EAAE7V,EAAEzJ,EAAE,CAAC,CAAC2B,IAAI,cAAcid,IAAI,WAAW,OAAOukB,EAAEsqI,WAAW,GAAG,CAAC9rK,IAAI,aAAaid,IAAI,WAAW,OAAOukB,EAAEuqI,UAAU,GAAG,CAAC/rK,IAAI,SAASid,IAAI,WAAW,OAAOukB,EAAEwqI,MAAM,GAAG,CAAChsK,IAAI,gBAAgBid,IAAI,WAAW,OAAOukB,EAAEyqI,aAAa,IAAO,MAAOr5C,EAAEj1G,EAAEjkB,UAAX,MAAwB2E,GAAGu0H,EAAEj1G,EAAEtf,GAAGyJ,CAAC,CAA3f,GAA+f6V,EAAEutJ,QAAQ96J,EAAEtI,EAAE9X,QAAQ2tB,EAAEutJ,OAAO,EAAE,GAAG,SAASpjK,EAAE6V,EAAE+lE,GAAG,aAAa/lE,EAAEstJ,YAAW,EAAGttJ,EAAEutJ,aAAQ,EAAO,IAAI7sK,EAAEu9J,EAAEl4E,EAAE,KAAK3iF,EAAE66J,EAAEl4E,EAAE,KAAKliD,EAAEo6H,EAAEl4E,EAAE,KAAKkvC,EAAEgpC,EAAEl4E,EAAE,KAAKtzE,EAAEwrJ,EAAEl4E,EAAE,KAAK,SAASk4E,EAAE9zJ,GAAG,OAAOA,GAAGA,EAAEmjK,WAAWnjK,EAAE,CAACojK,QAAQpjK,EAAE,CAAC,IAAI4wB,EAAE,WAAW,SAAS5wB,EAAEA,EAAE6V,GAAG,QAAG,IAASA,IAAIA,GAAE,GAAI,MAAM7V,GAAG,KAAKA,EAAE,MAAM,IAAItO,MAAM,sCAAsClB,KAAK24K,IAAInpK,EAAExP,KAAK44K,aAAa,CAAC,GAAE,IAAKvzJ,GAAGrlB,KAAKshC,OAAO,CAAC,IAAIjc,EAAE7V,EAAEpO,UAAU,OAAOikB,EAAEwzJ,MAAM,WAAW,OAAO74K,KAAK24K,GAAG,EAAEtzJ,EAAElb,KAAK,SAASqF,GAAG,OAAOA,EAAErF,KAAKnK,KAAK24K,IAAI,EAAEtzJ,EAAEyzJ,aAAa,WAAW,IAAItpK,EAAExP,KAAKA,KAAK44K,aAAa3qK,QAAQ,CAAC,EAAE,IAAIoX,EAAEtf,EAAE6sK,QAAQ3+I,MAAM,SAAS5O,GAAG,GAAG,mBAAmBA,EAAElb,KAAK,OAAOkb,EAAElb,KAAKqF,GAAG,GAAG6V,EAAElb,gBAAgBhK,MAAM,OAAOklB,EAAElb,KAAK4C,MAAM,SAASsY,GAAG,OAAO7V,EAAErF,KAAKkb,EAAE,IAAI,MAAM,IAAInkB,MAAM,uCAAuC,IAAI,OAAOmkB,IAAIrlB,KAAK44K,aAAa3qK,QAAQoX,EAAE0zJ,SAAS/4K,KAAK64K,UAAU74K,KAAK44K,aAAa3qK,OAAO,EAAEoX,EAAE2zJ,WAAW,WAAW,OAAOh5K,KAAK44K,aAAa3qK,QAAQjO,KAAK44K,aAAa3qK,QAAQjO,KAAK84K,cAAc,EAAEzzJ,EAAErf,eAAe,SAASwJ,GAAG,OAAOA,EAAEk8C,OAAO1rD,KAAKg5K,aAAaj5K,MAAMioD,eAAe,GAAGhoD,KAAKg5K,aAAaj5K,MAAM,EAAE,EAAEslB,EAAEpf,kBAAkB,WAAW,OAAOjG,KAAKg5K,aAAa5zK,OAAO,EAAEigB,EAAE4zJ,MAAM,WAAW,OAAOj5K,KAAK44K,aAAaM,GAAGl5K,KAAK44K,aAAaM,GAAGl5K,KAAKm5K,SAAS,EAAE9zJ,EAAE8zJ,QAAQ,WAAW,IAAI3pK,EAAExP,KAAKA,KAAK44K,aAAaM,GAAG,CAAC,EAAE,IAAI7zJ,EAAE5c,EAAEmqK,QAAQ3+I,MAAM,SAAS5O,GAAG,GAAG,mBAAmBA,EAAElb,KAAK,OAAOkb,EAAElb,KAAKqF,GAAG,GAAG6V,EAAElb,gBAAgBhK,MAAM,OAAOklB,EAAElb,KAAK4C,MAAM,SAASsY,GAAG,OAAO7V,EAAErF,KAAKkb,EAAE,IAAI,MAAM,IAAInkB,MAAM,uCAAuC,IAAI,OAAOmkB,IAAIrlB,KAAK44K,aAAaM,GAAG7zJ,EAAE0zJ,SAAS/4K,KAAK64K,UAAU74K,KAAK44K,aAAaM,EAAE,EAAE7zJ,EAAE+zJ,UAAU,SAAS5pK,GAAG,IAAI6V,EAAErlB,KAAKi5K,QAAQl5K,KAAK,OAAOyP,EAAEk8C,OAAOrmC,GAAG2iC,eAAe,GAAG3iC,GAAG,EAAE,EAAEA,EAAEg0J,aAAa,WAAW,OAAOr5K,KAAKi5K,QAAQ7zK,OAAO,EAAEigB,EAAEi0J,YAAY,WAAW,OAAOt5K,KAAK44K,aAAa3uK,SAASjK,KAAK44K,aAAa3uK,SAASjK,KAAKu5K,eAAe,EAAEl0J,EAAEm0J,gBAAgB,SAAShqK,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAI6V,EAAErlB,KAAKs5K,cAAcl2K,KAAK,OAAOoM,EAAEk8C,OAAOrmC,GAAG2iC,eAAe,GAAG3iC,GAAG,EAAE,EAAEA,EAAEk0J,cAAc,WAAW,IAAI/pK,EAAExP,KAAKA,KAAK44K,aAAa3uK,SAAS,CAAC,EAAE,IAAIob,EAAE6jB,EAAE0pI,QAAQ3+I,MAAM,SAAS5O,GAAG,GAAG,mBAAmBA,EAAElb,KAAK,OAAOkb,EAAElb,KAAKqF,GAAG,GAAG6V,EAAElb,gBAAgBhK,MAAM,OAAOklB,EAAElb,KAAK4C,MAAM,SAASsY,GAAG,OAAO7V,EAAErF,KAAKkb,EAAE,IAAI,MAAM,IAAInkB,MAAM,uCAAuC,IAAI,OAAOmkB,IAAIrlB,KAAK44K,aAAa3uK,SAASob,EAAE0zJ,SAAS/4K,KAAK64K,UAAU74K,KAAK44K,aAAa3uK,QAAQ,EAAEob,EAAEo0J,UAAU,WAAW,OAAOz5K,KAAK44K,aAAac,OAAO15K,KAAK44K,aAAac,OAAO15K,KAAK25K,aAAa,EAAEt0J,EAAEu0J,cAAc,SAASpqK,GAAG,OAAOA,EAAEk8C,OAAO1rD,KAAKy5K,YAAY15K,MAAMioD,eAAe,GAAGhoD,KAAKy5K,YAAY15K,MAAM,EAAE,EAAEslB,EAAEs0J,YAAY,WAAW,IAAInqK,EAAExP,KAAKA,KAAK44K,aAAac,OAAO,CAAC,EAAE,IAAIr0J,EAAEi1G,EAAEs4C,QAAQ3+I,MAAM,SAAS5O,GAAG,GAAG,mBAAmBA,EAAElb,KAAK,OAAOkb,EAAElb,KAAKqF,GAAG,GAAG6V,EAAElb,gBAAgBhK,MAAM,OAAOklB,EAAElb,KAAK4C,MAAM,SAASsY,GAAG,OAAO7V,EAAErF,KAAKkb,EAAE,IAAI,MAAM,IAAInkB,MAAM,uCAAuC,IAAI,OAAOmkB,IAAIrlB,KAAK44K,aAAac,OAAOr0J,EAAE0zJ,SAAS/4K,KAAK64K,UAAU74K,KAAK44K,aAAac,MAAM,EAAEr0J,EAAEic,MAAM,WAAW,OAAOthC,KAAK84K,eAAe94K,KAAKm5K,UAAUn5K,KAAKu5K,gBAAgBv5K,KAAK25K,cAAc35K,IAAI,EAAEqlB,EAAEgiD,UAAU,WAAW,OAAOhmE,OAAOsgE,OAAO,CAAC,EAAE3hE,KAAK44K,aAAa,EAAEvzJ,EAAEje,UAAU,SAASoI,GAAG,IAAI6V,EAAErlB,KAAKorF,EAAE,CAAC,EAAErlF,EAAE,EAAE0C,EAAE,CAAC,EAAEygC,EAAE,EAAE,GAAG7nC,OAAO8G,KAAKqH,GAAGpB,SAAS,SAASiX,GAAG,IAAIi1G,EAAE9qH,EAAE6V,GAAG,iBAAiBi1G,GAAG7xH,EAAE4c,GAAGi1G,EAAEpxF,GAAG,GAAG,iBAAiBoxF,IAAIlvC,EAAE/lE,GAAGi1G,EAAEv0H,GAAG,EAAE,IAAIA,EAAE,EAAE,CAAC,IAAIu0H,EAAEj5H,OAAO8G,KAAKijF,GAAGtzE,EAAEwiH,EAAErmG,MAAM,SAASzkB,GAAG,OAAO6V,EAAEw0J,KAAKrqK,EAAE,IAAI,GAAGsI,EAAE,CAAC,IAAIwrJ,EAAEtjK,KAAKoH,UAAUgkF,EAAEtzE,IAAI,QAAG,IAASwrJ,EAAE,OAAOA,CAAC,CAAC,IAAIljI,EAAEk6F,EAAErmG,MAAM,SAASzkB,GAAG,OAAO6V,EAAEy0J,WAAWtqK,EAAE,IAAI,GAAG4wB,EAAE,CAAC,IAAIqI,EAAEzoC,KAAKoH,UAAUgkF,EAAEhrD,IAAI,QAAG,IAASqI,EAAE,OAAOA,CAAC,CAAC,CAAC,GAAGS,EAAE,EAAE,CAAC,IAAI+C,EAAE5qC,OAAO8G,KAAKM,GAAGwrB,MAAM,SAASzkB,GAAG,OAAO6V,EAAE00J,UAAUvqK,GAAE,EAAG,IAAI,QAAG,IAASy8B,EAAE,OAAOjsC,KAAKg6K,eAAevxK,EAAEwjC,GAAG,CAAC,EAAE5mB,EAAE00J,UAAU,SAASvqK,EAAE6V,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAI+lE,EAAEprF,KAAKgG,iBAAiBgiD,cAAcjiD,EAAEyJ,EAAEw4C,cAAcv/C,EAAEqP,EAAE86J,QAAQW,sBAAsBxtK,GAAG,OAAOsf,GAAG5c,IAAI1C,EAAE0C,EAAEu/C,eAAejiD,IAAIqlF,CAAC,EAAE/lE,EAAE20J,eAAe,SAASxqK,GAAG,IAAI6V,EAAE,CAAC,GAAG+lE,EAAE57E,EAAEzJ,GAAE,EAAG0C,EAAEzI,KAAKiG,oBAAoB,GAAG,iBAAiBwC,EAAE,MAAM,MAAM+G,EAAE,IAAI,MAAMA,EAAE,IAAI47E,EAAE57E,EAAE8uC,OAAO,GAAG,MAAM9uC,EAAE,IAAIzJ,GAAE,EAAGqlF,EAAE57E,EAAE8uC,OAAO,IAAIj5B,EAAE,GAAG,MAAM7V,EAAE,GAAG6V,EAAE/V,KAAK,GAAG+V,EAAE/V,MAAM,IAAI,MAAME,EAAE,GAAG47E,EAAE57E,EAAE8uC,OAAO,GAAG,MAAM9uC,EAAE,KAAKzJ,GAAE,EAAGqlF,EAAE57E,EAAE8uC,OAAO,IAAIj5B,EAAEzkB,QAAQkX,EAAE86J,QAAQQ,gBAAgB3qK,EAAE2iF,EAAErlF,KAAK,CAAC,EAAEsf,EAAEw0J,KAAK,SAASrqK,GAAG,OAAOxP,KAAKo5K,WAAU,KAAM1tH,OAAOl8C,GAAGw4C,aAAa,EAAE3iC,EAAEy0J,WAAW,SAAStqK,GAAG,OAAOxP,KAAKw5K,iBAAgB,KAAM9tH,OAAOl8C,GAAGw4C,aAAa,EAAE3iC,EAAEjb,SAAS,SAASoF,GAAG,OAAOxP,KAAK45K,eAAc,KAAMluH,OAAOl8C,GAAGw4C,aAAa,EAAE3iC,EAAE40J,GAAG,SAASzqK,GAAG,OAAOxP,KAAK+5K,UAAUvqK,IAAIxP,KAAK65K,KAAKrqK,IAAIxP,KAAK85K,WAAWtqK,EAAE,EAAE6V,EAAEtY,KAAK,SAASyC,GAAG,IAAI6V,EAAErlB,KAAK,YAAO,IAASwP,IAAIA,EAAE,IAAIA,EAAEzC,MAAM,SAASyC,GAAG,OAAO6V,EAAE40J,GAAGzqK,EAAE,GAAG,EAAEA,CAAC,CAAnuI,GAAuuI6V,EAAEutJ,QAAQxyI,EAAE5wB,EAAE9X,QAAQ2tB,EAAEutJ,OAAO,EAAE,GAAG,SAASpjK,EAAE6V,EAAE+lE,GAAG,aAAa/lE,EAAEstJ,YAAW,EAAGttJ,EAAEutJ,aAAQ,EAAO,IAAI7sK,EAAE0C,GAAG1C,EAAEqlF,EAAE,MAAMrlF,EAAE4sK,WAAW5sK,EAAE,CAAC6sK,QAAQ7sK,GAAOmjC,EAAE,6BAA6BoxF,EAAE,CAAC,CAACnwH,KAAK,CAAC,cAAc4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,aAAaqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,2BAA2BrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,UAAU4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,SAASqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,kCAAkCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,gBAAgB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,SAASqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,2BAA2BrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,mBAAmB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,gCAAgCqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,2CAA2CrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,UAAU4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,uBAAuBqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,iCAAiCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,cAAc4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,cAAcqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,qCAAqCrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,UAAU4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,SAASqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,iCAAiCrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,UAAU4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,SAASqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,iCAAiCrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,UAAU4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,eAAeqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,kCAAkCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,cAAc4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,kBAAkBqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,sCAAsCrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,cAAc4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,cAAcqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,sCAAsCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,kBAAkB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,WAAWqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,0CAA0CrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,aAAa4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,YAAYqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,qCAAqCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,WAAW4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,UAAUqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,mCAAmCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,aAAa4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,YAAYqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,qCAAqCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,aAAa4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,YAAYqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,qCAAqCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,mBAAmB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,UAAUqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,2CAA2CrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,cAAc4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,iBAAiBoK,KAAKqF,GAAG,kBAAkB,cAAc47E,EAAE3iF,EAAEmqK,QAAQC,cAAc,kDAAkDrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,iBAAiB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,qBAAqBqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,iCAAiCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,YAAY4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,kBAAkBqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,2BAA2BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,kBAAkB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,kBAAkBqrF,EAAE3iF,EAAEmqK,QAAQE,eAAe,mCAAmCtjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,YAAY4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,WAAWqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,6BAA6BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,cAAc4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,aAAaqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,+BAA+BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,aAAa4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,YAAYqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,qCAAqCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,SAAS4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,eAAeqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,0BAA0BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,YAAY4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,aAAaqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,+BAA+BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,aAAa4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,YAAYqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,8BAA8BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,sBAAsB,gBAAgB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,cAAcqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,qCAAqCrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,mBAAmB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,iBAAiBqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,IAAI/G,EAAEmqK,QAAQC,cAAc,0CAA0CrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,SAAS4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,QAAQqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,4BAA4BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,UAAU4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,SAASqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,0CAA0CrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,aAAa4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,YAAYqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,qCAAqCrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,4BAA4B4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,WAAWqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,oDAAoDrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,aAAa4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,YAAYqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,qCAAqCrjK,IAAI/G,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,sBAAsB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,UAAUqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,2CAA2CrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,QAAQ4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,iBAAiBqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc,6BAA6BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,SAASqF,GAAG,IAAI6V,GAAG7V,EAAErF,KAAK,iBAAiBihF,EAAE57E,EAAErF,KAAK,YAAY,OAAOkb,GAAG+lE,CAAC,EAAE2tF,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,mBAAmBqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,kBAAkB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,iBAAiBqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,uBAAuB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAK,UAAUqrF,EAAE3iF,EAAEmqK,QAAQC,cAAc3pI,EAAE15B,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,OAAO4uK,SAAS,SAASvpK,GAAG,IAAI6V,GAAG,IAAI7V,EAAEy/B,OAAO,OAAO,yBAAyB,eAAe,MAAM,CAAClvC,KAAK0I,EAAEmqK,QAAQC,cAAcxtJ,EAAE7V,GAAGpK,QAAQqD,EAAEmqK,QAAQE,eAAeztJ,EAAE7V,GAAG,IAAI6V,EAAEutJ,QAAQt4C,EAAE9qH,EAAE9X,QAAQ2tB,EAAEutJ,OAAO,EAAE,GAAG,SAASpjK,EAAE6V,EAAE+lE,GAAG,aAAa/lE,EAAEstJ,YAAW,EAAGttJ,EAAEutJ,aAAQ,EAAO,IAAI7sK,EAAE0C,GAAG1C,EAAEqlF,EAAE,MAAMrlF,EAAE4sK,WAAW5sK,EAAE,CAAC6sK,QAAQ7sK,GAAGmjC,EAAEkiD,EAAE,IAAQkvC,EAAE,CAAC,CAACnwH,KAAK,CAAC,aAAa4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,wBAAwBrjK,GAAG,MAAM,CAACzP,KAAKmpC,EAAEwqI,OAAO0B,KAAKhwK,QAAQigB,EAAE,GAAG,CAAClb,KAAK,CAAC,kBAAkB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,yCAAyCrjK,GAAG,MAAM,CAACzP,KAAKmpC,EAAEwqI,OAAOiE,aAAavyK,QAAQigB,EAAE,GAAG,CAAClb,KAAK,CAAC,YAAY4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,iCAAiCrjK,GAAG47E,EAAE3iF,EAAEmqK,QAAQI,sBAAsB3tJ,GAAG,MAAM,CAACtlB,KAAKmpC,EAAEwqI,OAAOkE,QAAQxyK,QAAQigB,EAAE60J,YAAY9uF,EAAE,GAAG,CAACjhF,KAAK,CAAC,cAAc4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,6BAA6BrjK,GAAG4/B,QAAQ,SAAS,KAAKg8C,EAAE3iF,EAAEmqK,QAAQK,oBAAoB5tJ,GAAGtf,EAAE,CAAChG,KAAKmpC,EAAEwqI,OAAOmE,MAAMzyK,QAAQigB,GAAG,OAAO+lE,IAAIrlF,EAAEm0K,YAAY9uF,GAAGrlF,CAAC,GAAG,CAACoE,KAAK,CAAC,uBAAuB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,qCAAqCrjK,GAAG4/B,QAAQ,SAAS,KAAK,MAAM,CAACrvC,KAAKmpC,EAAEwqI,OAAOoE,IAAI1yK,QAAQigB,EAAE,GAAG,CAAClb,KAAK,SAASqF,GAAG,IAAI6V,GAAG7V,EAAErF,KAAK,iBAAiBihF,EAAE57E,EAAErF,KAAK,YAAY,OAAOkb,GAAG+lE,CAAC,EAAE2tF,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,8BAA8BrjK,GAAG47E,EAAE3iF,EAAEmqK,QAAQM,sBAAsB7tJ,GAAGtf,EAAE,CAAChG,KAAKmpC,EAAEwqI,OAAOqE,QAAQ3yK,QAAQigB,GAAG,OAAO+lE,IAAIrlF,EAAEm0K,YAAY9uF,GAAGrlF,CAAC,GAAG,CAACoE,KAAK,CAAC,mBAAmB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,mCAAmCrjK,GAAG47E,EAAE,CAACrrF,KAAKmpC,EAAEwqI,OAAOsE,OAAO,OAAO3yJ,GAAGA,EAAE3hB,SAAS0nF,EAAEhmF,QAAQigB,GAAG+lE,CAAC,GAAG,CAACjhF,KAAK,CAAC,sBAAsB,gBAAgB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,kCAAkCrjK,IAAI/G,EAAEmqK,QAAQC,cAAc,mCAAmCrjK,IAAI/G,EAAEmqK,QAAQC,cAAc,aAAarjK,GAAG,MAAM,CAACzP,KAAKmpC,EAAEwqI,OAAOG,WAAWzuK,QAAQigB,EAAE,GAAG,CAAClb,KAAK,CAAC,SAAS4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,uBAAuBrjK,GAAG,MAAM,CAACzP,KAAKmpC,EAAEwqI,OAAOE,KAAKxuK,QAAQigB,EAAE,GAAG,CAAClb,KAAK,CAAC,UAAU4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,2BAA2BrjK,GAAG,MAAM,CAACzP,KAAKmpC,EAAEwqI,OAAOuB,MAAM7vK,QAAQigB,EAAE,GAAG,CAAClb,KAAK,CAAC,UAAU4uK,SAAS,WAAW,MAAM,CAACh5K,KAAKmpC,EAAEwqI,OAAOuE,MAAM,GAAG,CAAC9tK,KAAK,CAAC,QAAQ4uK,SAAS,WAAW,MAAM,CAACh5K,KAAKmpC,EAAEwqI,OAAOwE,SAAS,GAAG,CAAC/tK,KAAK,CAAC,iBAAiB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,mCAAmCrjK,GAAG,MAAM,CAACzP,KAAKmpC,EAAEwqI,OAAOyE,aAAa/yK,QAAQigB,EAAE,IAAIA,EAAEutJ,QAAQt4C,EAAE9qH,EAAE9X,QAAQ2tB,EAAEutJ,OAAO,EAAE,GAAG,SAASpjK,EAAE6V,EAAE+lE,GAAG,aAAa/lE,EAAEstJ,YAAW,EAAGttJ,EAAEutJ,aAAQ,EAAO,IAAI7sK,EAAE0C,GAAG1C,EAAEqlF,EAAE,MAAMrlF,EAAE4sK,WAAW5sK,EAAE,CAAC6sK,QAAQ7sK,GAAGmjC,EAAEkiD,EAAE,IAAQkvC,EAAE,CAAC,CAACnwH,KAAK,CAAC,cAAc4uK,SAAS,WAAW,MAAM,CAAC31K,KAAK,MAAM+2K,OAAO,SAAS,GAAG,CAAChwK,KAAK,CAAC,WAAW4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,aAAarjK,IAAI,OAAO47E,EAAE,CAAChoF,KAAK8lC,EAAEyqI,cAAc8D,OAAO0C,OAAO,UAAU,OAAO90J,IAAI+lE,EAAEkuE,MAAMj0I,GAAG+lE,CAAC,GAAG,CAACjhF,KAAK,CAAC,2BAA2B4uK,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc6D,OAAO2C,OAAO,QAAQ,GAAG,CAAChwK,KAAK,CAAC,SAAS4uK,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc6D,OAAO2C,OAAO,QAAQ7gB,MAAM,OAAO,GAAG,CAACnvJ,KAAK,CAAC,eAAe4uK,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc6D,OAAO2C,OAAO,SAAS7gB,MAAM,mBAAmB,GAAG,CAACnvJ,KAAK,CAAC,SAAS4uK,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc6D,OAAO2C,OAAO,SAAS,GAAG,CAAChwK,KAAK,CAAC,kBAAkB4uK,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc6D,OAAO,GAAG,CAACrtK,KAAK,SAASqF,GAAG,IAAI6V,EAAE7V,EAAErF,KAAK,gBAAgBihF,EAAE57E,EAAErF,KAAK,uBAAuB,OAAOkb,IAAI+lE,CAAC,EAAE2tF,SAAS,SAASvpK,GAAG,IAAI6V,EAAE5c,EAAEmqK,QAAQC,cAAc,iBAAiBrjK,GAAG,MAAM,CAACpM,KAAK8lC,EAAEyqI,cAAc8D,OAAO0C,OAAO,QAAQ7gB,MAAMj0I,EAAE,GAAG,CAAClb,KAAK,CAAC,mBAAmB,iBAAiB4uK,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc8D,OAAO0C,OAAO,QAAQ,GAAG,CAAChwK,KAAK,CAAC,aAAa4uK,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc8D,OAAO,GAAG,CAACttK,KAAK,SAASqF,GAAG,MAAM,eAAeA,EAAExJ,gBAAe,EAAG,EAAE+yK,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc8D,OAAO0C,OAAO,aAAa,GAAG,CAAChwK,KAAK,SAASqF,GAAG,MAAM,SAASA,EAAExJ,gBAAe,EAAG,EAAE+yK,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc8D,OAAO,GAAG,CAACttK,KAAK,SAASqF,GAAG,MAAM,kBAAkBA,EAAExJ,gBAAgB,EAAE+yK,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc8D,OAAO0C,OAAO,YAAY,GAAG,CAAChwK,KAAK,SAASqF,GAAG,IAAI6V,EAAEnf,OAAOwlD,OAAOl8C,EAAE6pK,gBAAgB1yJ,MAAM,KAAK,IAAI,MAAM,YAAYnX,EAAE4pK,WAAU,IAAK/zJ,GAAG,CAAC,EAAE0zJ,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc6D,OAAO,GAAG,CAACrtK,KAAK,SAASqF,GAAG,MAAM,YAAYA,EAAE4pK,WAAU,EAAG,EAAEL,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc8D,OAAO,GAAG,CAACttK,KAAK,SAASqF,GAAG,MAAM,UAAUA,EAAE4pK,WAAU,EAAG,EAAEL,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAct8B,QAAQ8iC,OAAO,QAAQ,GAAG,CAAChwK,KAAK,SAASqF,GAAG,MAAM,YAAYA,EAAE4pK,WAAU,EAAG,EAAEL,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAct8B,QAAQ,GAAG,CAACltI,KAAK,SAASqF,GAAG,MAAM,UAAUA,EAAE4pK,WAAU,EAAG,EAAEL,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAct8B,QAAQ,GAAG,CAACltI,KAAK,SAASqF,GAAG,MAAM,kBAAkBA,EAAE4pK,WAAU,EAAG,EAAEL,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc+D,GAAG,GAAG,CAACvtK,KAAK,SAASqF,GAAG,MAAM,SAASA,EAAE4pK,WAAU,EAAG,EAAEL,SAAS,WAAW,MAAM,CAAC31K,KAAK8lC,EAAEyqI,cAAc+D,GAAG,IAAIryJ,EAAEutJ,QAAQt4C,EAAE9qH,EAAE9X,QAAQ2tB,EAAEutJ,OAAO,EAAE,GAAG,SAASpjK,EAAE6V,EAAE+lE,GAAG,aAAa/lE,EAAEstJ,YAAW,EAAGttJ,EAAEutJ,aAAQ,EAAO,IAAI7sK,EAAE0C,GAAG1C,EAAEqlF,EAAE,MAAMrlF,EAAE4sK,WAAW5sK,EAAE,CAAC6sK,QAAQ7sK,GAAGmjC,EAAEkiD,EAAE,IAAQkvC,EAAE,CAAC,CAACnwH,KAAK,SAASqF,GAAG,MAAM,mBAAmBA,EAAExJ,gBAAe,EAAG,EAAE+yK,SAAS,SAASvpK,GAAG,GAAG,WAAWrF,KAAKqF,GAAG,MAAM,CAACzP,KAAKmpC,EAAEuqI,WAAW4E,OAAO,IAAIhzJ,EAAE5c,EAAEmqK,QAAQC,cAAc,0BAA0BrjK,GAAG,MAAM,CAACzP,KAAKmpC,EAAEuqI,WAAW2E,SAAShzK,QAAQigB,EAAE,GAAG,CAAClb,KAAK,CAAC,YAAY4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAKmpC,EAAEuqI,WAAW6E,SAASltF,EAAE3iF,EAAEmqK,QAAQC,cAAc,6BAA6BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,SAASqF,GAAG,OAAOA,EAAErF,KAAK,UAAU,EAAE4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAKmpC,EAAEuqI,WAAW8E,QAAQntF,EAAE3iF,EAAEmqK,QAAQC,cAAc,4BAA4BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,SAASqF,GAAG,IAAI6V,EAAE7V,EAAErF,KAAK,UAAUihF,EAAE57E,EAAErF,KAAK,eAAe,OAAOkb,IAAI+lE,CAAC,EAAE2tF,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAKmpC,EAAEuqI,WAAW+E,OAAOptF,EAAE3iF,EAAEmqK,QAAQC,cAAc,2BAA2BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,GAAG,CAAClb,KAAK,CAAC,4BAA4B4uK,SAAS,WAAW,MAAM,CAACh5K,KAAKmpC,EAAEuqI,WAAW4E,MAAM,GAAG,CAACluK,KAAK,CAAC,mBAAmB4uK,SAAS,SAASvpK,GAAG,IAAI6V,EAAE,CAACtlB,KAAKmpC,EAAEuqI,WAAWgF,QAAQrtF,EAAE3iF,EAAEmqK,QAAQC,cAAc,4BAA4BrjK,GAAG,OAAO47E,IAAI/lE,EAAEjgB,QAAQgmF,GAAG/lE,CAAC,IAAIA,EAAEutJ,QAAQt4C,EAAE9qH,EAAE9X,QAAQ2tB,EAAEutJ,OAAO,wBCAl/vB,QAsBE5yK,MAAQ8I,YAXY,0BAAP,EAcb,WAEF,IAAIsxK,EAAmB,kCAGnBC,EAAgBvxK,OAAOg2C,SAAWh2C,OAAOg2C,SAAS2/B,KAAO,KACzD67F,EAAUD,GAAcA,EAAYjrI,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,KAAc,KAGvFmrI,EAAUpgJ,SAASitB,qBAAqB,UAGxCozH,EAA2B,eAAiBD,EAAQ,IAAMpgJ,SAASwgE,cAAc,WAGjF8/E,GAAc3xK,OAAOutK,OAAqC,mBAA5BvtK,OAAOutK,MAAMhnI,WAG3CqrI,EAAiC,kBAAmBvgJ,SAIpD,oBAAqBj5B,OAASA,MAAMy5K,kBAAoBj3G,MAC/BxiE,MAAMy5K,gBACjCz5K,MAAMy5K,gBAAkBj3G,KAO1B,IAAIk3G,GAAyB,EACzBC,GAAwB,EAoF5B,SAASC,EAAsB35K,EAAO45K,GACpC,IAAIrwK,EACAqkC,EAAM,KACNisI,EAA0C,iBAAnBD,EA+B3B,OA9BAA,EAAiBC,EAAgBz/J,KAAK+B,MAAMy9J,GAAkB,EACzC,iBAAV55K,GAAsBA,IAC3B65K,EACFtwK,EAAUvJ,EAAMgE,MAAM,+GAGtBuF,EAAUvJ,EAAMgE,MAAM,kNAELuF,EAAQ,KACvBA,EAAUvJ,EAAMgE,MAAM,kHAItBuF,GAAWA,EAAQ,KAGnBqkC,EAFEgsI,EAAiB,EAEbD,EADW35K,EAAMd,MAAMc,EAAMP,QAAQ8J,EAAQ,IAAMA,EAAQ,GAAGhH,QACvBq3K,EAAiB,GAGxDrwK,EAAQ,KAWbqkC,CACT,CAwHA,SAASksI,IAIP,GAAuB,IAAnBV,EAAQ72K,OACV,OAAO,KAGT,IAAIqC,EAAGyJ,EAAGrO,EAAO4tC,EAAK+6H,EAClBoR,EAAkB,GAClBH,EAAiBE,EAAwBF,gBAAkB,EAQ/D,IAAKh1K,EAAI,EAAGA,EAAIw0K,EAAQ72K,OAAQqC,IAC1B00K,GAAcD,EACZJ,EAAiBjwK,KAAKowK,EAAQx0K,GAAG+tC,aACnConI,EAAgB5rK,KAAKirK,EAAQx0K,IAI/Bm1K,EAAgB5rK,KAAKirK,EAAQx0K,IAQjC,GAJAyJ,EAAI,IAAItO,MACJ05K,IACFz5K,EAAQqO,EAAErO,QAEPA,GAAS05K,EACZ,IACE,MAAMrrK,CACR,CACA,MAAO0c,GAEL/qB,EAAQ+qB,EAAI/qB,KACd,CAgEF,GA7DIA,KAEF2oK,EAzQJ,SAA0B/6H,EAAKmsI,GAC7B,IAAIn1K,EACA+jK,EAAS,KAIb,GAFAoR,EAAkBA,GAAmBX,EAElB,iBAARxrI,GAAoBA,EAC7B,IAAKhpC,EAAIm1K,EAAgBx3K,OAAQqC,KAC/B,GAAIm1K,EAAgBn1K,GAAGu0B,MAAQyU,EAAK,CAGlC+6H,EAASoR,EAAgBn1K,GACzB,KACF,CAGJ,OAAO+jK,CACT,CAwPaqR,CADTpsI,EAAM+rI,EAAsB35K,EAAO45K,GACJG,KAEhBZ,GAAWvrI,IAAQurI,IAK9BxQ,EAhOR,SAA6BoR,GAC3B,IAAIn1K,EAAG0jC,EACHqgI,EAAS,KAEb,IAAK/jK,EAAI,EAAG0jC,GADZyxI,EAAkBA,GAAmBX,GACH72K,OAAQqC,EAAI0jC,EAAK1jC,IACjD,IAAKm1K,EAAgBn1K,GAAGu3D,aAAa,OAAQ,CAC3C,GAAIwsG,EAAQ,CACVA,EAAS,KACT,KACF,CACAA,EAASoR,EAAgBn1K,EAC3B,CAEF,OAAO+jK,CACT,CA8NiBsR,CAAoBF,IAU9BpR,GAK4B,IAA3BoR,EAAgBx3K,SAClBomK,EAASoR,EAAgB,IAIxBpR,GAeC4Q,IACF5Q,EAAS3vI,SAAS04H,gBAIjBiX,GAeC2Q,GAAcD,EAChB,IAAKz0K,EAAIm1K,EAAgBx3K,OAAQqC,KAC/B,GAAsC,gBAAlCm1K,EAAgBn1K,GAAG+tC,WAA8B,CACnDg2H,EAASoR,EAAgBn1K,GACzB,KACF,CAiCN,OA5BK+jK,IAyBHA,EAASoR,EAAgBA,EAAgBx3K,OAAS,IAAM,MAGnDomK,CACT,EA5YA,WACE,IACE,IAAI59I,EAAM,IAAIhrB,MAEd,MADA05K,EAA8C,iBAAd1uJ,EAAI/qB,SAAwB+qB,EAAI/qB,MAC1D+qB,CACR,CACA,MAAOmvJ,GACLR,EAAmD,iBAApBQ,EAAUl6K,SAAwBk6K,EAAUl6K,KAC7E,CACD,EATD,GA+YA85K,EAAwBF,eAAiB,EAOrC,IAAItR,EAA4BwR,EAShC,OARAxR,EAAuB6R,KAASL,EAChCxR,EAAuB8R,IA1R3B,WAME,OAAO,IAwFT,EA6LI9R,EAAuB5qH,OArL3B,WAIE,OAAO,IACT,EAsLW4qH,CACT,GA/coB,UAAX,IAAW,yCCYtB,IAOI+R,EAPAlX,EAAuB,iBAAZmX,QAAuBA,QAAU,KAC5CC,EAAepX,GAAwB,mBAAZA,EAAE/xJ,MAC7B+xJ,EAAE/xJ,MACF,SAAsBggF,EAAQp3D,EAAUroB,GACxC,OAAOg2J,SAAS1nK,UAAUmR,MAAMS,KAAKu/E,EAAQp3D,EAAUroB,EACzD,EAIA0oK,EADElX,GAA0B,mBAAdA,EAAEqX,QACCrX,EAAEqX,QACVt6K,OAAOu6K,sBACC,SAAwBrpF,GACvC,OAAOlxF,OAAOw6K,oBAAoBtpF,GAC/B53B,OAAOt5D,OAAOu6K,sBAAsBrpF,GACzC,EAEiB,SAAwBA,GACvC,OAAOlxF,OAAOw6K,oBAAoBtpF,EACpC,EAOF,IAAIupF,EAAc51K,OAAOyd,OAAS,SAAqBhc,GACrD,OAAOA,GAAUA,CACnB,EAEA,SAASF,IACPA,EAAa6U,KAAKtJ,KAAKhT,KACzB,CACArI,EAAOD,QAAU+P,EACjB9P,EAAOD,QAAQ8pE,KAwYf,SAAcjnD,EAASxa,GACrB,OAAO,IAAIsU,SAAQ,SAAUC,EAASC,GACpC,SAASwnK,EAAc7vJ,GACrB3R,EAAQqP,eAAe7pB,EAAMi8K,GAC7BznK,EAAO2X,EACT,CAEA,SAAS8vJ,IAC+B,mBAA3BzhK,EAAQqP,gBACjBrP,EAAQqP,eAAe,QAASmyJ,GAElCznK,EAAQ,GAAGjU,MAAM2S,KAAKvP,WACxB,CAEAw4K,EAA+B1hK,EAASxa,EAAMi8K,EAAU,CAAEx6G,MAAM,IACnD,UAATzhE,GAMR,SAAuCwa,EAASlM,EAASkO,GAC7B,mBAAfhC,EAAQmP,IACjBuyJ,EAA+B1hK,EAAS,QAASlM,EAPO,CAAEmzD,MAAM,GASpE,CATM06G,CAA8B3hK,EAASwhK,EAE3C,GACF,EAxZAt0K,EAAaA,aAAeA,EAE5BA,EAAarG,UAAU+6K,aAAU77K,EACjCmH,EAAarG,UAAUg7K,aAAe,EACtC30K,EAAarG,UAAUi7K,mBAAgB/7K,EAIvC,IAAIg8K,EAAsB,GAE1B,SAASC,EAAc9yJ,GACrB,GAAwB,mBAAbA,EACT,MAAM,IAAIi/C,UAAU,0EAA4Ej/C,EAEpG,CAoCA,SAAS+yJ,EAAiB37G,GACxB,YAA2BvgE,IAAvBugE,EAAKw7G,cACA50K,EAAa60K,oBACfz7G,EAAKw7G,aACd,CAkDA,SAASI,EAAalqF,EAAQnvF,EAAMqmB,EAAUkgJ,GAC5C,IAAIt9I,EACAwZ,EACAkkF,EA1HsB2yD,EAgJ1B,GApBAH,EAAc9yJ,QAGCnpB,KADfulC,EAAS0sD,EAAO4pF,UAEdt2I,EAAS0sD,EAAO4pF,QAAU96K,OAAOC,OAAO,MACxCixF,EAAO6pF,aAAe,SAIK97K,IAAvBulC,EAAO82I,cACTpqF,EAAOlpF,KAAK,cAAejG,EACfqmB,EAASA,SAAWA,EAASA,SAAWA,GAIpDoc,EAAS0sD,EAAO4pF,SAElBpyD,EAAWlkF,EAAOziC,SAGH9C,IAAbypH,EAEFA,EAAWlkF,EAAOziC,GAAQqmB,IACxB8oE,EAAO6pF,kBAeT,GAbwB,mBAAbryD,EAETA,EAAWlkF,EAAOziC,GAChBumK,EAAU,CAAClgJ,EAAUsgG,GAAY,CAACA,EAAUtgG,GAErCkgJ,EACT5/C,EAASrxD,QAAQjvC,GAEjBsgG,EAASz6G,KAAKma,IAIhB4C,EAAImwJ,EAAiBjqF,IACb,GAAKw3B,EAASrmH,OAAS2oB,IAAM09F,EAAS6yD,OAAQ,CACpD7yD,EAAS6yD,QAAS,EAGlB,IAAI7yI,EAAI,IAAI7oC,MAAM,+CACE6oH,EAASrmH,OAAS,IAAMgoD,OAAOtoD,GADjC,qEAIlB2mC,EAAEhqC,KAAO,8BACTgqC,EAAExvB,QAAUg4E,EACZxoD,EAAE3mC,KAAOA,EACT2mC,EAAE0U,MAAQsrE,EAASrmH,OA7KGg5K,EA8KH3yI,EA7KnB7gC,SAAWA,QAAQC,MAAMD,QAAQC,KAAKuzK,EA8KxC,CAGF,OAAOnqF,CACT,CAaA,SAASsqF,IACP,IAAK78K,KAAK88K,MAGR,OAFA98K,KAAKuyF,OAAO3oE,eAAe5pB,KAAKoD,KAAMpD,KAAK+8K,QAC3C/8K,KAAK88K,OAAQ,EACY,IAArBr5K,UAAUC,OACL1D,KAAKypB,SAASzW,KAAKhT,KAAKuyF,QAC1BvyF,KAAKypB,SAASlX,MAAMvS,KAAKuyF,OAAQ9uF,UAE5C,CAEA,SAASu5K,EAAUzqF,EAAQnvF,EAAMqmB,GAC/B,IAAIlF,EAAQ,CAAEu4J,OAAO,EAAOC,YAAQz8K,EAAWiyF,OAAQA,EAAQnvF,KAAMA,EAAMqmB,SAAUA,GACjFwzJ,EAAUJ,EAAYzsJ,KAAK7L,GAG/B,OAFA04J,EAAQxzJ,SAAWA,EACnBlF,EAAMw4J,OAASE,EACRA,CACT,CAyHA,SAASC,EAAW3qF,EAAQnvF,EAAM+5K,GAChC,IAAIt3I,EAAS0sD,EAAO4pF,QAEpB,QAAe77K,IAAXulC,EACF,MAAO,GAET,IAAIu3I,EAAav3I,EAAOziC,GACxB,YAAmB9C,IAAf88K,EACK,GAEiB,mBAAfA,EACFD,EAAS,CAACC,EAAW3zJ,UAAY2zJ,GAAc,CAACA,GAElDD,EAsDT,SAAyBn8G,GAEvB,IADA,IAAI3rD,EAAM,IAAIlV,MAAM6gE,EAAIt9D,QACfqC,EAAI,EAAGA,EAAIsP,EAAI3R,SAAUqC,EAChCsP,EAAItP,GAAKi7D,EAAIj7D,GAAG0jB,UAAYu3C,EAAIj7D,GAElC,OAAOsP,CACT,CA3DIgoK,CAAgBD,GAAcE,EAAWF,EAAYA,EAAW15K,OACpE,CAmBA,SAASszG,EAAc5zG,GACrB,IAAIyiC,EAAS7lC,KAAKm8K,QAElB,QAAe77K,IAAXulC,EAAsB,CACxB,IAAIu3I,EAAav3I,EAAOziC,GAExB,GAA0B,mBAAfg6K,EACT,OAAO,EACF,QAAmB98K,IAAf88K,EACT,OAAOA,EAAW15K,MAEtB,CAEA,OAAO,CACT,CAMA,SAAS45K,EAAWt8G,EAAKv4D,GAEvB,IADA,IAAI80K,EAAO,IAAIp9K,MAAMsI,GACZ1C,EAAI,EAAGA,EAAI0C,IAAK1C,EACvBw3K,EAAKx3K,GAAKi7D,EAAIj7D,GAChB,OAAOw3K,CACT,CA2CA,SAAStB,EAA+B1hK,EAASxa,EAAM0pB,EAAUlN,GAC/D,GAA0B,mBAAfhC,EAAQmP,GACbnN,EAAMilD,KACRjnD,EAAQinD,KAAKzhE,EAAM0pB,GAEnBlP,EAAQmP,GAAG3pB,EAAM0pB,OAEd,IAAwC,mBAA7BlP,EAAQ9O,iBAYxB,MAAM,IAAIi9D,UAAU,6EAA+EnuD,GATnGA,EAAQ9O,iBAAiB1L,GAAM,SAASy9K,EAAarpB,GAG/C53I,EAAMilD,MACRjnD,EAAQof,oBAAoB55B,EAAMy9K,GAEpC/zJ,EAAS0qI,EACX,GAGF,CACF,CAraA9yJ,OAAOwG,eAAeJ,EAAc,sBAAuB,CACzDK,YAAY,EACZ6c,IAAK,WACH,OAAO23J,CACT,EACAx2J,IAAK,SAASquI,GACZ,GAAmB,iBAARA,GAAoBA,EAAM,GAAK2nB,EAAY3nB,GACpD,MAAM,IAAI1xF,WAAW,kGAAoG0xF,EAAM,KAEjImoB,EAAsBnoB,CACxB,IAGF1sJ,EAAa6U,KAAO,gBAEGhc,IAAjBN,KAAKm8K,SACLn8K,KAAKm8K,UAAY96K,OAAOo8K,eAAez9K,MAAMm8K,UAC/Cn8K,KAAKm8K,QAAU96K,OAAOC,OAAO,MAC7BtB,KAAKo8K,aAAe,GAGtBp8K,KAAKq8K,cAAgBr8K,KAAKq8K,oBAAiB/7K,CAC7C,EAIAmH,EAAarG,UAAUs8K,gBAAkB,SAAyBj1K,GAChE,GAAiB,iBAANA,GAAkBA,EAAI,GAAKqzK,EAAYrzK,GAChD,MAAM,IAAIg6D,WAAW,gFAAkFh6D,EAAI,KAG7G,OADAzI,KAAKq8K,cAAgB5zK,EACdzI,IACT,EAQAyH,EAAarG,UAAUu8K,gBAAkB,WACvC,OAAOnB,EAAiBx8K,KAC1B,EAEAyH,EAAarG,UAAUiI,KAAO,SAAcjG,GAE1C,IADA,IAAI0P,EAAO,GACF/M,EAAI,EAAGA,EAAItC,UAAUC,OAAQqC,IAAK+M,EAAKxD,KAAK7L,UAAUsC,IAC/D,IAAI63K,EAAoB,UAATx6K,EAEXyiC,EAAS7lC,KAAKm8K,QAClB,QAAe77K,IAAXulC,EACF+3I,EAAWA,QAA4Bt9K,IAAjBulC,EAAOjmC,WAC1B,IAAKg+K,EACR,OAAO,EAGT,GAAIA,EAAS,CACX,IAAIC,EAGJ,GAFI/qK,EAAKpP,OAAS,IAChBm6K,EAAK/qK,EAAK,IACR+qK,aAAc38K,MAGhB,MAAM28K,EAGR,IAAI3xJ,EAAM,IAAIhrB,MAAM,oBAAsB28K,EAAK,KAAOA,EAAGt9K,QAAU,IAAM,KAEzE,MADA2rB,EAAInV,QAAU8mK,EACR3xJ,CACR,CAEA,IAAI7d,EAAUw3B,EAAOziC,GAErB,QAAgB9C,IAAZ+N,EACF,OAAO,EAET,GAAuB,mBAAZA,EACTqtK,EAAartK,EAASrO,KAAM8S,OAE5B,KAAI22B,EAAMp7B,EAAQ3K,OACdo6K,EAAYR,EAAWjvK,EAASo7B,GACpC,IAAS1jC,EAAI,EAAGA,EAAI0jC,IAAO1jC,EACzB21K,EAAaoC,EAAU/3K,GAAI/F,KAAM8S,EAHX,CAM1B,OAAO,CACT,EAgEArL,EAAarG,UAAU2sB,YAAc,SAAqB3qB,EAAMqmB,GAC9D,OAAOgzJ,EAAaz8K,KAAMoD,EAAMqmB,GAAU,EAC5C,EAEAhiB,EAAarG,UAAUsoB,GAAKjiB,EAAarG,UAAU2sB,YAEnDtmB,EAAarG,UAAU28K,gBACnB,SAAyB36K,EAAMqmB,GAC7B,OAAOgzJ,EAAaz8K,KAAMoD,EAAMqmB,GAAU,EAC5C,EAoBJhiB,EAAarG,UAAUogE,KAAO,SAAcp+D,EAAMqmB,GAGhD,OAFA8yJ,EAAc9yJ,GACdzpB,KAAK0pB,GAAGtmB,EAAM45K,EAAUh9K,KAAMoD,EAAMqmB,IAC7BzpB,IACT,EAEAyH,EAAarG,UAAU48K,oBACnB,SAA6B56K,EAAMqmB,GAGjC,OAFA8yJ,EAAc9yJ,GACdzpB,KAAK+9K,gBAAgB36K,EAAM45K,EAAUh9K,KAAMoD,EAAMqmB,IAC1CzpB,IACT,EAGJyH,EAAarG,UAAUwoB,eACnB,SAAwBxmB,EAAMqmB,GAC5B,IAAItO,EAAM0qB,EAAQo4I,EAAUl4K,EAAGm4K,EAK/B,GAHA3B,EAAc9yJ,QAGCnpB,KADfulC,EAAS7lC,KAAKm8K,SAEZ,OAAOn8K,KAGT,QAAaM,KADb6a,EAAO0qB,EAAOziC,IAEZ,OAAOpD,KAET,GAAImb,IAASsO,GAAYtO,EAAKsO,WAAaA,EACb,KAAtBzpB,KAAKo8K,aACTp8K,KAAKm8K,QAAU96K,OAAOC,OAAO,cAEtBukC,EAAOziC,GACVyiC,EAAOjc,gBACT5pB,KAAKqJ,KAAK,iBAAkBjG,EAAM+X,EAAKsO,UAAYA,SAElD,GAAoB,mBAATtO,EAAqB,CAGrC,IAFA8iK,GAAY,EAEPl4K,EAAIoV,EAAKzX,OAAS,EAAGqC,GAAK,EAAGA,IAChC,GAAIoV,EAAKpV,KAAO0jB,GAAYtO,EAAKpV,GAAG0jB,WAAaA,EAAU,CACzDy0J,EAAmB/iK,EAAKpV,GAAG0jB,SAC3Bw0J,EAAWl4K,EACX,KACF,CAGF,GAAIk4K,EAAW,EACb,OAAOj+K,KAEQ,IAAbi+K,EACF9iK,EAAK42B,QAiIf,SAAmB52B,EAAM+hB,GACvB,KAAOA,EAAQ,EAAI/hB,EAAKzX,OAAQw5B,IAC9B/hB,EAAK+hB,GAAS/hB,EAAK+hB,EAAQ,GAC7B/hB,EAAKy4C,KACP,CAnIUuqH,CAAUhjK,EAAM8iK,GAGE,IAAhB9iK,EAAKzX,SACPmiC,EAAOziC,GAAQ+X,EAAK,SAEQ7a,IAA1BulC,EAAOjc,gBACT5pB,KAAKqJ,KAAK,iBAAkBjG,EAAM86K,GAAoBz0J,EAC1D,CAEA,OAAOzpB,IACT,EAEJyH,EAAarG,UAAUw4B,IAAMnyB,EAAarG,UAAUwoB,eAEpDniB,EAAarG,UAAUypB,mBACnB,SAA4BznB,GAC1B,IAAI06K,EAAWj4I,EAAQ9/B,EAGvB,QAAezF,KADfulC,EAAS7lC,KAAKm8K,SAEZ,OAAOn8K,KAGT,QAA8BM,IAA1BulC,EAAOjc,eAUT,OATyB,IAArBnmB,UAAUC,QACZ1D,KAAKm8K,QAAU96K,OAAOC,OAAO,MAC7BtB,KAAKo8K,aAAe,QACM97K,IAAjBulC,EAAOziC,KACY,KAAtBpD,KAAKo8K,aACTp8K,KAAKm8K,QAAU96K,OAAOC,OAAO,aAEtBukC,EAAOziC,IAEXpD,KAIT,GAAyB,IAArByD,UAAUC,OAAc,CAC1B,IACIgE,EADAS,EAAO9G,OAAO8G,KAAK09B,GAEvB,IAAK9/B,EAAI,EAAGA,EAAIoC,EAAKzE,SAAUqC,EAEjB,oBADZ2B,EAAMS,EAAKpC,KAEX/F,KAAK6qB,mBAAmBnjB,GAK1B,OAHA1H,KAAK6qB,mBAAmB,kBACxB7qB,KAAKm8K,QAAU96K,OAAOC,OAAO,MAC7BtB,KAAKo8K,aAAe,EACbp8K,IACT,CAIA,GAAyB,mBAFzB89K,EAAYj4I,EAAOziC,IAGjBpD,KAAK4pB,eAAexmB,EAAM06K,QACrB,QAAkBx9K,IAAdw9K,EAET,IAAK/3K,EAAI+3K,EAAUp6K,OAAS,EAAGqC,GAAK,EAAGA,IACrC/F,KAAK4pB,eAAexmB,EAAM06K,EAAU/3K,IAIxC,OAAO/F,IACT,EAmBJyH,EAAarG,UAAU08K,UAAY,SAAmB16K,GACpD,OAAO85K,EAAWl9K,KAAMoD,GAAM,EAChC,EAEAqE,EAAarG,UAAUg9K,aAAe,SAAsBh7K,GAC1D,OAAO85K,EAAWl9K,KAAMoD,GAAM,EAChC,EAEAqE,EAAauvG,cAAgB,SAASz8F,EAASnX,GAC7C,MAAqC,mBAA1BmX,EAAQy8F,cACVz8F,EAAQy8F,cAAc5zG,GAEtB4zG,EAAchkG,KAAKuH,EAASnX,EAEvC,EAEAqE,EAAarG,UAAU41G,cAAgBA,EAiBvCvvG,EAAarG,UAAUi9K,WAAa,WAClC,OAAOr+K,KAAKo8K,aAAe,EAAIZ,EAAex7K,KAAKm8K,SAAW,EAChE,sBCzaA,OACC,SAAS3sK,EAAE6V,GAAG,aAAsC,iBAAiB1tB,EAAOD,QAAQC,EAAOD,QAAQ8X,EAAE2qB,SAAS9U,EAAE7V,GAAE,GAAI,SAASA,GAAG,IAAIA,EAAE2qB,SAAS,MAAM,IAAIj5B,MAAM,4CAA4C,OAAOmkB,EAAE7V,EAAE,EAAE6V,EAAE7V,EAAE,CAA9N,CAAgO,oBAAoB1G,OAAOA,OAAO9I,MAAK,SAAS8jK,EAAEt0J,GAAG,aAAa,IAAI6V,EAAE,GAAG+lE,EAAE/pF,OAAOo8K,eAAev0I,EAAE7jB,EAAEhlB,MAAMqjB,EAAE2B,EAAEi5J,KAAK,SAAS9uK,GAAG,OAAO6V,EAAEi5J,KAAKtrK,KAAKxD,EAAE,EAAE,SAASA,GAAG,OAAO6V,EAAEs1C,OAAOpoD,MAAM,GAAG/C,EAAE,EAAE8zJ,EAAEj+I,EAAE/V,KAAKvJ,EAAEsf,EAAEzkB,QAAQ6H,EAAE,CAAC,EAAE6xH,EAAE7xH,EAAE4mC,SAASxG,EAAEpgC,EAAEoX,eAAe/H,EAAE+wB,EAAEwG,SAASyqB,EAAEhiD,EAAE9E,KAAK3R,QAAQgrB,EAAE,CAAC,EAAEtU,EAAE,SAASvI,GAAG,MAAM,mBAAmBA,GAAG,iBAAiBA,EAAE+uK,UAAU,mBAAmB/uK,EAAE0pD,IAAI,EAAEtwB,EAAE,SAASp5B,GAAG,OAAO,MAAMA,GAAGA,IAAIA,EAAE1G,MAAM,EAAEihC,EAAE+5H,EAAE3pI,SAASsO,EAAE,CAACrlC,MAAK,EAAGk3B,KAAI,EAAGkkJ,OAAM,EAAGC,UAAS,GAAI,SAAStZ,EAAE31J,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,GAAG7xH,EAAEA,GAAGshC,GAAG4wD,cAAc,UAAU,GAAG2/B,EAAEj5E,KAAK7xC,EAAE6V,EAAE,IAAI+lE,KAAK3iD,GAAG1iC,EAAEsf,EAAE+lE,IAAI/lE,EAAEylB,cAAczlB,EAAEylB,aAAasgD,KAAKkvC,EAAE18D,aAAawtB,EAAErlF,GAAG0C,EAAEs7D,KAAK1V,YAAYisE,GAAG6vC,WAAW3pC,YAAYlG,EAAE,CAAC,SAAS8qC,EAAE51J,GAAG,OAAO,MAAMA,EAAEA,EAAE,GAAG,iBAAiBA,GAAG,mBAAmBA,EAAE/G,EAAE6xH,EAAEtnH,KAAKxD,KAAK,gBAAgBA,CAAC,CAAC,IAAIy8B,EAAE,sNAAsNo4H,EAAE,SAAS70J,EAAE6V,GAAG,OAAO,IAAIg/I,EAAE1kG,GAAGrjD,KAAK9M,EAAE6V,EAAE,EAAE,SAAS+a,EAAE5wB,GAAG,IAAI6V,IAAI7V,GAAG,WAAWA,GAAGA,EAAE9L,OAAO+E,EAAE28J,EAAE51J,GAAG,OAAOuI,EAAEvI,KAAKo5B,EAAEp5B,KAAK,UAAU/G,GAAG,IAAI4c,GAAG,iBAAiBA,GAAG,EAAEA,GAAGA,EAAE,KAAK7V,EAAE,CAAC60J,EAAE1kG,GAAG0kG,EAAEjjK,UAAU,CAACs9K,OAAOzyI,EAAE1qC,YAAY8iK,EAAE3gK,OAAO,EAAE8gE,QAAQ,WAAW,OAAOt7B,EAAEl2B,KAAKhT,KAAK,EAAE2kB,IAAI,SAASnV,GAAG,OAAO,MAAMA,EAAE05B,EAAEl2B,KAAKhT,MAAMwP,EAAE,EAAExP,KAAKwP,EAAExP,KAAK0D,QAAQ1D,KAAKwP,EAAE,EAAEmvK,UAAU,SAASnvK,GAAG,IAAI6V,EAAEg/I,EAAE1yB,MAAM3xI,KAAKuB,cAAciO,GAAG,OAAO6V,EAAEu5J,WAAW5+K,KAAKqlB,CAAC,EAAEslB,KAAK,SAASn7B,GAAG,OAAO60J,EAAE15H,KAAK3qC,KAAKwP,EAAE,EAAEkuB,IAAI,SAASj1B,GAAG,OAAOzI,KAAK2+K,UAAUta,EAAE3mI,IAAI19B,MAAK,SAASwP,EAAE6V,GAAG,OAAO5c,EAAEuK,KAAKxD,EAAE6V,EAAE7V,EAAE,IAAG,EAAEnP,MAAM,WAAW,OAAOL,KAAK2+K,UAAUz1I,EAAE32B,MAAMvS,KAAKyD,WAAW,EAAEy/I,MAAM,WAAW,OAAOljJ,KAAK6+K,GAAG,EAAE,EAAEC,KAAK,WAAW,OAAO9+K,KAAK6+K,IAAI,EAAE,EAAEE,KAAK,WAAW,OAAO/+K,KAAK2+K,UAAUta,EAAE2a,KAAKh/K,MAAK,SAASwP,EAAE6V,GAAG,OAAOA,EAAE,GAAG,CAAC,IAAG,EAAE45J,IAAI,WAAW,OAAOj/K,KAAK2+K,UAAUta,EAAE2a,KAAKh/K,MAAK,SAASwP,EAAE6V,GAAG,OAAOA,EAAE,CAAC,IAAG,EAAEw5J,GAAG,SAASrvK,GAAG,IAAI6V,EAAErlB,KAAK0D,OAAO+E,GAAG+G,GAAGA,EAAE,EAAE6V,EAAE,GAAG,OAAOrlB,KAAK2+K,UAAU,GAAGl2K,GAAGA,EAAE4c,EAAE,CAACrlB,KAAKyI,IAAI,GAAG,EAAE4kD,IAAI,WAAW,OAAOrtD,KAAK4+K,YAAY5+K,KAAKuB,aAAa,EAAE+N,KAAKg0J,EAAE7+H,KAAKpf,EAAEof,KAAKl1B,OAAO8V,EAAE9V,QAAQ80J,EAAE6a,OAAO7a,EAAE1kG,GAAGu/G,OAAO,WAAW,IAAI1vK,EAAE6V,EAAE5c,EAAE2iF,EAAErlF,EAAEu0H,EAAExiH,EAAErU,UAAU,IAAI,CAAC,EAAEylC,EAAE,EAAEo6H,EAAE7/J,UAAUC,OAAOo2D,GAAE,EAAG,IAAI,kBAAkBhiD,IAAIgiD,EAAEhiD,EAAEA,EAAErU,UAAUylC,IAAI,CAAC,EAAEA,KAAK,iBAAiBpxB,GAAGC,EAAED,KAAKA,EAAE,CAAC,GAAGoxB,IAAIo6H,IAAIxrJ,EAAE9X,KAAKkpC,KAAKA,EAAEo6H,EAAEp6H,IAAI,GAAG,OAAO15B,EAAE/L,UAAUylC,IAAI,IAAI7jB,KAAK7V,EAAE47E,EAAE57E,EAAE6V,GAAG,cAAcA,GAAGvN,IAAIszE,IAAItxB,GAAGsxB,IAAIi5E,EAAE8a,cAAc/zF,KAAKrlF,EAAE5F,MAAMC,QAAQgrF,MAAM3iF,EAAEqP,EAAEuN,GAAGi1G,EAAEv0H,IAAI5F,MAAMC,QAAQqI,GAAG,GAAG1C,GAAGs+J,EAAE8a,cAAc12K,GAAGA,EAAE,CAAC,EAAE1C,GAAE,EAAG+R,EAAEuN,GAAGg/I,EAAE6a,OAAOplH,EAAEwgE,EAAElvC,SAAI,IAASA,IAAItzE,EAAEuN,GAAG+lE,IAAI,OAAOtzE,CAAC,EAAEusJ,EAAE6a,OAAO,CAACE,QAAQ,UAAUnzI,EAAE1wB,KAAKizB,UAAUY,QAAQ,MAAM,IAAI28H,SAAQ,EAAGnsK,MAAM,SAAS4P,GAAG,MAAM,IAAItO,MAAMsO,EAAE,EAAE6vK,KAAK,WAAW,EAAEF,cAAc,SAAS3vK,GAAG,IAAI6V,EAAE5c,EAAE,SAAS+G,GAAG,oBAAoB8qH,EAAEtnH,KAAKxD,KAAQ6V,EAAE+lE,EAAE57E,MAAK,mBAAmB/G,EAAEogC,EAAE71B,KAAKqS,EAAE,gBAAgBA,EAAE9jB,cAAcuW,EAAE9E,KAAKvK,KAAKqxD,GAAE,EAAEswB,cAAc,SAAS56E,GAAG,IAAI6V,EAAE,IAAIA,KAAK7V,EAAE,OAAM,EAAG,OAAM,CAAE,EAAE8vK,WAAW,SAAS9vK,EAAE6V,EAAE5c,GAAG08J,EAAE31J,EAAE,CAACgvK,MAAMn5J,GAAGA,EAAEm5J,OAAO/1K,EAAE,EAAEkiC,KAAK,SAASn7B,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAE,EAAE,GAAGhrD,EAAE5wB,GAAI,IAAI/G,EAAE+G,EAAE9L,OAAO0nF,EAAE3iF,IAAS,IAAK4c,EAAErS,KAAKxD,EAAE47E,GAAGA,EAAE57E,EAAE47E,IAA5BA,UAA2C,IAAIA,KAAK57E,EAAE,IAAG,IAAK6V,EAAErS,KAAKxD,EAAE47E,GAAGA,EAAE57E,EAAE47E,IAAI,MAAM,OAAO57E,CAAC,EAAE+vK,UAAU,SAAS/vK,EAAE6V,GAAG,IAAI5c,EAAE4c,GAAG,GAAG,OAAO,MAAM7V,IAAI4wB,EAAE/+B,OAAOmO,IAAI60J,EAAE1yB,MAAMlpI,EAAE,iBAAiB+G,EAAE,CAACA,GAAGA,GAAG8zJ,EAAEtwJ,KAAKvK,EAAE+G,IAAI/G,CAAC,EAAE+2K,QAAQ,SAAShwK,EAAE6V,EAAE5c,GAAG,OAAO,MAAM4c,GAAG,EAAEtf,EAAEiN,KAAKqS,EAAE7V,EAAE/G,EAAE,EAAEkpI,MAAM,SAASniI,EAAE6V,GAAG,IAAI,IAAI5c,GAAG4c,EAAE3hB,OAAO0nF,EAAE,EAAErlF,EAAEyJ,EAAE9L,OAAO0nF,EAAE3iF,EAAE2iF,IAAI57E,EAAEzJ,KAAKsf,EAAE+lE,GAAG,OAAO57E,EAAE9L,OAAOqC,EAAEyJ,CAAC,EAAEwvK,KAAK,SAASxvK,EAAE6V,EAAE5c,GAAG,IAAI,IAAI2iF,EAAE,GAAGrlF,EAAE,EAAEu0H,EAAE9qH,EAAE9L,OAAOoU,GAAGrP,EAAE1C,EAAEu0H,EAAEv0H,KAAKsf,EAAE7V,EAAEzJ,GAAGA,KAAK+R,GAAGszE,EAAE97E,KAAKE,EAAEzJ,IAAI,OAAOqlF,CAAC,EAAE1tD,IAAI,SAASluB,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAE,EAAExiH,EAAE,GAAG,GAAGsoB,EAAE5wB,GAAG,IAAI47E,EAAE57E,EAAE9L,OAAO42H,EAAElvC,EAAEkvC,IAAI,OAAOv0H,EAAEsf,EAAE7V,EAAE8qH,GAAGA,EAAE7xH,KAAKqP,EAAExI,KAAKvJ,QAAQ,IAAIu0H,KAAK9qH,EAAE,OAAOzJ,EAAEsf,EAAE7V,EAAE8qH,GAAGA,EAAE7xH,KAAKqP,EAAExI,KAAKvJ,GAAG,OAAO2d,EAAE5L,EAAE,EAAE2nK,KAAK,EAAEC,QAAQrzJ,IAAI,mBAAmByN,SAASuqI,EAAE1kG,GAAG7lC,OAAOkpC,UAAU39C,EAAEyU,OAAOkpC,WAAWqhG,EAAE15H,KAAK,uEAAuEhkB,MAAM,MAAK,SAASnX,EAAE6V,GAAG5c,EAAE,WAAW4c,EAAE,KAAKA,EAAE2iC,aAAa,IAAG,IAAI9zB,EAAE,SAASzrB,GAAG,IAAI+G,EAAE0kB,EAAE0U,EAAE0xF,EAAEv0H,EAAEg+J,EAAE93H,EAAE63H,EAAE/5H,EAAEu5H,EAAExpG,EAAEqrG,EAAEC,EAAEttJ,EAAEusJ,EAAE3gJ,EAAEwlB,EAAET,EAAEI,EAAEq7H,EAAE,SAAS,EAAE,IAAIpoJ,KAAKskB,EAAE33B,EAAE0xB,SAAS8rI,EAAE,EAAE76E,EAAE,EAAE/+D,EAAEszJ,KAAK5nK,EAAE4nK,KAAKnb,EAAEmb,KAAK9kI,EAAE8kI,KAAKla,EAAE,SAASj2J,EAAE6V,GAAG,OAAO7V,IAAI6V,IAAIy0C,GAAE,GAAI,CAAC,EAAE4rG,EAAE,CAAC,EAAE7lJ,eAAewF,EAAE,GAAGgkB,EAAEhkB,EAAEuuC,IAAIgS,EAAEvgD,EAAE/V,KAAKs1J,EAAEv/I,EAAE/V,KAAK+1J,EAAEhgJ,EAAEhlB,MAAMilK,EAAE,SAAS91J,EAAE6V,GAAG,IAAI,IAAI5c,EAAE,EAAE2iF,EAAE57E,EAAE9L,OAAO+E,EAAE2iF,EAAE3iF,IAAI,GAAG+G,EAAE/G,KAAK4c,EAAE,OAAO5c,EAAE,OAAO,CAAC,EAAE07J,EAAE,6HAA6HG,EAAE,sBAAsBwB,EAAE,0BAA0BxB,EAAE,0CAA0CF,EAAE,MAAME,EAAE,KAAKwB,EAAE,OAAOxB,EAAE,gBAAgBA,EAAE,2DAA2DwB,EAAE,OAAOxB,EAAE,OAAOkB,EAAE,KAAKM,EAAE,wFAAwF1B,EAAE,eAAeyB,EAAE,IAAIl0E,OAAO2yE,EAAE,IAAI,KAAK55H,EAAE,IAAIinD,OAAO,IAAI2yE,EAAE,8BAA8BA,EAAE,KAAK,KAAK6B,EAAE,IAAIx0E,OAAO,IAAI2yE,EAAE,KAAKA,EAAE,KAAK15H,EAAE,IAAI+mD,OAAO,IAAI2yE,EAAE,WAAWA,EAAE,IAAIA,EAAE,KAAKsB,EAAE,IAAIj0E,OAAO2yE,EAAE,MAAMoC,EAAE,IAAI/0E,OAAO6zE,GAAGY,EAAE,IAAIz0E,OAAO,IAAIm0E,EAAE,KAAKW,EAAE,CAACmZ,GAAG,IAAIjuF,OAAO,MAAMm0E,EAAE,KAAK+Z,MAAM,IAAIluF,OAAO,QAAQm0E,EAAE,KAAKga,IAAI,IAAInuF,OAAO,KAAKm0E,EAAE,SAASia,KAAK,IAAIpuF,OAAO,IAAIyyE,GAAG4b,OAAO,IAAIruF,OAAO,IAAI6zE,GAAGya,MAAM,IAAItuF,OAAO,yDAAyD2yE,EAAE,+BAA+BA,EAAE,cAAcA,EAAE,aAAaA,EAAE,SAAS,KAAK38F,KAAK,IAAIgqB,OAAO,OAAOwyE,EAAE,KAAK,KAAK+b,aAAa,IAAIvuF,OAAO,IAAI2yE,EAAE,mDAAmDA,EAAE,mBAAmBA,EAAE,mBAAmB,MAAM6b,EAAE,SAASja,EAAE,sCAAsCI,EAAE,SAASD,EAAE,yBAAyBc,EAAE,mCAAmCM,GAAG,OAAOr5E,GAAG,IAAIuD,OAAO,uBAAuB2yE,EAAE,uBAAuB,KAAKiB,GAAG,SAAS/1J,EAAE6V,GAAG,IAAI5c,EAAE,KAAK+G,EAAEnP,MAAM,GAAG,MAAM,OAAOglB,IAAI5c,EAAE,EAAEijD,OAAOi5G,aAAal8J,EAAE,OAAOijD,OAAOi5G,aAAal8J,GAAG,GAAG,MAAM,KAAKA,EAAE,OAAO,EAAEk/J,GAAG,sDAAsDoO,GAAG,SAASvmK,EAAE6V,GAAG,OAAOA,EAAE,OAAO7V,EAAE,IAASA,EAAEnP,MAAM,GAAG,GAAG,KAAKmP,EAAE06B,WAAW16B,EAAE9L,OAAO,GAAG2rC,SAAS,IAAI,IAAI,KAAK7/B,CAAC,EAAE4wK,GAAG,WAAWjb,GAAG,EAAEoD,GAAG8X,IAAG,SAAS7wK,GAAG,OAAM,IAAKA,EAAE8jE,UAAU,aAAa9jE,EAAEm0C,SAASqE,aAAa,GAAE,CAACs4H,IAAI,aAAa/zJ,KAAK,WAAW,IAAIq4I,EAAEryJ,MAAM8S,EAAEggJ,EAAEryJ,KAAKotB,EAAEmgJ,YAAYngJ,EAAEmgJ,YAAYl7J,EAAE+a,EAAEmgJ,WAAW78K,QAAQ66K,QAAQ,CAAC,MAAM/uK,GAAGo1J,EAAE,CAACryJ,MAAM8S,EAAE3hB,OAAO,SAAS8L,EAAE6V,GAAGugD,EAAErzD,MAAM/C,EAAE61J,EAAEryJ,KAAKqS,GAAG,EAAE,SAAS7V,EAAE6V,GAAsB,IAAnB,IAAI5c,EAAE+G,EAAE9L,OAAO0nF,EAAE,EAAQ57E,EAAE/G,KAAK4c,EAAE+lE,OAAM57E,EAAE9L,OAAO+E,EAAE,CAAC,EAAE,CAAC,SAAS+3K,GAAGn7J,EAAE7V,EAAE/G,EAAE2iF,GAAG,IAAIrlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAErxB,EAAEwD,EAAEz8B,GAAGA,EAAEixK,cAAcrgJ,EAAE5wB,EAAEA,EAAE+uK,SAAS,EAAE,GAAG91K,EAAEA,GAAG,GAAG,iBAAiB4c,IAAIA,GAAG,IAAI+a,GAAG,IAAIA,GAAG,KAAKA,EAAE,OAAO33B,EAAE,IAAI2iF,IAAI+5E,EAAE31J,GAAGA,EAAEA,GAAG41J,EAAEf,GAAG,CAAC,GAAG,KAAKjkI,IAAIkjI,EAAE6D,EAAEjnF,KAAK76D,IAAI,GAAGtf,EAAEu9J,EAAE,IAAI,GAAG,IAAIljI,EAAE,CAAC,KAAKtoB,EAAEtI,EAAEkxK,eAAe36K,IAAI,OAAO0C,EAAE,GAAGqP,EAAE+N,KAAK9f,EAAE,OAAO0C,EAAE6G,KAAKwI,GAAGrP,CAAC,MAAM,GAAGwjC,IAAIn0B,EAAEm0B,EAAEy0I,eAAe36K,KAAK8iC,EAAEr5B,EAAEsI,IAAIA,EAAE+N,KAAK9f,EAAE,OAAO0C,EAAE6G,KAAKwI,GAAGrP,MAAM,CAAC,GAAG66J,EAAE,GAAG,OAAOsB,EAAEryJ,MAAM9J,EAAE+G,EAAE43C,qBAAqB/hC,IAAI5c,EAAE,IAAI1C,EAAEu9J,EAAE,KAAKpvI,EAAEysJ,wBAAwBnxK,EAAEmxK,uBAAuB,OAAO/b,EAAEryJ,MAAM9J,EAAE+G,EAAEmxK,uBAAuB56K,IAAI0C,CAAC,CAAC,GAAGyrB,EAAE0sJ,MAAM/lI,EAAEx1B,EAAE,QAAQ3B,IAAIA,EAAEvZ,KAAKkb,MAAM,IAAI+a,GAAG,WAAW5wB,EAAEm0C,SAASqE,eAAe,CAAC,GAAGvf,EAAEpjB,EAAE4mB,EAAEz8B,EAAE,IAAI4wB,IAAIwlI,EAAEz7J,KAAKkb,IAAIulB,EAAEzgC,KAAKkb,IAAI,CAA4I,KAA1I4mB,EAAEw7H,GAAGt9J,KAAKkb,IAAIw7J,GAAGrxK,EAAE26J,aAAa36J,KAAKA,GAAG0kB,EAAE4sJ,SAAS53I,EAAE15B,EAAEs7B,aAAa,OAAO5B,EAAEA,EAAEkG,QAAQu4H,GAAGoO,IAAIvmK,EAAEouD,aAAa,KAAK10B,EAAEg7H,IAAI5pC,GAAGxgE,EAAEiqG,EAAE1+I,IAAI3hB,OAAa42H,KAAIxgE,EAAEwgE,IAAIpxF,EAAE,IAAIA,EAAE,UAAU,IAAI63I,GAAGjnH,EAAEwgE,IAAI7xF,EAAEqxB,EAAEt5D,KAAK,IAAI,CAAC,IAAI,OAAOokK,EAAEryJ,MAAM9J,EAAEwjC,EAAE+0I,iBAAiBv4I,IAAIhgC,CAAC,CAAC,MAAM+G,GAAGqrC,EAAEx1B,GAAE,EAAG,CAAC,QAAQ6jB,IAAIg7H,GAAG10J,EAAEyxK,gBAAgB,KAAK,CAAC,CAAC,CAAC,OAAOnd,EAAEz+I,EAAE+pB,QAAQ1E,EAAE,MAAMl7B,EAAE/G,EAAE2iF,EAAE,CAAC,SAASu0F,KAAK,IAAIv0F,EAAE,GAAG,OAAO,SAAS57E,EAAE6V,EAAE5c,GAAG,OAAO2iF,EAAE97E,KAAK+V,EAAE,KAAKujB,EAAEs4I,oBAAoB1xK,EAAE47E,EAAEr5C,SAASviC,EAAE6V,EAAE,KAAK5c,CAAC,CAAC,CAAC,SAAS04K,GAAG3xK,GAAG,OAAOA,EAAE00J,IAAG,EAAG10J,CAAC,CAAC,SAAS4xK,GAAG5xK,GAAG,IAAI6V,EAAE+/I,EAAEzqE,cAAc,YAAY,IAAI,QAAQnrF,EAAE6V,EAAE,CAAC,MAAM7V,GAAG,OAAM,CAAE,CAAC,QAAQ6V,EAAE8kJ,YAAY9kJ,EAAE8kJ,WAAW3pC,YAAYn7G,GAAGA,EAAE,IAAI,CAAC,CAAC,SAASg8J,GAAG7xK,EAAE6V,GAAiC,IAA9B,IAAI5c,EAAE+G,EAAEmX,MAAM,KAAKykE,EAAE3iF,EAAE/E,OAAa0nF,KAAIxiD,EAAE04I,WAAW74K,EAAE2iF,IAAI/lE,CAAC,CAAC,SAASk8J,GAAG/xK,EAAE6V,GAAG,IAAI5c,EAAE4c,GAAG7V,EAAE47E,EAAE3iF,GAAG,IAAI+G,EAAE+uK,UAAU,IAAIl5J,EAAEk5J,UAAU/uK,EAAEm6G,YAAYtkG,EAAEskG,YAAY,GAAGv+B,EAAE,OAAOA,EAAE,GAAG3iF,EAAE,KAAMA,EAAEA,EAAE+4K,gBAAe/4K,IAAI4c,EAAE,OAAO,EAAE,OAAO7V,EAAE,GAAG,CAAC,CAAC,SAASiyK,GAAGp8J,GAAG,OAAO,SAAS7V,GAAG,MAAM,UAAUA,EAAEm0C,SAASqE,eAAex4C,EAAEpM,OAAOiiB,CAAC,CAAC,CAAC,SAASq8J,GAAGj5K,GAAG,OAAO,SAAS+G,GAAG,IAAI6V,EAAE7V,EAAEm0C,SAASqE,cAAc,OAAO,UAAU3iC,GAAG,WAAWA,IAAI7V,EAAEpM,OAAOqF,CAAC,CAAC,CAAC,SAASk5K,GAAGt8J,GAAG,OAAO,SAAS7V,GAAG,MAAM,SAASA,EAAEA,EAAE26J,aAAY,IAAK36J,EAAE8jE,SAAS,UAAU9jE,EAAE,UAAUA,EAAE26J,WAAW36J,EAAE26J,WAAW72F,WAAWjuD,EAAE7V,EAAE8jE,WAAWjuD,EAAE7V,EAAEoyK,aAAav8J,GAAG7V,EAAEoyK,cAAcv8J,GAAGkjJ,GAAG/4J,KAAK6V,EAAE7V,EAAE8jE,WAAWjuD,EAAE,UAAU7V,GAAGA,EAAE8jE,WAAWjuD,CAAC,CAAC,CAAC,SAASw8J,GAAG/pK,GAAG,OAAOqpK,IAAG,SAAS7mD,GAAG,OAAOA,GAAGA,EAAE6mD,IAAG,SAAS3xK,EAAE6V,GAAuC,IAApC,IAAI5c,EAAE2iF,EAAEtzE,EAAE,GAAGtI,EAAE9L,OAAO42H,GAAGv0H,EAAEqlF,EAAE1nF,OAAaqC,KAAIyJ,EAAE/G,EAAE2iF,EAAErlF,MAAMyJ,EAAE/G,KAAK4c,EAAE5c,GAAG+G,EAAE/G,IAAI,GAAE,GAAE,CAAC,SAASo4K,GAAGrxK,GAAG,OAAOA,QAAG,IAAoBA,EAAE43C,sBAAsB53C,CAAC,CAAC,IAAIA,KAAK0kB,EAAEssJ,GAAGd,QAAQ,CAAC,EAAE35K,EAAEy6K,GAAGsB,MAAM,SAAStyK,GAAG,IAAI6V,EAAE7V,GAAGA,EAAEuyK,aAAat5K,EAAE+G,IAAIA,EAAEixK,eAAejxK,GAAGwyK,gBAAgB,OAAO7B,EAAEh2K,KAAKkb,GAAG5c,GAAGA,EAAEk7C,UAAU,OAAO,EAAEwhH,EAAEqb,GAAGyB,YAAY,SAASzyK,GAAG,IAAI6V,EAAE5c,EAAE2iF,EAAE57E,EAAEA,EAAEixK,eAAejxK,EAAE4wB,EAAE,OAAOgrD,GAAGg6E,GAAG,IAAIh6E,EAAEmzF,UAAUnzF,EAAE42F,kBAAkBlqK,GAAGstJ,EAAEh6E,GAAG42F,gBAAgB3d,GAAGt+J,EAAEq/J,GAAGhlI,GAAGglI,IAAI38J,EAAE28J,EAAE8c,cAAcz5K,EAAE05K,MAAM15K,IAAIA,EAAEgD,iBAAiBhD,EAAEgD,iBAAiB,SAAS20K,IAAG,GAAI33K,EAAEm3C,aAAan3C,EAAEm3C,YAAY,WAAWwgI,KAAKlsJ,EAAE4sJ,MAAMM,IAAG,SAAS5xK,GAAG,OAAOsI,EAAEu2C,YAAY7+C,GAAG6+C,YAAY+2G,EAAEzqE,cAAc,aAAQ,IAAoBnrF,EAAEwxK,mBAAmBxxK,EAAEwxK,iBAAiB,uBAAuBt9K,MAAM,IAAGwwB,EAAEhxB,WAAWk+K,IAAG,SAAS5xK,GAAG,OAAOA,EAAE4yK,UAAU,KAAK5yK,EAAEs7B,aAAa,YAAY,IAAG5W,EAAEkzB,qBAAqBg6H,IAAG,SAAS5xK,GAAG,OAAOA,EAAE6+C,YAAY+2G,EAAEid,cAAc,MAAM7yK,EAAE43C,qBAAqB,KAAK1jD,MAAM,IAAGwwB,EAAEysJ,uBAAuBta,EAAEl8J,KAAKi7J,EAAEub,wBAAwBzsJ,EAAEouJ,QAAQlB,IAAG,SAAS5xK,GAAG,OAAOsI,EAAEu2C,YAAY7+C,GAAGqW,GAAGq+I,GAAGkB,EAAEmd,oBAAoBnd,EAAEmd,kBAAkBre,GAAGxgK,MAAM,IAAGwwB,EAAEouJ,SAAS15I,EAAE3wB,OAAO2nK,GAAG,SAASpwK,GAAG,IAAI6V,EAAE7V,EAAE4/B,QAAQg/C,GAAGm3E,IAAI,OAAO,SAAS/1J,GAAG,OAAOA,EAAEs7B,aAAa,QAAQzlB,CAAC,CAAC,EAAEujB,EAAE3U,KAAK2rJ,GAAG,SAASpwK,EAAE6V,GAAG,QAAG,IAAoBA,EAAEq7J,gBAAgBrc,EAAE,CAAC,IAAI57J,EAAE4c,EAAEq7J,eAAelxK,GAAG,OAAO/G,EAAE,CAACA,GAAG,EAAE,CAAC,IAAImgC,EAAE3wB,OAAO2nK,GAAG,SAASpwK,GAAG,IAAI/G,EAAE+G,EAAE4/B,QAAQg/C,GAAGm3E,IAAI,OAAO,SAAS/1J,GAAG,IAAI6V,OAAE,IAAoB7V,EAAEgzK,kBAAkBhzK,EAAEgzK,iBAAiB,MAAM,OAAOn9J,GAAGA,EAAE1d,QAAQc,CAAC,CAAC,EAAEmgC,EAAE3U,KAAK2rJ,GAAG,SAASpwK,EAAE6V,GAAG,QAAG,IAAoBA,EAAEq7J,gBAAgBrc,EAAE,CAAC,IAAI57J,EAAE2iF,EAAErlF,EAAEu0H,EAAEj1G,EAAEq7J,eAAelxK,GAAG,GAAG8qH,EAAE,CAAC,IAAI7xH,EAAE6xH,EAAEkoD,iBAAiB,QAAQ/5K,EAAEd,QAAQ6H,EAAE,MAAM,CAAC8qH,GAAgC,IAA7Bv0H,EAAEsf,EAAEk9J,kBAAkB/yK,GAAG47E,EAAE,EAAQkvC,EAAEv0H,EAAEqlF,UAAS3iF,EAAE6xH,EAAEkoD,iBAAiB,QAAQ/5K,EAAEd,QAAQ6H,EAAE,MAAM,CAAC8qH,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG1xF,EAAE3U,KAAK6rJ,IAAI5rJ,EAAEkzB,qBAAqB,SAAS53C,EAAE6V,GAAG,YAAM,IAAoBA,EAAE+hC,qBAAqB/hC,EAAE+hC,qBAAqB53C,GAAG0kB,EAAE0sJ,IAAIv7J,EAAE27J,iBAAiBxxK,QAAG,CAAM,EAAE,SAASA,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAE,GAAGrlF,EAAE,EAAEu0H,EAAEj1G,EAAE+hC,qBAAqB53C,GAAG,GAAG,MAAMA,EAAE,CAAC,KAAM/G,EAAE6xH,EAAEv0H,MAAK,IAAI0C,EAAE81K,UAAUnzF,EAAE97E,KAAK7G,GAAG,OAAO2iF,CAAC,CAAC,OAAOkvC,CAAC,EAAE1xF,EAAE3U,KAAK4rJ,MAAM3rJ,EAAEysJ,wBAAwB,SAASnxK,EAAE6V,GAAG,QAAG,IAAoBA,EAAEs7J,wBAAwBtc,EAAE,OAAOh/I,EAAEs7J,uBAAuBnxK,EAAE,EAAE05B,EAAE,GAAGxlB,EAAE,IAAIwQ,EAAE0sJ,IAAIva,EAAEl8J,KAAKi7J,EAAE4b,qBAAqBI,IAAG,SAAS5xK,GAAG,IAAI6V,EAAEvN,EAAEu2C,YAAY7+C,GAAGu4C,UAAU,UAAUm8G,EAAE,qBAAqBA,EAAE,kEAAkE10J,EAAEwxK,iBAAiB,wBAAwBt9K,QAAQggB,EAAEpU,KAAK,SAASg1J,EAAE,gBAAgB90J,EAAEwxK,iBAAiB,cAAct9K,QAAQggB,EAAEpU,KAAK,MAAMg1J,EAAE,aAAaH,EAAE,KAAK30J,EAAEwxK,iBAAiB,QAAQ9c,EAAE,MAAMxgK,QAAQggB,EAAEpU,KAAK,OAAO+V,EAAE+/I,EAAEzqE,cAAc,UAAU/8B,aAAa,OAAO,IAAIpuD,EAAE6+C,YAAYhpC,GAAG7V,EAAEwxK,iBAAiB,aAAat9K,QAAQggB,EAAEpU,KAAK,MAAMg1J,EAAE,QAAQA,EAAE,KAAKA,EAAE,gBAAgB90J,EAAEwxK,iBAAiB,YAAYt9K,QAAQggB,EAAEpU,KAAK,YAAYE,EAAEwxK,iBAAiB,KAAK9c,EAAE,MAAMxgK,QAAQggB,EAAEpU,KAAK,YAAYE,EAAEwxK,iBAAiB,QAAQt9J,EAAEpU,KAAK,cAAc,IAAG8xK,IAAG,SAAS5xK,GAAGA,EAAEu4C,UAAU,oFAAoF,IAAI1iC,EAAE+/I,EAAEzqE,cAAc,SAASt1E,EAAEu4C,aAAa,OAAO,UAAUpuD,EAAE6+C,YAAYhpC,GAAGu4C,aAAa,OAAO,KAAKpuD,EAAEwxK,iBAAiB,YAAYt9K,QAAQggB,EAAEpU,KAAK,OAAOg1J,EAAE,eAAe,IAAI90J,EAAEwxK,iBAAiB,YAAYt9K,QAAQggB,EAAEpU,KAAK,WAAW,aAAawI,EAAEu2C,YAAY7+C,GAAG8jE,UAAS,EAAG,IAAI9jE,EAAEwxK,iBAAiB,aAAat9K,QAAQggB,EAAEpU,KAAK,WAAW,aAAaE,EAAEwxK,iBAAiB,QAAQt9J,EAAEpU,KAAK,OAAO,MAAK4kB,EAAEuuJ,gBAAgBpc,EAAEl8J,KAAKs+B,EAAE3wB,EAAEpN,SAASoN,EAAE4qK,uBAAuB5qK,EAAE6qK,oBAAoB7qK,EAAE8qK,kBAAkB9qK,EAAE+qK,qBAAqBzB,IAAG,SAAS5xK,GAAG0kB,EAAE4uJ,kBAAkBr6I,EAAEz1B,KAAKxD,EAAE,KAAKi5B,EAAEz1B,KAAKxD,EAAE,aAAa05B,EAAE55B,KAAK,KAAKk2J,EAAE,IAAG9hJ,EAAEA,EAAEhgB,QAAQ,IAAIiuF,OAAOjuE,EAAEljB,KAAK,MAAM0oC,EAAEA,EAAExlC,QAAQ,IAAIiuF,OAAOzoD,EAAE1oC,KAAK,MAAM6kB,EAAEghJ,EAAEl8J,KAAK2N,EAAEirK,yBAAyBl6I,EAAExjB,GAAGghJ,EAAEl8J,KAAK2N,EAAEkrK,UAAU,SAASxzK,EAAE6V,GAAG,IAAI5c,EAAE,IAAI+G,EAAE+uK,SAAS/uK,EAAEwyK,gBAAgBxyK,EAAE47E,EAAE/lE,GAAGA,EAAE8kJ,WAAW,OAAO36J,IAAI47E,MAAMA,GAAG,IAAIA,EAAEmzF,YAAY91K,EAAEu6K,SAASv6K,EAAEu6K,SAAS53F,GAAG57E,EAAEuzK,yBAAyB,GAAGvzK,EAAEuzK,wBAAwB33F,IAAI,EAAE,SAAS57E,EAAE6V,GAAG,GAAGA,EAAE,KAAMA,EAAEA,EAAE8kJ,eAAc9kJ,IAAI7V,EAAE,OAAM,EAAG,OAAM,CAAE,EAAEi2J,EAAEpgJ,EAAE,SAAS7V,EAAE6V,GAAG,GAAG7V,IAAI6V,EAAE,OAAOy0C,GAAE,EAAG,EAAE,IAAIrxD,GAAG+G,EAAEuzK,yBAAyB19J,EAAE09J,wBAAwB,OAAOt6K,IAAI,GAAGA,GAAG+G,EAAEixK,eAAejxK,KAAK6V,EAAEo7J,eAAep7J,GAAG7V,EAAEuzK,wBAAwB19J,GAAG,KAAK6O,EAAE+uJ,cAAc59J,EAAE09J,wBAAwBvzK,KAAK/G,EAAE+G,GAAG41J,GAAG51J,EAAEixK,eAAergJ,GAAGyI,EAAEzI,EAAE5wB,IAAI,EAAE6V,GAAG+/I,GAAG//I,EAAEo7J,eAAergJ,GAAGyI,EAAEzI,EAAE/a,GAAG,EAAEi+I,EAAEgC,EAAEhC,EAAE9zJ,GAAG81J,EAAEhC,EAAEj+I,GAAG,EAAE,EAAE5c,GAAG,EAAE,EAAE,EAAE,SAAS+G,EAAE6V,GAAG,GAAG7V,IAAI6V,EAAE,OAAOy0C,GAAE,EAAG,EAAE,IAAIrxD,EAAE2iF,EAAE,EAAErlF,EAAEyJ,EAAE26J,WAAW7vC,EAAEj1G,EAAE8kJ,WAAWryJ,EAAE,CAACtI,GAAG05B,EAAE,CAAC7jB,GAAG,IAAItf,IAAIu0H,EAAE,OAAO9qH,GAAG41J,GAAG,EAAE//I,GAAG+/I,EAAE,EAAEr/J,GAAG,EAAEu0H,EAAE,EAAEgpC,EAAEgC,EAAEhC,EAAE9zJ,GAAG81J,EAAEhC,EAAEj+I,GAAG,EAAE,GAAGtf,IAAIu0H,EAAE,OAAOinD,GAAG/xK,EAAE6V,GAAO,IAAJ5c,EAAE+G,EAAQ/G,EAAEA,EAAE0hK,YAAWryJ,EAAE4gD,QAAQjwD,GAAO,IAAJA,EAAE4c,EAAQ5c,EAAEA,EAAE0hK,YAAWjhI,EAAEwvB,QAAQjwD,GAAG,KAAMqP,EAAEszE,KAAKliD,EAAEkiD,IAAGA,IAAI,OAAOA,EAAEm2F,GAAGzpK,EAAEszE,GAAGliD,EAAEkiD,IAAItzE,EAAEszE,IAAIhrD,GAAG,EAAE8I,EAAEkiD,IAAIhrD,EAAE,EAAE,CAAC,GAAGglI,CAAC,EAAEob,GAAG91K,QAAQ,SAAS8E,EAAE6V,GAAG,OAAOm7J,GAAGhxK,EAAE,KAAK,KAAK6V,EAAE,EAAEm7J,GAAGiC,gBAAgB,SAASjzK,EAAE6V,GAAG,GAAG8/I,EAAE31J,GAAG0kB,EAAEuuJ,iBAAiBpe,IAAIxpH,EAAEx1B,EAAE,QAAQ6jB,IAAIA,EAAE/+B,KAAKkb,OAAO3B,IAAIA,EAAEvZ,KAAKkb,IAAI,IAAI,IAAI5c,EAAEggC,EAAEz1B,KAAKxD,EAAE6V,GAAG,GAAG5c,GAAGyrB,EAAE4uJ,mBAAmBtzK,EAAE2qB,UAAU,KAAK3qB,EAAE2qB,SAASokJ,SAAS,OAAO91K,CAAC,CAAC,MAAM+G,GAAGqrC,EAAEx1B,GAAE,EAAG,CAAC,OAAO,EAAEm7J,GAAGn7J,EAAE+/I,EAAE,KAAK,CAAC51J,IAAI9L,MAAM,EAAE88K,GAAGwC,SAAS,SAASxzK,EAAE6V,GAAG,OAAO7V,EAAEixK,eAAejxK,IAAI41J,GAAGD,EAAE31J,GAAGq5B,EAAEr5B,EAAE6V,EAAE,EAAEm7J,GAAG9/H,KAAK,SAASlxC,EAAE6V,IAAI7V,EAAEixK,eAAejxK,IAAI41J,GAAGD,EAAE31J,GAAG,IAAI/G,EAAEmgC,EAAE04I,WAAWj8J,EAAE2iC,eAAeojC,EAAE3iF,GAAGi9J,EAAE1yJ,KAAK41B,EAAE04I,WAAWj8J,EAAE2iC,eAAev/C,EAAE+G,EAAE6V,GAAGg/I,QAAG,EAAO,YAAO,IAASj5E,EAAEA,EAAEl3D,EAAEhxB,aAAamhK,EAAE70J,EAAEs7B,aAAazlB,IAAI+lE,EAAE57E,EAAEgzK,iBAAiBn9J,KAAK+lE,EAAE83F,UAAU93F,EAAEzjF,MAAM,IAAI,EAAE64K,GAAG2C,OAAO,SAAS3zK,GAAG,OAAOA,EAAE,IAAI4/B,QAAQu4H,GAAGoO,GAAG,EAAEyK,GAAG5gL,MAAM,SAAS4P,GAAG,MAAM,IAAItO,MAAM,0CAA0CsO,EAAE,EAAEgxK,GAAG4C,WAAW,SAAS5zK,GAAG,IAAI6V,EAAE5c,EAAE,GAAG2iF,EAAE,EAAErlF,EAAE,EAAE,GAAG+zD,GAAG5lC,EAAEmvJ,iBAAiB/f,GAAGpvI,EAAEovJ,YAAY9zK,EAAEnP,MAAM,GAAGmP,EAAEi1B,KAAKghI,GAAG3rG,EAAE,CAAC,KAAMz0C,EAAE7V,EAAEzJ,MAAKsf,IAAI7V,EAAEzJ,KAAKqlF,EAAE3iF,EAAE6G,KAAKvJ,IAAI,KAAMqlF,KAAI57E,EAAED,OAAO9G,EAAE2iF,GAAG,EAAE,CAAC,OAAOk4E,EAAE,KAAK9zJ,CAAC,EAAE8qH,EAAEkmD,GAAG+C,QAAQ,SAAS/zK,GAAG,IAAI6V,EAAE5c,EAAE,GAAG2iF,EAAE,EAAErlF,EAAEyJ,EAAE+uK,SAAS,GAAGx4K,GAAG,GAAG,IAAIA,GAAG,IAAIA,GAAG,KAAKA,EAAE,CAAC,GAAG,iBAAiByJ,EAAE63C,YAAY,OAAO73C,EAAE63C,YAAY,IAAI73C,EAAEA,EAAEg0K,WAAWh0K,EAAEA,EAAEA,EAAEgyK,YAAY/4K,GAAG6xH,EAAE9qH,EAAE,MAAM,GAAG,IAAIzJ,GAAG,IAAIA,EAAE,OAAOyJ,EAAEi0K,eAAe,KAAMp+J,EAAE7V,EAAE47E,MAAK3iF,GAAG6xH,EAAEj1G,GAAG,OAAO5c,CAAC,GAAGmgC,EAAE43I,GAAGkD,UAAU,CAACxC,YAAY,GAAGyC,aAAaxC,GAAGh8K,MAAMshK,EAAE6a,WAAW,CAAC,EAAErtJ,KAAK,CAAC,EAAE2vJ,SAAS,CAAC,IAAI,CAACtD,IAAI,aAAap9B,OAAM,GAAI,IAAI,CAACo9B,IAAI,cAAc,IAAI,CAACA,IAAI,kBAAkBp9B,OAAM,GAAI,IAAI,CAACo9B,IAAI,oBAAoBuD,UAAU,CAAC9D,KAAK,SAASvwK,GAAG,OAAOA,EAAE,GAAGA,EAAE,GAAG4/B,QAAQg/C,GAAGm3E,IAAI/1J,EAAE,IAAIA,EAAE,IAAIA,EAAE,IAAIA,EAAE,IAAI,IAAI4/B,QAAQg/C,GAAGm3E,IAAI,OAAO/1J,EAAE,KAAKA,EAAE,GAAG,IAAIA,EAAE,GAAG,KAAKA,EAAEnP,MAAM,EAAE,EAAE,EAAE4/K,MAAM,SAASzwK,GAAG,OAAOA,EAAE,GAAGA,EAAE,GAAGw4C,cAAc,QAAQx4C,EAAE,GAAGnP,MAAM,EAAE,IAAImP,EAAE,IAAIgxK,GAAG5gL,MAAM4P,EAAE,IAAIA,EAAE,KAAKA,EAAE,GAAGA,EAAE,IAAIA,EAAE,IAAI,GAAG,GAAG,SAASA,EAAE,IAAI,QAAQA,EAAE,KAAKA,EAAE,KAAKA,EAAE,GAAGA,EAAE,IAAI,QAAQA,EAAE,KAAKA,EAAE,IAAIgxK,GAAG5gL,MAAM4P,EAAE,IAAIA,CAAC,EAAEwwK,OAAO,SAASxwK,GAAG,IAAI6V,EAAE5c,GAAG+G,EAAE,IAAIA,EAAE,GAAG,OAAOi3J,EAAEwZ,MAAM91K,KAAKqF,EAAE,IAAI,MAAMA,EAAE,GAAGA,EAAE,GAAGA,EAAE,IAAIA,EAAE,IAAI,GAAG/G,GAAGi+J,EAAEv8J,KAAK1B,KAAK4c,EAAE0+I,EAAEt7J,GAAE,MAAO4c,EAAE5c,EAAE7H,QAAQ,IAAI6H,EAAE/E,OAAO2hB,GAAG5c,EAAE/E,UAAU8L,EAAE,GAAGA,EAAE,GAAGnP,MAAM,EAAEglB,GAAG7V,EAAE,GAAG/G,EAAEpI,MAAM,EAAEglB,IAAI7V,EAAEnP,MAAM,EAAE,GAAG,GAAG4X,OAAO,CAAC6nK,IAAI,SAAStwK,GAAG,IAAI6V,EAAE7V,EAAE4/B,QAAQg/C,GAAGm3E,IAAIv9G,cAAc,MAAM,MAAMx4C,EAAE,WAAW,OAAM,CAAE,EAAE,SAASA,GAAG,OAAOA,EAAEm0C,UAAUn0C,EAAEm0C,SAASqE,gBAAgB3iC,CAAC,CAAC,EAAEw6J,MAAM,SAASrwK,GAAG,IAAI6V,EAAEgH,EAAE7c,EAAE,KAAK,OAAO6V,IAAIA,EAAE,IAAIssE,OAAO,MAAM2yE,EAAE,IAAI90J,EAAE,IAAI80J,EAAE,SAASj4I,EAAE7c,GAAE,SAASA,GAAG,OAAO6V,EAAElb,KAAK,iBAAiBqF,EAAE4yK,WAAW5yK,EAAE4yK,gBAAW,IAAoB5yK,EAAEs7B,cAAct7B,EAAEs7B,aAAa,UAAU,GAAG,GAAE,EAAEi1I,KAAK,SAASt3K,EAAE2iF,EAAErlF,GAAG,OAAO,SAASyJ,GAAG,IAAI6V,EAAEm7J,GAAG9/H,KAAKlxC,EAAE/G,GAAG,OAAO,MAAM4c,EAAE,OAAO+lE,GAAGA,IAAI/lE,GAAG,GAAG,MAAM+lE,EAAE/lE,IAAItf,EAAE,OAAOqlF,EAAE/lE,IAAItf,EAAE,OAAOqlF,EAAErlF,GAAG,IAAIsf,EAAEzkB,QAAQmF,GAAG,OAAOqlF,EAAErlF,IAAI,EAAEsf,EAAEzkB,QAAQmF,GAAG,OAAOqlF,EAAErlF,GAAGsf,EAAEhlB,OAAO0F,EAAErC,UAAUqC,EAAE,OAAOqlF,GAAG,GAAG,IAAI/lE,EAAE+pB,QAAQy2H,EAAE,KAAK,KAAKjlK,QAAQmF,GAAG,OAAOqlF,IAAI/lE,IAAItf,GAAGsf,EAAEhlB,MAAM,EAAE0F,EAAErC,OAAO,KAAKqC,EAAE,KAAK,CAAC,EAAEk6K,MAAM,SAASlc,EAAEv0J,EAAE6V,EAAEy+I,EAAEpgJ,GAAG,IAAImlB,EAAE,QAAQk7H,EAAE1jK,MAAM,EAAE,GAAGgsB,EAAE,SAAS03I,EAAE1jK,OAAO,GAAG0X,EAAE,YAAYvI,EAAE,OAAO,IAAIs0J,GAAG,IAAIpgJ,EAAE,SAASlU,GAAG,QAAQA,EAAE26J,UAAU,EAAE,SAAS36J,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAEjxB,IAAIxc,EAAE,cAAc,kBAAkBoc,EAAEj5B,EAAE26J,WAAWl+H,EAAEl0B,GAAGvI,EAAEm0C,SAASqE,cAAc5nB,GAAG33B,IAAIsP,EAAEmc,GAAE,EAAG,GAAGuU,EAAE,CAAC,GAAGI,EAAE,CAAC,KAAMixB,GAAE,CAAK,IAAJhiD,EAAEtI,EAAQsI,EAAEA,EAAEgiD,OAAM/hD,EAAED,EAAE6rC,SAASqE,gBAAgB/b,EAAE,IAAIn0B,EAAEymK,SAAS,OAAM,EAAGjb,EAAExpG,EAAE,SAASiqG,IAAIT,GAAG,aAAa,CAAC,OAAM,CAAE,CAAC,GAAGA,EAAE,CAACj3I,EAAEoc,EAAE+6I,WAAW/6I,EAAEq7I,WAAWz3J,GAAG+T,GAAwH,IAArHlM,GAAGgV,GAAGkiD,GAAGrlF,GAAGu0H,GAAGxiH,EAAE2wB,GAAGy7H,KAAKpsJ,EAAEosJ,GAAG,CAAC,IAAIpsJ,EAAEisK,YAAYzpD,EAAExiH,EAAEisK,UAAU,CAAC,IAAIhgB,IAAI,IAAI,KAAKkC,GAAG76E,EAAE,KAAKA,EAAE,GAAGtzE,EAAEoxB,GAAGT,EAAE83I,WAAWr3I,GAASpxB,IAAIoxB,GAAGpxB,GAAGA,EAAEgiD,KAAK5lC,EAAEgV,EAAE,IAAIo6H,EAAE1vG,UAAS,IAAI97C,EAAEymK,YAAYrqJ,GAAGpc,IAAItI,EAAE,CAACzJ,EAAEg+J,GAAG,CAACkC,EAAE/8H,EAAEhV,GAAG,KAAK,OAAO,GAAGkM,IAAIlM,EAAEgV,GAAGkiD,GAAGrlF,GAAGu0H,GAAGxiH,EAAEtI,GAAG00J,KAAKpsJ,EAAEosJ,GAAG,CAAC,IAAIpsJ,EAAEisK,YAAYzpD,EAAExiH,EAAEisK,UAAU,CAAC,IAAIhgB,IAAI,IAAI,KAAKkC,GAAG76E,EAAE,KAAI,IAAKl3D,EAAE,MAAMpc,IAAIoxB,GAAGpxB,GAAGA,EAAEgiD,KAAK5lC,EAAEgV,EAAE,IAAIo6H,EAAE1vG,UAAU77C,EAAED,EAAE6rC,SAASqE,gBAAgB/b,EAAE,IAAIn0B,EAAEymK,cAAarqJ,IAAIkM,KAAKr6B,GAAGu0H,EAAExiH,EAAEosJ,KAAKpsJ,EAAEosJ,GAAG,CAAC,IAAIpsJ,EAAEisK,YAAYzpD,EAAExiH,EAAEisK,UAAU,CAAC,IAAIhgB,GAAG,CAACkC,EAAE/xI,IAAIpc,IAAItI,MAAS,OAAO0kB,GAAGxQ,KAAKogJ,GAAG5vI,EAAE4vI,GAAG,GAAG,GAAG5vI,EAAE4vI,CAAC,CAAC,CAAC,EAAEkc,OAAO,SAASxwK,EAAE8qH,GAAG,IAAIj1G,EAAEvN,EAAE8wB,EAAEo7I,QAAQx0K,IAAIo5B,EAAEq7I,WAAWz0K,EAAEw4C,gBAAgBw4H,GAAG5gL,MAAM,uBAAuB4P,GAAG,OAAOsI,EAAEosJ,GAAGpsJ,EAAEwiH,GAAG,EAAExiH,EAAEpU,QAAQ2hB,EAAE,CAAC7V,EAAEA,EAAE,GAAG8qH,GAAG1xF,EAAEq7I,WAAWpkK,eAAerQ,EAAEw4C,eAAem5H,IAAG,SAAS3xK,EAAE6V,GAA6B,IAA1B,IAAI5c,EAAE2iF,EAAEtzE,EAAEtI,EAAE8qH,GAAGv0H,EAAEqlF,EAAE1nF,OAAaqC,KAAIyJ,EAAE/G,EAAE68J,EAAE91J,EAAE47E,EAAErlF,OAAOsf,EAAE5c,GAAG2iF,EAAErlF,GAAG,IAAG,SAASyJ,GAAG,OAAOsI,EAAEtI,EAAE,EAAE6V,EAAE,GAAGvN,CAAC,GAAGksK,QAAQ,CAACE,IAAI/C,IAAG,SAAS3xK,GAAG,IAAI47E,EAAE,GAAGrlF,EAAE,GAAGmjC,EAAE+C,EAAEz8B,EAAE4/B,QAAQ1E,EAAE,OAAO,OAAOxB,EAAEg7H,GAAGid,IAAG,SAAS3xK,EAAE6V,EAAE5c,EAAE2iF,GAAqC,IAAlC,IAAIrlF,EAAEu0H,EAAEpxF,EAAE15B,EAAE,KAAK47E,EAAE,IAAItzE,EAAEtI,EAAE9L,OAAaoU,MAAK/R,EAAEu0H,EAAExiH,MAAMtI,EAAEsI,KAAKuN,EAAEvN,GAAG/R,GAAG,IAAG,SAASyJ,EAAE6V,EAAE5c,GAAG,OAAO2iF,EAAE,GAAG57E,EAAE05B,EAAEkiD,EAAE,KAAK3iF,EAAE1C,GAAGqlF,EAAE,GAAG,MAAMrlF,EAAE6tD,KAAK,CAAC,IAAG7oC,IAAIo2J,IAAG,SAAS97J,GAAG,OAAO,SAAS7V,GAAG,OAAO,EAAEgxK,GAAGn7J,EAAE7V,GAAG9L,MAAM,CAAC,IAAGs/K,SAAS7B,IAAG,SAAS97J,GAAG,OAAOA,EAAEA,EAAE+pB,QAAQg/C,GAAGm3E,IAAI,SAAS/1J,GAAG,OAAO,GAAGA,EAAE63C,aAAaizE,EAAE9qH,IAAI5O,QAAQykB,EAAE,CAAC,IAAG8+J,KAAKhD,IAAG,SAAS14K,GAAG,OAAO29J,EAAEj8J,KAAK1B,GAAG,KAAK+3K,GAAG5gL,MAAM,qBAAqB6I,GAAGA,EAAEA,EAAE2mC,QAAQg/C,GAAGm3E,IAAIv9G,cAAc,SAASx4C,GAAG,IAAI6V,EAAE,GAAG,GAAGA,EAAEg/I,EAAE70J,EAAE20K,KAAK30K,EAAEs7B,aAAa,aAAat7B,EAAEs7B,aAAa,QAAQ,OAAOzlB,EAAEA,EAAE2iC,iBAAiBv/C,GAAG,IAAI4c,EAAEzkB,QAAQ6H,EAAE,YAAY+G,EAAEA,EAAE26J,aAAa,IAAI36J,EAAE+uK,UAAU,OAAM,CAAE,CAAC,IAAGhsF,OAAO,SAAS/iF,GAAG,IAAI6V,EAAE5c,EAAEq2C,UAAUr2C,EAAEq2C,SAASrX,KAAK,OAAOpiB,GAAGA,EAAEhlB,MAAM,KAAKmP,EAAEqW,EAAE,EAAEruB,KAAK,SAASgY,GAAG,OAAOA,IAAIsI,CAAC,EAAEwnC,MAAM,SAAS9vC,GAAG,OAAOA,IAAI41J,EAAEgf,iBAAiBhf,EAAEif,UAAUjf,EAAEif,gBAAgB70K,EAAEpM,MAAMoM,EAAEivE,OAAOjvE,EAAE80K,SAAS,EAAElwJ,QAAQutJ,IAAG,GAAIruG,SAASquG,IAAG,GAAI4C,QAAQ,SAAS/0K,GAAG,IAAI6V,EAAE7V,EAAEm0C,SAASqE,cAAc,MAAM,UAAU3iC,KAAK7V,EAAE+0K,SAAS,WAAWl/J,KAAK7V,EAAEg1K,QAAQ,EAAEA,SAAS,SAASh1K,GAAG,OAAOA,EAAE26J,YAAY36J,EAAE26J,WAAWsa,eAAc,IAAKj1K,EAAEg1K,QAAQ,EAAErgH,MAAM,SAAS30D,GAAG,IAAIA,EAAEA,EAAEg0K,WAAWh0K,EAAEA,EAAEA,EAAEgyK,YAAY,GAAGhyK,EAAE+uK,SAAS,EAAE,OAAM,EAAG,OAAM,CAAE,EAAEmG,OAAO,SAASl1K,GAAG,OAAOo5B,EAAEo7I,QAAQ7/G,MAAM30D,EAAE,EAAEu0E,OAAO,SAASv0E,GAAG,OAAO82J,EAAEn8J,KAAKqF,EAAEm0C,SAAS,EAAEw2E,MAAM,SAAS3qH,GAAG,OAAO02J,EAAE/7J,KAAKqF,EAAEm0C,SAAS,EAAEghI,OAAO,SAASn1K,GAAG,IAAI6V,EAAE7V,EAAEm0C,SAASqE,cAAc,MAAM,UAAU3iC,GAAG,WAAW7V,EAAEpM,MAAM,WAAWiiB,CAAC,EAAEg8B,KAAK,SAAS7xC,GAAG,IAAI6V,EAAE,MAAM,UAAU7V,EAAEm0C,SAASqE,eAAe,SAASx4C,EAAEpM,OAAO,OAAOiiB,EAAE7V,EAAEs7B,aAAa,UAAU,SAASzlB,EAAE2iC,cAAc,EAAEk7F,MAAM2+B,IAAG,WAAW,MAAM,CAAC,EAAE,IAAG/C,KAAK+C,IAAG,SAASryK,EAAE6V,GAAG,MAAM,CAACA,EAAE,EAAE,IAAGw5J,GAAGgD,IAAG,SAASryK,EAAE6V,EAAE5c,GAAG,MAAM,CAACA,EAAE,EAAEA,EAAE4c,EAAE5c,EAAE,IAAGs2K,KAAK8C,IAAG,SAASryK,EAAE6V,GAAG,IAAI,IAAI5c,EAAE,EAAEA,EAAE4c,EAAE5c,GAAG,EAAE+G,EAAEF,KAAK7G,GAAG,OAAO+G,CAAC,IAAGyvK,IAAI4C,IAAG,SAASryK,EAAE6V,GAAG,IAAI,IAAI5c,EAAE,EAAEA,EAAE4c,EAAE5c,GAAG,EAAE+G,EAAEF,KAAK7G,GAAG,OAAO+G,CAAC,IAAGo1K,GAAG/C,IAAG,SAASryK,EAAE6V,EAAE5c,GAAG,IAAI,IAAI2iF,EAAE3iF,EAAE,EAAEA,EAAE4c,EAAEA,EAAE5c,EAAE4c,EAAE5c,EAAE,KAAK2iF,GAAG57E,EAAEF,KAAK87E,GAAG,OAAO57E,CAAC,IAAGq1K,GAAGhD,IAAG,SAASryK,EAAE6V,EAAE5c,GAAG,IAAI,IAAI2iF,EAAE3iF,EAAE,EAAEA,EAAE4c,EAAE5c,IAAI2iF,EAAE/lE,GAAG7V,EAAEF,KAAK87E,GAAG,OAAO57E,CAAC,OAAMw0K,QAAQc,IAAIl8I,EAAEo7I,QAAQnF,GAAG,CAACkG,OAAM,EAAGC,UAAS,EAAGC,MAAK,EAAG5gI,UAAS,EAAG6gI,OAAM,GAAIt8I,EAAEo7I,QAAQx0K,GAAGiyK,GAAGjyK,GAAG,IAAIA,IAAI,CAACi8B,QAAO,EAAGh+B,OAAM,GAAIm7B,EAAEo7I,QAAQx0K,GAAGkyK,GAAGlyK,GAAG,SAASmuE,KAAK,CAAC,SAASojG,GAAGvxK,GAAG,IAAI,IAAI6V,EAAE,EAAE5c,EAAE+G,EAAE9L,OAAO0nF,EAAE,GAAG/lE,EAAE5c,EAAE4c,IAAI+lE,GAAG57E,EAAE6V,GAAG1d,MAAM,OAAOyjF,CAAC,CAAC,SAASi1F,GAAGn3I,EAAE15B,EAAE6V,GAAG,IAAIi+I,EAAE9zJ,EAAE8wK,IAAIxmH,EAAEtqD,EAAE+c,KAAKkc,EAAEqxB,GAAGwpG,EAAEr3H,EAAE5mB,GAAG,eAAeojB,EAAErI,EAAEgrD,IAAI,OAAO57E,EAAE0zI,MAAM,SAAS1zI,EAAE6V,EAAE5c,GAAG,KAAM+G,EAAEA,EAAE8zJ,OAAM,IAAI9zJ,EAAE+uK,UAAUtyI,EAAE,OAAO/C,EAAE15B,EAAE6V,EAAE5c,GAAG,OAAM,CAAE,EAAE,SAAS+G,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAExiH,EAAE,CAACmuJ,EAAE7lI,GAAG,GAAG33B,GAAG,KAAM+G,EAAEA,EAAE8zJ,QAAO,IAAI9zJ,EAAE+uK,UAAUtyI,IAAI/C,EAAE15B,EAAE6V,EAAE5c,GAAG,OAAM,OAAQ,KAAM+G,EAAEA,EAAE8zJ,OAAM,IAAI9zJ,EAAE+uK,UAAUtyI,EAAE,GAAGlmC,GAAGu0H,EAAE9qH,EAAE00J,KAAK10J,EAAE00J,GAAG,CAAC,IAAI10J,EAAEu0K,YAAYzpD,EAAE9qH,EAAEu0K,UAAU,CAAC,GAAGjqH,GAAGA,IAAItqD,EAAEm0C,SAASqE,cAAcx4C,EAAEA,EAAE8zJ,IAAI9zJ,MAAM,CAAC,IAAI47E,EAAErlF,EAAE0iC,KAAK2iD,EAAE,KAAK66E,GAAG76E,EAAE,KAAKhrD,EAAE,OAAOtoB,EAAE,GAAGszE,EAAE,GAAG,IAAIrlF,EAAE0iC,GAAG3wB,GAAG,GAAGoxB,EAAE15B,EAAE6V,EAAE5c,GAAG,OAAM,CAAE,CAAC,OAAM,CAAE,CAAC,CAAC,SAAS08K,GAAGp/K,GAAG,OAAO,EAAEA,EAAErC,OAAO,SAAS8L,EAAE6V,EAAE5c,GAAkB,IAAf,IAAI2iF,EAAErlF,EAAErC,OAAa0nF,SAAQrlF,EAAEqlF,GAAG57E,EAAE6V,EAAE5c,GAAG,OAAM,EAAG,OAAM,CAAE,EAAE1C,EAAE,EAAE,CAAC,SAASq/K,GAAG51K,EAAE6V,EAAE5c,EAAE2iF,EAAErlF,GAAG,IAAI,IAAIu0H,EAAExiH,EAAE,GAAGoxB,EAAE,EAAEo6H,EAAE9zJ,EAAE9L,OAAOo2D,EAAE,MAAMz0C,EAAE6jB,EAAEo6H,EAAEp6H,KAAKoxF,EAAE9qH,EAAE05B,MAAMzgC,IAAIA,EAAE6xH,EAAElvC,EAAErlF,KAAK+R,EAAExI,KAAKgrH,GAAGxgE,GAAGz0C,EAAE/V,KAAK45B,KAAK,OAAOpxB,CAAC,CAAC,SAASutK,GAAGnxJ,EAAE6vI,EAAED,EAAEpgJ,EAAEmlB,EAAEr5B,GAAG,OAAOkU,IAAIA,EAAEwgJ,KAAKxgJ,EAAE2hK,GAAG3hK,IAAImlB,IAAIA,EAAEq7H,KAAKr7H,EAAEw8I,GAAGx8I,EAAEr5B,IAAI2xK,IAAG,SAAS3xK,EAAE6V,EAAE5c,EAAE2iF,GAAG,IAAIrlF,EAAEu0H,EAAExiH,EAAEoxB,EAAE,GAAGo6H,EAAE,GAAGxpG,EAAEz0C,EAAE3hB,OAAO+kC,EAAEj5B,GAAG,SAASA,EAAE6V,EAAE5c,GAAG,IAAI,IAAI2iF,EAAE,EAAErlF,EAAEsf,EAAE3hB,OAAO0nF,EAAErlF,EAAEqlF,IAAIo1F,GAAGhxK,EAAE6V,EAAE+lE,GAAG3iF,GAAG,OAAOA,CAAC,CAApE,CAAsEs7J,GAAG,IAAIt7J,EAAE81K,SAAS,CAAC91K,GAAGA,EAAE,IAAIwjC,GAAG/X,IAAI1kB,GAAGu0J,EAAEt7H,EAAE28I,GAAG38I,EAAES,EAAEhV,EAAEzrB,EAAE2iF,GAAGhrD,EAAE0jI,EAAEj7H,IAAIr5B,EAAE0kB,EAAE4lC,GAAGp2C,GAAG,GAAG2B,EAAE4mB,EAAE,GAAG63H,GAAGA,EAAE73H,EAAE7L,EAAE33B,EAAE2iF,GAAG1nE,EAAoC,IAAjC3d,EAAEq/K,GAAGhlJ,EAAEkjI,GAAG5/I,EAAE3d,EAAE,GAAG0C,EAAE2iF,GAAGkvC,EAAEv0H,EAAErC,OAAa42H,MAAKxiH,EAAE/R,EAAEu0H,MAAMl6F,EAAEkjI,EAAEhpC,MAAMruF,EAAEq3H,EAAEhpC,IAAIxiH,IAAI,GAAGtI,GAAG,GAAGq5B,GAAG3U,EAAE,CAAC,GAAG2U,EAAE,CAAiB,IAAhB9iC,EAAE,GAAGu0H,EAAEl6F,EAAE18B,OAAa42H,MAAKxiH,EAAEsoB,EAAEk6F,KAAKv0H,EAAEuJ,KAAK28B,EAAEquF,GAAGxiH,GAAG+wB,EAAE,KAAKzI,EAAE,GAAGr6B,EAAEqlF,EAAE,CAAY,IAAXkvC,EAAEl6F,EAAE18B,OAAa42H,MAAKxiH,EAAEsoB,EAAEk6F,MAAM,GAAGv0H,EAAE8iC,EAAEy8H,EAAE91J,EAAEsI,GAAGoxB,EAAEoxF,MAAM9qH,EAAEzJ,KAAKsf,EAAEtf,GAAG+R,GAAG,OAAOsoB,EAAEglJ,GAAGhlJ,IAAI/a,EAAE+a,EAAE7wB,OAAOuqD,EAAE15B,EAAE18B,QAAQ08B,GAAGyI,EAAEA,EAAE,KAAKxjB,EAAE+a,EAAEgrD,GAAGw5E,EAAEryJ,MAAM8S,EAAE+a,EAAE,GAAE,CAAC,SAASklJ,GAAG91K,GAAG,IAAI,IAAIzJ,EAAEsf,EAAE5c,EAAE2iF,EAAE57E,EAAE9L,OAAO42H,EAAE1xF,EAAEg7I,SAASp0K,EAAE,GAAGpM,MAAM0U,EAAEwiH,GAAG1xF,EAAEg7I,SAAS,KAAK16I,EAAEoxF,EAAE,EAAE,EAAEgpC,EAAE+c,IAAG,SAAS7wK,GAAG,OAAOA,IAAIzJ,CAAC,GAAE+R,GAAE,GAAIgiD,EAAEumH,IAAG,SAAS7wK,GAAG,OAAO,EAAE81J,EAAEv/J,EAAEyJ,EAAE,GAAEsI,GAAE,GAAI2wB,EAAE,CAAC,SAASj5B,EAAE6V,EAAE5c,GAAG,IAAI2iF,GAAGkvC,IAAI7xH,GAAG4c,IAAI0kB,MAAMhkC,EAAEsf,GAAGk5J,SAASjb,EAAE9zJ,EAAE6V,EAAE5c,GAAGqxD,EAAEtqD,EAAE6V,EAAE5c,IAAI,OAAO1C,EAAE,KAAKqlF,CAAC,GAAGliD,EAAEkiD,EAAEliD,IAAI,GAAG7jB,EAAEujB,EAAEg7I,SAASp0K,EAAE05B,GAAG9lC,MAAMqlC,EAAE,CAAC43I,GAAG8E,GAAG18I,GAAGpjB,QAAQ,CAAC,IAAIA,EAAEujB,EAAE3wB,OAAOzI,EAAE05B,GAAG9lC,MAAMmP,MAAM,KAAK/C,EAAE05B,GAAGx+B,UAAUw5J,GAAG,CAAC,IAAIz7J,IAAIygC,EAAEzgC,EAAE2iF,IAASxiD,EAAEg7I,SAASp0K,EAAE/G,GAAGrF,MAAvBqF,KAAmC,OAAO48K,GAAG,EAAEn8I,GAAGi8I,GAAG18I,GAAG,EAAES,GAAG63I,GAAGvxK,EAAEnP,MAAM,EAAE6oC,EAAE,GAAGyxB,OAAO,CAAChzD,MAAM,MAAM6H,EAAE05B,EAAE,GAAG9lC,KAAK,IAAI,MAAMgsC,QAAQ1E,EAAE,MAAMrlB,EAAE6jB,EAAEzgC,GAAG68K,GAAG91K,EAAEnP,MAAM6oC,EAAEzgC,IAAIA,EAAE2iF,GAAGk6F,GAAG91K,EAAEA,EAAEnP,MAAMoI,IAAIA,EAAE2iF,GAAG21F,GAAGvxK,GAAG,CAACi5B,EAAEn5B,KAAK+V,EAAE,CAAC,OAAO8/J,GAAG18I,EAAE,CAAC,OAAOk1C,GAAGv8E,UAAUwnC,EAAE28I,QAAQ38I,EAAEo7I,QAAQp7I,EAAEq7I,WAAW,IAAItmG,GAAGomF,EAAEyc,GAAGgF,SAAS,SAASh2K,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAErlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAE/hD,EAAEvI,EAAE,KAAK,GAAGsqD,EAAE,OAAOz0C,EAAE,EAAEy0C,EAAEz5D,MAAM,GAA0B,IAAvByX,EAAEtI,EAAE05B,EAAE,GAAGo6H,EAAE16H,EAAEi7I,UAAgB/rK,GAAE,CAAC,IAAIwiH,KAAK7xH,KAAK2iF,EAAE+6E,EAAEjmF,KAAKpoE,MAAMszE,IAAItzE,EAAEA,EAAEzX,MAAM+qF,EAAE,GAAG1nF,SAASoU,GAAGoxB,EAAE55B,KAAKvJ,EAAE,KAAK0C,GAAE,GAAI2iF,EAAExgD,EAAEs1C,KAAKpoE,MAAMrP,EAAE2iF,EAAEr5C,QAAQhsC,EAAEuJ,KAAK,CAAC3H,MAAMc,EAAErF,KAAKgoF,EAAE,GAAGh8C,QAAQ1E,EAAE,OAAO5yB,EAAEA,EAAEzX,MAAMoI,EAAE/E,SAASklC,EAAE3wB,SAASmzE,EAAEq7E,EAAEnsC,GAAGp6C,KAAKpoE,KAAKwrJ,EAAEhpC,MAAMlvC,EAAEk4E,EAAEhpC,GAAGlvC,MAAM3iF,EAAE2iF,EAAEr5C,QAAQhsC,EAAEuJ,KAAK,CAAC3H,MAAMc,EAAErF,KAAKk3H,EAAE5vH,QAAQ0gF,IAAItzE,EAAEA,EAAEzX,MAAMoI,EAAE/E,SAAS,IAAI+E,EAAE,KAAK,CAAC,OAAO4c,EAAEvN,EAAEpU,OAAOoU,EAAE0oK,GAAG5gL,MAAM4P,GAAGuI,EAAEvI,EAAE05B,GAAG7oC,MAAM,EAAE,EAAE4rC,EAAEu0I,GAAGiF,QAAQ,SAASj2K,EAAE6V,GAAG,IAAI5c,EAAEib,EAAEmlB,EAAExc,EAAEtU,EAAEqzE,EAAErlF,EAAE,GAAGu0H,EAAE,GAAGxiH,EAAE0sJ,EAAEh1J,EAAE,KAAK,IAAIsI,EAAE,CAAwB,IAAvBuN,IAAIA,EAAE0+I,EAAEv0J,IAAI/G,EAAE4c,EAAE3hB,OAAa+E,MAAKqP,EAAEwtK,GAAGjgK,EAAE5c,KAAKy7J,GAAGn+J,EAAEuJ,KAAKwI,GAAGwiH,EAAEhrH,KAAKwI,IAAIA,EAAE0sJ,EAAEh1J,GAAGkU,EAAE42G,EAAEjuG,EAAE,GAAGwc,EAAE9iC,GAAGrC,OAAOqU,EAAE,EAAE2L,EAAEhgB,OAAO0nF,EAAE,SAAS57E,EAAE6V,EAAE5c,EAAE2iF,EAAErlF,GAAG,IAAIu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAE,EAAExpG,EAAE,IAAIrxB,EAAEj5B,GAAG,GAAGy8B,EAAE,GAAG7L,EAAE2J,EAAE7V,EAAE1kB,GAAGuI,GAAG6wB,EAAE3U,KAAK6rJ,IAAI,IAAI/5K,GAAGg+J,EAAEkC,GAAG,MAAM7lI,EAAE,EAAE7kB,KAAKizB,UAAU,GAAGs1H,EAAE5vI,EAAExwB,OAAO,IAAIqC,IAAIgkC,EAAE1kB,GAAG+/I,GAAG//I,GAAGtf,GAAG+zD,IAAIgqG,GAAG,OAAOxpC,EAAEpmG,EAAE4lC,IAAIA,IAAI,CAAC,GAAG/hD,GAAGuiH,EAAE,CAAwC,IAAvCxiH,EAAE,EAAEuN,GAAGi1G,EAAEmmD,eAAerb,IAAID,EAAE7qC,GAAG7xH,GAAG47J,GAASn7H,EAAExlB,EAAE5L,SAAQoxB,EAAEoxF,EAAEj1G,GAAG+/I,EAAE38J,GAAG,CAAC2iF,EAAE97E,KAAKgrH,GAAG,KAAK,CAACv0H,IAAIkgK,EAAElC,EAAE,CAAC13I,KAAKiuG,GAAGpxF,GAAGoxF,IAAIgpC,IAAI9zJ,GAAGi5B,EAAEn5B,KAAKgrH,GAAG,CAAC,GAAGgpC,GAAGxpG,EAAEztC,GAAGytC,IAAIwpG,EAAE,CAAK,IAAJxrJ,EAAE,EAAQoxB,EAAEL,EAAE/wB,MAAKoxB,EAAET,EAAEwD,EAAE5mB,EAAE5c,GAAG,GAAG+G,EAAE,CAAC,GAAG,EAAE8zJ,EAAE,KAAMxpG,KAAIrxB,EAAEqxB,IAAI7tB,EAAE6tB,KAAK7tB,EAAE6tB,GAAGzwB,EAAEr2B,KAAKo4E,IAAIn/C,EAAEm5I,GAAGn5I,EAAE,CAAC24H,EAAEryJ,MAAM64E,EAAEn/C,GAAGlmC,IAAIyJ,GAAG,EAAEy8B,EAAEvoC,QAAQ,EAAE4/J,EAAEz6H,EAAEnlC,QAAQ88K,GAAG4C,WAAWh4F,EAAE,CAAC,OAAOrlF,IAAIkgK,EAAElC,EAAEh6H,EAAE3J,GAAGqI,CAAC,EAAEpc,EAAE80J,GAAG/1F,GAAGA,KAAKuE,SAASngF,CAAC,CAAC,OAAOsI,CAAC,EAAEgsJ,EAAE0c,GAAGkF,OAAO,SAASl2K,EAAE6V,EAAE5c,EAAE2iF,GAAG,IAAIrlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAE,mBAAmBtqD,GAAGA,EAAEi5B,GAAG2iD,GAAG24E,EAAEv0J,EAAEsqD,EAAE61B,UAAUngF,GAAG,GAAG/G,EAAEA,GAAG,GAAG,IAAIggC,EAAE/kC,OAAO,CAAC,GAAG,GAAG42H,EAAE7xF,EAAE,GAAGA,EAAE,GAAGpoC,MAAM,IAAIqD,QAAQ,QAAQoU,EAAEwiH,EAAE,IAAIl3H,MAAM,IAAIiiB,EAAEk5J,UAAUla,GAAGz7H,EAAEg7I,SAAStpD,EAAE,GAAGl3H,MAAM,CAAC,KAAKiiB,GAAGujB,EAAE3U,KAAK2rJ,GAAG9nK,EAAEpN,QAAQ,GAAG0kC,QAAQg/C,GAAGm3E,IAAIlgJ,IAAI,IAAI,IAAI,OAAO5c,EAAEqxD,IAAIz0C,EAAEA,EAAE8kJ,YAAY36J,EAAEA,EAAEnP,MAAMi6H,EAAEvoF,QAAQpqC,MAAMjE,OAAO,CAAqC,IAApCqC,EAAE0gK,EAAEyZ,aAAa/1K,KAAKqF,GAAG,EAAE8qH,EAAE52H,OAAaqC,MAAQ+R,EAAEwiH,EAAEv0H,IAAG6iC,EAAEg7I,SAAS16I,EAAEpxB,EAAE1U,QAAY,IAAIkgK,EAAE16H,EAAE3U,KAAKiV,MAAMkiD,EAAEk4E,EAAExrJ,EAAEpN,QAAQ,GAAG0kC,QAAQg/C,GAAGm3E,IAAIkC,GAAGt9J,KAAKmwH,EAAE,GAAGl3H,OAAOy9K,GAAGx7J,EAAE8kJ,aAAa9kJ,IAAI,CAAC,GAAGi1G,EAAE/qH,OAAOxJ,EAAE,KAAKyJ,EAAE47E,EAAE1nF,QAAQq9K,GAAGzmD,IAAI,OAAOsqC,EAAEryJ,MAAM9J,EAAE2iF,GAAG3iF,EAAE,KAAK,CAAE,CAAC,OAAOqxD,GAAG7tB,EAAEz8B,EAAEi5B,IAAI2iD,EAAE/lE,GAAGg/I,EAAE57J,GAAG4c,GAAGoiJ,GAAGt9J,KAAKqF,IAAIqxK,GAAGx7J,EAAE8kJ,aAAa9kJ,GAAG5c,CAAC,EAAEyrB,EAAEovJ,WAAWpf,EAAEv9I,MAAM,IAAI8d,KAAKghI,GAAGjlK,KAAK,MAAM0jK,EAAEhwI,EAAEmvJ,mBAAmBvpH,EAAEqrG,IAAIjxI,EAAE+uJ,aAAa7B,IAAG,SAAS5xK,GAAG,OAAO,EAAEA,EAAEuzK,wBAAwB3d,EAAEzqE,cAAc,YAAY,IAAGymF,IAAG,SAAS5xK,GAAG,OAAOA,EAAEu4C,UAAU,mBAAmB,MAAMv4C,EAAEg0K,WAAW14I,aAAa,OAAO,KAAIu2I,GAAG,0BAAyB,SAAS7xK,EAAE6V,EAAE5c,GAAG,IAAIA,EAAE,OAAO+G,EAAEs7B,aAAazlB,EAAE,SAASA,EAAE2iC,cAAc,EAAE,EAAE,IAAG9zB,EAAEhxB,YAAYk+K,IAAG,SAAS5xK,GAAG,OAAOA,EAAEu4C,UAAU,WAAWv4C,EAAEg0K,WAAW5lH,aAAa,QAAQ,IAAI,KAAKpuD,EAAEg0K,WAAW14I,aAAa,QAAQ,KAAIu2I,GAAG,SAAQ,SAAS7xK,EAAE6V,EAAE5c,GAAG,IAAIA,GAAG,UAAU+G,EAAEm0C,SAASqE,cAAc,OAAOx4C,EAAEm2K,YAAY,IAAGvE,IAAG,SAAS5xK,GAAG,OAAO,MAAMA,EAAEs7B,aAAa,WAAW,KAAIu2I,GAAGld,GAAE,SAAS30J,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAE,IAAI3iF,EAAE,OAAM,IAAK+G,EAAE6V,GAAGA,EAAE2iC,eAAeojC,EAAE57E,EAAEgzK,iBAAiBn9J,KAAK+lE,EAAE83F,UAAU93F,EAAEzjF,MAAM,IAAI,IAAG64K,EAAE,CAA5gnB,CAA8gnB1c,GAAGO,EAAEpwI,KAAKC,EAAEmwI,EAAEv7E,KAAK50D,EAAEwvJ,UAAUrf,EAAEv7E,KAAK,KAAKu7E,EAAEv7E,KAAKk7F,QAAQ3f,EAAE+e,WAAW/e,EAAEuhB,OAAO1xJ,EAAEkvJ,WAAW/e,EAAEhjH,KAAKntB,EAAEqvJ,QAAQlf,EAAEwhB,SAAS3xJ,EAAE4tJ,MAAMzd,EAAE2e,SAAS9uJ,EAAE8uJ,SAAS3e,EAAEyhB,eAAe5xJ,EAAEivJ,OAAO,IAAIpf,EAAE,SAASv0J,EAAE6V,EAAE5c,GAAyB,IAAtB,IAAI2iF,EAAE,GAAGrlF,OAAE,IAAS0C,GAAS+G,EAAEA,EAAE6V,KAAK,IAAI7V,EAAE+uK,aAAY,IAAI/uK,EAAE+uK,SAAS,CAAC,GAAGx4K,GAAGs+J,EAAE70J,GAAGyqK,GAAGxxK,GAAG,MAAM2iF,EAAE97E,KAAKE,EAAE,CAAC,OAAO47E,CAAC,EAAE84E,EAAE,SAAS10J,EAAE6V,GAAG,IAAI,IAAI5c,EAAE,GAAG+G,EAAEA,EAAEA,EAAEgyK,YAAY,IAAIhyK,EAAE+uK,UAAU/uK,IAAI6V,GAAG5c,EAAE6G,KAAKE,GAAG,OAAO/G,CAAC,EAAEw9J,EAAE5B,EAAEv7E,KAAK3jF,MAAM+6K,aAAa,SAAS1b,EAAEh1J,EAAE6V,GAAG,OAAO7V,EAAEm0C,UAAUn0C,EAAEm0C,SAASqE,gBAAgB3iC,EAAE2iC,aAAa,CAAC,IAAInN,EAAE,kEAAkE,SAAS4qH,EAAEj2J,EAAE/G,EAAE2iF,GAAG,OAAOrzE,EAAEtP,GAAG47J,EAAE2a,KAAKxvK,GAAE,SAASA,EAAE6V,GAAG,QAAQ5c,EAAEuK,KAAKxD,EAAE6V,EAAE7V,KAAK47E,CAAC,IAAG3iF,EAAE81K,SAASla,EAAE2a,KAAKxvK,GAAE,SAASA,GAAG,OAAOA,IAAI/G,IAAI2iF,CAAC,IAAG,iBAAiB3iF,EAAE47J,EAAE2a,KAAKxvK,GAAE,SAASA,GAAG,OAAO,EAAEzJ,EAAEiN,KAAKvK,EAAE+G,KAAK47E,CAAC,IAAGi5E,EAAEpsJ,OAAOxP,EAAE+G,EAAE47E,EAAE,CAACi5E,EAAEpsJ,OAAO,SAASzI,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAE/lE,EAAE,GAAG,OAAO5c,IAAI+G,EAAE,QAAQA,EAAE,KAAK,IAAI6V,EAAE3hB,QAAQ,IAAI0nF,EAAEmzF,SAASla,EAAEpwI,KAAKwuJ,gBAAgBr3F,EAAE57E,GAAG,CAAC47E,GAAG,GAAGi5E,EAAEpwI,KAAKvpB,QAAQ8E,EAAE60J,EAAE2a,KAAK35J,GAAE,SAAS7V,GAAG,OAAO,IAAIA,EAAE+uK,QAAQ,IAAG,EAAEla,EAAE1kG,GAAGu/G,OAAO,CAACjrJ,KAAK,SAASzkB,GAAG,IAAI6V,EAAE5c,EAAE2iF,EAAEprF,KAAK0D,OAAOqC,EAAE/F,KAAK,GAAG,iBAAiBwP,EAAE,OAAOxP,KAAK2+K,UAAUta,EAAE70J,GAAGyI,QAAO,WAAW,IAAIoN,EAAE,EAAEA,EAAE+lE,EAAE/lE,IAAI,GAAGg/I,EAAE2e,SAASj9K,EAAEsf,GAAGrlB,MAAM,OAAM,CAAE,KAAI,IAAIyI,EAAEzI,KAAK2+K,UAAU,IAAIt5J,EAAE,EAAEA,EAAE+lE,EAAE/lE,IAAIg/I,EAAEpwI,KAAKzkB,EAAEzJ,EAAEsf,GAAG5c,GAAG,OAAO,EAAE2iF,EAAEi5E,EAAE+e,WAAW36K,GAAGA,CAAC,EAAEwP,OAAO,SAASzI,GAAG,OAAOxP,KAAK2+K,UAAUlZ,EAAEzlK,KAAKwP,GAAG,IAAG,GAAI,EAAE00K,IAAI,SAAS10K,GAAG,OAAOxP,KAAK2+K,UAAUlZ,EAAEzlK,KAAKwP,GAAG,IAAG,GAAI,EAAEyqK,GAAG,SAASzqK,GAAG,QAAQi2J,EAAEzlK,KAAK,iBAAiBwP,GAAGy2J,EAAE97J,KAAKqF,GAAG60J,EAAE70J,GAAGA,GAAG,IAAG,GAAI9L,MAAM,IAAI,IAAIgiK,EAAEr8H,EAAE,uCAAuCg7H,EAAE1kG,GAAGrjD,KAAK,SAAS9M,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAE,IAAIyJ,EAAE,OAAOxP,KAAK,GAAGyI,EAAEA,GAAGi9J,EAAE,iBAAiBl2J,EAAE,CAAC,KAAK47E,EAAE,MAAM57E,EAAE,IAAI,MAAMA,EAAEA,EAAE9L,OAAO,IAAI,GAAG8L,EAAE9L,OAAO,CAAC,KAAK8L,EAAE,MAAM65B,EAAE62C,KAAK1wE,MAAM47E,EAAE,IAAI/lE,EAAE,OAAOA,GAAGA,EAAEq5J,QAAQr5J,GAAG5c,GAAGwrB,KAAKzkB,GAAGxP,KAAKuB,YAAY8jB,GAAG4O,KAAKzkB,GAAG,GAAG47E,EAAE,GAAG,CAAC,GAAG/lE,EAAEA,aAAag/I,EAAEh/I,EAAE,GAAGA,EAAEg/I,EAAE1yB,MAAM3xI,KAAKqkK,EAAE0hB,UAAU36F,EAAE,GAAG/lE,GAAGA,EAAEk5J,SAASl5J,EAAEo7J,eAAep7J,EAAE0kB,GAAE,IAAK8Q,EAAE1wC,KAAKihF,EAAE,KAAKi5E,EAAE8a,cAAc95J,GAAG,IAAI+lE,KAAK/lE,EAAEtN,EAAE/X,KAAKorF,IAAIprF,KAAKorF,GAAG/lE,EAAE+lE,IAAIprF,KAAK0gD,KAAK0qC,EAAE/lE,EAAE+lE,IAAI,OAAOprF,IAAI,CAAC,OAAO+F,EAAEgkC,EAAE22I,eAAet1F,EAAE,OAAOprF,KAAK,GAAG+F,EAAE/F,KAAK0D,OAAO,GAAG1D,IAAI,CAAC,OAAOwP,EAAE+uK,UAAUv+K,KAAK,GAAGwP,EAAExP,KAAK0D,OAAO,EAAE1D,MAAM+X,EAAEvI,QAAG,IAAS/G,EAAEk4C,MAAMl4C,EAAEk4C,MAAMnxC,GAAGA,EAAE60J,GAAGA,EAAEkb,UAAU/vK,EAAExP,KAAK,GAAGoB,UAAUijK,EAAE1kG,GAAG+lG,EAAErB,EAAEt6H,GAAG,IAAI67B,EAAE,iCAAiCg/F,EAAE,CAAC54H,UAAS,EAAGwxB,UAAS,EAAGjxC,MAAK,EAAG23C,MAAK,GAAI,SAASmhG,EAAE71J,EAAE6V,GAAG,MAAO7V,EAAEA,EAAE6V,KAAK,IAAI7V,EAAE+uK,WAAU,OAAO/uK,CAAC,CAAC60J,EAAE1kG,GAAGu/G,OAAO,CAACn0J,IAAI,SAASvb,GAAG,IAAI6V,EAAEg/I,EAAE70J,EAAExP,MAAMyI,EAAE4c,EAAE3hB,OAAO,OAAO1D,KAAKiY,QAAO,WAAW,IAAI,IAAIzI,EAAE,EAAEA,EAAE/G,EAAE+G,IAAI,GAAG60J,EAAE2e,SAAShjL,KAAKqlB,EAAE7V,IAAI,OAAM,CAAE,GAAE,EAAEw2K,QAAQ,SAASx2K,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAE,EAAErlF,EAAE/F,KAAK0D,OAAO42H,EAAE,GAAGxiH,EAAE,iBAAiBtI,GAAG60J,EAAE70J,GAAG,IAAIy2J,EAAE97J,KAAKqF,GAAG,KAAK47E,EAAErlF,EAAEqlF,IAAI,IAAI3iF,EAAEzI,KAAKorF,GAAG3iF,GAAGA,IAAI4c,EAAE5c,EAAEA,EAAE0hK,WAAW,GAAG1hK,EAAE81K,SAAS,KAAKzmK,GAAG,EAAEA,EAAEolB,MAAMz0B,GAAG,IAAIA,EAAE81K,UAAUla,EAAEpwI,KAAKwuJ,gBAAgBh6K,EAAE+G,IAAI,CAAC8qH,EAAEhrH,KAAK7G,GAAG,KAAK,CAAC,OAAOzI,KAAK2+K,UAAU,EAAErkD,EAAE52H,OAAO2gK,EAAE+e,WAAW9oD,GAAGA,EAAE,EAAEp9F,MAAM,SAAS1tB,GAAG,OAAOA,EAAE,iBAAiBA,EAAEzJ,EAAEiN,KAAKqxJ,EAAE70J,GAAGxP,KAAK,IAAI+F,EAAEiN,KAAKhT,KAAKwP,EAAEkvK,OAAOlvK,EAAE,GAAGA,GAAGxP,KAAK,IAAIA,KAAK,GAAGmqK,WAAWnqK,KAAKkjJ,QAAQ+iC,UAAUviL,QAAQ,CAAC,EAAEoR,IAAI,SAAStF,EAAE6V,GAAG,OAAOrlB,KAAK2+K,UAAUta,EAAE+e,WAAW/e,EAAE1yB,MAAM3xI,KAAK2kB,MAAM0/I,EAAE70J,EAAE6V,KAAK,EAAE6gK,QAAQ,SAAS12K,GAAG,OAAOxP,KAAK8U,IAAI,MAAMtF,EAAExP,KAAK4+K,WAAW5+K,KAAK4+K,WAAW3mK,OAAOzI,GAAG,IAAI60J,EAAE15H,KAAK,CAAC+5I,OAAO,SAASl1K,GAAG,IAAI6V,EAAE7V,EAAE26J,WAAW,OAAO9kJ,GAAG,KAAKA,EAAEk5J,SAASl5J,EAAE,IAAI,EAAE8gK,QAAQ,SAAS32K,GAAG,OAAOu0J,EAAEv0J,EAAE,aAAa,EAAE42K,aAAa,SAAS52K,EAAE6V,EAAE5c,GAAG,OAAOs7J,EAAEv0J,EAAE,aAAa/G,EAAE,EAAE8jB,KAAK,SAAS/c,GAAG,OAAO61J,EAAE71J,EAAE,cAAc,EAAE00D,KAAK,SAAS10D,GAAG,OAAO61J,EAAE71J,EAAE,kBAAkB,EAAE62K,QAAQ,SAAS72K,GAAG,OAAOu0J,EAAEv0J,EAAE,cAAc,EAAEy2K,QAAQ,SAASz2K,GAAG,OAAOu0J,EAAEv0J,EAAE,kBAAkB,EAAE82K,UAAU,SAAS92K,EAAE6V,EAAE5c,GAAG,OAAOs7J,EAAEv0J,EAAE,cAAc/G,EAAE,EAAE89K,UAAU,SAAS/2K,EAAE6V,EAAE5c,GAAG,OAAOs7J,EAAEv0J,EAAE,kBAAkB/G,EAAE,EAAE+9K,SAAS,SAASh3K,GAAG,OAAO00J,GAAG10J,EAAE26J,YAAY,CAAC,GAAGqZ,WAAWh0K,EAAE,EAAEw8B,SAAS,SAASx8B,GAAG,OAAO00J,EAAE10J,EAAEg0K,WAAW,EAAEhmH,SAAS,SAAShuD,GAAG,OAAO,MAAMA,EAAEi3K,iBAAiBr7F,EAAE57E,EAAEi3K,iBAAiBj3K,EAAEi3K,iBAAiBjiB,EAAEh1J,EAAE,cAAcA,EAAEA,EAAE4+C,SAAS5+C,GAAG60J,EAAE1yB,MAAM,GAAGniI,EAAE+wK,YAAY,IAAG,SAASn1F,EAAErlF,GAAGs+J,EAAE1kG,GAAGyrB,GAAG,SAAS57E,EAAE6V,GAAG,IAAI5c,EAAE47J,EAAE3mI,IAAI19B,KAAK+F,EAAEyJ,GAAG,MAAM,UAAU47E,EAAE/qF,OAAO,KAAKglB,EAAE7V,GAAG6V,GAAG,iBAAiBA,IAAI5c,EAAE47J,EAAEpsJ,OAAOoN,EAAE5c,IAAI,EAAEzI,KAAK0D,SAASkhK,EAAEx5E,IAAIi5E,EAAE+e,WAAW36K,GAAGm9D,EAAEz7D,KAAKihF,IAAI3iF,EAAE+vD,WAAWx4D,KAAK2+K,UAAUl2K,EAAE,CAAC,IAAG,IAAI68J,EAAE,oBAAoB,SAASnB,EAAE30J,GAAG,OAAOA,CAAC,CAAC,SAAS80J,EAAE90J,GAAG,MAAMA,CAAC,CAAC,SAASs2J,EAAEt2J,EAAE6V,EAAE5c,EAAE2iF,GAAG,IAAIrlF,EAAE,IAAIyJ,GAAGuI,EAAEhS,EAAEyJ,EAAE2pB,SAASpzB,EAAEiN,KAAKxD,GAAGwyD,KAAK38C,GAAGqhK,KAAKj+K,GAAG+G,GAAGuI,EAAEhS,EAAEyJ,EAAEuQ,MAAMha,EAAEiN,KAAKxD,EAAE6V,EAAE5c,GAAG4c,EAAE9S,WAAM,EAAO,CAAC/C,GAAGnP,MAAM+qF,GAAG,CAAC,MAAM57E,GAAG/G,EAAE8J,WAAM,EAAO,CAAC/C,GAAG,CAAC,CAAC60J,EAAEsiB,UAAU,SAASv7F,GAAG,IAAI57E,EAAE/G,EAAE2iF,EAAE,iBAAiBA,GAAG57E,EAAE47E,EAAE3iF,EAAE,CAAC,EAAE47J,EAAE15H,KAAKn7B,EAAErK,MAAMmgK,IAAI,IAAG,SAAS91J,EAAE6V,GAAG5c,EAAE4c,IAAG,CAAE,IAAG5c,GAAG47J,EAAE6a,OAAO,CAAC,EAAE9zF,GAAG,IAAIrlF,EAAEsf,EAAEi1G,EAAExiH,EAAEoxB,EAAE,GAAGo6H,EAAE,GAAGxpG,GAAG,EAAErxB,EAAE,WAAW,IAAI3wB,EAAEA,GAAGszE,EAAE5pB,KAAK84D,EAAEv0H,GAAE,EAAGu9J,EAAE5/J,OAAOo2D,GAAG,EAAe,IAAZz0C,EAAEi+I,EAAEvxH,UAAgB+nB,EAAE5wB,EAAExlC,SAAO,IAAKwlC,EAAE4wB,GAAGvnD,MAAM8S,EAAE,GAAGA,EAAE,KAAK+lE,EAAEw7F,cAAc9sH,EAAE5wB,EAAExlC,OAAO2hB,GAAE,GAAI+lE,EAAEy7F,SAASxhK,GAAE,GAAItf,GAAE,EAAG+R,IAAIoxB,EAAE7jB,EAAE,GAAG,GAAG,EAAE4mB,EAAE,CAACn3B,IAAI,WAAW,OAAOo0B,IAAI7jB,IAAItf,IAAI+zD,EAAE5wB,EAAExlC,OAAO,EAAE4/J,EAAEh0J,KAAK+V,IAAI,SAAS5c,EAAE+G,GAAG60J,EAAE15H,KAAKn7B,GAAE,SAASA,EAAE6V,GAAGtN,EAAEsN,GAAG+lE,EAAEw6F,QAAQ35I,EAAElhB,IAAI1F,IAAI6jB,EAAE55B,KAAK+V,GAAGA,GAAGA,EAAE3hB,QAAQ,WAAW0hK,EAAE//I,IAAI5c,EAAE4c,EAAE,GAAE,CAA5G,CAA8G5hB,WAAW4hB,IAAItf,GAAG0iC,KAAKzoC,IAAI,EAAEooD,OAAO,WAAW,OAAOi8G,EAAE15H,KAAKlnC,WAAU,SAAS+L,EAAE6V,GAAS,IAAN,IAAI5c,GAAS,GAAGA,EAAE47J,EAAEmb,QAAQn6J,EAAE6jB,EAAEzgC,KAAIygC,EAAE35B,OAAO9G,EAAE,GAAGA,GAAGqxD,GAAGA,GAAG,IAAG95D,IAAI,EAAE+qB,IAAI,SAASvb,GAAG,OAAOA,GAAG,EAAE60J,EAAEmb,QAAQhwK,EAAE05B,GAAG,EAAEA,EAAExlC,MAAM,EAAEygE,MAAM,WAAW,OAAOj7B,IAAIA,EAAE,IAAIlpC,IAAI,EAAEs7C,QAAQ,WAAW,OAAOxjC,EAAEwrJ,EAAE,GAAGp6H,EAAE7jB,EAAE,GAAGrlB,IAAI,EAAEszE,SAAS,WAAW,OAAOpqC,CAAC,EAAEi3G,KAAK,WAAW,OAAOroI,EAAEwrJ,EAAE,GAAGj+I,GAAGtf,IAAImjC,EAAE7jB,EAAE,IAAIrlB,IAAI,EAAEulD,OAAO,WAAW,QAAQztC,CAAC,EAAEgvK,SAAS,SAASt3K,EAAE6V,GAAG,OAAOvN,IAAIuN,EAAE,CAAC7V,GAAG6V,EAAEA,GAAG,IAAIhlB,MAAMglB,EAAEhlB,QAAQglB,GAAGi+I,EAAEh0J,KAAK+V,GAAGtf,GAAG0iC,KAAKzoC,IAAI,EAAE+mL,KAAK,WAAW,OAAO96I,EAAE66I,SAAS9mL,KAAKyD,WAAWzD,IAAI,EAAE88K,MAAM,WAAW,QAAQxiD,CAAC,GAAG,OAAOruF,CAAC,EAAEo4H,EAAE6a,OAAO,CAACjmJ,SAAS,SAASzpB,GAAG,IAAI8qH,EAAE,CAAC,CAAC,SAAS,WAAW+pC,EAAEsiB,UAAU,UAAUtiB,EAAEsiB,UAAU,UAAU,GAAG,CAAC,UAAU,OAAOtiB,EAAEsiB,UAAU,eAAetiB,EAAEsiB,UAAU,eAAe,EAAE,YAAY,CAAC,SAAS,OAAOtiB,EAAEsiB,UAAU,eAAetiB,EAAEsiB,UAAU,eAAe,EAAE,aAAa5gL,EAAE,UAAU+R,EAAE,CAACyM,MAAM,WAAW,OAAOxe,CAAC,EAAEihL,OAAO,WAAW,OAAO99I,EAAE84B,KAAKv+D,WAAWijL,KAAKjjL,WAAWzD,IAAI,EAAE,MAAQ,SAASwP,GAAG,OAAOsI,EAAEiI,KAAK,KAAKvQ,EAAE,EAAEy3K,KAAK,WAAW,IAAIlhL,EAAEtC,UAAU,OAAO4gK,EAAEprI,UAAS,SAASmyD,GAAGi5E,EAAE15H,KAAK2vF,GAAE,SAAS9qH,EAAE6V,GAAG,IAAI5c,EAAEsP,EAAEhS,EAAEsf,EAAE,MAAMtf,EAAEsf,EAAE,IAAI6jB,EAAE7jB,EAAE,KAAI,WAAW,IAAI7V,EAAE/G,GAAGA,EAAE8J,MAAMvS,KAAKyD,WAAW+L,GAAGuI,EAAEvI,EAAE2pB,SAAS3pB,EAAE2pB,UAAU+tJ,SAAS97F,EAAE+7F,QAAQnlH,KAAKopB,EAAE92E,SAASoyK,KAAKt7F,EAAE72E,QAAQ62E,EAAE/lE,EAAE,GAAG,QAAQrlB,KAAKyI,EAAE,CAAC+G,GAAG/L,UAAU,GAAE,IAAGsC,EAAE,IAAI,IAAGozB,SAAS,EAAEpZ,KAAK,SAASsF,EAAE5c,EAAE2iF,GAAG,IAAIk4E,EAAE,EAAE,SAASxpG,EAAE/zD,EAAEu0H,EAAExiH,EAAEoxB,GAAG,OAAO,WAAW,IAAIzgC,EAAEzI,KAAKorF,EAAE3nF,UAAU+L,EAAE,WAAW,IAAIA,EAAE6V,EAAE,KAAKtf,EAAEu9J,GAAG,CAAC,IAAI9zJ,EAAEsI,EAAEvF,MAAM9J,EAAE2iF,MAAMkvC,EAAEnhG,UAAU,MAAM,IAAIuvC,UAAU,4BAA4BrjD,EAAE7V,IAAI,iBAAiBA,GAAG,mBAAmBA,IAAIA,EAAEuQ,KAAKhI,EAAEsN,GAAG6jB,EAAE7jB,EAAErS,KAAKxD,EAAEsqD,EAAEwpG,EAAEhpC,EAAE6pC,EAAEj7H,GAAG4wB,EAAEwpG,EAAEhpC,EAAEgqC,EAAEp7H,KAAKo6H,IAAIj+I,EAAErS,KAAKxD,EAAEsqD,EAAEwpG,EAAEhpC,EAAE6pC,EAAEj7H,GAAG4wB,EAAEwpG,EAAEhpC,EAAEgqC,EAAEp7H,GAAG4wB,EAAEwpG,EAAEhpC,EAAE6pC,EAAE7pC,EAAE8sD,eAAetvK,IAAIqsJ,IAAI17J,OAAE,EAAO2iF,EAAE,CAAC57E,KAAK05B,GAAGoxF,EAAE+sD,aAAa5+K,EAAE2iF,GAAG,CAAC,EAAE/lE,EAAE6jB,EAAE15B,EAAE,WAAW,IAAIA,GAAG,CAAC,MAAMA,GAAG60J,EAAEprI,SAASquJ,eAAejjB,EAAEprI,SAASquJ,cAAc93K,EAAE6V,EAAEkiK,YAAYjkB,GAAGv9J,EAAE,IAAI+R,IAAIwsJ,IAAI77J,OAAE,EAAO2iF,EAAE,CAAC57E,IAAI8qH,EAAEktD,WAAW/+K,EAAE2iF,GAAG,CAAC,EAAErlF,EAAEsf,KAAKg/I,EAAEprI,SAASwuJ,eAAepiK,EAAEkiK,WAAWljB,EAAEprI,SAASwuJ,gBAAgB3jB,EAAErqI,WAAWpU,GAAG,CAAC,CAAC,OAAOg/I,EAAEprI,UAAS,SAASzpB,GAAG8qH,EAAE,GAAG,GAAGxlH,IAAIglD,EAAE,EAAEtqD,EAAEuI,EAAEqzE,GAAGA,EAAE+4E,EAAE30J,EAAE43K,aAAa9sD,EAAE,GAAG,GAAGxlH,IAAIglD,EAAE,EAAEtqD,EAAEuI,EAAEsN,GAAGA,EAAE8+I,IAAI7pC,EAAE,GAAG,GAAGxlH,IAAIglD,EAAE,EAAEtqD,EAAEuI,EAAEtP,GAAGA,EAAE67J,GAAG,IAAGnrI,SAAS,EAAEA,QAAQ,SAAS3pB,GAAG,OAAO,MAAMA,EAAE60J,EAAE6a,OAAO1vK,EAAEsI,GAAGA,CAAC,GAAGoxB,EAAE,CAAC,EAAE,OAAOm7H,EAAE15H,KAAK2vF,GAAE,SAAS9qH,EAAE6V,GAAG,IAAI5c,EAAE4c,EAAE,GAAG+lE,EAAE/lE,EAAE,GAAGvN,EAAEuN,EAAE,IAAI5c,EAAEqM,IAAIs2E,GAAG3iF,EAAEqM,KAAI,WAAW/O,EAAEqlF,CAAC,GAAEkvC,EAAE,EAAE9qH,GAAG,GAAG8rC,QAAQg/E,EAAE,EAAE9qH,GAAG,GAAG8rC,QAAQg/E,EAAE,GAAG,GAAG6lB,KAAK7lB,EAAE,GAAG,GAAG6lB,MAAM13I,EAAEqM,IAAIuQ,EAAE,GAAG0hK,MAAM79I,EAAE7jB,EAAE,IAAI,WAAW,OAAO6jB,EAAE7jB,EAAE,GAAG,QAAQrlB,OAAOkpC,OAAE,EAAOlpC,KAAKyD,WAAWzD,IAAI,EAAEkpC,EAAE7jB,EAAE,GAAG,QAAQ5c,EAAEq+K,QAAQ,IAAGhvK,EAAEqhB,QAAQ+P,GAAG15B,GAAGA,EAAEwD,KAAKk2B,EAAEA,GAAGA,CAAC,EAAEw+I,KAAK,SAASl4K,GAAG,IAAI/G,EAAEhF,UAAUC,OAAO2hB,EAAE5c,EAAE2iF,EAAEjrF,MAAMklB,GAAGtf,EAAEmjC,EAAEl2B,KAAKvP,WAAW62H,EAAE+pC,EAAEprI,WAAWnhB,EAAE,SAASuN,GAAG,OAAO,SAAS7V,GAAG47E,EAAE/lE,GAAGrlB,KAAK+F,EAAEsf,GAAG,EAAE5hB,UAAUC,OAAOwlC,EAAEl2B,KAAKvP,WAAW+L,IAAI/G,GAAG6xH,EAAE+sD,YAAYj8F,EAAErlF,EAAE,CAAC,EAAE,GAAG0C,GAAG,IAAIq9J,EAAEt2J,EAAE8qH,EAAEt4D,KAAKlqD,EAAEuN,IAAI/Q,QAAQgmH,EAAE/lH,QAAQ9L,GAAG,YAAY6xH,EAAE/1G,SAASxM,EAAEhS,EAAEsf,IAAItf,EAAEsf,GAAGtF,OAAO,OAAOu6G,EAAEv6G,OAAO,KAAMsF,KAAIygJ,EAAE//J,EAAEsf,GAAGvN,EAAEuN,GAAGi1G,EAAE/lH,QAAQ,OAAO+lH,EAAEnhG,SAAS,IAAI,IAAIirI,EAAE,yDAAyDC,EAAEprI,SAASquJ,cAAc,SAAS93K,EAAE6V,GAAGy+I,EAAE56J,SAAS46J,EAAE56J,QAAQC,MAAMqG,GAAG40J,EAAEj6J,KAAKqF,EAAEzP,OAAO+jK,EAAE56J,QAAQC,KAAK,8BAA8BqG,EAAEjP,QAAQiP,EAAErO,MAAMkkB,EAAE,EAAEg/I,EAAEsjB,eAAe,SAASn4K,GAAGs0J,EAAErqI,YAAW,WAAW,MAAMjqB,CAAC,GAAE,EAAE,IAAIg2J,EAAEnB,EAAEprI,WAAW,SAAS4sI,IAAI97H,EAAEpQ,oBAAoB,mBAAmBksI,GAAG/B,EAAEnqI,oBAAoB,OAAOksI,GAAGxB,EAAE1jH,OAAO,CAAC0jH,EAAE1kG,GAAGhf,MAAM,SAASnxC,GAAG,OAAOg2J,EAAEzlJ,KAAKvQ,GAAU,OAAE,SAASA,GAAG60J,EAAEsjB,eAAen4K,EAAE,IAAGxP,IAAI,EAAEqkK,EAAE6a,OAAO,CAACnT,SAAQ,EAAG6b,UAAU,EAAEjnI,MAAM,SAASnxC,KAAI,IAAKA,IAAI60J,EAAEujB,UAAUvjB,EAAE0H,WAAW1H,EAAE0H,SAAQ,KAAMv8J,GAAG,IAAI60J,EAAEujB,WAAWpiB,EAAE6hB,YAAYt9I,EAAE,CAACs6H,GAAG,IAAIA,EAAE1jH,MAAM5gC,KAAKylJ,EAAEzlJ,KAAK,aAAagqB,EAAE+J,YAAY,YAAY/J,EAAE+J,aAAa/J,EAAEi4I,gBAAgB6F,SAAS/jB,EAAErqI,WAAW4qI,EAAE1jH,QAAQ5W,EAAEt+B,iBAAiB,mBAAmBo6J,GAAG/B,EAAEr4J,iBAAiB,OAAOo6J,IAAI,IAAIn7H,EAAE,SAASl7B,EAAE6V,EAAE5c,EAAE2iF,EAAErlF,EAAEu0H,EAAExiH,GAAG,IAAIoxB,EAAE,EAAEo6H,EAAE9zJ,EAAE9L,OAAOo2D,EAAE,MAAMrxD,EAAE,GAAG,WAAW28J,EAAE38J,GAAG,IAAIygC,KAAKnjC,GAAE,EAAG0C,EAAEiiC,EAAEl7B,EAAE6V,EAAE6jB,EAAEzgC,EAAEygC,IAAG,EAAGoxF,EAAExiH,QAAQ,QAAG,IAASszE,IAAIrlF,GAAE,EAAGgS,EAAEqzE,KAAKtzE,GAAE,GAAIgiD,IAAIhiD,GAAGuN,EAAErS,KAAKxD,EAAE47E,GAAG/lE,EAAE,OAAOy0C,EAAEz0C,EAAEA,EAAE,SAAS7V,EAAE6V,EAAE5c,GAAG,OAAOqxD,EAAE9mD,KAAKqxJ,EAAE70J,GAAG/G,EAAE,IAAI4c,GAAG,KAAK6jB,EAAEo6H,EAAEp6H,IAAI7jB,EAAE7V,EAAE05B,GAAGzgC,EAAEqP,EAAEszE,EAAEA,EAAEp4E,KAAKxD,EAAE05B,GAAGA,EAAE7jB,EAAE7V,EAAE05B,GAAGzgC,KAAK,OAAO1C,EAAEyJ,EAAEsqD,EAAEz0C,EAAErS,KAAKxD,GAAG8zJ,EAAEj+I,EAAE7V,EAAE,GAAG/G,GAAG6xH,CAAC,EAAE6rC,EAAE,QAAQv7H,EAAE,YAAY,SAASg7H,EAAEp2J,EAAE6V,GAAG,OAAOA,EAAEomE,aAAa,CAAC,SAASi7E,EAAEl3J,GAAG,OAAOA,EAAE4/B,QAAQ+2H,EAAE,OAAO/2H,QAAQxE,EAAEg7H,EAAE,CAAC,IAAIQ,EAAE,SAAS52J,GAAG,OAAO,IAAIA,EAAE+uK,UAAU,IAAI/uK,EAAE+uK,YAAY/uK,EAAE+uK,QAAQ,EAAE,SAAS9X,IAAIzmK,KAAKo/K,QAAQ/a,EAAE+a,QAAQ3Y,EAAEqhB,KAAK,CAACrhB,EAAEqhB,IAAI,EAAErhB,EAAErlK,UAAU,CAACyM,MAAM,SAAS2B,GAAG,IAAI6V,EAAE7V,EAAExP,KAAKo/K,SAAS,OAAO/5J,IAAIA,EAAE,CAAC,EAAE+gJ,EAAE52J,KAAKA,EAAE+uK,SAAS/uK,EAAExP,KAAKo/K,SAAS/5J,EAAEhkB,OAAOwG,eAAe2H,EAAExP,KAAKo/K,QAAQ,CAACz3K,MAAM0d,EAAEtd,cAAa,MAAOsd,CAAC,EAAES,IAAI,SAAStW,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAE/F,KAAK6N,MAAM2B,GAAG,GAAG,iBAAiB6V,EAAEtf,EAAE2gK,EAAErhJ,IAAI5c,OAAO,IAAI2iF,KAAK/lE,EAAEtf,EAAE2gK,EAAEt7E,IAAI/lE,EAAE+lE,GAAG,OAAOrlF,CAAC,EAAE4e,IAAI,SAASnV,EAAE6V,GAAG,YAAO,IAASA,EAAErlB,KAAK6N,MAAM2B,GAAGA,EAAExP,KAAKo/K,UAAU5vK,EAAExP,KAAKo/K,SAAS1Y,EAAErhJ,GAAG,EAAE0iK,OAAO,SAASv4K,EAAE6V,EAAE5c,GAAG,YAAO,IAAS4c,GAAGA,GAAG,iBAAiBA,QAAG,IAAS5c,EAAEzI,KAAK2kB,IAAInV,EAAE6V,IAAIrlB,KAAK8lB,IAAItW,EAAE6V,EAAE5c,QAAG,IAASA,EAAEA,EAAE4c,EAAE,EAAE+iC,OAAO,SAAS54C,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAE57E,EAAExP,KAAKo/K,SAAS,QAAG,IAASh0F,EAAE,CAAC,QAAG,IAAS/lE,EAAE,CAAC5c,GAAG4c,EAAEllB,MAAMC,QAAQilB,GAAGA,EAAEqY,IAAIgpI,IAAIrhJ,EAAEqhJ,EAAErhJ,MAAM+lE,EAAE,CAAC/lE,GAAGA,EAAElgB,MAAMmgK,IAAI,IAAI5hK,OAAO,KAAM+E,YAAW2iF,EAAE/lE,EAAE5c,GAAG,OAAE,IAAS4c,GAAGg/I,EAAEj6E,cAAcgB,MAAM57E,EAAE+uK,SAAS/uK,EAAExP,KAAKo/K,cAAS,SAAc5vK,EAAExP,KAAKo/K,SAAS,CAAC,EAAE4I,QAAQ,SAASx4K,GAAG,IAAI6V,EAAE7V,EAAExP,KAAKo/K,SAAS,YAAO,IAAS/5J,IAAIg/I,EAAEj6E,cAAc/kE,EAAE,GAAG,IAAI86J,EAAE,IAAI1Z,EAAEP,EAAE,IAAIO,EAAEH,GAAE,gCAAgCD,GAAE,SAAS,SAASc,GAAE33J,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAE,QAAG,IAAS0C,GAAG,IAAI+G,EAAE+uK,SAAS,GAAGnzF,EAAE,QAAQ/lE,EAAE+pB,QAAQi3H,GAAE,OAAOr+G,cAAc,iBAAiBv/C,EAAE+G,EAAEs7B,aAAasgD,IAAI,CAAC,IAAI3iF,EAAE,UAAU1C,EAAE0C,IAAI,UAAU1C,IAAI,SAASA,EAAE,KAAKA,KAAKA,EAAE,IAAIA,EAAEugK,GAAEn8J,KAAKpE,GAAG4C,KAAK24B,MAAMv7B,GAAGA,EAAE,CAAC,MAAMyJ,GAAG,CAAC02J,EAAEpgJ,IAAItW,EAAE6V,EAAE5c,EAAE,MAAMA,OAAE,EAAO,OAAOA,CAAC,CAAC47J,EAAE6a,OAAO,CAAC8I,QAAQ,SAASx4K,GAAG,OAAO02J,EAAE8hB,QAAQx4K,IAAI2wK,EAAE6H,QAAQx4K,EAAE,EAAE4B,KAAK,SAAS5B,EAAE6V,EAAE5c,GAAG,OAAOy9J,EAAE6hB,OAAOv4K,EAAE6V,EAAE5c,EAAE,EAAEw/K,WAAW,SAASz4K,EAAE6V,GAAG6gJ,EAAE99G,OAAO54C,EAAE6V,EAAE,EAAE8zG,MAAM,SAAS3pH,EAAE6V,EAAE5c,GAAG,OAAO03K,EAAE4H,OAAOv4K,EAAE6V,EAAE5c,EAAE,EAAEy/K,YAAY,SAAS14K,EAAE6V,GAAG86J,EAAE/3H,OAAO54C,EAAE6V,EAAE,IAAIg/I,EAAE1kG,GAAGu/G,OAAO,CAAC9tK,KAAK,SAAS3I,EAAE+G,GAAG,IAAI6V,EAAE+lE,EAAErlF,EAAEu0H,EAAEt6H,KAAK,GAAG8X,EAAEwiH,GAAGA,EAAEp3H,WAAW,QAAG,IAASuF,EAAE,CAAC,GAAGzI,KAAK0D,SAASqC,EAAEmgK,EAAEvhJ,IAAI21G,GAAG,IAAIA,EAAEikD,WAAW4B,EAAEx7J,IAAI21G,EAAE,iBAAiB,CAAY,IAAXj1G,EAAEvN,EAAEpU,OAAa2hB,KAAIvN,EAAEuN,IAAI,KAAK+lE,EAAEtzE,EAAEuN,GAAGtlB,MAAMa,QAAQ,WAAWwqF,EAAEs7E,EAAEt7E,EAAE/qF,MAAM,IAAI8mK,GAAE7sC,EAAElvC,EAAErlF,EAAEqlF,KAAK+0F,EAAEr6J,IAAIw0G,EAAE,gBAAe,EAAG,CAAC,OAAOv0H,CAAC,CAAC,MAAM,iBAAiB0C,EAAEzI,KAAK2qC,MAAK,WAAWu7H,EAAEpgJ,IAAI9lB,KAAKyI,EAAE,IAAGiiC,EAAE1qC,MAAK,SAASwP,GAAG,IAAI6V,EAAE,GAAGi1G,QAAG,IAAS9qH,EAAE,YAAO,KAAU6V,EAAE6gJ,EAAEvhJ,IAAI21G,EAAE7xH,UAAM,KAAU4c,EAAE8hJ,GAAE7sC,EAAE7xH,IAAlB4c,OAAwB,EAAOrlB,KAAK2qC,MAAK,WAAWu7H,EAAEpgJ,IAAI9lB,KAAKyI,EAAE+G,EAAE,GAAE,GAAE,KAAKA,EAAE,EAAE/L,UAAUC,OAAO,MAAK,EAAG,EAAEukL,WAAW,SAASz4K,GAAG,OAAOxP,KAAK2qC,MAAK,WAAWu7H,EAAE99G,OAAOpoD,KAAKwP,EAAE,GAAE,IAAI60J,EAAE6a,OAAO,CAACr6G,MAAM,SAASr1D,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAE,GAAG57E,EAAE,OAAO6V,GAAGA,GAAG,MAAM,QAAQ+lE,EAAE+0F,EAAEx7J,IAAInV,EAAE6V,GAAG5c,KAAK2iF,GAAGjrF,MAAMC,QAAQqI,GAAG2iF,EAAE+0F,EAAE4H,OAAOv4K,EAAE6V,EAAEg/I,EAAEkb,UAAU92K,IAAI2iF,EAAE97E,KAAK7G,IAAI2iF,GAAG,EAAE,EAAE+8F,QAAQ,SAAS34K,EAAE6V,GAAGA,EAAEA,GAAG,KAAK,IAAI5c,EAAE47J,EAAEx/F,MAAMr1D,EAAE6V,GAAG+lE,EAAE3iF,EAAE/E,OAAOqC,EAAE0C,EAAEspC,QAAQuoF,EAAE+pC,EAAE+jB,YAAY54K,EAAE6V,GAAG,eAAetf,IAAIA,EAAE0C,EAAEspC,QAAQq5C,KAAKrlF,IAAI,OAAOsf,GAAG5c,EAAEiwD,QAAQ,qBAAqB4hE,EAAE/gH,KAAKxT,EAAEiN,KAAKxD,GAAE,WAAW60J,EAAE8jB,QAAQ34K,EAAE6V,EAAE,GAAEi1G,KAAKlvC,GAAGkvC,GAAGA,EAAEn2D,MAAM4iH,MAAM,EAAEqB,YAAY,SAAS54K,EAAE6V,GAAG,IAAI5c,EAAE4c,EAAE,aAAa,OAAO86J,EAAEx7J,IAAInV,EAAE/G,IAAI03K,EAAE4H,OAAOv4K,EAAE/G,EAAE,CAAC07D,MAAMkgG,EAAEsiB,UAAU,eAAe7xK,KAAI,WAAWqrK,EAAE/3H,OAAO54C,EAAE,CAAC6V,EAAE,QAAQ5c,GAAG,KAAI,IAAI47J,EAAE1kG,GAAGu/G,OAAO,CAACr6G,MAAM,SAASx/C,EAAE5c,GAAG,IAAI+G,EAAE,EAAE,MAAM,iBAAiB6V,IAAI5c,EAAE4c,EAAEA,EAAE,KAAK7V,KAAK/L,UAAUC,OAAO8L,EAAE60J,EAAEx/F,MAAM7kE,KAAK,GAAGqlB,QAAG,IAAS5c,EAAEzI,KAAKA,KAAK2qC,MAAK,WAAW,IAAIn7B,EAAE60J,EAAEx/F,MAAM7kE,KAAKqlB,EAAE5c,GAAG47J,EAAE+jB,YAAYpoL,KAAKqlB,GAAG,OAAOA,GAAG,eAAe7V,EAAE,IAAI60J,EAAE8jB,QAAQnoL,KAAKqlB,EAAE,GAAE,EAAE8iK,QAAQ,SAAS34K,GAAG,OAAOxP,KAAK2qC,MAAK,WAAW05H,EAAE8jB,QAAQnoL,KAAKwP,EAAE,GAAE,EAAE64K,WAAW,SAAS74K,GAAG,OAAOxP,KAAK6kE,MAAMr1D,GAAG,KAAK,GAAG,EAAE2pB,QAAQ,SAAS3pB,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAE,EAAErlF,EAAEs+J,EAAEprI,WAAWqhG,EAAEt6H,KAAK8X,EAAE9X,KAAK0D,OAAOwlC,EAAE,aAAakiD,GAAGrlF,EAAEshL,YAAY/sD,EAAE,CAACA,GAAG,EAA+C,IAA7C,iBAAiB9qH,IAAI6V,EAAE7V,EAAEA,OAAE,GAAQA,EAAEA,GAAG,KAAWsI,MAAKrP,EAAE03K,EAAEx7J,IAAI21G,EAAExiH,GAAGtI,EAAE,gBAAgB/G,EAAE07D,QAAQinB,IAAI3iF,EAAE07D,MAAMrvD,IAAIo0B,IAAI,OAAOA,IAAInjC,EAAEozB,QAAQ9T,EAAE,IAAI,IAAIoiJ,GAAG,sCAAsCtkK,OAAOirF,GAAG,IAAIuD,OAAO,iBAAiB81E,GAAG,cAAc,KAAKlC,GAAG,CAAC,MAAM,QAAQ,SAAS,QAAQoC,GAAG59H,EAAEi4I,gBAAgBjM,GAAG,SAASvmK,GAAG,OAAO60J,EAAE2e,SAASxzK,EAAEixK,cAAcjxK,EAAE,EAAE4wK,GAAG,CAACkI,UAAS,GAAI3gB,GAAG4gB,cAAcxS,GAAG,SAASvmK,GAAG,OAAO60J,EAAE2e,SAASxzK,EAAEixK,cAAcjxK,IAAIA,EAAE+4K,YAAYnI,MAAM5wK,EAAEixK,aAAa,GAAG,IAAIlY,GAAG,SAAS/4J,EAAE6V,GAAG,MAAM,UAAU7V,EAAE6V,GAAG7V,GAAG8wH,MAAM+wB,SAAS,KAAK7hJ,EAAE8wH,MAAM+wB,SAAS0kB,GAAGvmK,IAAI,SAAS60J,EAAEmkB,IAAIh5K,EAAE,UAAU,EAAMgxK,GAAG,CAAC,EAAE,SAASb,GAAGnwK,EAAE6V,GAAG,IAAI,IAAI5c,EAAE2iF,EAAErlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAE,GAAGrxB,EAAE,EAAEwD,EAAEz8B,EAAE9L,OAAO+kC,EAAEwD,EAAExD,KAAK2iD,EAAE57E,EAAEi5B,IAAI63F,QAAQ73H,EAAE2iF,EAAEk1C,MAAM+wB,QAAQhsI,GAAG,SAAS5c,IAAIqxD,EAAErxB,GAAG03I,EAAEx7J,IAAIymE,EAAE,YAAY,KAAKtxB,EAAErxB,KAAK2iD,EAAEk1C,MAAM+wB,QAAQ,KAAK,KAAKjmE,EAAEk1C,MAAM+wB,SAASkX,GAAGn9E,KAAKtxB,EAAErxB,IAAI66H,EAAExrJ,EAAEwiH,OAAE,EAAOxiH,GAAG/R,EAAEqlF,GAAGq1F,cAAcv3I,EAAEnjC,EAAE49C,UAAU2/G,EAAEkd,GAAGt3I,MAAMoxF,EAAExiH,EAAE+qB,KAAKwrB,YAAYv2C,EAAE6iF,cAAczxD,IAAIo6H,EAAEe,EAAEmkB,IAAIluD,EAAE,WAAWA,EAAE6vC,WAAW3pC,YAAYlG,GAAG,SAASgpC,IAAIA,EAAE,SAASkd,GAAGt3I,GAAGo6H,MAAM,SAAS76J,IAAIqxD,EAAErxB,GAAG,OAAO03I,EAAEr6J,IAAIslE,EAAE,UAAU3iF,KAAK,IAAIggC,EAAE,EAAEA,EAAEwD,EAAExD,IAAI,MAAMqxB,EAAErxB,KAAKj5B,EAAEi5B,GAAG63F,MAAM+wB,QAAQv3F,EAAErxB,IAAI,OAAOj5B,CAAC,CAAC60J,EAAE1kG,GAAGu/G,OAAO,CAACuJ,KAAK,WAAW,OAAO9I,GAAG3/K,MAAK,EAAG,EAAE0oL,KAAK,WAAW,OAAO/I,GAAG3/K,KAAK,EAAE2oL,OAAO,SAASn5K,GAAG,MAAM,kBAAkBA,EAAEA,EAAExP,KAAKyoL,OAAOzoL,KAAK0oL,OAAO1oL,KAAK2qC,MAAK,WAAW49H,GAAGvoK,MAAMqkK,EAAErkK,MAAMyoL,OAAOpkB,EAAErkK,MAAM0oL,MAAM,GAAE,IAAI,IAAIvH,GAAGC,GAAGC,GAAG,wBAAwBE,GAAG,iCAAiCE,GAAG,qCAAqCN,GAAGp3I,EAAE6+I,yBAAyBv6H,YAAYtkB,EAAE4wD,cAAc,SAASymF,GAAGr3I,EAAE4wD,cAAc,UAAU/8B,aAAa,OAAO,SAASwjH,GAAGxjH,aAAa,UAAU,WAAWwjH,GAAGxjH,aAAa,OAAO,KAAKujH,GAAG9yH,YAAY+yH,IAAI/0J,EAAEw8J,WAAW1H,GAAG2H,WAAU,GAAIA,WAAU,GAAIhF,UAAUS,QAAQpD,GAAGp5H,UAAU,yBAAyB17B,EAAE08J,iBAAiB5H,GAAG2H,WAAU,GAAIhF,UAAU6B,aAAaxE,GAAGp5H,UAAU,oBAAoB17B,EAAE28J,SAAS7H,GAAG2C,UAAU,IAAIpC,GAAG,CAACuH,MAAM,CAAC,EAAE,UAAU,YAAYC,IAAI,CAAC,EAAE,oBAAoB,uBAAuBC,GAAG,CAAC,EAAE,iBAAiB,oBAAoBC,GAAG,CAAC,EAAE,qBAAqB,yBAAyBC,SAAS,CAAC,EAAE,GAAG,KAAK,SAAS1H,GAAGnyK,EAAE6V,GAAG,IAAI5c,EAAE,OAAOA,OAAE,IAAoB+G,EAAE43C,qBAAqB53C,EAAE43C,qBAAqB/hC,GAAG,UAAK,IAAoB7V,EAAEwxK,iBAAiBxxK,EAAEwxK,iBAAiB37J,GAAG,KAAK,QAAG,IAASA,GAAGA,GAAGm/I,EAAEh1J,EAAE6V,GAAGg/I,EAAE1yB,MAAM,CAACniI,GAAG/G,GAAGA,CAAC,CAAC,SAASo5K,GAAGryK,EAAE6V,GAAG,IAAI,IAAI5c,EAAE,EAAE2iF,EAAE57E,EAAE9L,OAAO+E,EAAE2iF,EAAE3iF,IAAI03K,EAAEr6J,IAAItW,EAAE/G,GAAG,cAAc4c,GAAG86J,EAAEx7J,IAAIU,EAAE5c,GAAG,cAAc,CAACi5K,GAAG4H,MAAM5H,GAAG6H,MAAM7H,GAAG8H,SAAS9H,GAAG+H,QAAQ/H,GAAGuH,MAAMvH,GAAGgI,GAAGhI,GAAG0H,GAAG/8J,EAAE28J,SAAStH,GAAGiI,SAASjI,GAAGsH,OAAO,CAAC,EAAE,+BAA+B,cAAc,IAAInI,GAAG,YAAY,SAASljG,GAAGnuE,EAAE6V,EAAE5c,EAAE2iF,EAAErlF,GAAG,IAAI,IAAIu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAErxB,EAAEwD,EAAE5mB,EAAEujK,yBAAyBxoJ,EAAE,GAAGlM,EAAE,EAAE6vI,EAAEv0J,EAAE9L,OAAOwwB,EAAE6vI,EAAE7vI,IAAI,IAAIomG,EAAE9qH,EAAE0kB,KAAK,IAAIomG,EAAE,GAAG,WAAW8qC,EAAE9qC,GAAG+pC,EAAE1yB,MAAMvxG,EAAEk6F,EAAEikD,SAAS,CAACjkD,GAAGA,QAAQ,GAAGumD,GAAG12K,KAAKmwH,GAAG,CAA0J,IAAzJxiH,EAAEA,GAAGm0B,EAAEoiB,YAAYhpC,EAAEs1E,cAAc,QAAQzxD,GAAGq4I,GAAGrhG,KAAKo6C,IAAI,CAAC,GAAG,KAAK,GAAGtyE,cAAcs7G,EAAEoe,GAAGx4I,IAAIw4I,GAAG2H,SAASvxK,EAAEiwC,UAAUu7G,EAAE,GAAGe,EAAEulB,cAActvD,GAAGgpC,EAAE,GAAG76H,EAAE66H,EAAE,GAAS76H,KAAI3wB,EAAEA,EAAEgsK,UAAUzf,EAAE1yB,MAAMvxG,EAAEtoB,EAAEyoK,aAAazoK,EAAEm0B,EAAEu3I,YAAYn8H,YAAY,EAAE,MAAMjnB,EAAE9wB,KAAK+V,EAAEwkK,eAAevvD,IAAyB,IAArBruF,EAAEob,YAAY,GAAGnzB,EAAE,EAAQomG,EAAEl6F,EAAElM,SAAQk3D,IAAI,EAAEi5E,EAAEmb,QAAQllD,EAAElvC,GAAGrlF,GAAGA,EAAEuJ,KAAKgrH,QAAQ,GAAGxgE,EAAEi8G,GAAGz7C,GAAGxiH,EAAE6pK,GAAG11I,EAAEoiB,YAAYisE,GAAG,UAAUxgE,GAAG+nH,GAAG/pK,GAAGrP,EAAO,IAAJggC,EAAE,EAAQ6xF,EAAExiH,EAAE2wB,MAAKg5I,GAAGt3K,KAAKmwH,EAAEl3H,MAAM,KAAKqF,EAAE6G,KAAKgrH,GAAG,OAAOruF,CAAC,CAAC,IAAI80I,GAAG,sBAAsB,SAASV,KAAK,OAAM,CAAE,CAAC,SAAS8E,KAAK,OAAM,CAAE,CAAC,SAASC,GAAG51K,EAAE6V,GAAG,OAAO7V,IAAI,WAAW,IAAI,OAAOu6B,EAAEq6I,aAAa,CAAC,MAAM50K,GAAG,CAAC,CAAhD,KAAsD,UAAU6V,EAAE,CAAC,SAASggK,GAAG71K,EAAE6V,EAAE5c,EAAE2iF,EAAErlF,EAAEu0H,GAAG,IAAIxiH,EAAEoxB,EAAE,GAAG,iBAAiB7jB,EAAE,CAAC,IAAI6jB,IAAI,iBAAiBzgC,IAAI2iF,EAAEA,GAAG3iF,EAAEA,OAAE,GAAQ4c,EAAEggK,GAAG71K,EAAE05B,EAAEzgC,EAAE2iF,EAAE/lE,EAAE6jB,GAAGoxF,GAAG,OAAO9qH,CAAC,CAAC,GAAG,MAAM47E,GAAG,MAAMrlF,GAAGA,EAAE0C,EAAE2iF,EAAE3iF,OAAE,GAAQ,MAAM1C,IAAI,iBAAiB0C,GAAG1C,EAAEqlF,EAAEA,OAAE,IAASrlF,EAAEqlF,EAAEA,EAAE3iF,EAAEA,OAAE,KAAS,IAAK1C,EAAEA,EAAEo/K,QAAQ,IAAIp/K,EAAE,OAAOyJ,EAAE,OAAO,IAAI8qH,IAAIxiH,EAAE/R,GAAGA,EAAE,SAASyJ,GAAG,OAAO60J,IAAIzqI,IAAIpqB,GAAGsI,EAAEvF,MAAMvS,KAAKyD,UAAU,GAAGg8K,KAAK3nK,EAAE2nK,OAAO3nK,EAAE2nK,KAAKpb,EAAEob,SAASjwK,EAAEm7B,MAAK,WAAW05H,EAAE51J,MAAMqG,IAAI9U,KAAKqlB,EAAEtf,EAAEqlF,EAAE3iF,EAAE,GAAE,CAAC,SAAS68K,GAAG91K,EAAEzJ,EAAEu0H,GAAGA,GAAG6lD,EAAEr6J,IAAItW,EAAEzJ,GAAE,GAAIs+J,EAAE51J,MAAMqG,IAAItF,EAAEzJ,EAAE,CAAC+jL,WAAU,EAAGz7K,QAAQ,SAASmB,GAAG,IAAI6V,EAAE5c,EAAE2iF,EAAE+0F,EAAEx7J,IAAI3kB,KAAK+F,GAAG,GAAG,EAAEyJ,EAAEu6K,WAAW/pL,KAAK+F,IAAI,GAAGqlF,EAAE1nF,QAAQ2gK,EAAE51J,MAAMu7K,QAAQjkL,IAAI,CAAC,GAAGkkL,cAAcz6K,EAAE06K,uBAAuB,GAAG9+F,EAAEliD,EAAEl2B,KAAKvP,WAAW08K,EAAEr6J,IAAI9lB,KAAK+F,EAAEqlF,GAAG/lE,EAAEi1G,EAAEt6H,KAAK+F,GAAG/F,KAAK+F,KAAKqlF,KAAK3iF,EAAE03K,EAAEx7J,IAAI3kB,KAAK+F,KAAKsf,EAAE86J,EAAEr6J,IAAI9lB,KAAK+F,GAAE,GAAI0C,EAAE,CAAC,EAAE2iF,IAAI3iF,EAAE,OAAO+G,EAAE26K,2BAA2B36K,EAAE46K,iBAAiB3hL,GAAGA,EAAEd,WAAWyjF,EAAE1nF,SAASy8K,EAAEr6J,IAAI9lB,KAAK+F,EAAE,CAAC4B,MAAM08J,EAAE51J,MAAM42D,QAAQg/F,EAAE6a,OAAO9zF,EAAE,GAAGi5E,EAAE/1E,MAAMltF,WAAWgqF,EAAE/qF,MAAM,GAAGL,QAAQwP,EAAE26K,2BAA2B,UAAK,IAAShK,EAAEx7J,IAAInV,EAAEzJ,IAAIs+J,EAAE51J,MAAMqG,IAAItF,EAAEzJ,EAAEs6K,GAAG,CAAChc,EAAE51J,MAAM,CAAC47K,OAAO,CAAC,EAAEv1K,IAAI,SAASuQ,EAAE7V,EAAE/G,EAAE2iF,EAAErlF,GAAG,IAAIu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAErxB,EAAEwD,EAAE7L,EAAElM,EAAE6vI,EAAED,EAAEpgJ,EAAEy8J,EAAEx7J,IAAIU,GAAG,GAAG+gJ,EAAE/gJ,GAAsU,IAAlU5c,EAAE4F,UAAU5F,GAAG6xH,EAAE7xH,GAAG4F,QAAQtI,EAAEu0H,EAAE3qC,UAAU5pF,GAAGs+J,EAAEpwI,KAAKwuJ,gBAAgB9a,GAAG5hK,GAAG0C,EAAEg3K,OAAOh3K,EAAEg3K,KAAKpb,EAAEob,SAASnc,EAAE5/I,EAAEmiB,UAAUy9H,EAAE5/I,EAAEmiB,OAAOxkC,OAAOC,OAAO,QAAQwW,EAAE4L,EAAE4mK,UAAUxyK,EAAE4L,EAAE4mK,OAAO,SAAS96K,GAAG,YAAM,IAAoB60J,GAAGA,EAAE51J,MAAM87K,YAAY/6K,EAAEpM,KAAKihK,EAAE51J,MAAMuvJ,SAASzrJ,MAAM8S,EAAE5hB,gBAAW,CAAM,GAAGq2D,GAAGtqD,GAAGA,GAAG,IAAIrK,MAAMmgK,IAAI,CAAC,KAAK5hK,OAAao2D,KAAI5lC,EAAE4vI,GAAG56H,EAAE63I,GAAG7gG,KAAK1wE,EAAEsqD,KAAK,IAAI,GAAGiqG,GAAG76H,EAAE,IAAI,IAAIviB,MAAM,KAAK8d,OAAOvQ,IAAI+X,EAAEo4H,EAAE51J,MAAMu7K,QAAQ91J,IAAI,CAAC,EAAEA,GAAGnuB,EAAEkmC,EAAEg+I,aAAah+I,EAAEu+I,WAAWt2J,EAAE+X,EAAEo4H,EAAE51J,MAAMu7K,QAAQ91J,IAAI,CAAC,EAAEuU,EAAE47H,EAAE6a,OAAO,CAAC97K,KAAK8wB,EAAEu2J,SAAS3mB,EAAE1yJ,KAAKg6E,EAAE/8E,QAAQ5F,EAAEg3K,KAAKh3K,EAAEg3K,KAAK9vF,SAAS5pF,EAAEm6K,aAAan6K,GAAGs+J,EAAEv7E,KAAK3jF,MAAM+6K,aAAa/1K,KAAKpE,GAAG+jL,UAAU/lB,EAAEvjK,KAAK,MAAM85H,IAAIl6F,EAAEkjI,EAAEpvI,OAAOkM,EAAEkjI,EAAEpvI,GAAG,IAAIw2J,cAAc,EAAEz+I,EAAE8wB,QAAO,IAAK9wB,EAAE8wB,MAAM/pD,KAAKqS,EAAE+lE,EAAE24E,EAAEjsJ,IAAIuN,EAAE5Z,kBAAkB4Z,EAAE5Z,iBAAiByoB,EAAEpc,IAAIm0B,EAAEn3B,MAAMm3B,EAAEn3B,IAAI9B,KAAKqS,EAAEojB,GAAGA,EAAEp6B,QAAQoxK,OAAOh3I,EAAEp6B,QAAQoxK,KAAKh3K,EAAEg3K,OAAO15K,EAAEq6B,EAAE7wB,OAAO6wB,EAAEsqJ,gBAAgB,EAAEjiJ,GAAGrI,EAAE9wB,KAAKm5B,GAAG47H,EAAE51J,MAAM47K,OAAOn2J,IAAG,EAAI,EAAEk0B,OAAO,SAAS54C,EAAE6V,EAAE5c,EAAE2iF,EAAErlF,GAAG,IAAIu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAErxB,EAAEwD,EAAE7L,EAAElM,EAAE6vI,EAAED,EAAEpgJ,EAAEy8J,EAAE6H,QAAQx4K,IAAI2wK,EAAEx7J,IAAInV,GAAG,GAAGkU,IAAI4/I,EAAE5/I,EAAEmiB,QAAQ,CAAqC,IAApCi0B,GAAGz0C,GAAGA,GAAG,IAAIlgB,MAAMmgK,IAAI,CAAC,KAAK5hK,OAAao2D,QAAO5lC,EAAE4vI,GAAG56H,EAAE63I,GAAG7gG,KAAK76D,EAAEy0C,KAAK,IAAI,GAAGiqG,GAAG76H,EAAE,IAAI,IAAIviB,MAAM,KAAK8d,OAAOvQ,EAAE,CAAmJ,IAAlJ+X,EAAEo4H,EAAE51J,MAAMu7K,QAAQ91J,IAAI,CAAC,EAAEkM,EAAEkjI,EAAEpvI,GAAGk3D,EAAEn/C,EAAEg+I,aAAah+I,EAAEu+I,WAAWt2J,IAAI,GAAGgV,EAAEA,EAAE,IAAI,IAAIyoD,OAAO,UAAUoyE,EAAEvjK,KAAK,iBAAiB,WAAWsX,EAAEwiH,EAAEl6F,EAAE18B,OAAa42H,KAAI7xF,EAAErI,EAAEk6F,IAAIv0H,GAAG+9J,IAAIr7H,EAAEgiJ,UAAUhiL,GAAGA,EAAEg3K,OAAOh3I,EAAEg3I,MAAMv2I,IAAIA,EAAE/+B,KAAKs+B,EAAEqhJ,YAAY1+F,GAAGA,IAAI3iD,EAAEknD,WAAW,OAAOvE,IAAI3iD,EAAEknD,YAAYvvD,EAAE7wB,OAAO+qH,EAAE,GAAG7xF,EAAEknD,UAAUvvD,EAAEsqJ,gBAAgBz+I,EAAEmc,QAAQnc,EAAEmc,OAAOp1C,KAAKxD,EAAEi5B,IAAI3wB,IAAIsoB,EAAE18B,SAASuoC,EAAE0+I,WAAU,IAAK1+I,EAAE0+I,SAAS33K,KAAKxD,EAAEu0J,EAAErgJ,EAAE4mK,SAASjmB,EAAEumB,YAAYp7K,EAAE0kB,EAAExQ,EAAE4mK,eAAehnB,EAAEpvI,GAAG,MAAM,IAAIA,KAAKovI,EAAEe,EAAE51J,MAAM25C,OAAO54C,EAAE0kB,EAAE7O,EAAEy0C,GAAGrxD,EAAE2iF,GAAE,GAAIi5E,EAAEj6E,cAAck5E,IAAI6c,EAAE/3H,OAAO54C,EAAE,gBAAgB,CAAC,EAAEwuJ,SAAS,SAASxuJ,GAAG,IAAI6V,EAAE5c,EAAE2iF,EAAErlF,EAAEu0H,EAAExiH,EAAEoxB,EAAE,IAAI/oC,MAAMsD,UAAUC,QAAQ4/J,EAAEe,EAAE51J,MAAMo8K,IAAIr7K,GAAGsqD,GAAGqmH,EAAEx7J,IAAI3kB,KAAK,WAAWqB,OAAOC,OAAO,OAAOgiK,EAAElgK,OAAO,GAAGqlC,EAAE47H,EAAE51J,MAAMu7K,QAAQ1mB,EAAElgK,OAAO,CAAC,EAAE,IAAI8lC,EAAE,GAAGo6H,EAAEj+I,EAAE,EAAEA,EAAE5hB,UAAUC,OAAO2hB,IAAI6jB,EAAE7jB,GAAG5hB,UAAU4hB,GAAG,GAAGi+I,EAAEwnB,eAAe9qL,MAAMyoC,EAAEsiJ,cAAa,IAAKtiJ,EAAEsiJ,YAAY/3K,KAAKhT,KAAKsjK,GAAG,CAAuC,IAAtCxrJ,EAAEusJ,EAAE51J,MAAMF,SAASyE,KAAKhT,KAAKsjK,EAAExpG,GAAGz0C,EAAE,GAAStf,EAAE+R,EAAEuN,QAAQi+I,EAAE0nB,wBAAmD,IAA3B1nB,EAAE2nB,cAAcllL,EAAE0wC,KAAKhuC,EAAE,GAAS6xH,EAAEv0H,EAAEwI,SAAS9F,QAAQ66J,EAAE4nB,iCAAgC5nB,EAAE6nB,aAAY,IAAK7wD,EAAEwvD,YAAYxmB,EAAE6nB,WAAWhhL,KAAKmwH,EAAEwvD,aAAaxmB,EAAE8nB,UAAU9wD,EAAEgpC,EAAElyJ,KAAKkpH,EAAElpH,UAAK,KAAUg6E,IAAIi5E,EAAE51J,MAAMu7K,QAAQ1vD,EAAEmwD,WAAW,CAAC,GAAGH,QAAQhwD,EAAEjsH,SAASkE,MAAMxM,EAAE0wC,KAAKvN,MAAK,KAAMo6H,EAAEtjJ,OAAOorE,KAAKk4E,EAAE8mB,iBAAiB9mB,EAAE4mB,oBAAoB,OAAOzhJ,EAAE4iJ,cAAc5iJ,EAAE4iJ,aAAar4K,KAAKhT,KAAKsjK,GAAGA,EAAEtjJ,MAAM,CAAC,EAAEzR,SAAS,SAASiB,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAErlF,EAAEu0H,EAAExiH,EAAEoxB,EAAE,GAAGo6H,EAAEj+I,EAAEqlK,cAAc5wH,EAAEtqD,EAAE+iF,OAAO,GAAG+wE,GAAGxpG,EAAEykH,YAAY,UAAU/uK,EAAEpM,MAAM,GAAGoM,EAAEm1K,QAAQ,KAAK7qH,IAAI95D,KAAK85D,EAAEA,EAAEqwG,YAAYnqK,KAAK,GAAG,IAAI85D,EAAEykH,WAAW,UAAU/uK,EAAEpM,OAAM,IAAK02D,EAAEwZ,UAAU,CAAC,IAAIgnD,EAAE,GAAGxiH,EAAE,CAAC,EAAErP,EAAE,EAAEA,EAAE66J,EAAE76J,SAAI,IAASqP,EAAE/R,GAAGqlF,EAAE/lE,EAAE5c,IAAIknF,SAAS,OAAO73E,EAAE/R,GAAGqlF,EAAE80F,cAAc,EAAE7b,EAAEt+J,EAAE/F,MAAMk9B,MAAM48B,GAAGuqG,EAAEpwI,KAAKluB,EAAE/F,KAAK,KAAK,CAAC85D,IAAIp2D,QAAQoU,EAAE/R,IAAIu0H,EAAEhrH,KAAK87E,GAAGkvC,EAAE52H,QAAQwlC,EAAE55B,KAAK,CAACmnC,KAAKqjB,EAAEvrD,SAAS+rH,GAAG,CAAC,OAAOxgE,EAAE95D,KAAKsjK,EAAEj+I,EAAE3hB,QAAQwlC,EAAE55B,KAAK,CAACmnC,KAAKqjB,EAAEvrD,SAAS8W,EAAEhlB,MAAMijK,KAAKp6H,CAAC,EAAEoiJ,QAAQ,SAASjmK,EAAE7V,GAAGnO,OAAOwG,eAAew8J,EAAE/1E,MAAMltF,UAAUikB,EAAE,CAACvd,YAAW,EAAGC,cAAa,EAAG4c,IAAI5M,EAAEvI,GAAG,WAAW,GAAGxP,KAAKurL,cAAc,OAAO/7K,EAAExP,KAAKurL,cAAc,EAAE,WAAW,GAAGvrL,KAAKurL,cAAc,OAAOvrL,KAAKurL,cAAclmK,EAAE,EAAES,IAAI,SAAStW,GAAGnO,OAAOwG,eAAe7H,KAAKqlB,EAAE,CAACvd,YAAW,EAAGC,cAAa,EAAGC,UAAS,EAAGL,MAAM6H,GAAG,GAAG,EAAEq7K,IAAI,SAASr7K,GAAG,OAAOA,EAAE60J,EAAE+a,SAAS5vK,EAAE,IAAI60J,EAAE/1E,MAAM9+E,EAAE,EAAEw6K,QAAQ,CAACwB,KAAK,CAACC,UAAS,GAAIlrD,MAAM,CAACxjE,MAAM,SAASvtD,GAAG,IAAI6V,EAAErlB,MAAMwP,EAAE,OAAO6xK,GAAGl3K,KAAKkb,EAAEjiB,OAAOiiB,EAAEk7G,OAAOikC,EAAEn/I,EAAE,UAAUigK,GAAGjgK,EAAE,QAAQg7J,KAAI,CAAE,EAAEh7G,QAAQ,SAAS71D,GAAG,IAAI6V,EAAErlB,MAAMwP,EAAE,OAAO6xK,GAAGl3K,KAAKkb,EAAEjiB,OAAOiiB,EAAEk7G,OAAOikC,EAAEn/I,EAAE,UAAUigK,GAAGjgK,EAAE,UAAS,CAAE,EAAEgkK,SAAS,SAAS75K,GAAG,IAAI6V,EAAE7V,EAAE+iF,OAAO,OAAO8uF,GAAGl3K,KAAKkb,EAAEjiB,OAAOiiB,EAAEk7G,OAAOikC,EAAEn/I,EAAE,UAAU86J,EAAEx7J,IAAIU,EAAE,UAAUm/I,EAAEn/I,EAAE,IAAI,GAAGqmK,aAAa,CAACL,aAAa,SAAS77K,QAAG,IAASA,EAAEwQ,QAAQxQ,EAAE+7K,gBAAgB/7K,EAAE+7K,cAAcI,YAAYn8K,EAAEwQ,OAAO,KAAKqkJ,EAAEumB,YAAY,SAASp7K,EAAE6V,EAAE5c,GAAG+G,EAAEmqB,qBAAqBnqB,EAAEmqB,oBAAoBtU,EAAE5c,EAAE,EAAE47J,EAAE/1E,MAAM,SAAS9+E,EAAE6V,GAAG,KAAKrlB,gBAAgBqkK,EAAE/1E,OAAO,OAAO,IAAI+1E,EAAE/1E,MAAM9+E,EAAE6V,GAAG7V,GAAGA,EAAEpM,MAAMpD,KAAKurL,cAAc/7K,EAAExP,KAAKoD,KAAKoM,EAAEpM,KAAKpD,KAAK4rL,mBAAmBp8K,EAAEq8K,uBAAkB,IAASr8K,EAAEq8K,mBAAkB,IAAKr8K,EAAEm8K,YAAYtL,GAAG8E,GAAGnlL,KAAKuyF,OAAO/iF,EAAE+iF,QAAQ,IAAI/iF,EAAE+iF,OAAOgsF,SAAS/uK,EAAE+iF,OAAO43E,WAAW36J,EAAE+iF,OAAOvyF,KAAKirL,cAAcz7K,EAAEy7K,cAAcjrL,KAAK8rL,cAAct8K,EAAEs8K,eAAe9rL,KAAKoD,KAAKoM,EAAE6V,GAAGg/I,EAAE6a,OAAOl/K,KAAKqlB,GAAGrlB,KAAK+rL,UAAUv8K,GAAGA,EAAEu8K,WAAWjwK,KAAKC,MAAM/b,KAAKqkK,EAAE+a,UAAS,CAAE,EAAE/a,EAAE/1E,MAAMltF,UAAU,CAACG,YAAY8iK,EAAE/1E,MAAMs9F,mBAAmBzG,GAAG6F,qBAAqB7F,GAAG+F,8BAA8B/F,GAAG6G,aAAY,EAAG5B,eAAe,WAAW,IAAI56K,EAAExP,KAAKurL,cAAcvrL,KAAK4rL,mBAAmBvL,GAAG7wK,IAAIxP,KAAKgsL,aAAax8K,EAAE46K,gBAAgB,EAAEF,gBAAgB,WAAW,IAAI16K,EAAExP,KAAKurL,cAAcvrL,KAAKgrL,qBAAqB3K,GAAG7wK,IAAIxP,KAAKgsL,aAAax8K,EAAE06K,iBAAiB,EAAEC,yBAAyB,WAAW,IAAI36K,EAAExP,KAAKurL,cAAcvrL,KAAKkrL,8BAA8B7K,GAAG7wK,IAAIxP,KAAKgsL,aAAax8K,EAAE26K,2BAA2BnqL,KAAKkqL,iBAAiB,GAAG7lB,EAAE15H,KAAK,CAACshJ,QAAO,EAAGC,SAAQ,EAAGC,YAAW,EAAGC,gBAAe,EAAGC,SAAQ,EAAGC,QAAO,EAAGC,YAAW,EAAGC,SAAQ,EAAGC,OAAM,EAAGC,OAAM,EAAGC,UAAS,EAAGnzD,MAAK,EAAG,MAAO,EAAG59C,MAAK,EAAGgxG,UAAS,EAAGllL,KAAI,EAAGmlL,SAAQ,EAAGlI,QAAO,EAAGmI,SAAQ,EAAGC,SAAQ,EAAGC,SAAQ,EAAGC,SAAQ,EAAGC,SAAQ,EAAGC,WAAU,EAAGC,aAAY,EAAGC,SAAQ,EAAGC,SAAQ,EAAGC,eAAc,EAAGC,WAAU,EAAGC,SAAQ,EAAGC,OAAM,GAAIrpB,EAAE51J,MAAM68K,SAASjnB,EAAE15H,KAAK,CAAC2U,MAAM,UAAUquI,KAAK,aAAY,SAAStoK,EAAE7V,GAAG60J,EAAE51J,MAAMu7K,QAAQ3kK,GAAG,CAAC03C,MAAM,WAAW,OAAOuoH,GAAGtlL,KAAKqlB,EAAE+/J,KAAI,CAAE,EAAE//G,QAAQ,WAAW,OAAOigH,GAAGtlL,KAAKqlB,IAAG,CAAE,EAAEgkK,SAAS,SAAS75K,GAAG,OAAO2wK,EAAEx7J,IAAInV,EAAE+iF,OAAOltE,EAAE,EAAE4kK,aAAaz6K,EAAE,IAAG60J,EAAE15H,KAAK,CAACijJ,WAAW,YAAYC,WAAW,WAAWC,aAAa,cAAcC,aAAa,eAAc,SAASv+K,EAAEzJ,GAAGs+J,EAAE51J,MAAMu7K,QAAQx6K,GAAG,CAACy6K,aAAalkL,EAAEykL,SAASzkL,EAAEukL,OAAO,SAAS96K,GAAG,IAAI6V,EAAE5c,EAAE+G,EAAEs8K,cAAc1gG,EAAE57E,EAAE47K,UAAU,OAAO3iL,IAAIA,IAAIzI,MAAMqkK,EAAE2e,SAAShjL,KAAKyI,MAAM+G,EAAEpM,KAAKgoF,EAAEq/F,SAASplK,EAAE+lE,EAAE/8E,QAAQkE,MAAMvS,KAAKyD,WAAW+L,EAAEpM,KAAK2C,GAAGsf,CAAC,EAAE,IAAGg/I,EAAE1kG,GAAGu/G,OAAO,CAACx1J,GAAG,SAASla,EAAE6V,EAAE5c,EAAE2iF,GAAG,OAAOi6F,GAAGrlL,KAAKwP,EAAE6V,EAAE5c,EAAE2iF,EAAE,EAAE4iG,IAAI,SAASx+K,EAAE6V,EAAE5c,EAAE2iF,GAAG,OAAOi6F,GAAGrlL,KAAKwP,EAAE6V,EAAE5c,EAAE2iF,EAAE,EAAE,EAAExxD,IAAI,SAASpqB,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAE,GAAGyJ,GAAGA,EAAE46K,gBAAgB56K,EAAE47K,UAAU,OAAOhgG,EAAE57E,EAAE47K,UAAU/mB,EAAE70J,EAAEs7K,gBAAgBlxJ,IAAIwxD,EAAE0+F,UAAU1+F,EAAEq/F,SAAS,IAAIr/F,EAAE0+F,UAAU1+F,EAAEq/F,SAASr/F,EAAEuE,SAASvE,EAAE/8E,SAASrO,KAAK,GAAG,iBAAiBwP,EAAE,CAAC,IAAIzJ,KAAKyJ,EAAExP,KAAK45B,IAAI7zB,EAAEsf,EAAE7V,EAAEzJ,IAAI,OAAO/F,IAAI,CAAC,OAAM,IAAKqlB,GAAG,mBAAmBA,IAAI5c,EAAE4c,EAAEA,OAAE,IAAQ,IAAK5c,IAAIA,EAAE08K,IAAInlL,KAAK2qC,MAAK,WAAW05H,EAAE51J,MAAM25C,OAAOpoD,KAAKwP,EAAE/G,EAAE4c,EAAE,GAAE,IAAI,IAAI4oK,GAAG,wBAAwBC,GAAG,oCAAoCC,GAAG,6BAA6B,SAASC,GAAG5+K,EAAE6V,GAAG,OAAOm/I,EAAEh1J,EAAE,UAAUg1J,EAAE,KAAKn/I,EAAEk5J,SAASl5J,EAAEA,EAAEm+J,WAAW,OAAOnf,EAAE70J,GAAGw8B,SAAS,SAAS,IAAIx8B,CAAC,CAAC,SAAS6+K,GAAG7+K,GAAG,OAAOA,EAAEpM,MAAM,OAAOoM,EAAEs7B,aAAa,SAAS,IAAIt7B,EAAEpM,KAAKoM,CAAC,CAAC,SAAS8+K,GAAG9+K,GAAG,MAAM,WAAWA,EAAEpM,MAAM,IAAI/C,MAAM,EAAE,GAAGmP,EAAEpM,KAAKoM,EAAEpM,KAAK/C,MAAM,GAAGmP,EAAEyxK,gBAAgB,QAAQzxK,CAAC,CAAC,SAAS++K,GAAG/+K,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAErlF,EAAEu0H,EAAExiH,EAAEoxB,EAAE,GAAG,IAAI7jB,EAAEk5J,SAAS,CAAC,GAAG4B,EAAE6H,QAAQx4K,KAAK05B,EAAEi3I,EAAEx7J,IAAInV,GAAGq2B,QAAQ,IAAI9/B,KAAKo6K,EAAE/3H,OAAO/iC,EAAE,iBAAiB6jB,EAAE,IAAIzgC,EAAE,EAAE2iF,EAAEliD,EAAEnjC,GAAGrC,OAAO+E,EAAE2iF,EAAE3iF,IAAI47J,EAAE51J,MAAMqG,IAAIuQ,EAAEtf,EAAEmjC,EAAEnjC,GAAG0C,IAAIy9J,EAAE8hB,QAAQx4K,KAAK8qH,EAAE4rC,EAAE6hB,OAAOv4K,GAAGsI,EAAEusJ,EAAE6a,OAAO,CAAC,EAAE5kD,GAAG4rC,EAAEpgJ,IAAIT,EAAEvN,GAAG,CAAC,CAAC,SAAS02K,GAAG/lL,EAAE2iF,EAAErlF,EAAEu0H,GAAGlvC,EAAE1nE,EAAE0nE,GAAG,IAAI57E,EAAE6V,EAAEvN,EAAEoxB,EAAEo6H,EAAExpG,EAAErxB,EAAE,EAAEwD,EAAExjC,EAAE/E,OAAO08B,EAAE6L,EAAE,EAAE/X,EAAEk3D,EAAE,GAAG24E,EAAEhsJ,EAAEmc,GAAG,GAAG6vI,GAAG,EAAE93H,GAAG,iBAAiB/X,IAAI7H,EAAEw8J,YAAYqF,GAAG/jL,KAAK+pB,GAAG,OAAOzrB,EAAEkiC,MAAK,SAASn7B,GAAG,IAAI6V,EAAE5c,EAAEo2K,GAAGrvK,GAAGu0J,IAAI34E,EAAE,GAAGl3D,EAAElhB,KAAKhT,KAAKwP,EAAE6V,EAAEopK,SAASD,GAAGnpK,EAAE+lE,EAAErlF,EAAEu0H,EAAE,IAAG,GAAGruF,IAAI5mB,GAAG7V,EAAEmuE,GAAGyN,EAAE3iF,EAAE,GAAGg4K,eAAc,EAAGh4K,EAAE6xH,IAAIkpD,WAAW,IAAIh0K,EAAE+wK,WAAW78K,SAAS8L,EAAE6V,GAAGA,GAAGi1G,GAAG,CAAC,IAAIpxF,GAAGpxB,EAAEusJ,EAAE3mI,IAAIikJ,GAAGnyK,EAAE,UAAU6+K,KAAK3qL,OAAO+kC,EAAEwD,EAAExD,IAAI66H,EAAE9zJ,EAAEi5B,IAAIrI,IAAIkjI,EAAEe,EAAEzwF,MAAM0vF,GAAE,GAAG,GAAIp6H,GAAGm7H,EAAE1yB,MAAM75H,EAAE6pK,GAAGre,EAAE,YAAYv9J,EAAEiN,KAAKvK,EAAEggC,GAAG66H,EAAE76H,GAAG,GAAGS,EAAE,IAAI4wB,EAAEhiD,EAAEA,EAAEpU,OAAO,GAAG+8K,cAAcpc,EAAE3mI,IAAI5lB,EAAEw2K,IAAI7lJ,EAAE,EAAEA,EAAES,EAAET,IAAI66H,EAAExrJ,EAAE2wB,GAAGg5I,GAAGt3K,KAAKm5J,EAAElgK,MAAM,MAAM+8K,EAAE4H,OAAOzkB,EAAE,eAAee,EAAE2e,SAASlpH,EAAEwpG,KAAKA,EAAEhpI,KAAK,YAAYgpI,EAAElgK,MAAM,IAAI4kD,cAAcq8G,EAAEqqB,WAAWprB,EAAEmb,UAAUpa,EAAEqqB,SAASprB,EAAEhpI,IAAI,CAACkkJ,MAAMlb,EAAEkb,OAAOlb,EAAEx4H,aAAa,UAAUgvB,GAAGqrG,EAAE7B,EAAEj8G,YAAYjY,QAAQ++I,GAAG,IAAI7qB,EAAExpG,GAAG,CAAC,OAAOrxD,CAAC,CAAC,SAASkmL,GAAGn/K,EAAE6V,EAAE5c,GAAG,IAAI,IAAI2iF,EAAErlF,EAAEsf,EAAEg/I,EAAEpsJ,OAAOoN,EAAE7V,GAAGA,EAAE8qH,EAAE,EAAE,OAAOlvC,EAAErlF,EAAEu0H,IAAIA,IAAI7xH,GAAG,IAAI2iF,EAAEmzF,UAAUla,EAAEuqB,UAAUjN,GAAGv2F,IAAIA,EAAE++E,aAAa1hK,GAAGstK,GAAG3qF,IAAIy2F,GAAGF,GAAGv2F,EAAE,WAAWA,EAAE++E,WAAW3pC,YAAYp1C,IAAI,OAAO57E,CAAC,CAAC60J,EAAE6a,OAAO,CAAC0K,cAAc,SAASp6K,GAAG,OAAOA,CAAC,EAAEokE,MAAM,SAASpkE,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAErxB,EAAEj5B,EAAEs5K,WAAU,GAAI78I,EAAE8pI,GAAGvmK,GAAG,KAAK6c,EAAE08J,gBAAgB,IAAIv5K,EAAE+uK,UAAU,KAAK/uK,EAAE+uK,UAAUla,EAAEwhB,SAASr2K,IAAI,IAAIsI,EAAE6pK,GAAGl5I,GAAG2iD,EAAE,EAAErlF,GAAGu0H,EAAEqnD,GAAGnyK,IAAI9L,OAAO0nF,EAAErlF,EAAEqlF,IAAIliD,EAAEoxF,EAAElvC,GAAiB,WAAWtxB,GAAzBwpG,EAAExrJ,EAAEszE,IAAyBznC,SAASqE,gBAAgBq5H,GAAGl3K,KAAK++B,EAAE9lC,MAAMkgK,EAAEihB,QAAQr7I,EAAEq7I,QAAQ,UAAUzqH,GAAG,aAAaA,IAAIwpG,EAAEqiB,aAAaz8I,EAAEy8I,cAAc,GAAGtgK,EAAE,GAAG5c,EAAE,IAAI6xH,EAAEA,GAAGqnD,GAAGnyK,GAAGsI,EAAEA,GAAG6pK,GAAGl5I,GAAG2iD,EAAE,EAAErlF,EAAEu0H,EAAE52H,OAAO0nF,EAAErlF,EAAEqlF,IAAImjG,GAAGj0D,EAAElvC,GAAGtzE,EAAEszE,SAASmjG,GAAG/+K,EAAEi5B,GAAG,OAAO,GAAG3wB,EAAE6pK,GAAGl5I,EAAE,WAAW/kC,QAAQm+K,GAAG/pK,GAAGm0B,GAAG01I,GAAGnyK,EAAE,WAAWi5B,CAAC,EAAEmmJ,UAAU,SAASp/K,GAAG,IAAI,IAAI6V,EAAE5c,EAAE2iF,EAAErlF,EAAEs+J,EAAE51J,MAAMu7K,QAAQ1vD,EAAE,OAAE,KAAU7xH,EAAE+G,EAAE8qH,IAAIA,IAAI,GAAG8rC,EAAE39J,GAAG,CAAC,GAAG4c,EAAE5c,EAAE03K,EAAEf,SAAS,CAAC,GAAG/5J,EAAEwgB,OAAO,IAAIulD,KAAK/lE,EAAEwgB,OAAO9/B,EAAEqlF,GAAGi5E,EAAE51J,MAAM25C,OAAO3/C,EAAE2iF,GAAGi5E,EAAEumB,YAAYniL,EAAE2iF,EAAE/lE,EAAEilK,QAAQ7hL,EAAE03K,EAAEf,cAAS,CAAM,CAAC32K,EAAEy9J,EAAEkZ,WAAW32K,EAAEy9J,EAAEkZ,cAAS,EAAO,CAAC,IAAI/a,EAAE1kG,GAAGu/G,OAAO,CAACt+E,OAAO,SAASpxF,GAAG,OAAOm/K,GAAG3uL,KAAKwP,GAAE,EAAG,EAAE44C,OAAO,SAAS54C,GAAG,OAAOm/K,GAAG3uL,KAAKwP,EAAE,EAAE6xC,KAAK,SAAS7xC,GAAG,OAAOk7B,EAAE1qC,MAAK,SAASwP,GAAG,YAAO,IAASA,EAAE60J,EAAEhjH,KAAKrhD,MAAMA,KAAKmkE,QAAQx5B,MAAK,WAAW,IAAI3qC,KAAKu+K,UAAU,KAAKv+K,KAAKu+K,UAAU,IAAIv+K,KAAKu+K,WAAWv+K,KAAKqnD,YAAY73C,EAAE,GAAE,GAAE,KAAKA,EAAE/L,UAAUC,OAAO,EAAEmrL,OAAO,WAAW,OAAOL,GAAGxuL,KAAKyD,WAAU,SAAS+L,GAAG,IAAIxP,KAAKu+K,UAAU,KAAKv+K,KAAKu+K,UAAU,IAAIv+K,KAAKu+K,UAAU6P,GAAGpuL,KAAKwP,GAAG6+C,YAAY7+C,EAAE,GAAE,EAAEm6J,QAAQ,WAAW,OAAO6kB,GAAGxuL,KAAKyD,WAAU,SAAS+L,GAAG,GAAG,IAAIxP,KAAKu+K,UAAU,KAAKv+K,KAAKu+K,UAAU,IAAIv+K,KAAKu+K,SAAS,CAAC,IAAIl5J,EAAE+oK,GAAGpuL,KAAKwP,GAAG6V,EAAEi/C,aAAa90D,EAAE6V,EAAEm+J,WAAW,CAAC,GAAE,EAAE3/J,OAAO,WAAW,OAAO2qK,GAAGxuL,KAAKyD,WAAU,SAAS+L,GAAGxP,KAAKmqK,YAAYnqK,KAAKmqK,WAAW7lG,aAAa90D,EAAExP,KAAK,GAAE,EAAE8uL,MAAM,WAAW,OAAON,GAAGxuL,KAAKyD,WAAU,SAAS+L,GAAGxP,KAAKmqK,YAAYnqK,KAAKmqK,WAAW7lG,aAAa90D,EAAExP,KAAKwhL,YAAY,GAAE,EAAEr9G,MAAM,WAAW,IAAI,IAAI30D,EAAE6V,EAAE,EAAE,OAAO7V,EAAExP,KAAKqlB,IAAIA,IAAI,IAAI7V,EAAE+uK,WAAWla,EAAEuqB,UAAUjN,GAAGnyK,GAAE,IAAKA,EAAE63C,YAAY,IAAI,OAAOrnD,IAAI,EAAE4zE,MAAM,SAASpkE,EAAE6V,GAAG,OAAO7V,EAAE,MAAMA,GAAGA,EAAE6V,EAAE,MAAMA,EAAE7V,EAAE6V,EAAErlB,KAAK09B,KAAI,WAAW,OAAO2mI,EAAEzwF,MAAM5zE,KAAKwP,EAAE6V,EAAE,GAAE,EAAEopK,KAAK,SAASj/K,GAAG,OAAOk7B,EAAE1qC,MAAK,SAASwP,GAAG,IAAI6V,EAAErlB,KAAK,IAAI,CAAC,EAAEyI,EAAE,EAAE2iF,EAAEprF,KAAK0D,OAAO,QAAG,IAAS8L,GAAG,IAAI6V,EAAEk5J,SAAS,OAAOl5J,EAAE0iC,UAAU,GAAG,iBAAiBv4C,IAAIy+K,GAAG9jL,KAAKqF,KAAKkyK,IAAIH,GAAGrhG,KAAK1wE,IAAI,CAAC,GAAG,KAAK,GAAGw4C,eAAe,CAACx4C,EAAE60J,EAAEulB,cAAcp6K,GAAG,IAAI,KAAK/G,EAAE2iF,EAAE3iF,IAAI,KAAK4c,EAAErlB,KAAKyI,IAAI,CAAC,GAAG81K,WAAWla,EAAEuqB,UAAUjN,GAAGt8J,GAAE,IAAKA,EAAE0iC,UAAUv4C,GAAG6V,EAAE,CAAC,CAAC,MAAM7V,GAAG,CAAC,CAAC6V,GAAGrlB,KAAKmkE,QAAQ0qH,OAAOr/K,EAAE,GAAE,KAAKA,EAAE/L,UAAUC,OAAO,EAAEqrL,YAAY,WAAW,IAAItmL,EAAE,GAAG,OAAO+lL,GAAGxuL,KAAKyD,WAAU,SAAS+L,GAAG,IAAI6V,EAAErlB,KAAKmqK,WAAW9F,EAAEmb,QAAQx/K,KAAKyI,GAAG,IAAI47J,EAAEuqB,UAAUjN,GAAG3hL,OAAOqlB,GAAGA,EAAE2pK,aAAax/K,EAAExP,MAAM,GAAEyI,EAAE,IAAI47J,EAAE15H,KAAK,CAACskJ,SAAS,SAASC,UAAU,UAAU5qH,aAAa,SAASF,YAAY,QAAQ+qH,WAAW,gBAAe,SAAS3/K,EAAEsI,GAAGusJ,EAAE1kG,GAAGnwD,GAAG,SAASA,GAAG,IAAI,IAAI6V,EAAE5c,EAAE,GAAG2iF,EAAEi5E,EAAE70J,GAAGzJ,EAAEqlF,EAAE1nF,OAAO,EAAE42H,EAAE,EAAEA,GAAGv0H,EAAEu0H,IAAIj1G,EAAEi1G,IAAIv0H,EAAE/F,KAAKA,KAAK4zE,OAAM,GAAIywF,EAAEj5E,EAAEkvC,IAAIxiH,GAAGuN,GAAGi+I,EAAE/wJ,MAAM9J,EAAE4c,EAAEV,OAAO,OAAO3kB,KAAK2+K,UAAUl2K,EAAE,CAAC,IAAG,IAAI2mL,GAAG,IAAIz9F,OAAO,KAAK81E,GAAG,kBAAkB,KAAK4nB,GAAG,MAAMC,GAAG,SAAS9/K,GAAG,IAAI6V,EAAE7V,EAAEixK,cAAcyB,YAAY,OAAO78J,GAAGA,EAAEkqK,SAASlqK,EAAEy+I,GAAGz+I,EAAEmqK,iBAAiBhgL,EAAE,EAAEigL,GAAG,SAASjgL,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAE,CAAC,EAAE,IAAIv0H,KAAKsf,EAAEi1G,EAAEv0H,GAAGyJ,EAAE8wH,MAAMv6H,GAAGyJ,EAAE8wH,MAAMv6H,GAAGsf,EAAEtf,GAAG,IAAIA,KAAKqlF,EAAE3iF,EAAEuK,KAAKxD,GAAG6V,EAAE7V,EAAE8wH,MAAMv6H,GAAGu0H,EAAEv0H,GAAG,OAAOqlF,CAAC,EAAEskG,GAAG,IAAI/9F,OAAO4zE,GAAG/kK,KAAK,KAAK,KAAKmvL,GAAG,sBAAsBC,GAAG,IAAIj+F,OAAO,IAAIg+F,GAAG,8BAA8BA,GAAG,KAAK,KAAK,SAASE,GAAGrgL,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEmmJ,GAAGllL,KAAKkb,GAAGi+I,EAAE9zJ,EAAE8wH,MAAM,OAAO73H,EAAEA,GAAG6mL,GAAG9/K,MAAMsI,EAAErP,EAAEqnL,iBAAiBzqK,IAAI5c,EAAE4c,GAAG6jB,IAAIpxB,EAAEA,EAAEs3B,QAAQwgJ,GAAG,OAAO,KAAK93K,GAAGi+J,GAAGvmK,KAAKsI,EAAEusJ,EAAE/jC,MAAM9wH,EAAE6V,KAAKgH,EAAE0jK,kBAAkBX,GAAGjlL,KAAK2N,IAAI43K,GAAGvlL,KAAKkb,KAAK+lE,EAAEk4E,EAAE3gJ,MAAM5c,EAAEu9J,EAAEviK,SAASu5H,EAAEgpC,EAAE1xG,SAAS0xG,EAAEviK,SAASuiK,EAAE1xG,SAAS0xG,EAAE3gJ,MAAM7K,EAAEA,EAAErP,EAAEka,MAAM2gJ,EAAE3gJ,MAAMyoE,EAAEk4E,EAAEviK,SAASgF,EAAEu9J,EAAE1xG,SAAS0oE,SAAI,IAASxiH,EAAEA,EAAE,GAAGA,CAAC,CAAC,SAASk4K,GAAGxgL,EAAE6V,GAAG,MAAM,CAACV,IAAI,WAAW,IAAInV,IAAI,OAAOxP,KAAK2kB,IAAIU,GAAG9S,MAAMvS,KAAKyD,kBAAkBzD,KAAK2kB,GAAG,EAAE,EAAE,WAAW,SAASnV,IAAI,GAAGsqD,EAAE,CAACwpG,EAAEhjC,MAAM2vD,QAAQ,+EAA+En2H,EAAEwmE,MAAM2vD,QAAQ,4HAA4HtoB,GAAGt5G,YAAYi1G,GAAGj1G,YAAYyL,GAAG,IAAItqD,EAAEs0J,EAAE0rB,iBAAiB11H,GAAGrxD,EAAE,OAAO+G,EAAE2yK,IAAIj5I,EAAE,KAAK7jB,EAAE7V,EAAE0gL,YAAYp2H,EAAEwmE,MAAMx3D,MAAM,MAAMwxD,EAAE,KAAKj1G,EAAE7V,EAAEs5D,OAAOsiB,EAAE,KAAK/lE,EAAE7V,EAAEmT,OAAOm3C,EAAEwmE,MAAM29C,SAAS,WAAWl4K,EAAE,KAAKsf,EAAEy0C,EAAEq2H,YAAY,GAAGxoB,GAAGnnC,YAAY8iC,GAAGxpG,EAAE,IAAI,CAAC,CAAC,SAASz0C,EAAE7V,GAAG,OAAO+L,KAAK+B,MAAMtE,WAAWxJ,GAAG,CAAC,IAAI/G,EAAE2iF,EAAErlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAEv5H,EAAE4wD,cAAc,OAAO7gC,EAAE/vB,EAAE4wD,cAAc,OAAO7gC,EAAEwmE,QAAQxmE,EAAEwmE,MAAM8vD,eAAe,cAAct2H,EAAEgvH,WAAU,GAAIxoD,MAAM8vD,eAAe,GAAG/jK,EAAEgkK,gBAAgB,gBAAgBv2H,EAAEwmE,MAAM8vD,eAAe/rB,EAAE6a,OAAO7yJ,EAAE,CAACikK,kBAAkB,WAAW,OAAO9gL,IAAI47E,CAAC,EAAE2kG,eAAe,WAAW,OAAOvgL,IAAI8qH,CAAC,EAAEi2D,cAAc,WAAW,OAAO/gL,IAAI/G,CAAC,EAAE+nL,mBAAmB,WAAW,OAAOhhL,IAAI05B,CAAC,EAAEunJ,cAAc,WAAW,OAAOjhL,IAAIzJ,CAAC,EAAE2qL,qBAAqB,WAAW,IAAIlhL,EAAE6V,EAAE5c,EAAE2iF,EAAE,OAAO,MAAMtzE,IAAItI,EAAEu6B,EAAE4wD,cAAc,SAASt1E,EAAE0kB,EAAE4wD,cAAc,MAAMlyF,EAAEshC,EAAE4wD,cAAc,OAAOnrF,EAAE8wH,MAAM2vD,QAAQ,2DAA2D5qK,EAAEi7G,MAAM2vD,QAAQ,mBAAmB5qK,EAAEi7G,MAAM19G,OAAO,MAAMna,EAAE63H,MAAM19G,OAAO,MAAMna,EAAE63H,MAAM+wB,QAAQ,QAAQsW,GAAGt5G,YAAY7+C,GAAG6+C,YAAYhpC,GAAGgpC,YAAY5lD,GAAG2iF,EAAE04E,EAAE0rB,iBAAiBnqK,GAAGvN,EAAE3R,SAASilF,EAAExoE,OAAO,IAAIzc,SAASilF,EAAEulG,eAAe,IAAIxqL,SAASilF,EAAEwlG,kBAAkB,MAAMvrK,EAAEwrK,aAAalpB,GAAGnnC,YAAYhxH,IAAIsI,CAAC,IAAI,CAA/8C,GAAm9C,IAAIg5K,GAAG,CAAC,SAAS,MAAM,MAAMC,GAAGhnJ,EAAE4wD,cAAc,OAAO2lC,MAAM0wD,GAAG,CAAC,EAAE,SAASC,GAAGzhL,GAA8B,OAArB60J,EAAE6sB,SAAS1hL,IAAIwhL,GAAGxhL,KAAcA,KAAKuhL,GAAGvhL,EAAEwhL,GAAGxhL,GAAG,SAASA,GAAmD,IAAhD,IAAI6V,EAAE7V,EAAE,GAAGi8E,cAAcj8E,EAAEnP,MAAM,GAAGoI,EAAEqoL,GAAGptL,OAAa+E,SAAQ+G,EAAEshL,GAAGroL,GAAG4c,KAAK0rK,GAAG,OAAOvhL,CAAC,CAAlG,CAAoGA,IAAIA,EAAE,CAAC,IAAI2hL,GAAGC,GAAGC,GAAG,4BAA4BC,GAAG,CAACrT,SAAS,WAAWsT,WAAW,SAASlgC,QAAQ,SAASmgC,GAAG,CAACC,cAAc,IAAIC,WAAW,OAAO,SAASC,GAAGniL,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAEgD,GAAGlO,KAAK76D,GAAG,OAAO+lE,EAAE7vE,KAAKC,IAAI,EAAE4vE,EAAE,IAAI3iF,GAAG,KAAK2iF,EAAE,IAAI,MAAM/lE,CAAC,CAAC,SAASusK,GAAGpiL,EAAE6V,EAAE5c,EAAE2iF,EAAErlF,EAAEu0H,GAAG,IAAIxiH,EAAE,UAAUuN,EAAE,EAAE,EAAE6jB,EAAE,EAAEo6H,EAAE,EAAE,GAAG76J,KAAK2iF,EAAE,SAAS,WAAW,OAAO,EAAE,KAAKtzE,EAAE,EAAEA,GAAG,EAAE,WAAWrP,IAAI66J,GAAGe,EAAEmkB,IAAIh5K,EAAE/G,EAAE88J,GAAGztJ,IAAG,EAAG/R,IAAIqlF,GAAG,YAAY3iF,IAAI66J,GAAGe,EAAEmkB,IAAIh5K,EAAE,UAAU+1J,GAAGztJ,IAAG,EAAG/R,IAAI,WAAW0C,IAAI66J,GAAGe,EAAEmkB,IAAIh5K,EAAE,SAAS+1J,GAAGztJ,GAAG,SAAQ,EAAG/R,MAAMu9J,GAAGe,EAAEmkB,IAAIh5K,EAAE,UAAU+1J,GAAGztJ,IAAG,EAAG/R,GAAG,YAAY0C,EAAE66J,GAAGe,EAAEmkB,IAAIh5K,EAAE,SAAS+1J,GAAGztJ,GAAG,SAAQ,EAAG/R,GAAGmjC,GAAGm7H,EAAEmkB,IAAIh5K,EAAE,SAAS+1J,GAAGztJ,GAAG,SAAQ,EAAG/R,IAAI,OAAOqlF,GAAG,GAAGkvC,IAAIgpC,GAAG/nJ,KAAKC,IAAI,EAAED,KAAKs2K,KAAKriL,EAAE,SAAS6V,EAAE,GAAGomE,cAAcpmE,EAAEhlB,MAAM,IAAIi6H,EAAEgpC,EAAEp6H,EAAE,MAAM,GAAGo6H,CAAC,CAAC,SAASwuB,GAAGtiL,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAEkkG,GAAG9/K,GAAGzJ,IAAIsmB,EAAEikK,qBAAqB7nL,IAAI,eAAe47J,EAAEmkB,IAAIh5K,EAAE,aAAY,EAAG47E,GAAGkvC,EAAEv0H,EAAE+R,EAAE+3K,GAAGrgL,EAAE6V,EAAE+lE,GAAGliD,EAAE,SAAS7jB,EAAE,GAAGomE,cAAcpmE,EAAEhlB,MAAM,GAAG,GAAG+uL,GAAGjlL,KAAK2N,GAAG,CAAC,IAAIrP,EAAE,OAAOqP,EAAEA,EAAE,MAAM,CAAC,QAAQuU,EAAEikK,qBAAqBvqL,IAAIsmB,EAAEqkK,wBAAwBlsB,EAAEh1J,EAAE,OAAO,SAASsI,IAAIkB,WAAWlB,IAAI,WAAWusJ,EAAEmkB,IAAIh5K,EAAE,WAAU,EAAG47E,KAAK57E,EAAEuiL,iBAAiBruL,SAASqC,EAAE,eAAes+J,EAAEmkB,IAAIh5K,EAAE,aAAY,EAAG47E,IAAIkvC,EAAEpxF,KAAK15B,KAAKsI,EAAEtI,EAAE05B,MAAMpxB,EAAEkB,WAAWlB,IAAI,GAAG85K,GAAGpiL,EAAE6V,EAAE5c,IAAI1C,EAAE,SAAS,WAAWu0H,EAAElvC,EAAEtzE,GAAG,IAAI,CAACusJ,EAAE6a,OAAO,CAAC8S,SAAS,CAACC,QAAQ,CAACttK,IAAI,SAASnV,EAAE6V,GAAG,GAAGA,EAAE,CAAC,IAAI5c,EAAEonL,GAAGrgL,EAAE,WAAW,MAAM,KAAK/G,EAAE,IAAIA,CAAC,CAAC,IAAIypL,UAAU,CAACC,yBAAwB,EAAGC,aAAY,EAAGC,aAAY,EAAGC,UAAS,EAAGC,YAAW,EAAGb,YAAW,EAAGc,UAAS,EAAGC,YAAW,EAAGC,eAAc,EAAGC,iBAAgB,EAAGC,SAAQ,EAAGC,YAAW,EAAGC,cAAa,EAAGC,YAAW,EAAGd,SAAQ,EAAGlhB,OAAM,EAAGiiB,SAAQ,EAAGC,QAAO,EAAGC,QAAO,EAAGC,MAAK,GAAIjC,SAAS,CAAC,EAAE5wD,MAAM,SAAS9wH,EAAE6V,EAAE5c,EAAE2iF,GAAG,GAAG57E,GAAG,IAAIA,EAAE+uK,UAAU,IAAI/uK,EAAE+uK,UAAU/uK,EAAE8wH,MAAM,CAAC,IAAIv6H,EAAEu0H,EAAExiH,EAAEoxB,EAAEw9H,EAAErhJ,GAAGi+I,EAAE+rB,GAAGllL,KAAKkb,GAAGy0C,EAAEtqD,EAAE8wH,MAAM,GAAGgjC,IAAIj+I,EAAE4rK,GAAG/nJ,IAAIpxB,EAAEusJ,EAAE2tB,SAAS3sK,IAAIg/I,EAAE2tB,SAAS9oJ,QAAG,IAASzgC,EAAE,OAAOqP,GAAG,QAAQA,QAAG,KAAU/R,EAAE+R,EAAE6M,IAAInV,GAAE,EAAG47E,IAAIrlF,EAAE+zD,EAAEz0C,GAAG,WAAYi1G,SAAS7xH,KAAK1C,EAAEqoF,GAAGlO,KAAKz3E,KAAK1C,EAAE,KAAK0C,EAAE,SAAS+G,EAAE6V,EAAE5c,EAAE2iF,GAAG,IAAIrlF,EAAEu0H,EAAExiH,EAAE,GAAGoxB,EAA+B,WAAW,OAAOm7H,EAAEmkB,IAAIh5K,EAAE6V,EAAE,GAAG,EAAEi+I,EAAEp6H,IAAI4wB,EAAErxD,GAAGA,EAAE,KAAK47J,EAAE6tB,UAAU7sK,GAAG,GAAG,MAAMojB,EAAEj5B,EAAE+uK,WAAWla,EAAE6tB,UAAU7sK,IAAI,OAAOy0C,IAAIwpG,IAAIl1E,GAAGlO,KAAKmkF,EAAEmkB,IAAIh5K,EAAE6V,IAAI,GAAGojB,GAAGA,EAAE,KAAKqxB,EAAE,CAAwB,IAAvBwpG,GAAG,EAAExpG,EAAEA,GAAGrxB,EAAE,GAAGA,GAAG66H,GAAG,EAAQxrJ,KAAIusJ,EAAE/jC,MAAM9wH,EAAE6V,EAAEojB,EAAEqxB,IAAI,EAAEwgE,IAAI,GAAGA,EAAEpxF,IAAIo6H,GAAG,MAAM,IAAIxrJ,EAAE,GAAG2wB,GAAG6xF,EAAE7xF,GAAG,EAAE47H,EAAE/jC,MAAM9wH,EAAE6V,EAAEojB,EAAEqxB,GAAGrxD,EAAEA,GAAG,EAAE,CAAC,OAAOA,IAAIggC,GAAGA,IAAI66H,GAAG,EAAEv9J,EAAE0C,EAAE,GAAGggC,GAAGhgC,EAAE,GAAG,GAAGA,EAAE,IAAIA,EAAE,IAAoC1C,CAAC,CAAxa,CAA0ayJ,EAAE6V,EAAEtf,GAAGu0H,EAAE,UAAU,MAAM7xH,GAAGA,GAAGA,IAAI,WAAW6xH,GAAGgpC,IAAI76J,GAAG1C,GAAGA,EAAE,KAAKs+J,EAAE6tB,UAAUhpJ,GAAG,GAAG,OAAO7c,EAAEgkK,iBAAiB,KAAK5nL,GAAG,IAAI4c,EAAEzkB,QAAQ,gBAAgBk5D,EAAEz0C,GAAG,WAAWvN,GAAG,QAAQA,QAAG,KAAUrP,EAAEqP,EAAEgO,IAAItW,EAAE/G,EAAE2iF,MAAMk4E,EAAExpG,EAAE9pC,YAAY3K,EAAE5c,GAAGqxD,EAAEz0C,GAAG5c,GAAG,CAAC,EAAE+/K,IAAI,SAASh5K,EAAE6V,EAAE5c,EAAE2iF,GAAG,IAAIrlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEw9H,EAAErhJ,GAAG,OAAOgqK,GAAGllL,KAAKkb,KAAKA,EAAE4rK,GAAG/nJ,KAAKpxB,EAAEusJ,EAAE2tB,SAAS3sK,IAAIg/I,EAAE2tB,SAAS9oJ,KAAK,QAAQpxB,IAAI/R,EAAE+R,EAAE6M,IAAInV,GAAE,EAAG/G,SAAI,IAAS1C,IAAIA,EAAE8pL,GAAGrgL,EAAE6V,EAAE+lE,IAAI,WAAWrlF,GAAGsf,KAAKmsK,KAAKzrL,EAAEyrL,GAAGnsK,IAAI,KAAK5c,GAAGA,GAAG6xH,EAAEthH,WAAWjT,IAAG,IAAK0C,GAAG2qL,SAAS94D,GAAGA,GAAG,EAAEv0H,GAAGA,CAAC,IAAIs+J,EAAE15H,KAAK,CAAC,SAAS,UAAS,SAASn7B,EAAE8zJ,GAAGe,EAAE2tB,SAAS1uB,GAAG,CAAC3+I,IAAI,SAASnV,EAAE6V,EAAE5c,GAAG,GAAG4c,EAAE,OAAOgsK,GAAGlnL,KAAKk6J,EAAEmkB,IAAIh5K,EAAE,aAAaA,EAAEuiL,iBAAiBruL,QAAQ8L,EAAE6jL,wBAAwB1wK,MAAMmvK,GAAGtiL,EAAE8zJ,EAAE76J,GAAGgnL,GAAGjgL,EAAE8hL,IAAG,WAAW,OAAOQ,GAAGtiL,EAAE8zJ,EAAE76J,EAAE,GAAE,EAAEqd,IAAI,SAAStW,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEupL,GAAG9/K,GAAG8qH,GAAGjuG,EAAEokK,iBAAiB,aAAa1qL,EAAEk4K,SAASnmK,GAAGwiH,GAAG7xH,IAAI,eAAe47J,EAAEmkB,IAAIh5K,EAAE,aAAY,EAAGzJ,GAAGmjC,EAAEzgC,EAAEmpL,GAAGpiL,EAAE8zJ,EAAE76J,EAAEqP,EAAE/R,GAAG,EAAE,OAAO+R,GAAGwiH,IAAIpxF,GAAG3tB,KAAKs2K,KAAKriL,EAAE,SAAS8zJ,EAAE,GAAG73E,cAAc63E,EAAEjjK,MAAM,IAAI2Y,WAAWjT,EAAEu9J,IAAIsuB,GAAGpiL,EAAE8zJ,EAAE,UAAS,EAAGv9J,GAAG,KAAKmjC,IAAIkiD,EAAEgD,GAAGlO,KAAK76D,KAAK,QAAQ+lE,EAAE,IAAI,QAAQ57E,EAAE8wH,MAAMgjC,GAAGj+I,EAAEA,EAAEg/I,EAAEmkB,IAAIh5K,EAAE8zJ,IAAIquB,GAAG,EAAEtsK,EAAE6jB,EAAE,EAAE,IAAGm7H,EAAE2tB,SAAS9B,WAAWF,GAAG3jK,EAAEmkK,oBAAmB,SAAShhL,EAAE6V,GAAG,GAAGA,EAAE,OAAOrM,WAAW62K,GAAGrgL,EAAE,gBAAgBA,EAAE6jL,wBAAwBxqH,KAAK4mH,GAAGjgL,EAAE,CAAC0gL,WAAW,IAAG,WAAW,OAAO1gL,EAAE6jL,wBAAwBxqH,IAAI,KAAI,IAAI,IAAGw7F,EAAE15H,KAAK,CAAC2oJ,OAAO,GAAGC,QAAQ,GAAGC,OAAO,UAAS,SAASztL,EAAEu0H,GAAG+pC,EAAE2tB,SAASjsL,EAAEu0H,GAAG,CAACm5D,OAAO,SAASjkL,GAAG,IAAI,IAAI6V,EAAE,EAAE5c,EAAE,CAAC,EAAE2iF,EAAE,iBAAiB57E,EAAEA,EAAEmX,MAAM,KAAK,CAACnX,GAAG6V,EAAE,EAAEA,IAAI5c,EAAE1C,EAAEw/J,GAAGlgJ,GAAGi1G,GAAGlvC,EAAE/lE,IAAI+lE,EAAE/lE,EAAE,IAAI+lE,EAAE,GAAG,OAAO3iF,CAAC,GAAG,WAAW1C,IAAIs+J,EAAE2tB,SAASjsL,EAAEu0H,GAAGx0G,IAAI6rK,GAAG,IAAGttB,EAAE1kG,GAAGu/G,OAAO,CAACsJ,IAAI,SAASh5K,EAAE6V,GAAG,OAAOqlB,EAAE1qC,MAAK,SAASwP,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAE,CAAC,EAAExiH,EAAE,EAAE,GAAG3X,MAAMC,QAAQilB,GAAG,CAAC,IAAI+lE,EAAEkkG,GAAG9/K,GAAGzJ,EAAEsf,EAAE3hB,OAAOoU,EAAE/R,EAAE+R,IAAIwiH,EAAEj1G,EAAEvN,IAAIusJ,EAAEmkB,IAAIh5K,EAAE6V,EAAEvN,IAAG,EAAGszE,GAAG,OAAOkvC,CAAC,CAAC,YAAO,IAAS7xH,EAAE47J,EAAE/jC,MAAM9wH,EAAE6V,EAAE5c,GAAG47J,EAAEmkB,IAAIh5K,EAAE6V,EAAE,GAAE7V,EAAE6V,EAAE,EAAE5hB,UAAUC,OAAO,IAAI2gK,EAAE1kG,GAAGg5E,MAAM,SAASvtD,EAAE57E,GAAG,OAAO47E,EAAEi5E,EAAEqvB,IAAIrvB,EAAEqvB,GAAGC,OAAOvoG,IAAIA,EAAE57E,EAAEA,GAAG,KAAKxP,KAAK6kE,MAAMr1D,GAAE,SAASA,EAAE6V,GAAG,IAAI5c,EAAEq7J,EAAErqI,WAAWjqB,EAAE47E,GAAG/lE,EAAE9L,KAAK,WAAWuqJ,EAAEzqI,aAAa5wB,EAAE,CAAC,GAAE,EAAE0oL,GAAGpnJ,EAAE4wD,cAAc,SAASy2F,GAAGrnJ,EAAE4wD,cAAc,UAAUtsC,YAAYtkB,EAAE4wD,cAAc,WAAWw2F,GAAG/tL,KAAK,WAAWipB,EAAEunK,QAAQ,KAAKzC,GAAGxpL,MAAM0kB,EAAEwnK,YAAYzC,GAAG5M,UAAU2M,GAAGpnJ,EAAE4wD,cAAc,UAAUhzF,MAAM,IAAIwpL,GAAG/tL,KAAK,QAAQipB,EAAEynK,WAAW,MAAM3C,GAAGxpL,MAAM,IAAIosL,GAAGC,GAAG3vB,EAAEv7E,KAAKw4F,WAAWjd,EAAE1kG,GAAGu/G,OAAO,CAACx+H,KAAK,SAASlxC,EAAE6V,GAAG,OAAOqlB,EAAE1qC,KAAKqkK,EAAE3jH,KAAKlxC,EAAE6V,EAAE,EAAE5hB,UAAUC,OAAO,EAAEuwL,WAAW,SAASzkL,GAAG,OAAOxP,KAAK2qC,MAAK,WAAW05H,EAAE4vB,WAAWj0L,KAAKwP,EAAE,GAAE,IAAI60J,EAAE6a,OAAO,CAACx+H,KAAK,SAASlxC,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAE9qH,EAAE+uK,SAAS,GAAG,IAAIjkD,GAAG,IAAIA,GAAG,IAAIA,EAAE,YAAM,IAAoB9qH,EAAEs7B,aAAau5H,EAAE9hH,KAAK/yC,EAAE6V,EAAE5c,IAAI,IAAI6xH,GAAG+pC,EAAEwhB,SAASr2K,KAAKzJ,EAAEs+J,EAAE6vB,UAAU7uK,EAAE2iC,iBAAiBq8G,EAAEv7E,KAAK3jF,MAAMwiE,KAAKx9D,KAAKkb,GAAG0uK,QAAG,SAAS,IAAStrL,EAAE,OAAOA,OAAO47J,EAAE4vB,WAAWzkL,EAAE6V,GAAGtf,GAAG,QAAQA,QAAG,KAAUqlF,EAAErlF,EAAE+f,IAAItW,EAAE/G,EAAE4c,IAAI+lE,GAAG57E,EAAEouD,aAAav4C,EAAE5c,EAAE,IAAIA,GAAG1C,GAAG,QAAQA,GAAG,QAAQqlF,EAAErlF,EAAE4e,IAAInV,EAAE6V,IAAI+lE,EAAE,OAAOA,EAAEi5E,EAAEpwI,KAAKysB,KAAKlxC,EAAE6V,SAAI,EAAO+lE,EAAE,EAAE8oG,UAAU,CAAC9wL,KAAK,CAAC0iB,IAAI,SAAStW,EAAE6V,GAAG,IAAIgH,EAAEynK,YAAY,UAAUzuK,GAAGm/I,EAAEh1J,EAAE,SAAS,CAAC,IAAI/G,EAAE+G,EAAE7H,MAAM,OAAO6H,EAAEouD,aAAa,OAAOv4C,GAAG5c,IAAI+G,EAAE7H,MAAMc,GAAG4c,CAAC,CAAC,IAAI4uK,WAAW,SAASzkL,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAE,EAAErlF,EAAEsf,GAAGA,EAAElgB,MAAMmgK,GAAG,GAAGv/J,GAAG,IAAIyJ,EAAE+uK,SAAS,KAAM91K,EAAE1C,EAAEqlF,MAAK57E,EAAEyxK,gBAAgBx4K,EAAE,IAAIsrL,GAAG,CAACjuK,IAAI,SAAStW,EAAE6V,EAAE5c,GAAG,OAAM,IAAK4c,EAAEg/I,EAAE4vB,WAAWzkL,EAAE/G,GAAG+G,EAAEouD,aAAan1D,EAAEA,GAAGA,CAAC,GAAG47J,EAAE15H,KAAK05H,EAAEv7E,KAAK3jF,MAAMwiE,KAAKxkE,OAAOgC,MAAM,SAAQ,SAASqK,EAAE6V,GAAG,IAAIvN,EAAEk8K,GAAG3uK,IAAIg/I,EAAEpwI,KAAKysB,KAAKszI,GAAG3uK,GAAG,SAAS7V,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAEj1G,EAAE2iC,cAAc,OAAOv/C,IAAI1C,EAAEiuL,GAAG15D,GAAG05D,GAAG15D,GAAGlvC,EAAEA,EAAE,MAAMtzE,EAAEtI,EAAE6V,EAAE5c,GAAG6xH,EAAE,KAAK05D,GAAG15D,GAAGv0H,GAAGqlF,CAAC,CAAC,IAAG,IAAI+oG,GAAG,sCAAsCC,GAAG,gBAAgB,SAASC,GAAG7kL,GAAG,OAAOA,EAAErK,MAAMmgK,IAAI,IAAI9kK,KAAK,IAAI,CAAC,SAAS8zL,GAAG9kL,GAAG,OAAOA,EAAEs7B,cAAct7B,EAAEs7B,aAAa,UAAU,EAAE,CAAC,SAASypJ,GAAG/kL,GAAG,OAAOrP,MAAMC,QAAQoP,GAAGA,EAAE,iBAAiBA,GAAGA,EAAErK,MAAMmgK,IAAI,EAAE,CAACjB,EAAE1kG,GAAGu/G,OAAO,CAAC38H,KAAK,SAAS/yC,EAAE6V,GAAG,OAAOqlB,EAAE1qC,KAAKqkK,EAAE9hH,KAAK/yC,EAAE6V,EAAE,EAAE5hB,UAAUC,OAAO,EAAE8wL,WAAW,SAAShlL,GAAG,OAAOxP,KAAK2qC,MAAK,kBAAkB3qC,KAAKqkK,EAAEowB,QAAQjlL,IAAIA,EAAE,GAAE,IAAI60J,EAAE6a,OAAO,CAAC38H,KAAK,SAAS/yC,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAE9qH,EAAE+uK,SAAS,GAAG,IAAIjkD,GAAG,IAAIA,GAAG,IAAIA,EAAE,OAAO,IAAIA,GAAG+pC,EAAEwhB,SAASr2K,KAAK6V,EAAEg/I,EAAEowB,QAAQpvK,IAAIA,EAAEtf,EAAEs+J,EAAEqwB,UAAUrvK,SAAI,IAAS5c,EAAE1C,GAAG,QAAQA,QAAG,KAAUqlF,EAAErlF,EAAE+f,IAAItW,EAAE/G,EAAE4c,IAAI+lE,EAAE57E,EAAE6V,GAAG5c,EAAE1C,GAAG,QAAQA,GAAG,QAAQqlF,EAAErlF,EAAE4e,IAAInV,EAAE6V,IAAI+lE,EAAE57E,EAAE6V,EAAE,EAAEqvK,UAAU,CAACpQ,SAAS,CAAC3/J,IAAI,SAASnV,GAAG,IAAI6V,EAAEg/I,EAAEpwI,KAAKysB,KAAKlxC,EAAE,YAAY,OAAO6V,EAAElf,SAASkf,EAAE,IAAI8uK,GAAGhqL,KAAKqF,EAAEm0C,WAAWywI,GAAGjqL,KAAKqF,EAAEm0C,WAAWn0C,EAAEivE,KAAK,GAAG,CAAC,IAAIg2G,QAAQ,CAAC,IAAM,UAAU,MAAQ,eAAepoK,EAAEwnK,cAAcxvB,EAAEqwB,UAAUlQ,SAAS,CAAC7/J,IAAI,SAASnV,GAAG,IAAI6V,EAAE7V,EAAE26J,WAAW,OAAO9kJ,GAAGA,EAAE8kJ,YAAY9kJ,EAAE8kJ,WAAWsa,cAAc,IAAI,EAAE3+J,IAAI,SAAStW,GAAG,IAAI6V,EAAE7V,EAAE26J,WAAW9kJ,IAAIA,EAAEo/J,cAAcp/J,EAAE8kJ,YAAY9kJ,EAAE8kJ,WAAWsa,cAAc,IAAIpgB,EAAE15H,KAAK,CAAC,WAAW,WAAW,YAAY,cAAc,cAAc,UAAU,UAAU,SAAS,cAAc,oBAAmB,WAAW05H,EAAEowB,QAAQz0L,KAAKgoD,eAAehoD,IAAI,IAAGqkK,EAAE1kG,GAAGu/G,OAAO,CAACyV,SAAS,SAAStvK,GAAG,IAAI7V,EAAE/G,EAAE2iF,EAAErlF,EAAEu0H,EAAExiH,EAAE,OAAOC,EAAEsN,GAAGrlB,KAAK2qC,MAAK,SAASn7B,GAAG60J,EAAErkK,MAAM20L,SAAStvK,EAAErS,KAAKhT,KAAKwP,EAAE8kL,GAAGt0L,OAAO,KAAIwP,EAAE+kL,GAAGlvK,IAAI3hB,OAAO1D,KAAK2qC,MAAK,WAAW,GAAGygD,EAAEkpG,GAAGt0L,MAAMyI,EAAE,IAAIzI,KAAKu+K,UAAU,IAAI8V,GAAGjpG,GAAG,IAAI,CAAC,IAAIkvC,EAAE,EAAEA,EAAE9qH,EAAE9L,OAAO42H,IAAIv0H,EAAEyJ,EAAE8qH,GAAG7xH,EAAE7H,QAAQ,IAAImF,EAAE,KAAK,IAAI0C,GAAG1C,EAAE,KAAK+R,EAAEu8K,GAAG5rL,GAAG2iF,IAAItzE,GAAG9X,KAAK49D,aAAa,QAAQ9lD,EAAE,CAAC,IAAG9X,IAAI,EAAE40L,YAAY,SAASvvK,GAAG,IAAI7V,EAAE/G,EAAE2iF,EAAErlF,EAAEu0H,EAAExiH,EAAE,OAAOC,EAAEsN,GAAGrlB,KAAK2qC,MAAK,SAASn7B,GAAG60J,EAAErkK,MAAM40L,YAAYvvK,EAAErS,KAAKhT,KAAKwP,EAAE8kL,GAAGt0L,OAAO,IAAGyD,UAAUC,QAAQ8L,EAAE+kL,GAAGlvK,IAAI3hB,OAAO1D,KAAK2qC,MAAK,WAAW,GAAGygD,EAAEkpG,GAAGt0L,MAAMyI,EAAE,IAAIzI,KAAKu+K,UAAU,IAAI8V,GAAGjpG,GAAG,IAAI,CAAC,IAAIkvC,EAAE,EAAEA,EAAE9qH,EAAE9L,OAAO42H,IAAY,IAAPv0H,EAAEyJ,EAAE8qH,IAAU,EAAE7xH,EAAE7H,QAAQ,IAAImF,EAAE,MAAK0C,EAAEA,EAAE2mC,QAAQ,IAAIrpC,EAAE,IAAI,KAAK+R,EAAEu8K,GAAG5rL,GAAG2iF,IAAItzE,GAAG9X,KAAK49D,aAAa,QAAQ9lD,EAAE,CAAC,IAAG9X,KAAKA,KAAK0gD,KAAK,QAAQ,GAAG,EAAEm0I,YAAY,SAASxvK,EAAE5c,GAAG,IAAI+G,EAAE47E,EAAErlF,EAAEu0H,EAAExiH,SAASuN,EAAE6jB,EAAE,WAAWpxB,GAAG3X,MAAMC,QAAQilB,GAAG,OAAOtN,EAAEsN,GAAGrlB,KAAK2qC,MAAK,SAASn7B,GAAG60J,EAAErkK,MAAM60L,YAAYxvK,EAAErS,KAAKhT,KAAKwP,EAAE8kL,GAAGt0L,MAAMyI,GAAGA,EAAE,IAAG,kBAAkBA,GAAGygC,EAAEzgC,EAAEzI,KAAK20L,SAAStvK,GAAGrlB,KAAK40L,YAAYvvK,IAAI7V,EAAE+kL,GAAGlvK,GAAGrlB,KAAK2qC,MAAK,WAAW,GAAGzB,EAAE,IAAIoxF,EAAE+pC,EAAErkK,MAAM+F,EAAE,EAAEA,EAAEyJ,EAAE9L,OAAOqC,IAAIqlF,EAAE57E,EAAEzJ,GAAGu0H,EAAEw6D,SAAS1pG,GAAGkvC,EAAEs6D,YAAYxpG,GAAGkvC,EAAEq6D,SAASvpG,aAAQ,IAAS/lE,GAAG,YAAYvN,KAAKszE,EAAEkpG,GAAGt0L,QAAQmgL,EAAEr6J,IAAI9lB,KAAK,gBAAgBorF,GAAGprF,KAAK49D,cAAc59D,KAAK49D,aAAa,QAAQwtB,IAAG,IAAK/lE,EAAE,GAAG86J,EAAEx7J,IAAI3kB,KAAK,kBAAkB,IAAI,IAAG,EAAE80L,SAAS,SAAStlL,GAAG,IAAI6V,EAAE5c,EAAE2iF,EAAE,EAAc,IAAZ/lE,EAAE,IAAI7V,EAAE,IAAU/G,EAAEzI,KAAKorF,SAAQ,IAAI3iF,EAAE81K,WAAW,GAAG,IAAI8V,GAAGC,GAAG7rL,IAAI,KAAK7H,QAAQykB,GAAG,OAAM,EAAG,OAAM,CAAE,IAAI,IAAI0vK,GAAG,MAAM1wB,EAAE1kG,GAAGu/G,OAAO,CAACj4G,IAAI,SAASx+D,GAAG,IAAI2iF,EAAE57E,EAAEzJ,EAAEsf,EAAErlB,KAAK,GAAG,OAAOyD,UAAUC,QAAQqC,EAAEgS,EAAEtP,GAAGzI,KAAK2qC,MAAK,SAASn7B,GAAG,IAAI6V,EAAE,IAAIrlB,KAAKu+K,WAAW,OAAOl5J,EAAEtf,EAAE0C,EAAEuK,KAAKhT,KAAKwP,EAAE60J,EAAErkK,MAAMinE,OAAOx+D,GAAG4c,EAAE,GAAG,iBAAiBA,EAAEA,GAAG,GAAGllB,MAAMC,QAAQilB,KAAKA,EAAEg/I,EAAE3mI,IAAIrY,GAAE,SAAS7V,GAAG,OAAO,MAAMA,EAAE,GAAGA,EAAE,EAAE,MAAK47E,EAAEi5E,EAAE2wB,SAASh1L,KAAKoD,OAAOihK,EAAE2wB,SAASh1L,KAAK2jD,SAASqE,iBAAiB,QAAQojC,QAAG,IAASA,EAAEtlE,IAAI9lB,KAAKqlB,EAAE,WAAWrlB,KAAK2H,MAAM0d,GAAG,KAAIA,GAAG+lE,EAAEi5E,EAAE2wB,SAAS3vK,EAAEjiB,OAAOihK,EAAE2wB,SAAS3vK,EAAEs+B,SAASqE,iBAAiB,QAAQojC,QAAG,KAAU57E,EAAE47E,EAAEzmE,IAAIU,EAAE,UAAU7V,EAAE,iBAAiBA,EAAE6V,EAAE1d,OAAO6H,EAAE4/B,QAAQ2lJ,GAAG,IAAI,MAAMvlL,EAAE,GAAGA,OAAE,CAAM,IAAI60J,EAAE6a,OAAO,CAAC8V,SAAS,CAAChM,OAAO,CAACrkK,IAAI,SAASnV,GAAG,IAAI6V,EAAEg/I,EAAEpwI,KAAKysB,KAAKlxC,EAAE,SAAS,OAAO,MAAM6V,EAAEA,EAAEgvK,GAAGhwB,EAAEhjH,KAAK7xC,GAAG,GAAGk2K,OAAO,CAAC/gK,IAAI,SAASnV,GAAG,IAAI6V,EAAE5c,EAAE2iF,EAAErlF,EAAEyJ,EAAE3P,QAAQy6H,EAAE9qH,EAAEi1K,cAAc3sK,EAAE,eAAetI,EAAEpM,KAAK8lC,EAAEpxB,EAAE,KAAK,GAAGwrJ,EAAExrJ,EAAEwiH,EAAE,EAAEv0H,EAAErC,OAAO,IAAI0nF,EAAEkvC,EAAE,EAAEgpC,EAAExrJ,EAAEwiH,EAAE,EAAElvC,EAAEk4E,EAAEl4E,IAAI,KAAK3iF,EAAE1C,EAAEqlF,IAAIo5F,UAAUp5F,IAAIkvC,KAAK7xH,EAAE6qE,YAAY7qE,EAAE0hK,WAAW72F,WAAWkxF,EAAE/7J,EAAE0hK,WAAW,aAAa,CAAC,GAAG9kJ,EAAEg/I,EAAE57J,GAAGw+D,MAAMnvD,EAAE,OAAOuN,EAAE6jB,EAAE55B,KAAK+V,EAAE,CAAC,OAAO6jB,CAAC,EAAEpjB,IAAI,SAAStW,EAAE6V,GAAmD,IAAhD,IAAI5c,EAAE2iF,EAAErlF,EAAEyJ,EAAE3P,QAAQy6H,EAAE+pC,EAAEkb,UAAUl6J,GAAGvN,EAAE/R,EAAErC,OAAaoU,OAAMszE,EAAErlF,EAAE+R,IAAI0sK,UAAU,EAAEngB,EAAEmb,QAAQnb,EAAE2wB,SAAShM,OAAOrkK,IAAIymE,GAAGkvC,MAAM7xH,GAAE,GAAI,OAAOA,IAAI+G,EAAEi1K,eAAe,GAAGnqD,CAAC,MAAM+pC,EAAE15H,KAAK,CAAC,QAAQ,aAAY,WAAW05H,EAAE2wB,SAASh1L,MAAM,CAAC8lB,IAAI,SAAStW,EAAE6V,GAAG,GAAGllB,MAAMC,QAAQilB,GAAG,OAAO7V,EAAE+0K,SAAS,EAAElgB,EAAEmb,QAAQnb,EAAE70J,GAAGy3D,MAAM5hD,EAAE,GAAGgH,EAAEunK,UAAUvvB,EAAE2wB,SAASh1L,MAAM2kB,IAAI,SAASnV,GAAG,OAAO,OAAOA,EAAEs7B,aAAa,SAAS,KAAKt7B,EAAE7H,KAAK,EAAE,IAAG0kB,EAAE4oK,QAAQ,cAAcnxB,EAAE,IAAI8gB,GAAG,kCAAkCsQ,GAAG,SAAS1lL,GAAGA,EAAE06K,iBAAiB,EAAE7lB,EAAE6a,OAAO7a,EAAE51J,MAAM,CAAC42D,QAAQ,SAAS71D,EAAE6V,EAAE5c,EAAE2iF,GAAG,IAAIrlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAErxB,EAAEwD,EAAE7L,EAAE,CAAC33B,GAAGshC,GAAG7V,EAAE2U,EAAE71B,KAAKxD,EAAE,QAAQA,EAAEpM,KAAKoM,EAAEu0J,EAAEl7H,EAAE71B,KAAKxD,EAAE,aAAaA,EAAEs6K,UAAUnjK,MAAM,KAAK,GAAG,GAAG2zG,EAAEruF,EAAEn0B,EAAErP,EAAEA,GAAGshC,EAAE,IAAIthC,EAAE81K,UAAU,IAAI91K,EAAE81K,WAAWqG,GAAGz6K,KAAK+pB,EAAEmwI,EAAE51J,MAAM87K,cAAc,EAAEr2J,EAAEtzB,QAAQ,OAAOszB,GAAG6vI,EAAE7vI,EAAEvN,MAAM,MAAMorB,QAAQgyH,EAAEt/H,QAAQ6+H,EAAEpvI,EAAEtzB,QAAQ,KAAK,GAAG,KAAKszB,GAAG1kB,EAAEA,EAAE60J,EAAE+a,SAAS5vK,EAAE,IAAI60J,EAAE/1E,MAAMp6D,EAAE,iBAAiB1kB,GAAGA,IAAIu6K,UAAU3+F,EAAE,EAAE,EAAE57E,EAAEs6K,UAAU/lB,EAAEvjK,KAAK,KAAKgP,EAAE27K,WAAW37K,EAAEs6K,UAAU,IAAIn4F,OAAO,UAAUoyE,EAAEvjK,KAAK,iBAAiB,WAAW,KAAKgP,EAAEwQ,YAAO,EAAOxQ,EAAE+iF,SAAS/iF,EAAE+iF,OAAO9pF,GAAG4c,EAAE,MAAMA,EAAE,CAAC7V,GAAG60J,EAAEkb,UAAUl6J,EAAE,CAAC7V,IAAIi5B,EAAE47H,EAAE51J,MAAMu7K,QAAQ91J,IAAI,CAAC,EAAEk3D,IAAI3iD,EAAE48B,UAAS,IAAK58B,EAAE48B,QAAQ9yD,MAAM9J,EAAE4c,IAAI,CAAC,IAAI+lE,IAAI3iD,EAAEgjJ,WAAW7iJ,EAAEngC,GAAG,CAAC,IAAIygC,EAAET,EAAEwhJ,cAAc/1J,EAAE0wJ,GAAGz6K,KAAK++B,EAAEhV,KAAKomG,EAAEA,EAAE6vC,YAAY7vC,EAAEA,EAAEA,EAAE6vC,WAAW/pI,EAAE9wB,KAAKgrH,GAAGxiH,EAAEwiH,EAAExiH,KAAKrP,EAAEg4K,eAAe12I,IAAI3J,EAAE9wB,KAAKwI,EAAEoqK,aAAapqK,EAAEq9K,cAAcrxB,EAAE,CAAK,IAAJ/9J,EAAE,GAASu0H,EAAEl6F,EAAEr6B,QAAQyJ,EAAEw7K,wBAAuB/+I,EAAEquF,EAAE9qH,EAAEpM,KAAK,EAAE2C,EAAEmjC,EAAET,EAAE+hJ,UAAUt2J,GAAG4lC,GAAGqmH,EAAEx7J,IAAI21G,EAAE,WAAWj5H,OAAOC,OAAO,OAAOkO,EAAEpM,OAAO+8K,EAAEx7J,IAAI21G,EAAE,YAAYxgE,EAAEvnD,MAAM+nH,EAAEj1G,IAAIy0C,EAAEwpG,GAAGhpC,EAAEgpC,KAAKxpG,EAAEvnD,OAAO6zJ,EAAE9rC,KAAK9qH,EAAEwQ,OAAO85C,EAAEvnD,MAAM+nH,EAAEj1G,IAAG,IAAK7V,EAAEwQ,QAAQxQ,EAAE46K,kBAAkB,OAAO56K,EAAEpM,KAAK8wB,EAAEk3D,GAAG57E,EAAEo8K,sBAAsBnjJ,EAAE4gJ,WAAU,IAAK5gJ,EAAE4gJ,SAAS92K,MAAM6tB,EAAEwzB,MAAMvuC,KAAK+gJ,EAAE39J,IAAI66J,GAAGvrJ,EAAEtP,EAAEyrB,MAAM0U,EAAEngC,MAAMqP,EAAErP,EAAE66J,MAAM76J,EAAE66J,GAAG,MAAMe,EAAE51J,MAAM87K,UAAUr2J,EAAE1kB,EAAEw7K,wBAAwB/+I,EAAExgC,iBAAiByoB,EAAEghK,IAAIzsL,EAAEyrB,KAAK1kB,EAAEw7K,wBAAwB/+I,EAAEtS,oBAAoBzF,EAAEghK,IAAI7wB,EAAE51J,MAAM87K,eAAU,EAAOzyK,IAAIrP,EAAE66J,GAAGxrJ,IAAItI,EAAEwQ,MAAM,CAAC,EAAEo1K,SAAS,SAAS5lL,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAEi5E,EAAE6a,OAAO,IAAI7a,EAAE/1E,MAAM7lF,EAAE,CAACrF,KAAKoM,EAAEw8K,aAAY,IAAK3nB,EAAE51J,MAAM42D,QAAQ+lB,EAAE,KAAK/lE,EAAE,IAAIg/I,EAAE1kG,GAAGu/G,OAAO,CAAC75G,QAAQ,SAAS71D,EAAE6V,GAAG,OAAOrlB,KAAK2qC,MAAK,WAAW05H,EAAE51J,MAAM42D,QAAQ71D,EAAE6V,EAAErlB,KAAK,GAAE,EAAEq1L,eAAe,SAAS7lL,EAAE6V,GAAG,IAAI5c,EAAEzI,KAAK,GAAG,GAAGyI,EAAE,OAAO47J,EAAE51J,MAAM42D,QAAQ71D,EAAE6V,EAAE5c,GAAE,EAAG,IAAI4jB,EAAE4oK,SAAS5wB,EAAE15H,KAAK,CAAC2U,MAAM,UAAUquI,KAAK,aAAY,SAASllL,EAAE2iF,GAAG,IAAIrlF,EAAE,SAASyJ,GAAG60J,EAAE51J,MAAM2mL,SAAShqG,EAAE57E,EAAE+iF,OAAO8xE,EAAE51J,MAAMo8K,IAAIr7K,GAAG,EAAE60J,EAAE51J,MAAMu7K,QAAQ5+F,GAAG,CAACruB,MAAM,WAAW,IAAIvtD,EAAExP,KAAKygL,eAAezgL,KAAKm6B,UAAUn6B,KAAKqlB,EAAE86J,EAAE4H,OAAOv4K,EAAE47E,GAAG/lE,GAAG7V,EAAE/D,iBAAiBhD,EAAE1C,GAAE,GAAIo6K,EAAE4H,OAAOv4K,EAAE47E,GAAG/lE,GAAG,GAAG,EAAE,EAAEslK,SAAS,WAAW,IAAIn7K,EAAExP,KAAKygL,eAAezgL,KAAKm6B,UAAUn6B,KAAKqlB,EAAE86J,EAAE4H,OAAOv4K,EAAE47E,GAAG,EAAE/lE,EAAE86J,EAAE4H,OAAOv4K,EAAE47E,EAAE/lE,IAAI7V,EAAEmqB,oBAAoBlxB,EAAE1C,GAAE,GAAIo6K,EAAE/3H,OAAO54C,EAAE47E,GAAG,EAAE,IAAGi5E,EAAEixB,SAAS,SAAS9lL,GAAG,IAAI6V,EAAE5c,EAAE,IAAI+G,GAAG,iBAAiBA,EAAE,OAAO,KAAK,IAAI6V,GAAG,IAAIy+I,EAAE9G,WAAWC,gBAAgBztJ,EAAE,WAAW,CAAC,MAAMA,GAAG,CAAC,OAAO/G,EAAE4c,GAAGA,EAAE+hC,qBAAqB,eAAe,GAAG/hC,IAAI5c,GAAG47J,EAAEzkK,MAAM,iBAAiB6I,EAAE47J,EAAE3mI,IAAIj1B,EAAE83K,YAAW,SAAS/wK,GAAG,OAAOA,EAAE63C,WAAW,IAAG7mD,KAAK,MAAMgP,IAAI6V,CAAC,EAAE,IAAIkwK,GAAGC,GAAG,QAAQz/H,GAAG,SAAS0/H,GAAG,wCAAwC5Q,GAAG,qCAAqC,SAAS6Q,GAAGjtL,EAAE+G,EAAE47E,EAAErlF,GAAG,IAAIsf,EAAE,GAAGllB,MAAMC,QAAQoP,GAAG60J,EAAE15H,KAAKn7B,GAAE,SAASA,EAAE6V,GAAG+lE,GAAGoqG,GAAGrrL,KAAK1B,GAAG1C,EAAE0C,EAAE4c,GAAGqwK,GAAGjtL,EAAE,KAAK,iBAAiB4c,GAAG,MAAMA,EAAE7V,EAAE,IAAI,IAAI6V,EAAE+lE,EAAErlF,EAAE,SAAQ,GAAGqlF,GAAG,WAAWg6E,EAAE51J,GAAGzJ,EAAE0C,EAAE+G,QAAQ,IAAI6V,KAAK7V,EAAEkmL,GAAGjtL,EAAE,IAAI4c,EAAE,IAAI7V,EAAE6V,GAAG+lE,EAAErlF,EAAE,CAACs+J,EAAEpY,MAAM,SAASz8I,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAE,GAAGrlF,EAAE,SAASyJ,EAAE6V,GAAG,IAAI5c,EAAEsP,EAAEsN,GAAGA,IAAIA,EAAE+lE,EAAEA,EAAE1nF,QAAQiyL,mBAAmBnmL,GAAG,IAAImmL,mBAAmB,MAAMltL,EAAE,GAAGA,EAAE,EAAE,GAAG,MAAM+G,EAAE,MAAM,GAAG,GAAGrP,MAAMC,QAAQoP,IAAIA,EAAEkvK,SAASra,EAAE8a,cAAc3vK,GAAG60J,EAAE15H,KAAKn7B,GAAE,WAAWzJ,EAAE/F,KAAKD,KAAKC,KAAK2H,MAAM,SAAQ,IAAIc,KAAK+G,EAAEkmL,GAAGjtL,EAAE+G,EAAE/G,GAAG4c,EAAEtf,GAAG,OAAOqlF,EAAE5qF,KAAK,IAAI,EAAE6jK,EAAE1kG,GAAGu/G,OAAO,CAACx2K,UAAU,WAAW,OAAO27J,EAAEpY,MAAMjsJ,KAAK41L,iBAAiB,EAAEA,eAAe,WAAW,OAAO51L,KAAK09B,KAAI,WAAW,IAAIluB,EAAE60J,EAAE9hH,KAAKviD,KAAK,YAAY,OAAOwP,EAAE60J,EAAEkb,UAAU/vK,GAAGxP,IAAI,IAAGiY,QAAO,WAAW,IAAIzI,EAAExP,KAAKoD,KAAK,OAAOpD,KAAKD,OAAOskK,EAAErkK,MAAMi6K,GAAG,cAAc4K,GAAG16K,KAAKnK,KAAK2jD,YAAY8xI,GAAGtrL,KAAKqF,KAAKxP,KAAKukL,UAAUlD,GAAGl3K,KAAKqF,GAAG,IAAGkuB,KAAI,SAASluB,EAAE6V,GAAG,IAAI5c,EAAE47J,EAAErkK,MAAMinE,MAAM,OAAO,MAAMx+D,EAAE,KAAKtI,MAAMC,QAAQqI,GAAG47J,EAAE3mI,IAAIj1B,GAAE,SAAS+G,GAAG,MAAM,CAACzP,KAAKslB,EAAEtlB,KAAK4H,MAAM6H,EAAE4/B,QAAQ2mB,GAAG,QAAQ,IAAG,CAACh2D,KAAKslB,EAAEtlB,KAAK4H,MAAMc,EAAE2mC,QAAQ2mB,GAAG,QAAQ,IAAGpxC,KAAK,IAAI0/I,EAAE1kG,GAAGu/G,OAAO,CAAC2W,QAAQ,SAASrmL,GAAG,IAAI6V,EAAE,OAAOrlB,KAAK,KAAK+X,EAAEvI,KAAKA,EAAEA,EAAEwD,KAAKhT,KAAK,KAAKqlB,EAAEg/I,EAAE70J,EAAExP,KAAK,GAAGygL,eAAe5B,GAAG,GAAGjrG,OAAM,GAAI5zE,KAAK,GAAGmqK,YAAY9kJ,EAAEi/C,aAAatkE,KAAK,IAAIqlB,EAAEqY,KAAI,WAAsB,IAAX,IAAIluB,EAAExP,KAAWwP,EAAEsmL,mBAAkBtmL,EAAEA,EAAEsmL,kBAAkB,OAAOtmL,CAAC,IAAGq/K,OAAO7uL,OAAOA,IAAI,EAAE+1L,UAAU,SAASttL,GAAG,OAAOsP,EAAEtP,GAAGzI,KAAK2qC,MAAK,SAASn7B,GAAG60J,EAAErkK,MAAM+1L,UAAUttL,EAAEuK,KAAKhT,KAAKwP,GAAG,IAAGxP,KAAK2qC,MAAK,WAAW,IAAIn7B,EAAE60J,EAAErkK,MAAMqlB,EAAE7V,EAAEguD,WAAWn4C,EAAE3hB,OAAO2hB,EAAEwwK,QAAQptL,GAAG+G,EAAEq/K,OAAOpmL,EAAE,GAAE,EAAEm3D,KAAK,SAASv6C,GAAG,IAAI5c,EAAEsP,EAAEsN,GAAG,OAAOrlB,KAAK2qC,MAAK,SAASn7B,GAAG60J,EAAErkK,MAAM61L,QAAQptL,EAAE4c,EAAErS,KAAKhT,KAAKwP,GAAG6V,EAAE,GAAE,EAAE83J,OAAO,SAAS3tK,GAAG,OAAOxP,KAAK0kL,OAAOl1K,GAAG00K,IAAI,QAAQv5I,MAAK,WAAW05H,EAAErkK,MAAM+uL,YAAY/uL,KAAKugL,WAAW,IAAGvgL,IAAI,IAAIqkK,EAAEv7E,KAAKk7F,QAAQpvJ,OAAO,SAASplB,GAAG,OAAO60J,EAAEv7E,KAAKk7F,QAAQgS,QAAQxmL,EAAE,EAAE60J,EAAEv7E,KAAKk7F,QAAQgS,QAAQ,SAASxmL,GAAG,SAASA,EAAE2gL,aAAa3gL,EAAEqhL,cAAcrhL,EAAEuiL,iBAAiBruL,OAAO,EAAE2oB,EAAE4pK,qBAAqBV,GAAGxrJ,EAAEmsJ,eAAeD,mBAAmB,IAAIpzJ,MAAMklB,UAAU,6BAA6B,IAAIwtI,GAAGhV,WAAW78K,QAAQ2gK,EAAE0hB,UAAU,SAASv2K,EAAE6V,EAAE5c,GAAG,MAAM,iBAAiB+G,EAAE,IAAI,kBAAkB6V,IAAI5c,EAAE4c,EAAEA,GAAE,GAAIA,IAAIgH,EAAE4pK,qBAAqB7qG,GAAG/lE,EAAE0kB,EAAEmsJ,eAAeD,mBAAmB,KAAKt7F,cAAc,SAASlc,KAAK10C,EAAE+U,SAAS2/B,KAAKp5D,EAAE0+C,KAAK1V,YAAY+8B,IAAI/lE,EAAE0kB,GAAGuwF,GAAG7xH,GAAG,IAAI1C,EAAE80C,EAAEqlC,KAAK1wE,IAAI,CAAC6V,EAAEs1E,cAAc50F,EAAE,MAAMA,EAAE43E,GAAG,CAACnuE,GAAG6V,EAAEi1G,GAAGA,GAAGA,EAAE52H,QAAQ2gK,EAAE/pC,GAAGlyE,SAASi8G,EAAE1yB,MAAM,GAAG5rI,EAAEw6K,cAAc,IAAIn1F,EAAErlF,EAAEu0H,CAAC,EAAE+pC,EAAEpqC,OAAO,CAACk8D,UAAU,SAAS3mL,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAErlF,EAAEu0H,EAAExiH,EAAEoxB,EAAEo6H,EAAExpG,EAAEuqG,EAAEmkB,IAAIh5K,EAAE,YAAYi5B,EAAE47H,EAAE70J,GAAGy8B,EAAE,CAAC,EAAE,WAAW6tB,IAAItqD,EAAE8wH,MAAM29C,SAAS,YAAY/0I,EAAET,EAAEwxF,SAASK,EAAE+pC,EAAEmkB,IAAIh5K,EAAE,OAAO8zJ,EAAEe,EAAEmkB,IAAIh5K,EAAE,SAAS,aAAasqD,GAAG,UAAUA,KAAK,GAAGwgE,EAAEgpC,GAAG1iK,QAAQ,SAASkX,GAAGszE,EAAE3iD,EAAEw1I,YAAYkE,IAAIp8K,EAAEqlF,EAAEviB,OAAO/wD,EAAEkB,WAAWshH,IAAI,EAAEv0H,EAAEiT,WAAWsqJ,IAAI,GAAGvrJ,EAAEsN,KAAKA,EAAEA,EAAErS,KAAKxD,EAAE/G,EAAE47J,EAAE6a,OAAO,CAAC,EAAEh2I,KAAK,MAAM7jB,EAAE88J,MAAMl2I,EAAEk2I,IAAI98J,EAAE88J,IAAIj5I,EAAEi5I,IAAIrqK,GAAG,MAAMuN,EAAEwjD,OAAO58B,EAAE48B,KAAKxjD,EAAEwjD,KAAK3/B,EAAE2/B,KAAK9iE,GAAG,UAAUsf,EAAEA,EAAE+wK,MAAMpjL,KAAKxD,EAAEy8B,GAAGxD,EAAE+/I,IAAIv8I,EAAE,GAAGo4H,EAAE1kG,GAAGu/G,OAAO,CAACjlD,OAAO,SAAS50G,GAAG,GAAG5hB,UAAUC,OAAO,YAAO,IAAS2hB,EAAErlB,KAAKA,KAAK2qC,MAAK,SAASn7B,GAAG60J,EAAEpqC,OAAOk8D,UAAUn2L,KAAKqlB,EAAE7V,EAAE,IAAG,IAAIA,EAAE/G,EAAE2iF,EAAEprF,KAAK,GAAG,OAAOorF,EAAEA,EAAE2mG,iBAAiBruL,QAAQ8L,EAAE47E,EAAEioG,wBAAwB5qL,EAAE2iF,EAAEq1F,cAAcyB,YAAY,CAACC,IAAI3yK,EAAE2yK,IAAI15K,EAAE4tL,YAAYxtH,KAAKr5D,EAAEq5D,KAAKpgE,EAAE6tL,cAAc,CAACnU,IAAI,EAAEt5G,KAAK,QAAG,CAAM,EAAEo1G,SAAS,WAAW,GAAGj+K,KAAK,GAAG,CAAC,IAAIwP,EAAE6V,EAAE5c,EAAE2iF,EAAEprF,KAAK,GAAG+F,EAAE,CAACo8K,IAAI,EAAEt5G,KAAK,GAAG,GAAG,UAAUw7F,EAAEmkB,IAAIp9F,EAAE,YAAY/lE,EAAE+lE,EAAEioG,4BAA4B,CAAuE,IAAtEhuK,EAAErlB,KAAKi6H,SAASxxH,EAAE2iF,EAAEq1F,cAAcjxK,EAAE47E,EAAEmrG,cAAc9tL,EAAEu5K,gBAAsBxyK,IAAIA,IAAI/G,EAAEo6B,MAAMrzB,IAAI/G,EAAEu5K,kBAAkB,WAAW3d,EAAEmkB,IAAIh5K,EAAE,aAAYA,EAAEA,EAAE26J,WAAW36J,GAAGA,IAAI47E,GAAG,IAAI57E,EAAE+uK,YAAYx4K,EAAEs+J,EAAE70J,GAAGyqH,UAAUkoD,KAAK9d,EAAEmkB,IAAIh5K,EAAE,kBAAiB,GAAIzJ,EAAE8iE,MAAMw7F,EAAEmkB,IAAIh5K,EAAE,mBAAkB,GAAI,CAAC,MAAM,CAAC2yK,IAAI98J,EAAE88J,IAAIp8K,EAAEo8K,IAAI9d,EAAEmkB,IAAIp9F,EAAE,aAAY,GAAIviB,KAAKxjD,EAAEwjD,KAAK9iE,EAAE8iE,KAAKw7F,EAAEmkB,IAAIp9F,EAAE,cAAa,GAAI,CAAC,EAAEmrG,aAAa,WAAW,OAAOv2L,KAAK09B,KAAI,WAAmC,IAAxB,IAAIluB,EAAExP,KAAKu2L,aAAmB/mL,GAAG,WAAW60J,EAAEmkB,IAAIh5K,EAAE,aAAYA,EAAEA,EAAE+mL,aAAa,OAAO/mL,GAAGm4J,EAAE,GAAE,IAAItD,EAAE15H,KAAK,CAAC6rJ,WAAW,cAAcC,UAAU,gBAAe,SAASpxK,EAAEtf,GAAG,IAAIu0H,EAAE,gBAAgBv0H,EAAEs+J,EAAE1kG,GAAGt6C,GAAG,SAAS7V,GAAG,OAAOk7B,EAAE1qC,MAAK,SAASwP,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAE,GAAGxiD,EAAEp5B,GAAG47E,EAAE57E,EAAE,IAAIA,EAAE+uK,WAAWnzF,EAAE57E,EAAE0yK,kBAAa,IAASz5K,EAAE,OAAO2iF,EAAEA,EAAErlF,GAAGyJ,EAAE6V,GAAG+lE,EAAEA,EAAEsrG,SAASp8D,EAAElvC,EAAEkrG,YAAY7tL,EAAE6xH,EAAE7xH,EAAE2iF,EAAEirG,aAAa7mL,EAAE6V,GAAG5c,CAAC,GAAE4c,EAAE7V,EAAE/L,UAAUC,OAAO,CAAC,IAAG2gK,EAAE15H,KAAK,CAAC,MAAM,SAAQ,SAASn7B,EAAE/G,GAAG47J,EAAE2tB,SAASvpL,GAAGunL,GAAG3jK,EAAEkkK,eAAc,SAAS/gL,EAAE6V,GAAG,GAAGA,EAAE,OAAOA,EAAEwqK,GAAGrgL,EAAE/G,GAAG2mL,GAAGjlL,KAAKkb,GAAGg/I,EAAE70J,GAAGyuK,WAAWx1K,GAAG,KAAK4c,CAAC,GAAE,IAAGg/I,EAAE15H,KAAK,CAACgsJ,OAAO,SAASC,MAAM,UAAS,SAAS9+K,EAAEoxB,GAAGm7H,EAAE15H,KAAK,CAAC4oJ,QAAQ,QAAQz7K,EAAEs2C,QAAQllB,EAAE,GAAG,QAAQpxB,IAAG,SAASszE,EAAEkvC,GAAG+pC,EAAE1kG,GAAG26D,GAAG,SAAS9qH,EAAE6V,GAAG,IAAI5c,EAAEhF,UAAUC,SAAS0nF,GAAG,kBAAkB57E,GAAGzJ,EAAEqlF,KAAI,IAAK57E,IAAG,IAAK6V,EAAE,SAAS,UAAU,OAAOqlB,EAAE1qC,MAAK,SAASwP,EAAE6V,EAAE5c,GAAG,IAAI2iF,EAAE,OAAOxiD,EAAEp5B,GAAG,IAAI8qH,EAAE15H,QAAQ,SAAS4O,EAAE,QAAQsI,GAAGtI,EAAE2qB,SAAS6nJ,gBAAgB,SAASlqK,GAAG,IAAItI,EAAE+uK,UAAUnzF,EAAE57E,EAAEwyK,gBAAgBzmK,KAAKC,IAAIhM,EAAEqzB,KAAK,SAAS/qB,GAAGszE,EAAE,SAAStzE,GAAGtI,EAAEqzB,KAAK,SAAS/qB,GAAGszE,EAAE,SAAStzE,GAAGszE,EAAE,SAAStzE,UAAK,IAASrP,EAAE47J,EAAEmkB,IAAIh5K,EAAE6V,EAAEtf,GAAGs+J,EAAE/jC,MAAM9wH,EAAE6V,EAAE5c,EAAE1C,EAAE,GAAEmjC,EAAEzgC,EAAE+G,OAAE,EAAO/G,EAAE,CAAC,GAAE,IAAG47J,EAAE1kG,GAAGu/G,OAAO,CAAC9uJ,KAAK,SAAS5gB,EAAE6V,EAAE5c,GAAG,OAAOzI,KAAK0pB,GAAGla,EAAE,KAAK6V,EAAE5c,EAAE,EAAEouL,OAAO,SAASrnL,EAAE6V,GAAG,OAAOrlB,KAAK45B,IAAIpqB,EAAE,KAAK6V,EAAE,EAAE+5G,SAAS,SAAS5vH,EAAE6V,EAAE5c,EAAE2iF,GAAG,OAAOprF,KAAK0pB,GAAGrE,EAAE7V,EAAE/G,EAAE2iF,EAAE,EAAE0rG,WAAW,SAAStnL,EAAE6V,EAAE5c,GAAG,OAAO,IAAIhF,UAAUC,OAAO1D,KAAK45B,IAAIpqB,EAAE,MAAMxP,KAAK45B,IAAIvU,EAAE7V,GAAG,KAAK/G,EAAE,EAAEsuL,MAAM,SAASvnL,EAAE6V,GAAG,OAAOrlB,KAAK4tL,WAAWp+K,GAAGq+K,WAAWxoK,GAAG7V,EAAE,IAAI60J,EAAE15H,KAAK,wLAAwLhkB,MAAM,MAAK,SAASnX,EAAE/G,GAAG47J,EAAE1kG,GAAGl3D,GAAG,SAAS+G,EAAE6V,GAAG,OAAO,EAAE5hB,UAAUC,OAAO1D,KAAK0pB,GAAGjhB,EAAE,KAAK+G,EAAE6V,GAAGrlB,KAAKqlE,QAAQ58D,EAAE,CAAC,IAAG,IAAIuuL,GAAG,sDAAsD3yB,EAAE4yB,MAAM,SAASznL,EAAE6V,GAAG,IAAI5c,EAAE2iF,EAAErlF,EAAE,GAAG,iBAAiBsf,IAAI5c,EAAE+G,EAAE6V,GAAGA,EAAE7V,EAAEA,EAAE/G,GAAGsP,EAAEvI,GAAG,OAAO47E,EAAEliD,EAAEl2B,KAAKvP,UAAU,IAAIsC,EAAE,WAAW,OAAOyJ,EAAE+C,MAAM8S,GAAGrlB,KAAKorF,EAAEzwB,OAAOzxB,EAAEl2B,KAAKvP,YAAY,GAAGg8K,KAAKjwK,EAAEiwK,KAAKjwK,EAAEiwK,MAAMpb,EAAEob,OAAO15K,CAAC,EAAEs+J,EAAE6yB,UAAU,SAAS1nL,GAAGA,EAAE60J,EAAEujB,YAAYvjB,EAAE1jH,OAAM,EAAG,EAAE0jH,EAAEjkK,QAAQD,MAAMC,QAAQikK,EAAE8yB,UAAUxuL,KAAK24B,MAAM+iI,EAAE1gH,SAAS6gH,EAAEH,EAAE+yB,WAAWr/K,EAAEssJ,EAAEgzB,SAASzuJ,EAAEy7H,EAAEizB,UAAU5wB,EAAErC,EAAEjhK,KAAKgiK,EAAEf,EAAEtoJ,IAAID,KAAKC,IAAIsoJ,EAAEkzB,UAAU,SAAS/nL,GAAG,IAAI6V,EAAEg/I,EAAEjhK,KAAKoM,GAAG,OAAO,WAAW6V,GAAG,WAAWA,KAAK1B,MAAMnU,EAAEwJ,WAAWxJ,GAAG,EAAE60J,EAAEvgF,KAAK,SAASt0E,GAAG,OAAO,MAAMA,EAAE,IAAIA,EAAE,IAAI4/B,QAAQ4nJ,GAAG,KAAK,OAAgF,KAArB,aAAY,OAAO3yB,CAAE,UAAvB,OAAuB,aAAE,IAAImzB,GAAG1zB,EAAE2zB,OAAOC,GAAG5zB,EAAEp5H,EAAE,OAAO25H,EAAEszB,WAAW,SAASnoL,GAAG,OAAOs0J,EAAEp5H,IAAI25H,IAAIP,EAAEp5H,EAAEgtJ,IAAIloL,GAAGs0J,EAAE2zB,SAASpzB,IAAIP,EAAE2zB,OAAOD,IAAInzB,CAAC,OAAE,IAAoB70J,IAAIs0J,EAAE2zB,OAAO3zB,EAAEp5H,EAAE25H,GAAGA,CAAC,iDCD5itE,mCASA,WACE,aAEA,IAAIrF,MAAQ,wBACR44B,OAA2B,iBAAX9uL,OAChBtR,KAAOogM,OAAS9uL,OAAS,CAAC,EAC1BtR,KAAKqgM,mBACPD,QAAS,GAEX,IAAIE,YAAcF,QAA0B,iBAAT9/L,KAC/BigM,SAAWvgM,KAAKwgM,mBAAwC,iBAAZ3qL,SAAwBA,QAAQC,UAAYD,QAAQC,SAASyiB,KACzGgoK,QACFvgM,KAAO6yL,oBAAAA,EACEyN,aACTtgM,KAAOM,MAET,IAAImgM,WAAazgM,KAAK0gM,qBAAqDvgM,OAAOD,QAC9EygM,IAAsCvgM,oBAAAA,KACtCwgM,cAAgB5gM,KAAK6gM,wBAAiD,oBAAhB3wJ,YACtD4wJ,UAAY,mBAAmB3xK,MAAM,IACrC4xK,MAAQ,CAAC,IAAK,MAAO,SAAU,YAC/BC,MAAQ,CAAC,EAAG,EAAG,GAAI,IACnBC,aAAe,CAAC,MAAO,QAAS,SAAU,SAAU,cAAe,UACnEC,mBAAqB,mEAAmE/xK,MAAM,IAE9FgyK,OAAS,GAAIC,QACjB,GAAIR,aAAc,CAChB,IAAInyH,OAAS,IAAIv+B,YAAY,IAC7BkxJ,QAAU,IAAIjgL,WAAWstD,QACzB0yH,OAAS,IAAI7kC,YAAY7tF,OAC3B,EAEIzuE,KAAKwgM,mBAAsB73L,MAAMC,UACnCD,MAAMC,QAAU,SAAUm4C,GACxB,MAA+C,mBAAxCl3C,OAAOD,UAAUiuC,SAASr8B,KAAKulC,EACxC,IAGE6/I,eAAiB5gM,KAAKqhM,gCAAmCnxJ,YAAYoxJ,SACvEpxJ,YAAYoxJ,OAAS,SAAUvgJ,GAC7B,MAAsB,iBAARA,GAAoBA,EAAI0tB,QAAU1tB,EAAI0tB,OAAO1kE,cAAgBmmC,WAC7E,GA4DF,IAAIqxJ,mBAAqB,SAAUC,GACjC,OAAO,SAAUz4L,GACf,OAAO,IAAI04L,KAAI,GAAMC,OAAO34L,GAASy4L,IACvC,CACF,EAsBIG,aAAe,WACjB,IAAIh1J,EAAS40J,mBAAmB,OAC5BhB,UACF5zJ,EAASi1J,SAASj1J,IAEpBA,EAAO7iC,OAAS,WACd,OAAO,IAAI23L,GACb,EACA90J,EAAO+0J,OAAS,SAAU34L,GACxB,OAAO4jC,EAAO7iC,SAAS43L,OAAO34L,EAChC,EACA,IAAK,IAAIwF,EAAI,EAAGA,EAAI0yL,aAAa/0L,SAAUqC,EAAG,CAC5C,IAAI3C,EAAOq1L,aAAa1yL,GACxBo+B,EAAO/gC,GAAQ21L,mBAAmB31L,EACpC,CACA,OAAO+gC,CACT,EAEIi1J,SAAW,SAAUj1J,QACvB,IAAI6C,OAASqyJ,KAAK,qBACdC,OAASD,KAAK,4BACdE,WAAa,SAAUh5L,GACzB,GAAuB,iBAAZA,EACT,OAAOymC,OAAOwyJ,WAAW,OAAON,OAAO34L,EAAS,QAAQk5L,OAAO,OAE/D,GAAIl5L,QACF,MAAMy+J,MAKV,OAJaz+J,EAAQgB,cAAgBmmC,cACjCnnC,EAAU,IAAIoY,WAAWpY,IAGzBJ,MAAMC,QAAQG,IAAYmnC,YAAYoxJ,OAAOv4L,IAC/CA,EAAQgB,cAAgB+3L,OACjBtyJ,OAAOwyJ,WAAW,OAAON,OAAO,IAAII,OAAO/4L,IAAUk5L,OAAO,OAE5Dt1J,OAAO5jC,EAElB,EACA,OAAOg5L,UACT,EAQA,SAASN,IAAIS,GACX,GAAIA,EACFf,OAAO,GAAKA,OAAO,IAAMA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GACxDA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GAC3CA,OAAO,GAAKA,OAAO,GAAKA,OAAO,IAAMA,OAAO,IAC5CA,OAAO,IAAMA,OAAO,IAAMA,OAAO,IAAMA,OAAO,IAAM,EACpD34L,KAAK24L,OAASA,OACd34L,KAAK44L,QAAUA,aAEf,GAAIR,aAAc,CAChB,IAAInyH,EAAS,IAAIv+B,YAAY,IAC7B1nC,KAAK44L,QAAU,IAAIjgL,WAAWstD,GAC9BjmE,KAAK24L,OAAS,IAAI7kC,YAAY7tF,EAChC,MACEjmE,KAAK24L,OAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGnE34L,KAAK25L,GAAK35L,KAAK45L,GAAK55L,KAAK65L,GAAK75L,KAAK85L,GAAK95L,KAAKyW,MAAQzW,KAAK+5L,MAAQ/5L,KAAKg6L,OAAS,EAChFh6L,KAAKi6L,UAAYj6L,KAAKk6L,QAAS,EAC/Bl6L,KAAKkjJ,OAAQ,CACf,CAWA+1C,IAAI73L,UAAU83L,OAAS,SAAU34L,GAC/B,IAAIP,KAAKi6L,UAAT,CAIA,IAAIE,EAAW/2L,SAAc7C,EAC7B,GAAa,WAAT6C,EAAmB,CACrB,GAAa,WAATA,EAWF,MAAM47J,MAVN,GAAgB,OAAZz+J,EACF,MAAMy+J,MACD,GAAIo5B,cAAgB73L,EAAQgB,cAAgBmmC,YACjDnnC,EAAU,IAAIoY,WAAWpY,QACpB,KAAKJ,MAAMC,QAAQG,IACnB63L,cAAiB1wJ,YAAYoxJ,OAAOv4L,IACvC,MAAMy+J,MAMZm7B,GAAY,CACd,CAIA,IAHA,IAAIv+G,EAAiB71E,EAAXm3B,EAAQ,EAAMx5B,EAASnD,EAAQmD,OAAQi1L,EAAS34L,KAAK24L,OAC3DC,EAAU54L,KAAK44L,QAEZ17J,EAAQx5B,GAAQ,CAUrB,GATI1D,KAAKk6L,SACPl6L,KAAKk6L,QAAS,EACdvB,EAAO,GAAKA,EAAO,IACnBA,EAAO,IAAMA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC5CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC3CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAC5CA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAM,GAGlDwB,EACF,GAAI/B,aACF,IAAKryL,EAAI/F,KAAKyW,MAAOymB,EAAQx5B,GAAUqC,EAAI,KAAMm3B,EAC/C07J,EAAQ7yL,KAAOxF,EAAQ28B,QAGzB,IAAKn3B,EAAI/F,KAAKyW,MAAOymB,EAAQx5B,GAAUqC,EAAI,KAAMm3B,EAC/Cy7J,EAAO5yL,GAAK,IAAMxF,EAAQ28B,IAAUs7J,MAAY,EAANzyL,UAI9C,GAAIqyL,aACF,IAAKryL,EAAI/F,KAAKyW,MAAOymB,EAAQx5B,GAAUqC,EAAI,KAAMm3B,GAC/C0+C,EAAOr7E,EAAQ2pC,WAAWhN,IACf,IACT07J,EAAQ7yL,KAAO61E,EACNA,EAAO,MAChBg9G,EAAQ7yL,KAAO,IAAQ61E,GAAQ,EAC/Bg9G,EAAQ7yL,KAAO,IAAe,GAAP61E,GACdA,EAAO,OAAUA,GAAQ,OAClCg9G,EAAQ7yL,KAAO,IAAQ61E,GAAQ,GAC/Bg9G,EAAQ7yL,KAAO,IAAS61E,GAAQ,EAAK,GACrCg9G,EAAQ7yL,KAAO,IAAe,GAAP61E,IAEvBA,EAAO,QAAoB,KAAPA,IAAiB,GAAqC,KAA9Br7E,EAAQ2pC,aAAahN,IACjE07J,EAAQ7yL,KAAO,IAAQ61E,GAAQ,GAC/Bg9G,EAAQ7yL,KAAO,IAAS61E,GAAQ,GAAM,GACtCg9G,EAAQ7yL,KAAO,IAAS61E,GAAQ,EAAK,GACrCg9G,EAAQ7yL,KAAO,IAAe,GAAP61E,QAI3B,IAAK71E,EAAI/F,KAAKyW,MAAOymB,EAAQx5B,GAAUqC,EAAI,KAAMm3B,GAC/C0+C,EAAOr7E,EAAQ2pC,WAAWhN,IACf,IACTy7J,EAAO5yL,GAAK,IAAM61E,GAAQ48G,MAAY,EAANzyL,KACvB61E,EAAO,MAChB+8G,EAAO5yL,GAAK,KAAO,IAAQ61E,GAAQ,IAAO48G,MAAY,EAANzyL,KAChD4yL,EAAO5yL,GAAK,KAAO,IAAe,GAAP61E,IAAiB48G,MAAY,EAANzyL,MACzC61E,EAAO,OAAUA,GAAQ,OAClC+8G,EAAO5yL,GAAK,KAAO,IAAQ61E,GAAQ,KAAQ48G,MAAY,EAANzyL,KACjD4yL,EAAO5yL,GAAK,KAAO,IAAS61E,GAAQ,EAAK,KAAU48G,MAAY,EAANzyL,KACzD4yL,EAAO5yL,GAAK,KAAO,IAAe,GAAP61E,IAAiB48G,MAAY,EAANzyL,OAElD61E,EAAO,QAAoB,KAAPA,IAAiB,GAAqC,KAA9Br7E,EAAQ2pC,aAAahN,IACjEy7J,EAAO5yL,GAAK,KAAO,IAAQ61E,GAAQ,KAAQ48G,MAAY,EAANzyL,KACjD4yL,EAAO5yL,GAAK,KAAO,IAAS61E,GAAQ,GAAM,KAAU48G,MAAY,EAANzyL,KAC1D4yL,EAAO5yL,GAAK,KAAO,IAAS61E,GAAQ,EAAK,KAAU48G,MAAY,EAANzyL,KACzD4yL,EAAO5yL,GAAK,KAAO,IAAe,GAAP61E,IAAiB48G,MAAY,EAANzyL,MAK1D/F,KAAKo6L,cAAgBr0L,EACrB/F,KAAK+5L,OAASh0L,EAAI/F,KAAKyW,MACnB1Q,GAAK,IACP/F,KAAKyW,MAAQ1Q,EAAI,GACjB/F,KAAKynC,OACLznC,KAAKk6L,QAAS,GAEdl6L,KAAKyW,MAAQ1Q,CAEjB,CAKA,OAJI/F,KAAK+5L,MAAQ,aACf/5L,KAAKg6L,QAAUh6L,KAAK+5L,MAAQ,YAAc,EAC1C/5L,KAAK+5L,MAAQ/5L,KAAK+5L,MAAQ,YAErB/5L,IAnGP,CAoGF,EAEAi5L,IAAI73L,UAAUi5L,SAAW,WACvB,IAAIr6L,KAAKi6L,UAAT,CAGAj6L,KAAKi6L,WAAY,EACjB,IAAItB,EAAS34L,KAAK24L,OAAQ5yL,EAAI/F,KAAKo6L,cACnCzB,EAAO5yL,GAAK,IAAMwyL,MAAU,EAAJxyL,GACpBA,GAAK,KACF/F,KAAKk6L,QACRl6L,KAAKynC,OAEPkxJ,EAAO,GAAKA,EAAO,IACnBA,EAAO,IAAMA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC5CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC3CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAC5CA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAM,GAEtDA,EAAO,IAAM34L,KAAK+5L,OAAS,EAC3BpB,EAAO,IAAM34L,KAAKg6L,QAAU,EAAIh6L,KAAK+5L,QAAU,GAC/C/5L,KAAKynC,MAhBL,CAiBF,EAEAwxJ,IAAI73L,UAAUqmC,KAAO,WACnB,IAAI3vB,EAAGC,EAAG0wB,EAAGrI,EAAGk6J,EAAIC,EAAI5B,EAAS34L,KAAK24L,OAElC34L,KAAKkjJ,MAQPnrI,IADAA,IALAD,IADAA,EAAI6gL,EAAO,GAAK,YACN,EAAI7gL,IAAM,IAAM,WAAa,IAIvC2wB,IADAA,IAAM,WADNrI,IADAA,IAAM,WAAiB,WAAJtoB,GAAkB6gL,EAAO,GAAK,YACvC,GAAKv4J,IAAM,IAAMtoB,GAAK,KACH,UAALA,IAAoB6gL,EAAO,GAAK,aAC9C,GAAKlwJ,IAAM,IAAMrI,GAAK,IACjBA,EAAItoB,IAAO6gL,EAAO,GAAK,aAC5B,GAAK5gL,IAAM,IAAM0wB,GAAK,GAEhC3wB,EAAI9X,KAAK25L,GACT5hL,EAAI/X,KAAK45L,GACTnxJ,EAAIzoC,KAAK65L,GAST9hL,IADAA,KALAD,IADAA,KADAsoB,EAAIpgC,KAAK85L,IACE/hL,GAAK0wB,EAAIrI,IAAOu4J,EAAO,GAAK,YAC7B,EAAI7gL,IAAM,IAAMC,GAAK,IAI/B0wB,IADAA,IAAM1wB,GADNqoB,IADAA,IAAMqI,EAAK3wB,GAAKC,EAAI0wB,IAAOkwJ,EAAO,GAAK,YAC7B,GAAKv4J,IAAM,IAAMtoB,GAAK,IAChBA,EAAIC,IAAO4gL,EAAO,GAAK,YAC7B,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBA,EAAItoB,IAAO6gL,EAAO,GAAK,aAC7B,GAAK5gL,IAAM,IAAM0wB,GAAK,GAUlC1wB,IADAA,KALAD,IADAA,IAAMsoB,EAAKroB,GAAK0wB,EAAIrI,IAAOu4J,EAAO,GAAK,YAC7B,EAAI7gL,IAAM,IAAMC,GAAK,IAI/B0wB,IADAA,IAAM1wB,GADNqoB,IADAA,IAAMqI,EAAK3wB,GAAKC,EAAI0wB,IAAOkwJ,EAAO,GAAK,aAC7B,GAAKv4J,IAAM,IAAMtoB,GAAK,IAChBA,EAAIC,IAAO4gL,EAAO,GAAK,aAC7B,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBA,EAAItoB,IAAO6gL,EAAO,GAAK,WAC7B,GAAK5gL,IAAM,IAAM0wB,GAAK,EAQhC1wB,IADAA,KALAD,IADAA,IAAMsoB,EAAKroB,GAAK0wB,EAAIrI,IAAOu4J,EAAO,GAAK,aAC7B,EAAI7gL,IAAM,IAAMC,GAAK,IAI/B0wB,IADAA,IAAM1wB,GADNqoB,IADAA,IAAMqI,EAAK3wB,GAAKC,EAAI0wB,IAAOkwJ,EAAO,GAAK,aAC7B,GAAKv4J,IAAM,IAAMtoB,GAAK,IAChBA,EAAIC,IAAO4gL,EAAO,IAAM,QAC9B,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBA,EAAItoB,IAAO6gL,EAAO,IAAM,aAC9B,GAAK5gL,IAAM,IAAM0wB,GAAK,EAQhC1wB,IADAA,KALAD,IADAA,IAAMsoB,EAAKroB,GAAK0wB,EAAIrI,IAAOu4J,EAAO,IAAM,aAC9B,EAAI7gL,IAAM,IAAMC,GAAK,IAI/B0wB,IADAA,IAAM1wB,GADNqoB,IADAA,IAAMqI,EAAK3wB,GAAKC,EAAI0wB,IAAOkwJ,EAAO,IAAM,WAC9B,GAAKv4J,IAAM,IAAMtoB,GAAK,IAChBA,EAAIC,IAAO4gL,EAAO,IAAM,aAC9B,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBA,EAAItoB,IAAO6gL,EAAO,IAAM,aAC9B,GAAK5gL,IAAM,IAAM0wB,GAAK,EAQhC1wB,IADAA,KAHAqoB,IADAA,IAAMroB,EAAK0wB,IADX3wB,IADAA,IAAM2wB,EAAKrI,GAAKroB,EAAI0wB,IAAOkwJ,EAAO,GAAK,YAC7B,EAAI7gL,IAAM,IAAMC,GAAK,GACXA,IAAO4gL,EAAO,GAAK,aAC7B,EAAIv4J,IAAM,IAAMtoB,GAAK,GAGpBA,IADX2wB,IADAA,IAAM3wB,EAAKC,GAAKqoB,EAAItoB,IAAO6gL,EAAO,IAAM,YAC9B,GAAKlwJ,IAAM,IAAMrI,GAAK,GACZA,IAAOu4J,EAAO,GAAK,YAC7B,GAAK5gL,IAAM,IAAM0wB,GAAK,EAQhC1wB,IADAA,KAHAqoB,IADAA,IAAMroB,EAAK0wB,IADX3wB,IADAA,IAAM2wB,EAAKrI,GAAKroB,EAAI0wB,IAAOkwJ,EAAO,GAAK,YAC7B,EAAI7gL,IAAM,IAAMC,GAAK,GACXA,IAAO4gL,EAAO,IAAM,WAC9B,EAAIv4J,IAAM,IAAMtoB,GAAK,GAGpBA,IADX2wB,IADAA,IAAM3wB,EAAKC,GAAKqoB,EAAItoB,IAAO6gL,EAAO,IAAM,YAC9B,GAAKlwJ,IAAM,IAAMrI,GAAK,GACZA,IAAOu4J,EAAO,GAAK,YAC7B,GAAK5gL,IAAM,IAAM0wB,GAAK,EAQhC1wB,IADAA,KAHAqoB,IADAA,IAAMroB,EAAK0wB,IADX3wB,IADAA,IAAM2wB,EAAKrI,GAAKroB,EAAI0wB,IAAOkwJ,EAAO,GAAK,YAC7B,EAAI7gL,IAAM,IAAMC,GAAK,GACXA,IAAO4gL,EAAO,IAAM,aAC9B,EAAIv4J,IAAM,IAAMtoB,GAAK,GAGpBA,IADX2wB,IADAA,IAAM3wB,EAAKC,GAAKqoB,EAAItoB,IAAO6gL,EAAO,GAAK,YAC7B,GAAKlwJ,IAAM,IAAMrI,GAAK,GACZA,IAAOu4J,EAAO,GAAK,aAC7B,GAAK5gL,IAAM,IAAM0wB,GAAK,EAQhC1wB,IADAA,KAHAqoB,IADAA,IAAMroB,EAAK0wB,IADX3wB,IADAA,IAAM2wB,EAAKrI,GAAKroB,EAAI0wB,IAAOkwJ,EAAO,IAAM,aAC9B,EAAI7gL,IAAM,IAAMC,GAAK,GACXA,IAAO4gL,EAAO,GAAK,WAC7B,EAAIv4J,IAAM,IAAMtoB,GAAK,GAGpBA,IADX2wB,IADAA,IAAM3wB,EAAKC,GAAKqoB,EAAItoB,IAAO6gL,EAAO,GAAK,aAC7B,GAAKlwJ,IAAM,IAAMrI,GAAK,GACZA,IAAOu4J,EAAO,IAAM,aAC9B,GAAK5gL,IAAM,IAAM0wB,GAAK,EAUhC1wB,IADAA,KAHAwiL,GADAn6J,IADAA,KAHAk6J,EAAKviL,EAAI0wB,IAET3wB,IADAA,IAAMwiL,EAAKl6J,GAAKu4J,EAAO,GAAK,SAClB,EAAI7gL,IAAM,IAAMC,GAAK,IACf4gL,EAAO,GAAK,aAClB,GAAKv4J,IAAM,IAAMtoB,GAAK,GACvBA,IAET2wB,IADAA,IAAM8xJ,EAAKxiL,GAAK4gL,EAAO,IAAM,aACnB,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBu4J,EAAO,IAAM,WACnB,GAAK5gL,IAAM,GAAK0wB,GAAK,EAU/B1wB,IADAA,KAHAwiL,GADAn6J,IADAA,KAHAk6J,EAAKviL,EAAI0wB,IAET3wB,IADAA,IAAMwiL,EAAKl6J,GAAKu4J,EAAO,GAAK,aAClB,EAAI7gL,IAAM,IAAMC,GAAK,IACf4gL,EAAO,GAAK,aAClB,GAAKv4J,IAAM,IAAMtoB,GAAK,GACvBA,IAET2wB,IADAA,IAAM8xJ,EAAKxiL,GAAK4gL,EAAO,GAAK,YAClB,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBu4J,EAAO,IAAM,aACnB,GAAK5gL,IAAM,GAAK0wB,GAAK,EAU/B1wB,IADAA,KAHAwiL,GADAn6J,IADAA,KAHAk6J,EAAKviL,EAAI0wB,IAET3wB,IADAA,IAAMwiL,EAAKl6J,GAAKu4J,EAAO,IAAM,YACnB,EAAI7gL,IAAM,IAAMC,GAAK,IACf4gL,EAAO,GAAK,YAClB,GAAKv4J,IAAM,IAAMtoB,GAAK,GACvBA,IAET2wB,IADAA,IAAM8xJ,EAAKxiL,GAAK4gL,EAAO,GAAK,YAClB,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBu4J,EAAO,GAAK,WAClB,GAAK5gL,IAAM,GAAK0wB,GAAK,EAU/B1wB,IADAA,KAHAwiL,GADAn6J,IADAA,KAHAk6J,EAAKviL,EAAI0wB,IAET3wB,IADAA,IAAMwiL,EAAKl6J,GAAKu4J,EAAO,GAAK,YAClB,EAAI7gL,IAAM,IAAMC,GAAK,IACf4gL,EAAO,IAAM,YACnB,GAAKv4J,IAAM,IAAMtoB,GAAK,GACvBA,IAET2wB,IADAA,IAAM8xJ,EAAKxiL,GAAK4gL,EAAO,IAAM,YACnB,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBu4J,EAAO,GAAK,YAClB,GAAK5gL,IAAM,GAAK0wB,GAAK,EAQ/B1wB,IADAA,KAHAqoB,IADAA,IAAMroB,IADND,IADAA,IAAM2wB,GAAK1wB,GAAKqoB,IAAMu4J,EAAO,GAAK,YACxB,EAAI7gL,IAAM,IAAMC,GAAK,IACf0wB,IAAMkwJ,EAAO,GAAK,aACxB,GAAKv4J,IAAM,IAAMtoB,GAAK,KAEhC2wB,IADAA,IAAM3wB,GAAKsoB,GAAKroB,IAAM4gL,EAAO,IAAM,aACzB,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBtoB,IAAM6gL,EAAO,GAAK,WACxB,GAAK5gL,IAAM,IAAM0wB,GAAK,EAQhC1wB,IADAA,KAHAqoB,IADAA,IAAMroB,IADND,IADAA,IAAM2wB,GAAK1wB,GAAKqoB,IAAMu4J,EAAO,IAAM,aACzB,EAAI7gL,IAAM,IAAMC,GAAK,IACf0wB,IAAMkwJ,EAAO,GAAK,aACxB,GAAKv4J,IAAM,IAAMtoB,GAAK,KAEhC2wB,IADAA,IAAM3wB,GAAKsoB,GAAKroB,IAAM4gL,EAAO,IAAM,UACzB,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBtoB,IAAM6gL,EAAO,GAAK,aACxB,GAAK5gL,IAAM,IAAM0wB,GAAK,EAQhC1wB,IADAA,KAHAqoB,IADAA,IAAMroB,IADND,IADAA,IAAM2wB,GAAK1wB,GAAKqoB,IAAMu4J,EAAO,GAAK,aACxB,EAAI7gL,IAAM,IAAMC,GAAK,IACf0wB,IAAMkwJ,EAAO,IAAM,WACzB,GAAKv4J,IAAM,IAAMtoB,GAAK,KAEhC2wB,IADAA,IAAM3wB,GAAKsoB,GAAKroB,IAAM4gL,EAAO,GAAK,aACxB,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBtoB,IAAM6gL,EAAO,IAAM,aACzB,GAAK5gL,IAAM,IAAM0wB,GAAK,EAQhC1wB,IADAA,KAHAqoB,IADAA,IAAMroB,IADND,IADAA,IAAM2wB,GAAK1wB,GAAKqoB,IAAMu4J,EAAO,GAAK,YACxB,EAAI7gL,IAAM,IAAMC,GAAK,IACf0wB,IAAMkwJ,EAAO,IAAM,aACzB,GAAKv4J,IAAM,IAAMtoB,GAAK,KAEhC2wB,IADAA,IAAM3wB,GAAKsoB,GAAKroB,IAAM4gL,EAAO,GAAK,YACxB,GAAKlwJ,IAAM,IAAMrI,GAAK,IAChBtoB,IAAM6gL,EAAO,GAAK,YACxB,GAAK5gL,IAAM,IAAM0wB,GAAK,EAE5BzoC,KAAKkjJ,OACPljJ,KAAK25L,GAAK7hL,EAAI,YAAc,EAC5B9X,KAAK45L,GAAK7hL,EAAI,WAAa,EAC3B/X,KAAK65L,GAAKpxJ,EAAI,YAAc,EAC5BzoC,KAAK85L,GAAK15J,EAAI,WAAa,EAC3BpgC,KAAKkjJ,OAAQ,IAEbljJ,KAAK25L,GAAK35L,KAAK25L,GAAK7hL,GAAK,EACzB9X,KAAK45L,GAAK55L,KAAK45L,GAAK7hL,GAAK,EACzB/X,KAAK65L,GAAK75L,KAAK65L,GAAKpxJ,GAAK,EACzBzoC,KAAK85L,GAAK95L,KAAK85L,GAAK15J,GAAK,EAE7B,EAYA64J,IAAI73L,UAAUo5L,IAAM,WAClBx6L,KAAKq6L,WAEL,IAAIV,EAAK35L,KAAK25L,GAAIC,EAAK55L,KAAK45L,GAAIC,EAAK75L,KAAK65L,GAAIC,EAAK95L,KAAK85L,GAExD,OAAOxB,UAAWqB,GAAM,EAAK,IAAQrB,UAAe,GAALqB,GAC7CrB,UAAWqB,GAAM,GAAM,IAAQrB,UAAWqB,GAAM,EAAK,IACrDrB,UAAWqB,GAAM,GAAM,IAAQrB,UAAWqB,GAAM,GAAM,IACtDrB,UAAWqB,GAAM,GAAM,IAAQrB,UAAWqB,GAAM,GAAM,IACtDrB,UAAWsB,GAAM,EAAK,IAAQtB,UAAe,GAALsB,GACxCtB,UAAWsB,GAAM,GAAM,IAAQtB,UAAWsB,GAAM,EAAK,IACrDtB,UAAWsB,GAAM,GAAM,IAAQtB,UAAWsB,GAAM,GAAM,IACtDtB,UAAWsB,GAAM,GAAM,IAAQtB,UAAWsB,GAAM,GAAM,IACtDtB,UAAWuB,GAAM,EAAK,IAAQvB,UAAe,GAALuB,GACxCvB,UAAWuB,GAAM,GAAM,IAAQvB,UAAWuB,GAAM,EAAK,IACrDvB,UAAWuB,GAAM,GAAM,IAAQvB,UAAWuB,GAAM,GAAM,IACtDvB,UAAWuB,GAAM,GAAM,IAAQvB,UAAWuB,GAAM,GAAM,IACtDvB,UAAWwB,GAAM,EAAK,IAAQxB,UAAe,GAALwB,GACxCxB,UAAWwB,GAAM,GAAM,IAAQxB,UAAWwB,GAAM,EAAK,IACrDxB,UAAWwB,GAAM,GAAM,IAAQxB,UAAWwB,GAAM,GAAM,IACtDxB,UAAWwB,GAAM,GAAM,IAAQxB,UAAWwB,GAAM,GAAM,GAC1D,EAYAb,IAAI73L,UAAUiuC,SAAW4pJ,IAAI73L,UAAUo5L,IAYvCvB,IAAI73L,UAAUq4L,OAAS,WACrBz5L,KAAKq6L,WAEL,IAAIV,EAAK35L,KAAK25L,GAAIC,EAAK55L,KAAK45L,GAAIC,EAAK75L,KAAK65L,GAAIC,EAAK95L,KAAK85L,GACxD,MAAO,CACA,IAALH,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IAEjE,EAYAb,IAAI73L,UAAUsX,MAAQugL,IAAI73L,UAAUq4L,OAYpCR,IAAI73L,UAAUu9J,YAAc,WAC1B3+J,KAAKq6L,WAEL,IAAIp0H,EAAS,IAAIv+B,YAAY,IACzBixJ,EAAS,IAAI7kC,YAAY7tF,GAK7B,OAJA0yH,EAAO,GAAK34L,KAAK25L,GACjBhB,EAAO,GAAK34L,KAAK45L,GACjBjB,EAAO,GAAK34L,KAAK65L,GACjBlB,EAAO,GAAK34L,KAAK85L,GACV7zH,CACT,EAaAgzH,IAAI73L,UAAU6kE,OAASgzH,IAAI73L,UAAUu9J,YAYrCs6B,IAAI73L,UAAUq5L,OAAS,WAErB,IADA,IAAIC,EAAIC,EAAIC,EAAIC,EAAY,GAAId,EAAQ/5L,KAAK0Y,QACpC3S,EAAI,EAAGA,EAAI,IAClB20L,EAAKX,EAAMh0L,KACX40L,EAAKZ,EAAMh0L,KACX60L,EAAKb,EAAMh0L,KACX80L,GAAanC,mBAAmBgC,IAAO,GACrChC,mBAA0C,IAAtBgC,GAAM,EAAIC,IAAO,IACrCjC,mBAA0C,IAAtBiC,GAAM,EAAIC,IAAO,IACrClC,mBAAwB,GAALkC,GAMvB,OAJAF,EAAKX,EAAMh0L,GACX80L,GAAanC,mBAAmBgC,IAAO,GACrChC,mBAAoBgC,GAAM,EAAK,IAC/B,KAEJ,EAEA,IAAIhjM,QAAUyhM,eAEVlB,UACFtgM,OAAOD,QAAUA,SAmBjBF,KAAKsjM,IAAMpjM,QACPygM,MACFvgM,8BAAAA,WACE,OAAOF,OACR,2IAGN,EAjqBD,8BCCA,IAGIqjM,EAAiB,4BAGjBrjL,EAAmB,iBAGnBsjL,EAAU,qBAEVC,EAAU,mBACVC,EAAU,gBAEVC,EAAU,oBACVC,EAAS,6BACTC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZC,EAAa,mBACbC,EAAY,kBACZC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZC,EAAa,mBAEbC,EAAiB,uBACjBC,EAAc,oBACdC,EAAa,wBACbC,EAAa,wBACbC,EAAU,qBACVC,EAAW,sBACXC,EAAW,sBACXC,EAAW,sBACXC,EAAkB,6BAClBC,EAAY,uBACZC,EAAY,uBASZC,EAAU,OAGVC,EAAe,8BAGfC,EAAW,mBAGXC,EAAgB,CAAC,EACrBA,EAAc5B,GAAW4B,EA7CV,kBA8CfA,EAAcd,GAAkBc,EAAcb,GAC9Ca,EAAc3B,GAAW2B,EAAc1B,GACvC0B,EAAcZ,GAAcY,EAAcX,GAC1CW,EAAcV,GAAWU,EAAcT,GACvCS,EAAcR,GAAYQ,EAAcvB,GACxCuB,EAActB,GAAasB,EAAcrB,GACzCqB,EAAcnB,GAAamB,EAAclB,GACzCkB,EAAcjB,GAAaiB,EAAchB,GACzCgB,EAAcP,GAAYO,EAAcN,GACxCM,EAAcL,GAAaK,EAAcJ,IAAa,EACtDI,EArDe,kBAqDWA,EAAczB,GACxCyB,EAAcf,IAAc,EAG5B,IAAIgB,EAA8B,iBAAVxS,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAOhpL,SAAWA,QAAUgpL,EAAAA,EAGhFyS,EAA0B,iBAARhlM,MAAoBA,MAAQA,KAAKuJ,SAAWA,QAAUvJ,KAGxEN,EAAOqlM,GAAcC,GAAYh0B,SAAS,cAATA,GAGjCi0B,EAA4CrlM,IAAYA,EAAQ6mL,UAAY7mL,EAG5EslM,EAAaD,GAA4CplM,IAAWA,EAAO4mL,UAAY5mL,EAGvFslM,EAAgBD,GAAcA,EAAWtlM,UAAYqlM,EAUzD,SAASG,EAAYx/J,EAAKy/J,GAGxB,OADAz/J,EAAI5X,IAAIq3K,EAAK,GAAIA,EAAK,IACfz/J,CACT,CAUA,SAAS0/J,EAAYt3K,EAAKne,GAGxB,OADAme,EAAIhR,IAAInN,GACDme,CACT,CAsDA,SAASu3K,EAAY3kL,EAAOuoD,EAAUipB,EAAaozG,GACjD,IAAIpgK,GAAS,EACTx5B,EAASgV,EAAQA,EAAMhV,OAAS,EAKpC,IAHI45L,GAAa55L,IACfwmF,EAAcxxE,IAAQwkB,MAEfA,EAAQx5B,GACfwmF,EAAcjpB,EAASipB,EAAaxxE,EAAMwkB,GAAQA,EAAOxkB,GAE3D,OAAOwxE,CACT,CAwCA,SAASqzG,EAAa51L,GAGpB,IAAIqY,GAAS,EACb,GAAa,MAATrY,GAA0C,mBAAlBA,EAAM0nC,SAChC,IACErvB,KAAYrY,EAAQ,GACtB,CAAE,MAAO6H,GAAI,CAEf,OAAOwQ,CACT,CASA,SAASw9K,EAAW9/J,GAClB,IAAIR,GAAS,EACTld,EAAS7f,MAAMu9B,EAAIvvB,MAKvB,OAHAuvB,EAAItvB,SAAQ,SAASzG,EAAOD,GAC1BsY,IAASkd,GAAS,CAACx1B,EAAKC,EAC1B,IACOqY,CACT,CAUA,SAASy9K,EAAQp9H,EAAMjlC,GACrB,OAAO,SAAS+4H,GACd,OAAO9zF,EAAKjlC,EAAU+4H,GACxB,CACF,CASA,SAASupC,EAAW53K,GAClB,IAAIoX,GAAS,EACTld,EAAS7f,MAAM2lB,EAAI3X,MAKvB,OAHA2X,EAAI1X,SAAQ,SAASzG,GACnBqY,IAASkd,GAASv1B,CACpB,IACOqY,CACT,CAGA,IASM8nK,EATF6V,EAAax9L,MAAMiB,UACnBw8L,EAAY90B,SAAS1nK,UACrBy8L,EAAcx8L,OAAOD,UAGrB08L,EAAatmM,EAAK,sBAGlBumM,GACEjW,EAAM,SAAS5nG,KAAK49G,GAAcA,EAAW31L,MAAQ21L,EAAW31L,KAAK61L,UAAY,KACvE,iBAAmBlW,EAAO,GAItCmW,EAAeL,EAAUvuJ,SAGzBxvB,GAAiBg+K,EAAYh+K,eAO7Bq+K,GAAiBL,EAAYxuJ,SAG7B8uJ,GAAaxsG,OAAO,IACtBssG,EAAajrL,KAAK6M,IAAgBuvB,QAzQjB,sBAyQuC,QACvDA,QAAQ,yDAA0D,SAAW,KAI5EkqJ,GAAS2D,EAAgBzlM,EAAK8hM,YAASh5L,EACvCw5B,GAAStiC,EAAKsiC,OACdnhB,GAAanhB,EAAKmhB,WAClBylL,GAAeX,EAAQp8L,OAAOo8K,eAAgBp8K,QAC9Cg9L,GAAeh9L,OAAOC,OACtBg9L,GAAuBT,EAAYS,qBACnC/uL,GAASouL,EAAWpuL,OAGpBgvL,GAAmBl9L,OAAOu6K,sBAC1B4iB,GAAiBlF,GAASA,GAAOmF,cAAWn+L,EAC5Co+L,GAAajB,EAAQp8L,OAAO8G,KAAM9G,QAGlCo4H,GAAWklE,GAAUnnM,EAAM,YAC3BwnB,GAAM2/K,GAAUnnM,EAAM,OACtB6c,GAAUsqL,GAAUnnM,EAAM,WAC1BoW,GAAM+wL,GAAUnnM,EAAM,OACtBonM,GAAUD,GAAUnnM,EAAM,WAC1BqnM,GAAeF,GAAUt9L,OAAQ,UAGjCy9L,GAAqBC,GAAStlE,IAC9BulE,GAAgBD,GAAS//K,IACzBigL,GAAoBF,GAAS1qL,IAC7B6qL,GAAgBH,GAASnxL,IACzBuxL,GAAoBJ,GAASH,IAG7BQ,GAActlK,GAASA,GAAO14B,eAAYd,EAC1C++L,GAAgBD,GAAcA,GAAYE,aAAUh/L,EASxD,SAASi/L,GAAKnkL,GACZ,IAAI8hB,GAAS,EACTx5B,EAAS0X,EAAUA,EAAQ1X,OAAS,EAGxC,IADA1D,KAAKiI,UACIi1B,EAAQx5B,GAAQ,CACvB,IAAIszI,EAAQ57H,EAAQ8hB,GACpBl9B,KAAK8lB,IAAIkxH,EAAM,GAAIA,EAAM,GAC3B,CACF,CAyFA,SAASwoD,GAAUpkL,GACjB,IAAI8hB,GAAS,EACTx5B,EAAS0X,EAAUA,EAAQ1X,OAAS,EAGxC,IADA1D,KAAKiI,UACIi1B,EAAQx5B,GAAQ,CACvB,IAAIszI,EAAQ57H,EAAQ8hB,GACpBl9B,KAAK8lB,IAAIkxH,EAAM,GAAIA,EAAM,GAC3B,CACF,CAuGA,SAASyoD,GAASrkL,GAChB,IAAI8hB,GAAS,EACTx5B,EAAS0X,EAAUA,EAAQ1X,OAAS,EAGxC,IADA1D,KAAKiI,UACIi1B,EAAQx5B,GAAQ,CACvB,IAAIszI,EAAQ57H,EAAQ8hB,GACpBl9B,KAAK8lB,IAAIkxH,EAAM,GAAIA,EAAM,GAC3B,CACF,CAqFA,SAAS0oD,GAAMtkL,GACbpb,KAAK2/L,SAAW,IAAIH,GAAUpkL,EAChC,CAwHA,SAASwkL,GAAYC,EAAQn4L,EAAKC,GAChC,IAAIm4L,EAAWD,EAAOn4L,GAChBmY,GAAe7M,KAAK6sL,EAAQn4L,IAAQm3K,GAAGihB,EAAUn4L,UACxCrH,IAAVqH,GAAyBD,KAAOm4L,KACnCA,EAAOn4L,GAAOC,EAElB,CAUA,SAASo4L,GAAarnL,EAAOhR,GAE3B,IADA,IAAIhE,EAASgV,EAAMhV,OACZA,KACL,GAAIm7K,GAAGnmK,EAAMhV,GAAQ,GAAIgE,GACvB,OAAOhE,EAGX,OAAQ,CACV,CA6BA,SAASs8L,GAAUr4L,EAAOs4L,EAAQC,EAAQC,EAAYz4L,EAAKm4L,EAAQ1+L,GACjE,IAAI6e,EAIJ,GAHImgL,IACFngL,EAAS6/K,EAASM,EAAWx4L,EAAOD,EAAKm4L,EAAQ1+L,GAASg/L,EAAWx4L,SAExDrH,IAAX0f,EACF,OAAOA,EAET,IAAKgqE,GAASriF,GACZ,OAAOA,EAET,IAAIy4L,EAAQhgM,GAAQuH,GACpB,GAAIy4L,GAEF,GADApgL,EA2XJ,SAAwBtH,GACtB,IAAIhV,EAASgV,EAAMhV,OACfsc,EAAStH,EAAMnX,YAAYmC,GAO/B,OAJIA,GAA6B,iBAAZgV,EAAM,IAAkBmH,GAAe7M,KAAK0F,EAAO,WACtEsH,EAAOkd,MAAQxkB,EAAMwkB,MACrBld,EAAOm6G,MAAQzhH,EAAMyhH,OAEhBn6G,CACT,CArYaqgL,CAAe14L,IACnBs4L,EACH,OA6ON,SAAmB98L,EAAQuV,GACzB,IAAIwkB,GAAS,EACTx5B,EAASP,EAAOO,OAGpB,IADAgV,IAAUA,EAAQvY,MAAMuD,MACfw5B,EAAQx5B,GACfgV,EAAMwkB,GAAS/5B,EAAO+5B,GAExB,OAAOxkB,CACT,CAtPa4nL,CAAU34L,EAAOqY,OAErB,CACL,IAAIikC,EAAMs8I,GAAO54L,GACb64L,EAASv8I,GAAOk3I,GAAWl3I,GAAOm3I,EAEtC,GAAIqD,GAAS92L,GACX,OA0HN,SAAqBs+D,EAAQg6H,GAC3B,GAAIA,EACF,OAAOh6H,EAAO5lE,QAEhB,IAAI2f,EAAS,IAAIimD,EAAO1kE,YAAY0kE,EAAOviE,QAE3C,OADAuiE,EAAOs3G,KAAKv9J,GACLA,CACT,CAjIaygL,CAAY94L,EAAOs4L,GAE5B,GAAIh8I,GAAOs3I,GAAat3I,GAAO+2I,GAAYwF,IAAWX,EAAS,CAC7D,GAAItC,EAAa51L,GACf,OAAOk4L,EAASl4L,EAAQ,CAAC,EAG3B,GADAqY,EA+XN,SAAyB6/K,GACvB,MAAqC,mBAAtBA,EAAOt+L,aAA8Bm/L,GAAYb,GAE5D,CAAC,EAxVE71G,GADWr2B,EAwVHyqI,GAAayB,IAvVHxB,GAAa1qI,GAAS,CAAC,EADlD,IAAoBA,CA0VpB,CAnYegtI,CAAgBH,EAAS,CAAC,EAAI74L,IAClCs4L,EACH,OA6QR,SAAqB98L,EAAQ08L,GAC3B,OAAOe,GAAWz9L,EAAQ09L,GAAW19L,GAAS08L,EAChD,CA/QeiB,CAAYn5L,EAhD3B,SAAoBk4L,EAAQ18L,GAC1B,OAAO08L,GAAUe,GAAWz9L,EAAQgF,GAAKhF,GAAS08L,EACpD,CA8CkCkB,CAAW/gL,EAAQrY,GAEjD,KAAO,CACL,IAAKi1L,EAAc34I,GACjB,OAAO47I,EAASl4L,EAAQ,CAAC,EAE3BqY,EA0YN,SAAwB6/K,EAAQ57I,EAAK+8I,EAAWf,GAC9C,IA5MmBgB,EA4MfC,EAAOrB,EAAOt+L,YAClB,OAAQ0iD,GACN,KAAK63I,EACH,OAAOqF,GAAiBtB,GAE1B,KAAK5E,EACL,KAAKC,EACH,OAAO,IAAIgG,GAAMrB,GAEnB,KAAK9D,EACH,OA3QN,SAAuBqF,EAAUnB,GAC/B,IAAIh6H,EAASg6H,EAASkB,GAAiBC,EAASn7H,QAAUm7H,EAASn7H,OACnE,OAAO,IAAIm7H,EAAS7/L,YAAY0kE,EAAQm7H,EAASC,WAAYD,EAAS9oG,WACxE,CAwQagpG,CAAczB,EAAQI,GAE/B,KAAKjE,EAAY,KAAKC,EACtB,KAAKC,EAAS,KAAKC,EAAU,KAAKC,EAClC,KAAKC,EAAU,KAAKC,EAAiB,KAAKC,EAAW,KAAKC,EACxD,OA/MN,SAAyB+E,EAAYtB,GACnC,IAAIh6H,EAASg6H,EAASkB,GAAiBI,EAAWt7H,QAAUs7H,EAAWt7H,OACvE,OAAO,IAAIs7H,EAAWhgM,YAAY0kE,EAAQs7H,EAAWF,WAAYE,EAAW79L,OAC9E,CA4Ma89L,CAAgB3B,EAAQI,GAEjC,KAAK5E,EACH,OArQN,SAAkB39J,EAAKuiK,EAAQe,GAE7B,OAAO3D,EADK4C,EAASe,EAAUxD,EAAW9/J,IAAM,GAAQ8/J,EAAW9/J,GACzCw/J,EAAa,IAAIx/J,EAAIn8B,YACjD,CAkQakgM,CAAS5B,EAAQI,EAAQe,GAElC,KAAK1F,EACL,KAAKK,EACH,OAAO,IAAIuF,EAAKrB,GAElB,KAAKpE,EACH,OAhQN,SAAqBiG,GACnB,IAAI1hL,EAAS,IAAI0hL,EAAOngM,YAAYmgM,EAAOv+L,OAAQs5L,EAAQv8G,KAAKwhH,IAEhE,OADA1hL,EAAO2hL,UAAYD,EAAOC,UACnB3hL,CACT,CA4Pa4hL,CAAY/B,GAErB,KAAKnE,EACH,OApPN,SAAkB51K,EAAKm6K,EAAQe,GAE7B,OAAO3D,EADK4C,EAASe,EAAUtD,EAAW53K,IAAM,GAAQ43K,EAAW53K,GACzCs3K,EAAa,IAAIt3K,EAAIvkB,YACjD,CAiPasgM,CAAShC,EAAQI,EAAQe,GAElC,KAAKpF,EACH,OA3OeqF,EA2OIpB,EA1OhBR,GAAgBh+L,OAAOg+L,GAAcrsL,KAAKiuL,IAAW,CAAC,EA4O/D,CA5aea,CAAen6L,EAAOs8C,EAAK+7I,GAAWC,EACjD,CACF,CAEA9+L,IAAUA,EAAQ,IAAIu+L,IACtB,IAAIqC,EAAU5gM,EAAMwjB,IAAIhd,GACxB,GAAIo6L,EACF,OAAOA,EAIT,GAFA5gM,EAAM2kB,IAAIne,EAAOqY,IAEZogL,EACH,IAAI4B,EAAQ9B,EAsQhB,SAAoBL,GAClB,OAnOF,SAAwBA,EAAQoC,EAAUC,GACxC,IAAIliL,EAASiiL,EAASpC,GACtB,OAAOz/L,GAAQy/L,GAAU7/K,EApwB3B,SAAmBtH,EAAOnI,GAKxB,IAJA,IAAI2sB,GAAS,EACTx5B,EAAS6M,EAAO7M,OAChBu2H,EAASvhH,EAAMhV,SAEVw5B,EAAQx5B,GACfgV,EAAMuhH,EAAS/8F,GAAS3sB,EAAO2sB,GAEjC,OAAOxkB,CACT,CA2vBoCypL,CAAUniL,EAAQkiL,EAAYrC,GAClE,CAgOSuC,CAAevC,EAAQ13L,GAAM04L,GACtC,CAxQyBwB,CAAW16L,GAASQ,GAAKR,GAUhD,OA5vBF,SAAmB+Q,EAAOuoD,GAIxB,IAHA,IAAI/jC,GAAS,EACTx5B,EAASgV,EAAQA,EAAMhV,OAAS,IAE3Bw5B,EAAQx5B,IAC8B,IAAzCu9D,EAASvoD,EAAMwkB,GAAQA,KAK/B,CA0uBEolK,CAAUN,GAASr6L,GAAO,SAAS46L,EAAU76L,GACvCs6L,IAEFO,EAAW56L,EADXD,EAAM66L,IAIR3C,GAAY5/K,EAAQtY,EAAKs4L,GAAUuC,EAAUtC,EAAQC,EAAQC,EAAYz4L,EAAKC,EAAOxG,GACvF,IACO6e,CACT,CAqGA,SAASmhL,GAAiBxiC,GACxB,IAAI3+I,EAAS,IAAI2+I,EAAYp9J,YAAYo9J,EAAYrmE,YAErD,OADA,IAAI3/E,GAAWqH,GAAQ8F,IAAI,IAAInN,GAAWgmJ,IACnC3+I,CACT,CA6GA,SAAS4gL,GAAWz9L,EAAQ6+L,EAAOnC,EAAQM,GACzCN,IAAWA,EAAS,CAAC,GAKrB,IAHA,IAAI3iK,GAAS,EACTx5B,EAASs+L,EAAMt+L,SAEVw5B,EAAQx5B,GAAQ,CACvB,IAAIgE,EAAMs6L,EAAM9kK,GAEZ6H,EAAWo7J,EACXA,EAAWN,EAAOn4L,GAAMvE,EAAOuE,GAAMA,EAAKm4L,EAAQ18L,QAClD7C,EAEJs/L,GAAYC,EAAQn4L,OAAkBpH,IAAbykC,EAAyB5hC,EAAOuE,GAAOq9B,EAClE,CACA,OAAO86J,CACT,CAiCA,SAAS2C,GAAW9kK,EAAKh2B,GACvB,IAqKiBC,EACbvE,EAtKAgO,EAAOssB,EAAIiiK,SACf,OAsKgB,WADZv8L,SADauE,EApKAD,KAsKmB,UAARtE,GAA4B,UAARA,GAA4B,WAARA,EACrD,cAAVuE,EACU,OAAVA,GAvKDyJ,EAAmB,iBAAP1J,EAAkB,SAAW,QACzC0J,EAAKssB,GACX,CAUA,SAASihK,GAAUkB,EAAQn4L,GACzB,IAAIC,EAj8BN,SAAkBk4L,EAAQn4L,GACxB,OAAiB,MAAVm4L,OAAiBv/L,EAAYu/L,EAAOn4L,EAC7C,CA+7Bc+6L,CAAS5C,EAAQn4L,GAC7B,OAvOF,SAAsBC,GACpB,SAAKqiF,GAASriF,KAyYE04D,EAzYiB14D,EA0YxBo2L,GAAeA,KAAc19H,MAvYvB+2H,GAAWzvL,IAAU41L,EAAa51L,GAAUw2L,GAAazB,GACzDvyL,KAAK40L,GAASp3L,IAqY/B,IAAkB04D,CApYlB,CAiOSqiI,CAAa/6L,GAASA,OAAQrH,CACvC,CA9tBAi/L,GAAKn+L,UAAU6G,MAnEf,WACEjI,KAAK2/L,SAAWd,GAAeA,GAAa,MAAQ,CAAC,CACvD,EAkEAU,GAAKn+L,UAAkB,OAtDvB,SAAoBsG,GAClB,OAAO1H,KAAK+qB,IAAIrjB,WAAe1H,KAAK2/L,SAASj4L,EAC/C,EAqDA63L,GAAKn+L,UAAUujB,IA1Cf,SAAiBjd,GACf,IAAI0J,EAAOpR,KAAK2/L,SAChB,GAAId,GAAc,CAChB,IAAI7+K,EAAS5O,EAAK1J,GAClB,OAAOsY,IAAW+6K,OAAiBz6L,EAAY0f,CACjD,CACA,OAAOH,GAAe7M,KAAK5B,EAAM1J,GAAO0J,EAAK1J,QAAOpH,CACtD,EAoCAi/L,GAAKn+L,UAAU2pB,IAzBf,SAAiBrjB,GACf,IAAI0J,EAAOpR,KAAK2/L,SAChB,OAAOd,QAA6Bv+L,IAAd8Q,EAAK1J,GAAqBmY,GAAe7M,KAAK5B,EAAM1J,EAC5E,EAuBA63L,GAAKn+L,UAAU0kB,IAXf,SAAiBpe,EAAKC,GAGpB,OAFW3H,KAAK2/L,SACXj4L,GAAQm3L,SAA0Bv+L,IAAVqH,EAAuBozL,EAAiBpzL,EAC9D3H,IACT,EAmHAw/L,GAAUp+L,UAAU6G,MAjFpB,WACEjI,KAAK2/L,SAAW,EAClB,EAgFAH,GAAUp+L,UAAkB,OArE5B,SAAyBsG,GACvB,IAAI0J,EAAOpR,KAAK2/L,SACZziK,EAAQ6iK,GAAa3uL,EAAM1J,GAE/B,QAAIw1B,EAAQ,IAIRA,GADY9rB,EAAK1N,OAAS,EAE5B0N,EAAKwiD,MAELrkD,GAAOyD,KAAK5B,EAAM8rB,EAAO,GAEpB,GACT,EAwDAsiK,GAAUp+L,UAAUujB,IA7CpB,SAAsBjd,GACpB,IAAI0J,EAAOpR,KAAK2/L,SACZziK,EAAQ6iK,GAAa3uL,EAAM1J,GAE/B,OAAOw1B,EAAQ,OAAI58B,EAAY8Q,EAAK8rB,GAAO,EAC7C,EAyCAsiK,GAAUp+L,UAAU2pB,IA9BpB,SAAsBrjB,GACpB,OAAOq4L,GAAa//L,KAAK2/L,SAAUj4L,IAAQ,CAC7C,EA6BA83L,GAAUp+L,UAAU0kB,IAjBpB,SAAsBpe,EAAKC,GACzB,IAAIyJ,EAAOpR,KAAK2/L,SACZziK,EAAQ6iK,GAAa3uL,EAAM1J,GAO/B,OALIw1B,EAAQ,EACV9rB,EAAK9B,KAAK,CAAC5H,EAAKC,IAEhByJ,EAAK8rB,GAAO,GAAKv1B,EAEZ3H,IACT,EAiGAy/L,GAASr+L,UAAU6G,MA/DnB,WACEjI,KAAK2/L,SAAW,CACd,KAAQ,IAAIJ,GACZ,IAAO,IAAKvgL,IAAOwgL,IACnB,OAAU,IAAID,GAElB,EA0DAE,GAASr+L,UAAkB,OA/C3B,SAAwBsG,GACtB,OAAO86L,GAAWxiM,KAAM0H,GAAa,OAAEA,EACzC,EA8CA+3L,GAASr+L,UAAUujB,IAnCnB,SAAqBjd,GACnB,OAAO86L,GAAWxiM,KAAM0H,GAAKid,IAAIjd,EACnC,EAkCA+3L,GAASr+L,UAAU2pB,IAvBnB,SAAqBrjB,GACnB,OAAO86L,GAAWxiM,KAAM0H,GAAKqjB,IAAIrjB,EACnC,EAsBA+3L,GAASr+L,UAAU0kB,IAVnB,SAAqBpe,EAAKC,GAExB,OADA66L,GAAWxiM,KAAM0H,GAAKoe,IAAIpe,EAAKC,GACxB3H,IACT,EA+FA0/L,GAAMt+L,UAAU6G,MApEhB,WACEjI,KAAK2/L,SAAW,IAAIH,EACtB,EAmEAE,GAAMt+L,UAAkB,OAxDxB,SAAqBsG,GACnB,OAAO1H,KAAK2/L,SAAiB,OAAEj4L,EACjC,EAuDAg4L,GAAMt+L,UAAUujB,IA5ChB,SAAkBjd,GAChB,OAAO1H,KAAK2/L,SAASh7K,IAAIjd,EAC3B,EA2CAg4L,GAAMt+L,UAAU2pB,IAhChB,SAAkBrjB,GAChB,OAAO1H,KAAK2/L,SAAS50K,IAAIrjB,EAC3B,EA+BAg4L,GAAMt+L,UAAU0kB,IAnBhB,SAAkBpe,EAAKC,GACrB,IAAIkG,EAAQ7N,KAAK2/L,SACjB,GAAI9xL,aAAiB2xL,GAAW,CAC9B,IAAImD,EAAQ90L,EAAM8xL,SAClB,IAAK3gL,IAAQ2jL,EAAMj/L,OAASk/L,IAE1B,OADAD,EAAMrzL,KAAK,CAAC5H,EAAKC,IACV3H,KAET6N,EAAQ7N,KAAK2/L,SAAW,IAAIF,GAASkD,EACvC,CAEA,OADA90L,EAAMiY,IAAIpe,EAAKC,GACR3H,IACT,EAgcA,IAAI6gM,GAAatC,GAAmBd,EAAQc,GAAkBl9L,QAyhB9D,WACE,MAAO,EACT,EAlhBIk/L,GAtQJ,SAAoB54L,GAClB,OAAOu2L,GAAelrL,KAAKrL,EAC7B,EAwXA,SAASk7L,GAAQl7L,EAAOjE,GAEtB,SADAA,EAAmB,MAAVA,EAAiBgU,EAAmBhU,KAE1B,iBAATiE,GAAqBg1L,EAASxyL,KAAKxC,KAC1CA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQjE,CAC7C,CAkCA,SAASg9L,GAAY/4L,GACnB,IAAIu5L,EAAOv5L,GAASA,EAAMpG,YAG1B,OAAOoG,KAFqB,mBAARu5L,GAAsBA,EAAK9/L,WAAcy8L,EAG/D,CASA,SAASkB,GAAS1+H,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAO49H,EAAajrL,KAAKqtD,EAC3B,CAAE,MAAO7wD,GAAI,CACb,IACE,OAAQ6wD,EAAO,EACjB,CAAE,MAAO7wD,GAAI,CACf,CACA,MAAO,EACT,CAwDA,SAASqvK,GAAGl3K,EAAOm7L,GACjB,OAAOn7L,IAAUm7L,GAAUn7L,GAAUA,GAASm7L,GAAUA,CAC1D,EAzOKrpE,IAAY8mE,GAAO,IAAI9mE,GAAS,IAAI/xF,YAAY,MAAQq0J,GACxD/8K,IAAOuhL,GAAO,IAAIvhL,KAAQq8K,GAC1BhnL,IAAWksL,GAAOlsL,GAAQC,YAAcknL,GACxC5tL,IAAO2yL,GAAO,IAAI3yL,KAAQ8tL,GAC1BkD,IAAW2B,GAAO,IAAI3B,KAAY/C,KACrC0E,GAAS,SAAS54L,GAChB,IAAIqY,EAASk+K,GAAelrL,KAAKrL,GAC7Bu5L,EAAOlhL,GAAUu7K,EAAY5zL,EAAMpG,iBAAcjB,EACjDyiM,EAAa7B,EAAOnC,GAASmC,QAAQ5gM,EAEzC,GAAIyiM,EACF,OAAQA,GACN,KAAKjE,GAAoB,OAAO/C,EAChC,KAAKiD,GAAe,OAAO3D,EAC3B,KAAK4D,GAAmB,OAAOzD,EAC/B,KAAK0D,GAAe,OAAOxD,EAC3B,KAAKyD,GAAmB,OAAOtD,EAGnC,OAAO77K,CACT,GAsQF,IAAI5f,GAAUD,MAAMC,QA2BpB,SAASkhE,GAAY35D,GACnB,OAAgB,MAATA,GAqGT,SAAkBA,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GAAS+P,CAC7C,CAxG0BsrL,CAASr7L,EAAMjE,UAAY0zL,GAAWzvL,EAChE,CAgDA,IAAI82L,GAAWD,IAsLf,WACE,OAAO,CACT,EArKA,SAASpH,GAAWzvL,GAGlB,IAAIs8C,EAAM+lC,GAASriF,GAASu2L,GAAelrL,KAAKrL,GAAS,GACzD,OAAOs8C,GAAOk3I,GAAWl3I,GAAOm3I,CAClC,CA0DA,SAASpxG,GAASriF,GAChB,IAAIvE,SAAcuE,EAClB,QAASA,IAAkB,UAARvE,GAA4B,YAARA,EACzC,CA0DA,SAAS+E,GAAK03L,GACZ,OAAOv+H,GAAYu+H,GAn7BrB,SAAuBl4L,EAAOs7L,GAG5B,IAAIjjL,EAAU5f,GAAQuH,IAsrBxB,SAAqBA,GAEnB,OAmFF,SAA2BA,GACzB,OAmIF,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,CAC3B,CArISu7L,CAAav7L,IAAU25D,GAAY35D,EAC5C,CArFSw7L,CAAkBx7L,IAAUkY,GAAe7M,KAAKrL,EAAO,aAC1D22L,GAAqBtrL,KAAKrL,EAAO,WAAau2L,GAAelrL,KAAKrL,IAAUqzL,EAClF,CA1rBkCoI,CAAYz7L,GAljB9C,SAAmBc,EAAGw4D,GAIpB,IAHA,IAAI/jC,GAAS,EACTld,EAAS7f,MAAMsI,KAEVy0B,EAAQz0B,GACfuX,EAAOkd,GAAS+jC,EAAS/jC,GAE3B,OAAOld,CACT,CA2iBMqjL,CAAU17L,EAAMjE,OAAQgoD,QACxB,GAEAhoD,EAASsc,EAAOtc,OAChB4/L,IAAgB5/L,EAEpB,IAAK,IAAIgE,KAAOC,GACTs7L,IAAapjL,GAAe7M,KAAKrL,EAAOD,IACvC47L,IAAuB,UAAP57L,GAAmBm7L,GAAQn7L,EAAKhE,KACpDsc,EAAO1Q,KAAK5H,GAGhB,OAAOsY,CACT,CAk6B+BujL,CAAc1D,GAtuB7C,SAAkBA,GAChB,IAAKa,GAAYb,GACf,OAAOnB,GAAWmB,GAEpB,IAAI7/K,EAAS,GACb,IAAK,IAAItY,KAAOrG,OAAOw+L,GACjBhgL,GAAe7M,KAAK6sL,EAAQn4L,IAAe,eAAPA,GACtCsY,EAAO1Q,KAAK5H,GAGhB,OAAOsY,CACT,CA2tBuDwjL,CAAS3D,EAChE,CAyCAloM,EAAOD,QA9VP,SAAmBiQ,GACjB,OAAOq4L,GAAUr4L,GAAO,GAAM,EAChC,kBC72CA,IASI87L,EAAS,aAGTC,EAAa,qBAGbC,EAAa,aAGbC,EAAY,cAGZC,EAAe19L,SAGf02L,EAA8B,iBAAVxS,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAOhpL,SAAWA,QAAUgpL,EAAAA,EAGhFyS,EAA0B,iBAARhlM,MAAoBA,MAAQA,KAAKuJ,SAAWA,QAAUvJ,KAGxEN,EAAOqlM,GAAcC,GAAYh0B,SAAS,cAATA,GAUjCo1B,EAPc78L,OAAOD,UAOQiuC,SAG7By0J,EAAYvoL,KAAKC,IACjBuoL,EAAYxoL,KAAK4yB,IAkBjBpyB,EAAM,WACR,OAAOvkB,EAAKskB,KAAKC,KACnB,EA2MA,SAASiuE,EAASriF,GAChB,IAAIvE,SAAcuE,EAClB,QAASA,IAAkB,UAARvE,GAA4B,YAARA,EACzC,CA2EA,SAAS4gM,EAASr8L,GAChB,GAAoB,iBAATA,EACT,OAAOA,EAET,GAhCF,SAAkBA,GAChB,MAAuB,iBAATA,GAtBhB,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,CAC3B,CAqBKu7L,CAAav7L,IAzTF,mBAyTYu2L,EAAelrL,KAAKrL,EAChD,CA6BMs8L,CAASt8L,GACX,OA3VM,IA6VR,GAAIqiF,EAASriF,GAAQ,CACnB,IAAIm7L,EAAgC,mBAAjBn7L,EAAM23L,QAAwB33L,EAAM23L,UAAY33L,EACnEA,EAAQqiF,EAAS84G,GAAUA,EAAQ,GAAMA,CAC3C,CACA,GAAoB,iBAATn7L,EACT,OAAiB,IAAVA,EAAcA,GAASA,EAEhCA,EAAQA,EAAMynC,QAAQq0J,EAAQ,IAC9B,IAAIS,EAAWP,EAAWx5L,KAAKxC,GAC/B,OAAQu8L,GAAYN,EAAUz5L,KAAKxC,GAC/Bk8L,EAAal8L,EAAMtH,MAAM,GAAI6jM,EAAW,EAAI,GAC3CR,EAAWv5L,KAAKxC,GAxWb,KAwW6BA,CACvC,CAEAhQ,EAAOD,QAtPP,SAAkB2oE,EAAM8jI,EAAMtkM,GAC5B,IAAIukM,EACAC,EACAC,EACAtkL,EACAukL,EACAC,EACAC,EAAiB,EACjBC,GAAU,EACVC,GAAS,EACTC,GAAW,EAEf,GAAmB,mBAARvkI,EACT,MAAM,IAAIqI,UArIQ,uBA+IpB,SAASm8H,EAAW/mF,GAClB,IAAIhrG,EAAOsxL,EACPU,EAAUT,EAKd,OAHAD,EAAWC,OAAW/jM,EACtBmkM,EAAiB3mF,EACjB99F,EAASqgD,EAAK9tD,MAAMuyL,EAAShyL,EAE/B,CAmBA,SAASiyL,EAAajnF,GACpB,IAAIknF,EAAoBlnF,EAAO0mF,EAM/B,YAAyBlkM,IAAjBkkM,GAA+BQ,GAAqBb,GACzDa,EAAoB,GAAOL,GANJ7mF,EAAO2mF,GAM8BH,CACjE,CAEA,SAASW,IACP,IAAInnF,EAAO/hG,IACX,GAAIgpL,EAAajnF,GACf,OAAOonF,EAAapnF,GAGtBymF,EAAU9qK,WAAWwrK,EAzBvB,SAAuBnnF,GACrB,IAEI99F,EAASmkL,GAFWrmF,EAAO0mF,GAI/B,OAAOG,EAASZ,EAAU/jL,EAAQskL,GAHRxmF,EAAO2mF,IAGkCzkL,CACrE,CAmBqCmlL,CAAcrnF,GACnD,CAEA,SAASonF,EAAapnF,GAKpB,OAJAymF,OAAUjkM,EAINskM,GAAYR,EACPS,EAAW/mF,IAEpBsmF,EAAWC,OAAW/jM,EACf0f,EACT,CAcA,SAASolL,IACP,IAAItnF,EAAO/hG,IACPspL,EAAaN,EAAajnF,GAM9B,GAJAsmF,EAAW3gM,UACX4gM,EAAWrkM,KACXwkM,EAAe1mF,EAEXunF,EAAY,CACd,QAAgB/kM,IAAZikM,EACF,OAvEN,SAAqBzmF,GAMnB,OAJA2mF,EAAiB3mF,EAEjBymF,EAAU9qK,WAAWwrK,EAAcd,GAE5BO,EAAUG,EAAW/mF,GAAQ99F,CACtC,CAgEaslL,CAAYd,GAErB,GAAIG,EAGF,OADAJ,EAAU9qK,WAAWwrK,EAAcd,GAC5BU,EAAWL,EAEtB,CAIA,YAHgBlkM,IAAZikM,IACFA,EAAU9qK,WAAWwrK,EAAcd,IAE9BnkL,CACT,CAGA,OAxGAmkL,EAAOH,EAASG,IAAS,EACrBn6G,EAASnqF,KACX6kM,IAAY7kM,EAAQ6kM,QAEpBJ,GADAK,EAAS,YAAa9kM,GACHikM,EAAUE,EAASnkM,EAAQykM,UAAY,EAAGH,GAAQG,EACrEM,EAAW,aAAc/kM,IAAYA,EAAQ+kM,SAAWA,GAiG1DQ,EAAU91J,OAnCV,gBACkBhvC,IAAZikM,GACFlrK,aAAakrK,GAEfE,EAAiB,EACjBL,EAAWI,EAAeH,EAAWE,OAAUjkM,CACjD,EA8BA8kM,EAAUxvJ,MA5BV,WACE,YAAmBt1C,IAAZikM,EAAwBvkL,EAASklL,EAAanpL,IACvD,EA2BOqpL,CACT,6BChPA,IAGIrK,EAAiB,4BAGjBwK,EAAuB,EACvBC,EAAyB,EAGzB9tL,EAAmB,iBAGnBsjL,EAAU,qBACVyK,EAAW,iBACXC,EAAW,yBACXzK,EAAU,mBACVC,EAAU,gBACVyK,EAAW,iBACXxK,EAAU,oBACVC,EAAS,6BACTC,EAAS,eACTC,EAAY,kBACZsK,EAAU,gBACVrK,EAAY,kBACZC,EAAa,mBACbqK,EAAW,iBACXpK,EAAY,kBACZC,EAAS,eACTC,EAAY,kBAEZmK,EAAe,qBACfjK,EAAa,mBAEbC,EAAiB,uBACjBC,EAAc,oBAkBdW,EAAe,8BAGfC,EAAW,mBAGXoJ,EAAiB,CAAC,EACtBA,EAxBiB,yBAwBYA,EAvBZ,yBAwBjBA,EAvBc,sBAuBYA,EAtBX,uBAuBfA,EAtBe,uBAsBYA,EArBZ,uBAsBfA,EArBsB,8BAqBYA,EApBlB,wBAqBhBA,EApBgB,yBAoBY,EAC5BA,EAAe/K,GAAW+K,EAAeN,GACzCM,EAAejK,GAAkBiK,EAAe9K,GAChD8K,EAAehK,GAAegK,EAAe7K,GAC7C6K,EAAeJ,GAAYI,EAAe5K,GAC1C4K,EAAe1K,GAAU0K,EAAezK,GACxCyK,EAAexK,GAAawK,EAAetK,GAC3CsK,EAAerK,GAAUqK,EAAepK,GACxCoK,EAAelK,IAAc,EAG7B,IAAIgB,EAA8B,iBAAVxS,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAOhpL,SAAWA,QAAUgpL,EAAAA,EAGhFyS,EAA0B,iBAARhlM,MAAoBA,MAAQA,KAAKuJ,SAAWA,QAAUvJ,KAGxEN,EAAOqlM,GAAcC,GAAYh0B,SAAS,cAATA,GAGjCi0B,EAA4CrlM,IAAYA,EAAQ6mL,UAAY7mL,EAG5EslM,EAAaD,GAA4CplM,IAAWA,EAAO4mL,UAAY5mL,EAGvFslM,EAAgBD,GAAcA,EAAWtlM,UAAYqlM,EAGrDiJ,EAAc/I,GAAiBJ,EAAWxvL,QAG1C44L,EAAY,WACd,IACE,OAAOD,GAAeA,EAAYE,SAAWF,EAAYE,QAAQ,OACnE,CAAE,MAAO12L,GAAI,CACf,CAJgB,GAOZ22L,EAAmBF,GAAYA,EAASG,aAuD5C,SAASC,EAAU3tL,EAAO4tL,GAIxB,IAHA,IAAIppK,GAAS,EACTx5B,EAAkB,MAATgV,EAAgB,EAAIA,EAAMhV,SAE9Bw5B,EAAQx5B,GACf,GAAI4iM,EAAU5tL,EAAMwkB,GAAQA,EAAOxkB,GACjC,OAAO,EAGX,OAAO,CACT,CAiEA,SAAS8kL,EAAW9/J,GAClB,IAAIR,GAAS,EACTld,EAAS7f,MAAMu9B,EAAIvvB,MAKvB,OAHAuvB,EAAItvB,SAAQ,SAASzG,EAAOD,GAC1BsY,IAASkd,GAAS,CAACx1B,EAAKC,EAC1B,IACOqY,CACT,CAuBA,SAAS09K,EAAW53K,GAClB,IAAIoX,GAAS,EACTld,EAAS7f,MAAM2lB,EAAI3X,MAKvB,OAHA2X,EAAI1X,SAAQ,SAASzG,GACnBqY,IAASkd,GAASv1B,CACpB,IACOqY,CACT,CAGA,IAeM8nK,EAvCWznH,EAAMjlC,EAwBnBuiK,EAAax9L,MAAMiB,UACnBw8L,EAAY90B,SAAS1nK,UACrBy8L,EAAcx8L,OAAOD,UAGrB08L,EAAatmM,EAAK,sBAGlBymM,EAAeL,EAAUvuJ,SAGzBxvB,EAAiBg+K,EAAYh+K,eAG7Bk+K,GACEjW,EAAM,SAAS5nG,KAAK49G,GAAcA,EAAW31L,MAAQ21L,EAAW31L,KAAK61L,UAAY,KACvE,iBAAmBlW,EAAO,GAQtCye,EAAuB1I,EAAYxuJ,SAGnC8uJ,GAAaxsG,OAAO,IACtBssG,EAAajrL,KAAK6M,GAAgBuvB,QA7PjB,sBA6PuC,QACvDA,QAAQ,yDAA0D,SAAW,KAI5EkqJ,GAAS2D,EAAgBzlM,EAAK8hM,YAASh5L,EACvCw5B,GAAStiC,EAAKsiC,OACdnhB,GAAanhB,EAAKmhB,WAClB2lL,GAAuBT,EAAYS,qBACnC/uL,GAASouL,EAAWpuL,OACpBi3L,GAAiB1sK,GAASA,GAAOomC,iBAAc5/D,EAG/Ci+L,GAAmBl9L,OAAOu6K,sBAC1B4iB,GAAiBlF,GAASA,GAAOmF,cAAWn+L,EAC5Co+L,IAnEar+H,EAmEQh/D,OAAO8G,KAnETizB,EAmEe/5B,OAlE7B,SAAS8yJ,GACd,OAAO9zF,EAAKjlC,EAAU+4H,GACxB,GAmEE16B,GAAWklE,GAAUnnM,EAAM,YAC3BwnB,GAAM2/K,GAAUnnM,EAAM,OACtB6c,GAAUsqL,GAAUnnM,EAAM,WAC1BoW,GAAM+wL,GAAUnnM,EAAM,OACtBonM,GAAUD,GAAUnnM,EAAM,WAC1BqnM,GAAeF,GAAUt9L,OAAQ,UAGjCy9L,GAAqBC,GAAStlE,IAC9BulE,GAAgBD,GAAS//K,IACzBigL,GAAoBF,GAAS1qL,IAC7B6qL,GAAgBH,GAASnxL,IACzBuxL,GAAoBJ,GAASH,IAG7BQ,GAActlK,GAASA,GAAO14B,eAAYd,EAC1C++L,GAAgBD,GAAcA,GAAYE,aAAUh/L,EASxD,SAASi/L,GAAKnkL,GACZ,IAAI8hB,GAAS,EACTx5B,EAAoB,MAAX0X,EAAkB,EAAIA,EAAQ1X,OAG3C,IADA1D,KAAKiI,UACIi1B,EAAQx5B,GAAQ,CACvB,IAAIszI,EAAQ57H,EAAQ8hB,GACpBl9B,KAAK8lB,IAAIkxH,EAAM,GAAIA,EAAM,GAC3B,CACF,CA6FA,SAASwoD,GAAUpkL,GACjB,IAAI8hB,GAAS,EACTx5B,EAAoB,MAAX0X,EAAkB,EAAIA,EAAQ1X,OAG3C,IADA1D,KAAKiI,UACIi1B,EAAQx5B,GAAQ,CACvB,IAAIszI,EAAQ57H,EAAQ8hB,GACpBl9B,KAAK8lB,IAAIkxH,EAAM,GAAIA,EAAM,GAC3B,CACF,CA0GA,SAASyoD,GAASrkL,GAChB,IAAI8hB,GAAS,EACTx5B,EAAoB,MAAX0X,EAAkB,EAAIA,EAAQ1X,OAG3C,IADA1D,KAAKiI,UACIi1B,EAAQx5B,GAAQ,CACvB,IAAIszI,EAAQ57H,EAAQ8hB,GACpBl9B,KAAK8lB,IAAIkxH,EAAM,GAAIA,EAAM,GAC3B,CACF,CA6FA,SAASyvD,GAASl2L,GAChB,IAAI2sB,GAAS,EACTx5B,EAAmB,MAAV6M,EAAiB,EAAIA,EAAO7M,OAGzC,IADA1D,KAAK2/L,SAAW,IAAIF,KACXviK,EAAQx5B,GACf1D,KAAK8U,IAAIvE,EAAO2sB,GAEpB,CAyCA,SAASwiK,GAAMtkL,GACb,IAAIhK,EAAOpR,KAAK2/L,SAAW,IAAIH,GAAUpkL,GACzCpb,KAAKmO,KAAOiD,EAAKjD,IACnB,CAqIA,SAAS4xL,GAAarnL,EAAOhR,GAE3B,IADA,IAAIhE,EAASgV,EAAMhV,OACZA,KACL,GAAIm7K,GAAGnmK,EAAMhV,GAAQ,GAAIgE,GACvB,OAAOhE,EAGX,OAAQ,CACV,CAyBA,SAASgjM,GAAW/+L,GAClB,OAAa,MAATA,OACerH,IAAVqH,EAAsBm+L,EAAeF,EAEtCY,IAAkBA,MAAkBnlM,OAAOsG,GA0arD,SAAmBA,GACjB,IAAIg/L,EAAQ9mL,EAAe7M,KAAKrL,EAAO6+L,IACnCviJ,EAAMt8C,EAAM6+L,IAEhB,IACE7+L,EAAM6+L,SAAkBlmM,EACxB,IAAIsmM,GAAW,CACjB,CAAE,MAAOp3L,GAAI,CAEb,IAAIwQ,EAASumL,EAAqBvzL,KAAKrL,GAQvC,OAPIi/L,IACED,EACFh/L,EAAM6+L,IAAkBviJ,SAEjBt8C,EAAM6+L,KAGVxmL,CACT,CA3bM6mL,CAAUl/L,GA4iBhB,SAAwBA,GACtB,OAAO4+L,EAAqBvzL,KAAKrL,EACnC,CA7iBMu2L,CAAev2L,EACrB,CASA,SAASm/L,GAAgBn/L,GACvB,OAAOu7L,GAAav7L,IAAU++L,GAAW/+L,IAAUqzL,CACrD,CAgBA,SAAS+L,GAAYp/L,EAAOm7L,EAAOkE,EAAS7G,EAAYh/L,GACtD,OAAIwG,IAAUm7L,IAGD,MAATn7L,GAA0B,MAATm7L,IAAmBI,GAAav7L,KAAWu7L,GAAaJ,GACpEn7L,GAAUA,GAASm7L,GAAUA,EAmBxC,SAAyBjD,EAAQiD,EAAOkE,EAAS7G,EAAY8G,EAAW9lM,GACtE,IAAI+lM,EAAW9mM,GAAQy/L,GACnBsH,EAAW/mM,GAAQ0iM,GACnBsE,EAASF,EAAWzB,EAAWlF,GAAOV,GACtCwH,EAASF,EAAW1B,EAAWlF,GAAOuC,GAKtCwE,GAHJF,EAASA,GAAUpM,EAAUO,EAAY6L,IAGhB7L,EACrBgM,GAHJF,EAASA,GAAUrM,EAAUO,EAAY8L,IAGhB9L,EACrBiM,EAAYJ,GAAUC,EAE1B,GAAIG,GAAa/I,GAASoB,GAAS,CACjC,IAAKpB,GAASqE,GACZ,OAAO,EAEToE,GAAW,EACXI,GAAW,CACb,CACA,GAAIE,IAAcF,EAEhB,OADAnmM,IAAUA,EAAQ,IAAIu+L,IACdwH,GAAYd,GAAavG,GAC7B4H,GAAY5H,EAAQiD,EAAOkE,EAAS7G,EAAY8G,EAAW9lM,GAiKnE,SAAoB0+L,EAAQiD,EAAO7+I,EAAK+iJ,EAAS7G,EAAY8G,EAAW9lM,GACtE,OAAQ8iD,GACN,KAAK83I,EACH,GAAK8D,EAAOvnG,YAAcwqG,EAAMxqG,YAC3BunG,EAAOwB,YAAcyB,EAAMzB,WAC9B,OAAO,EAETxB,EAASA,EAAO55H,OAChB68H,EAAQA,EAAM78H,OAEhB,KAAK61H,EACH,QAAK+D,EAAOvnG,YAAcwqG,EAAMxqG,aAC3B2uG,EAAU,IAAItuL,GAAWknL,GAAS,IAAIlnL,GAAWmqL,KAKxD,KAAK7H,EACL,KAAKC,EACL,KAAKI,EAGH,OAAOzc,IAAIghB,GAASiD,GAEtB,KAAK6C,EACH,OAAO9F,EAAO9/L,MAAQ+iM,EAAM/iM,MAAQ8/L,EAAOt/L,SAAWuiM,EAAMviM,QAE9D,KAAKk7L,EACL,KAAKE,EAIH,OAAOkE,GAAWiD,EAAQ,GAE5B,KAAKzH,EACH,IAAIqM,EAAUlK,EAEhB,KAAK9B,EACH,IAAIiM,EAAYX,EAAUzB,EAG1B,GAFAmC,IAAYA,EAAUhK,GAElBmC,EAAO1xL,MAAQ20L,EAAM30L,OAASw5L,EAChC,OAAO,EAGT,IAAI5F,EAAU5gM,EAAMwjB,IAAIk7K,GACxB,GAAIkC,EACF,OAAOA,GAAWe,EAEpBkE,GAAWxB,EAGXrkM,EAAM2kB,IAAI+5K,EAAQiD,GAClB,IAAI9iL,EAASynL,GAAYC,EAAQ7H,GAAS6H,EAAQ5E,GAAQkE,EAAS7G,EAAY8G,EAAW9lM,GAE1F,OADAA,EAAc,OAAE0+L,GACT7/K,EAET,IAhoCY,kBAioCV,GAAIq/K,GACF,OAAOA,GAAcrsL,KAAK6sL,IAAWR,GAAcrsL,KAAK8vL,GAG9D,OAAO,CACT,CA/NQ8E,CAAW/H,EAAQiD,EAAOsE,EAAQJ,EAAS7G,EAAY8G,EAAW9lM,GAExE,KAAM6lM,EAAUzB,GAAuB,CACrC,IAAIsC,EAAeP,GAAYznL,EAAe7M,KAAK6sL,EAAQ,eACvDiI,EAAeP,GAAY1nL,EAAe7M,KAAK8vL,EAAO,eAE1D,GAAI+E,GAAgBC,EAAc,CAChC,IAAIC,EAAeF,EAAehI,EAAOl4L,QAAUk4L,EAC/CmI,EAAeF,EAAehF,EAAMn7L,QAAUm7L,EAGlD,OADA3hM,IAAUA,EAAQ,IAAIu+L,IACfuH,EAAUc,EAAcC,EAAchB,EAAS7G,EAAYh/L,EACpE,CACF,CACA,QAAKqmM,IAGLrmM,IAAUA,EAAQ,IAAIu+L,IA6NxB,SAAsBG,EAAQiD,EAAOkE,EAAS7G,EAAY8G,EAAW9lM,GACnE,IAAIwmM,EAAYX,EAAUzB,EACtB0C,EAAW5F,GAAWxC,GACtBqI,EAAYD,EAASvkM,OAIzB,GAAIwkM,GAHW7F,GAAWS,GACDp/L,SAEMikM,EAC7B,OAAO,EAGT,IADA,IAAIzqK,EAAQgrK,EACLhrK,KAAS,CACd,IAAIx1B,EAAMugM,EAAS/qK,GACnB,KAAMyqK,EAAYjgM,KAAOo7L,EAAQjjL,EAAe7M,KAAK8vL,EAAOp7L,IAC1D,OAAO,CAEX,CAEA,IAAIq6L,EAAU5gM,EAAMwjB,IAAIk7K,GACxB,GAAIkC,GAAW5gM,EAAMwjB,IAAIm+K,GACvB,OAAOf,GAAWe,EAEpB,IAAI9iL,GAAS,EACb7e,EAAM2kB,IAAI+5K,EAAQiD,GAClB3hM,EAAM2kB,IAAIg9K,EAAOjD,GAGjB,IADA,IAAIsI,EAAWR,IACNzqK,EAAQgrK,GAAW,CAE1B,IAAIpI,EAAWD,EADfn4L,EAAMugM,EAAS/qK,IAEXkrK,EAAWtF,EAAMp7L,GAErB,GAAIy4L,EACF,IAAIkI,EAAWV,EACXxH,EAAWiI,EAAUtI,EAAUp4L,EAAKo7L,EAAOjD,EAAQ1+L,GACnDg/L,EAAWL,EAAUsI,EAAU1gM,EAAKm4L,EAAQiD,EAAO3hM,GAGzD,UAAmBb,IAAb+nM,EACGvI,IAAasI,GAAYnB,EAAUnH,EAAUsI,EAAUpB,EAAS7G,EAAYh/L,GAC7EknM,GACD,CACLroL,GAAS,EACT,KACF,CACAmoL,IAAaA,EAAkB,eAAPzgM,EAC1B,CACA,GAAIsY,IAAWmoL,EAAU,CACvB,IAAIG,EAAUzI,EAAOt+L,YACjBgnM,EAAUzF,EAAMvhM,YAGhB+mM,GAAWC,KACV,gBAAiB1I,MAAU,gBAAiBiD,IACzB,mBAAXwF,GAAyBA,aAAmBA,GACjC,mBAAXC,GAAyBA,aAAmBA,IACvDvoL,GAAS,EAEb,CAGA,OAFA7e,EAAc,OAAE0+L,GAChB1+L,EAAc,OAAE2hM,GACT9iL,CACT,CA1RSwoL,CAAa3I,EAAQiD,EAAOkE,EAAS7G,EAAY8G,EAAW9lM,GACrE,CA5DSsnM,CAAgB9gM,EAAOm7L,EAAOkE,EAAS7G,EAAY4G,GAAa5lM,GACzE,CA0HA,SAASsmM,GAAY/uL,EAAOoqL,EAAOkE,EAAS7G,EAAY8G,EAAW9lM,GACjE,IAAIwmM,EAAYX,EAAUzB,EACtBmD,EAAYhwL,EAAMhV,OAClBilM,EAAY7F,EAAMp/L,OAEtB,GAAIglM,GAAaC,KAAehB,GAAagB,EAAYD,GACvD,OAAO,EAGT,IAAI3G,EAAU5gM,EAAMwjB,IAAIjM,GACxB,GAAIqpL,GAAW5gM,EAAMwjB,IAAIm+K,GACvB,OAAOf,GAAWe,EAEpB,IAAI5lK,GAAS,EACTld,GAAS,EACT4oL,EAAQ5B,EAAUxB,EAA0B,IAAIiB,QAAWnmM,EAM/D,IAJAa,EAAM2kB,IAAIpN,EAAOoqL,GACjB3hM,EAAM2kB,IAAIg9K,EAAOpqL,KAGRwkB,EAAQwrK,GAAW,CAC1B,IAAIG,EAAWnwL,EAAMwkB,GACjBkrK,EAAWtF,EAAM5lK,GAErB,GAAIijK,EACF,IAAIkI,EAAWV,EACXxH,EAAWiI,EAAUS,EAAU3rK,EAAO4lK,EAAOpqL,EAAOvX,GACpDg/L,EAAW0I,EAAUT,EAAUlrK,EAAOxkB,EAAOoqL,EAAO3hM,GAE1D,QAAiBb,IAAb+nM,EAAwB,CAC1B,GAAIA,EACF,SAEFroL,GAAS,EACT,KACF,CAEA,GAAI4oL,GACF,IAAKvC,EAAUvD,GAAO,SAASsF,EAAUU,GACnC,GA72BaphM,EA62BOohM,GAANF,EA52BX79K,IAAIrjB,KA62BFmhM,IAAaT,GAAYnB,EAAU4B,EAAUT,EAAUpB,EAAS7G,EAAYh/L,IAC/E,OAAOynM,EAAKt5L,KAAKw5L,GA/2B/B,IAAyBphM,CAi3Bf,IAAI,CACNsY,GAAS,EACT,KACF,OACK,GACD6oL,IAAaT,IACXnB,EAAU4B,EAAUT,EAAUpB,EAAS7G,EAAYh/L,GACpD,CACL6e,GAAS,EACT,KACF,CACF,CAGA,OAFA7e,EAAc,OAAEuX,GAChBvX,EAAc,OAAE2hM,GACT9iL,CACT,CAwKA,SAASqiL,GAAWxC,GAClB,OApZF,SAAwBA,EAAQoC,EAAUC,GACxC,IAAIliL,EAASiiL,EAASpC,GACtB,OAAOz/L,GAAQy/L,GAAU7/K,EAhuB3B,SAAmBtH,EAAOnI,GAKxB,IAJA,IAAI2sB,GAAS,EACTx5B,EAAS6M,EAAO7M,OAChBu2H,EAASvhH,EAAMhV,SAEVw5B,EAAQx5B,GACfgV,EAAMuhH,EAAS/8F,GAAS3sB,EAAO2sB,GAEjC,OAAOxkB,CACT,CAutBoCypL,CAAUniL,EAAQkiL,EAAYrC,GAClE,CAiZSuC,CAAevC,EAAQ13L,GAAM04L,GACtC,CAUA,SAAS2B,GAAW9kK,EAAKh2B,GACvB,IAsHiBC,EACbvE,EAvHAgO,EAAOssB,EAAIiiK,SACf,OAuHgB,WADZv8L,SADauE,EArHAD,KAuHmB,UAARtE,GAA4B,UAARA,GAA4B,WAARA,EACrD,cAAVuE,EACU,OAAVA,GAxHDyJ,EAAmB,iBAAP1J,EAAkB,SAAW,QACzC0J,EAAKssB,GACX,CAUA,SAASihK,GAAUkB,EAAQn4L,GACzB,IAAIC,EAxjCN,SAAkBk4L,EAAQn4L,GACxB,OAAiB,MAAVm4L,OAAiBv/L,EAAYu/L,EAAOn4L,EAC7C,CAsjCc+6L,CAAS5C,EAAQn4L,GAC7B,OArTF,SAAsBC,GACpB,SAAKqiF,GAASriF,IAwahB,SAAkB04D,GAChB,QAAS09H,GAAeA,KAAc19H,CACxC,CA1a0B0oI,CAASphM,MAGnByvL,GAAWzvL,GAASw2L,GAAazB,GAChCvyL,KAAK40L,GAASp3L,GAC/B,CA+SS+6L,CAAa/6L,GAASA,OAAQrH,CACvC,CAr2BAi/L,GAAKn+L,UAAU6G,MAvEf,WACEjI,KAAK2/L,SAAWd,GAAeA,GAAa,MAAQ,CAAC,EACrD7+L,KAAKmO,KAAO,CACd,EAqEAoxL,GAAKn+L,UAAkB,OAzDvB,SAAoBsG,GAClB,IAAIsY,EAAShgB,KAAK+qB,IAAIrjB,WAAe1H,KAAK2/L,SAASj4L,GAEnD,OADA1H,KAAKmO,MAAQ6R,EAAS,EAAI,EACnBA,CACT,EAsDAu/K,GAAKn+L,UAAUujB,IA3Cf,SAAiBjd,GACf,IAAI0J,EAAOpR,KAAK2/L,SAChB,GAAId,GAAc,CAChB,IAAI7+K,EAAS5O,EAAK1J,GAClB,OAAOsY,IAAW+6K,OAAiBz6L,EAAY0f,CACjD,CACA,OAAOH,EAAe7M,KAAK5B,EAAM1J,GAAO0J,EAAK1J,QAAOpH,CACtD,EAqCAi/L,GAAKn+L,UAAU2pB,IA1Bf,SAAiBrjB,GACf,IAAI0J,EAAOpR,KAAK2/L,SAChB,OAAOd,QAA8Bv+L,IAAd8Q,EAAK1J,GAAsBmY,EAAe7M,KAAK5B,EAAM1J,EAC9E,EAwBA63L,GAAKn+L,UAAU0kB,IAZf,SAAiBpe,EAAKC,GACpB,IAAIyJ,EAAOpR,KAAK2/L,SAGhB,OAFA3/L,KAAKmO,MAAQnO,KAAK+qB,IAAIrjB,GAAO,EAAI,EACjC0J,EAAK1J,GAAQm3L,SAA0Bv+L,IAAVqH,EAAuBozL,EAAiBpzL,EAC9D3H,IACT,EAsHAw/L,GAAUp+L,UAAU6G,MApFpB,WACEjI,KAAK2/L,SAAW,GAChB3/L,KAAKmO,KAAO,CACd,EAkFAqxL,GAAUp+L,UAAkB,OAvE5B,SAAyBsG,GACvB,IAAI0J,EAAOpR,KAAK2/L,SACZziK,EAAQ6iK,GAAa3uL,EAAM1J,GAE/B,QAAIw1B,EAAQ,IAIRA,GADY9rB,EAAK1N,OAAS,EAE5B0N,EAAKwiD,MAELrkD,GAAOyD,KAAK5B,EAAM8rB,EAAO,KAEzBl9B,KAAKmO,KACA,GACT,EAyDAqxL,GAAUp+L,UAAUujB,IA9CpB,SAAsBjd,GACpB,IAAI0J,EAAOpR,KAAK2/L,SACZziK,EAAQ6iK,GAAa3uL,EAAM1J,GAE/B,OAAOw1B,EAAQ,OAAI58B,EAAY8Q,EAAK8rB,GAAO,EAC7C,EA0CAsiK,GAAUp+L,UAAU2pB,IA/BpB,SAAsBrjB,GACpB,OAAOq4L,GAAa//L,KAAK2/L,SAAUj4L,IAAQ,CAC7C,EA8BA83L,GAAUp+L,UAAU0kB,IAlBpB,SAAsBpe,EAAKC,GACzB,IAAIyJ,EAAOpR,KAAK2/L,SACZziK,EAAQ6iK,GAAa3uL,EAAM1J,GAQ/B,OANIw1B,EAAQ,KACRl9B,KAAKmO,KACPiD,EAAK9B,KAAK,CAAC5H,EAAKC,KAEhByJ,EAAK8rB,GAAO,GAAKv1B,EAEZ3H,IACT,EAwGAy/L,GAASr+L,UAAU6G,MAtEnB,WACEjI,KAAKmO,KAAO,EACZnO,KAAK2/L,SAAW,CACd,KAAQ,IAAIJ,GACZ,IAAO,IAAKvgL,IAAOwgL,IACnB,OAAU,IAAID,GAElB,EAgEAE,GAASr+L,UAAkB,OArD3B,SAAwBsG,GACtB,IAAIsY,EAASwiL,GAAWxiM,KAAM0H,GAAa,OAAEA,GAE7C,OADA1H,KAAKmO,MAAQ6R,EAAS,EAAI,EACnBA,CACT,EAkDAy/K,GAASr+L,UAAUujB,IAvCnB,SAAqBjd,GACnB,OAAO86L,GAAWxiM,KAAM0H,GAAKid,IAAIjd,EACnC,EAsCA+3L,GAASr+L,UAAU2pB,IA3BnB,SAAqBrjB,GACnB,OAAO86L,GAAWxiM,KAAM0H,GAAKqjB,IAAIrjB,EACnC,EA0BA+3L,GAASr+L,UAAU0kB,IAdnB,SAAqBpe,EAAKC,GACxB,IAAIyJ,EAAOoxL,GAAWxiM,KAAM0H,GACxByG,EAAOiD,EAAKjD,KAIhB,OAFAiD,EAAK0U,IAAIpe,EAAKC,GACd3H,KAAKmO,MAAQiD,EAAKjD,MAAQA,EAAO,EAAI,EAC9BnO,IACT,EAwDAymM,GAASrlM,UAAU0T,IAAM2xL,GAASrlM,UAAUkO,KAnB5C,SAAqB3H,GAEnB,OADA3H,KAAK2/L,SAAS75K,IAAIne,EAAOozL,GAClB/6L,IACT,EAiBAymM,GAASrlM,UAAU2pB,IANnB,SAAqBpjB,GACnB,OAAO3H,KAAK2/L,SAAS50K,IAAIpjB,EAC3B,EAoGA+3L,GAAMt+L,UAAU6G,MA3EhB,WACEjI,KAAK2/L,SAAW,IAAIH,GACpBx/L,KAAKmO,KAAO,CACd,EAyEAuxL,GAAMt+L,UAAkB,OA9DxB,SAAqBsG,GACnB,IAAI0J,EAAOpR,KAAK2/L,SACZ3/K,EAAS5O,EAAa,OAAE1J,GAG5B,OADA1H,KAAKmO,KAAOiD,EAAKjD,KACV6R,CACT,EAyDA0/K,GAAMt+L,UAAUujB,IA9ChB,SAAkBjd,GAChB,OAAO1H,KAAK2/L,SAASh7K,IAAIjd,EAC3B,EA6CAg4L,GAAMt+L,UAAU2pB,IAlChB,SAAkBrjB,GAChB,OAAO1H,KAAK2/L,SAAS50K,IAAIrjB,EAC3B,EAiCAg4L,GAAMt+L,UAAU0kB,IArBhB,SAAkBpe,EAAKC,GACrB,IAAIyJ,EAAOpR,KAAK2/L,SAChB,GAAIvuL,aAAgBouL,GAAW,CAC7B,IAAImD,EAAQvxL,EAAKuuL,SACjB,IAAK3gL,IAAQ2jL,EAAMj/L,OAASk/L,IAG1B,OAFAD,EAAMrzL,KAAK,CAAC5H,EAAKC,IACjB3H,KAAKmO,OAASiD,EAAKjD,KACZnO,KAEToR,EAAOpR,KAAK2/L,SAAW,IAAIF,GAASkD,EACtC,CAGA,OAFAvxL,EAAK0U,IAAIpe,EAAKC,GACd3H,KAAKmO,KAAOiD,EAAKjD,KACVnO,IACT,EA8hBA,IAAI6gM,GAActC,GAA+B,SAASsB,GACxD,OAAc,MAAVA,EACK,IAETA,EAASx+L,OAAOw+L,GA9sClB,SAAqBnnL,EAAO4tL,GAM1B,IALA,IAAIppK,GAAS,EACTx5B,EAAkB,MAATgV,EAAgB,EAAIA,EAAMhV,OACnCslM,EAAW,EACXhpL,EAAS,KAEJkd,EAAQx5B,GAAQ,CACvB,IAAIiE,EAAQ+Q,EAAMwkB,GAwsCkC+jK,EAvsCtCt5L,EAwsCP22L,GAAqBtrL,KAAK6sL,EAAQoB,KAvsCvCjhL,EAAOgpL,KAAcrhM,EAEzB,CAosC6C,IAASs5L,EAnsCtD,OAAOjhL,CACT,CAksCSipL,CAAY1K,GAAiBsB,IAGtC,EAodA,WACE,MAAO,EACT,EA7cIU,GAASmG,GAkCb,SAAS7D,GAAQl7L,EAAOjE,GAEtB,SADAA,EAAmB,MAAVA,EAAiBgU,EAAmBhU,KAE1B,iBAATiE,GAAqBg1L,EAASxyL,KAAKxC,KAC1CA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQjE,CAC7C,CA2DA,SAASq7L,GAAS1+H,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAO49H,EAAajrL,KAAKqtD,EAC3B,CAAE,MAAO7wD,GAAI,CACb,IACE,OAAQ6wD,EAAO,EACjB,CAAE,MAAO7wD,GAAI,CACf,CACA,MAAO,EACT,CAkCA,SAASqvK,GAAGl3K,EAAOm7L,GACjB,OAAOn7L,IAAUm7L,GAAUn7L,GAAUA,GAASm7L,GAAUA,CAC1D,EA7IKrpE,IAAY8mE,GAAO,IAAI9mE,GAAS,IAAI/xF,YAAY,MAAQq0J,GACxD/8K,IAAOuhL,GAAO,IAAIvhL,KAAQq8K,GAC1BhnL,IAAWksL,GAAOlsL,GAAQC,YAAcknL,GACxC5tL,IAAO2yL,GAAO,IAAI3yL,KAAQ8tL,GAC1BkD,IAAW2B,GAAO,IAAI3B,KAAY/C,KACrC0E,GAAS,SAAS54L,GAChB,IAAIqY,EAAS0mL,GAAW/+L,GACpBu5L,EAAOlhL,GAAUu7K,EAAY5zL,EAAMpG,iBAAcjB,EACjDyiM,EAAa7B,EAAOnC,GAASmC,GAAQ,GAEzC,GAAI6B,EACF,OAAQA,GACN,KAAKjE,GAAoB,OAAO/C,EAChC,KAAKiD,GAAe,OAAO3D,EAC3B,KAAK4D,GAAmB,OAAOzD,EAC/B,KAAK0D,GAAe,OAAOxD,EAC3B,KAAKyD,GAAmB,OAAOtD,EAGnC,OAAO77K,CACT,GA6IF,IAAIojL,GAAc0D,GAAgB,WAAa,OAAOrjM,SAAW,CAA/B,IAAsCqjM,GAAkB,SAASn/L,GACjG,OAAOu7L,GAAav7L,IAAUkY,EAAe7M,KAAKrL,EAAO,YACtD22L,GAAqBtrL,KAAKrL,EAAO,SACtC,EAyBIvH,GAAUD,MAAMC,QAgDhBq+L,GAAWD,IA4Of,WACE,OAAO,CACT,EA3LA,SAASpH,GAAWzvL,GAClB,IAAKqiF,GAASriF,GACZ,OAAO,EAIT,IAAIs8C,EAAMyiJ,GAAW/+L,GACrB,OAAOs8C,GAAOk3I,GAAWl3I,GAAOm3I,GAAUn3I,GAAOyhJ,GAAYzhJ,GAAO4hJ,CACtE,CA4BA,SAAS7C,GAASr7L,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GAAS+P,CAC7C,CA2BA,SAASsyE,GAASriF,GAChB,IAAIvE,SAAcuE,EAClB,OAAgB,MAATA,IAA0B,UAARvE,GAA4B,YAARA,EAC/C,CA0BA,SAAS8/L,GAAav7L,GACpB,OAAgB,MAATA,GAAiC,iBAATA,CACjC,CAmBA,IAAIy+L,GAAeD,EAhiDnB,SAAmB9lI,GACjB,OAAO,SAAS14D,GACd,OAAO04D,EAAK14D,EACd,CACF,CA4hDsCuhM,CAAU/C,GAnvBhD,SAA0Bx+L,GACxB,OAAOu7L,GAAav7L,IAClBq7L,GAASr7L,EAAMjE,WAAaqiM,EAAeW,GAAW/+L,GAC1D,EA8wBA,SAASQ,GAAK03L,GACZ,OA1NgB,OADGl4L,EA2NAk4L,IA1NKmD,GAASr7L,EAAMjE,UAAY0zL,GAAWzvL,GA1vBhE,SAAuBA,EAAOs7L,GAC5B,IAAI7C,EAAQhgM,GAAQuH,GAChBwhM,GAAS/I,GAASgD,GAAYz7L,GAC9ByhM,GAAUhJ,IAAU+I,GAAS1K,GAAS92L,GACtC0hM,GAAUjJ,IAAU+I,IAAUC,GAAUhD,GAAaz+L,GACrD27L,EAAclD,GAAS+I,GAASC,GAAUC,EAC1CrpL,EAASsjL,EAloBf,SAAmB76L,EAAGw4D,GAIpB,IAHA,IAAI/jC,GAAS,EACTld,EAAS7f,MAAMsI,KAEVy0B,EAAQz0B,GACfuX,EAAOkd,GAAS+jC,EAAS/jC,GAE3B,OAAOld,CACT,CA0nB6BqjL,CAAU17L,EAAMjE,OAAQgoD,QAAU,GACzDhoD,EAASsc,EAAOtc,OAEpB,IAAK,IAAIgE,KAAOC,GACTs7L,IAAapjL,EAAe7M,KAAKrL,EAAOD,IACvC47L,IAEQ,UAAP57L,GAEC0hM,IAAkB,UAAP1hM,GAA0B,UAAPA,IAE9B2hM,IAAkB,UAAP3hM,GAA0B,cAAPA,GAA8B,cAAPA,IAEtDm7L,GAAQn7L,EAAKhE,KAElBsc,EAAO1Q,KAAK5H,GAGhB,OAAOsY,CACT,CA27B+BujL,CAAc1D,GAtwB7C,SAAkBA,GAChB,GAyZIqB,GADev5L,EAxZFk4L,IAyZGl4L,EAAMpG,YAGnBoG,KAFqB,mBAARu5L,GAAsBA,EAAK9/L,WAAcy8L,GAzZ3D,OAAOa,GAAWmB,GAuZtB,IAAqBl4L,EACfu5L,EAtZAlhL,EAAS,GACb,IAAK,IAAItY,KAAOrG,OAAOw+L,GACjBhgL,EAAe7M,KAAK6sL,EAAQn4L,IAAe,eAAPA,GACtCsY,EAAO1Q,KAAK5H,GAGhB,OAAOsY,CACT,CA2vBuDwjL,CAAS3D,GA3NhE,IAAqBl4L,CA4NrB,CAyCAhQ,EAAOD,QAlNP,SAAiBiQ,EAAOm7L,GACtB,OAAOiE,GAAYp/L,EAAOm7L,EAC5B,yBCrmDAnrM,EAAOD,QAYP,SAAoB4xM,EAAMC,EAAMvvE,EAAQr3G,EAAOC,EAAQ/iB,GAEnD,IAAK2pM,EAAYF,KAAUE,EAAYD,IAAUvvE,IAAWwvE,EAAYxvE,GACpE,MAAM,IAAI94H,MAAM,iEAEpB,GAAIooM,EAAK5lM,SAAW6lM,EAAK7lM,QAAWs2H,GAAUA,EAAOt2H,SAAW4lM,EAAK5lM,OACjE,MAAM,IAAIxC,MAAM,6BAEpB,GAAIooM,EAAK5lM,SAAWif,EAAQC,EAAS,EAAG,MAAM,IAAI1hB,MAAM,gDAExDrB,EAAUwB,OAAOsgE,OAAO,CAAC,EAAG8nI,EAAgB5pM,GAG5C,MAAM4pC,EAAM9mB,EAAQC,EACd8mL,EAAM,IAAI51C,YAAYw1C,EAAKrjI,OAAQqjI,EAAKjI,WAAY53J,GACpDkgK,EAAM,IAAI71C,YAAYy1C,EAAKtjI,OAAQsjI,EAAKlI,WAAY53J,GAC1D,IAAImgK,GAAY,EAEhB,IAAK,IAAI7jM,EAAI,EAAGA,EAAI0jC,EAAK1jC,IACrB,GAAI2jM,EAAI3jM,KAAO4jM,EAAI5jM,GAAI,CAAE6jM,GAAY,EAAO,KAAO,CAEvD,GAAIA,EAAW,CACX,GAAI5vE,IAAWn6H,EAAQgqM,SACnB,IAAK,IAAI9jM,EAAI,EAAGA,EAAI0jC,EAAK1jC,IAAK+jM,EAAcR,EAAM,EAAIvjM,EAAGlG,EAAQkqM,MAAO/vE,GAE5E,OAAO,CACX,CAIA,MAAMgwE,EAAW,MAAQnqM,EAAQmxC,UAAYnxC,EAAQmxC,UACrD,IAAI33B,EAAO,EAGX,IAAK,IAAIwvB,EAAI,EAAGA,EAAIjmB,EAAQimB,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAIjmB,EAAOimB,IAAK,CAE5B,MAAMmgD,EAAwB,GAAjBlgD,EAAIlmB,EAAQimB,GAGnBqhK,EAAQC,EAAWZ,EAAMC,EAAMxgH,EAAKA,GAGtCxtE,KAAK4uL,IAAIF,GAASD,EAEbnqM,EAAQuqM,YAAcC,EAAYf,EAAM1gK,EAAGC,EAAGlmB,EAAOC,EAAQ2mL,KACvCc,EAAYd,EAAM3gK,EAAGC,EAAGlmB,EAAOC,EAAQ0mL,IAO1DtvE,GACAswE,EAAUtwE,EAAQjxC,KAASkhH,EAAQ,GAAKpqM,EAAQ0qM,cAAgB1qM,EAAQ2qM,WAE5EnxL,KAPI2gH,IAAWn6H,EAAQgqM,UAAUS,EAAUtwE,EAAQjxC,KAAQlpF,EAAQ4qM,SAUhEzwE,IAEFn6H,EAAQgqM,UAAUC,EAAcR,EAAMvgH,EAAKlpF,EAAQkqM,MAAO/vE,GAEvE,CAIJ,OAAO3gH,CACX,EA9EA,MAAMowL,EAAiB,CACnBz4J,UAAW,GACXo5J,WAAW,EACXL,MAAO,GACPU,QAAS,CAAC,IAAK,IAAK,GACpBD,UAAW,CAAC,IAAK,EAAG,GACpBD,aAAc,KACdV,UAAU,GAyEd,SAASL,EAAYxoI,GAEjB,OAAOt5B,YAAYoxJ,OAAO93H,IAA8C,IAAtCA,EAAIz/D,YAAYmpM,iBACtD,CAKA,SAASL,EAAYM,EAAKC,EAAIC,EAAIloL,EAAOC,EAAQ2mL,GAC7C,MAAMuB,EAAKvvL,KAAKC,IAAIovL,EAAK,EAAG,GACtBG,EAAKxvL,KAAKC,IAAIqvL,EAAK,EAAG,GACtBG,EAAKzvL,KAAK4yB,IAAIy8J,EAAK,EAAGjoL,EAAQ,GAC9BsoL,EAAK1vL,KAAK4yB,IAAI08J,EAAK,EAAGjoL,EAAS,GAC/BmmE,EAA0B,GAAnB8hH,EAAKloL,EAAQioL,GAC1B,IAGIM,EAAMC,EAAMC,EAAMC,EAHlBC,EAASV,IAAOE,GAAMF,IAAOI,GAAMH,IAAOE,GAAMF,IAAOI,EAAK,EAAI,EAChE98J,EAAM,EACN3yB,EAAM,EAIV,IAAK,IAAIotB,EAAIkiK,EAAIliK,GAAKoiK,EAAIpiK,IACtB,IAAK,IAAIC,EAAIkiK,EAAIliK,GAAKoiK,EAAIpiK,IAAK,CAC3B,GAAID,IAAMgiK,GAAM/hK,IAAMgiK,EAAI,SAG1B,MAAMZ,EAAQC,EAAWS,EAAKA,EAAK5hH,EAAuB,GAAjBlgD,EAAIlmB,EAAQimB,IAAQ,GAG7D,GAAc,IAAVqhK,GAGA,GAFAqB,IAEIA,EAAS,EAAG,OAAO,OAGhBrB,EAAQ97J,GACfA,EAAM87J,EACNiB,EAAOtiK,EACPuiK,EAAOtiK,GAGAohK,EAAQzuL,IACfA,EAAMyuL,EACNmB,EAAOxiK,EACPyiK,EAAOxiK,EAEf,CAIJ,OAAY,IAARsF,GAAqB,IAAR3yB,IAIT+vL,EAAgBZ,EAAKO,EAAMC,EAAMxoL,EAAOC,IAAW2oL,EAAgBhC,EAAM2B,EAAMC,EAAMxoL,EAAOC,IAC5F2oL,EAAgBZ,EAAKS,EAAMC,EAAM1oL,EAAOC,IAAW2oL,EAAgBhC,EAAM6B,EAAMC,EAAM1oL,EAAOC,GACxG,CAGA,SAAS2oL,EAAgBZ,EAAKC,EAAIC,EAAIloL,EAAOC,GACzC,MAAMkoL,EAAKvvL,KAAKC,IAAIovL,EAAK,EAAG,GACtBG,EAAKxvL,KAAKC,IAAIqvL,EAAK,EAAG,GACtBG,EAAKzvL,KAAK4yB,IAAIy8J,EAAK,EAAGjoL,EAAQ,GAC9BsoL,EAAK1vL,KAAK4yB,IAAI08J,EAAK,EAAGjoL,EAAS,GAC/BmmE,EAA0B,GAAnB8hH,EAAKloL,EAAQioL,GAC1B,IAAIU,EAASV,IAAOE,GAAMF,IAAOI,GAAMH,IAAOE,GAAMF,IAAOI,EAAK,EAAI,EAGpE,IAAK,IAAIriK,EAAIkiK,EAAIliK,GAAKoiK,EAAIpiK,IACtB,IAAK,IAAIC,EAAIkiK,EAAIliK,GAAKoiK,EAAIpiK,IAAK,CAC3B,GAAID,IAAMgiK,GAAM/hK,IAAMgiK,EAAI,SAE1B,MAAMW,EAAyB,GAAjB3iK,EAAIlmB,EAAQimB,GAM1B,GALI+hK,EAAI5hH,KAAS4hH,EAAIa,IACjBb,EAAI5hH,EAAM,KAAO4hH,EAAIa,EAAO,IAC5Bb,EAAI5hH,EAAM,KAAO4hH,EAAIa,EAAO,IAC5Bb,EAAI5hH,EAAM,KAAO4hH,EAAIa,EAAO,IAAIF,IAEhCA,EAAS,EAAG,OAAO,CAC3B,CAGJ,OAAO,CACX,CAKA,SAASpB,EAAWZ,EAAMC,EAAM1uJ,EAAGxuB,EAAGo/K,GAClC,IAAIC,EAAKpC,EAAKzuJ,EAAI,GACd8wJ,EAAKrC,EAAKzuJ,EAAI,GACd+wJ,EAAKtC,EAAKzuJ,EAAI,GACdgxJ,EAAKvC,EAAKzuJ,EAAI,GAEdixJ,EAAKvC,EAAKl9K,EAAI,GACd0/K,EAAKxC,EAAKl9K,EAAI,GACd2/K,EAAKzC,EAAKl9K,EAAI,GACd4/K,EAAK1C,EAAKl9K,EAAI,GAElB,GAAIw/K,IAAOI,GAAMP,IAAOI,GAAMH,IAAOI,GAAMH,IAAOI,EAAI,OAAO,EAEzDH,EAAK,MACLA,GAAM,IACNH,EAAKQ,EAAMR,EAAIG,GACfF,EAAKO,EAAMP,EAAIE,GACfD,EAAKM,EAAMN,EAAIC,IAGfI,EAAK,MACLA,GAAM,IACNH,EAAKI,EAAMJ,EAAIG,GACfF,EAAKG,EAAMH,EAAIE,GACfD,EAAKE,EAAMF,EAAIC,IAGnB,MAAMpB,EAAKsB,EAAMT,EAAIC,EAAIC,GACnBX,EAAKkB,EAAML,EAAIC,EAAIC,GACnBnjK,EAAIgiK,EAAKI,EAEf,GAAIQ,EAAO,OAAO5iK,EAElB,MAAM9iC,EAAIqmM,EAAMV,EAAIC,EAAIC,GAAMQ,EAAMN,EAAIC,EAAIC,GACtCpmI,EAAIymI,EAAMX,EAAIC,EAAIC,GAAMS,EAAMP,EAAIC,EAAIC,GAEtC/B,EAAQ,MAASphK,EAAIA,EAAI,KAAQ9iC,EAAIA,EAAI,MAAS6/D,EAAIA,EAG5D,OAAOilI,EAAKI,GAAMhB,EAAQA,CAC9B,CAEA,SAASkC,EAAM/gH,EAAG04E,EAAG/rJ,GAAK,MAAW,UAAJqzE,EAAqB,UAAJ04E,EAAqB,UAAJ/rJ,CAAgB,CACnF,SAASq0L,EAAMhhH,EAAG04E,EAAG/rJ,GAAK,MAAW,UAAJqzE,EAAqB,SAAJ04E,EAAqB,UAAJ/rJ,CAAgB,CACnF,SAASs0L,EAAMjhH,EAAG04E,EAAG/rJ,GAAK,MAAW,UAAJqzE,EAAqB,UAAJ04E,EAAqB,UAAJ/rJ,CAAgB,CAGnF,SAASm0L,EAAMzjK,EAAG3wB,GACd,OAAO,KAAO2wB,EAAI,KAAO3wB,CAC7B,CAEA,SAASwyL,EAAUtwE,EAAQjxC,EAAKqC,EAAG04E,EAAG/rJ,GAClCiiH,EAAOjxC,EAAM,GAAKqC,EAClB4uC,EAAOjxC,EAAM,GAAK+6E,EAClB9pC,EAAOjxC,EAAM,GAAKhxE,EAClBiiH,EAAOjxC,EAAM,GAAK,GACtB,CAEA,SAAS+gH,EAAca,EAAK5kM,EAAGgkM,EAAO/vE,GAClC,MAGM/yD,EAAMilI,EAAMC,EAHRxB,EAAI5kM,EAAI,GACR4kM,EAAI5kM,EAAI,GACR4kM,EAAI5kM,EAAI,IACgBgkM,EAAQY,EAAI5kM,EAAI,GAAK,KACvDukM,EAAUtwE,EAAQj0H,EAAGkhE,EAAKA,EAAKA,EACnC,YC3OA,IAAI2mG,EAAUj2K,EAAOD,QAAU,CAC7BgsB,EAAG,CAAC,CACF3jB,KAAM,UACN8tK,IAAK,YAEPvzC,EAAG,CAAC,CAEFv6H,KAAM,SACN8tK,IAAK,wCACL19E,MAAO,CAAC,WAAY,YAAa,iBAAkB,UAAW,QAAS,WACvEmoC,OAAQ,wBAGVpvF,EAAG,CAAC,CAAEnpC,KAAM,SACZgG,EAAG,CAAC,CAAEhG,KAAM,gBACZujK,EAAG,CAAC,CAAEvjK,KAAM,QACZyP,EAAG,CAAC,CAAEzP,KAAM,UACZm0B,EAAG,CAAC,CAAEn0B,KAAM,UACZomK,EAAG,CAAC,CAAEpmK,KAAM,cACZqrF,EAAG,CAAC,CAAErrF,KAAM,YAEZslB,EAAG,CAAC,CACFtlB,KAAM,SACN8tK,IAAK,eACL19E,MAAO,CAAC,QAAS,QACjBmoC,OAAQ,UAEV7vF,EAAG,CAAC,CACF1oC,KAAM,aACN8tK,IAAK,mBACL19E,MAAO,CAAC,UAAW,MACnBmoC,OAAQ,eAEVvgH,EAAG,CAAC,CACFzI,KAAM,YACNu+J,IAAK,4BACL19E,MAAO,CAAC,OAAQ,SAChBmoC,OAAQ,UAEVjsG,EAAG,CAAC,CAGFwhJ,IAAK,mCACL19E,MAAO,CAAC,OAAQ,OAAQ,WAAY,YACpCmoC,OAAQ,gBAEVxgH,EAAG,CACD,CACExI,KAAM,MACNu+J,IAAK,0DACL19E,MAAO,CAAC,UAAW,QAAS,OAAQ,YACpCmoC,OAAQ,SAAUgC,GAChB,OAAQA,EAAEhgB,SACR,qBACAggB,EAAEp+G,KACF,kBACA,cACJ,GAEF,CAEE5M,KAAM,OACNu+J,IAAK,wBACL19E,MAAO,CAAC,UAAW,UACnBmoC,OAAQ,cAEV,CACEv4H,KAAM,UACN8tK,IAAK,gBACLv1C,OAAQ,cAEV,CACEv4H,KAAM,OACN8tK,IAAK,sCACL19E,MAAO,CAAC,OAAQ,UAAW,QAAS,WACpCmoC,OAAQ,SAAUgC,GAChB,OAAqB,MAAbA,EAAEt1G,QACR,qBACA,SACJ,GAEF,CACE1V,KAAM,eACNu+J,IAAK,kCACL19E,MAAO,CAAC,UAAW,SACnBmoC,OAAQ,yBAEV,CACEhpH,KAAM,SACNu+J,IAAK,6CACL19E,MAAO,CAAC,UAAW,OAAQ,WAC3BmoC,OAAQ,SAAUgC,GAChB,OAAqB,MAAbA,EAAEwzC,QACR,mBACA,eACJ,GAEF,CAEEx+J,KAAM,MACNu+J,IAAK,6CACL19E,MAAO,CAAC,QAAS,YAAa,MAAO,UACrCmoC,OAAQ,SAAUgC,GAChB,MAAO,aAAeA,EAAEpkE,UAAY,MAAQ,MAAQ,OAASokE,EAAE3mG,OAAS,MAAQ,GAClF,GAEF,CACErkB,KAAM,SACNu+J,IAAK,0CACL19E,MAAO,CAAC,KAAM,QAAS,SAAU,iBACjCmoC,OAAQ,SAAUgC,GAChB,OAA2B,MAAnBA,EAAEyzC,cACR,qBACA,iBACJ,GAEF,CACEhuK,KAAM,QACN8tK,IAAK,eACLv1C,OAAQ,YAEV,CACEv4H,KAAM,MACN8tK,IAAK,gBACLv1C,OAAQ,UAEV,CACEv4H,KAAM,OACN8tK,IAAK,aACLv1C,OAAQ,WAEV,CACEv4H,KAAM,QACN8tK,IAAK,eACLv1C,OAAQ,YAEV,CACEv4H,KAAM,WACN8tK,IAAK,kBACLv1C,OAAQ,eAEV,CACEv4H,KAAM,YACN8tK,IAAK,0CAEP,CACE9tK,KAAM,UACN8tK,IAAK,eAEP,CACE9tK,KAAM,WACN8tK,IAAK,mBACLv1C,OAAQ,gBAEV,CACEv4H,KAAM,SACN8tK,IAAK,iBACLv1C,OAAQ,cAEV,CACEv4H,KAAM,cACN8tK,IAAK,2BACL19E,MAAO,CAAC,OAAQ,QAChBmoC,OAAQ,qBAEV,CAKEhpH,KAAK,aACLu+J,IAAK,+KACL19E,MAAO,CAAC,aAAc,YAAa,YAAa,WAAY,KAAM,OAAQ,OAAQ,QAAS,QAAS,UAAW,aAAc,aAAc,gBAC3ImoC,OAAQ,SAAUgC,GAChB,IAAIhxF,EAAM,qCAaV,OAXAA,GAAmB,MAAXgxF,EAAE0zC,MAAiB,qBAAuB,OAGlD1kI,GAAqB,MAAbgxF,EAAErlE,QAAmB,cAAgB,KAEzB,MAAhBqlE,EAAEtlE,aACJ1rB,GAAO,mBAGTA,GAA2B,MAAnBgxF,EAAE,cAAyB,iBAAmB,OACzB,MAArBA,EAAE,gBAA2B,mBAAqB,KAE5D,GAEF,CACEv6H,KAAM,kBACN8tK,IAAK,wBAEP,CACE9tK,KAAM,mBACN8tK,IAAK,0BACLv1C,OAAQ,wBAEV,CACEv4H,KAAM,aACN8tK,IAAK,qBACLv1C,OAAQ,kBAEV,CACEhpH,KAAM,QACNu+J,IAAK,iCACL19E,MAAO,CAAC,KAAM,YAAa,SAC3BmoC,OAAQ,SAAUgC,GAChB,IAAIhxF,EAAM,UAOV,OANmB,MAAfgxF,EAAE5iE,YACJpuB,GAAO,MACQ,MAAXgxF,EAAE3yH,QACJ2hC,GAAO,QAGJA,CACT,GAEF,CAEEh6B,KAAM,aAENu+J,IAAK,mEACL19E,MAAO,CAAC,YAAa,SACrBmoC,OAAQ,oBAEV,CACEv4H,KAAM,eACN8tK,IAAK,gCACL19E,MAAO,CAAC,WAAY,SACpBmoC,OAAQ,wBAEV,CACEhpH,KAAM,SACNu+J,IAAK,oBACL19E,MAAO,CAAC,OAAQ,QAChBmoC,OAAQ,eAEV,CACEv4H,KAAM,UACN8tK,IAAK,eAEP,CACE9tK,KAAM,YACN8tK,IAAK,iBAEP,CACE9tK,KAAM,UACN8tK,IAAK,uCACL19E,MAAO,CAAC,gBAAiB,MAAO,kBAChCmoC,OAAQ,SAAUgC,GAChB,OAA4B,MAApBA,EAAEviC,eACR,mBACA,eACJ,GAEF,CACEh4F,KAAM,cACN8tK,IAAK,0BACLv1C,OAAQ,oBAEV,CACEhpH,KAAM,OACNu+J,IAAK,sCACL19E,MAAO,CAAC,KAAM,YAAa,UAC3BmoC,OAAQ,SAAUgC,GAChB,OAAQA,EAAEtkE,OAAU,eAAiB,WACvC,GAEF,CAGE1mD,KAAM,aACNu+J,IAAK,IAAIl8E,OAEP,wKAMFxB,MAAO,CAAC,KAAM,OAAQ,SAAU,OAAQ,UACxCmoC,OAAQ,SAAUgC,GAChB,MAAO,sBAAwBA,EAAE2zC,KAAO,SAAW,GACrD,GAEF,CAEEluK,KAAM,YACN8tK,IAAK,IAAIl8E,OAEP,2FAQFxB,MAAO,CAAC,OAAQ,QAAS,OAAQ,SACjCmoC,OAAQ,SAAUgC,GAChB,MAAO,mBAAqBA,EAAE2zC,KAAO,SAAW,GAClD,GAEF,CAIEluK,KAAM,eACN8tK,IAAK,kCACL19E,MAAO,CAAC,SACRmoC,OAAQ,iBAEV,CAGEv4H,KAAM,YACN8tK,IAAK,8BACLv1C,OAAQ,gBAEV,CACEhpH,KAAM,UACN6gF,MAAO,CAAC,YAMd9uF,OAAO8G,KAAKylK,GAASx/J,SAAQ,SAAU1G,GAC1BkmK,EAAQlmK,GACd0G,SAAQ,SAAUmqC,GAChBA,EAAIs1H,MACPt1H,EAAIs1H,IAAM,QAEPt1H,EAAI+/E,SACP//E,EAAI+/E,OAAS,KAEjB,GACF,oBCnVA,IAAIn1E,EAAS1zC,EAAQ,MACjB6+J,EAAS7+J,EAAQ,MAErB/X,EAAQ8uH,MAAQ8nD,EAChB52K,EAAQ4pC,MAAQ6hB,EAAO7hB,MACvB5pC,EAAQ82K,gBAAkBrrH,EAAOqrH,gBACjC92K,EAAQ62K,YAAcprH,EAAOorH,YAC7B72K,EAAQ+2K,cAAgBtrH,EAAOsrH,cAC/B/2K,EAAQg3K,sBAAwBvrH,EAAOurH,sBACvCh3K,EAAQi3K,qBAAuBxrH,EAAOwrH,qBACtCj3K,EAAQk3K,yBAA2BzrH,EAAOyrH,yCCV1C,IAAIC,EAAa,SAAUnrJ,GACzB,OAAOgoC,OAAOxlD,OAAOwd,MAAQA,EAAIxd,OAAOwd,GAAKA,CAC/C,EAeIorJ,EAAW,SAAUv2H,EAAKuG,EAAUsP,GACtC,IAAI2gH,EAAax2H,EAAIx4C,MAAQw4C,EAAI43C,MAC7B53C,EAAIjpC,OAASwvC,EAASvG,EAAIjpC,MAC5BwvC,EAASvG,EAAIjpC,MAAQ,GAEdy/J,IAAejwH,EAASvG,EAAIx4C,QACnC++C,EAASvG,EAAIx4C,MAAQ,CAAC,GAExB,IAAIivK,EAAcz2H,EAAIjpC,KACpB,CAAC,EACDy/J,EAAajwH,EAASvG,EAAIx4C,MAAQ++C,GAvBf,SAAU35C,EAAO25C,EAAUqxC,EAAO8+E,GACvD,GAAIA,IAAY9+E,EACdrxC,EAASmwH,GAAWJ,EAAW1pK,EAAM,SAGrC,IAAK,IAAIY,EAAI,EAAGA,EAAIoqF,EAAMzsF,OAAQqC,GAAK,EACnB,MAAdZ,EAAMY,EAAE,KACV+4C,EAASqxC,EAAMpqF,IAAM8oK,EAAW1pK,EAAMY,EAAE,IAIhD,CAcEmpK,CAAiB9gH,EAAQjpD,MAAMozC,EAAIs1H,KAAMmB,EAAaz2H,EAAI43C,MAAO53C,EAAIx4C,MAEjEw4C,EAAIjpC,MACNwvC,EAASvG,EAAIjpC,MAAMA,KAAK0/J,EAE5B,EAEIpB,EAAUn+J,EAAQ,MAClB0/J,EAAYx9E,OAAOvwF,UAAU+I,KAAKimB,KAAK,iBAE3C14B,EAAQ4pC,MAAQ,SAAUy2B,GACxB,IAAI1qC,EAAU,CAAC,EACXorB,EAAQ,GACRqG,EAAWzxB,EAoBf,OAjBA0qC,EAAIpxC,MAAM,gBAAgB1O,OAAOk3J,GAAW/gK,SAAQ,SAAU0rD,GAC5D,IAAI12D,EAAO02D,EAAE,GACT1L,EAAU0L,EAAEz5D,MAAM,GACT,MAAT+C,IACFq1C,EAAMnpC,KAAK,CAAC+oD,IAAK,GAAIY,KAAM,KAC3Bna,EAAWrG,EAAMA,EAAM/0C,OAAO,IAGhC,IAAK,IAAI2lC,EAAI,EAAGA,GAAKukI,EAAQxqK,IAAS,IAAIM,OAAQ2lC,GAAK,EAAG,CACxD,IAAIkP,EAAMq1H,EAAQxqK,GAAMimC,GACxB,GAAIkP,EAAIs1H,IAAI1jK,KAAKikD,GACf,OAAO0gH,EAASv2H,EAAKuG,EAAUsP,EAEnC,CACF,IAEA/gC,EAAQorB,MAAQA,EACTprB,CACT,EAEA,IAAI+hJ,EAAe,SAAUC,EAAKvmF,GAChC,IAAI5/C,EAAI4/C,EAAKniE,MAAM,QAAS,GAI5B,OAHiB,IAAbuiB,EAAExlC,SACJ2rK,EAAInmI,EAAE,IAAM2lI,EAAW3lI,EAAE,KAEpBmmI,CACT,EAEA33K,EAAQ62K,YAAc,SAAUjlI,GAC9B,OAAOA,EAAI3iB,MAAM,SAAS9O,OAAOu3J,EAAc,CAAC,EAClD,EAGA13K,EAAQ82K,gBAAkB92K,EAAQ62K,YAElC72K,EAAQ+2K,cAAgB,SAAUnlI,GAChC,OAAOA,EAAI3iB,MAAM,KAAK+W,IAAIx3B,OAC5B,EAEAxO,EAAQg3K,sBAAwB,SAAUplI,GAGxC,IAFA,IAAI6mC,EAAa,GACbzc,EAAQpqB,EAAI3iB,MAAM,KAAK+W,IAAImxI,GACtB9oK,EAAI,EAAGA,EAAI2tD,EAAMhwD,OAAQqC,GAAK,EACrCoqE,EAAW7gE,KAAK,CACdwlD,UAAWpB,EAAM3tD,GACjBgf,GAAI2uC,EAAM3tD,EAAI,GACdkf,KAAMyuC,EAAM3tD,EAAI,KAGpB,OAAOoqE,CACT,EAEAz4E,EAAQi3K,qBAAuB,SAAUrlI,GACvC,OAAOA,EAAI3iB,MAAM,KAAK+W,KAAI,SAAUw7B,GAClC,OAAOA,EAAKhpC,UAAU,EAAGgpC,EAAKx1D,OAAO,GAAGijB,MAAM,KAAK9O,OAAOu3J,EAAc,CAAC,EAC3E,GACF,EAEA13K,EAAQk3K,yBAA2B,SAAUtlI,GAC3C,OAAOA,EAAI3iB,MAAM,KAAK+W,KAAI,SAAUhxB,GAClC,OAAOA,EAAOia,MAAM,KAAK+W,KAAI,SAAU46F,GACrC,IAAIg3C,EAAM/oG,GAAS,EASnB,MAPkB,MAAd+xD,EAAO,GACTg3C,EAAOT,EAAWv2C,IAElBg3C,EAAOT,EAAWv2C,EAAOpoG,UAAU,EAAGooG,EAAO50H,SAC7C6iE,GAAS,GAGJ,CACL+oG,KAAMA,EACN/oG,OAAQA,EAEZ,GACF,GACF,kBCzHA,IAAIqnG,EAAUn+J,EAAQ,MAGlB8/J,EAAe,WACfj3C,EAAS,SAAUk3C,GACrB,IAAIzpK,EAAI,EACJ+M,EAAOrP,UACPgmC,EAAM32B,EAAKpP,OACf,OAAO8rK,EAAUpgI,QAAQmgI,GAAc,SAAU3mI,GAC/C,GAAI7iC,GAAK0jC,EACP,OAAOb,EAET,IAAIurH,EAAMrhJ,EAAK/M,GAEf,OADAA,GAAK,EACG6iC,GACR,IAAK,KACH,MAAO,IACT,IAAK,KACH,OAAO8iB,OAAOyoG,GAChB,IAAK,KACH,OAAOjuJ,OAAOiuJ,GAChB,IAAK,KACH,MAAO,GAEX,GAEF,EAEIsb,EAAW,SAAUrsK,EAAMm1C,EAAKuG,GAClC,IAIIhsC,EAAO,CAAC1P,EAAO,KAJTm1C,EAAI+/E,kBAAkBwwC,SAC7BvwH,EAAI+/E,OAAO//E,EAAIjpC,KAAOwvC,EAAWA,EAASvG,EAAIx4C,OAC/Cw4C,EAAI+/E,SAGN,GAAI//E,EAAI43C,MACN,IAAK,IAAIpqF,EAAI,EAAGA,EAAIwyC,EAAI43C,MAAMzsF,OAAQqC,GAAK,EAAG,CAC5C,IAAI0C,EAAI8vC,EAAI43C,MAAMpqF,GACdwyC,EAAIx4C,KACN+S,EAAKxD,KAAKwvC,EAASvG,EAAIx4C,MAAM0I,IAG7BqK,EAAKxD,KAAKwvC,EAASvG,EAAI43C,MAAMpqF,IAEjC,MAGA+M,EAAKxD,KAAKwvC,EAASvG,EAAIx4C,OAEzB,OAAOu4H,EAAO/lH,MAAM,KAAMO,EAC5B,EAII48J,EAAoB,CACtB,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IAAK,KAElBC,EAAoB,CAAC,IAAK,IAAK,IAAK,KAGxCh4K,EAAOD,QAAU,SAAU21B,EAASg4E,GAClCA,EAAOA,GAAQ,CAAC,EAEO,MAAnBh4E,EAAQjoB,UACVioB,EAAQjoB,QAAU,GAEA,MAAhBioB,EAAQttB,OACVstB,EAAQttB,KAAO,KAEjBstB,EAAQorB,MAAMrqC,SAAQ,SAAUmpD,GACR,MAAlBA,EAAMgB,WACRhB,EAAMgB,SAAW,GAErB,IAEA,IAAIq3G,EAAavqE,EAAKuqE,YAAcF,EAChCG,EAAaxqE,EAAKwqE,YAAcF,EAChC53G,EAAM,GAkCV,OA/BA63G,EAAWxhK,SAAQ,SAAUhL,GAC3BwqK,EAAQxqK,GAAMgL,SAAQ,SAAUmqC,GAC1BA,EAAIx4C,QAAQstB,GAAgC,MAArBA,EAAQkrB,EAAIx4C,MACrCg4D,EAAIzoD,KAAKmgK,EAASrsK,EAAMm1C,EAAKlrB,IAEtBkrB,EAAIjpC,QAAQ+d,GAAgC,MAArBA,EAAQkrB,EAAIjpC,OAC1C+d,EAAQkrB,EAAIjpC,MAAMlB,SAAQ,SAAUy8B,GAClCktB,EAAIzoD,KAAKmgK,EAASrsK,EAAMm1C,EAAK1N,GAC/B,GAEJ,GACF,IAGAxd,EAAQorB,MAAMrqC,SAAQ,SAAUmpD,GAC9BQ,EAAIzoD,KAAKmgK,EAAS,IAAK7B,EAAQvhJ,EAAE,GAAIkrC,IAErCs4G,EAAWzhK,SAAQ,SAAUhL,GAC3BwqK,EAAQxqK,GAAMgL,SAAQ,SAAUmqC,GAC1BA,EAAIx4C,QAAQw3D,GAA4B,MAAnBA,EAAMhf,EAAIx4C,MACjCg4D,EAAIzoD,KAAKmgK,EAASrsK,EAAMm1C,EAAKgf,IAEtBhf,EAAIjpC,QAAQioD,GAA4B,MAAnBA,EAAMhf,EAAIjpC,OACtCioD,EAAMhf,EAAIjpC,MAAMlB,SAAQ,SAAUy8B,GAChCktB,EAAIzoD,KAAKmgK,EAASrsK,EAAMm1C,EAAK1N,GAC/B,GAEJ,GACF,GACF,IAEOktB,EAAIv3D,KAAK,QAAU,MAC5B,yBC7GA,MAAMw2F,EAAW,CAIjBA,mBAA8B,WAC5B,OAAOz7E,KAAKizB,SAASa,SAAS,IAAInf,UAAU,EAAG,GACjD,GAGA8mE,EAASs1G,WAAat1G,EAASu1G,qBAG/Bv1G,EAASw1G,WAAa,SAASnxE,GAC7B,OAAOA,EAAKv3C,OAAOn9D,MAAM,MAAM+W,KAAIu1B,GAAQA,EAAK6wB,QAClD,EAEAkT,EAASy1G,cAAgB,SAASpxE,GAEhC,OADcA,EAAK10G,MAAM,QACZ+W,KAAI,CAACsuH,EAAM9uH,KAAWA,EAAQ,EACzC,KAAO8uH,EAAOA,GAAMloE,OAAS,QACjC,EAGAkT,EAAS01G,eAAiB,SAASrxE,GACjC,MAAM/jC,EAAWN,EAASy1G,cAAcpxE,GACxC,OAAO/jC,GAAYA,EAAS,EAC9B,EAGAN,EAAS21G,iBAAmB,SAAStxE,GACnC,MAAM/jC,EAAWN,EAASy1G,cAAcpxE,GAExC,OADA/jC,EAASvlD,QACFulD,CACT,EAGAN,EAAS41G,YAAc,SAASvxE,EAAM7vC,GACpC,OAAOwL,EAASw1G,WAAWnxE,GAAMpjH,QAAOg7C,GAAiC,IAAzBA,EAAKryD,QAAQ4qF,IAC/D,EAMAwL,EAAS61G,eAAiB,SAAS55I,GACjC,IAAIS,EAGFA,EADmC,IAAjCT,EAAKryD,QAAQ,gBACPqyD,EAAK/iC,UAAU,IAAIvJ,MAAM,KAEzBssC,EAAK/iC,UAAU,IAAIvJ,MAAM,KAGnC,MAAMguC,EAAY,CAChBE,WAAYnB,EAAM,GAClBoB,UAAW,CAAC,EAAG,MAAO,EAAG,QAAQpB,EAAM,KAAOA,EAAM,GACpDvuC,SAAUuuC,EAAM,GAAG1L,cACnB+M,SAAU5uD,SAASutD,EAAM,GAAI,IAC7B3uC,GAAI2uC,EAAM,GACV1uC,QAAS0uC,EAAM,GACfzuC,KAAM9e,SAASutD,EAAM,GAAI,IAEzBtwD,KAAMswD,EAAM,IAGd,IAAK,IAAI3tD,EAAI,EAAGA,EAAI2tD,EAAMhwD,OAAQqC,GAAK,EACrC,OAAQ2tD,EAAM3tD,IACZ,IAAK,QACH4uD,EAAUm4I,eAAiBp5I,EAAM3tD,EAAI,GACrC,MACF,IAAK,QACH4uD,EAAUo4I,YAAc5mM,SAASutD,EAAM3tD,EAAI,GAAI,IAC/C,MACF,IAAK,UACH4uD,EAAUq4I,QAAUt5I,EAAM3tD,EAAI,GAC9B,MACF,IAAK,QACH4uD,EAAU7hC,MAAQ4gC,EAAM3tD,EAAI,GAC5B4uD,EAAUwiC,iBAAmBzjC,EAAM3tD,EAAI,GACvC,MACF,aAC8BzF,IAAxBq0D,EAAUjB,EAAM3tD,MAClB4uD,EAAUjB,EAAM3tD,IAAM2tD,EAAM3tD,EAAI,IAKxC,OAAO4uD,CACT,EAIAqiC,EAASi2G,eAAiB,SAASt4I,GACjC,MAAMoD,EAAM,GACZA,EAAIzoD,KAAKqlD,EAAUE,YAEnB,MAAMC,EAAYH,EAAUG,UACV,QAAdA,EACFiD,EAAIzoD,KAAK,GACc,SAAdwlD,EACTiD,EAAIzoD,KAAK,GAETyoD,EAAIzoD,KAAKwlD,GAEXiD,EAAIzoD,KAAKqlD,EAAUxvC,SAASsmE,eAC5B1zB,EAAIzoD,KAAKqlD,EAAUI,UACnBgD,EAAIzoD,KAAKqlD,EAAU3vC,SAAW2vC,EAAU5vC,IACxCgzC,EAAIzoD,KAAKqlD,EAAU1vC,MAEnB,MAAM7hB,EAAOuxD,EAAUvxD,KAkBvB,OAjBA20D,EAAIzoD,KAAK,OACTyoD,EAAIzoD,KAAKlM,GACI,SAATA,GAAmBuxD,EAAUm4I,gBAC7Bn4I,EAAUo4I,cACZh1I,EAAIzoD,KAAK,SACTyoD,EAAIzoD,KAAKqlD,EAAUm4I,gBACnB/0I,EAAIzoD,KAAK,SACTyoD,EAAIzoD,KAAKqlD,EAAUo4I,cAEjBp4I,EAAUq4I,SAAgD,QAArCr4I,EAAUxvC,SAAS6iC,gBAC1C+P,EAAIzoD,KAAK,WACTyoD,EAAIzoD,KAAKqlD,EAAUq4I,WAEjBr4I,EAAUwiC,kBAAoBxiC,EAAU7hC,SAC1CilC,EAAIzoD,KAAK,SACTyoD,EAAIzoD,KAAKqlD,EAAUwiC,kBAAoBxiC,EAAU7hC,QAE5C,aAAeilC,EAAIv3D,KAAK,IACjC,EAKAw2F,EAASk2G,gBAAkB,SAASj6I,GAClC,OAAOA,EAAK/iC,UAAU,IAAIvJ,MAAM,IAClC,EAIAqwE,EAASm2G,YAAc,SAASl6I,GAC9B,IAAIS,EAAQT,EAAK/iC,UAAU,GAAGvJ,MAAM,KACpC,MAAMymL,EAAS,CACbzvI,YAAax3D,SAASutD,EAAM3hB,QAAS,KAUvC,OAPA2hB,EAAQA,EAAM,GAAG/sC,MAAM,KAEvBymL,EAAOrtM,KAAO2zD,EAAM,GACpB05I,EAAOC,UAAYlnM,SAASutD,EAAM,GAAI,IACtC05I,EAAOl5I,SAA4B,IAAjBR,EAAMhwD,OAAeyC,SAASutD,EAAM,GAAI,IAAM,EAEhE05I,EAAOE,YAAcF,EAAOl5I,SACrBk5I,CACT,EAIAp2G,EAASu2G,YAAc,SAASvgM,GAC9B,IAAI+oD,EAAK/oD,EAAM2wD,iBACoBr9D,IAA/B0M,EAAMwgM,uBACRz3I,EAAK/oD,EAAMwgM,sBAEb,MAAMt5I,EAAWlnD,EAAMknD,UAAYlnD,EAAMsgM,aAAe,EACxD,MAAO,YAAcv3I,EAAK,IAAM/oD,EAAMjN,KAAO,IAAMiN,EAAMqgM,WACvC,IAAbn5I,EAAiB,IAAMA,EAAW,IAAM,MAC/C,EAKA8iC,EAAS/gC,YAAc,SAAShD,GAC9B,MAAMS,EAAQT,EAAK/iC,UAAU,GAAGvJ,MAAM,KACtC,MAAO,CACLd,GAAI1f,SAASutD,EAAM,GAAI,IACvBwC,UAAWxC,EAAM,GAAG9yD,QAAQ,KAAO,EAAI8yD,EAAM,GAAG/sC,MAAM,KAAK,GAAK,WAChEwvC,IAAKzC,EAAM,GACXxwD,WAAYwwD,EAAMrzD,MAAM,GAAGG,KAAK,KAEpC,EAIAw2F,EAASy2G,YAAc,SAASC,GAC9B,MAAO,aAAeA,EAAgB7nL,IAAM6nL,EAAgBC,cACvDD,EAAgBx3I,WAA2C,aAA9Bw3I,EAAgBx3I,UAC1C,IAAMw3I,EAAgBx3I,UACtB,IACJ,IAAMw3I,EAAgBv3I,KACrBu3I,EAAgBxqM,WAAa,IAAMwqM,EAAgBxqM,WAAa,IACjE,MACN,EAKA8zF,EAASviC,UAAY,SAASxB,GAC5B,MAAMm6I,EAAS,CAAC,EAChB,IAAIQ,EACJ,MAAMl6I,EAAQT,EAAK/iC,UAAU+iC,EAAKryD,QAAQ,KAAO,GAAG+lB,MAAM,KAC1D,IAAK,IAAI0iB,EAAI,EAAGA,EAAIqqB,EAAMhwD,OAAQ2lC,IAChCukK,EAAKl6I,EAAMrqB,GAAGy6C,OAAOn9D,MAAM,KAC3BymL,EAAOQ,EAAG,GAAG9pH,QAAU8pH,EAAG,GAE5B,OAAOR,CACT,EAGAp2G,EAAS62G,UAAY,SAAS7gM,GAC5B,IAAIimD,EAAO,GACP8C,EAAK/oD,EAAM2wD,YAIf,QAHmCr9D,IAA/B0M,EAAMwgM,uBACRz3I,EAAK/oD,EAAMwgM,sBAETxgM,EAAMkuG,YAAc75G,OAAO8G,KAAK6E,EAAMkuG,YAAYx3G,OAAQ,CAC5D,MAAMsyD,EAAS,GACf30D,OAAO8G,KAAK6E,EAAMkuG,YAAY9sG,SAAQ69I,SACJ3rJ,IAA5B0M,EAAMkuG,WAAW+wC,GACnBj2F,EAAO1mD,KAAK28I,EAAQ,IAAMj/I,EAAMkuG,WAAW+wC,IAE3Cj2F,EAAO1mD,KAAK28I,EACd,IAEFh5F,GAAQ,UAAY8C,EAAK,IAAMC,EAAOx1D,KAAK,KAAO,MACpD,CACA,OAAOyyD,CACT,EAIA+jC,EAAS82G,YAAc,SAAS76I,GAC9B,MAAMS,EAAQT,EAAK/iC,UAAU+iC,EAAKryD,QAAQ,KAAO,GAAG+lB,MAAM,KAC1D,MAAO,CACLvjB,KAAMswD,EAAM3hB,QACZ+rB,UAAWpK,EAAMlzD,KAAK,KAE1B,EAGAw2F,EAAS+2G,YAAc,SAAS/gM,GAC9B,IAAIwoD,EAAQ,GACRO,EAAK/oD,EAAM2wD,YAYf,YAXmCr9D,IAA/B0M,EAAMwgM,uBACRz3I,EAAK/oD,EAAMwgM,sBAETxgM,EAAMghM,cAAgBhhM,EAAMghM,aAAatqM,QAE3CsJ,EAAMghM,aAAa5/L,SAAQivD,IACzB7H,GAAS,aAAeO,EAAK,IAAMsH,EAAGj6D,MACrCi6D,EAAGS,WAAaT,EAAGS,UAAUp6D,OAAS,IAAM25D,EAAGS,UAAY,IACxD,MAAM,IAGPtI,CACT,EAIAwhC,EAASi3G,eAAiB,SAASh7I,GACjC,MAAMi7I,EAAKj7I,EAAKryD,QAAQ,KAClB8yD,EAAQ,CACZ/hD,KAAMxL,SAAS8sD,EAAK/iC,UAAU,EAAGg+K,GAAK,KAElCC,EAAQl7I,EAAKryD,QAAQ,IAAKstM,GAOhC,OANIC,GAAS,GACXz6I,EAAMgE,UAAYzE,EAAK/iC,UAAUg+K,EAAK,EAAGC,GACzCz6I,EAAM/rD,MAAQsrD,EAAK/iC,UAAUi+K,EAAQ,IAErCz6I,EAAMgE,UAAYzE,EAAK/iC,UAAUg+K,EAAK,GAEjCx6I,CACT,EAIAsjC,EAASo3G,eAAiB,SAASn7I,GACjC,MAAMS,EAAQT,EAAK/iC,UAAU,IAAIvJ,MAAM,KACvC,MAAO,CACLqnC,UAAW0F,EAAM3hB,QACjB8c,MAAO6E,EAAMh2B,KAAI/rB,GAAQxL,SAASwL,EAAM,MAE5C,EAIAqlF,EAASq3G,OAAS,SAAS92G,GACzB,MAAMh9B,EAAMy8B,EAAS41G,YAAYr1G,EAAc,UAAU,GACzD,GAAIh9B,EACF,OAAOA,EAAIrqC,UAAU,EAEzB,EAGA8mE,EAASziC,iBAAmB,SAAStB,GACnC,MAAMS,EAAQT,EAAK/iC,UAAU,IAAIvJ,MAAM,KACvC,MAAO,CACL2nL,UAAW56I,EAAM,GAAG1L,cACpBrgD,MAAO+rD,EAAM,GAAG+3B,cAEpB,EAKAuL,EAASu3G,kBAAoB,SAASh3G,EAAcjhC,GAIlD,MAAO,CACL5lC,KAAM,OACN89K,aALYx3G,EAAS41G,YAAYr1G,EAAejhC,EAChD,kBAIoB54B,IAAIs5D,EAASziC,kBAErC,EAGAyiC,EAASy3G,oBAAsB,SAASz4I,EAAQ04I,GAC9C,IAAI32I,EAAM,WAAa22I,EAAY,OAInC,OAHA14I,EAAOw4I,aAAapgM,SAAQugM,IAC1B52I,GAAO,iBAAmB42I,EAAGL,UAAY,IAAMK,EAAGhnM,MAAQ,MAAM,IAE3DowD,CACT,EAIAi/B,EAAS43G,gBAAkB,SAAS37I,GAClC,MAAMS,EAAQT,EAAK/iC,UAAU,GAAGvJ,MAAM,KACtC,MAAO,CACLs9B,IAAK99C,SAASutD,EAAM,GAAI,IACxBm7I,YAAan7I,EAAM,GACnBo7I,UAAWp7I,EAAM,GACjBq7I,cAAer7I,EAAMrzD,MAAM,GAE/B,EAEA22F,EAASg4G,gBAAkB,SAAS9zF,GAClC,MAAO,YAAcA,EAAWj3D,IAAM,IACpCi3D,EAAW2zF,YAAc,KACQ,iBAAzB3zF,EAAW4zF,UACf93G,EAASi4G,qBAAqB/zF,EAAW4zF,WACzC5zF,EAAW4zF,YACd5zF,EAAW6zF,cAAgB,IAAM7zF,EAAW6zF,cAAcvuM,KAAK,KAAO,IACvE,MACJ,EAIAw2F,EAASk4G,qBAAuB,SAASJ,GACvC,GAAqC,IAAjCA,EAAUluM,QAAQ,WACpB,OAAO,KAET,MAAM8yD,EAAQo7I,EAAU5+K,UAAU,GAAGvJ,MAAM,KAC3C,MAAO,CACLwoL,UAAW,SACXC,QAAS17I,EAAM,GACf27I,SAAU37I,EAAM,GAChB47I,SAAU57I,EAAM,GAAKA,EAAM,GAAG/sC,MAAM,KAAK,QAAKrmB,EAC9CivM,UAAW77I,EAAM,GAAKA,EAAM,GAAG/sC,MAAM,KAAK,QAAKrmB,EAEnD,EAEA02F,EAASi4G,qBAAuB,SAASH,GACvC,OAAOA,EAAUK,UAAY,IACzBL,EAAUM,SACXN,EAAUO,SAAW,IAAMP,EAAUO,SAAW,KAChDP,EAAUQ,UAAYR,EAAUS,UAC7B,IAAMT,EAAUQ,SAAW,IAAMR,EAAUS,UAC3C,GACR,EAGAv4G,EAASw4G,oBAAsB,SAASj4G,EAAcjhC,GAGpD,OAFc0gC,EAAS41G,YAAYr1G,EAAejhC,EAChD,aACW54B,IAAIs5D,EAAS43G,gBAC5B,EAKA53G,EAASy4G,iBAAmB,SAASl4G,EAAcjhC,GACjD,MAAMxjC,EAAQkkE,EAAS41G,YAAYr1G,EAAejhC,EAChD,gBAAgB,GACZzD,EAAMmkC,EAAS41G,YAAYr1G,EAAejhC,EAC9C,cAAc,GAChB,OAAMxjC,GAAS+/B,EAGR,CACLskC,iBAAkBrkE,EAAM5C,UAAU,IAClCm0B,SAAUwO,EAAI3iC,UAAU,KAJjB,IAMX,EAGA8mE,EAAS04G,mBAAqB,SAAS15I,GACrC,IAAI+B,EAAM,eAAiB/B,EAAOmhC,iBAAxB,iBACSnhC,EAAO3R,SAAW,OAIrC,OAHI2R,EAAO25I,UACT53I,GAAO,kBAEFA,CACT,EAGAi/B,EAAS44G,mBAAqB,SAASr4G,GACrC,MAAMppC,EAAc,CAClBrhD,OAAQ,GACR+iM,iBAAkB,GAClBC,cAAe,GACfC,KAAM,IAGFh8I,EADQijC,EAASw1G,WAAWj1G,GACd,GAAG5wE,MAAM,KAC7BwnC,EAAY6hJ,QAAUj8I,EAAM,GAC5B,IAAK,IAAIhuD,EAAI,EAAGA,EAAIguD,EAAMrwD,OAAQqC,IAAK,CACrC,MAAMgwD,EAAKhC,EAAMhuD,GACXkqM,EAAaj5G,EAAS41G,YAC1Br1G,EAAc,YAAcxhC,EAAK,KAAK,GACxC,GAAIk6I,EAAY,CACd,MAAMjjM,EAAQgqF,EAASm2G,YAAY8C,GAC7BC,EAAQl5G,EAAS41G,YACrBr1G,EAAc,UAAYxhC,EAAK,KAQjC,OANA/oD,EAAMkuG,WAAag1F,EAAMxsM,OAASszF,EAASviC,UAAUy7I,EAAM,IAAM,CAAC,EAClEljM,EAAMghM,aAAeh3G,EAAS41G,YAC5Br1G,EAAc,aAAexhC,EAAK,KACjCr4B,IAAIs5D,EAAS82G,aAChB3/I,EAAYrhD,OAAOwC,KAAKtC,GAEhBA,EAAMjN,KAAK0rF,eACjB,IAAK,MACL,IAAK,SACHt9B,EAAY2hJ,cAAcxgM,KAAKtC,EAAMjN,KAAK0rF,eAKhD,CACF,CACAuL,EAAS41G,YAAYr1G,EAAc,aAAanpF,SAAQ6kD,IACtD9E,EAAY0hJ,iBAAiBvgM,KAAK0nF,EAAS/gC,YAAYhD,GAAM,IAE/D,MAAMk9I,EAAiBn5G,EAAS41G,YAAYr1G,EAAc,gBACvD75D,IAAIs5D,EAAS82G,aAahB,OAZA3/I,EAAYrhD,OAAOsB,SAAQpB,IACzBmjM,EAAe/hM,SAAQivD,IACHrwD,EAAMghM,aAAa/5K,MAAKm8K,GACjCA,EAAiBhtM,OAASi6D,EAAGj6D,MAClCgtM,EAAiBtyI,YAAcT,EAAGS,aAGpC9wD,EAAMghM,aAAa1+L,KAAK+tD,EAC1B,GACA,IAGGlP,CACT,EAIA6oC,EAASq5G,oBAAsB,SAASzpL,EAAM85D,GAC5C,IAAI3oB,EAAM,GAGVA,GAAO,KAAOnxC,EAAO,IACrBmxC,GAAO2oB,EAAK5zE,OAAOpJ,OAAS,EAAI,IAAM,IACtCq0D,GAAO,KAAO2oB,EAAKsvH,SAAW,qBAAuB,IACrDj4I,GAAO2oB,EAAK5zE,OAAO4wB,KAAI1wB,QACc1M,IAA/B0M,EAAMwgM,qBACDxgM,EAAMwgM,qBAERxgM,EAAM2wD,cACZn9D,KAAK,KAAO,OAEfu3D,GAAO,uBACPA,GAAO,8BAGP2oB,EAAK5zE,OAAOsB,SAAQpB,IAClB+qD,GAAOi/B,EAASu2G,YAAYvgM,GAC5B+qD,GAAOi/B,EAAS62G,UAAU7gM,GAC1B+qD,GAAOi/B,EAAS+2G,YAAY/gM,EAAM,IAEpC,IAAIsjM,EAAW,EAgBf,OAfA5vH,EAAK5zE,OAAOsB,SAAQpB,IACdA,EAAMsjM,SAAWA,IACnBA,EAAWtjM,EAAMsjM,SACnB,IAEEA,EAAW,IACbv4I,GAAO,cAAgBu4I,EAAW,QAGhC5vH,EAAKmvH,kBACPnvH,EAAKmvH,iBAAiBzhM,SAAQmiM,IAC5Bx4I,GAAOi/B,EAASy2G,YAAY8C,EAAU,IAInCx4I,CACT,EAIAi/B,EAASw5G,2BAA6B,SAASj5G,GAC7C,MAAMk5G,EAAqB,GACrBtiJ,EAAc6oC,EAAS44G,mBAAmBr4G,GAC1Cm5G,GAAuD,IAA9CviJ,EAAY2hJ,cAAclvM,QAAQ,OAC3C+vM,GAA6D,IAAjDxiJ,EAAY2hJ,cAAclvM,QAAQ,UAG9CiuD,EAAQmoC,EAAS41G,YAAYr1G,EAAc,WAC9C75D,KAAIu1B,GAAQ+jC,EAASi3G,eAAeh7I,KACpCh7C,QAAOy7C,GAA6B,UAApBA,EAAMgE,YACnBT,EAAcpI,EAAMnrD,OAAS,GAAKmrD,EAAM,GAAGl9C,KACjD,IAAIm5F,EAEJ,MAAM8lG,EAAQ55G,EAAS41G,YAAYr1G,EAAc,oBAC9C75D,KAAIu1B,GACWA,EAAK/iC,UAAU,IAAIvJ,MAAM,KAC1B+W,KAAIsuH,GAAQ7lJ,SAAS6lJ,EAAM,QAExC4kD,EAAMltM,OAAS,GAAKktM,EAAM,GAAGltM,OAAS,GAAKktM,EAAM,GAAG,KAAO35I,IAC7D6zC,EAAgB8lG,EAAM,GAAG,IAG3BziJ,EAAYrhD,OAAOsB,SAAQpB,IACzB,GAAiC,QAA7BA,EAAMjN,KAAK0rF,eAA2Bz+E,EAAMkuG,WAAW21F,IAAK,CAC9D,IAAIC,EAAW,CACbn/L,KAAMslD,EACN85I,iBAAkB5qM,SAAS6G,EAAMkuG,WAAW21F,IAAK,KAE/C55I,GAAe6zC,IACjBgmG,EAASj6H,IAAM,CAACllE,KAAMm5F,IAExB2lG,EAAmBnhM,KAAKwhM,GACpBJ,IACFI,EAAWnoM,KAAK24B,MAAM34B,KAAKC,UAAUkoM,IACrCA,EAASE,IAAM,CACbr/L,KAAMslD,EACNg6I,UAAWN,EAAY,aAAe,OAExCF,EAAmBnhM,KAAKwhM,GAE5B,KAEgC,IAA9BL,EAAmB/sM,QAAgBuzD,GACrCw5I,EAAmBnhM,KAAK,CACtBqC,KAAMslD,IAKV,IAAIl5C,EAAYi5E,EAAS41G,YAAYr1G,EAAc,MAenD,OAdIx5E,EAAUra,SAEVqa,EADsC,IAApCA,EAAU,GAAGnd,QAAQ,WACXuF,SAAS4X,EAAU,GAAGmS,UAAU,GAAI,IACL,IAAlCnS,EAAU,GAAGnd,QAAQ,SAEwB,IAA1CuF,SAAS4X,EAAU,GAAGmS,UAAU,GAAI,IAAa,IACtD,UAEK5vB,EAEdmwM,EAAmBriM,SAAQ4nD,IACzBA,EAAOojD,WAAar7F,CAAS,KAG1B0yL,CACT,EAGAz5G,EAASk6G,oBAAsB,SAAS35G,GACtC,MAAM45G,EAAiB,CAAC,EAIlBC,EAAap6G,EAAS41G,YAAYr1G,EAAc,WACnD75D,KAAIu1B,GAAQ+jC,EAASi3G,eAAeh7I,KACpCh7C,QAAOsgC,GAAyB,UAAlBA,EAAImf,YAAuB,GACxC05I,IACFD,EAAe/hG,MAAQgiG,EAAWzpM,MAClCwpM,EAAex/L,KAAOy/L,EAAWz/L,MAKnC,MAAM0/L,EAAQr6G,EAAS41G,YAAYr1G,EAAc,gBACjD45G,EAAeG,YAAcD,EAAM3tM,OAAS,EAC5CytM,EAAeI,SAA4B,IAAjBF,EAAM3tM,OAIhC,MAAM8tM,EAAMx6G,EAAS41G,YAAYr1G,EAAc,cAG/C,OAFA45G,EAAeK,IAAMA,EAAI9tM,OAAS,EAE3BytM,CACT,EAEAn6G,EAASy6G,oBAAsB,SAASN,GACtC,IAAIp5I,EAAM,GAWV,OAVIo5I,EAAeG,cACjBv5I,GAAO,oBAELo5I,EAAeK,MACjBz5I,GAAO,uBAEmBz3D,IAAxB6wM,EAAex/L,MAAsBw/L,EAAe/hG,QACtDr3C,GAAO,UAAYo5I,EAAex/L,KAChC,UAAYw/L,EAAe/hG,MAAQ,QAEhCr3C,CACT,EAKAi/B,EAAS06G,UAAY,SAASn6G,GAC5B,IAAI7jC,EACJ,MAAMi+I,EAAO36G,EAAS41G,YAAYr1G,EAAc,WAChD,GAAoB,IAAhBo6G,EAAKjuM,OAEP,OADAgwD,EAAQi+I,EAAK,GAAGzhL,UAAU,GAAGvJ,MAAM,KAC5B,CAACja,OAAQgnD,EAAM,GAAIrxC,MAAOqxC,EAAM,IAEzC,MAAMk+I,EAAQ56G,EAAS41G,YAAYr1G,EAAc,WAC9C75D,KAAIu1B,GAAQ+jC,EAASi3G,eAAeh7I,KACpCh7C,QAAO45L,GAAqC,SAAxBA,EAAUn6I,YACjC,OAAIk6I,EAAMluM,OAAS,GACjBgwD,EAAQk+I,EAAM,GAAGjqM,MAAMgf,MAAM,KACtB,CAACja,OAAQgnD,EAAM,GAAIrxC,MAAOqxC,EAAM,UAFzC,CAIF,EAKAsjC,EAAS86G,qBAAuB,SAASv6G,GACvC,MAAMxjC,EAAQijC,EAASvjC,WAAW8jC,GAC5Bw6G,EAAc/6G,EAAS41G,YAAYr1G,EAAc,uBACvD,IAAIQ,EACAg6G,EAAYruM,OAAS,IACvBq0F,EAAiB5xF,SAAS4rM,EAAY,GAAG7hL,UAAU,IAAK,KAEtDvM,MAAMo0E,KACRA,EAAiB,OAEnB,MAAMi6G,EAAWh7G,EAAS41G,YAAYr1G,EAAc,gBACpD,GAAIy6G,EAAStuM,OAAS,EACpB,MAAO,CACLuhB,KAAM9e,SAAS6rM,EAAS,GAAG9hL,UAAU,IAAK,IAC1C/K,SAAU4uC,EAAMF,IAChBkkC,kBAGJ,MAAMk6G,EAAej7G,EAAS41G,YAAYr1G,EAAc,cACxD,GAAI06G,EAAavuM,OAAS,EAAG,CAC3B,MAAMgwD,EAAQu+I,EAAa,GACxB/hL,UAAU,IACVvJ,MAAM,KACT,MAAO,CACL1B,KAAM9e,SAASutD,EAAM,GAAI,IACzBvuC,SAAUuuC,EAAM,GAChBqkC,iBAEJ,CACF,EAOAf,EAASk7G,qBAAuB,SAASz5J,EAAOilB,GAC9C,IAAIs8D,EAAS,GAiBb,OAfEA,EADqB,cAAnBvhF,EAAMtzB,SACC,CACP,KAAOszB,EAAM7xB,KAAO,MAAQ6xB,EAAMtzB,SAAW,IAAMu4C,EAAKv4C,SAAW,OACnE,uBACA,eAAiBu4C,EAAKz4C,KAAO,QAGtB,CACP,KAAOwzB,EAAM7xB,KAAO,MAAQ6xB,EAAMtzB,SAAW,IAAMu4C,EAAKz4C,KAAO,OAC/D,uBACA,aAAey4C,EAAKz4C,KAAO,IAAMy4C,EAAKv4C,SAAW,mBAGzB7kB,IAAxBo9D,EAAKq6B,gBACPiiC,EAAO1qH,KAAK,sBAAwBouD,EAAKq6B,eAAiB,QAErDiiC,EAAOx5H,KAAK,GACrB,EAMAw2F,EAASm7G,kBAAoB,WAC3B,OAAO52L,KAAKizB,SAASa,WAAWiP,OAAO,EAAG,GAC5C,EAOA04C,EAASo7G,wBAA0B,SAASC,EAAQC,EAASC,GAC3D,IAAIl0J,EACJ,MAAMj5C,OAAsB9E,IAAZgyM,EAAwBA,EAAU,EAQlD,OANEj0J,EADEg0J,GAGUr7G,EAASm7G,oBAIhB,aAFMI,GAAY,qBAGP,IAAMl0J,EAAY,IAAMj5C,EADnC,uCAKT,EAGA4xF,EAASw7G,aAAe,SAASj7G,EAAcjhC,GAE7C,MAAMd,EAAQwhC,EAASw1G,WAAWj1G,GAClC,IAAK,IAAIxxF,EAAI,EAAGA,EAAIyvD,EAAM9xD,OAAQqC,IAChC,OAAQyvD,EAAMzvD,IACZ,IAAK,aACL,IAAK,aACL,IAAK,aACL,IAAK,aACH,OAAOyvD,EAAMzvD,GAAGmqB,UAAU,GAKhC,OAAIomC,EACK0gC,EAASw7G,aAAal8I,GAExB,UACT,EAEA0gC,EAASy7G,QAAU,SAASl7G,GAG1B,OAFcP,EAASw1G,WAAWj1G,GACd,GAAG5wE,MAAM,KAChB,GAAGuJ,UAAU,EAC5B,EAEA8mE,EAAS07G,WAAa,SAASn7G,GAC7B,MAAyC,MAAlCA,EAAa5wE,MAAM,IAAK,GAAG,EACpC,EAEAqwE,EAASvjC,WAAa,SAAS8jC,GAC7B,MACM7jC,EADQsjC,EAASw1G,WAAWj1G,GACd,GAAGrnE,UAAU,GAAGvJ,MAAM,KAC1C,MAAO,CACLC,KAAM8sC,EAAM,GACZzuC,KAAM9e,SAASutD,EAAM,GAAI,IACzBvuC,SAAUuuC,EAAM,GAChBG,IAAKH,EAAMrzD,MAAM,GAAGG,KAAK,KAE7B,EAEAw2F,EAAS27G,WAAa,SAASp7G,GAC7B,MACM7jC,EADOsjC,EAAS41G,YAAYr1G,EAAc,MAAM,GACnCrnE,UAAU,GAAGvJ,MAAM,KACtC,MAAO,CACLk3B,SAAU6V,EAAM,GAChBrV,UAAWqV,EAAM,GACjBq0C,eAAgB5hG,SAASutD,EAAM,GAAI,IACnCk/I,QAASl/I,EAAM,GACfm/I,YAAan/I,EAAM,GACnB1uC,QAAS0uC,EAAM,GAEnB,EAGAsjC,EAAS87G,WAAa,SAASz3E,GAC7B,GAAoB,iBAATA,GAAqC,IAAhBA,EAAK33H,OACnC,OAAO,EAET,MAAM8xD,EAAQwhC,EAASw1G,WAAWnxE,GAClC,IAAK,IAAIt1H,EAAI,EAAGA,EAAIyvD,EAAM9xD,OAAQqC,IAChC,GAAIyvD,EAAMzvD,GAAGrC,OAAS,GAA4B,MAAvB8xD,EAAMzvD,GAAGwjC,OAAO,GACzC,OAAO,EAIX,OAAO,CACT,EAIE5xC,EAAOD,QAAUs/F,yBC5xBT,SAAUt/F,GAAW,aAEnB,IAAIq7M,OAA6B,IAAX1oB,EAAAA,EAAyBA,EAAAA,EAAyB,oBAATvyL,KAAuBA,KAAyB,oBAAXgR,OAAyBA,OAAS,CAAC,EAwCvI,MAAMirC,EAdN,WACE,IAAIi/J,EAA0BD,EAASh/J,UAEvC,QAAuC,IAA5Bi/J,EACT,IACEA,EAA0BvjM,EAAQ,mGACpC,CAAE,MAAOyc,GACP,MAAM,IAAIhrB,MAAM,8DAClB,CAGF,OAAO8xM,CACT,CAEkBC,GA4BlB,MAAMj2C,EAdN,WACE,IAAIk2C,EAA0BH,EAAS/1C,UAEvC,QAAuC,IAA5Bk2C,EACT,IACEA,EAA0BzjM,OAAAA,WAAAA,IAAAA,EAAAA,IAAAA,MAAAA,uCAAAA,MAAAA,EAAAA,KAAAA,mBAAAA,CAAAA,CAAAA,GAC5B,CAAE,MAAOyc,GACP,MAAM,IAAIhrB,MAAM,0EAClB,CAGF,OAAOgyM,CACT,CAEkBC,GAiClB,SAASC,IAEP,GAAwB,oBAAbj5K,SACT,IAGE,OAAO,IAFmB1qB,OAAAA,WAAAA,IAAAA,EAAAA,IAAAA,MAAAA,uCAAAA,MAAAA,EAAAA,KAAAA,mBAAAA,CAAAA,CAAAA,MAEK4jM,eAAe,gBAAiB,UAAW,KAC5E,CAAE,MAAOnnL,GACP,MAAM,IAAIhrB,MAAM,0EAClB,CAIF,QAA+CZ,IAA3C65B,SAAS+7J,eAAemd,gBAAgCl5K,SAAS+7J,eAAemd,gBAAkBl5K,SAASm5K,cAAgBn5K,SAASm5K,aAAe,GAAI,CACzJ,MAAMC,EArCV,WACE,MAAMC,EAAa,CAAC,yBAA0B,yBAA0B,yBAA0B,yBAA0B,qBAAsB,oBAAqB,oBAEvK,IAAK,IAAIpzK,EAAI,EAAGA,EAAIozK,EAAW9vM,OAAQ08B,IACrC,IAGE,OADY,IAAIqzK,cAAcD,EAAWpzK,GAE3C,CAAE,MAAO5wB,GAAI,CAGjB,CA0BgBkkM,GAGZ,OADAH,EAAIllJ,YAAYklJ,EAAI54G,cAAc,YAC3B44G,CACT,CAGA,OAAOp5K,SAAS+7J,eAAemd,eAAe,gBAAiB,UAAW,KAC5E,CAmBA,MAAMM,EAAa,SAAU/qK,EAAGC,GAC9B,MAAMC,GAAW,MAAJF,IAAmB,MAAJC,GAE5B,OADaD,GAAK,KAAOC,GAAK,KAAOC,GAAO,KAC9B,GAAW,MAANA,CACrB,EAcM8qK,EAAW,SAAUtqK,GACzB,GAAmB,iBAARA,EACT,MAAM,IAAIpoC,MAAM,oCAGlB,MAAM+oC,EAAM,GAEZ,IAAK,IAAIlkC,EAAI,EAAGA,EAAiB,EAAbujC,EAAI5lC,OAAYqC,GAAK,EACvCkkC,EAAIlkC,GAAK,KAA+B,IAAxBujC,EAAIY,WAAWnkC,EAAI,KAAaA,EAAI,GAGtD,OAAOkkC,CACT,EAmCM4pK,EAAU,SAAUjuI,EAAG9tD,EAAGC,EAAG6wB,EAAGM,EAAG7jB,GACvC,OAAOsuL,GAxDiBh2K,EAwDEg2K,EAAWA,EAAW77L,EAAG8tD,GAAI+tI,EAAW/qK,EAAGvjB,OAxDxC2jB,EAwD6CE,GAvDtDvL,IAAQ,GAAKqL,EAuD6CjxB,GAxDhE,IAAU4lB,EAAKqL,CAyD/B,EAEM8qK,EAAS,SAAUh8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAGM,EAAG7jB,GACzC,OAAOwuL,EAAQ97L,EAAI0wB,GAAK1wB,EAAIqoB,EAAGtoB,EAAGC,EAAG6wB,EAAGM,EAAG7jB,EAC7C,EAEM0uL,EAAS,SAAUj8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAGM,EAAG7jB,GACzC,OAAOwuL,EAAQ97L,EAAIqoB,EAAIqI,GAAKrI,EAAGtoB,EAAGC,EAAG6wB,EAAGM,EAAG7jB,EAC7C,EAEM2uL,EAAS,SAAUl8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAGM,EAAG7jB,GACzC,OAAOwuL,EAAQ97L,EAAI0wB,EAAIrI,EAAGtoB,EAAGC,EAAG6wB,EAAGM,EAAG7jB,EACxC,EAEM4uL,EAAS,SAAUn8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAGM,EAAG7jB,GACzC,OAAOwuL,EAAQprK,GAAK1wB,GAAKqoB,GAAItoB,EAAGC,EAAG6wB,EAAGM,EAAG7jB,EAC3C,EAMM6uL,EAAW,SAAUtrK,EAAGa,GAE5Bb,EAAEa,GAAO,IAAM,KAAQA,EAAM,GAC7Bb,EAA0B,IAAvBa,EAAM,KAAO,GAAK,IAAWA,EAChC,IAIIC,EAAMC,EAAMC,EAAMC,EAJlB/xB,EAAI,WACJC,GAAK,UACL0wB,GAAK,WACLrI,EAAI,UAGR,IAAK,IAAIr6B,EAAI,EAAGA,EAAI6iC,EAAEllC,OAAQqC,GAAK,GACjC2jC,EAAO5xB,EACP6xB,EAAO5xB,EACP6xB,EAAOnB,EACPoB,EAAOzJ,EACPtoB,EAAIg8L,EAAOh8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACrCq6B,EAAI0zK,EAAO1zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,IAAK,WACtC0iC,EAAIqrK,EAAOrrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,GAAI,WACrCgS,EAAI+7L,EAAO/7L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,YACtC+R,EAAIg8L,EAAOh8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACrCq6B,EAAI0zK,EAAO1zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,GAAI,YACrC0iC,EAAIqrK,EAAOrrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,IAAK,YACtCgS,EAAI+7L,EAAO/7L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,UACtC+R,EAAIg8L,EAAOh8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,EAAG,YACpCq6B,EAAI0zK,EAAO1zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,IAAK,YACtC0iC,EAAIqrK,EAAOrrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,IAAK,OACvCgS,EAAI+7L,EAAO/7L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,IAAK,YACvC+R,EAAIg8L,EAAOh8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,IAAK,EAAG,YACrCq6B,EAAI0zK,EAAO1zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,IAAK,UACvC0iC,EAAIqrK,EAAOrrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,IAAK,YACvCgS,EAAI+7L,EAAO/7L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,GAAI,YACtC+R,EAAIi8L,EAAOj8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACrCq6B,EAAI2zK,EAAO3zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,GAAI,YACrC0iC,EAAIsrK,EAAOtrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,GAAI,WACtCgS,EAAIg8L,EAAOh8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,WACtC+R,EAAIi8L,EAAOj8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACrCq6B,EAAI2zK,EAAO3zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,EAAG,UACrC0iC,EAAIsrK,EAAOtrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,IAAK,WACvCgS,EAAIg8L,EAAOh8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,WACtC+R,EAAIi8L,EAAOj8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,EAAG,WACpCq6B,EAAI2zK,EAAO3zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,GAAI,YACtC0iC,EAAIsrK,EAAOtrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,IAAK,WACtCgS,EAAIg8L,EAAOh8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,GAAI,YACrC+R,EAAIi8L,EAAOj8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,IAAK,GAAI,YACtCq6B,EAAI2zK,EAAO3zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,GAAI,UACrC0iC,EAAIsrK,EAAOtrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,GAAI,YACrCgS,EAAIg8L,EAAOh8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,IAAK,YACvC+R,EAAIk8L,EAAOl8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,QACrCq6B,EAAI4zK,EAAO5zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,IAAK,YACtC0iC,EAAIurK,EAAOvrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,GAAI,YACtCgS,EAAIi8L,EAAOj8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,IAAK,UACvC+R,EAAIk8L,EAAOl8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,YACrCq6B,EAAI4zK,EAAO5zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,GAAI,YACrC0iC,EAAIurK,EAAOvrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,IAAK,WACtCgS,EAAIi8L,EAAOj8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,IAAK,YACvC+R,EAAIk8L,EAAOl8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,IAAK,EAAG,WACrCq6B,EAAI4zK,EAAO5zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,IAAK,WACtC0iC,EAAIurK,EAAOvrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,IAAK,WACtCgS,EAAIi8L,EAAOj8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,GAAI,UACrC+R,EAAIk8L,EAAOl8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACrCq6B,EAAI4zK,EAAO5zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,IAAK,WACvC0iC,EAAIurK,EAAOvrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,GAAI,WACtCgS,EAAIi8L,EAAOj8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,WACtC+R,EAAIm8L,EAAOn8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACrCq6B,EAAI6zK,EAAO7zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,GAAI,YACrC0iC,EAAIwrK,EAAOxrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,IAAK,YACvCgS,EAAIk8L,EAAOl8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,UACtC+R,EAAIm8L,EAAOn8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,IAAK,EAAG,YACrCq6B,EAAI6zK,EAAO7zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,IAAK,YACtC0iC,EAAIwrK,EAAOxrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,IAAK,SACvCgS,EAAIk8L,EAAOl8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,YACtC+R,EAAIm8L,EAAOn8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,EAAG,YACpCq6B,EAAI6zK,EAAO7zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,IAAK,UACvC0iC,EAAIwrK,EAAOxrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,IAAK,YACtCgS,EAAIk8L,EAAOl8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,GAAI,YACtC+R,EAAIm8L,EAAOn8L,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACrCq6B,EAAI6zK,EAAO7zK,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,IAAK,YACvC0iC,EAAIwrK,EAAOxrK,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,GAAI,WACrCgS,EAAIk8L,EAAOl8L,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,WACtC+R,EAAI67L,EAAW77L,EAAG4xB,GAClB3xB,EAAI47L,EAAW57L,EAAG4xB,GAClBlB,EAAIkrK,EAAWlrK,EAAGmB,GAClBxJ,EAAIuzK,EAAWvzK,EAAGyJ,GAGpB,MAAO,CAAC/xB,EAAGC,EAAG0wB,EAAGrI,EACnB,EAQM+zK,EAAM,CACVC,UAAW,SAAUlrK,GACnB,OAvIa,SAAUC,GACzB,MAAMkrK,EAAU,mBAChB,IAAI/qK,EAAM,GAEV,IAAK,IAAIvjC,EAAI,EAAGA,EAAsB,EAAlBojC,EAASzlC,OAAYqC,IACvCujC,GAAO+qK,EAAQ9qK,OAAOJ,EAASpjC,GAAK,IAAMA,EAAI,EAAI,EAAI,EAAI,IAAOsuM,EAAQ9qK,OAAOJ,EAASpjC,GAAK,IAAMA,EAAI,EAAI,EAAI,IAGlH,OAAOujC,CACT,CA8HWgrK,CAASJ,EAASN,EAAS1qK,GAAe,EAAXA,EAAExlC,QAC1C,EACA+jC,KAAM,SAAUyB,GACd,OAxJa,SAAUe,GACzB,IAAIX,EAAM,GAEV,IAAK,IAAIvjC,EAAI,EAAGA,EAAiB,GAAbkkC,EAAIvmC,OAAaqC,GAAK,EACxCujC,GAAOoiB,OAAOi5G,aAAa16H,EAAIlkC,GAAK,KAAOA,EAAI,GAAK,KAGtD,OAAOujC,CACT,CAgJWirK,CAASL,EAASN,EAAS1qK,GAAe,EAAXA,EAAExlC,QAC1C,GAsBF,MAAM8wM,EAaJjzM,YAAYxB,EAAM00M,EAAe1/I,GAI/B/0D,KAAK00M,SAAW30M,EAKhBC,KAAKy0M,cAAgBA,EAarBz0M,KAAK+0D,SAAWA,CAClB,CAqBA5qD,OAEE,OAAO,CACT,CASAwqM,QAAQ1pK,GACNjrC,KAAKslI,YAAcr6F,CACrB,CAiBA2pK,YAAY3pK,EAAY4pK,GAEtB,MAAM,IAAI3zM,MAAM,2CAClB,CAaA4zM,gBAAgB7pK,GACd,IAAKjrC,KAAKy0M,cACR,MAAM,IAAIvzM,MAAM,mEAGlB,OAAOlB,KAAK40M,YAAY3pK,EAC1B,CAMAukB,YACExvD,KAAKslI,YAAc,IACrB,CAMAz6E,YACE7qD,KAAKslI,YAAc,IACrB,EAqDF,MAAMv6C,EACM,SAAUzhD,GAClB,IAAIvjC,EAAG0iC,EACHyqH,EAAM,GACNzpH,EAAMH,EAAI5lC,OAEd,IAAKqC,EAAI,EAAGA,EAAI0jC,EAAK1jC,KACnB0iC,EAAIa,EAAIY,WAAWnkC,KAEV,GAAU0iC,GAAK,IACtByqH,GAAO5pH,EAAIC,OAAOxjC,GACT0iC,EAAI,MACbyqH,GAAOxnG,OAAOi5G,aAAa,IAAOl8H,GAAK,GAAK,IAC5CyqH,GAAOxnG,OAAOi5G,aAAa,IAAOl8H,GAAK,EAAI,IAC3CyqH,GAAOxnG,OAAOi5G,aAAa,IAAOl8H,GAAK,EAAI,MAE3CyqH,GAAOxnG,OAAOi5G,aAAa,IAAOl8H,GAAK,EAAI,IAC3CyqH,GAAOxnG,OAAOi5G,aAAa,IAAOl8H,GAAK,EAAI,KAI/C,OAAOyqH,CACT,EAtBInoE,EAuBQ,SAAUgqH,GAoBpBA,EAAUA,GAAW,CAAC,EAEtB,IAAK,MAAMC,KAAcD,EACvB,GAAI1zM,OAAOD,UAAUye,eAAe7M,KAAK+hM,EAASC,GAAa,CAC7D,IAAIC,EAAU,GACV/gK,EAAS,GACT+gH,EAAO,GACX,MAAMigD,EAAYH,EAAQC,GACpB7qH,EAA6B,iBAAd+qH,EACfC,EAAchyB,OAAOiyB,SAASjrH,EAAQ+qH,EAAUvtM,MAAQutM,IAE1D/qH,IACF8qH,EAAUC,EAAUD,QAAU,YAAcC,EAAUD,QAAU,GAChE/gK,EAASghK,EAAUhhK,OAAS,WAAaghK,EAAUhhK,OAAS,GAC5D+gH,EAAOigD,EAAUjgD,KAAO,SAAWigD,EAAUjgD,KAAO,IAGtD96H,SAASk7K,OAASL,EAAa,IAAMG,EAAcF,EAAU/gK,EAAS+gH,CACxE,CAEJ,EA+FF,SAASjrH,EAAUpB,EAAGa,GAEpBb,EAAEa,GAAO,IAAM,KAAQ,GAAKA,EAAM,GAClCb,EAAyB,IAAtBa,EAAM,IAAM,GAAK,IAAWA,EAC/B,IAMI1jC,EAAGsjC,EAAGhkB,EAAGqkB,EAAMC,EAAMC,EAAMC,EAAMC,EANjCC,EAAI,IAAI5pC,MAAM,IACd2X,EAAI,WACJC,GAAK,UACL0wB,GAAK,WACLrI,EAAI,UACJ5wB,GAAK,WAGT,IAAKzJ,EAAI,EAAGA,EAAI6iC,EAAEllC,OAAQqC,GAAK,GAAI,CAOjC,IANA2jC,EAAO5xB,EACP6xB,EAAO5xB,EACP6xB,EAAOnB,EACPoB,EAAOzJ,EACP0J,EAAOt6B,EAEF65B,EAAI,EAAGA,EAAI,GAAIA,IAEhBU,EAAEV,GADAA,EAAI,GACCT,EAAE7iC,EAAIsjC,GAENN,EAAIgB,EAAEV,EAAI,GAAKU,EAAEV,EAAI,GAAKU,EAAEV,EAAI,IAAMU,EAAEV,EAAI,IAAK,GAG1DhkB,EAAIsjB,EAASA,EAASI,EAAIjxB,EAAG,GAAI0wB,EAAQa,EAAGtxB,EAAG0wB,EAAGrI,IAAKuI,EAASA,EAASn5B,EAAGu6B,EAAEV,IAAKX,EAAQW,KAC3F75B,EAAI4wB,EACJA,EAAIqI,EACJA,EAAIM,EAAIhxB,EAAG,IACXA,EAAID,EACJA,EAAIuN,EAGNvN,EAAI6wB,EAAS7wB,EAAG4xB,GAChB3xB,EAAI4wB,EAAS5wB,EAAG4xB,GAChBlB,EAAIE,EAASF,EAAGmB,GAChBxJ,EAAIuI,EAASvI,EAAGyJ,GAChBr6B,EAAIm5B,EAASn5B,EAAGs6B,EAClB,CAEA,MAAO,CAAChyB,EAAGC,EAAG0wB,EAAGrI,EAAG5wB,EACtB,CAOA,SAASg5B,EAAQnjB,EAAGtN,EAAG0wB,EAAGrI,GACxB,OAAI/a,EAAI,GACCtN,EAAI0wB,GAAK1wB,EAAIqoB,EAGlB/a,EAAI,GACCtN,EAAI0wB,EAAIrI,EAGb/a,EAAI,GACCtN,EAAI0wB,EAAI1wB,EAAIqoB,EAAIqI,EAAIrI,EAGtBroB,EAAI0wB,EAAIrI,CACjB,CAMA,SAASsI,EAAQrjB,GACf,OAAOA,EAAI,GAAK,WAAaA,EAAI,GAAK,WAAaA,EAAI,IAAM,YAAc,SAC7E,CAMA,SAASiwL,EAAe5tM,EAAK0J,GAC3B,IAAImkM,EAAOprK,EAASziC,GAEhB6tM,EAAK7xM,OAAS,KAChB6xM,EAAOvrK,EAAUurK,EAAmB,EAAb7tM,EAAIhE,SAM7B,IAHA,IAAI8xM,EAAO,IAAIr1M,MAAM,IACjBs1M,EAAO,IAAIt1M,MAAM,IAEZ4F,EAAI,EAAGA,EAAI,GAAIA,IACtByvM,EAAKzvM,GAAe,UAAVwvM,EAAKxvM,GACf0vM,EAAK1vM,GAAe,WAAVwvM,EAAKxvM,GAGjB,IAAI0hC,EAAOuC,EAAUwrK,EAAK76I,OAAOxwB,EAAS/4B,IAAQ,IAAoB,EAAdA,EAAK1N,QAC7D,OAAOsmC,EAAUyrK,EAAK96I,OAAOlzB,GAAO,IACtC,CAOA,SAASkB,EAASC,EAAGC,GACnB,IAAIC,GAAW,MAAJF,IAAmB,MAAJC,GAE1B,OADWD,GAAK,KAAOC,GAAK,KAAOC,GAAO,KAC5B,GAAW,MAANA,CACrB,CAMA,SAASC,EAAIpL,EAAKqL,GAChB,OAAOrL,GAAOqL,EAAMrL,IAAQ,GAAKqL,CACnC,CAOA,SAASmB,EAASb,GAIhB,IAHA,IAAIW,EAAM,GAGDlkC,EAAI,EAAGA,EAAiB,EAAbujC,EAAI5lC,OAAYqC,GAAK,EACvCkkC,EAAIlkC,GAAK,KAHA,IAGOujC,EAAIY,WAAWnkC,EAAI,KAAc,GAAKA,EAAI,GAG5D,OAAOkkC,CACT,CAMA,SAAST,EAASL,GAKhB,IAJA,IAEIC,EAASC,EADTC,EAAM,GAGDvjC,EAAI,EAAGA,EAAsB,EAAlBojC,EAASzlC,OAAYqC,GAAK,EAG5C,IAFAqjC,GAAWD,EAASpjC,GAAK,IAAM,GAAK,EAAIA,EAAI,GAAK,MAAS,IAAMojC,EAASpjC,EAAI,GAAK,IAAM,GAAK,GAAKA,EAAI,GAAK,GAAK,MAAS,EAAIojC,EAASpjC,EAAI,GAAK,IAAM,GAAK,GAAKA,EAAI,GAAK,GAAK,IAExKsjC,EAAI,EAAGA,EAAI,EAAGA,IACT,EAAJtjC,EAAY,EAAJsjC,EAA0B,GAAlBF,EAASzlC,OAC3B4lC,GAAO,IAEPA,GAXI,mEAWOC,OAAOH,GAAW,GAAK,EAAIC,GAAK,IAKjD,OAAOC,CACT,CAMA,SAASosK,EAASzrK,GAIhB,IAHA,IAAIX,EAAM,GAGDvjC,EAAI,EAAGA,EAAiB,GAAbkkC,EAAIvmC,OAAaqC,GAAK,EACxCujC,GAAOoiB,OAAOi5G,aAAa16H,EAAIlkC,GAAK,KAAO,GAAKA,EAAI,GAH3C,KAMX,OAAOujC,CACT,CAOA,MAAML,EAAO,CACX0sK,cAAe,SAAUjuM,EAAK0J,GAC5B,OAAOo4B,EAAS8rK,EAAe5tM,EAAK0J,GACtC,EACAwkM,SAAU,SAAU1sK,GAClB,OAAOM,EAASQ,EAAUG,EAASjB,GAAe,EAAXA,EAAExlC,QAC3C,EACAgyM,SAAUA,EACVJ,eAAgBA,EAChBO,cAAe,SAAUnuM,EAAK0J,GAC5B,OAAOskM,EAASJ,EAAe5tM,EAAK0J,GACtC,EACA0kM,SAAU,SAAU5sK,GAClB,OAAOwsK,EAAS1rK,EAAUG,EAASjB,GAAe,EAAXA,EAAExlC,QAC3C,GA8NF,MAAMqyM,EAAW,mEAEjB,SAASC,EAAWC,GAClB,MAAM/4K,EAAQ64K,EAASn1M,QAAQq1M,GAE/B,OAAO/4K,EAAQ,OAAI58B,EAAY48B,CACjC,CA2DA,MAAMg5K,EAAS,mEAEf,SAASC,EAAWj5K,GAClB,GAAIA,GAAS,GAAKA,EAAQ,GACxB,OAAOg5K,EAAOh5K,EAKlB,CAQA,IAAIk5K,EAAO,CACT7qD,KA7KF,SAAgBn6I,GACd,GAAyB,IAArB3N,UAAUC,OACZ,MAAM,IAAIglE,UAAU,4CAwBtB,IAjBAt3D,GAFAA,EAAQ,GAAEA,KAEEg+B,QAAQ,eAAgB,KAG3B1rC,OAAS,GAAM,IACtB0N,EAAOA,EAAKg+B,QAAQ,OAAQ,KAa1Bh+B,EAAK1N,OAAS,GAAM,GAAK,iBAAiByG,KAAKiH,GACjD,OAAO,KAIT,IAAI4oH,EAAS,GAKT/zD,EAAS,EACTowI,EAAkB,EAKtB,IAAK,IAAItwM,EAAI,EAAGA,EAAIqL,EAAK1N,OAAQqC,IAS/BkgE,IAAW,EACXA,GAAU+vI,EAAW5kM,EAAKrL,IAC1BswM,GAAmB,EAIK,KAApBA,IACFr8E,GAAUtuE,OAAOi5G,cAAuB,SAAT1+F,IAAsB,IACrD+zD,GAAUtuE,OAAOi5G,cAAuB,MAAT1+F,IAAoB,GACnD+zD,GAAUtuE,OAAOi5G,aAAsB,IAAT1+F,GAC9BA,EAASowI,EAAkB,GAqB/B,OAVwB,KAApBA,GACFpwI,IAAW,EACX+zD,GAAUtuE,OAAOi5G,aAAa1+F,IACD,KAApBowI,IACTpwI,IAAW,EACX+zD,GAAUtuE,OAAOi5G,cAAuB,MAAT1+F,IAAoB,GACnD+zD,GAAUtuE,OAAOi5G,aAAsB,IAAT1+F,IAIzB+zD,CACT,EA2FEs8E,KArEF,SAAgBptK,GACd,GAAyB,IAArBzlC,UAAUC,OACZ,MAAM,IAAIglE,UAAU,4CAGtB,IAAI3iE,EAKJ,IAHAmjC,EAAK,GAAEA,IAGFnjC,EAAI,EAAGA,EAAImjC,EAAExlC,OAAQqC,IACxB,GAAImjC,EAAEgB,WAAWnkC,GAAK,IACpB,OAAO,KAIX,IAAImtJ,EAAM,GAEV,IAAKntJ,EAAI,EAAGA,EAAImjC,EAAExlC,OAAQqC,GAAK,EAAG,CAChC,MAAMwwM,EAAc,MAACj2M,OAAWA,OAAWA,OAAWA,GACtDi2M,EAAY,GAAKrtK,EAAEgB,WAAWnkC,IAAM,EACpCwwM,EAAY,IAAwB,EAAlBrtK,EAAEgB,WAAWnkC,KAAc,EAEzCmjC,EAAExlC,OAASqC,EAAI,IACjBwwM,EAAY,IAAMrtK,EAAEgB,WAAWnkC,EAAI,IAAM,EACzCwwM,EAAY,IAA4B,GAAtBrtK,EAAEgB,WAAWnkC,EAAI,KAAc,GAG/CmjC,EAAExlC,OAASqC,EAAI,IACjBwwM,EAAY,IAAMrtK,EAAEgB,WAAWnkC,EAAI,IAAM,EACzCwwM,EAAY,GAA2B,GAAtBrtK,EAAEgB,WAAWnkC,EAAI,IAGpC,IAAK,IAAIsjC,EAAI,EAAGA,EAAIktK,EAAY7yM,OAAQ2lC,SACR,IAAnBktK,EAAYltK,GACrB6pH,GAAO,IAEPA,GAAOijD,EAAWI,EAAYltK,GAGpC,CAEA,OAAO6pH,CACT,GA+CA,SAASrlG,EAAO9tD,EAAMi3C,GACpB,OAAO,IAAIzoB,EAAQioL,QAAQz2M,EAAMi3C,EACnC,CAWA,SAASkB,EAAKlB,GACZ,OAAO,IAAIzoB,EAAQioL,QAAQ,UAAWx/J,EACxC,CAWA,SAAS1F,EAAI0F,GACX,OAAO,IAAIzoB,EAAQioL,QAAQ,KAAMx/J,EACnC,CAWA,SAASE,EAAMF,GACb,OAAO,IAAIzoB,EAAQioL,QAAQ,WAAYx/J,EACzC,CASA,MAAMzoB,EAAU,CAEdkoL,QAAS,QAqBTC,GAAI,CACFC,SAAU,sCACVC,KAAM,iBACNC,OAAQ,gBACRC,KAAM,iBACNC,OAAQ,mBACRC,QAAS,oBACTC,WAAY,wCACZC,YAAa,yCACbC,IAAK,iCACLC,KAAM,mCACN/3C,OAAQ,mCACRg4C,QAAS,sCACTC,KAAM,mCACNC,QAAS,sCACTd,QAAS,oBACTe,QAAS,sCACTC,SAAU,sCACVC,MAAO,gCASTA,MAAO,CACL1zJ,KAAM,CAAC,IAAK,aAAc,KAAM,OAAQ,KAAM,MAAO,KAAM,KAAM,IAAK,OAAQ,SAAU,KAAM,QAC9F9gD,WAAY,CACV,EAAK,CAAC,QACN,WAAc,CAAC,SACf,GAAM,GACN,KAAQ,CAAC,SACT,GAAM,GACN,IAAO,CAAC,MAAO,MAAO,QAAS,SAAU,SACzC,GAAM,CAAC,SACP,GAAM,CAAC,SACP,EAAK,CAAC,SACN,KAAQ,CAAC,SACT,OAAU,GACV,GAAM,CAAC,SACP,KAAQ,IAEVslL,IAAK,CAAC,mBAAoB,QAAS,cAAe,YAAa,aAAc,cAAe,cAAe,eAAgB,aAAc,mBASzImvB,SAAS1zJ,GACP,IAAK,IAAIl+C,EAAI,EAAGA,EAAIwoB,EAAQmpL,MAAM1zJ,KAAKtgD,OAAQqC,IAC7C,GAAIk+C,IAAQ11B,EAAQmpL,MAAM1zJ,KAAKj+C,GAC7B,OAAO,EAIX,OAAO,CACT,EASA6xM,eAAe3zJ,EAAKyT,GAClB,QAA6C,IAAlCnpC,EAAQmpL,MAAMx0M,WAAW+gD,IAAwB11B,EAAQmpL,MAAMx0M,WAAW+gD,GAAKvgD,OAAS,EACjG,IAAK,IAAIqC,EAAI,EAAGA,EAAIwoB,EAAQmpL,MAAMx0M,WAAW+gD,GAAKvgD,OAAQqC,IACxD,GAAI2xD,IAAcnpC,EAAQmpL,MAAMx0M,WAAW+gD,GAAKl+C,GAC9C,OAAO,EAKb,OAAO,CACT,EAEA8xM,SAASv3E,GACP,IAAK,IAAIv6H,EAAI,EAAGA,EAAIwoB,EAAQmpL,MAAMlvB,IAAI9kL,OAAQqC,IAC5C,GAAIu6H,IAAU/xG,EAAQmpL,MAAMlvB,IAAIziL,GAC9B,OAAO,EAIX,OAAO,CACT,GAoBFysC,OAAQ,CACNwsH,MAAO,EACP/3E,WAAY,EACZ6wH,SAAU,EACVC,eAAgB,EAChBC,SAAU,EACVhxJ,UAAW,EACXixJ,aAAc,EACdC,cAAe,EACfC,SAAU,EACVC,SAAU,EACVC,YAAa,GACbC,aAAc,GACdC,WAAY,IAEdC,eAAgB,CACdC,WAAY,aACZC,SAAU,WACVC,iBAAkB,6BAClBC,aAAc,eACdC,eAAgB,WAYlBC,SAAU,CACRzrC,MAAO,EACPC,KAAM,EACNE,KAAM,EACNxO,MAAO,EACP+5C,MAAO,GAUTC,YAAa,CACXC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,SAAU,IAiBZ95M,QAAS,IACT+5M,kBAAmB,GAcnBC,aAAav5M,EAAM4H,GACjB4mB,EAAQmoL,GAAG32M,GAAQ4H,CACrB,EAgBA4xM,aAAa9iK,EAAM+iK,EAAUn5I,GAC3B,IAAK,IAAIt6D,EAAI,EAAGA,EAAI0wC,EAAK8pI,WAAW78K,OAAQqC,IAAK,CAC/C,MAAM0zM,EAAYhjK,EAAK8pI,WAAWx6K,GAE9B0zM,EAAUl7B,WAAahwJ,EAAQyqL,YAAYC,QAAYO,IAAYx5M,KAAK05M,WAAWD,EAAWD,IAChGn5I,EAAKo5I,EAET,CACF,EAeAC,WAAUA,CAAC7uK,EAAI9qC,IACN8qC,EAAG5a,UAAYlwB,EAOxB45M,cAAe,KAQfC,aAAYA,KACLrrL,EAAQorL,gBACXprL,EAAQorL,cAAgBvG,KAGnB7kL,EAAQorL,eAqBjBt2J,WAAWtjD,GACT,IAAKA,EACH,OAAO,KAGT,MAAMgwB,EAAOxB,EAAQqrL,eAAej/G,cAAc56F,GAGlD,IAAK,IAAI+X,EAAI,EAAGA,EAAIrU,UAAUC,OAAQoU,IAAK,CACzC,MAAMq8I,EAAM1wJ,UAAUqU,GAEtB,GAAKq8I,EAIL,GAAmB,iBAARA,GAAmC,iBAARA,EACpCpkI,EAAKs+B,YAAY9/B,EAAQsrL,YAAY1lD,SAChC,GAAmB,iBAARA,GAAwC,mBAAbA,EAAI1vH,KAC/C,IAAK,IAAI1+B,EAAI,EAAGA,EAAIouJ,EAAIzwJ,OAAQqC,IAAK,CACnC,MAAM26C,EAAOyzG,EAAIpuJ,GAEG,iBAAT26C,GAA0C,mBAAdA,EAAKjc,WAAmCnkC,IAAZogD,EAAK,IAAgC,OAAZA,EAAK,IAC/F3wB,EAAK6tC,aAAald,EAAK,GAAIA,EAAK,GAEpC,MACK,GAAmB,iBAARyzG,EAChB,IAAK,MAAMt5G,KAAKs5G,EACV9yJ,OAAOD,UAAUye,eAAe7M,KAAKmhJ,EAAKt5G,SAAiBv6C,IAAX6zJ,EAAIt5G,IAA+B,OAAXs5G,EAAIt5G,IAC9E9qB,EAAK6tC,aAAa/iB,EAAGs5G,EAAIt5G,GAIjC,CAEA,OAAO9qB,CACT,EAWA+pL,UAAUz4J,IAIRA,GADAA,GADAA,GADAA,EAAOA,EAAKjS,QAAQ,MAAO,UACfA,QAAQ,KAAM,SACdA,QAAQ,KAAM,SACdA,QAAQ,KAAM,WACdA,QAAQ,KAAM,UAa5B2qK,YAAY14J,IAIVA,GADAA,GADAA,GADAA,EAAOA,EAAKjS,QAAQ,UAAW,MACnBA,QAAQ,QAAS,MACjBA,QAAQ,QAAS,MACjBA,QAAQ,UAAW,MACnBA,QAAQ,UAAW,KAejCyqK,YAAYx4J,GACH9yB,EAAQqrL,eAAe/vB,eAAexoI,GAY/C24J,YAAYvrB,GACV,IAAI1+J,EAWJ,OATIitI,EAEFjtI,GADe,IAAIitI,GACLC,gBAAgBwxB,EAAM,aAEpC1+J,EAAO,IAAI0jL,cAAc,oBACzB1jL,EAAKjW,MAAQ,QACbiW,EAAKkqL,QAAQxrB,IAGR1+J,CACT,EAWAwzJ,QAAQ9sI,GACN,IAAKA,EACH,OAAO,KAGT,IAAInN,EAAM,GAEqB,IAA3BmN,EAAK8pI,WAAW78K,QAAgB+yC,EAAK8nI,WAAahwJ,EAAQyqL,YAAYE,OACxE5vK,GAAOmN,EAAKgtI,WAGd,IAAK,IAAI19K,EAAI,EAAGA,EAAI0wC,EAAK8pI,WAAW78K,OAAQqC,IACtC0wC,EAAK8pI,WAAWx6K,GAAGw4K,WAAahwJ,EAAQyqL,YAAYE,OACtD5vK,GAAOmN,EAAK8pI,WAAWx6K,GAAG09K,WAI9B,OAAOl1J,EAAQurL,UAAUxwK,EAC3B,EAcA4wK,YAAYzjK,GACV,IAAI5L,EAEJ,GAAI4L,EAAK8nI,WAAahwJ,EAAQyqL,YAAYC,OAAQ,CAChDpuK,EAAKtc,EAAQ80B,WAAW5M,EAAKxmB,SAE7B,IAAK,IAAIlqB,EAAI,EAAGA,EAAI0wC,EAAKvzC,WAAWQ,OAAQqC,IAC1C8kC,EAAG+yB,aAAannB,EAAKvzC,WAAW6C,GAAG49C,SAAUlN,EAAKvzC,WAAW6C,GAAG4B,OAGlE,IAAK,IAAI5B,EAAI,EAAGA,EAAI0wC,EAAK8pI,WAAW78K,OAAQqC,IAC1C8kC,EAAGwjB,YAAY9/B,EAAQ2rL,YAAYzjK,EAAK8pI,WAAWx6K,IAEvD,MAAW0wC,EAAK8nI,WAAahwJ,EAAQyqL,YAAYE,OAC/CruK,EAAKtc,EAAQqrL,eAAe/vB,eAAepzI,EAAKgtI,YAGlD,OAAO54I,CACT,EAcAsvK,WAAW1jK,GACT,IAAI5L,EAEJ,GAAI4L,EAAK8nI,WAAahwJ,EAAQyqL,YAAYC,OAAQ,CAChD,MAAMh1J,EAAMxN,EAAKkN,SAASqE,cAE1B,GAAIz5B,EAAQmpL,MAAMC,SAAS1zJ,GACzB,IACEpZ,EAAKtc,EAAQ80B,WAAWY,GAExB,IAAK,IAAIl+C,EAAI,EAAGA,EAAIwoB,EAAQmpL,MAAMx0M,WAAW+gD,GAAKvgD,OAAQqC,IAAK,CAC7D,MAAM2xD,EAAYnpC,EAAQmpL,MAAMx0M,WAAW+gD,GAAKl+C,GAChD,IAAI4B,EAAQ8uC,EAAK3L,aAAa4sB,GAE9B,GAAI,MAAO/vD,GAAqD,KAAVA,IAA0B,IAAVA,GAA6B,IAAVA,EASzF,GALkB,UAAd+vD,GAA0C,iBAAV/vD,QAA+C,IAAlBA,EAAMsoL,UACrEtoL,EAAQA,EAAMsoL,SAIE,UAAdv4H,EAAuB,CACzB,MAAM8wH,EAAM,GACN4xB,EAAWzyM,EAAMgf,MAAM,KAE7B,IAAK,IAAI0iB,EAAI,EAAGA,EAAI+wK,EAAS12M,OAAQ2lC,IAAK,CACxC,MAAMqX,EAAO05J,EAAS/wK,GAAG1iB,MAAM,KACzB0zL,EAAU35J,EAAK,GAAGtR,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAAI4Y,cAEhE,GAAIz5B,EAAQmpL,MAAMG,SAASwC,GAAU,CACnC,MAAMC,EAAW55J,EAAK,GAAGtR,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAC7Do5I,EAAIl5K,KAAK+qM,EAAU,KAAOC,EAC5B,CACF,CAEI9xB,EAAI9kL,OAAS,IACfiE,EAAQ6gL,EAAIhoL,KAAK,MACjBqqC,EAAG+yB,aAAalG,EAAW/vD,GAE/B,MACEkjC,EAAG+yB,aAAalG,EAAW/vD,EAE/B,CAEA,IAAK,IAAI5B,EAAI,EAAGA,EAAI0wC,EAAK8pI,WAAW78K,OAAQqC,IAC1C8kC,EAAGwjB,YAAY9/B,EAAQ4rL,WAAW1jK,EAAK8pI,WAAWx6K,IAEtD,CAAE,MAAOyJ,GAEPq7B,EAAKtc,EAAQsrL,YAAY,GAC3B,KACK,CACLhvK,EAAKtc,EAAQqrL,eAAehxB,yBAE5B,IAAK,IAAI7iL,EAAI,EAAGA,EAAI0wC,EAAK8pI,WAAW78K,OAAQqC,IAC1C8kC,EAAGwjB,YAAY9/B,EAAQ4rL,WAAW1jK,EAAK8pI,WAAWx6K,IAEtD,CACF,MAAO,GAAI0wC,EAAK8nI,WAAahwJ,EAAQyqL,YAAYI,SAAU,CACzDvuK,EAAKtc,EAAQqrL,eAAehxB,yBAE5B,IAAK,IAAI7iL,EAAI,EAAGA,EAAI0wC,EAAK8pI,WAAW78K,OAAQqC,IAC1C8kC,EAAGwjB,YAAY9/B,EAAQ4rL,WAAW1jK,EAAK8pI,WAAWx6K,IAEtD,MAAW0wC,EAAK8nI,WAAahwJ,EAAQyqL,YAAYE,OAC/CruK,EAAKtc,EAAQsrL,YAAYpjK,EAAKgtI,YAGhC,OAAO54I,CACT,EAWA0vK,WAAWxqL,GACW,iBAATA,EACFA,EAGFA,EAAKqf,QAAQ,aAAc,IAAIA,QAAQ,MAAO,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAYjQorK,aAAazqL,GACS,iBAATA,EACFA,EAGFA,EAAKqf,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,MAYrOqrK,eAAehrL,GACTA,EAAI7uB,QAAQ,KAAO,EACd,KAGF6uB,EAAI9I,MAAM,KAAK,GAYxB+zL,iBAAiBjrL,GACf,MAAMkrL,EAAOpsL,EAAQqsL,kBAAkBnrL,GAEvC,GAAIkrL,EAAK/5M,QAAQ,KAAO,EACtB,OAAO+5M,EACF,CACL,MAAMjnJ,EAAQinJ,EAAKh0L,MAAM,KAEzB,OADA+sC,EAAMnkD,OAAO,EAAG,GACTmkD,EAAMlzD,KAAK,IACpB,CACF,EAWAq6M,mBAAmBprL,GACjB,IAAKA,EACH,OAAO,KAGT,MAAMyZ,EAAIzZ,EAAI9I,MAAM,KAEpB,OAAIuiB,EAAExlC,OAAS,EACN,MAGTwlC,EAAE35B,OAAO,EAAG,GACL25B,EAAE1oC,KAAK,KAChB,EAWAo6M,kBAAkBnrL,GACTA,EAAMA,EAAI9I,MAAM,KAAK,GAAK,KAMnC86B,aAAajyC,QACY,IAAZA,EAAErO,OACXotB,EAAQusL,MAAMtrM,EAAErO,OAGdqO,EAAEurM,UACJxsL,EAAQusL,MAAM,UAAY96M,KAAKqO,QAAU,IAAMmB,EAAEurM,UAAY,IAAMvrM,EAAEyjD,KAAO,MAAQzjD,EAAEzP,KAAO,KAAOyP,EAAEjP,SAC7FiP,EAAE4wH,SACX7xG,EAAQusL,MAAM,UAAY96M,KAAKqO,QAAU,IAAMmB,EAAE4wH,SAAW,IAAM5wH,EAAEwrM,WAAa,MAAQxrM,EAAEzP,KAAO,KAAOyP,EAAEjP,SAE3GguB,EAAQusL,MAAM,UAAYtrM,EAAEjP,QAEhC,EA+BA0P,IAAIqkB,EAAOvkB,GAEP,IAAIkrM,EADF3mL,IAAUt0B,KAAK84M,SAASC,QAGD,QAAxBkC,EAAW/xM,eAAkC,IAAb+xM,GAA+BA,EAASr7M,MAAMmQ,GAEnF,EAQAU,MAAMV,GACJ/P,KAAKiQ,IAAIjQ,KAAK84M,SAASzrC,MAAOt9J,EAChC,EAQApG,KAAKoG,GACH/P,KAAKiQ,IAAIjQ,KAAK84M,SAASxrC,KAAMv9J,EAC/B,EAQA5G,KAAK4G,GACH/P,KAAKiQ,IAAIjQ,KAAK84M,SAAStrC,KAAMz9J,EAC/B,EAQAnQ,MAAMmQ,GACJ/P,KAAKiQ,IAAIjQ,KAAK84M,SAAS95C,MAAOjvJ,EAChC,EAQA+qM,MAAM/qM,GACJ/P,KAAKiQ,IAAIjQ,KAAK84M,SAASC,MAAOhpM,EAChC,EAWArH,UAAU+tC,GACR,IAAKA,EACH,OAAO,KAGgB,mBAAdA,EAAKW,OACdX,EAAOA,EAAKW,QAGd,MAAM+4C,EAAQ,IAAIhwF,MAAMs2C,EAAKvzC,WAAWQ,QAAQyE,QAAQu1B,KAAI33B,GAAK0wC,EAAKvzC,WAAW6C,GAAG49C,WACpFwsC,EAAM1rD,OACN,IAAIzkB,EAASmwE,EAAMt4E,QAAO,CAACC,EAAGrP,IAAO,GAAEqP,KAAKrP,MAAM8lB,EAAQurL,UAAUrjK,EAAKvzC,WAAWg4M,aAAazyM,GAAGd,WAAY,IAAG8uC,EAAKkN,YAExH,GAAIlN,EAAK8pI,WAAW78K,OAAS,EAAG,CAC9Bsc,GAAU,IAEV,IAAK,IAAIja,EAAI,EAAGA,EAAI0wC,EAAK8pI,WAAW78K,OAAQqC,IAAK,CAC/C,MAAMw9C,EAAQ9M,EAAK8pI,WAAWx6K,GAE9B,OAAQw9C,EAAMg7H,UACZ,KAAKhwJ,EAAQyqL,YAAYC,OAEvBj5L,GAAUuO,EAAQ7lB,UAAU66C,GAC5B,MAEF,KAAKh1B,EAAQyqL,YAAYE,KAEvBl5L,GAAUuO,EAAQurL,UAAUv2J,EAAMkgI,WAClC,MAEF,KAAKl1J,EAAQyqL,YAAYG,MAEvBn5L,GAAU,YAAcujC,EAAMkgI,UAAY,MAEhD,CAEAzjK,GAAU,KAAOy2B,EAAKkN,SAAW,GACnC,MACE3jC,GAAU,KAGZ,OAAOA,CACT,EAMAm7L,WAAY,EAMZC,mBAAoB,CAAC,EASrB7nK,oBAAoBxzC,EAAMs7M,GACxB9sL,EAAQ6sL,mBAAmBr7M,GAAQs7M,CACrC,EA8CF9sL,QAAkB,MAChBhtB,YAAYxB,EAAMi3C,GAEH,aAATj3C,GAAgC,YAATA,GAA+B,OAATA,IAC3Ci3C,IAAUA,EAAMxK,MAClBwK,EAAMxK,MAAQje,EAAQmoL,GAAGG,OACf7/J,IACVA,EAAQ,CACNxK,MAAOje,EAAQmoL,GAAGG,UAMxB72M,KAAKm0I,SAAW5lH,EAAQ80B,WAAWtjD,EAAMi3C,GAEzCh3C,KAAK+vB,KAAO/vB,KAAKm0I,QACnB,CAYA/8F,OACE,OAAOp3C,KAAKm0I,QACd,CAaA9kG,WACE,OAAO9gB,EAAQ7lB,UAAU1I,KAAKm0I,SAChC,CAaAh8F,KAEE,OADAn4C,KAAK+vB,KAAO/vB,KAAK+vB,KAAKo6I,WACfnqK,IACT,CAaAxI,OAEE,OADAwI,KAAK+vB,KAAO/vB,KAAKm0I,SACVn0I,IACT,CAeAg3C,MAAMskK,GACJ,IAAK,MAAMzgK,KAAKygK,EACVj6M,OAAOD,UAAUye,eAAe7M,KAAKsoM,EAAWzgK,UAC7Bv6C,IAAjBg7M,EAAUzgK,GACZ76C,KAAK+vB,KAAKkxJ,gBAAgBpmI,GAE1B76C,KAAK+vB,KAAK6tC,aAAa/iB,EAAGygK,EAAUzgK,KAK1C,OAAO76C,IACT,CAmBAyoC,EAAE1oC,EAAMi3C,EAAOqK,GACb,MAAMkC,EAAQh1B,EAAQ80B,WAAWtjD,EAAMi3C,EAAOqK,GAO9C,OANArhD,KAAK+vB,KAAKs+B,YAAY9K,GAEF,iBAATlC,GAAqC,iBAATA,IACrCrhD,KAAK+vB,KAAOwzB,GAGPvjD,IACT,CAiBAm3C,MAAMV,GACJ,IAAI8kK,EACJ,MAAMC,EAASjtL,EAAQqrL,eAEvB,IACE2B,OAAgCj7M,IAAtBk7M,EAAOC,UACnB,CAAE,MAAOjsM,GACP+rM,GAAU,CACZ,CAEA,MAAMG,EAAUH,EAAUC,EAAOC,WAAWhlK,GAAM,GAAQloB,EAAQ2rL,YAAYzjK,GAG9E,OAFAz2C,KAAK+vB,KAAKs+B,YAAYqtJ,GACtB17M,KAAK+vB,KAAO2rL,EACL17M,IACT,CAeAqlB,EAAEg8B,GACA,MAAMkC,EAAQh1B,EAAQsrL,YAAYx4J,GAElC,OADArhD,KAAK+vB,KAAKs+B,YAAY9K,GACfvjD,IACT,CAcA+jK,EAAE0qB,GACA,MAAMktB,EAAWptL,EAAQqrL,eAAej/G,cAAc,QAEtDghH,EAAS5zJ,UAAY0mI,EAErB,MAAMmtB,EAAQrtL,EAAQ4rL,WAAWwB,GAEjC,KAAOC,EAAMr7B,WAAW78K,OAAS,GAC/B1D,KAAK+vB,KAAKs+B,YAAYutJ,EAAMr7B,WAAW,IAGzC,OAAOvgL,IACT,GAiCFuuB,QAAkB,SAAUlgB,EAASwtM,EAAI97M,EAAMqD,EAAMyiB,EAAI2E,EAAM3qB,GAC7DG,KAAKqO,QAAUA,EACfrO,KAAK67M,GAAKA,EACV77M,KAAKD,KAAOA,EACZC,KAAKoD,KAAOA,EACZpD,KAAK6lB,GAAKA,EACV7lB,KAAKH,QAAUA,GAAW,CACxB,kBAAoB,EACpB,yBAA2B,GAGzBG,KAAKH,QAAQi8M,YACfvtL,EAAQplB,KAAK,yEACbnJ,KAAKH,QAAQk8M,iBAAmB/7M,KAAKH,QAAQi8M,iBACtC97M,KAAKH,QAAQi8M,WAGlB97M,KAAKH,QAAQk8M,iBACf/7M,KAAKwqB,KAAOA,EAAO+D,EAAQqsL,kBAAkBpwL,GAAQ,KAErDxqB,KAAKwqB,KAAOA,EAIdxqB,KAAK03B,MAAO,CACd,GAEAnJ,EAAQytL,QAAQ56M,UAAY,CAY1B66M,aAAaxlK,GACX,IAAIylK,EAAczlK,EAAK3L,aAAa,SAMpC,OAJIoxK,GAAel8M,KAAKH,QAAQs8M,0BAC9BD,EAAcA,EAAYv1L,MAAM,KAAK,IAGhCu1L,CACT,EAWAE,eAAe3lK,GACb,IAAI4lK,GAAU,EAEd,OAAKr8M,KAAK67M,KAGRttL,EAAQgrL,aAAa9iK,EAAM,MAAMA,IAC3Bz2C,KAAKi8M,aAAaxlK,KAAUz2C,KAAK67M,KACnCQ,GAAU,EACZ,IAEKA,GAAWr8M,KAAKi8M,aAAaxlK,KAAUz2C,KAAK67M,GAEvD,EAWAS,QAAQ7lK,GACN,IAAIjsB,EAAOisB,EAAK3L,aAAa,QAEzB9qC,KAAKH,QAAQk8M,mBACfvxL,EAAO+D,EAAQqsL,kBAAkBpwL,IAGnC,MAAM+xL,EAAY9lK,EAAK3L,aAAa,QAEpC,SAAI9qC,KAAKo8M,eAAe3lK,IAAWz2C,KAAKD,OAAQwuB,EAAQmrL,WAAWjjK,EAAMz2C,KAAKD,OAAYC,KAAKoD,OAASjD,MAAMC,QAAQJ,KAAKoD,OAA0C,IAAlCpD,KAAKoD,KAAKxC,QAAQ27M,GAAoBA,IAAcv8M,KAAKoD,OAAYpD,KAAK6lB,IAAM4wB,EAAK3L,aAAa,QAAU9qC,KAAK6lB,IAAS7lB,KAAKwqB,MAAQA,IAASxqB,KAAKwqB,KAK1R,EAYAisI,IAAIhgH,GACF,IAAIz2B,EAAS,KAEb,IACEA,EAAShgB,KAAKqO,QAAQooC,EACxB,CAAE,MAAOjnC,GAGP,MAFA+e,EAAQkzB,aAAajyC,GAEfA,CACR,CAEA,OAAOwQ,CACT,EAQAqvB,WACE,MAAO,aAAervC,KAAKqO,QAAU,IAAMrO,KAAKD,KAAO,IAAMC,KAAK6lB,GAAK,IAAM7lB,KAAK67M,GAAK,IACzF,GAgBFttL,EAAQiuL,aAAe,MAarBj7M,YAAYk7M,EAAQpuM,GAClBrO,KAAKy8M,OAASA,EACdz8M,KAAKqO,QAAUA,EACfrO,KAAK08M,YAAa,IAAI5gM,MAAOg2B,UAC7B9xC,KAAK03B,MAAO,CACd,CAUA++H,MAEE,OADAz2J,KAAK08M,YAAa,IAAI5gM,MAAOg2B,UACtB9xC,KAAKqO,SACd,CAMAZ,QACEzN,KAAK08M,YAAa,IAAI5gM,MAAOg2B,SAC/B,CASAzC,WACE,MAAO,kBAAoBrvC,KAAKqO,QAAU,IAAMrO,KAAKy8M,OAAS,IAChE,GAuKFluL,EAAQouL,WAAa,MACnBp7M,YAAYytC,EAASnvC,GAEnBG,KAAKgvC,QAAUA,EAEfhvC,KAAKH,QAAUA,GAAW,CAAC,EAC3BG,KAAK48M,cAGL58M,KAAKyvB,IAAM,GAGXzvB,KAAKk0C,OAAS,KAGdl0C,KAAKouB,SAAW,KAEhBpuB,KAAK68M,WAAa,CAAC,EACnB78M,KAAK88M,SAAU,EACf98M,KAAK+8M,YAAa,EAClB/8M,KAAKg9M,WAAa,CAAC,EAEnBh9M,KAAKi9M,cAAgB,GACrBj9M,KAAKuO,SAAW,GAChBvO,KAAKk9M,aAAe,GACpBl9M,KAAKm9M,eAAiB,GACtBn9M,KAAKo9M,UAAY,GACjBp9M,KAAKq9M,YAAc,GACnBr9M,KAAKs9M,sBAAwB,CAC3B,KAAQ,CAAC,EACT,UAAa,CAAC,GAEhBt9M,KAAKu9M,aAAe,KACpBv9M,KAAKw9M,mBAAqB,KAC1Bx9M,KAAKy9M,eAAgB,EACrBz9M,KAAKgwC,WAAY,EACjBhwC,KAAKi0C,eAAgB,EACrBj0C,KAAK09M,mBAAoB,EACzB19M,KAAKumE,QAAS,EACdvmE,KAAK29M,UAAW,EAChB39M,KAAKm5H,MAAQ,GACbn5H,KAAK49M,UAAY,EACjB59M,KAAK69M,sBAAwB,KAC7B79M,KAAK89M,sBAAwB,KAC7B99M,KAAK+9M,wBAA0B,KAE/B/9M,KAAKkzC,WAAa,EAElBlzC,KAAKu9M,aAAe9jL,YAAW,IAAMz5B,KAAKg+M,WAAW,KACrDjzH,EAAiB/qF,KAAKH,QAAQk1M,SAC9B/0M,KAAKi+M,uBAAuBj+M,KAAKH,QAAQm9M,YAMzCh9M,KAAKk+M,kBAAoB,IAAI3vL,EAAQytL,SAAQ3qK,GAAMrxC,KAAKo2C,KAAK9E,EAAI,CAC/DluC,KAAM,QACNyiB,GAAIwrB,EAAGvG,aAAa,QACnBrC,EAAE,QAAS,CACZ,KAAQ,WACPA,EAAE,sBAAuB,CAC1B,MAASla,EAAQmoL,GAAGc,YACjB,KAAM,KAAM,CAAC,MAAO,QAEzB,IAAK,MAAM38J,KAAKtsB,EAAQ6sL,mBACtB,GAAI/5M,OAAOD,UAAUye,eAAe7M,KAAKub,EAAQ6sL,mBAAoBvgK,GAAI,CACvE,MAAMgrH,EAAI,WAAa,EAEvBA,EAAEzkK,UAAYmtB,EAAQ6sL,mBAAmBvgK,GACzC76C,KAAK66C,GAAK,IAAIgrH,EACd7lK,KAAK66C,GAAGv+B,KAAKtc,KACf,CAEJ,CAMA48M,cACE,MAAMjpJ,EAAQ3zD,KAAKH,QAAQslB,UAAY,GAEnCnlB,KAAKH,QAAQilE,OACf9kE,KAAK2zC,OAAS,IAAIplB,EAAQ4vL,gBAAgBn+M,MACD,IAAhCA,KAAKgvC,QAAQpuC,QAAQ,QAAiD,IAAjCZ,KAAKgvC,QAAQpuC,QAAQ,SAAyC,IAAxB+yD,EAAM/yD,QAAQ,MAClGZ,KAAK2zC,OAAS,IAAIplB,EAAQ6vL,UAAUp+M,MAEpCA,KAAK2zC,OAAS,IAAIplB,EAAQ8vL,KAAKr+M,KAEnC,CASAyN,QACEzN,KAAK2zC,OAAO2qK,SAGZt+M,KAAK+8M,YAAa,EAClB/8M,KAAK88M,SAAU,EAEf98M,KAAKi9M,cAAgB,GACrBj9M,KAAKuO,SAAW,GAChBvO,KAAKk9M,aAAe,GACpBl9M,KAAKm9M,eAAiB,GACtBn9M,KAAKo9M,UAAY,GACjBp9M,KAAKq9M,YAAc,GACnBr9M,KAAKy9M,eAAgB,EACrBz9M,KAAKgwC,WAAY,EACjBhwC,KAAKi0C,eAAgB,EACrBj0C,KAAK29M,UAAW,EAChB39M,KAAKm5H,MAAQ,GACbn5H,KAAKu+M,UAAY,GACjBv+M,KAAK49M,UAAY,CACnB,CAYAh3I,QACE5mE,KAAKumE,QAAS,CAChB,CAQApuD,SACEnY,KAAKumE,QAAS,CAChB,CAyBAi4I,YAAYC,GAEV,MAAM3+K,EAAO,uCAAuCsP,QAAQ,SAAS,SAAU3G,GAC7E,MAAM2iD,EAAoB,GAAhB7vE,KAAKizB,SAAgB,EAE/B,OADgB,MAAN/F,EAAY2iD,EAAQ,EAAJA,EAAU,GAC3B/7C,SAAS,GACpB,IAEA,MAAsB,iBAAXovK,GAAyC,iBAAXA,EAChC3+K,EAAO,IAAM2+K,EAEb3+K,EAAO,EAElB,CAyBA4+K,wBAAwBv5L,EAAUw5L,EAAaznM,GAC7ClX,KAAKs9M,sBAAsBn4L,GAAUw5L,GAAeznM,CACtD,CA6CAsB,QAAQiX,EAAKqlB,EAAM59B,EAAUitL,EAAMya,EAAMC,EAAOC,GAC9C,IAAIC,EAAwBt7M,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,IAChGzD,KAAKyvB,IAAMA,EAKXzvB,KAAKg/M,QAAUzwL,EAAQqsL,kBAAkB56M,KAAKyvB,KAK9CzvB,KAAK8+M,QAAUA,GAAWvwL,EAAQksL,eAAez6M,KAAKyvB,KAKtDzvB,KAAK80C,KAAOA,EACZ90C,KAAKi/M,iBAAmB/nM,EACxBlX,KAAKi0C,eAAgB,EACrBj0C,KAAKgwC,WAAY,EACjBhwC,KAAKy9M,eAAgB,EACrBz9M,KAAK29M,UAAW,EAChB39M,KAAK++M,sBAAwBA,EAE7B/+M,KAAKk0C,OAAS3lB,EAAQmsL,iBAAiB16M,KAAKyvB,KAE5CzvB,KAAK82C,qBAAqBvoB,EAAQikB,OAAOy0C,WAAY,MAErDjnF,KAAK2zC,OAAO8uC,SAAS0hH,EAAMya,EAAMC,EACnC,CA2BAnqK,OAAOjlB,EAAKklB,EAAKC,EAAK19B,EAAUitL,EAAMya,EAAMM,GAC1C,GAAIl/M,KAAK2zC,OAAOwrK,QACd,OAAOn/M,KAAK2zC,OAAOwrK,QAAQ1vL,EAAKklB,EAAKC,EAAK19B,EAAUitL,EAAMya,EAAMM,GAC3D,CACL,MAAMt/M,EAAQ,IAAIsB,MAAM,qEAExB,MADAtB,EAAMG,KAAO,sBACPH,CACR,CACF,CA8BAw/M,QAAQ3vL,EAAKvY,EAAUitL,EAAMya,EAAMM,GACjC,IAAIl/M,KAAKq/M,2BAEF,CACL,MAAMz/M,EAAQ,IAAIsB,MAAM,iEAExB,MADAtB,EAAMG,KAAO,sBACPH,CACR,CALEI,KAAK2zC,OAAO2rK,SAAS7vL,EAAKvY,EAAUitL,EAAMya,EAAMM,EAMpD,CAOAG,2BACE,GAAIr/M,KAAK2zC,kBAAkBplB,EAAQ8vL,KAAM,CACvC,IAAK11M,KACH,OAAO,EAGT,IACE42M,eAAej3M,QAAQ,YAAa,aACpCi3M,eAAe/2M,WAAW,YAC5B,CAAE,MAAOgH,GACP,OAAO,CACT,CAEA,OAAO,CACT,CAEA,OAAO,CACT,CAqBAgwM,SAAS/oK,GAGT,CAqBAgpK,UAAUhpK,GAGV,CAeA5G,SAASz+B,GAGT,CAeAwtE,UAAUxtE,GAGV,CAcAsuM,aAAa9qK,GAGb,CAeAwB,KAAKK,GACH,GAAa,OAATA,EAAJ,CAIA,GAAyB,mBAAdA,EAAKhS,KACd,IAAK,IAAI1+B,EAAI,EAAGA,EAAI0wC,EAAK/yC,OAAQqC,IAC/B/F,KAAK2/M,WAAWlpK,EAAK1wC,QAEO,mBAAd0wC,EAAKW,KACrBp3C,KAAK2/M,WAAWlpK,EAAKW,QAErBp3C,KAAK2/M,WAAWlpK,GAGlBz2C,KAAK2zC,OAAO8zC,OAZZ,CAaF,CAWA7xC,QAGEvc,aAAar5B,KAAKu9M,cAElBv9M,KAAKg+M,SACP,CAmBAlyK,aAAa2K,EAAMv/B,EAAUw/B,EAAStK,GACpC,IAAIwzK,EAAiB,KAEI,mBAAdnpK,EAAKW,OACdX,EAAOA,EAAKW,QAGd,IAAIvxB,EAAK4wB,EAAK3L,aAAa,MAQ3B,GANKjlB,IAEHA,EAAK7lB,KAAKw+M,YAAY,gBACtB/nK,EAAKmnB,aAAa,KAAM/3C,IAGF,mBAAb3O,GAA8C,mBAAZw/B,EAAwB,CACnE,MAAMroC,EAAUrO,KAAKw0C,YAAW6B,IAE1BupK,GACF5/M,KAAK6/M,mBAAmBD,GAGU,UAAhCvpK,EAAOvL,aAAa,QAClB4L,GACFA,EAAQL,GAEDn/B,GACTA,EAASm/B,EACX,GACC,KAAM,WAAY,KAAMxwB,GAEvBumB,IACFwzK,EAAiB5/M,KAAK8/M,gBAAgB1zK,GAAS,KAE7CpsC,KAAKy0C,cAAcpmC,GAEfqoC,GACFA,EAAQ,OAGH,KAGb,CAGA,OADA12C,KAAKo2C,KAAKK,GACH5wB,CACT,CAiBAswB,OAAOM,EAAMv/B,EAAUw/B,EAAStK,GAC9B,IAAIwzK,EAAiB,KAEI,mBAAdnpK,EAAKW,OACdX,EAAOA,EAAKW,QAGd,IAAIvxB,EAAK4wB,EAAK3L,aAAa,MAQ3B,GANKjlB,IAEHA,EAAK7lB,KAAKw+M,YAAY,UACtB/nK,EAAKmnB,aAAa,KAAM/3C,IAGF,mBAAb3O,GAA8C,mBAAZw/B,EAAwB,CACnE,MAAMroC,EAAUrO,KAAKw0C,YAAW6B,IAE1BupK,GACF5/M,KAAK6/M,mBAAmBD,GAG1B,MAAMG,EAAS1pK,EAAOvL,aAAa,QAEnC,GAAe,WAAXi1K,EACE7oM,GACFA,EAASm/B,OAEN,IAAe,UAAX0pK,EAIJ,CACL,MAAMngN,EAAQ,IAAIsB,MAAO,sBAAqB6+M,KAE9C,MADAngN,EAAMG,KAAO,eACPH,CACR,CAPM82C,GACFA,EAAQL,EAMZ,IACC,KAAM,KAAM,CAAC,QAAS,UAAWxwB,GAEhCumB,IACFwzK,EAAiB5/M,KAAK8/M,gBAAgB1zK,GAAS,KAE7CpsC,KAAKy0C,cAAcpmC,GAEfqoC,GACFA,EAAQ,OAGH,KAGb,CAGA,OADA12C,KAAKo2C,KAAKK,GACH5wB,CACT,CAOA85L,WAAWnjH,GACT,GAAgB,OAAZA,IAAqBA,EAAQvsE,UAAYusE,EAAQ+jF,WAAY,CAC/D,MAAM3gL,EAAQ,IAAIsB,MAAM,gCAExB,MADAtB,EAAMG,KAAO,eACPH,CACR,CAEAI,KAAKm5H,MAAM7pH,KAAKktF,EAClB,CAMAwjH,eACEhgN,KAAKm5H,MAAM7pH,KAAK,WAEhBtP,KAAK2zC,OAAOqsK,eAEZhgN,KAAKu9M,aAAe9jL,YAAW,IAAMz5B,KAAKg+M,WAAW,IACvD,CAyBA8B,gBAAgBrD,EAAQpuM,GACtB,MAAM4xM,EAAQ,IAAI1xL,EAAQiuL,aAAaC,EAAQpuM,GAE/C,OADArO,KAAKo9M,UAAU9tM,KAAK2wM,GACbA,CACT,CAaAJ,mBAAmBK,GAGjBlgN,KAAKk9M,aAAa5tM,KAAK4wM,EACzB,CAmEA1rK,WAAWnmC,EAASwtM,EAAI97M,EAAMqD,EAAMyiB,EAAI2E,EAAM3qB,GAC5C,MAAMsgN,EAAO,IAAI5xL,EAAQytL,QAAQ3tM,EAASwtM,EAAI97M,EAAMqD,EAAMyiB,EAAI2E,EAAM3qB,GAEpE,OADAG,KAAKq9M,YAAY/tM,KAAK6wM,GACfA,CACT,CAaA1rK,cAAcyrK,GAGZlgN,KAAKm9M,eAAe7tM,KAAK4wM,GAGzB,MAAMn6M,EAAI/F,KAAKq9M,YAAYz8M,QAAQs/M,GAE/Bn6M,GAAK,GACP/F,KAAKq9M,YAAY9tM,OAAOxJ,EAAG,EAE/B,CAYAk4M,uBAAuBjB,GACrBh9M,KAAKg9M,WAAa,CAAC,GACnBA,EAAaA,GAAc,CAACzuL,EAAQ6xL,cAAe7xL,EAAQ8xL,aAAc9xL,EAAQ+xL,gBAAiB/xL,EAAQgyL,YAAahyL,EAAQiyL,UAAWjyL,EAAQkyL,WACvIryM,SAAQie,GAAKrsB,KAAK0gN,sBAAsBr0L,IACrD,CAWAq0L,sBAAsBC,GACpB,MAAM1P,EAAY,IAAI0P,EACtB3gN,KAAKg9M,WAAW/L,EAAUyD,UAAYzD,CACxC,CAmBAt3L,WAAWjF,GAST,GARA1U,KAAK82C,qBAAqBvoB,EAAQikB,OAAO0lK,cAAexjM,GAEpDA,EACF6Z,EAAQplB,KAAK,kCAAoCuL,GAEjD6Z,EAAQ5kB,KAAK,yBAGX3J,KAAKgwC,UAAW,CAClB,IAAIiH,GAAO,EACXj3C,KAAKi0C,eAAgB,EAEjBj0C,KAAKy9M,gBACPxmK,EAAOC,EAAM,CACX,MAAS3oB,EAAQmoL,GAAGG,OACpB,KAAQ,iBAKZ72M,KAAKw9M,mBAAqBx9M,KAAK4gN,oBAAoB5gN,KAAK++M,sBAAuB/+M,KAAK6gN,qBAAqBzwL,KAAKpwB,OAE9GA,KAAK2zC,OAAOmtK,YAAY7pK,EAC1B,MACE1oB,EAAQplB,KAAK,gEAEbnJ,KAAK2zC,OAAO0D,oBAEZr3C,KAAKs3C,eAET,CAaAR,qBAAqBriC,EAAQssM,EAAWtqK,GAEtC,IAAK,MAAMoE,KAAKtsB,EAAQ6sL,mBACtB,GAAI/5M,OAAOD,UAAUye,eAAe7M,KAAKub,EAAQ6sL,mBAAoBvgK,GAAI,CACvE,MAAMtG,EAASv0C,KAAK66C,GAEpB,GAAItG,EAAOysK,cACT,IACEzsK,EAAOysK,cAAcvsM,EAAQssM,EAC/B,CAAE,MAAO70L,GACPqC,EAAQ3uB,MAAO,GAAEi7C,iDAAiD3uB,IACpE,CAEJ,CAIF,GAAIlsB,KAAKi/M,iBACP,IACEj/M,KAAKi/M,iBAAiBxqM,EAAQssM,EAAWtqK,EAC3C,CAAE,MAAOjnC,GACP+e,EAAQkzB,aAAajyC,GAErB+e,EAAQ3uB,MAAO,iDAAgD4P,IACjE,CAEJ,CASA8nC,cAAcypK,GACqB,iBAAtB/gN,KAAKu9M,cACdlkL,aAAar5B,KAAKu9M,cAIY,OAA5Bv9M,KAAKw9M,qBACPx9M,KAAK6/M,mBAAmB7/M,KAAKw9M,oBAC7Bx9M,KAAKw9M,mBAAqB,MAG5BjvL,EAAQ9d,MAAM,4BAEdzQ,KAAK2zC,OAAO2D,gBAEZt3C,KAAKy9M,eAAgB,EACrBz9M,KAAKi0C,eAAgB,EACrBj0C,KAAK29M,UAAW,EAEhB39M,KAAKuO,SAAW,GAChBvO,KAAKi9M,cAAgB,GACrBj9M,KAAKk9M,aAAe,GACpBl9M,KAAKm9M,eAAiB,GACtBn9M,KAAKo9M,UAAY,GACjBp9M,KAAKq9M,YAAc,GAEnBr9M,KAAK82C,qBAAqBvoB,EAAQikB,OAAOylK,aAAc8I,GAEvD/gN,KAAKgwC,WAAY,CACnB,CAeAixK,UAAU/hI,EAAKxlB,GACb,MAAMjjB,EAAOz2C,KAAK2zC,OAAOutK,WAAWhiI,GAEpC,GAAa,OAATzoC,EACF,OAoBF,IAjBIz2C,KAAKw/M,WAAajxL,EAAQouL,WAAWv7M,UAAUo+M,WAC7C/oK,EAAKkN,WAAa3jD,KAAK2zC,OAAOwtK,OAAS1qK,EAAK8pI,WAAW78K,OACzD1D,KAAKw/M,SAAS/oK,EAAK8pI,WAAW,IAE9BvgL,KAAKw/M,SAAS/oK,IAIdz2C,KAAK6vC,WAAathB,EAAQouL,WAAWv7M,UAAUyuC,WAC7C6pB,EACF15D,KAAK6vC,SAAS6pB,GAEd15D,KAAK6vC,SAASthB,EAAQ7lB,UAAU+tC,KAK7Bz2C,KAAKm9M,eAAez5M,OAAS,GAAG,CACrC,MAAMy8M,EAAOngN,KAAKm9M,eAAevpJ,MAC3B7tD,EAAI/F,KAAKuO,SAAS3N,QAAQu/M,GAE5Bp6M,GAAK,GACP/F,KAAKuO,SAASgB,OAAOxJ,EAAG,EAE5B,CAGA,KAAO/F,KAAKq9M,YAAY35M,OAAS,GAC/B1D,KAAKuO,SAASe,KAAKtP,KAAKq9M,YAAYzpJ,OAItC,GAAI5zD,KAAKi0C,eAAiBj0C,KAAK2zC,OAAOytK,cAGpC,YAFAphN,KAAKs3C,gBAKP,MAAMl0C,EAAOqzC,EAAK3L,aAAa,QAE/B,GAAa,OAAT1nC,GAA0B,cAATA,EAAsB,CAEzC,GAAIpD,KAAKi0C,cACP,OAIF,IAAIotK,EAAO5qK,EAAK3L,aAAa,aAC7B,MAAMw2K,EAAW7qK,EAAK2Q,qBAAqB,YAc3C,OAZa,OAATi6J,GACW,wBAATA,GAAkCC,EAAS59M,OAAS,IACtD29M,EAAO,YAGTrhN,KAAK82C,qBAAqBvoB,EAAQikB,OAAOslK,SAAUuJ,IAEnDrhN,KAAK82C,qBAAqBvoB,EAAQikB,OAAOslK,SAAUvpL,EAAQiqL,eAAe+I,oBAG5EvhN,KAAKs3C,cAAc+pK,EAGrB,CAGA9yL,EAAQgrL,aAAa9iK,EAAM,MAAM8M,IAC/B,MAAM74C,EAAU,GAChB1K,KAAKuO,SAAWvO,KAAKuO,SAASsJ,QAAO,CAACtJ,EAAUF,KAC9C,KACMA,EAAQiuM,QAAQ/4J,KAAWvjD,KAAKy9M,eAAkBpvM,EAAQqpB,KAO5DnpB,EAASe,KAAKjB,IANVA,EAAQooJ,IAAIlzG,IACdh1C,EAASe,KAAKjB,GAGhB3D,EAAQ4E,KAAKjB,GAIjB,CAAE,MAAOmB,GAEP+e,EAAQplB,KAAK,wDAA0DqG,EAAEjP,QAC3E,CAEA,OAAOgO,CAAQ,GACd,KAGE7D,EAAQhH,QAAU1D,KAAKk+M,kBAAkB5B,QAAQ/4J,IACpDvjD,KAAKk+M,kBAAkBznD,IAAIlzG,EAC7B,GAEJ,CAmBAi+J,YAAYtiI,EAAKuiI,EAAW/nJ,GAG1B,IAAIgoJ,EAyCAC,EA3CJpzL,EAAQ9d,MAAM,0BACdzQ,KAAKgwC,WAAY,EAGjB,IACE0xK,EAAW1hN,KAAK2zC,OAAOutK,WAAWhiI,EACpC,CAAE,MAAO1vE,GACP,GAAIA,EAAEzP,OAASwuB,EAAQiqL,eAAeC,WACpC,MAAMjpM,EAGRxP,KAAK82C,qBAAqBvoB,EAAQikB,OAAOslK,SAAUvpL,EAAQiqL,eAAeC,YAE1Ez4M,KAAKs3C,cAAc/oB,EAAQiqL,eAAeC,WAC5C,CAEA,IAAKiJ,EACH,OAqBF,GAlBI1hN,KAAKw/M,WAAajxL,EAAQouL,WAAWv7M,UAAUo+M,WAC7CkC,EAAS/9J,WAAa3jD,KAAK2zC,OAAOwtK,OAASO,EAASnhC,WAAW78K,OACjE1D,KAAKw/M,SAASkC,EAASnhC,WAAW,IAElCvgL,KAAKw/M,SAASkC,IAId1hN,KAAK6vC,WAAathB,EAAQouL,WAAWv7M,UAAUyuC,WAC7C6pB,EACF15D,KAAK6vC,SAAS6pB,GAEd15D,KAAK6vC,SAASthB,EAAQ7lB,UAAUg5M,KAIlB1hN,KAAK2zC,OAAO6tK,YAAYE,KAExBnzL,EAAQikB,OAAOslK,SAC/B,OAYF,GALE6J,EADED,EAASj6J,uBACGi6J,EAASj6J,uBAAuBl5B,EAAQmoL,GAAGr3C,OAAQ,YAAY37J,OAAS,EAExEg+M,EAASt6J,qBAAqB,mBAAmB1jD,OAAS,GAAKg+M,EAASt6J,qBAAqB,YAAY1jD,OAAS,GAG7Hi+M,EAGH,YAFA3hN,KAAK2zC,OAAOiuK,kBAAkBH,GAKhC,MAAM5iJ,EAAU1+D,MAAMqqB,KAAKk3L,EAASt6J,qBAAqB,cAAc1pB,KAAIrR,GAAKrsB,KAAKg9M,WAAW3wL,EAAEg7B,eAAcpvC,QAAOoU,GAAKA,IAErG,IAAnBwyC,EAAQn7D,QAC2C,IAAjDg+M,EAASt6J,qBAAqB,QAAQ1jD,QASb,IAA3B1D,KAAK09M,mBACP19M,KAAKqiD,aAAawc,GAPhB7+D,KAAK2zC,OAAOiuK,kBAAkBH,EASpC,CAYAI,yBAAyB7E,GAGvB,IAAK,IAAIj3M,EAAI,EAAGA,EAAIi3M,EAAWt5M,OAAS,IAAKqC,EAAG,CAC9C,IAAI+7M,EAAS/7M,EAEb,IAAK,IAAIsjC,EAAItjC,EAAI,EAAGsjC,EAAI2zK,EAAWt5M,SAAU2lC,EACvC2zK,EAAW3zK,GAAG0rB,SAAWioJ,EAAW8E,GAAQ/sJ,WAC9C+sJ,EAASz4K,GAIb,GAAIy4K,IAAW/7M,EAAG,CAChB,MAAMg8M,EAAO/E,EAAWj3M,GACxBi3M,EAAWj3M,GAAKi3M,EAAW8E,GAC3B9E,EAAW8E,GAAUC,CACvB,CACF,CAEA,OAAO/E,CACT,CAgBA36J,aAAawc,GACN7+D,KAAKgiN,iBAAiBnjJ,IACzB7+D,KAAKiiN,oBAET,CAgBAD,iBAAiBhF,GACfA,EAAah9M,KAAK6hN,yBAAyB7E,GAAc,IACzD,IAAIkF,GAAkB,EAEtB,IAAK,IAAIn8M,EAAI,EAAGA,EAAIi3M,EAAWt5M,SAAUqC,EAAG,CAC1C,IAAKi3M,EAAWj3M,GAAGoE,KAAKnK,MACtB,SAGFA,KAAK69M,sBAAwB79M,KAAK0iF,eAAe1iF,KAAKmiN,iBAAiB/xL,KAAKpwB,MAAO,KAAM,UAAW,KAAM,MAC1GA,KAAK89M,sBAAwB99M,KAAK0iF,eAAe1iF,KAAKoiN,iBAAiBhyL,KAAKpwB,MAAO,KAAM,UAAW,KAAM,MAC1GA,KAAK+9M,wBAA0B/9M,KAAK0iF,eAAe1iF,KAAKqiN,mBAAmBjyL,KAAKpwB,MAAO,KAAM,YAAa,KAAM,MAChHA,KAAKsiN,gBAAkBtF,EAAWj3M,GAElC/F,KAAKsiN,gBAAgB3N,QAAQ30M,MAE7B,MAAMuiN,EAAwB10J,EAAO,OAAQ,CAC3C,MAASt/B,EAAQmoL,GAAGU,KACpB,UAAap3M,KAAKsiN,gBAAgB5N,WAGpC,GAAI10M,KAAKsiN,gBAAgB7N,cAAe,CACtC,MAAMnoK,EAAWtsC,KAAKsiN,gBAAgBxN,gBAAgB90M,MAEtDuiN,EAAsBl9L,EAAE+wL,EAAKE,KAAKhqK,GACpC,CAEAtsC,KAAKo2C,KAAKmsK,EAAsBnrK,QAChC8qK,GAAkB,EAClB,KACF,CAEA,OAAOA,CACT,CAOAG,mBAAmB5rK,GACjB,MAAMo+J,EAAYuB,EAAK7qD,KAAKh9H,EAAQg1J,QAAQ9sI,IAEtCnK,EAAWtsC,KAAKsiN,gBAAgB1N,YAAY50M,KAAM60M,GAElDx+J,EAASwX,EAAO,WAAY,CAChC,MAASt/B,EAAQmoL,GAAGU,OAQtB,MALiB,KAAb9qK,GACF+J,EAAOhxB,EAAE+wL,EAAKE,KAAKhqK,IAGrBtsC,KAAKo2C,KAAKC,EAAOe,SACV,CACT,CAOA6qK,qBAC2C,OAArC1zL,EAAQksL,eAAez6M,KAAKyvB,MAG9BzvB,KAAK82C,qBAAqBvoB,EAAQikB,OAAOslK,SAAUvpL,EAAQiqL,eAAeG,kBAE1E34M,KAAK2Z,WAAW4U,EAAQiqL,eAAeG,oBAGvC34M,KAAK82C,qBAAqBvoB,EAAQikB,OAAOulK,eAAgB,MAEzD/3M,KAAK0iF,eAAe1iF,KAAKwiN,sBAAsBpyL,KAAKpwB,MAAO,KAAM,KAAM,KAAM,WAE7EA,KAAKo2C,KAAK9E,EAAI,CACZ,KAAQ,MACR,GAAMtxC,KAAKk0C,OACX,GAAM,YACLzL,EAAE,QAAS,CACZ+D,MAAOje,EAAQmoL,GAAGI,OACjBruK,EAAE,WAAY,CAAC,GAAGpjB,EAAEkJ,EAAQksL,eAAez6M,KAAKyvB,MAAM2nB,QAE7D,CAiBAorK,sBAAsB/rK,GAGpB,MAAMpF,EAAKC,EAAI,CACbluC,KAAM,MACNyiB,GAAI,YACH4iB,EAAE,QAAS,CACZ+D,MAAOje,EAAQmoL,GAAGI,OACjBruK,EAAE,WAAY,CAAC,GAAGpjB,EAAEkJ,EAAQksL,eAAez6M,KAAKyvB,MAAM0oB,KAAK1P,EAAE,YAAYpjB,EAAErlB,KAAK80C,MAcnF,OAZKvmB,EAAQssL,mBAAmB76M,KAAKyvB,OAInCzvB,KAAKyvB,IAAMlB,EAAQqsL,kBAAkB56M,KAAKyvB,KAAO,YAGnD4hB,EAAG8G,KAAK1P,EAAE,WAAY,CAAC,GAAGpjB,EAAEkJ,EAAQssL,mBAAmB76M,KAAKyvB,MAE5DzvB,KAAK0iF,eAAe1iF,KAAKyiN,UAAUryL,KAAKpwB,MAAO,KAAM,KAAM,KAAM,WAEjEA,KAAKo2C,KAAK/E,EAAG+F,SACN,CACT,CAYA+qK,iBAAiB1rK,GACf,GAAIz2C,KAAK68M,WAAW,oBAAqB,CACvC,IAAI6F,EACJ,MACMC,EAAc,wBACdj4M,EAFU0rM,EAAK7qD,KAAKh9H,EAAQg1J,QAAQ9sI,IAElBtxC,MAAMw9M,GAM9B,GAJmB,MAAfj4M,EAAQ,KACVg4M,EAAkBh4M,EAAQ,IAGxBg4M,IAAoB1iN,KAAK68M,WAAW,oBAWtC,OATA78M,KAAKy0C,cAAcz0C,KAAK89M,uBACxB99M,KAAK89M,sBAAwB,KAEzB99M,KAAK+9M,0BACP/9M,KAAKy0C,cAAcz0C,KAAK+9M,yBACxB/9M,KAAK+9M,wBAA0B,MAGjC/9M,KAAK68M,WAAa,CAAC,EACZ78M,KAAKoiN,iBAAiB,KAEjC,CAEA7zL,EAAQ5kB,KAAK,kCAET3J,KAAKsiN,iBACPtiN,KAAKsiN,gBAAgBz3J,YAIvB7qD,KAAKy0C,cAAcz0C,KAAK89M,uBACxB99M,KAAK89M,sBAAwB,KAEzB99M,KAAK+9M,0BACP/9M,KAAKy0C,cAAcz0C,KAAK+9M,yBACxB/9M,KAAK+9M,wBAA0B,MAGjC,MAAM6E,EAAyB,GAEzBnhJ,EAAUA,CAAClzD,EAAUkoC,KACzB,KAAOloC,EAAS7K,QACd1D,KAAKy0C,cAAclmC,EAASqlD,OAK9B,OAFA5zD,KAAK6iN,2BAA2BpsK,IAEzB,CAAK,EAQd,OALAmsK,EAAuBtzM,KAAKtP,KAAK0iF,gBAAejsC,GAAQgrB,EAAQmhJ,EAAwBnsK,IAAO,KAAM,kBAAmB,KAAM,OAC9HmsK,EAAuBtzM,KAAKtP,KAAK0iF,gBAAejsC,GAAQgrB,EAAQmhJ,EAAwBnsK,IAAOloB,EAAQmoL,GAAGr3C,OAAQ,WAAY,KAAM,OAEpIr/J,KAAKggN,gBAEE,CACT,CAUA6C,2BAA2BpsK,GAEzBz2C,KAAKouB,SAAWqoB,EAEhB,IAAK,IAAI1wC,EAAI,EAAGA,EAAI0wC,EAAK8pI,WAAW78K,OAAQqC,IAAK,CAC/C,MAAMw9C,EAAQ9M,EAAK8pI,WAAWx6K,GAEP,SAAnBw9C,EAAMI,WACR3jD,KAAK88M,SAAU,GAGM,YAAnBv5J,EAAMI,WACR3jD,KAAK+8M,YAAa,EAEtB,CAEA,OAAK/8M,KAAK88M,SAIE98M,KAAKH,QAAQijN,wBAGvB9iN,KAAK82C,qBAAqBvoB,EAAQikB,OAAO8lK,aAAc,MAFvDt4M,KAAKowB,QAKA,IATLpwB,KAAK82C,qBAAqBvoB,EAAQikB,OAAOwlK,SAAU,OAE5C,EAQX,CAgBA5nL,OACE,IAAKpwB,KAAK88M,QAER,YADAvuL,EAAQte,IAAIse,EAAQuqL,SAASxrC,KAAO,mEAItCttK,KAAK0iF,eAAe1iF,KAAK+iN,wBAAwB3yL,KAAKpwB,MAAO,KAAM,KAAM,KAAM,gBAE/E,MAAM0vB,EAAWnB,EAAQssL,mBAAmB76M,KAAKyvB,KAE7CC,EACF1vB,KAAKo2C,KAAK9E,EAAI,CACZluC,KAAM,MACNyiB,GAAI,iBACH4iB,EAAE,OAAQ,CACX+D,MAAOje,EAAQmoL,GAAGY,OACjB7uK,EAAE,WAAY,CAAC,GAAGpjB,EAAEqK,GAAU0nB,QAEjCp3C,KAAKo2C,KAAK9E,EAAI,CACZluC,KAAM,MACNyiB,GAAI,iBACH4iB,EAAE,OAAQ,CACX+D,MAAOje,EAAQmoL,GAAGY,OACjBlgK,OAEP,CAYA2rK,wBAAwBtsK,GACtB,GAAkC,UAA9BA,EAAK3L,aAAa,QAAqB,CAGzC,IAAIi2K,EAQJ,OAVAxyL,EAAQplB,KAAK,4BACIstC,EAAK2Q,qBAAqB,YAG9B1jD,OAAS,IACpBq9M,EAAYxyL,EAAQiqL,eAAeE,UAGrC14M,KAAK82C,qBAAqBvoB,EAAQikB,OAAOwlK,SAAU+I,EAAWtqK,IAEvD,CACT,CAGA,MAAMrmB,EAAOqmB,EAAK2Q,qBAAqB,QAEvC,KAAIh3B,EAAK1sB,OAAS,GAkBhB,OAJA6qB,EAAQplB,KAAK,4BAEbnJ,KAAK82C,qBAAqBvoB,EAAQikB,OAAOwlK,SAAU,KAAMvhK,IAElD,EAlBY,CACnB,MAAMusK,EAAU5yL,EAAK,GAAGg3B,qBAAqB,OAEzC47J,EAAQt/M,OAAS,IACnB1D,KAAKy9M,eAAgB,EACrBz9M,KAAKyvB,IAAMlB,EAAQg1J,QAAQy/B,EAAQ,IAE/BhjN,KAAK+8M,WACP/8M,KAAKijN,oBAELjjN,KAAK82C,qBAAqBvoB,EAAQikB,OAAOwU,UAAW,MAG1D,CAOF,CAWAi8J,oBACE,IAAKjjN,KAAK+8M,WACR,MAAM,IAAI77M,MAA2D,wEAAwBqtB,EAAQmoL,GAAGa,2CAG1Gv3M,KAAK0iF,eAAe1iF,KAAKkjN,mBAAmB9yL,KAAKpwB,MAAO,KAAM,KAAM,KAAM,mBAE1EA,KAAKo2C,KAAK9E,EAAI,CACZluC,KAAM,MACNyiB,GAAI,oBACH4iB,EAAE,UAAW,CACd+D,MAAOje,EAAQmoL,GAAGa,UACjBngK,OACL,CAqBA8rK,mBAAmBzsK,GACjB,GAAkC,WAA9BA,EAAK3L,aAAa,QACpB9qC,KAAKy9M,eAAgB,EAErBz9M,KAAK82C,qBAAqBvoB,EAAQikB,OAAOwU,UAAW,WAC/C,GAAkC,UAA9BvQ,EAAK3L,aAAa,QAM3B,OALA9qC,KAAKy9M,eAAgB,EACrBlvL,EAAQplB,KAAK,4BAEbnJ,KAAK82C,qBAAqBvoB,EAAQikB,OAAOwlK,SAAU,KAAMvhK,IAElD,EAGT,OAAO,CACT,CAYA2rK,iBAAiB3rK,GAgBf,OAdIz2C,KAAK69M,wBACP79M,KAAKy0C,cAAcz0C,KAAK69M,uBACxB79M,KAAK69M,sBAAwB,MAG3B79M,KAAK+9M,0BACP/9M,KAAKy0C,cAAcz0C,KAAK+9M,yBACxB/9M,KAAK+9M,wBAA0B,MAG7B/9M,KAAKsiN,iBAAiBtiN,KAAKsiN,gBAAgB9yJ,YAE/CxvD,KAAK82C,qBAAqBvoB,EAAQikB,OAAOwlK,SAAU,KAAMvhK,IAElD,CACT,CAeAgsK,UAAUhsK,GAWR,MAVkC,WAA9BA,EAAK3L,aAAa,SACpB9qC,KAAKy9M,eAAgB,EAErBz9M,KAAK82C,qBAAqBvoB,EAAQikB,OAAOwU,UAAW,OACb,UAA9BvQ,EAAK3L,aAAa,UAC3B9qC,KAAK82C,qBAAqBvoB,EAAQikB,OAAOwlK,SAAU,KAAMvhK,GAEzDz2C,KAAK2Z,WAAW,2BAGX,CACT,CAcAinM,oBAAoBnE,EAAQpuM,GAC1B,MAAM4xM,EAAQ,IAAI1xL,EAAQiuL,aAAaC,EAAQpuM,GAG/C,OAFA4xM,EAAMvoL,MAAO,EACb13B,KAAKo9M,UAAU9tM,KAAK2wM,GACbA,CACT,CAiBAv9H,eAAer0E,EAASwtM,EAAI97M,EAAMqD,EAAMyiB,GACtC,MAAMs6L,EAAO,IAAI5xL,EAAQytL,QAAQ3tM,EAASwtM,EAAI97M,EAAMqD,EAAMyiB,GAG1D,OAFAs6L,EAAKzoL,MAAO,EACZ13B,KAAKq9M,YAAY/tM,KAAK6wM,GACfA,CACT,CAYAU,uBAUE,OATAtyL,EAAQ9d,MAAM,mCAEdzQ,KAAK82C,qBAAqBvoB,EAAQikB,OAAO6lK,YAAa,MAEtDr4M,KAAK2zC,OAAOktK,uBAGZ7gN,KAAKs3C,iBAEE,CACT,CASA0mK,UAIE,KAAOh+M,KAAKo9M,UAAU15M,OAAS,GAC7B1D,KAAKi9M,cAAc3tM,KAAKtP,KAAKo9M,UAAUxpJ,OAIzC,KAAO5zD,KAAKk9M,aAAax5M,OAAS,GAAG,CACnC,MAAMu8M,EAAQjgN,KAAKk9M,aAAatpJ,MAC1B7tD,EAAI/F,KAAKi9M,cAAcr8M,QAAQq/M,GAEjCl6M,GAAK,GACP/F,KAAKi9M,cAAc1tM,OAAOxJ,EAAG,EAEjC,CAGA,MAAMgW,GAAM,IAAID,MAAOg2B,UACjBgH,EAAU,GAEhB,IAAK,IAAI/yC,EAAI,EAAGA,EAAI/F,KAAKi9M,cAAcv5M,OAAQqC,IAAK,CAClD,MAAMk6M,EAAQjgN,KAAKi9M,cAAcl3M,IAE7B/F,KAAKy9M,eAAkBwC,EAAMvoL,OACjBuoL,EAAMvD,WAAauD,EAAMxD,OAE3B1gM,GAAO,EACbkkM,EAAMxpD,OACR39G,EAAQxpC,KAAK2wM,GAGfnnK,EAAQxpC,KAAK2wM,GAGnB,CAEAjgN,KAAKi9M,cAAgBnkK,EACrBzf,aAAar5B,KAAKu9M,cAElBv9M,KAAK2zC,OAAOqqK,UAGRh+M,KAAKgwC,YACPhwC,KAAKu9M,aAAe9jL,YAAW,IAAMz5B,KAAKg+M,WAAW,KAEzD,GAGFzvL,EAAQimL,cAAgBA,EAYxBjmL,EAAQ6xL,cA3gIR,cAA4B5L,EAI1BjzM,cAIEqG,MAHenE,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,YAC/DA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,IAAmBA,UAAU,GACpEA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,GAErF,CAEA0G,KAAK8gC,GAEH,OAA8B,OAAvBA,EAAW6zK,OACpB,GA8/HFvwL,EAAQiyL,UAt3HR,cAAwBhM,EAItBjzM,cAIEqG,MAHenE,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,UAC/DA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,KAAmBA,UAAU,GACpEA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,GAErF,CAEA0G,KAAK8gC,GAEH,OAA8B,OAAvBA,EAAW6zK,OACpB,CAEAlK,YAAY3pK,GAEV,MAAM,QACJ6zK,EAAO,QACPE,EAAO,OACP9qK,EAAM,KACNY,GACE7J,EAEJ,IAAKiJ,EACH,MAAM,IAAIhzC,MAAM,iDAKlB,IAAIiiN,EAAWnE,IAAa,GAAEF,KAAW5qK,IAAW8qK,EAAU,GAK9D,OAJAmE,GAAsB,KACtBA,GAAsBrE,EACtBqE,GAAsB,KACtBA,GAAsBruK,EACfi2C,EAAeo4H,EACxB,GAk1HF50L,EAAQkyL,SA9nHR,cAAuBjM,EAIrBjzM,cAIEqG,MAHenE,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,gBAC/DA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,KAAmBA,UAAU,GACpEA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,GAErF,CAEA0G,KAAK8gC,GAEH,OAA8B,OAAvBA,EAAW6zK,OACpB,CAEAlK,YAAY3pK,EAAY4pK,GAEtB,IAAIr2B,EAAOj3I,EAAM67K,EAAMC,EAAIz9C,EAAG09C,EAAOv9M,EAAG80C,EACpCw1F,EAAe,UACfkzE,EAAe,GAAEt4K,EAAW4xK,WAAW,gCAAgChI,KAC3E,MAAM2O,EAASv4K,EAAW4xK,WAAW2G,OAC/Bb,EAAc,wBAEpB,KAAO9N,EAAU1vM,MAAMw9M,IAAc,CACnC,MAAMj4M,EAAUmqM,EAAU1vM,MAAMw9M,GAGhC,OAFA9N,EAAYA,EAAUzlK,QAAQ1kC,EAAQ,GAAI,IAElCA,EAAQ,IACd,IAAK,IACH8zK,EAAQ9zK,EAAQ,GAChB,MAEF,IAAK,IACH68B,EAAO78B,EAAQ,GACf,MAEF,IAAK,IACH04M,EAAO14M,EAAQ,GAGrB,CAEA,GAAI8zK,EAAMn+K,MAAM,EAAGmjN,EAAO9/M,UAAY8/M,EAEpC,OADAv4K,EAAW4xK,WAAa,CAAC,EAClB5xK,EAAWm3K,mBAGpB/xE,GAAgB,KAAOmuC,EACvB+kC,GAAelzE,EACf9oG,EAAOgkH,KAAKhkH,GACZA,GAAQ,UACR,MAAMuN,EAAOi2C,EAAe9/C,EAAW6J,MAGvC,IAFAuuK,EAAKC,EAAQr6K,EAAKqsK,eAAexgK,EAAMvN,GAElCxhC,EAAI,EAAGA,EAAIq9M,EAAMr9M,IAAK,CAGzB,IAFA6/J,EAAI38H,EAAKqsK,eAAexgK,EAAM7L,EAAKysK,SAAS4N,IAEvCzoK,EAAI,EAAGA,EAAI,EAAGA,IACjBwoK,EAAGxoK,IAAM+qH,EAAE/qH,GAGbyoK,EAAQ19C,CACV,CAEAy9C,EAAKp6K,EAAKysK,SAAS2N,GACnB,MAAMI,EAAYx6K,EAAKqsK,eAAe+N,EAAI,cACpCK,EAAYz6K,EAAK4sK,cAAcwN,EAAI,cACnCM,EAAkB16K,EAAKqsK,eAAersK,EAAK6sK,SAAS7sK,EAAKysK,SAAS+N,IAAaF,GAGrF,IAFAt4K,EAAW4xK,WAAW,oBAAsB5zK,EAAK0sK,cAAc+N,EAAWH,GAErE1oK,EAAI,EAAGA,EAAI,EAAGA,IACjB4oK,EAAU5oK,IAAM8oK,EAAgB9oK,GAIlC,OADAw1F,GAAgB,MAAQimE,KAAKrtK,EAAKysK,SAAS+N,IACpCpzE,CACT,CAEAykE,gBAAgB7pK,EAAY24K,GAE1B,MAAMJ,EAASI,GAAezP,EAAIC,UAAU,GAAqB,WAAhB74L,KAAKizB,UACtD,IAAI20K,EAAW,KAAOp4H,EAAe9/C,EAAW6zK,SAMhD,OALAqE,GAAY,MACZA,GAAYK,EACZv4K,EAAW4xK,WAAW2G,OAASA,EAC/Bv4K,EAAW4xK,WAAW,6BAA+BsG,EACrDA,EAAW,MAAQA,EACZA,CACT,GAsiHF50L,EAAQ+xL,gBA35HR,cAA8B9L,EAI5BjzM,cAIEqG,MAHenE,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,gBAC/DA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,KAAmBA,UAAU,GACpEA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,GAErF,CAEA0G,KAAK8gC,GAEH,OAA2B,OAApBA,EAAW6J,IACpB,CAEA8/J,YAAY3pK,GAEV,IAAIk4K,EAAW,KAYf,OAV2B,OAAvBl4K,EAAW6zK,UACbqE,EAAWA,EAAW,KAAOl4K,EAAW+zK,SAG1CmE,GAAsB,IACtBA,GAAsB,IACtBA,GAAsB,eACtBA,GAAsBl4K,EAAW6J,KACjCquK,GAAsB,IACtBA,GAAsB,IACfp4H,EAAeo4H,EACxB,GA63HF50L,EAAQ8xL,aA7/HR,cAA2B7L,EASzBjzM,cAIEqG,MAHenE,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,aAC/DA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,KAAmBA,UAAU,GACpEA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,GAErF,CAEAmxM,YAAY3pK,GAUV,OAAOA,EAAW6zK,UAAY7zK,EAAW+zK,QAAU,GAAK/zK,EAAW+zK,OACrE,GAm+HFzwL,EAAQgyL,YApiHR,cAA0B/L,EAIxBjzM,cAIEqG,MAHenE,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,aAC/DA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,KAAmBA,UAAU,GACpEA,UAAUC,OAAS,QAAsBpD,IAAjBmD,UAAU,GAAmBA,UAAU,GAAK,GAErF,CAEA0G,KAAK8gC,GAEH,OAA2B,OAApBA,EAAW6J,IACpB,CAEA8/J,YAAY3pK,GAEV,IAAIk4K,EAAW,KAQf,OAN2B,OAAvBl4K,EAAW6zK,UACbqE,GAAsBl4K,EAAW+zK,SAGnCmE,GAAsB,KACtBA,GAAsBl4K,EAAW6J,KAC1Bi2C,EAAeo4H,EACxB,GA0gHF,IAAIU,EAAO,CACT,QAAWt1L,EACX,OAAUs/B,EACV,IAAOvc,EACP,KAAQ4G,EACR,MAAShB,EACT,KAAQjO,EACR,IAAOkrK,EACP,cAAiBlrK,EAAK0sK,cACtB,SAAY1sK,EAAK2sK,SACjB,cAAiB3sK,EAAK4sK,cACtB,SAAY5sK,EAAK6sK,UAiBnBvnL,EAAQu1L,QAAU,MAWhBviN,YAAYk1C,EAAM4pB,EAAMzrB,EAAKmvK,GAC3B/jN,KAAK6lB,KAAO0I,EAAQ4sL,WACpBn7M,KAAKgkN,QAAUvtK,EACfz2C,KAAKoR,KAAOmd,EAAQ7lB,UAAU+tC,GAG9Bz2C,KAAKikN,SAAW5jJ,EAChBrgE,KAAKqgE,KAAOA,EACZrgE,KAAK40C,IAAMA,EACX50C,KAAKkkN,KAAOC,IACZnkN,KAAK+jN,MAAQA,GAAS,EACtB/jN,KAAK60J,OAAQ,EACb70J,KAAKokN,KAAO,KAEZpkN,KAAKqkN,IAAM,WACT,OAAKrkN,KAAKkkN,MAIE,IAAIpoM,KACF9b,KAAKkkN,MAAQ,IAJlB,CAKX,EAEAlkN,KAAKskN,SAAW,WACd,OAAKtkN,KAAKokN,MAIE,IAAItoM,KACF9b,KAAKokN,MAAQ,IAJlB,CAKX,EAEApkN,KAAK8yJ,IAAM9yJ,KAAKukN,SAClB,CAgBAC,cACE,IAAIz0L,EAAO,KAEX,GAAI/vB,KAAK8yJ,IAAI2xD,aAAezkN,KAAK8yJ,IAAI2xD,YAAYziC,iBAG/C,GAFAjyJ,EAAO/vB,KAAK8yJ,IAAI2xD,YAAYziC,gBAEP,gBAAjBjyJ,EAAKE,QAIP,MAHA1B,EAAQ3uB,MAAM,6BACd2uB,EAAQ3uB,MAAM,iBAAmBI,KAAK8yJ,IAAIziB,cAC1C9hH,EAAQ3uB,MAAM,gBAAkB2uB,EAAQ7lB,UAAU1I,KAAK8yJ,IAAI2xD,cACrD,IAAIvjN,MAAM,oBAEb,GAAIlB,KAAK8yJ,IAAIziB,aAAc,CAKhC,GAHA9hH,EAAQ9d,MAAM,iFACdsf,GAAO,IAAIitI,GAAYC,gBAAgBj9J,KAAK8yJ,IAAIziB,aAAc,mBAAmB2xC,iBAE5EjyJ,EACH,MAAM,IAAI7uB,MAAM,8BACX,GAAI6uB,EAAKqK,cAAc,eAAgB,CAC5C7L,EAAQ3uB,MAAM,8BAAgCmwB,EAAKqK,cAAc,eAAeitB,aAChF94B,EAAQ3uB,MAAM,iBAAmBI,KAAK8yJ,IAAIziB,cAC1C,MAAMzwI,EAAQ,IAAIsB,MAElB,MADAtB,EAAMG,KAAOwuB,EAAQiqL,eAAeC,WAC9B74M,CACR,CACF,CAEA,OAAOmwB,CACT,CAWAw0L,UACE,IAAIzxD,EAAM,KAcV,OAZIhqJ,OAAOonI,gBACT4iB,EAAM,IAAI5iB,eAEN4iB,EAAI4xD,kBACN5xD,EAAI4xD,iBAAiB,4BAEd57M,OAAO2qM,gBAChB3gD,EAAM,IAAI2gD,cAAc,sBAI1B3gD,EAAI3iB,mBAAqBnwI,KAAKqgE,KAAKjwC,KAAK,KAAMpwB,MACvC8yJ,CACT,GA4BFvkI,EAAQ8vL,KAAO,MAAMA,EACnB98M,YAAY0pC,GACVjrC,KAAK2kN,MAAQ15K,EAGbjrC,KAAK40C,IAAMr5B,KAAKgzB,MAAsB,WAAhBhzB,KAAKizB,UAG3BxuC,KAAK20C,IAAM,KAEX30C,KAAK4+M,KAAO,EACZ5+M,KAAKmkM,KAAO,GACZnkM,KAAK8I,OAAS,EACd9I,KAAKi8G,OAAS,EACdj8G,KAAK4kN,WAAa,KAClB5kN,KAAKm0C,oBAAsB,KAC3Bn0C,KAAKu+M,UAAY,EACnB,CASAxnK,aACE,MAAM2qK,EAAW7zJ,EAAO,OAAQ,CAC9B,IAAO7tD,KAAK40C,MACZ,MAASrmB,EAAQmoL,GAAGC,WAatB,OAViB,OAAb32M,KAAK20C,KACP+sK,EAAS1qK,MAAM,CACb,IAAOh3C,KAAK20C,MAIZ30C,KAAK2kN,MAAM9kN,QAAQglN,WAAa7kN,KAAK2kN,MAAMtF,4BAC7Cr/M,KAAK8kN,gBAGApD,CACT,CAQApD,SACEt+M,KAAK40C,IAAMr5B,KAAKgzB,MAAsB,WAAhBhzB,KAAKizB,UAC3BxuC,KAAK20C,IAAM,KACX30C,KAAKi8G,OAAS,EAEVj8G,KAAK2kN,MAAMtF,4BACbv2M,OAAOy2M,eAAe/2M,WAAW,wBAGnCxI,KAAK2kN,MAAMjF,aAAa1/M,KAAK40C,IAC/B,CAQA6tC,SAAS0hH,EAAMya,EAAMC,GACnB7+M,KAAKmkM,KAAOA,GAAQnkM,KAAKmkM,KACzBnkM,KAAK4+M,KAAOA,GAAQ5+M,KAAK4+M,KACzB5+M,KAAKi8G,OAAS,EAEd,MAAMp5E,EAAO7iC,KAAK+2C,aAAaC,MAAM,CACnC,GAAMh3C,KAAK2kN,MAAMzwK,OACjB,WAAY,KACZ,KAAQl0C,KAAKmkM,KACb,KAAQnkM,KAAK4+M,KACb,QAAW,0BACX,IAAO,MACP,eAAgB,MAChB,aAAcrwL,EAAQmoL,GAAGE,OAGvBiI,GACFh8K,EAAKmU,MAAM,CACT,MAAS6nK,IAIb,MAAM2C,EAAcxhN,KAAK2kN,MAAMnD,YAE/BxhN,KAAKu+M,UAAUjvM,KAAK,IAAIif,EAAQu1L,QAAQjhL,EAAKuU,OAAQp3C,KAAK+kN,sBAAsB30L,KAAKpwB,KAAMwhN,EAAYpxL,KAAKpwB,KAAK2kN,QAAS9hL,EAAKuU,OAAOtM,aAAa,SAEnJ9qC,KAAKglN,0BACP,CA2BA7F,QAAQ1vL,EAAKklB,EAAKC,EAAK19B,EAAUitL,EAAMya,EAAMM,GAC3Cl/M,KAAK2kN,MAAMl1L,IAAMA,EACjBzvB,KAAK20C,IAAMA,EACX30C,KAAK40C,IAAMA,EACX50C,KAAK2kN,MAAM1F,iBAAmB/nM,EAC9BlX,KAAK2kN,MAAMzwK,OAAS3lB,EAAQmsL,iBAAiB16M,KAAK2kN,MAAMl1L,KACxDzvB,KAAK2kN,MAAMlH,eAAgB,EAC3Bz9M,KAAK2kN,MAAM30K,WAAY,EACvBhwC,KAAKmkM,KAAOA,GAAQnkM,KAAKmkM,KACzBnkM,KAAK4+M,KAAOA,GAAQ5+M,KAAK4+M,KACzB5+M,KAAK8I,OAASo2M,GAAQl/M,KAAK8I,OAE3B9I,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAO2lK,SAAU,KAC3D,CAsBAmH,SAAS7vL,EAAKvY,EAAUitL,EAAMya,EAAMM,GAClC,MAAM7xL,EAAU1kB,KAAK24B,MAAMx4B,OAAOy2M,eAAen3M,QAAQ,yBAEzD,KAAI,MAAOilB,GAA+CA,EAAQunB,KAAOvnB,EAAQsnB,KAAOtnB,EAAQoC,MAAQ,MAAOA,GAAuClB,EAAQqsL,kBAAkBvtL,EAAQoC,OAASlB,EAAQqsL,kBAAkBnrL,IAE3L,OAAhClB,EAAQksL,eAAehrL,IAAiBlB,EAAQmsL,iBAAiBrtL,EAAQoC,OAASA,IAI3E,CACL,MAAM7vB,EAAQ,IAAIsB,MAAM,qCAExB,MADAtB,EAAMG,KAAO,sBACPH,CACR,CAPEI,KAAK2kN,MAAMhH,UAAW,EAEtB39M,KAAKm/M,QAAQ9xL,EAAQoC,IAAKpC,EAAQsnB,IAAKtnB,EAAQunB,IAAK19B,EAAUitL,EAAMya,EAAMM,EAM9E,CAUA4F,gBACM9kN,KAAK2kN,MAAMlH,cACTz9M,KAAK2kN,MAAMl1L,KAAOzvB,KAAK40C,KAAO50C,KAAK20C,KACrC7rC,OAAOy2M,eAAej3M,QAAQ,uBAAwBK,KAAKC,UAAU,CACnE,IAAO5I,KAAK2kN,MAAMl1L,IAClB,IAAOzvB,KAAK40C,IACZ,IAAO50C,KAAK20C,OAIhB7rC,OAAOy2M,eAAe/2M,WAAW,uBAErC,CAUAg5M,YAAYE,GACV,MAAMuD,EAAMvD,EAAS52K,aAAa,QAElC,GAAY,OAARm6K,GAAwB,cAARA,EAAqB,CAEvC,IAAI5D,EAAOK,EAAS52K,aAAa,aACjCvc,EAAQ3uB,MAAM,2BAA6ByhN,GAC3C,MAAMC,EAAWI,EAASt6J,qBAAqB,YAc/C,OAZa,OAATi6J,GACW,wBAATA,GAAkCC,EAAS59M,OAAS,IACtD29M,EAAO,YAGTrhN,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAOslK,SAAUuJ,IAEzDrhN,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAOslK,SAAU,WAG3D93M,KAAK2kN,MAAMrtK,cAAc+pK,GAElB9yL,EAAQikB,OAAOslK,QACxB,CAIK93M,KAAK20C,MACR30C,KAAK20C,IAAM+sK,EAAS52K,aAAa,QAGnC,MAAMo0K,EAAOwC,EAAS52K,aAAa,YAE/Bo0K,IACFl/M,KAAK8I,OAAS3C,SAAS+4M,EAAM,KAG/B,MAAMN,EAAO8C,EAAS52K,aAAa,QAE/B8zK,IACF5+M,KAAK4+M,KAAOz4M,SAASy4M,EAAM,KAG7B,MAAMza,EAAOud,EAAS52K,aAAa,QAE/Bq5J,IACFnkM,KAAKmkM,KAAOh+L,SAASg+L,EAAM,KAG7B,MAAMygB,EAAalD,EAAS52K,aAAa,cAErC85K,IACF5kN,KAAK4kN,WAAaz+M,SAASy+M,EAAY,IAE3C,CASA9D,YAAY7pK,GACVj3C,KAAKklN,eAAejuK,EACtB,CAQAK,gBACEt3C,KAAK20C,IAAM,KACX30C,KAAK40C,IAAMr5B,KAAKgzB,MAAsB,WAAhBhzB,KAAKizB,UAEvBxuC,KAAK2kN,MAAMtF,4BACbv2M,OAAOy2M,eAAe/2M,WAAW,wBAGnCxI,KAAK2kN,MAAMjF,aAAa1/M,KAAK40C,IAC/B,CASAwsK,cACE,OAAiC,IAA1BphN,KAAKu+M,UAAU76M,MACxB,CASAyhN,2BAA2BjmI,GACzB,MAAMkmI,EAAY/G,EAAKgH,kBAAkBnmI,GAEnComI,EAAetlN,KAAK2kN,MAAMrH,sBAAsBiI,KAAKH,GAEvDE,GACFA,EAAatyM,KAAKhT,KAAMolN,EAE5B,CAaAI,UAAUJ,GACRplN,KAAKi8G,SACL1tF,EAAQplB,KAAK,4BAA8Bi8M,EAAY,uBAAyBplN,KAAKi8G,QAEjFj8G,KAAKi8G,OAAS,GAChBj8G,KAAK2kN,MAAM9D,sBAEf,CAQAe,kBAAkB1qM,GAChBqX,EAAQplB,KAAK,gGAGX+N,EADEA,EACSA,EAASkZ,KAAKpwB,KAAK2kN,OAEnB3kN,KAAK2kN,MAAMnD,YAAYpxL,KAAKpwB,KAAK2kN,OAG9C,MAAM9hL,EAAO7iC,KAAK+2C,aAElB/2C,KAAKu+M,UAAUjvM,KAAK,IAAIif,EAAQu1L,QAAQjhL,EAAKuU,OAAQp3C,KAAK+kN,sBAAsB30L,KAAKpwB,KAAMkX,GAAW2rB,EAAKuU,OAAOtM,aAAa,SAE/H9qC,KAAKglN,0BACP,CAQAnE,uBACE7gN,KAAKq3C,mBACP,CAMAA,oBACE,KAAOr3C,KAAKu+M,UAAU76M,OAAS,GAAG,CAChC,MAAMw7E,EAAMl/E,KAAKu+M,UAAU3qJ,MAE3BsrB,EAAI21E,OAAQ,EACZ31E,EAAI4zE,IAAI+B,QAER31E,EAAI4zE,IAAI3iB,mBAAqB,WAAa,CAC5C,CACF,CAQA6tE,UACE,MAAM5sM,EAAOpR,KAAK2kN,MAAMxrF,MAOxB,GALIn5H,KAAK2kN,MAAMlH,eAA2C,IAA1Bz9M,KAAKu+M,UAAU76M,QAAgC,IAAhB0N,EAAK1N,SAAiB1D,KAAK2kN,MAAM1wK,gBAC9F1lB,EAAQ9d,MAAM,wDACdW,EAAK9B,KAAK,QAGRtP,KAAK2kN,MAAMp+I,OAAf,CAIA,GAAIvmE,KAAKu+M,UAAU76M,OAAS,GAAK0N,EAAK1N,OAAS,EAAG,CAChD,MAAMm/B,EAAO7iC,KAAK+2C,aAElB,IAAK,IAAIhxC,EAAI,EAAGA,EAAIqL,EAAK1N,OAAQqC,IACf,OAAZqL,EAAKrL,KACS,YAAZqL,EAAKrL,GACP88B,EAAKmU,MAAM,CACT,GAAMh3C,KAAK2kN,MAAMzwK,OACjB,WAAY,KACZ,eAAgB,OAChB,aAAc3lB,EAAQmoL,GAAGE,OAG3B/zK,EAAKsU,MAAM/lC,EAAKrL,IAAIoyC,aAKnBn4C,KAAK2kN,MAAMxrF,MAClBn5H,KAAK2kN,MAAMxrF,MAAQ,GAEnBn5H,KAAKu+M,UAAUjvM,KAAK,IAAIif,EAAQu1L,QAAQjhL,EAAKuU,OAAQp3C,KAAK+kN,sBAAsB30L,KAAKpwB,KAAMA,KAAK2kN,MAAM1D,UAAU7wL,KAAKpwB,KAAK2kN,QAAS9hL,EAAKuU,OAAOtM,aAAa,SAE5J9qC,KAAKglN,0BACP,CAEA,GAAIhlN,KAAKu+M,UAAU76M,OAAS,EAAG,CAC7B,MAAM+hN,EAAezlN,KAAKu+M,UAAU,GAAG8F,MAER,OAA3BrkN,KAAKu+M,UAAU,GAAG6F,MAChBpkN,KAAKu+M,UAAU,GAAG+F,WAAa/oM,KAAKgzB,MAAMhgB,EAAQ8qL,kBAAoBr5M,KAAKmkM,OAC7EnkM,KAAKglN,2BAILS,EAAelqM,KAAKgzB,MAAMhgB,EAAQjvB,QAAUU,KAAKmkM,QACnD51K,EAAQplB,KAAK,WAAanJ,KAAKu+M,UAAU,GAAG14L,GAAK,oBAAsBtK,KAAKgzB,MAAMhgB,EAAQjvB,QAAUU,KAAKmkM,MAAQ,gCAEjHnkM,KAAKglN,2BAET,CA1CA,CA2CF,CAYAl1M,yBAAyBovE,EAAKwmI,GAC5B,IAAIN,EAEJ,GAA2B,IAAvBlmI,EAAI4zE,IAAIh/G,WACV,IACEsxK,EAAYlmI,EAAI4zE,IAAIr+I,MACtB,CAAE,MAAOjF,GAGP+e,EAAQ3uB,MAAM,mEAA0EwlN,EAC1F,CAOF,YAJyB,IAAdA,IACTA,EAA2B,iBAARM,EAAmBA,EAAM,GAGvCN,CACT,CAeAL,sBAAsB1kJ,EAAM6e,GAG1B,GAFA3wD,EAAQ9d,MAAM,cAAgByuE,EAAIr5D,GAAK,IAAMq5D,EAAI6kI,MAAQ,qBAAuB7kI,EAAI4zE,IAAIh/G,YAEpForC,EAAI21E,MAEN,YADA31E,EAAI21E,OAAQ,GAId,GAA2B,IAAvB31E,EAAI4zE,IAAIh/G,WAEV,OAGF,MAAMsxK,EAAY/G,EAAKgH,kBAAkBnmI,GAIzC,GAFAl/E,KAAKm0C,oBAAsB+qC,EAAI4zE,IAAI6yD,wBAE/B3lN,KAAK2kN,MAAM1wK,eAAiBmxK,GAAa,IAK3C,OAJAplN,KAAKwlN,UAAUJ,QAEfplN,KAAKmlN,2BAA2BjmI,GAKlC,MAAM0mI,EAAS5lN,KAAKu+M,UAAU,KAAOr/H,EAC/B2mI,EAAS7lN,KAAKu+M,UAAU,KAAOr/H,EAC/B4mI,EAAgBV,EAAY,GAAKA,EAAY,IAC7CW,EAAmB7mI,EAAI6kI,MAAQ/jN,KAAK2kN,MAAMzxK,YAE5C4yK,GAAiBC,KAEnB/lN,KAAKgmN,eAAe9mI,GAEpB3wD,EAAQ9d,MAAM,cAAgByuE,EAAIr5D,GAAK,2BAGvB,MAAdu/L,IAMES,GAAUD,GAAU5lN,KAAKu+M,UAAU76M,OAAS,GAAK1D,KAAKu+M,UAAU,GAAG8F,MAAQ9oM,KAAKgzB,MAAMhgB,EAAQ8qL,kBAAoBr5M,KAAKmkM,QACzHnkM,KAAKimN,gBAAgB,GAGvBjmN,KAAK2kN,MAAMjF,aAAax5M,OAAOg5E,EAAItqC,KAAO,GAE1CrmB,EAAQ9d,MAAM,cAAgByuE,EAAIr5D,GAAK,IAAMq5D,EAAI6kI,MAAQ,YACzD1jJ,EAAK6e,GAELl/E,KAAKi8G,OAAS,GACS,IAAdmpG,GAAmBA,GAAa,KAAOA,EAAY,KAAOA,GAAa,MAEhF72L,EAAQ3uB,MAAM,cAAgBs/E,EAAIr5D,GAAK,IAAMq5D,EAAI6kI,MAAQ,UAAYqB,EAAY,aAEjFplN,KAAKwlN,UAAUJ,GAEfplN,KAAKmlN,2BAA2BjmI,GAE5BkmI,GAAa,KAAOA,EAAY,MAClCplN,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAO0lK,cAAe,MAE9Dl4M,KAAK2kN,MAAMrtK,kBAGb/oB,EAAQ3uB,MAAM,cAAgBs/E,EAAIr5D,GAAK,IAAMq5D,EAAI6kI,MAAQ,UAAYqB,EAAY,aAG9EU,GAAkBC,EAEZA,IAAqB/lN,KAAK2kN,MAAM30K,WACzChwC,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAOslK,SAAU,aAFzD93M,KAAKglN,0BAIT,CAYAkB,gBAAgBngN,GACd,IAAIm5E,EAAMl/E,KAAKu+M,UAAUx4M,GAEzB,MAAMq/M,EAAY/G,EAAKgH,kBAAkBnmI,GAAM,GAG/C,GAAIA,EAAI6kI,MAAQ/jN,KAAK2kN,MAAMzxK,WAGzB,YAFAlzC,KAAK2kN,MAAM9D,uBAKb,MAAM4E,EAAevmI,EAAImlI,MACnB8B,GAAmBxiM,MAAM8hM,IAAiBA,EAAelqM,KAAKgzB,MAAMhgB,EAAQjvB,QAAUU,KAAKmkM,MAC3FiiB,EAAiC,OAAblnI,EAAIklI,MAAiBllI,EAAIolI,WAAa/oM,KAAKgzB,MAAMhgB,EAAQ8qL,kBAAoBr5M,KAAKmkM,MACtGkiB,EAAsC,IAAvBnnI,EAAI4zE,IAAIh/G,aAAqBsxK,EAAY,GAAKA,GAAa,KAgBhF,IAdIe,GAAmBC,GAAqBC,KACtCD,GACF73L,EAAQ3uB,MAAO,WAAUI,KAAKu+M,UAAUx4M,GAAG8f,wCAG7Cq5D,EAAI21E,OAAQ,EACZ31E,EAAI4zE,IAAI+B,QAER31E,EAAI4zE,IAAI3iB,mBAAqB,WAAa,EAE1CnwI,KAAKu+M,UAAUx4M,GAAK,IAAIwoB,EAAQu1L,QAAQ5kI,EAAI8kI,QAAS9kI,EAAI+kI,SAAU/kI,EAAItqC,IAAKsqC,EAAI6kI,OAChF7kI,EAAMl/E,KAAKu+M,UAAUx4M,IAGI,IAAvBm5E,EAAI4zE,IAAIh/G,WAAkB,CAC5BvlB,EAAQ9d,MAAM,cAAgByuE,EAAIr5D,GAAK,IAAMq5D,EAAI6kI,MAAQ,YAEzD,IACE,MAAMuC,EAAetmN,KAAK2kN,MAAM9kN,QAAQ0mN,aAAe,0BACvDrnI,EAAI4zE,IAAIxiB,KAAK,OAAQtwI,KAAK2kN,MAAM31K,SAAShvC,KAAK2kN,MAAM9kN,QAAQwoE,WAEpB,IAA7B6W,EAAI4zE,IAAIviB,kBAEjBrxD,EAAI4zE,IAAIviB,iBAAiB,eAAgB+1E,GAGvCtmN,KAAK2kN,MAAM9kN,QAAQ2mN,kBACrBtnI,EAAI4zE,IAAI0zD,iBAAkB,EAE9B,CAAE,MAAOC,GASP,OARAl4L,EAAQ3uB,MAAM,oBAAsB6mN,EAAGp3K,YAElCrvC,KAAK2kN,MAAM30K,WACdhwC,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAOslK,SAAU,oBAG3D93M,KAAK2kN,MAAMhrM,YAGb,CAIA,MAAM+sM,EAAWA,KAGf,GAFAxnI,EAAIglI,KAAO,IAAIpoM,KAEX9b,KAAK2kN,MAAM9kN,QAAQ8mN,cAAe,CACpC,MAAM1wK,EAAUj2C,KAAK2kN,MAAM9kN,QAAQ8mN,cAEnC,IAAK,MAAM5iI,KAAU9tC,EACf50C,OAAOD,UAAUye,eAAe7M,KAAKijC,EAAS8tC,IAChD7E,EAAI4zE,IAAIviB,iBAAiBxsD,EAAQ9tC,EAAQ8tC,GAG/C,CAEA7E,EAAI4zE,IAAI18G,KAAK8oC,EAAI9tE,KAAK,EAKxB,GAAI8tE,EAAI6kI,MAAQ,EAAG,CAGjB,MAAM6C,EAAsF,IAA5ErrM,KAAK4yB,IAAI5yB,KAAKgzB,MAAMhgB,EAAQjvB,QAAUU,KAAKmkM,MAAO5oL,KAAKkzB,IAAIywC,EAAI6kI,MAAO,IACtFtqL,YAAW,WAETitL,GACF,GAAGE,EACL,MACEF,IAGFxnI,EAAI6kI,QAEA/jN,KAAK2kN,MAAMlF,YAAclxL,EAAQouL,WAAWv7M,UAAUq+M,YACpDvgI,EAAI8kI,QAAQrgK,WAAa3jD,KAAKmhN,OAASjiI,EAAI8kI,QAAQzjC,WAAW78K,OAChE1D,KAAK2kN,MAAMlF,UAAUvgI,EAAI8kI,QAAQzjC,WAAW,IAE5CvgL,KAAK2kN,MAAMlF,UAAUvgI,EAAI8kI,UAIzBhkN,KAAK2kN,MAAM/lI,YAAcrwD,EAAQouL,WAAWv7M,UAAUw9E,WACxD5+E,KAAK2kN,MAAM/lI,UAAUM,EAAI9tE,KAE7B,MACEmd,EAAQ9d,MAAM,qBAA6B,IAAN1K,EAAU,QAAU,UAAY,8BAAgCm5E,EAAI4zE,IAAIh/G,WAEjH,CASAkyK,eAAe9mI,GACb3wD,EAAQ9d,MAAM,oBAEd,IAAK,IAAI1K,EAAI/F,KAAKu+M,UAAU76M,OAAS,EAAGqC,GAAK,EAAGA,IAC1Cm5E,IAAQl/E,KAAKu+M,UAAUx4M,IACzB/F,KAAKu+M,UAAUhvM,OAAOxJ,EAAG,GAK7Bm5E,EAAI4zE,IAAI3iB,mBAAqB,WAAa,EAE1CnwI,KAAKglN,0BACP,CASAiB,gBAAgBlgN,GACd,MAAMm5E,EAAMl/E,KAAKu+M,UAAUx4M,GAEV,OAAbm5E,EAAIklI,OACNllI,EAAIklI,KAAO,IAAItoM,MAGjB9b,KAAKkmN,gBAAgBngN,EACvB,CAeAm7M,WAAWhiI,GACT,IACE,OAAOA,EAAIslI,aACb,CAAE,MAAOh1M,GACP,GAAkB,gBAAdA,EAAEjP,QACJ,MAAMiP,EAGRxP,KAAK2kN,MAAMhrM,WAAW,sBACxB,CACF,CAUAurM,eAAejuK,GACb1oB,EAAQ9d,MAAM,6BAEd,MAAMoyB,EAAO7iC,KAAK+2C,aAAaC,MAAM,CACnC5zC,KAAM,cAGJ6zC,GACFpU,EAAKsU,MAAMF,EAAKG,QAGlB,MAAM8nC,EAAM,IAAI3wD,EAAQu1L,QAAQjhL,EAAKuU,OAAQp3C,KAAK+kN,sBAAsB30L,KAAKpwB,KAAMA,KAAK2kN,MAAM1D,UAAU7wL,KAAKpwB,KAAK2kN,QAAS9hL,EAAKuU,OAAOtM,aAAa,QAEpJ9qC,KAAKu+M,UAAUjvM,KAAK4vE,GAEpBl/E,KAAKglN,0BACP,CAQAv9H,QACEpuD,aAAar5B,KAAK2kN,MAAMpH,cAExBv9M,KAAKglN,2BAELhlN,KAAK2kN,MAAMpH,aAAe9jL,YAAW,IAAMz5B,KAAK2kN,MAAM3G,WAAW,IACnE,CAOAgC,eACEhgN,KAAKglN,2BAEL3rL,aAAar5B,KAAK2kN,MAAMpH,aAC1B,CAUAyH,2BACOhlN,KAAKu+M,UAGRhwL,EAAQ9d,MAAM,wCAA0CzQ,KAAKu+M,UAAU76M,OAAS,aAFhF6qB,EAAQ9d,MAAM,2DAKXzQ,KAAKu+M,WAAuC,IAA1Bv+M,KAAKu+M,UAAU76M,SAIlC1D,KAAKu+M,UAAU76M,OAAS,GAC1B1D,KAAKkmN,gBAAgB,GAGnBlmN,KAAKu+M,UAAU76M,OAAS,GAAK6X,KAAK4uL,IAAInqM,KAAKu+M,UAAU,GAAG3pK,IAAM50C,KAAKu+M,UAAU,GAAG3pK,KAAO50C,KAAK8I,QAC9F9I,KAAKkmN,gBAAgB,GAEzB,GAeF33L,EAAQ8vL,KAAKj9M,UAAU+/M,MAAQ,KA2B/B5yL,EAAQ6vL,UAAY,MAWlB78M,YAAY0pC,GACVjrC,KAAK2kN,MAAQ15K,EACbjrC,KAAKmhN,MAAQ,UACb,MAAMnyK,EAAU/D,EAAW+D,QAE3B,GAA+B,IAA3BA,EAAQpuC,QAAQ,QAA4C,IAA5BouC,EAAQpuC,QAAQ,QAAe,CAGjE,IAAIimN,EAAc,GAEkB,OAAhC57K,EAAWprC,QAAQslB,UAAkD,WAA7Brc,OAAOg2C,SAAS35B,SAC1D0hM,GAAe,KAEfA,GAAe,MAGjBA,GAAe,MAAQ/9M,OAAOg2C,SAASgoK,KAEV,IAAzB93K,EAAQpuC,QAAQ,KAClBimN,GAAe/9M,OAAOg2C,SAASioF,SAAW/3F,EAE1C63K,GAAe73K,EAGjB/D,EAAW+D,QAAU63K,CACvB,CACF,CASAE,eACE,OAAOl5J,EAAO,OAAQ,CACpB,MAASt/B,EAAQmoL,GAAGW,QACpB,GAAMr3M,KAAK2kN,MAAMzwK,OACjB,QAAW,OAEf,CAYA8yK,kBAAkBtF,EAAUuF,GAC1B,IAAIhrG,EAQJ,GALEA,EADEylG,EAASj6J,uBACFi6J,EAASj6J,uBAAuBl5B,EAAQmoL,GAAGr3C,OAAQ,SAEnDqiD,EAASt6J,qBAAqB,gBAGnB,IAAlB60D,EAAOv4G,OACT,OAAO,EAGT,MAAM9D,EAAQq8G,EAAO,GACrB,IAAI8kG,EAAY,GACZ1/J,EAAO,GAGX,IAAK,IAAIt7C,EAAI,EAAGA,EAAInG,EAAM2gL,WAAW78K,OAAQqC,IAAK,CAChD,MAAMyJ,EAAI5P,EAAM2gL,WAAWx6K,GAE3B,GALS,wCAKLyJ,EAAEs7B,aAAa,SACjB,MAGiB,SAAft7B,EAAEm0C,SACJtC,EAAO7xC,EAAE63C,YAET05J,EAAYvxM,EAAEm0C,QAElB,CAEA,IAAIujK,EAAc,2BAkBlB,OAfEA,GADEnG,GAGa,UAGb1/J,IACF6lK,GAAe,MAAQ7lK,GAGzB9yB,EAAQ3uB,MAAMsnN,GAEdlnN,KAAK2kN,MAAM7tK,qBAAqBmwK,EAAelG,GAE/C/gN,KAAK2kN,MAAMrtK,iBAEJ,CACT,CASAgnK,SAGA,CASA77H,WAEEziF,KAAK01C,eAEL11C,KAAK4zC,OAAS,IAAIG,EAAU/zC,KAAK2kN,MAAM31K,QAAS,QAEhDhvC,KAAK4zC,OAAOq0C,OAAS,IAAMjoF,KAAKmnN,UAEhCnnN,KAAK4zC,OAAO9Y,QAAUtrB,GAAKxP,KAAKkuJ,SAAS1+I,GAEzCxP,KAAK4zC,OAAO20C,QAAU/4E,GAAKxP,KAAK21C,SAASnmC,GAGzCxP,KAAK4zC,OAAOs0C,UAAY3nF,GAAWP,KAAKonN,kBAAkB7mN,EAC5D,CAWAihN,YAAYE,GAGV,GAFc1hN,KAAKgnN,kBAAkBtF,EAAUnzL,EAAQikB,OAAOslK,UAG5D,OAAOvpL,EAAQikB,OAAOslK,QAE1B,CAWAuP,mBAAmB9mN,GACjB,IAAIX,GAAQ,EAEZ,MAAMi8M,EAAKt7M,EAAQuqC,aAAa,SAEd,iBAAP+wK,EACTj8M,EAAQ,4BACCi8M,IAAOttL,EAAQmoL,GAAGW,UAC3Bz3M,EAAQ,4BAA8Bi8M,GAGxC,MAAMpvK,EAAMlsC,EAAQuqC,aAAa,WAQjC,MANmB,iBAAR2B,EACT7sC,EAAQ,8BACS,QAAR6sC,IACT7sC,EAAQ,8BAAgC6sC,IAGtC7sC,IACFI,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAOslK,SAAUl4M,GAEzDI,KAAK2kN,MAAMrtK,iBAEJ,EAIX,CASA8vK,kBAAkB7mN,GAChB,GAAuC,IAAnCA,EAAQ6Q,KAAKxQ,QAAQ,WAAqD,IAAlCL,EAAQ6Q,KAAKxQ,QAAQ,SAAgB,CAE/E,MAAMwQ,EAAO7Q,EAAQ6Q,KAAKg+B,QAAQ,mBAAoB,IACtD,GAAa,KAATh+B,EAAa,OACjB,MAAMk2M,GAAc,IAAItqD,GAAYC,gBAAgB7rJ,EAAM,YAAY4wK,gBAEtEhiL,KAAK2kN,MAAMnF,SAAS8H,GAEpBtnN,KAAK2kN,MAAM90K,SAAStvC,EAAQ6Q,MAGxBpR,KAAKqnN,mBAAmBC,IAE1BtnN,KAAKwhN,YAAY8F,EAErB,MAAO,GAAwC,IAApC/mN,EAAQ6Q,KAAKxQ,QAAQ,WAAkB,CAGhD,MAAM2mN,GAAgB,IAAIvqD,GAAYC,gBAAgB18J,EAAQ6Q,KAAM,YAAY4wK,gBAEhFhiL,KAAK2kN,MAAMnF,SAAS+H,GAEpBvnN,KAAK2kN,MAAM90K,SAAStvC,EAAQ6Q,MAE5B,MAAMo2M,EAAUD,EAAcz8K,aAAa,iBAE3C,GAAI08K,EAAS,CACX,MAAMx4K,EAAUhvC,KAAK2kN,MAAM31K,SAEFA,EAAQpuC,QAAQ,SAAW,GAAK4mN,EAAQ5mN,QAAQ,SAAW,GAAKouC,EAAQpuC,QAAQ,QAAU,KAGjHZ,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAO4lK,SAAU,gDAEzDp4M,KAAK2kN,MAAMl3M,QAEXzN,KAAK2kN,MAAM31K,QAAUw4K,EAErBxnN,KAAKyiF,WAET,MACEziF,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAOslK,SAAU,2BAEzD93M,KAAK2kN,MAAMrtK,eAEf,KAAO,CACLt3C,KAAKynN,yBAEL,MAAMhtF,EAASz6H,KAAK0nN,YAAYnnN,EAAQ6Q,MAElCqlC,GAAO,IAAIumH,GAAYC,gBAAgBxiC,EAAQ,YAAYunD,gBAEjEhiL,KAAK2kN,MAAMnD,YAAY/qK,EAAM,KAAMl2C,EAAQ6Q,KAC7C,CACF,CAUAq2M,yBACEznN,KAAK4zC,OAAOs0C,UAAY77D,GAAKrsB,KAAKg4C,WAAW3rB,EAC/C,CAWAy0L,YAAY7pK,GACV,GAAIj3C,KAAK4zC,QAAU5zC,KAAK4zC,OAAOE,aAAeC,EAAU4zK,OAAQ,CAC1D1wK,GACFj3C,KAAK2kN,MAAMvuK,KAAKa,GAGlB,MAAMl9B,EAAQ8zC,EAAO,QAAS,CAC5B,MAASt/B,EAAQmoL,GAAGW,UAGtBr3M,KAAK2kN,MAAMlF,UAAU1lM,EAAMq9B,QAE3B,MAAMwwK,EAAcr5L,EAAQ7lB,UAAUqR,GAEtC/Z,KAAK2kN,MAAM/lI,UAAUgpI,GAErB,IACE5nN,KAAK4zC,OAAOwC,KAAKwxK,EACnB,CAAE,MAAOp4M,GACP+e,EAAQplB,KAAK,+BACf,CACF,CAEAswB,YAAW,IAAMz5B,KAAK2kN,MAAMrtK,iBAAiB,EAC/C,CAQAA,gBACE/oB,EAAQ9d,MAAM,uCAEdzQ,KAAK01C,cACP,CAOAgyK,YAAYrxK,GAEV,MAAO,YAAcA,EAAS,YAChC,CAQAX,eACE,GAAI11C,KAAK4zC,OACP,IACE5zC,KAAK4zC,OAAO20C,QAAU,KACtBvoF,KAAK4zC,OAAO9Y,QAAU,KACtB96B,KAAK4zC,OAAOs0C,UAAY,KACxBloF,KAAK4zC,OAAO75B,OACd,CAAE,MAAOvK,GACP+e,EAAQ9d,MAAMjB,EAAEjP,QAClB,CAGFP,KAAK4zC,OAAS,IAChB,CASAwtK,cAEE,OAAO,CACT,CAMAzrK,SAASnmC,GACHxP,KAAK2kN,MAAM30K,YAAchwC,KAAK2kN,MAAM1wK,eACtC1lB,EAAQ3uB,MAAM,iCAEdI,KAAK2kN,MAAMrtK,iBACF9nC,GAAgB,OAAXA,EAAEosE,OAAkB57E,KAAK2kN,MAAM30K,WAAahwC,KAAK4zC,QAK/DrlB,EAAQ3uB,MAAM,iCAEdI,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAOslK,SAAU,0EAEzD93M,KAAK2kN,MAAMrtK,iBAEX/oB,EAAQ9d,MAAM,mBAElB,CAQAmxM,kBAAkB1qM,GAChBqX,EAAQ3uB,MAAM,6DAEdI,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAOslK,SAAUvpL,EAAQiqL,eAAeI,cAE5E1hM,GACFA,EAASlE,KAAKhT,KAAK2kN,OAGrB3kN,KAAK2kN,MAAMrtK,eACb,CAQAupK,uBAAwB,CAOxBxpK,oBAAqB,CAUrB62G,SAAStuJ,GACP2uB,EAAQ3uB,MAAM,mBAAqB+I,KAAKC,UAAUhJ,IAElDI,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAOslK,SAAU,0EAEzD93M,KAAK8gN,aACP,CAQA9C,UACE,MAAM5sM,EAAOpR,KAAK2kN,MAAMxrF,MAExB,GAAI/nH,EAAK1N,OAAS,IAAM1D,KAAK2kN,MAAMp+I,OAAQ,CACzC,IAAK,IAAIxgE,EAAI,EAAGA,EAAIqL,EAAK1N,OAAQqC,IAC/B,GAAgB,OAAZqL,EAAKrL,GAAa,CACpB,IAAIswC,EAGFA,EADc,YAAZjlC,EAAKrL,GACE/F,KAAK+mN,eAAe3vK,OAEpBhmC,EAAKrL,GAGhB,MAAM8hN,EAAYt5L,EAAQ7lB,UAAU2tC,GAEpCr2C,KAAK2kN,MAAMlF,UAAUppK,GAErBr2C,KAAK2kN,MAAM/lI,UAAUipI,GAErB7nN,KAAK4zC,OAAOwC,KAAKyxK,EACnB,CAGF7nN,KAAK2kN,MAAMxrF,MAAQ,EACrB,CACF,CA0BAnhF,WAAWz3C,GACT,IAAIk2C,EAEJ,MAAM18B,EAAQ,wDAEd,GAAIxZ,EAAQ6Q,OAAS2I,EASnB,OARA/Z,KAAK2kN,MAAM90K,SAAS91B,GAEpB/Z,KAAK2kN,MAAMnF,SAASj/M,QAEfP,KAAK2kN,MAAM1wK,eACdj0C,KAAK2kN,MAAMrtK,iBAIR,GAAsC,IAAlC/2C,EAAQ6Q,KAAK69B,OAAO,WAI7B,GAFAwH,GAAO,IAAIumH,GAAYC,gBAAgB18J,EAAQ6Q,KAAM,YAAY4wK,iBAE5DhiL,KAAKqnN,mBAAmB5wK,GAC3B,WAEG,CACL,MAAMrlC,EAAOpR,KAAK0nN,YAAYnnN,EAAQ6Q,MAEtCqlC,GAAO,IAAIumH,GAAYC,gBAAgB7rJ,EAAM,YAAY4wK,eAC3D,CAEA,OAAIhiL,KAAKgnN,kBAAkBvwK,EAAMloB,EAAQikB,OAAOwsH,YAAhD,EAKIh/J,KAAK2kN,MAAM1wK,eAA8C,aAA7BwC,EAAK+sI,WAAW7/H,UAAoE,gBAAzClN,EAAK+sI,WAAW14I,aAAa,SACtG9qC,KAAK2kN,MAAMnF,SAAS/oK,QAEpBz2C,KAAK2kN,MAAM90K,SAASthB,EAAQ7lB,UAAU+tC,UAOxCz2C,KAAK2kN,MAAM1D,UAAUxqK,EAAMl2C,EAAQ6Q,KACrC,CAQA+1M,UACE54L,EAAQ9d,MAAM,kBAEd,MAAMgG,EAAQzW,KAAK+mN,eAEnB/mN,KAAK2kN,MAAMlF,UAAUhpM,EAAM2gC,QAE3B,MAAM0wK,EAAcv5L,EAAQ7lB,UAAU+N,GAEtCzW,KAAK2kN,MAAM/lI,UAAUkpI,GAErB9nN,KAAK4zC,OAAOwC,KAAK0xK,EACnB,CAcA5G,WAAW7qK,GAET,OAAOA,CACT,CAQAoxC,QACEznF,KAAK2kN,MAAM/uK,OACb,CAOAoqK,eACE3mL,aAAar5B,KAAK2kN,MAAMpH,cAExBv9M,KAAK2kN,MAAM3G,QAAQ5tL,KAAKpwB,KAAK2kN,MAA7B3kN,EACF,GAUF,MAAM+nN,EAAO,CAAC,EACdA,EAAY,MAAIx5L,EAAQuqL,SAASzrC,MACjC06C,EAAW,KAAIx5L,EAAQuqL,SAASxrC,KAChCy6C,EAAW,KAAIx5L,EAAQuqL,SAAStrC,KAChCu6C,EAAY,MAAIx5L,EAAQuqL,SAAS95C,MACjC+oD,EAAY,MAAIx5L,EAAQuqL,SAASC,MAKjCxqL,EAAQ4vL,gBAAkB,cAA8B5vL,EAAQ6vL,UAU9D78M,YAAY0pC,GACVrjC,MAAMqjC,GACNjrC,KAAK2kN,MAAQ15K,EACbjrC,KAAK8kE,OAAS,IAAIkjJ,aAAahoN,KAAK2kN,MAAM9kN,QAAQilE,OAAQ,2BAE1D9kE,KAAK8kE,OAAOhqC,QAAUtrB,IACpB,IAAIyrM,EAEqB,QAAxBA,EAAW/xM,eAAkC,IAAb+xM,GAA+BA,EAASr7M,MAAM4P,GAC/E+e,EAAQte,IAAIse,EAAQuqL,SAAS95C,MAAQ,wBAAuBxvJ,IAAI,CAEpE,CAEIokC,aACF,MAAO,CACL,KAAQtK,GAAOtpC,KAAK8kE,OAAO7/C,KAAKrY,YAAY,CAAC,OAAQ08B,IAEzD,CAEAm5C,WACEziF,KAAKioN,gBAAkB57L,GAAKrsB,KAAKonN,kBAAkB/6L,GAEnDrsB,KAAK8kE,OAAO7/C,KAAKxO,QAEjBzW,KAAK8kE,OAAO7/C,KAAKijE,UAAYv1D,GAAM3yB,KAAK46H,iBAAiBjoG,GAEzD3yB,KAAK8kE,OAAO7/C,KAAKrY,YAAY,CAAC,WAAY5M,KAAK2kN,MAAM31K,QAAShvC,KAAK2kN,MAAMl1L,KAC3E,CAEA0vL,QAAQjoM,GACNlX,KAAKioN,gBAAkB57L,GAAKrsB,KAAKg4C,WAAW3rB,GAE5CrsB,KAAK2kN,MAAM1F,iBAAmB/nM,EAC9BlX,KAAK8kE,OAAO7/C,KAAKxO,QAEjBzW,KAAK8kE,OAAO7/C,KAAKijE,UAAYv1D,GAAM3yB,KAAK46H,iBAAiBjoG,GAEzD3yB,KAAK8kE,OAAO7/C,KAAKrY,YAAY,CAAC,UAAW5M,KAAK2kN,MAAM31K,SACtD,CAEAk5K,gBAAgBzzM,EAAQgb,GAClBhb,IAAW8Z,EAAQikB,OAAO2lK,UAC5Bn4M,KAAK2kN,MAAMl1L,IAAMA,EACjBzvB,KAAK2kN,MAAMlH,eAAgB,EAC3Bz9M,KAAK2kN,MAAM30K,WAAY,EACvBhwC,KAAK2kN,MAAMhH,UAAW,EAEtB39M,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAO2lK,WACtC1jM,IAAW8Z,EAAQikB,OAAO+lK,aACnCv4M,KAAK2kN,MAAMlH,eAAgB,EAC3Bz9M,KAAK2kN,MAAM30K,WAAY,EACvBhwC,KAAK2kN,MAAMhH,UAAW,EAEtB39M,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAO+lK,YAEnD,CAEAuI,YAAYhtK,EAAYmD,GACtBA,GAAQj3C,KAAK2kN,MAAMvuK,KAAKa,GACxB,MAAMl9B,EAAQ8zC,EAAO,QAAS,CAC5B,MAASt/B,EAAQmoL,GAAGW,UAGtBr3M,KAAK2kN,MAAMlF,UAAU1lM,EAAMq9B,QAE3B,MAAMwwK,EAAcr5L,EAAQ7lB,UAAUqR,GAEtC/Z,KAAK2kN,MAAM/lI,UAAUgpI,GAErB5nN,KAAK8kE,OAAO7/C,KAAKrY,YAAY,CAAC,OAAQg7M,IAEtC5nN,KAAK2kN,MAAMrtK,eACb,CAEA3B,SAASnmC,GACHxP,KAAK2kN,MAAM30K,YAAchwC,KAAK2kN,MAAM1wK,eACtC1lB,EAAQ3uB,MAAM,iCAEdI,KAAK2kN,MAAMrtK,iBACF9nC,GAAgB,OAAXA,EAAEosE,OAAkB57E,KAAK2kN,MAAM30K,WAK7CzhB,EAAQ3uB,MAAM,iCAEdI,KAAK2kN,MAAM7tK,qBAAqBvoB,EAAQikB,OAAOslK,SAAU,0EAEzD93M,KAAK2kN,MAAMrtK,iBAEX/oB,EAAQ9d,MAAM,mBAElB,CAEAilC,eACE11C,KAAK8kE,OAAO7/C,KAAKrY,YAAY,CAAC,gBAChC,CAUA66M,yBACEznN,KAAKioN,gBAAkB57L,GAAKrsB,KAAKg4C,WAAW3rB,EAC9C,CAMAuuG,iBAAiBjoG,GACf,MAAM,KACJvhB,GACEuhB,EACEw1L,EAAc/2M,EAAK,GAEzB,GAAoB,eAAhB+2M,EACFnoN,KAAKioN,gBAAgB72M,EAAK,SACrB,GAAI+2M,KAAenoN,KACxB,IACEA,KAAKmoN,GAAa51M,MAAMvS,KAAM2yB,EAAGvhB,KAAK/Q,MAAM,GAC9C,CAAE,MAAOmP,GACP+e,EAAQte,IAAIse,EAAQuqL,SAAS95C,MAAOxvJ,EACtC,MACK,GAAoB,QAAhB24M,EAAuB,CAChC,MAAM7zL,EAAQljB,EAAK,GACbrB,EAAMqB,EAAK,GACjBmd,EAAQte,IAAI83M,EAAKzzL,GAAQvkB,EAC3B,MACEwe,EAAQte,IAAIse,EAAQuqL,SAAS95C,MAAQ,2CAA0C5tJ,IAEnF,GAIF2hM,EAASllJ,OAASg2J,EAAKh2J,OACvBklJ,EAASzhK,IAAMuyK,EAAKvyK,IACpByhK,EAAS76J,KAAO2rK,EAAK3rK,KACrB66J,EAAS77J,MAAQ2sK,EAAK3sK,MACtB67J,EAASxkL,QAAUs1L,EAAKt1L,QACxB,MAAM,SACJqnL,GACE3sK,EAEJvxC,EAAQm2D,OAASA,EACjBn2D,EAAQ45C,IAAMA,EACd55C,EAAQwgD,KAAOA,EACfxgD,EAAQw/C,MAAQA,EAChBx/C,EAAQ62B,QAAUA,EAClB72B,EAAQk+M,SAAWA,EAEnBv0M,OAAOwG,eAAenQ,EAAS,aAAc,CAAEiQ,OAAO,GAElE,CA/xM2ElQ,CAAQC,mDCCnF62B,EAAAA,QAAQglB,oBAAoB,QAC5B,CACI+xF,YAAa,KACbr4F,YAAc,GACdnX,UAAY,GACZsyL,OAAS,GAOT9rM,KAAM,SAAS+rM,GAEfroN,KAAKslI,YAAc+iF,EACfroN,KAAKitC,YAAc,GACnBjtC,KAAK81B,UAAc,GACnB91B,KAAKooN,OAAc,GAEnBC,EAAK7zK,WAAWx0C,KAAKsoN,aAAal4L,KAAKpwB,MAAOuuB,EAAAA,QAAQmoL,GAAGO,WAAY,KAAM,MAAO,KAAM,MAExFoR,EAAK7zK,WAAWx0C,KAAKuoN,cAAcn4L,KAAKpwB,MAAOuuB,EAAAA,QAAQmoL,GAAGQ,YAAa,KAAM,MAAO,KAAM,OAa9FsR,YAAa,SAASz9K,EAAU3nC,EAAMrD,EAAMokL,GAExC,IAAK,IAAIp+K,EAAE,EAAGA,EAAE/F,KAAKitC,YAAYvpC,OAAQqC,IAErC,GAAI/F,KAAKitC,YAAYlnC,GAAGglC,UAAYA,GAChC/qC,KAAKitC,YAAYlnC,GAAG3C,MAAQA,GAC5BpD,KAAKitC,YAAYlnC,GAAGhG,MAAQA,GAC5BC,KAAKitC,YAAYlnC,GAAGo+K,MAAQA,EAE5B,OAAO,EAIf,OADAnkL,KAAKitC,YAAY39B,KAAK,CAACy7B,SAAUA,EAAU3nC,KAAMA,EAAMrD,KAAMA,EAAMokL,KAAMA,KAClE,GAUX34I,WAAY,SAASi9K,GAEjB,IAAK,IAAI1iN,EAAE,EAAGA,EAAE/F,KAAK81B,UAAUpyB,OAAQqC,IAElC,GAAI/F,KAAK81B,UAAU/vB,IAAM0iN,EACrB,OAAO,EAGhB,OADAzoN,KAAK81B,UAAUxmB,KAAKm5M,IACb,GAUX58K,cAAe,SAAS48K,GAEpB,IAAK,IAAI1iN,EAAE,EAAGA,EAAE/F,KAAK81B,UAAUpyB,OAAQqC,IAElC,GAAI/F,KAAK81B,UAAU/vB,KAAO0iN,EAEtB,OADAzoN,KAAK81B,UAAUvmB,OAAOxJ,EAAE,IACjB,EAGhB,OAAO,GAaX2iN,QAAS,SAASj5L,EAAK1vB,EAAMgwB,EAAM44L,GAE/B,QAAI54L,IAAS44L,IAEb3oN,KAAKooN,OAAO94M,KAAK,CAACmgB,IAAKA,EAAK1vB,KAAMA,EAAMgwB,KAAMA,EAAM44L,UAAWA,IACxD,KAUXh/M,KAAM,SAAS8lB,EAAKM,EAAMra,EAAS9V,EAAOwsC,GAEtC,IAAI4K,EAAQ,CAACxK,MAAOje,EAAAA,QAAQmoL,GAAGO,YAC3BlnL,IACAinB,EAAMjnB,KAAOA,GAEjB,IAAIpmB,EAAO2nC,EAAAA,IAAI,CAAC9mB,KAAKxqB,KAAKslI,YAAY71G,IACrB8hB,GAAG9hB,EAAKrsB,KAAK,QAAQqlC,EAAE,QAASuO,GACjDh3C,KAAKslI,YAAYnvF,OAAOxsC,EAAM+L,EAAS9V,EAAOwsC,IAUlDi9B,MAAO,SAAS55C,EAAKM,EAAMra,EAAS9V,EAAOwsC,GAEvC,IAAI4K,EAAQ,CAACxK,MAAOje,EAAAA,QAAQmoL,GAAGQ,aAC3BnnL,IACAinB,EAAMjnB,KAAOA,GAEjB,IAAIs5C,EAAQ/3B,EAAAA,IAAI,CAAC9mB,KAAKxqB,KAAKslI,YAAY71G,IACtB8hB,GAAG9hB,EAAKrsB,KAAK,QAAQqlC,EAAE,QAASuO,GACjDh3C,KAAKslI,YAAYnvF,OAAOkzB,EAAO3zD,EAAS9V,EAAOwsC,IAKnDw8K,eAAgB,SAASvyK,EAAQwyK,GAE7B,IAAIhjM,EAAQwwB,EAAOvL,aAAa,MAC5BtgB,EAAO6rB,EAAOvL,aAAa,QAC3Bg+K,EAAWx3K,EAAAA,IAAI,CAACluC,KAAM,SAAUyiB,GAAIA,IAMxC,OAJa,OAAT2E,GACAs+L,EAAS9xK,MAAM,CAACzF,GAAI/mB,IAGjBs+L,EAASrgL,EAAE,QAASogL,IAM/BP,aAAc,SAASjyK,GAEnB,IAEItwC,EAFAgqB,EAAOsmB,EAAO+Q,qBAAqB,SAAS,GAAGtc,aAAa,QAC5DkM,EAAQ,CAACxK,MAAOje,EAAAA,QAAQmoL,GAAGO,YAE3BlnL,IAEAinB,EAAMjnB,KAAOA,GAEjB,IAAI+4L,EAAW9oN,KAAK4oN,eAAevyK,EAAQW,GAC3C,IAAKjxC,EAAE,EAAGA,EAAE/F,KAAKitC,YAAYvpC,OAAQqC,IAEjCixC,EAAQ,CAACjM,SAAU/qC,KAAKitC,YAAYlnC,GAAGglC,SAC1B3nC,KAAUpD,KAAKitC,YAAYlnC,GAAG3C,MACvCpD,KAAKitC,YAAYlnC,GAAGhG,OACpBi3C,EAAMj3C,KAAOC,KAAKitC,YAAYlnC,GAAGhG,MACjCC,KAAKitC,YAAYlnC,GAAGo+K,OACpBntI,EAAM,YAAch3C,KAAKitC,YAAYlnC,GAAGo+K,MAC5C2kC,EAASrgL,EAAE,WAAYuO,GAAOmB,KAElC,IAAKpyC,EAAE,EAAGA,EAAE/F,KAAK81B,UAAUpyB,OAAQqC,IAE/B+iN,EAASrgL,EAAE,UAAW,CAAC,IAAMzoC,KAAK81B,UAAU/vB,KAAKoyC,KAGrD,OADAn4C,KAAKslI,YAAYlvF,KAAK0yK,EAAS1xK,SACxB,GAKXmxK,cAAe,SAASlyK,GAEpB,IAEIgzB,EAAOtjE,EAFP8iN,EAAc,CAACr8K,MAAOje,EAAAA,QAAQmoL,GAAGQ,aACjCnnL,EAAOsmB,EAAO+Q,qBAAqB,SAAS,GAAGtc,aAAa,QAEhE,GAAI/a,GAIA,IAFA84L,EAAY94L,KAAOA,EACnBs5C,EAAQ,GACHtjE,EAAI,EAAGA,EAAI/F,KAAKooN,OAAO1kN,OAAQqC,IAEhC,GAAI/F,KAAKooN,OAAOriN,GAAGgqB,MAAQA,EAC3B,CACIs5C,EAAQrpE,KAAKooN,OAAOriN,GAAG4iN,UAAUtyK,GACjC,KACH,OAKLgzB,EAAQrpE,KAAKooN,OAEjB,IAAIU,EAAW9oN,KAAK4oN,eAAevyK,EAAQwyK,GAC3C,IAAK9iN,EAAI,EAAGA,EAAIsjE,EAAM3lE,OAAQqC,IAC9B,CACI,IAAIixC,EAAQ,CAACvnB,IAAM45C,EAAMtjE,GAAG0pB,KACxB45C,EAAMtjE,GAAGhG,OACTi3C,EAAMj3C,KAAOspE,EAAMtjE,GAAGhG,MACtBspE,EAAMtjE,GAAGgqB,OACTinB,EAAMjnB,KAAOs5C,EAAMtjE,GAAGgqB,MAC1B+4L,EAASrgL,EAAE,OAAQuO,GAAOmB,IAC7B,CAED,OADAn4C,KAAKslI,YAAYlvF,KAAK0yK,EAAS1xK,SACxB,CACV,8DCrNL7oB,EAAAA,QAAQglB,oBAAoB,mBAAoB,CAK/Cu3C,SAAS,EAOTi+H,oCAAoC,EAQpCC,wBAAyB,EAMzBC,GAAI,KAMJC,IAAK,gBAMLC,4BAA4B,EAQ5BC,gCAAiC,KAQjCC,+BAAgC,KAMhCC,0BAA2B,KAQ3BC,mBAAoB,KAMpBC,gBAAiB,KAMjBC,iBAAkB,KAKlBC,8BAA+B,EAM/BC,cAAc,EAKdC,uBAAwB,GAOxBC,6BAA8B,GAE9BC,8BAA+B,SAASrgM,GACvCzpB,KAAK6pN,6BAA6Bv6M,KAAKma,EACzC,EAECosB,OAAQ,SAAS19B,GAChB,IAAKnY,KAAK2pN,aACT,MAAM,IAAIzoN,MAAM,sDACV,GAAIlB,KAAK+pN,oBAAsBx7L,EAAAA,QAAQikB,OAAOwU,UACpD,MAAM,IAAI9lD,MAAM,sDAEjBlB,KAAKipN,GAAG7yK,KAAKyX,EAAAA,OAAO,SAAU,CAAErhB,MAAOxsC,KAAKkpN,IAAK/wM,YACjDnY,KAAKipN,GAAGrzK,QACR51C,KAAKipN,GAAGriJ,OACV,EAEC93B,eAAgB,WACf,OAAO9uC,KAAKgqN,YACd,EAECr/M,cACC,OAAO3K,KAAK2pN,YACd,EAECxxM,OAAQ,WACP,IAAKnY,KAAK8uC,iBACT,MAAM,IAAI5tC,MAAM,mBAEjB,GAAIlB,KAAK+pN,oBAAsBx7L,EAAAA,QAAQikB,OAAOylK,aAC7C,MAAM,IAAI/2M,MAAM,yDAGjBlB,KAAKipN,GAAGppN,QAAQijN,yBAA0B,EAC1C9iN,KAAKiqN,WAAY,EAEjBjqN,KAAKkqN,iBAAiB33M,MAAMvS,KAAKipN,GAAIjpN,KAAKmqN,aAC5C,EAECC,uBAAwB,WACvB,GAAIpqN,KAAK+pN,oBAAsBx7L,EAAAA,QAAQikB,OAAOwU,UAC7C,MAAM,IAAI9lD,MAAM,sEAEjBlB,KAAK0pN,8BAAgC,EACrC1pN,KAAKipN,GAAG7yK,KAAKyX,EAAAA,OAAO,IAAK,CAAErhB,MAAOxsC,KAAKkpN,MACzC,EAECmB,mBAAoB,WACnB,OAAOrqN,KAAKspN,yBACd,EAECgB,mBAAoB,WACnB,OAAOtqN,KAAKqpN,8BACd,EAEC/sM,KAAM,SAAS+rM,GACdroN,KAAKipN,GAAKZ,EACV95L,EAAAA,QAAQ+qL,aAAa,KAAMt5M,KAAKkpN,KAGhClpN,KAAKupN,mBAAqBvpN,KAAKipN,GAAGxJ,UAClCz/M,KAAKipN,GAAGxJ,UAAYz/M,KAAKy/M,UAAUrvL,KAAKpwB,MAExCA,KAAKkqN,iBAAmBlqN,KAAKipN,GAAGzwM,QAChCxY,KAAKipN,GAAGzwM,QAAUxY,KAAKuqN,sBAAsBn6L,KAAKpwB,MAElDA,KAAKwqN,mCAAqCxqN,KAAKipN,GAAGpG,2BAClD7iN,KAAKipN,GAAGpG,2BAA6B7iN,KAAK6iN,2BAA2BzyL,KAAKpwB,MAE1EA,KAAKyqN,sBAAwBzqN,KAAKipN,GAAG3xK,cACrCt3C,KAAKipN,GAAG3xK,cAAgBt3C,KAAK0qN,uBAAuBt6L,KAAKpwB,MAEzDA,KAAK2qN,oBAAsB3qN,KAAKipN,GAAGtvM,WACnC3Z,KAAKipN,GAAGtvM,WAAa3Z,KAAK4qN,qBAAqBx6L,KAAKpwB,KACtD,EAEC4qN,qBAAsB,WACrB5qN,KAAKgqN,kBAAe1pN,EACpBN,KAAK2qN,oBAAoBp4M,MAAMvS,KAAKipN,GAAIxlN,UAC1C,EAECinN,uBAAwB,WACnB1qN,KAAK8uC,mBACH9uC,KAAKiqN,WACNjqN,KAAKipN,GAAGj5K,YAAchwC,KAAKipN,GAAGh1K,gBAClCj0C,KAAK6qN,aAAe,CACnBt8M,SAAUvO,KAAKipN,GAAG16M,SAClB0uM,cAAej9M,KAAKipN,GAAGhM,cACvBC,aAAcl9M,KAAKipN,GAAG/L,aACtBC,eAAgBn9M,KAAKipN,GAAG9L,eACxBC,UAAWp9M,KAAKipN,GAAG7L,UACnBC,YAAar9M,KAAKipN,GAAG5L,aAEtBr9M,KAAK8qN,WAAa9qN,KAAKipN,GAAGx5L,IAE1BzvB,KAAK8qF,SAAWv8D,EAAAA,QAAQ9d,MAAM,0CAA4CzQ,KAAK6qN,aAAat8M,SAAS7K,SAKtG1D,KAAKipN,GAAG9vF,MAAQ,GAEhBn5H,KAAKyqN,sBAAsBl4M,MAAMvS,KAAKipN,GAAIxlN,UAC5C,EAEC8mN,sBAAuB,WACtBvqN,KAAKmqN,aAAe1mN,UAEpBzD,KAAKkqN,iBAAiB33M,MAAMvS,KAAKipN,GAAIxlN,UACvC,EAECo/M,2BAA4B,SAASpsK,GAGpC,OAFAz2C,KAAK2pN,aAAelzK,EAAKgR,uBAAuBznD,KAAKkpN,IAAK,MAAMxlN,OAAS,EAElE1D,KAAKwqN,mCAAmCj4M,MAAMvS,KAAKipN,GAAIxlN,UAChE,EAECu9M,cAAe,SAAUvsM,GAExB,GADAzU,KAAK+pN,kBAAoBt1M,EACpBzU,KAAK8uC,kBACLr6B,IAAW8Z,EAAAA,QAAQikB,OAAOwU,WAAavyC,IAAW8Z,EAAAA,QAAQikB,OAAOylK,aAqC/D,GAAIxjM,IAAW8Z,EAAAA,QAAQikB,OAAO8lK,aAAe,CACnDt4M,KAAKipN,GAAGx5L,IAAMzvB,KAAK8qN,WAGnB,IAAK,MAAM/mD,KAAM/jK,KAAK6qN,aAAat8M,UAAY,IAC5CosD,OAAO36D,KAAK6qN,aAAaxN,aAAe,IAC1Cr9M,KAAKipN,GAAGvmI,eAAeqhF,EAAE11J,QAAS01J,EAAE83C,GAAI93C,EAAEhkK,KAAMgkK,EAAE3gK,KAAM2gK,EAAEl+I,IAE3D,IAAK,MAAMk+I,KAAM/jK,KAAK6qN,aAAa5N,eAAiB,IACjDtiJ,OAAO36D,KAAK6qN,aAAazN,WAC3Bp9M,KAAKipN,GAAGnJ,gBAAgB/7C,EAAE04C,OAAQ14C,EAAE11J,SAErC,IAAK,MAAM01J,KAAM/jK,KAAK6qN,aAAa3N,cAAgB,IAChDviJ,OAAO36D,KAAK6qN,aAAa1N,gBAAkB,IAC7Cn9M,KAAKipN,GAAGpJ,mBAAmB97C,GAI5B/jK,KAAKipN,GAAG7yK,KAAKyX,EAAAA,OAAO,SAAU,CAC7BrhB,MAAOxsC,KAAKkpN,IACZnlD,EAAG/jK,KAAKqpN,+BACR0B,OAAQ/qN,KAAKgqN,gBAEdhqN,KAAKipN,GAAGrzK,OACX,MAAanhC,IAAW8Z,EAAAA,QAAQikB,OAAOwsH,QACpCh/J,KAAK8qF,SAAWv8D,EAAAA,QAAQ9d,MAAM,oCAC9BzQ,KAAKgqN,kBAAe1pN,QA9DpBN,KAAK8qF,SAAWv8D,EAAAA,QAAQ9d,MAAM,kBAE9BzQ,KAAKopN,gCAAkC,EACvCppN,KAAKqpN,+BAAiC,EAEtCrpN,KAAKspN,0BAA4B,EAEjCtpN,KAAKmpN,4BAA6B,EAClCnpN,KAAK0pN,8BAAgC,EAGrC1pN,KAAKiqN,WAAY,EAEbx1M,IAAW8Z,EAAAA,QAAQikB,OAAOylK,eAC7Bj4M,KAAK2pN,cAAe,GAGrB3pN,KAAK4pN,uBAAyB,GAE1B5pN,KAAKwpN,iBACRxpN,KAAKipN,GAAGx0K,cAAcz0C,KAAKwpN,iBAGxBxpN,KAAKypN,kBACRzpN,KAAKipN,GAAGx0K,cAAcz0C,KAAKypN,kBAG5BzpN,KAAKwpN,gBAAkBxpN,KAAKipN,GAAGz0K,WAAWx0C,KAAKgrN,4BAA4B56L,KAAKpwB,MAAOA,KAAKkpN,IAAK,KACjGlpN,KAAKirN,YAAcjrN,KAAKipN,GAAGz0K,WAAWx0C,KAAKkrN,iBAAiB96L,KAAKpwB,MAAOA,KAAKkpN,IAAK,KAClFlpN,KAAKypN,iBAAmBzpN,KAAKipN,GAAGz0K,WAAWx0C,KAAKmrN,uBAAuB/6L,KAAKpwB,OAG5EA,KAAKorN,gBAAkBprN,KAAKipN,GAAGvmI,eAAe1iF,KAAKqrN,eAAej7L,KAAKpwB,MAAOA,KAAKkpN,IAAK,WACxFlpN,KAAKsrN,qBAAuBtrN,KAAKipN,GAAGvmI,eAAe1iF,KAAKurN,oBAAoBn7L,KAAKpwB,MAAOA,KAAKkpN,IAAK,UAClGlpN,KAAKwrN,gBAAmBxrN,KAAKipN,GAAGvmI,eAAe1iF,KAAKyrN,eAAer7L,KAAKpwB,MAAOA,KAAKkpN,IAAI,UA8B3F,EASCzJ,UAAW,SAAShpK,GAOnB,OANIloB,EAAAA,QAAQmrL,WAAWjjK,EAAM,OAC5BloB,EAAAA,QAAQmrL,WAAWjjK,EAAM,aACzBloB,EAAAA,QAAQmrL,WAAWjjK,EAAM,aACzBz2C,KAAK0rN,4BAA4Bj1K,GAG3Bz2C,KAAKupN,mBAAmBv2M,KAAKhT,KAAKipN,GAAIxyK,EAC/C,EAEC40K,eAAgB,SAAS50K,GAOxB,OANAz2C,KAAKmpN,4BAA6B,EAElCnpN,KAAKgqN,aAA+C,SAAhCvzK,EAAK3L,aAAa,WAAwB2L,EAAK3L,aAAa,MAEhF9qC,KAAKipN,GAAG9wM,UAED,CACT,EAECozM,oBAAqB,SAAS90K,GAC7B,MAAM72C,EAAQ62C,IACZA,EAAKq/I,mBAAqBr/I,EAAKq/I,kBAAkB7lK,SAC9CwmB,EAAK+sI,YAAc/sI,EAAK+sI,WAAWvzJ,SAKxC,OAHAjwB,KAAKipN,GAAGnyK,qBAAqBvoB,EAAAA,QAAQikB,OAAOwsH,MAAOp/J,EAAO62C,GAC1Dz2C,KAAKipN,GAAG3xK,iBAED,CACT,EAECm0K,eAAgB,SAASh1K,GAExB,IAAIk1K,EAAexlN,SAASswC,EAAK3L,aAAa,MAQ9C,GAPA9qC,KAAK4rN,2BAA2BD,EAAc3rN,KAAKopN,iCAEnDppN,KAAKiqN,WAAY,EACjBjqN,KAAKipN,GAAGnM,SAAU,EAClB98M,KAAKipN,GAAGxL,eAAgB,EACxBz9M,KAAKipN,GAAGtL,UAAW,EAEf39M,KAAK4pN,uBAAuBlmN,OAAS,EAAG,CAC3C1D,KAAK8qF,SAAWv8D,EAAAA,QAAQ9d,MAAM,oCAAqCzQ,KAAK4pN,wBACxE,IAAI,MAAMvzK,KAAUr2C,KAAK4pN,uBACxB5pN,KAAKipN,GAAG7yK,KAAKC,EAEjB,MACGr2C,KAAK8qF,SAAWv8D,EAAAA,QAAQ9d,MAAM,+BAAgCzQ,KAAK4pN,wBAKpE,OAFA5pN,KAAKipN,GAAGnyK,qBAAqBvoB,EAAAA,QAAQikB,OAAOwU,UAAW,OAEhD,CACT,EAECmkK,uBAAwB,SAAS10K,GAShC,OARIloB,EAAAA,QAAQmrL,WAAWjjK,EAAM,OAASloB,EAAAA,QAAQmrL,WAAWjjK,EAAM,aAAeloB,EAAAA,QAAQmrL,WAAWjjK,EAAM,cACtGz2C,KAAK6rN,kCAED7rN,KAAK+oN,oCACR/oN,KAAK8rN,4BAIA,CACT,EAECF,2BAA4B,SAASG,EAAsBC,GAC1D,IAAI/hB,EAAQ8hB,EAAuBC,EAE/B/hB,EAAQ,GACXjqM,KAAKisN,YAAY,uDAAyDF,EAAuB,gBAAkBC,GAGhH/hB,EAAQjqM,KAAK4pN,uBAAuBlmN,QACvC1D,KAAKisN,YAAY,8FAAgGhiB,EAAQ,kCAAoCjqM,KAAK4pN,uBAAuBlmN,OAAS,WAAaqoN,EAAuB,gBAAkBC,GAGzP,IAAI,IAAIjmN,EAAI,EAAGA,EAAIkkM,EAAOlkM,IAEzB,IADA,IAAIswC,EAASr2C,KAAK4pN,uBAAuB73K,QAChC1I,EAAI,EAAGA,EAAIrpC,KAAK6pN,6BAA6BnmN,OAAQ2lC,IAC7DrpC,KAAK6pN,6BAA6BxgL,GAAGgN,GAInCr2C,KAAK8qF,SAAW9qF,KAAK4pN,uBAAuBlmN,OAAS,GACxD6qB,EAAAA,QAAQplB,KAAK,4BAA6BnJ,KAAK4pN,wBAGhD5pN,KAAKopN,gCAAkC2C,EAEnC/rN,KAAKgpN,wBAA0B,IAClChpN,KAAK0pN,8BAAgC,EAExC,EAECsB,4BAA6B,WAG5B,OAFAhrN,KAAK8rN,2BAEE,CACT,EAECZ,iBAAkB,SAASz0K,GAC1B,IAAIk1K,EAAexlN,SAASswC,EAAK3L,aAAa,MAG9C,OAFA9qC,KAAK4rN,2BAA2BD,EAAc3rN,KAAKopN,kCAE5C,CACT,EAEC0C,wBAAyB,WACpB9rN,KAAKmpN,4BACRnpN,KAAKipN,GAAG7yK,KAAKyX,EAAAA,OAAO,IAAK,CAAErhB,MAAOxsC,KAAKkpN,IAAKnlD,EAAG/jK,KAAKqpN,iCAEvD,EAECqC,4BAA6B,SAASj1K,GACrC,GAAIz2C,KAAKmpN,2BAA4B,CACpC,IAAmD,IAA/CnpN,KAAK4pN,uBAAuBhpN,QAAQ61C,GAEvC,OAGDz2C,KAAK4pN,uBAAuBt6M,KAAKmnC,GACjCz2C,KAAKspN,4BAEDtpN,KAAKgpN,wBAA0B,IAClChpN,KAAK0pN,gCAED1pN,KAAK0pN,gCAAkC1pN,KAAKgpN,yBAE/CvvL,YAAW,KACNz5B,KAAK+pN,oBAAsBx7L,EAAAA,QAAQikB,OAAOwU,WAC7ChnD,KAAKoqN,wBACZ,GACQ,GAGR,CACA,EAECyB,gCAAiC,WAC5B7rN,KAAKmpN,4BACRnpN,KAAKqpN,gCAER,EAEC4C,YAAa,SAASl8M,GAErB,MADAwe,EAAAA,QAAQ3uB,MAAMmQ,GACR,IAAI7O,MAAM6O,EAClB,yCCxcA1O,OAAOwG,eAAenQ,EAAS,aAAc,CAC3CiQ,OAAO,IAETjQ,EAAAA,aAAkB,EAMlB,MAAMw0N,EAAY,GAElB,IAAK,IAAInmN,EAAI,EAAGA,EAAI,MAAOA,EACzBmmN,EAAU58M,MAAMvJ,EAAI,KAAOspC,SAAS,IAAIiP,OAAO,IAYjD5mD,EAAAA,QATA,SAAqB0jI,EAAKnB,GACxB,MAAMl0H,EAAIk0H,GAAU,EACdkyF,EAAMD,EAGZ,OAAQC,EAAI/wF,EAAIr1H,EAAI,IAAMomN,EAAI/wF,EAAIr1H,EAAI,IAAMomN,EAAI/wF,EAAIr1H,EAAI,IAAMomN,EAAI/wF,EAAIr1H,EAAI,IAAM,IAAMomN,EAAI/wF,EAAIr1H,EAAI,IAAMomN,EAAI/wF,EAAIr1H,EAAI,IAAM,IAAMomN,EAAI/wF,EAAIr1H,EAAI,IAAMomN,EAAI/wF,EAAIr1H,EAAI,IAAM,IAAMomN,EAAI/wF,EAAIr1H,EAAI,IAAMomN,EAAI/wF,EAAIr1H,EAAI,IAAM,IAAMomN,EAAI/wF,EAAIr1H,EAAI,KAAOomN,EAAI/wF,EAAIr1H,EAAI,KAAOomN,EAAI/wF,EAAIr1H,EAAI,KAAOomN,EAAI/wF,EAAIr1H,EAAI,KAAOomN,EAAI/wF,EAAIr1H,EAAI,KAAOomN,EAAI/wF,EAAIr1H,EAAI,MAAMiiD,aACvU,+BClBA3mD,OAAOwG,eAAenQ,EAAS,KAAM,CACnCoQ,YAAY,EACZ6c,IAAK,WACH,OAAOynM,EAAGx5C,OACZ,IAEFvxK,OAAOwG,eAAenQ,EAAS,KAAM,CACnCoQ,YAAY,EACZ6c,IAAK,WACH,OAAO0nM,EAAIz5C,OACb,IAEFvxK,OAAOwG,eAAenQ,EAAS,KAAM,CACnCoQ,YAAY,EACZ6c,IAAK,WACH,OAAO2nM,EAAI15C,OACb,IAEFvxK,OAAOwG,eAAenQ,EAAS,KAAM,CACnCoQ,YAAY,EACZ6c,IAAK,WACH,OAAO4nM,EAAI35C,OACb,IAGF,IAAIw5C,EAAKI,EAAuB/8M,EAAQ,OAEpC48M,EAAMG,EAAuB/8M,EAAQ,KAErC68M,EAAME,EAAuB/8M,EAAQ,OAErC88M,EAAMC,EAAuB/8M,EAAQ,OAEzC,SAAS+8M,EAAuBj0K,GAAO,OAAOA,GAAOA,EAAIo6H,WAAap6H,EAAM,CAAEq6H,QAASr6H,EAAO,6BCyB9F,SAASk0K,EAAgBC,GACvB,OAAwC,IAAhCA,EAAe,KAAO,GAAK,GAAU,CAC/C,CAsHA,SAASC,EAAQ/jL,EAAGC,GAClB,MAAMC,GAAW,MAAJF,IAAmB,MAAJC,GAE5B,OADaD,GAAK,KAAOC,GAAK,KAAOC,GAAO,KAC9B,GAAW,MAANA,CACrB,CAcA,SAAS8jL,EAAOhnJ,EAAG9tD,EAAGC,EAAG6wB,EAAGM,EAAG7jB,GAC7B,OAAOsnM,GATchvL,EASQgvL,EAAQA,EAAQ70M,EAAG8tD,GAAI+mJ,EAAQ/jL,EAAGvjB,OATrC2jB,EAS0CE,GARhDvL,IAAQ,GAAKqL,EAQuCjxB,GAT1E,IAAuB4lB,EAAKqL,CAU5B,CAEA,SAAS6jL,EAAM/0M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAGM,EAAG7jB,GAC/B,OAAOunM,EAAO70M,EAAI0wB,GAAK1wB,EAAIqoB,EAAGtoB,EAAGC,EAAG6wB,EAAGM,EAAG7jB,EAC5C,CAEA,SAASynM,EAAMh1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAGM,EAAG7jB,GAC/B,OAAOunM,EAAO70M,EAAIqoB,EAAIqI,GAAKrI,EAAGtoB,EAAGC,EAAG6wB,EAAGM,EAAG7jB,EAC5C,CAEA,SAAS0nM,EAAMj1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAGM,EAAG7jB,GAC/B,OAAOunM,EAAO70M,EAAI0wB,EAAIrI,EAAGtoB,EAAGC,EAAG6wB,EAAGM,EAAG7jB,EACvC,CAEA,SAAS2nM,EAAMl1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAGM,EAAG7jB,GAC/B,OAAOunM,EAAOnkL,GAAK1wB,GAAKqoB,GAAItoB,EAAGC,EAAG6wB,EAAGM,EAAG7jB,EAC1C,CAzNAhkB,OAAOwG,eAAenQ,EAAS,aAAc,CAC3CiQ,OAAO,IAETjQ,EAAAA,aAAkB,EAyNlBA,EAAAA,QAnMA,SAAaqiM,GACX,GAAqB,iBAAVA,EAAoB,CAC7B,MAAMhqL,EAAMqlM,SAASzf,mBAAmBoE,IAExCA,EAAQ,IAAIphL,WAAW5I,EAAIrM,QAE3B,IAAK,IAAIqC,EAAI,EAAGA,EAAIgK,EAAIrM,SAAUqC,EAChCg0L,EAAMh0L,GAAKgK,EAAIm6B,WAAWnkC,EAE9B,CAEA,OAOF,SAA8Bo0H,GAC5B,MAAMH,EAAS,GACTizF,EAA0B,GAAf9yF,EAAMz2H,OACjBwpN,EAAS,mBAEf,IAAK,IAAInnN,EAAI,EAAGA,EAAIknN,EAAUlnN,GAAK,EAAG,CACpC,MAAM6iC,EAAIuxF,EAAMp0H,GAAK,KAAOA,EAAI,GAAK,IAC/By0L,EAAMr0L,SAAS+mN,EAAO3jL,OAAOX,IAAM,EAAI,IAAQskL,EAAO3jL,OAAW,GAAJX,GAAW,IAC9EoxF,EAAO1qH,KAAKkrL,EACd,CAEA,OAAOxgE,CACT,CAnBSmzF,CAiCT,SAAoBvkL,EAAGa,GAErBb,EAAEa,GAAO,IAAM,KAAQA,EAAM,GAC7Bb,EAAE6jL,EAAgBhjL,GAAO,GAAKA,EAC9B,IAAI3xB,EAAI,WACJC,GAAK,UACL0wB,GAAK,WACLrI,EAAI,UAER,IAAK,IAAIr6B,EAAI,EAAGA,EAAI6iC,EAAEllC,OAAQqC,GAAK,GAAI,CACrC,MAAM2jC,EAAO5xB,EACP6xB,EAAO5xB,EACP6xB,EAAOnB,EACPoB,EAAOzJ,EACbtoB,EAAI+0M,EAAM/0M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,GAAI,GAAI,WAChCq6B,EAAIysL,EAAMzsL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,IAAK,WACrC0iC,EAAIokL,EAAMpkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,GAAI,WACpCgS,EAAI80M,EAAM90M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,YACrC+R,EAAI+0M,EAAM/0M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACpCq6B,EAAIysL,EAAMzsL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,GAAI,YACpC0iC,EAAIokL,EAAMpkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,IAAK,YACrCgS,EAAI80M,EAAM90M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,UACrC+R,EAAI+0M,EAAM/0M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,EAAG,YACnCq6B,EAAIysL,EAAMzsL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,IAAK,YACrC0iC,EAAIokL,EAAMpkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,IAAK,OACtCgS,EAAI80M,EAAM90M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,IAAK,YACtC+R,EAAI+0M,EAAM/0M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,IAAK,EAAG,YACpCq6B,EAAIysL,EAAMzsL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,IAAK,UACtC0iC,EAAIokL,EAAMpkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,IAAK,YACtCgS,EAAI80M,EAAM90M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,GAAI,YACrC+R,EAAIg1M,EAAMh1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACpCq6B,EAAI0sL,EAAM1sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,GAAI,YACpC0iC,EAAIqkL,EAAMrkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,GAAI,WACrCgS,EAAI+0M,EAAM/0M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,GAAI,IAAK,WACjC+R,EAAIg1M,EAAMh1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACpCq6B,EAAI0sL,EAAM1sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,EAAG,UACpC0iC,EAAIqkL,EAAMrkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,IAAK,WACtCgS,EAAI+0M,EAAM/0M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,WACrC+R,EAAIg1M,EAAMh1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,EAAG,WACnCq6B,EAAI0sL,EAAM1sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,GAAI,YACrC0iC,EAAIqkL,EAAMrkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,IAAK,WACrCgS,EAAI+0M,EAAM/0M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,GAAI,YACpC+R,EAAIg1M,EAAMh1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,IAAK,GAAI,YACrCq6B,EAAI0sL,EAAM1sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,GAAI,UACpC0iC,EAAIqkL,EAAMrkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,GAAI,YACpCgS,EAAI+0M,EAAM/0M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,IAAK,YACtC+R,EAAIi1M,EAAMj1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,QACpCq6B,EAAI2sL,EAAM3sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,IAAK,YACrC0iC,EAAIskL,EAAMtkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,GAAI,YACrCgS,EAAIg1M,EAAMh1M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,IAAK,UACtC+R,EAAIi1M,EAAMj1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,YACpCq6B,EAAI2sL,EAAM3sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,GAAI,YACpC0iC,EAAIskL,EAAMtkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,IAAK,WACrCgS,EAAIg1M,EAAMh1M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,IAAK,YACtC+R,EAAIi1M,EAAMj1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,IAAK,EAAG,WACpCq6B,EAAI2sL,EAAM3sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,GAAI,IAAK,WACjC0iC,EAAIskL,EAAMtkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,IAAK,WACrCgS,EAAIg1M,EAAMh1M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,GAAI,UACpC+R,EAAIi1M,EAAMj1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACpCq6B,EAAI2sL,EAAM3sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,IAAK,WACtC0iC,EAAIskL,EAAMtkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,GAAI,WACrCgS,EAAIg1M,EAAMh1M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,WACrC+R,EAAIk1M,EAAMl1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,GAAI,GAAI,WAChCq6B,EAAI4sL,EAAM5sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,GAAI,YACpC0iC,EAAIukL,EAAMvkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,IAAK,YACtCgS,EAAIi1M,EAAMj1M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,UACrC+R,EAAIk1M,EAAMl1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,IAAK,EAAG,YACpCq6B,EAAI4sL,EAAM5sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,GAAI,IAAK,YACrC0iC,EAAIukL,EAAMvkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,IAAK,IAAK,SACtCgS,EAAIi1M,EAAMj1M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,YACrC+R,EAAIk1M,EAAMl1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,EAAG,YACnCq6B,EAAI4sL,EAAM5sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,IAAK,UACtC0iC,EAAIukL,EAAMvkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,IAAK,YACrCgS,EAAIi1M,EAAMj1M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,IAAK,GAAI,YACrC+R,EAAIk1M,EAAMl1M,EAAGC,EAAG0wB,EAAGrI,EAAGwI,EAAE7iC,EAAI,GAAI,GAAI,WACpCq6B,EAAI4sL,EAAM5sL,EAAGtoB,EAAGC,EAAG0wB,EAAGG,EAAE7iC,EAAI,IAAK,IAAK,YACtC0iC,EAAIukL,EAAMvkL,EAAGrI,EAAGtoB,EAAGC,EAAG6wB,EAAE7iC,EAAI,GAAI,GAAI,WACpCgS,EAAIi1M,EAAMj1M,EAAG0wB,EAAGrI,EAAGtoB,EAAG8wB,EAAE7iC,EAAI,GAAI,IAAK,WACrC+R,EAAI60M,EAAQ70M,EAAG4xB,GACf3xB,EAAI40M,EAAQ50M,EAAG4xB,GACflB,EAAIkkL,EAAQlkL,EAAGmB,GACfxJ,EAAIusL,EAAQvsL,EAAGyJ,EACjB,CAEA,MAAO,CAAC/xB,EAAGC,EAAG0wB,EAAGrI,EACnB,CAtH8BgtL,CA6H9B,SAAsBjzF,GACpB,GAAqB,IAAjBA,EAAMz2H,OACR,MAAO,GAGT,MAAM2pN,EAAyB,EAAflzF,EAAMz2H,OAChBs2H,EAAS,IAAI85B,YAAY24D,EAAgBY,IAE/C,IAAK,IAAItnN,EAAI,EAAGA,EAAIsnN,EAAStnN,GAAK,EAChCi0H,EAAOj0H,GAAK,KAAsB,IAAfo0H,EAAMp0H,EAAI,KAAcA,EAAI,GAGjD,OAAOi0H,CACT,CA1IyCszF,CAAavzB,GAAuB,EAAfA,EAAMr2L,QACpE,4BCrCArC,OAAOwG,eAAenQ,EAAS,aAAc,CAC3CiQ,OAAO,IAETjQ,EAAAA,QASA,WACE,IAAKkwC,EACH,MAAM,IAAI1mC,MAAM,4GAGlB,OAAO0mC,EAAgB2lL,EACzB,EATA,MAAM3lL,EAAoC,oBAAXZ,QAA0BA,OAAOY,iBAAmBZ,OAAOY,gBAAgBxX,KAAK4W,SAA+B,oBAAbwmL,UAAgE,mBAA7BA,SAAS5lL,iBAAkC4lL,SAAS5lL,gBAAgBxX,KAAKo9L,UACvOD,EAAQ,IAAI50M,WAAW,+BCH7B,SAASszB,EAAE/C,EAAGN,EAAGC,EAAGs9H,GAClB,OAAQj9H,GACN,KAAK,EACH,OAAON,EAAIC,GAAKD,EAAIu9H,EAEtB,KAAK,EAML,KAAK,EACH,OAAOv9H,EAAIC,EAAIs9H,EAJjB,KAAK,EACH,OAAOv9H,EAAIC,EAAID,EAAIu9H,EAAIt9H,EAAIs9H,EAKjC,CAEA,SAASsnD,EAAK7kL,EAAGngC,GACf,OAAOmgC,GAAKngC,EAAImgC,IAAM,GAAKngC,CAC7B,CAzBApH,OAAOwG,eAAenQ,EAAS,aAAc,CAC3CiQ,OAAO,IAETjQ,EAAAA,aAAkB,EA+FlBA,EAAAA,QAvEA,SAAcqiM,GACZ,MAAMzzB,EAAI,CAAC,WAAY,WAAY,WAAY,YACzChB,EAAI,CAAC,WAAY,WAAY,WAAY,UAAY,YAE3D,GAAqB,iBAAVy0B,EAAoB,CAC7B,MAAMhqL,EAAMqlM,SAASzf,mBAAmBoE,IAExCA,EAAQ,GAER,IAAK,IAAIh0L,EAAI,EAAGA,EAAIgK,EAAIrM,SAAUqC,EAChCg0L,EAAMzqL,KAAKS,EAAIm6B,WAAWnkC,GAE9B,CAEAg0L,EAAMzqL,KAAK,KACX,MAAMwqD,EAAIigI,EAAMr2L,OAAS,EAAI,EACvBuiK,EAAI1qJ,KAAKs2K,KAAK/3H,EAAI,IAClBsqG,EAAI,IAAIjkK,MAAM8lK,GAEpB,IAAK,IAAIlgK,EAAI,EAAGA,EAAIkgK,IAAKlgK,EAAG,CAC1B,MAAMi7D,EAAM,IAAI8yF,YAAY,IAE5B,IAAK,IAAIzqH,EAAI,EAAGA,EAAI,KAAMA,EACxB23B,EAAI33B,GAAK0wJ,EAAU,GAAJh0L,EAAa,EAAJsjC,IAAU,GAAK0wJ,EAAU,GAAJh0L,EAAa,EAAJsjC,EAAQ,IAAM,GAAK0wJ,EAAU,GAAJh0L,EAAa,EAAJsjC,EAAQ,IAAM,EAAI0wJ,EAAU,GAAJh0L,EAAa,EAAJsjC,EAAQ,GAGnI+6H,EAAEr+J,GAAKi7D,CACT,CAEAojG,EAAE6B,EAAI,GAAG,IAA2B,GAApB8zB,EAAMr2L,OAAS,GAAS6X,KAAKkzB,IAAI,EAAG,IACpD21H,EAAE6B,EAAI,GAAG,IAAM1qJ,KAAKgzB,MAAM61H,EAAE6B,EAAI,GAAG,KACnC7B,EAAE6B,EAAI,GAAG,IAA2B,GAApB8zB,EAAMr2L,OAAS,GAAS,WAExC,IAAK,IAAIqC,EAAI,EAAGA,EAAIkgK,IAAKlgK,EAAG,CAC1B,MAAMy/J,EAAI,IAAI1R,YAAY,IAE1B,IAAK,IAAIzuI,EAAI,EAAGA,EAAI,KAAMA,EACxBmgJ,EAAEngJ,GAAK++I,EAAEr+J,GAAGsf,GAGd,IAAK,IAAIA,EAAI,GAAIA,EAAI,KAAMA,EACzBmgJ,EAAEngJ,GAAKooM,EAAKjoD,EAAEngJ,EAAI,GAAKmgJ,EAAEngJ,EAAI,GAAKmgJ,EAAEngJ,EAAI,IAAMmgJ,EAAEngJ,EAAI,IAAK,GAG3D,IAAIvN,EAAIwtJ,EAAE,GACNvtJ,EAAIutJ,EAAE,GACN78H,EAAI68H,EAAE,GACNllI,EAAIklI,EAAE,GACN91J,EAAI81J,EAAE,GAEV,IAAK,IAAIjgJ,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,MAAM6jB,EAAI3tB,KAAKgzB,MAAMlpB,EAAI,IACnB+/I,EAAIqoD,EAAK31M,EAAG,GAAKm0B,EAAE/C,EAAGnxB,EAAG0wB,EAAGrI,GAAK5wB,EAAI82J,EAAEp9H,GAAKs8H,EAAEngJ,KAAO,EAC3D7V,EAAI4wB,EACJA,EAAIqI,EACJA,EAAIglL,EAAK11M,EAAG,MAAQ,EACpBA,EAAID,EACJA,EAAIstJ,CACN,CAEAE,EAAE,GAAKA,EAAE,GAAKxtJ,IAAM,EACpBwtJ,EAAE,GAAKA,EAAE,GAAKvtJ,IAAM,EACpButJ,EAAE,GAAKA,EAAE,GAAK78H,IAAM,EACpB68H,EAAE,GAAKA,EAAE,GAAKllI,IAAM,EACpBklI,EAAE,GAAKA,EAAE,GAAK91J,IAAM,CACtB,CAEA,MAAO,CAAC81J,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GACxV,+BC/FAjkK,OAAOwG,eAAenQ,EAAS,aAAc,CAC3CiQ,OAAO,IAETjQ,EAAAA,aAAkB,EAElB,IAAIg2N,EAAOlB,EAAuB/8M,EAAQ,MAEtCk+M,EAAenB,EAAuB/8M,EAAQ,OAElD,SAAS+8M,EAAuBj0K,GAAO,OAAOA,GAAOA,EAAIo6H,WAAap6H,EAAM,CAAEq6H,QAASr6H,EAAO,CAM9F,IAAIq1K,EAEAC,EAGAC,EAAa,EACbC,EAAa,EAmFjBr2N,EAAAA,QAjFA,SAAYmI,EAASu7H,EAAKnB,GACxB,IAAIl0H,EAAIq1H,GAAOnB,GAAU,EACzB,MAAMliH,EAAIqjH,GAAO,GAEjB,IAAIrrG,GADJlwB,EAAUA,GAAW,CAAC,GACHkwB,MAAQ69L,EACvBI,OAAgC1tN,IAArBT,EAAQmuN,SAAyBnuN,EAAQmuN,SAAWH,EAInE,GAAY,MAAR99L,GAA4B,MAAZi+L,EAAkB,CACpC,MAAMC,EAAYpuN,EAAQ2uC,SAAW3uC,EAAQquN,KAAOR,EAAK96C,WAE7C,MAAR7iJ,IAEFA,EAAO69L,EAAU,CAAgB,EAAfK,EAAU,GAAWA,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAG3F,MAAZD,IAEFA,EAAWH,EAAiD,OAApCI,EAAU,IAAM,EAAIA,EAAU,IAE1D,CAMA,IAAIE,OAA0B7tN,IAAlBT,EAAQsuN,MAAsBtuN,EAAQsuN,MAAQryM,KAAKC,MAG3DqyM,OAA0B9tN,IAAlBT,EAAQuuN,MAAsBvuN,EAAQuuN,MAAQL,EAAa,EAEvE,MAAMv4B,EAAK24B,EAAQL,GAAcM,EAAQL,GAAc,IAavD,GAXIv4B,EAAK,QAA0Bl1L,IAArBT,EAAQmuN,WACpBA,EAAWA,EAAW,EAAI,QAKvBx4B,EAAK,GAAK24B,EAAQL,SAAiCxtN,IAAlBT,EAAQuuN,QAC5CA,EAAQ,GAINA,GAAS,IACX,MAAM,IAAIltN,MAAM,mDAGlB4sN,EAAaK,EACbJ,EAAaK,EACbP,EAAYG,EAEZG,GAAS,YAET,MAAME,GAA4B,KAAb,UAARF,GAA6BC,GAAS,WACnDr2M,EAAEhS,KAAOsoN,IAAO,GAAK,IACrBt2M,EAAEhS,KAAOsoN,IAAO,GAAK,IACrBt2M,EAAEhS,KAAOsoN,IAAO,EAAI,IACpBt2M,EAAEhS,KAAY,IAALsoN,EAET,MAAMC,EAAMH,EAAQ,WAAc,IAAQ,UAC1Cp2M,EAAEhS,KAAOuoN,IAAQ,EAAI,IACrBv2M,EAAEhS,KAAa,IAANuoN,EAETv2M,EAAEhS,KAAOuoN,IAAQ,GAAK,GAAM,GAE5Bv2M,EAAEhS,KAAOuoN,IAAQ,GAAK,IAEtBv2M,EAAEhS,KAAOioN,IAAa,EAAI,IAE1Bj2M,EAAEhS,KAAkB,IAAXioN,EAET,IAAK,IAAIvlN,EAAI,EAAGA,EAAI,IAAKA,EACvBsP,EAAEhS,EAAI0C,GAAKsnB,EAAKtnB,GAGlB,OAAO2yH,IAAO,EAAIuyF,EAAa/6C,SAAS76J,EAC1C,6BCrGA1W,OAAOwG,eAAenQ,EAAS,aAAc,CAC3CiQ,OAAO,IAETjQ,EAAAA,aAAkB,EAElB,IAAI00N,EAAKI,EAAuB/8M,EAAQ,OAEpC8+M,EAAM/B,EAAuB/8M,EAAQ,OAEzC,SAAS+8M,EAAuBj0K,GAAO,OAAOA,GAAOA,EAAIo6H,WAAap6H,EAAM,CAAEq6H,QAASr6H,EAAO,CAG9F,IAAI8wI,GADO,EAAI+iC,EAAGx5C,SAAS,KAAM,GAAM27C,EAAI37C,SAE3Cl7K,EAAAA,QAAkB2xL,+BCblBhoL,OAAOwG,eAAenQ,EAAS,aAAc,CAC3CiQ,OAAO,IAETjQ,EAAAA,QAiCA,SAAkBqI,EAAMqF,EAASopN,GAC/B,SAASC,EAAa9mN,EAAOmiL,EAAW1uD,EAAKnB,GAC3C,MAAMrgG,EAAMwhG,GAAOnB,GAAU,EAI7B,GAHqB,iBAAVtyH,IAAoBA,EApBnC,SAAuB2hC,GACrBA,EAAM8rK,SAASzf,mBAAmBrsJ,IAElC,MAAMywJ,EAAQ,GAEd,IAAK,IAAIh0L,EAAI,EAAGA,EAAIujC,EAAI5lC,SAAUqC,EAChCg0L,EAAMzqL,KAAKg6B,EAAIY,WAAWnkC,IAG5B,OAAOg0L,CACT,CAU2C20B,CAAc/mN,IAC5B,iBAAdmiL,IAAwBA,EA9BvC,SAAqBhqJ,GAEnB,MAAMi6J,EAAQ,GAId,OAHAj6J,EAAKsP,QAAQ,mBAAmB,SAAUorJ,GACxCT,EAAMzqL,KAAKnJ,SAASq0L,EAAK,IAC3B,IACOT,CACT,CAuBmD40B,CAAY7kC,KAEtD3pL,MAAMC,QAAQuH,GACjB,MAAM+gE,UAAU,mCAGlB,IAAKvoE,MAAMC,QAAQ0pL,IAAmC,KAArBA,EAAUpmL,OACzC,MAAMglE,UAAU,+DAIlB,MAAMqxH,EAAQy0B,EAAS1kC,EAAUnvH,OAAOhzD,IAIxC,GAHAoyL,EAAM,GAAgB,GAAXA,EAAM,GAAY30L,EAC7B20L,EAAM,GAAgB,GAAXA,EAAM,GAAY,IAEzB3+D,EACF,IAAK,IAAI/gG,EAAM,EAAGA,EAAM,KAAMA,EAC5B+gG,EAAIxhG,EAAMS,GAAO0/J,EAAM1/J,GAI3B,OAAO+gG,IAAO,EAAIuyF,EAAa/6C,SAASmnB,EAC1C,CAGA,IACE00B,EAAa1uN,KAAOA,CACtB,CAAE,MAAOmsB,GAAM,CAKf,OAFAuiM,EAAaG,IAAMA,EACnBH,EAAa/zL,IAAMA,EACZ+zL,CACT,EArEA/2N,EAAQgjC,IAAMhjC,EAAQk3N,SAAM,EAE5B,IAEgCr2K,EAF5Bo1K,GAE4Bp1K,EAFU9oC,EAAQ,QAEG8oC,EAAIo6H,WAAap6H,EAAM,CAAEq6H,QAASr6H,GAuBvF,MAAMq2K,EAAM,uCACZl3N,EAAQk3N,IAAMA,EACd,MAAMl0L,EAAM,uCACZhjC,EAAQgjC,IAAMA,+BClCdr5B,OAAOwG,eAAenQ,EAAS,aAAc,CAC3CiQ,OAAO,IAETjQ,EAAAA,aAAkB,EAElB,IAAIg2N,EAAOlB,EAAuB/8M,EAAQ,MAEtCk+M,EAAenB,EAAuB/8M,EAAQ,OAElD,SAAS+8M,EAAuBj0K,GAAO,OAAOA,GAAOA,EAAIo6H,WAAap6H,EAAM,CAAEq6H,QAASr6H,EAAO,CA8B9F7gD,EAAAA,QA5BA,SAAYmI,EAASu7H,EAAKnB,GACD,iBAAZp6H,IACTu7H,EAAkB,WAAZv7H,EAAuB,IAAI8Y,WAAW,IAAM,KAClD9Y,EAAU,MAKZ,MAAMgvN,GAFNhvN,EAAUA,GAAW,CAAC,GAED2uC,SAAW3uC,EAAQquN,KAAOR,EAAK96C,WAMpD,GAHAi8C,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBzzF,EAAK,CACP,MAAM3kH,EAAQwjH,GAAU,EAExB,IAAK,IAAIl0H,EAAI,EAAGA,EAAI,KAAMA,EACxBq1H,EAAI3kH,EAAQ1Q,GAAK8oN,EAAK9oN,GAGxB,OAAOq1H,CACT,CAEA,OAAO,EAAIuyF,EAAa/6C,SAASi8C,EACnC,+BCpCAxtN,OAAOwG,eAAenQ,EAAS,aAAc,CAC3CiQ,OAAO,IAETjQ,EAAAA,aAAkB,EAElB,IAAI00N,EAAKI,EAAuB/8M,EAAQ,OAEpCq/M,EAAOtC,EAAuB/8M,EAAQ,OAE1C,SAAS+8M,EAAuBj0K,GAAO,OAAOA,GAAOA,EAAIo6H,WAAap6H,EAAM,CAAEq6H,QAASr6H,EAAO,CAG9F,IAAI8wI,GADO,EAAI+iC,EAAGx5C,SAAS,KAAM,GAAMk8C,EAAKl8C,SAE5Cl7K,EAAAA,QAAkB2xL,iCCfL,SAAS75K,EAAEA,EAAE/G,GAAG,IAAI2iF,EAAE,OAAM,EAAG,MAAMk4E,EAAE9zJ,EAAEy2D,OAAO,IAAIlgE,EAAE+zD,EAAEn1C,IAAI2+I,GAAG,GAAG,MAAMv9J,EAAE,CAAC,IAAIA,EAAEsf,EAAE0pM,SAASzrD,KAAK76J,EAAE,IAAI,IAAI4c,EAAE2pM,SAAS,IAAI3pM,EAAE+sI,OAAOkR,IAAI5rK,QAAQ,IAAI,CAAC,MAAM8X,GAAGzJ,GAAE,CAAE,CAAC+zD,EAAEh0C,IAAIw9I,EAAEv9J,EAAE,CAAC,OAAOA,CAAC,CAAC,MAAMsf,EAAErlB,KAAKmzJ,aAAa87D,WAAW97D,YAAY/nE,EAAE,iBAAiB/lE,EAAE5c,EAAE+G,QAAG,IAASA,EAAE8zJ,EAAE,mBAAAlxJ,EAAA3O,UAAAC,OAAI8L,EAAC,IAAArP,MAAAiS,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAD9C,EAAC8C,GAAA7O,UAAA6O,GAAA,OAAGqG,WAAWu2M,GAAG,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,KAAK1/M,EAAE,EAACzJ,EAAE,mBAAA2M,EAAAjP,UAAAC,OAAI8L,EAAC,IAAArP,MAAAuS,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAADnD,EAACmD,GAAAlP,UAAAkP,GAAA,OAAGmhJ,YAAYo7D,GAAG,WAAW,KAAK1/M,EAAE,EAAC05B,EAAE,mBAAAr2B,EAAApP,UAAAC,OAAI8L,EAAC,IAAArP,MAAA0S,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAADvD,EAACuD,GAAAtP,UAAAsP,GAAA,OAAGhN,EAAE,WAAW,YAAYyJ,EAAE,SAAS,IAAI,EAAC8qH,EAAE,mBAAA60F,EAAA1rN,UAAAC,OAAI8L,EAAC,IAAArP,MAAAgvN,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAD5/M,EAAC4/M,GAAA3rN,UAAA2rN,GAAA,OAAG9rD,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK9zJ,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAACsI,EAAE,mBAAAu3M,EAAA5rN,UAAAC,OAAI8L,EAAC,IAAArP,MAAAkvN,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAD9/M,EAAC8/M,GAAA7rN,UAAA6rN,GAAA,OAAGz7D,YAAYq7D,GAAG,MAAM,MAAM,EAAE,EAAE,KAAK,MAAM,EAAE,IAAI,KAAK1/M,EAAE,EAACs0J,EAAE,mBAAAyrD,EAAA9rN,UAAAC,OAAI8L,EAAC,IAAArP,MAAAovN,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAADhgN,EAACggN,GAAA/rN,UAAA+rN,GAAA,OAAG13M,KAAKtI,EAAE,KAAK,KAAK,MAAM,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAACsqD,EAAE,IAAI8kI,QAAQ3yJ,EAAElmC,EAAE,WAAW,SAAS,UAAU,UAAU,UAAU,WAAW,UAAU,WAAW,SAAS,SAAS,KAAK0iC,EAAE66H,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE,EAAE,GAAGz6H,EAAE/wB,EAAE,IAAI,EAAE,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,MAAM,MAAM,IAAI,IAAI,GAAGC,EAAEhS,EAAE,WAAW,SAAS,UAAU,UAAU,WAAWsmB,EAAEi3I,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE,EAAE,GAAGpvI,EAAE2/H,YAAYq7D,GAAG,MAAM,MAAM,EAAE,EAAE,KAAK,MAAM,IAAI,MAAM,IAAI,EAAE,KAAK,KAAK,MAAM,MAAM,KAAK,KAAK,MAAM,MAAM,IAAI,IAAI,GAAGhrD,EAAEJ,EAAE,KAAK,KAAK,MAAM,EAAE,EAAE,KAAK1jI,EAAE0jI,EAAE,KAAK,KAAK,MAAM,OAAO8B,EAAE18H,EAAE,UAAU,UAAU,UAAU,WAAW,UAAU66H,EAAEzpC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG1xF,EAAEM,EAAE,SAAS,QAAQ,SAAS,QAAQ,UAAU,YAAYxlB,EAAE42G,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,IAAI3iI,EAAOD,QAAQ,CAACgoL,QAAQ,eAACr6J,EAAC5hB,UAAAC,OAAA,QAAApD,IAAAmD,UAAA,GAAAA,UAAA,GAAC,EAAC,OAAG2nF,GAAG57E,EAAEskJ,YAAYo7D,GAAG,WAAW7pM,GAAG,EAAKoqM,uBAAmB,OAAOrkI,GAAG3iF,EAAE4c,EAAEixI,qBAAqB,EAAEl/H,QAAQ,CAAKs4L,aAAS,OAAOlgN,EAAEy8B,GAAE,EAAG,EAAM0jL,WAAO,OAAOngN,EAAEq5B,EAAE,EAAM+mL,iBAAa,OAAOpgN,EAAEuI,EAAE,EAAM83M,eAAW,OAAOrgN,EAAEi5B,EAAE,EAAMqnL,oBAAgB,OAAOtgN,EAAE6c,EAAE,EAAM0jM,iBAAa,OAAOvgN,EAAE0kB,EAAE,EAAM87L,0BAAsB,OAAOxgN,EAAE00J,EAAE,EAAM+rD,qBAAiB,OAAOzgN,EAAE4wB,EAAE,EAAM8vL,eAAW,OAAO1gN,EAAEo2J,EAAE,EAAMuqD,cAAU,OAAO3gN,EAAEu0J,EAAE,EAAM1F,WAAO,OAAO7uJ,EAAEo5B,EAAE,EAAMwnL,iBAAa,OAAO5gN,EAAEkU,EAAE,EAAM2sM,qBAAiB,OAAOjlI,GAAG3iF,EAAE4c,EAAE+uI,OAAOhxJ,KAAK,EAAMktN,qBAAiB,OAAOllI,GAAG3iF,EAAE4c,EAAEyjJ,SAAS,cC0Bt5DnxK,EAAOD,QAtBiB,CAIpB64N,OAAQ,SAKRliG,QAAS,UAKTmiG,iBAAkB,mBAKlBC,KAAM,kBCFV94N,EAAOD,QAZkB,CAIrBg5N,YAAa,cAKb9pD,KAAM,kBCmBVjvK,EAAOD,QAjCe,CAIlBi5N,IAAK,MAKL1iJ,KAAM,OAKN82C,KAAM,OAKNwE,OAAQ,SAKRvQ,IAAK,MAKL2M,IAAK,u6BCjCF,IAAKzzF,EAAS,SAATA,GAAS,OAATA,EAAS,gDAATA,EAAS,8CAATA,EAAS,0CAATA,EAAS,8CAATA,EAAS,gEAATA,EAAS,wDAATA,EAAS,0DAATA,EAAS,8CAATA,EAAS,wEAATA,EAAS,8CAATA,EAAS,wDAATA,EAAS,4FAATA,EAAS,oCAATA,EAAS,4CAATA,EAAS,0CAATA,EAAS,gDAATA,EAAS,8CAATA,EAAS,gEAATA,EAAS,kEAATA,EAAS,8DAATA,EAAS,8CAATA,EAAS,sDAATA,EAAS,kDAATA,EAAS,0DAATA,EAAS,sDAATA,EAAS,8CAATA,EAAS,gDAATA,EAAS,gDAATA,EAAS,gDAATA,CAAS,MA+Hd,MAAM0+L,EAAuB1+L,EAAU0+L,qBACjCC,EAAsB3+L,EAAU2+L,oBAChCC,EAAoB5+L,EAAU4+L,kBAC9B12N,EAAsB83B,EAAU93B,oBAChC22N,EAA+B7+L,EAAU6+L,6BACzCz2N,EAA2B43B,EAAU53B,yBACrCa,EAA4B+2B,EAAU/2B,0BACtCqxJ,EAAsBt6H,EAAUs6H,oBAChCwkE,EAAmC9+L,EAAU8+L,iCAC7CC,EAAsB/+L,EAAU++L,oBAChCC,EAA2Bh/L,EAAUg/L,yBACrCnjG,EAA6C77F,EAAU67F,2CACvDojG,EAAiBj/L,EAAUi/L,eAC3BC,EAAqBl/L,EAAUk/L,mBAC/Bj6G,EAAoBjlF,EAAUilF,kBAC9Bk6G,EAAuBn/L,EAAUm/L,qBACjCj6G,EAAsBllF,EAAUklF,oBAChCk6G,EAA+Bp/L,EAAUo/L,6BACzCC,EAAgCr/L,EAAUq/L,8BAC1CC,EAA8Bt/L,EAAUs/L,4BACxCjlE,EAAsBr6H,EAAUq6H,oBAChCklE,EAA0Bv/L,EAAUu/L,wBACpCC,EAAwBx/L,EAAUw/L,sBAClCj3N,EAA4By3B,EAAUz3B,0BACtCC,EAA0Bw3B,EAAUx3B,wBACpCi3N,EAAsBz/L,EAAUy/L,oBAChCC,EAAuB1/L,EAAU0/L,qBACjCC,EAAuB3/L,EAAU2/L,qBACjCC,EAAuB5/L,EAAU4/L,qBAK9C,cCzGAn6N,EAAOD,QAvDa,CAChB,KAAQ,CACJirB,MAAO,KACPC,OAAQ,MAEZ,KAAM,CACFD,MAAO,KACPC,OAAQ,MAEZ,KAAQ,CACJD,MAAO,KACPC,OAAQ,MAEZ,OAAU,CACND,MAAO,KACPC,OAAQ,MAEZ,IAAO,CACHD,MAAO,KACPC,OAAQ,KAEZ,GAAM,CACFD,MAAO,KACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,mEChDT,IAAKqQ,EAAS,SAATA,GAAS,OAATA,EAAS,gBAATA,EAAS,kBAATA,CAAS,gBCSrBt7B,EAAOD,QAZsB,CASzBiqD,iBAAkB,iFCTf,MAAM/0B,EAAY,qECAlB,IAAKoB,EAAU,SAAVA,GAAU,OAAVA,EAAU,yDAAVA,EAAU,iDAAVA,EAAU,iDAAVA,EAAU,uDAAVA,EAAU,+BAAVA,EAAU,yCAAVA,EAAU,yCAAVA,EAAU,mCAAVA,EAAU,+CAAVA,EAAU,uDAAVA,EAAU,mEAAVA,EAAU,mDAAVA,EAAU,2CAAVA,EAAU,qDAAVA,EAAU,+CAAVA,EAAU,mDAAVA,EAAU,+CAAVA,EAAU,2DAAVA,EAAU,iDAAVA,EAAU,uCAAVA,EAAU,2CAAVA,EAAU,yBAAVA,EAAU,6CAAVA,EAAU,6BAAVA,EAAU,2CAAVA,EAAU,oCAAVA,EAAU,8CAAVA,EAAU,qBAAVA,EAAU,4CAAVA,EAAU,qCAAVA,EAAU,yCAAVA,EAAU,uDAAVA,EAAU,yDAAVA,EAAU,+DAAVA,EAAU,mCAAVA,EAAU,iDAAVA,EAAU,6BAAVA,EAAU,2CAAVA,EAAU,uCAAVA,EAAU,uDAAVA,EAAU,yDAAVA,EAAU,mDAAVA,EAAU,2CAAVA,EAAU,yBAAVA,EAAU,yCAAVA,EAAU,yCAAVA,EAAU,yDAAVA,EAAU,2CAAVA,EAAU,2CAAVA,EAAU,iDAAVA,EAAU,iEAAVA,EAAU,2CAAVA,EAAU,qDAAVA,EAAU,2CAAVA,EAAU,uCAAVA,EAAU,yCAAVA,EAAU,mCAAVA,EAAU,mDAAVA,EAAU,6BAAVA,EAAU,iCAAVA,EAAU,iDAAVA,EAAU,gDAAVA,EAAU,6CAAVA,EAAU,qEAAVA,EAAU,uCAAVA,EAAU,uEAAVA,EAAU,iDAAVA,EAAU,iDAAVA,EAAU,iEAAVA,EAAU,qCAAVA,EAAU,iDAAVA,EAAU,qDAAVA,EAAU,6BAAVA,EAAU,yCAAVA,EAAU,mCAAVA,EAAU,+CAAVA,EAAU,qDAAVA,EAAU,mEAAVA,EAAU,qDAAVA,EAAU,qDAAVA,EAAU,qDAAVA,EAAU,mDAAVA,EAAU,6EAAVA,EAAU,6EAAVA,EAAU,+DAAVA,EAAU,iDAAVA,EAAU,qDAAVA,EAAU,+CAAVA,EAAU,mDAAVA,EAAU,qDAAVA,EAAU,uCAAVA,EAAU,yCAAVA,EAAU,iEAAVA,EAAU,2CAAVA,EAAU,uEAAVA,EAAU,wEAAVA,EAAU,iEAAVA,EAAU,mDAAVA,CAAU,QCClB+jM,yBAA2B,CAAC,EAGhC,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqB3xN,IAAjB4xN,EACH,OAAOA,EAAax6N,QAGrB,IAAIC,EAASo6N,yBAAyBE,GAAY,CACjDpsM,GAAIosM,EACJE,QAAQ,EACRz6N,QAAS,CAAC,GAUX,OANA06N,oBAAoBH,GAAUj/M,KAAKrb,EAAOD,QAASC,EAAQA,EAAOD,QAASs6N,qBAG3Er6N,EAAOw6N,QAAS,EAGTx6N,EAAOD,OACf,CCzBAs6N,oBAAoBK,KAAO,CAAC,ECC5BL,oBAAoBvpN,EAAK9Q,IACxB,IAAI26N,EAAS36N,GAAUA,EAAOg7K,WAC7B,IAAOh7K,EAAiB,QACxB,IAAM,EAEP,OADAq6N,oBAAoB5xL,EAAEkyL,EAAQ,CAAEx6M,EAAGw6M,IAC5BA,CAAM,ECLdN,oBAAoB5xL,EAAI,CAAC1oC,EAAS66N,KACjC,IAAI,IAAI7qN,KAAO6qN,EACXP,oBAAoB13F,EAAEi4F,EAAY7qN,KAASsqN,oBAAoB13F,EAAE5iI,EAASgQ,IAC5ErG,OAAOwG,eAAenQ,EAASgQ,EAAK,CAAEI,YAAY,EAAM6c,IAAK4tM,EAAW7qN,IAE1E,ECNDsqN,oBAAoBluD,EAAI,WACvB,GAA0B,iBAAfmrD,WAAyB,OAAOA,WAC3C,IACC,OAAOjvN,MAAQ,IAAI8oK,SAAS,cAAb,EAChB,CAAE,MAAOt5J,GACR,GAAsB,iBAAX1G,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBkpN,oBAAoB13F,EAAI,CAAC/hF,EAAKgK,IAAUlhD,OAAOD,UAAUye,eAAe7M,KAAKulC,EAAKgK,GCClFyvK,oBAAoB5mI,EAAK1zF,IACH,oBAAXoiC,QAA0BA,OAAOomC,aAC1C7+D,OAAOwG,eAAenQ,EAASoiC,OAAOomC,YAAa,CAAEv4D,MAAO,WAE7DtG,OAAOwG,eAAenQ,EAAS,aAAc,CAAEiQ,OAAO,GAAO,ECL9DqqN,oBAAoBQ,IAAO76N,IAC1BA,EAAO86N,MAAQ,GACV96N,EAAOq0C,WAAUr0C,EAAOq0C,SAAW,IACjCr0C,GCAR,IAAI+6N,oBAAsBV,oBAAoB","sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/./JitsiConferenceErrors.ts","webpack://SariskaMediaTransport/./JitsiConferenceEvents.ts","webpack://SariskaMediaTransport/./JitsiTrackEvents.ts","webpack://SariskaMediaTransport/./modules/statistics/constants.js","webpack://SariskaMediaTransport/./JitsiTrackErrors.ts","webpack://SariskaMediaTransport/./JitsiTrackError.js","webpack://SariskaMediaTransport/./service/statistics/AnalyticsEvents.ts","webpack://SariskaMediaTransport/./service/statistics/Events.ts","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./modules/browser/index.js","webpack://SariskaMediaTransport/./modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./modules/util/MathUtil.js","webpack://SariskaMediaTransport/./modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./service/RTC/MediaType.ts","webpack://SariskaMediaTransport/./modules/flags/FeatureFlags.js","webpack://SariskaMediaTransport/./modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./modules/statistics/statistics.js","webpack://SariskaMediaTransport/./JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./JitsiParticipant.js","webpack://SariskaMediaTransport/./JitsiConnectionEvents.ts","webpack://SariskaMediaTransport/./JitsiConnectionErrors.ts","webpack://SariskaMediaTransport/./modules/util/Deferred.js","webpack://SariskaMediaTransport/./modules/util/Listenable.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./modules/e2ee/KeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://SariskaMediaTransport/./node_modules/uuid/wrapper.mjs","webpack://SariskaMediaTransport/./modules/e2ee/E2EEErrors.ts","webpack://SariskaMediaTransport/./modules/e2ee/SAS.js","webpack://SariskaMediaTransport/./modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./modules/e2ee/ManagedKeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./modules/xmpp/sha1.js","webpack://SariskaMediaTransport/./modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./modules/util/Retry.js","webpack://SariskaMediaTransport/./modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/./JitsiTranscriptionStatus.ts","webpack://SariskaMediaTransport/./modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./modules/xmpp/BreakoutRooms.js","webpack://SariskaMediaTransport/./modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./modules/xmpp/RoomMetadata.ts","webpack://SariskaMediaTransport/./modules/settings/Settings.js","webpack://SariskaMediaTransport/./modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleHelperFunctions.js","webpack://SariskaMediaTransport/./service/RTC/MediaDirection.ts","webpack://SariskaMediaTransport/./modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./modules/sdp/SDP.js","webpack://SariskaMediaTransport/./modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./node_modules/async/dist/async.mjs","webpack://SariskaMediaTransport/./modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionState.ts","webpack://SariskaMediaTransport/./modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./modules/xmpp/MediaSessionEvents.ts","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://SariskaMediaTransport/./service/RTC/SignalingEvents.ts","webpack://SariskaMediaTransport/./service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./modules/sdp/SdpSimulcast.ts","webpack://SariskaMediaTransport/./modules/connectivity/TrackStreamingStatus.ts","webpack://SariskaMediaTransport/./modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./modules/RTC/RTC.js","webpack://SariskaMediaTransport/./service/connectivity/ConnectionQualityEvents.ts","webpack://SariskaMediaTransport/./modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./modules/detection/DetectionEvents.ts","webpack://SariskaMediaTransport/./modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./service/e2eping/E2ePingEvents.ts","webpack://SariskaMediaTransport/./modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./modules/litemode/LiteModeContext.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./modules/transcription/trackRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/word.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://SariskaMediaTransport/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./JitsiConference.js","webpack://SariskaMediaTransport/./modules/util/parseURLParams.js","webpack://SariskaMediaTransport/./config/index.js","webpack://SariskaMediaTransport/./JitsiConnection.js","webpack://SariskaMediaTransport/./JitsiMediaDevicesEvents.ts","webpack://SariskaMediaTransport/./JitsiMediaDevices.js","webpack://SariskaMediaTransport/./modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./modules/proxyconnection/CustomSignalingLayer.js","webpack://SariskaMediaTransport/./modules/proxyconnection/constants.ts","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/JitsiStreamPresenterEffect.js","webpack://SariskaMediaTransport/./node_modules/rnnoise-wasm/dist/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./SariskaMediaTransport.ts","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./modules/util/createAnalyticsEvent.js","webpack://SariskaMediaTransport/./index.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite-simd.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite.js","webpack://SariskaMediaTransport/./modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/Logger.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./node_modules/jquery/dist/jquery.slim.min.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/../src/strophe.disco.js","webpack://SariskaMediaTransport/../src/strophe.stream-management.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/index.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/md5-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/rng-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/sha1-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v1.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v3.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v35.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v4.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v5.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./service/RTC/BridgeVideoType.js","webpack://SariskaMediaTransport/./service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./service/RTC/RTCEvents.ts","webpack://SariskaMediaTransport/./service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./service/RTC/VideoType.ts","webpack://SariskaMediaTransport/./service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./service/statistics/constants.ts","webpack://SariskaMediaTransport/./service/xmpp/XMPPEvents.ts","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/webpack/runtime/amd options","webpack://SariskaMediaTransport/webpack/runtime/compat get default export","webpack://SariskaMediaTransport/webpack/runtime/define property getters","webpack://SariskaMediaTransport/webpack/runtime/global","webpack://SariskaMediaTransport/webpack/runtime/hasOwnProperty shorthand","webpack://SariskaMediaTransport/webpack/runtime/make namespace object","webpack://SariskaMediaTransport/webpack/runtime/node module decorator","webpack://SariskaMediaTransport/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(self, () => {\nreturn ","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * The conference is redirected to a visitor node.\n     */\n    REDIRECTED = 'conference.redirected',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const REDIRECTED = JitsiConferenceErrors.REDIRECTED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum JitsiConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A connection to the video bridge's data channel has been closed.\n     * This event is only emitted in \n     */\n    DATA_CHANNEL_CLOSED = 'conference.dataChannelClosed',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates the state of sources attached to a given remote participant has changed.\n     */\n    PARTICIPANT_SOURCE_UPDATED = 'conference.participant_source_updated',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated',\n\n    SUBTITLES_RECEIVED = 'conference.subtitles.received',\n\n    ANALYTICS_EVENT_RECEIVED = 'analytics.event.received',\n\n    TRACK_UPDATED = 'conference.track.updated',\n\n    /**\n     * Event fired when the conference metadata is updated.\n     */\n    METADATA_UPDATED = 'conference.metadata.updated',\n\n    E2EE_VERIFICATION_AVAILABLE = 'conference.e2ee.verification.available',\n\n    E2EE_VERIFICATION_READY = 'conference.e2ee.verification.ready',\n\n    E2EE_VERIFICATION_COMPLETED = 'conference.e2ee.verification.completed'\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DATA_CHANNEL_CLOSED = JitsiConferenceEvents.DATA_CHANNEL_CLOSED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const E2EE_VERIFICATION_AVAILABLE = JitsiConferenceEvents.E2EE_VERIFICATION_AVAILABLE;\nexport const E2EE_VERIFICATION_READY = JitsiConferenceEvents.E2EE_VERIFICATION_READY;\nexport const E2EE_VERIFICATION_COMPLETED = JitsiConferenceEvents.E2EE_VERIFICATION_COMPLETED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const PARTICIPANT_SOURCE_UPDATED = JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = JitsiConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\nexport const SUBTITLES_RECEIVED = JitsiConferenceEvents.SUBTITLES_RECEIVED;\nexport const ANALYTICS_EVENT_RECEIVED = JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED;\nexport const TRACK_UPDATED = JitsiConferenceEvents.TRACK_UPDATED;\nexport const METADATA_UPDATED = JitsiConferenceEvents.METADATA_UPDATED;\n","export enum JitsiTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed',\n\n    /**\n     * An SSRC has been remapped. The track is now associated with a new participant.\n     */\n    TRACK_OWNER_CHANGED = 'track.owner_changed',\n\n    /**\n     * A track is being removed. Fired when a session terminates for tracks\n     * that persist in ssrc-rewriting mode.\n     */\n    TRACK_REMOVED = 'track.removed',\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\nexport const TRACK_OWNER_CHANGED = JitsiTrackEvents.TRACK_OWNER_CHANGED;\nexport const TRACK_REMOVED = JitsiTrackEvents.TRACK_REMOVED;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\nexport const CHROME = 'chrome';\nexport const OPERA = 'opera';\nexport const FIREFOX = 'firefox';\nexport const INTERNET_EXPLORER = 'iexplorer';\nexport const SAFARI = 'safari';\nexport const NWJS = 'nwjs';\nexport const ELECTRON = 'electron';\nexport const REACT_NATIVE = 'react-native';\nexport const UNKNOWN = 'unknown';","import Bowser from 'bowser';\nimport { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN } from './browsers';\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\n\nconst bowserNameToJitsiName = {\n  'Chrome': CHROME,\n  'Chromium': CHROME,\n  'Opera': OPERA,\n  'Firefox': FIREFOX,\n  'Internet Explorer': INTERNET_EXPLORER,\n  'Safari': SAFARI\n};\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\n\nfunction _detectChromiumBased() {\n  const userAgent = navigator.userAgent;\n  const browserInfo = {\n    name: UNKNOWN,\n    version: undefined\n  };\n\n  if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n    // Edge is currenly supported only on desktop and android.\n    if (userAgent.match(/Edg(A?)/)) {\n      // Compare the underlying chromium version.\n      const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n      if (Number.parseInt(version, 10) > 72) {\n        browserInfo.name = CHROME;\n        browserInfo.version = version;\n      }\n    } else {\n      browserInfo.name = CHROME;\n      browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n    }\n  }\n\n  return browserInfo;\n}\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\n\n\nfunction _detectElectron() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/Electron/)) {\n    const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n    return {\n      name: ELECTRON,\n      version\n    };\n  }\n}\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\n\n\nfunction _detectNWJS() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/JitsiMeetNW/)) {\n    const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n    return {\n      name: NWJS,\n      version\n    };\n  }\n}\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\n\n\nfunction _detectReactNative() {\n  const match = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n  let version; // If we're remote debugging a React Native app, it may be treated as\n  // Chrome. Check navigator.product as well and always return some version\n  // even if we can't get the real one.\n\n  if (match || navigator.product === 'ReactNative') {\n    let name;\n\n    if (match && match.length > 2) {\n      name = match[1];\n      version = match[2];\n    }\n\n    name || (name = 'react-native');\n    version || (version = 'unknown');\n    return {\n      name: REACT_NATIVE,\n      version\n    };\n  }\n}\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\n\n\nfunction _detect(bowser) {\n  let browserInfo;\n  const detectors = [_detectReactNative, _detectElectron, _detectNWJS]; // Try all browser detectors\n\n  for (let i = 0; i < detectors.length; i++) {\n    browserInfo = detectors[i]();\n\n    if (browserInfo) {\n      return browserInfo;\n    }\n  }\n\n  const name = bowser.getBrowserName();\n\n  if (name in bowserNameToJitsiName) {\n    return {\n      name: bowserNameToJitsiName[name],\n      version: bowser.getBrowserVersion()\n    };\n  } // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n\n\n  browserInfo = _detectChromiumBased();\n\n  if (browserInfo) {\n    return browserInfo;\n  }\n\n  return {\n    name: UNKNOWN,\n    version: undefined\n  };\n}\n/**\n * Implements browser detection.\n */\n\n\nexport default class BrowserDetection {\n  /**\n   * Creates new BrowserDetection instance.\n   *\n   * @param {Object} [browserInfo] - Information about the browser.\n   * @param {string} browserInfo.name - The name of the browser.\n   * @param {string} browserInfo.version - The version of the browser.\n   */\n  constructor(browserInfo) {\n    let name, version;\n    this._bowser = Bowser.getParser(navigator.userAgent);\n\n    if (typeof browserInfo === 'undefined') {\n      const detectedBrowserInfo = _detect(this._bowser);\n\n      name = detectedBrowserInfo.name;\n      version = detectedBrowserInfo.version;\n    } else if (browserInfo.name in bowserNameToJitsiName) {\n      name = bowserNameToJitsiName[browserInfo.name];\n      version = browserInfo.version;\n    } else {\n      name = UNKNOWN;\n      version = undefined;\n    }\n\n    this._name = name;\n    this._version = version;\n  }\n  /**\n   * Gets current browser name.\n   * @returns {string}\n   */\n\n\n  getName() {\n    return this._name;\n  }\n  /**\n   * Checks if current browser is Chrome.\n   * @returns {boolean}\n   */\n\n\n  isChrome() {\n    return this._name === CHROME;\n  }\n  /**\n   * Checks if current browser is Opera.\n   * @returns {boolean}\n   */\n\n\n  isOpera() {\n    return this._name === OPERA;\n  }\n  /**\n   * Checks if current browser is Firefox.\n   * @returns {boolean}\n   */\n\n\n  isFirefox() {\n    return this._name === FIREFOX;\n  }\n  /**\n   * Checks if current browser is Internet Explorer.\n   * @returns {boolean}\n   */\n\n\n  isIExplorer() {\n    return this._name === INTERNET_EXPLORER;\n  }\n  /**\n   * Checks if current browser is Safari.\n   * @returns {boolean}\n   */\n\n\n  isSafari() {\n    return this._name === SAFARI;\n  }\n  /**\n   * Checks if current environment is NWJS.\n   * @returns {boolean}\n   */\n\n\n  isNWJS() {\n    return this._name === NWJS;\n  }\n  /**\n   * Checks if current environment is Electron.\n   * @returns {boolean}\n   */\n\n\n  isElectron() {\n    return this._name === ELECTRON;\n  }\n  /**\n   * Checks if current environment is React Native.\n   * @returns {boolean}\n   */\n\n\n  isReactNative() {\n    return this._name === REACT_NATIVE;\n  }\n  /**\n   * Returns the version of the current browser.\n   * @returns {string}\n   */\n\n\n  getVersion() {\n    return this._version;\n  }\n  /**\n   * Check if the parsed browser matches the passed condition.\n   *\n   * @param {Object} checkTree - It's one or two layered object, which can include a\n   * platform or an OS on the first layer and should have browsers specs on the\n   * bottom layer.\n   * Eg. { chrome: '>71.1.0' }\n   *     { windows: { chrome: '<70.2' } }\n   * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n   * conditions, false if not and undefined when the browser is not defined in the\n   * checktree object or when the current browser's version is unknown.\n   * @private\n   */\n\n\n  _checkCondition(checkTree) {\n    if (this._version) {\n      return this._bowser.satisfies(checkTree);\n    }\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * greater than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionGreaterThan(version) {\n    return this._checkCondition({\n      [this._name]: `>${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * lower than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionLessThan(version) {\n    return this._checkCondition({\n      [this._name]: `<${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * equal to the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   * A loose-equality operator is used here so that it matches the sub-versions as well.\n   */\n\n\n  isVersionEqualTo(version) {\n    return this._checkCondition({\n      [this._name]: `~${version}`\n    });\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\n/**\n * Dummy implementation of Storage interface.\n */\n\nclass DummyLocalStorage extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_storage\", {});\n  }\n\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._storage = {};\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return Object.keys(this._storage).length;\n  }\n  /**\n   * Will return that key's value associated to the passed key name.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {*} - The key value.\n   */\n\n\n  getItem(keyName) {\n    return this._storage[keyName];\n  }\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   *\n   * @param {string} keyName - The key name.\n   * @param {*} keyValue - The key value.\n   * @returns {void}\n   */\n\n\n  setItem(keyName, keyValue) {\n    this._storage[keyName] = keyValue;\n  }\n  /**\n   * When passed a key name, will remove that key from the storage.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {void}\n   */\n\n\n  removeItem(keyName) {\n    delete this._storage[keyName];\n  }\n  /**\n   * When passed a number n, this method will return the name of the nth key in the storage.\n   *\n   * @param {number} idx - The index of the key.\n   * @returns {string} - The nth key name.\n   */\n\n\n  key(n) {\n    const keys = Object.keys(this._storage);\n\n    if (keys.length <= n) {\n      return undefined;\n    }\n\n    return keys[n];\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    return JSON.stringify(this._storage);\n  }\n\n}\n/**\n * Wrapper class for browser's local storage object.\n */\n\n\nclass JitsiLocalStorage extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Storage} storage browser's local storage object.\n   */\n  constructor() {\n    super();\n\n    try {\n      this._storage = window.localStorage;\n      this._localStorageDisabled = false;\n    } catch (ignore) {// localStorage throws an exception.\n    }\n\n    if (!this._storage) {\n      // Handles the case when window.localStorage is undefined or throws an exception.\n      console.warn('Local storage is disabled.');\n      this._storage = new DummyLocalStorage();\n      this._localStorageDisabled = true;\n    }\n  }\n  /**\n   * Returns true if window.localStorage is disabled and false otherwise.\n   *\n   * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n   */\n\n\n  isLocalStorageDisabled() {\n    return this._localStorageDisabled;\n  }\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._storage.clear();\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return this._storage.length;\n  }\n  /**\n   * Returns that passed key's value.\n   * @param {string} keyName the name of the key you want to retrieve\n   * the value of.\n   * @returns {String|null} the value of the key. If the key does not exist,\n   * null is returned.\n   */\n\n\n  getItem(keyName) {\n    return this._storage.getItem(keyName);\n  }\n  /**\n   * Adds a key to the storage, or update key's value if it already exists.\n   * @param {string} keyName - the name of the key you want to create/update.\n   * @param {string} keyValue - the value you want to give the key you are\n   * creating/updating.\n   * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n   */\n\n\n  setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n    this._storage.setItem(keyName, keyValue);\n\n    if (!dontEmitChangedEvent) {\n      this.emit('changed');\n    }\n  }\n  /**\n   * Remove a key from the storage.\n   * @param {string} keyName the name of the key you want to remove.\n   */\n\n\n  removeItem(keyName) {\n    this._storage.removeItem(keyName);\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater\n   * than or equal to the number of key/value pairs in the object.\n   *\n   * @param {number} i - The index of the key in the list.\n   * @returns {string}\n   */\n\n\n  key(i) {\n    return this._storage.key(i);\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    if (this.isLocalStorageDisabled()) {\n      return this._storage.serialize();\n    }\n\n    const length = this._storage.length;\n    const localStorageContent = {};\n\n    for (let i = 0; i < length; i++) {\n      const key = this._storage.key(i);\n\n      localStorageContent[key] = this._storage.getItem(key);\n    }\n\n    return JSON.stringify(localStorageContent);\n  }\n\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(`This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if the browser supports track based statistics for the local video track. Otherwise,\n     * track resolution and framerate will be calculated based on the 'outbound-rtp' statistics.\n     * @returns {boolean}\n     */\n    supportsTrackBasedStats() {\n        return this.isChromiumBased() && this.isVersionLessThan(112);\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        // We do not want to enable unified plan on Electron clients that have Chromium version < 96 because of\n        // performance and screensharing issues.\n        return !(this.isElectron() && (this._getChromiumBasedVersion() < 96));\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/**\n * @type Class\n */\nimport { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n/**\n * The audio context.\n * @type {AudioContext}\n */\nlet context = null;\n\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n    this.source = null;\n    this.analyser = null;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    context.resume();\n    this.analyser = context.createAnalyser();\n\n    this.analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    this.analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    this.source = context.createMediaStreamSource(this.stream);\n\n    this.source.connect(this.analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(this.analyser.frequencyBinCount);\n\n            this.analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n\n    this.analyser?.disconnect();\n    this.analyser = null;\n    this.source?.disconnect();\n    this.source = null;\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(window?.AudioContext);\n};\n\n/**\n * Disconnects the audio context.\n */\nLocalStatsCollector.disconnectAudioContext = async function() {\n    if (context) {\n        logger.info('Disconnecting audio context');\n        await context.close();\n        context = null;\n    }\n};\n\n/**\n * Connects the audio context.\n */\nLocalStatsCollector.connectAudioContext = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    logger.info('Connecting audio context');\n    context = new AudioContext();\n\n    context.suspend();\n};\n\n/**\n * Initialize the audio context on startup.\n */\nLocalStatsCollector.connectAudioContext();\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","\nimport browser from '../browser';\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {object} flags - The feature flags.\n     * @param {boolean=} flags.runInLiteMode - Enables lite mode for testing to disable media decoding.\n     * @param {boolean=} flags.ssrcRewritingEnabled - Use SSRC rewriting. Requires sourceNameSignaling to be enabled.\n     * @param {boolean=} flags.enableJoinAsVisitor - Enable joining as a visitor.\n     */\n    init(flags) {\n        this._runInLiteMode = Boolean(flags.runInLiteMode);\n        this._ssrcRewriting = Boolean(flags.ssrcRewritingEnabled);\n        this._joinAsVisitor = Boolean(flags.enableJoinAsVisitor ?? true);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSendSupportEnabled() {\n        return browser.supportsUnifiedPlan();\n    }\n\n    /**\n     * Checks if the run in lite mode is enabled.\n     * This will cause any media to be received and not decoded. (Insertable streams are used to discard\n     * all media before it is decoded). This can be used for various test scenarios.\n     *\n     * @returns {boolean}\n     */\n    isRunInLiteModeEnabled() {\n        return this._runInLiteMode && browser.supportsInsertableStreams();\n    }\n\n    /**\n     * Checks if the clients supports re-writing of the SSRCs on the media streams by the bridge.\n     * @returns {boolean}\n     */\n    isSsrcRewritingSupported() {\n        return this._ssrcRewriting;\n    }\n\n    /**\n     * Checks if the clients supports joining as a visitor.\n     * @returns {boolean}\n     */\n    isJoinAsVisitorSupported() {\n        return this._joinAsVisitor;\n    }\n}\n\nexport default new FeatureFlags();\n","import { getLogger } from '@jitsi/logger';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\nconst logger = getLogger(__filename);\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n        || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function (loss) {\n    this.loss = loss || {};\n};\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function (resolution) {\n    this.resolution = resolution || {};\n};\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function (bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function () {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function (framerate) {\n    this.framerate = framerate || 0;\n};\nSsrcStats.prototype.setCodec = function (codec) {\n    this.codec = codec || '';\n};\n/**\n *\n */\nfunction ConferenceStats() {\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n/* eslint-disable max-params */\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function (speakerList) {\n    this.speakerList = speakerList;\n};\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function () {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function (error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function (startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(() => {\n            if (browser.supportsReceiverStats()) {\n                const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n                for (const ssrc in audioLevels) {\n                    if (audioLevels.hasOwnProperty(ssrc)) {\n                        // Use a scaling factor of 2.5 to report the same\n                        // audio levels that getStats reports.\n                        const audioLevel = audioLevels[ssrc] * 2.5;\n                        this.eventEmitter.emit(StatisticsEvents.AUDIO_LEVEL, this.peerconnection, Number.parseInt(ssrc, 10), audioLevel, false /* isLocal */);\n                    }\n                }\n            }\n            else {\n                // Interval updates\n                this.peerconnection.getStats()\n                    .then(report => {\n                    this.currentAudioLevelsReport = typeof (report === null || report === void 0 ? void 0 : report.result) === 'function'\n                        ? report.result()\n                        : report;\n                    this.processAudioLevelReport();\n                    this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                })\n                    .catch(error => this.errorCallback(error));\n            }\n        }, this.audioLevelsIntervalMilis);\n    }\n    const processStats = () => {\n        console.log(\"called..\");\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n            this.currentStatsReport = typeof (report === null || report === void 0 ? void 0 : report.result) === 'function'\n                ? report.result()\n                : report;\n            try {\n                this.processStatsReport();\n            }\n            catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Processing of RTP stats failed:', error);\n            }\n            this.previousStatsReport = this.currentStatsReport;\n        })\n            .catch(error => this.errorCallback(error));\n    };\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n/**\n *\n */\n\n\nlet lastTotalAudioUploadBytes = 0; \nlet lastTotalAudioDownloadytes = 0;\nlet lastTotalVideoUploadBytes = 0;\nlet lastTotalVideoDownloadBytes = 0;\n\nlet  calculateBytesPerSecond  = async function(stats) {\n    // Variables to store cumulative stats for audio and video SSRCs\n    let totalAudioOutboundBytes = 0;\n    let totalAudioInboundBytes = 0;\n    let totalVideoOutboundBytes = 0;\n    let totalVideoInboundBytes = 0;\n  \n    if (stats && typeof stats.forEach === 'function') { \n        stats.forEach(stat => {\n            if (stat.type === 'outbound-rtp') {\n              if (stat.mediaType === 'audio') {\n                totalAudioOutboundBytes += stat.bytesSent;\n              } else if (stat.mediaType === 'video') {\n                totalVideoOutboundBytes += stat.bytesSent;\n              }\n            } else if (stat.type === 'inbound-rtp') {\n              if (stat.mediaType === 'audio') {\n                totalAudioInboundBytes += stat.bytesReceived;\n              } else if (stat.mediaType === 'video') {\n                totalVideoInboundBytes += stat.bytesReceived;\n              }\n            }\n          });\n    }\n\n    let bitrate = {};\n\n    let audioUpload = totalAudioOutboundBytes - lastTotalAudioUploadBytes;\n    let audioDownload = totalAudioInboundBytes - lastTotalAudioDownloadytes;\n    let videoUpload = totalVideoOutboundBytes -  lastTotalVideoUploadBytes;\n    let videoDownload = totalVideoInboundBytes - lastTotalVideoDownloadBytes;\n\n    bitrate.bitrate = {\n        'upload': Math.round((audioUpload + videoUpload) / 1000),\n        'download': Math.round((audioDownload + videoDownload) / 1000)\n    };\n    bitrate.audio = {\n        'upload': Math.round(audioUpload / 1000),\n        'download': Math.round(audioDownload / 1000)\n    };\n    bitrate.video = {\n        'upload': Math.round(videoUpload / 1000),\n        'download': Math.round(videoDownload / 1000)\n    };\n\n    lastTotalAudioUploadBytes = totalAudioOutboundBytes;\n    lastTotalAudioDownloadytes = totalAudioInboundBytes;\n    lastTotalVideoUploadBytes = totalVideoOutboundBytes;\n    lastTotalVideoDownloadBytes = totalVideoInboundBytes;\n    return bitrate;\n}\n\n\n\nStatsCollector.prototype._processAndEmitReport = async function () {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ssrc, ssrcStats] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            }\n            else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const sourceName = track.getSourceName();\n                if (sourceName) {\n                    const resolution = ssrcStats.resolution;\n                    if (resolution.width // eslint-disable-line max-depth\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                        resolutions[sourceName] = resolution;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        framerates[sourceName] = ssrcStats.framerate;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n                        codecs[sourceName] = codecDesc;\n                    }\n                }\n                else {\n                    logger.error(`No source name returned by ${track}`);\n                }\n            }\n            else {\n                const participantId = track.getParticipantId();\n                if (participantId) {\n                    const resolution = ssrcStats.resolution;\n                    if (resolution.width // eslint-disable-line max-depth\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                        const userResolutions = resolutions[participantId] || {};\n                        userResolutions[ssrc] = resolution;\n                        resolutions[participantId] = userResolutions;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        const userFramerates = framerates[participantId] || {};\n                        userFramerates[ssrc] = ssrcStats.framerate;\n                        framerates[participantId] = userFramerates;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n                        const userCodecs = codecs[participantId] || {};\n                        userCodecs[ssrc] = codecDesc;\n                        codecs[participantId] = userCodecs;\n                    }\n                } else {\n                    logger.error(`No participant ID returned by ${track}`);\n                }\n            }\n        }\n        ssrcStats.resetBitrate();\n    }\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n    this.conferenceStats.packetLoss = {\n        total: calculatePacketLoss(lostPackets.download + lostPackets.upload, totalPackets.download + totalPackets.upload),\n        download: calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload: calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        }\n        else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n            if (track) {\n                const participantId = track.getParticipantId();\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n  \n\n    this.eventEmitter.emit(StatisticsEvents.CONNECTION_STATS, this.peerconnection, {\n        'bandwidth': this.conferenceStats.bandwidth,\n        'bitrate': await calculateBytesPerSecond( await this.peerconnection.getStats() ),\n        'packetLoss': this.conferenceStats.packetLoss,\n        'resolution': resolutions,\n        'framerate': framerates,\n        'codec': codecs,\n        'transport': this.conferenceStats.transport,\n        localAvgAudioLevels,\n        avgAudioLevels\n    });\n    this.conferenceStats.transport = [];\n};\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function (v) {\n    let value = v;\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n    if (isNaN(value)) {\n        return 0;\n    }\n    return Math.max(0, value);\n};\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function (now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n    return bitrateKbps;\n};\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = async function () {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n    this.currentStatsReport.forEach(now => {\n        \n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n                if (!conferenceStatsTransport.some(t => t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n            // RTCReceivedRtpStreamStats\n            // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n            // RTCSentRtpStreamStats\n            // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        }\n        else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n            if (!before || !ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n            let packetsNow = now[key];\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            }\n            else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n            const codec = this.currentStatsReport.get(now.codecId);\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n            // Use track stats for resolution and framerate of the local video source.\n            // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n            // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        }\n        else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n            if (!(localVideoTracks === null || localVideoTracks === void 0 ? void 0 : localVideoTracks.length)) {\n                return;\n            }\n            const ssrc = this.peerconnection.getSsrcByTrackId(now.trackIdentifier);\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n                if (!frameRate) {\n                    return;\n                }\n            }\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    await this._processAndEmitReport();\n};\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function () {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n    \n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n        // Audio level\n        const audioLevel = now.audioLevel;\n        if (!audioLevel) {\n            return;\n        }\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n        if (ssrc) {\n            const isLocal = ssrc === this.peerconnection.getLocalSSRC(this.peerconnection.getLocalTracks(MediaType.AUDIO));\n            this.eventEmitter.emit(StatisticsEvents.AUDIO_LEVEL, this.peerconnection, ssrc, audioLevel, isLocal);\n        }\n    });\n};","/**\n * @type Class\n */\nimport EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\nStatistics.analyticsEventEmitter = new EventEmitter();\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(track, callback) {\n    if (browser.isIosBrowser()) {\n        // On iOS browsers audio is lost if the audio input device is in use by another app\n        // https://bugs.webkit.org/show_bug.cgi?id=233473\n        // The culprit was using the AudioContext, so now we close the AudioContext during\n        // the track being muted, and re-instantiate it afterwards.\n        track.addEventListener(\n        JitsiTrackEvents.NO_DATA_FROM_SOURCE,\n\n        /**\n         * Closes AudioContext on no audio data, and enables it on data received again.\n         *\n         * @param {boolean} value - Whether we receive audio data or not.\n         */\n        async value => {\n            if (value) {\n                for (const localStat of Statistics.localStats) {\n                    localStat.stop();\n                }\n\n                await LocalStats.disconnectAudioContext();\n            } else {\n                LocalStats.connectAudioContext();\n                for (const localStat of Statistics.localStats) {\n                    localStat.start();\n                }\n            }\n        });\n    }\n\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    track.addEventListener(\n        JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n        () => {\n            Statistics.stopLocalStats(track);\n        });\n\n    const stream = track.getOriginalStream();\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(track) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    const stream = track.getOriginalStream();\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n    let confID = this.options.confID;\n\n    // confID - domain/tenant/roomName\n    // roomName - meeting name or breakout room ID\n    // For breakout rooms we change the conference ID used for callstats to use\n    // the room ID instead of the meeting name\n    if (!confID.endsWith(this.options.roomName)) {\n        confID = `${this.options.confID.slice(0, this.options.confID.lastIndexOf('/'))}/${this.options.roomName}`;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n * @param {boolean} silence - Whether the dominant speaker is silent or not.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid, silence) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid, silence);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\n\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n    Statistics.analyticsEventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, eventName, properties);\n};\n\n\nStatistics.prototype.addAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.on(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\nStatistics.prototype.removeAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.removeListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\n\n\n\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    chatRoom.addListener(JitsiTrackEvents.TRACK_REMOVED, track => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n    chatRoom.addListener(XMPPEvents.ROOM_MAX_USERS_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.REDIRECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.REDIRECTED);\n    chatRoom.addListener(XMPPEvents.REDIRECTED,\n        () => conference.leave().catch(e => logger.log('Error leaving on redirected', e)));\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n    chatRoom.addListener(XMPPEvents.MUC_DESTROYED, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts, nick, isGuest) => {\n            const id = Strophe.getResourceFromJid(jid);\n            if (txt.indexOf(\"Transcript\") !== -1 || txt.indexOf(\"Fellow Jitser\") !== -1) {\n                return;\n            }\n          \n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts, nick, isGuest);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        // Ignore the strartmuted policy if the presence is received from self. The moderator should join with\n        // available local sources and the policy needs to be applied only on users that join the call after.\n        if (conference.myUserId() === from) {\n            return;\n        }\n        const participant = conference.getParticipantById(from);\n\n        if (!participant || !participant.isModerator()) {\n            return;\n        }\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n\n    // Room metadata.\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_METADATA_UPDATED,\n        JitsiConferenceEvents.METADATA_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous, silence) => {\n            if ((conference.lastDominantSpeaker !== dominant || conference.dominantSpeakerIsSilent !== silence)\n                    && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.dominantSpeakerIsSilent = silence;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous, silence);\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid, silence);\n                }\n                if (conference.lastDominantSpeaker !== dominant) {\n                    if (previous && previous.length) {\n                        const speakerList = previous.slice(0);\n\n                        // Add the dominant speaker to the top of the list (exclude self).\n                        if (conference.myUserId !== dominant) {\n                            speakerList.splice(0, 0, dominant);\n                        }\n\n                        // Trim the list to the top 5 speakers only.\n                        if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                            speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                        }\n                        conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                    }\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_CLOSED, ev => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_CLOSED, ev);\n    });\n\n    rtc.addListener(RTCEvents.VIDEO_SSRCS_REMAPPED, msg => {\n        for (const session of this.conference.getMediaSessions()) {\n            session.processSourceMap(msg, MediaType.VIDEO);\n        }\n    });\n\n    rtc.addListener(RTCEvents.AUDIO_SSRCS_REMAPPED, msg => {\n        for (const session of this.conference.getMediaSessions()) {\n            session.processSourceMap(msg, MediaType.AUDIO);\n        }\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            if (audioMuted) {\n                conference.isMutedByFocus = true;\n            }\n\n            if (videoMuted) {\n                conference.isVideoMutedByFocus = true;\n            }\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n\n        /**\n         * Remote sources associated with the participant in the following format.\n         * Map<mediaType, Map<sourceName, sourceInfo>>\n         *\n         * mediaType - 'audio' or 'video'.\n         * sourceName - name of the remote source.\n         * sourceInfo: {\n         *   muted: boolean;\n         *   videoType: string;\n         * }\n         */\n        this._sources = new Map();\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and which belong to this\n     * JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified mediaType and which belong to this\n     * JitsiParticipant are muted; otherwise, false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * Sets source info.\n     * @param {MediaType} mediaType The media type, 'audio' or 'video'.\n     * @param {boolean} muted The new muted state.\n     * @param {string} sourceName The name of the source.\n     * @param {string} videoType The video type of the source.\n     * @returns {void}\n     */\n    _setSources(mediaType, muted, sourceName, videoType) {\n        let sourceByMediaType = this._sources.get(mediaType);\n        const sourceInfo = {\n            muted,\n            videoType\n        };\n\n        if (sourceByMediaType?.size) {\n            sourceByMediaType.set(sourceName, sourceInfo);\n\n            return;\n        }\n\n        sourceByMediaType = new Map();\n        sourceByMediaType.set(sourceName, sourceInfo);\n        this._sources.set(mediaType, sourceByMediaType);\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid() {\n        return this._connectionJid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Returns the sources associated with this participant.\n     * @returns Map<string, Map<string, Object>>\n     */\n    getSources() {\n        return this._sources;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return this._identity?.user?.['hidden-from-recorder'] === 'true';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid) {\n        this._connectionJid = newJid;\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = JitsiConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        this._enabling && await this._enabling;\n\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","export enum E2EEErrors {\n    E2EE_SAS_KEYS_MAC_MISMATCH = 'e2ee.sas.keys-mac-mismatch',\n    E2EE_SAS_MAC_MISMATCH = 'e2ee.sas.mac-mismatch',\n    E2EE_SAS_MISSING_KEY =  'e2ee.sas.missing-key',\n    E2EE_SAS_COMMITMENT_MISMATCHED =  'e2ee.sas.commitment-mismatched',\n    E2EE_SAS_CHANNEL_VERIFICATION_FAILED = 'e2ee.sas.channel-verification-failed',\n    E2EE_SAS_INVALID_SAS_VERIFICATION =  'e2ee.sas.invalid-sas-verification',\n}\n","/* eslint-disable no-bitwise */\n/* eslint-disable no-mixed-operators */\n\n/**\n * Generates a SAS composed of decimal numbers.\n * Borrowed from the Matrix JS SDK.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns Array<number>\n */\nfunction generateDecimalSas(sasBytes) {\n    /**\n     *      +--------+--------+--------+--------+--------+\n     *      | Byte 0 | Byte 1 | Byte 2 | Byte 3 | Byte 4 |\n     *      +--------+--------+--------+--------+--------+\n     * bits: 87654321 87654321 87654321 87654321 87654321\n     *       \\____________/\\_____________/\\____________/\n     *         1st number    2nd number     3rd number\n     */\n    return [\n        (sasBytes[0] << 5 | sasBytes[1] >> 3) + 1000,\n        ((sasBytes[1] & 0x7) << 10 | sasBytes[2] << 2 | sasBytes[3] >> 6) + 1000,\n        ((sasBytes[3] & 0x3f) << 7 | sasBytes[4] >> 1) + 1000\n    ];\n}\n\nconst emojiMapping = [\n    [ '🐶', 'dog' ],\n    [ '🐱', 'cat' ],\n    [ '🦁', 'lion' ],\n    [ '🐎', 'horse' ],\n    [ '🦄', 'unicorn' ],\n    [ '🐷', 'pig' ],\n    [ '🐘', 'elephant' ],\n    [ '🐰', 'rabbit' ],\n    [ '🐼', 'panda' ],\n    [ '🐓', 'rooster' ],\n    [ '🐧', 'penguin' ],\n    [ '🐢', 'turtle' ],\n    [ '🐟', 'fish' ],\n    [ '🐙', 'octopus' ],\n    [ '🦋', 'butterfly' ],\n    [ '🌷', 'flower' ],\n    [ '🌳', 'tree' ],\n    [ '🌵', 'cactus' ],\n    [ '🍄', 'mushroom' ],\n    [ '🌏', 'globe' ],\n    [ '🌙', 'moon' ],\n    [ '☁️', 'cloud' ],\n    [ '🔥', 'fire' ],\n    [ '🍌', 'banana' ],\n    [ '🍎', 'apple' ],\n    [ '🍓', 'strawberry' ],\n    [ '🌽', 'corn' ],\n    [ '🍕', 'pizza' ],\n    [ '🎂', 'cake' ],\n    [ '❤️', 'heart' ],\n    [ '🙂', 'smiley' ],\n    [ '🤖', 'robot' ],\n    [ '🎩', 'hat' ],\n    [ '👓', 'glasses' ],\n    [ '🔧', 'spanner' ],\n    [ '🎅', 'santa' ],\n    [ '👍', 'thumbs up' ],\n    [ '☂️', 'umbrella' ],\n    [ '⌛', 'hourglass' ],\n    [ '⏰', 'clock' ],\n    [ '🎁', 'gift' ],\n    [ '💡', 'light bulb' ],\n    [ '📕', 'book' ],\n    [ '✏️', 'pencil' ],\n    [ '📎', 'paperclip' ],\n    [ '✂️', 'scissors' ],\n    [ '🔒', 'lock' ],\n    [ '🔑', 'key' ],\n    [ '🔨', 'hammer' ],\n    [ '☎️', 'telephone' ],\n    [ '🏁', 'flag' ],\n    [ '🚂', 'train' ],\n    [ '🚲', 'bicycle' ],\n    [ '✈️', 'aeroplane' ],\n    [ '🚀', 'rocket' ],\n    [ '🏆', 'trophy' ],\n    [ '⚽', 'ball' ],\n    [ '🎸', 'guitar' ],\n    [ '🎺', 'trumpet' ],\n    [ '🔔', 'bell' ],\n    [ '⚓️', 'anchor' ],\n    [ '🎧', 'headphones' ],\n    [ '📁', 'folder' ],\n    [ '📌', 'pin' ]\n];\n\n/**\n * Generates a SAS composed of defimal numbers.\n * Borrowed from the Matrix JS SDK.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns Array<number>\n */\nfunction generateEmojiSas(sasBytes) {\n    // Just like base64.\n    const emojis = [\n        sasBytes[0] >> 2,\n        (sasBytes[0] & 0x3) << 4 | sasBytes[1] >> 4,\n        (sasBytes[1] & 0xf) << 2 | sasBytes[2] >> 6,\n        sasBytes[2] & 0x3f,\n        sasBytes[3] >> 2,\n        (sasBytes[3] & 0x3) << 4 | sasBytes[4] >> 4,\n        (sasBytes[4] & 0xf) << 2 | sasBytes[5] >> 6\n    ];\n\n    return emojis.map(num => emojiMapping[num]);\n}\n\nconst sasGenerators = {\n    decimal: generateDecimalSas,\n    emoji: generateEmojiSas\n};\n\n/**\n * Generates multiple SAS for the given bytes.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns {object}\n */\nexport function generateSas(sasBytes) {\n    const sas = {};\n\n    for (const method in sasGenerators) {\n        if (sasGenerators.hasOwnProperty(method)) {\n            sas[method] = sasGenerators[method](sasBytes);\n        }\n    }\n\n    return sas;\n}\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nimport { E2EEErrors } from './E2EEErrors';\nimport { generateSas } from './SAS';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init',\n    SAS_START: 'sas-start',\n    SAS_ACCEPT: 'sas-accept',\n    SAS_KEY: 'sas-key',\n    SAS_MAC: 'sas-mac'\n};\n\nconst OLM_SAS_NUM_BYTES = 6;\nconst OLM_KEY_VERIFICATION_MAC_INFO = 'Jitsi-KEY_VERIFICATION_MAC';\nconst OLM_KEY_VERIFICATION_MAC_KEY_IDS = 'Jitsi-KEY_IDS';\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_SAS_AVAILABLE: 'olm.participant_sas_available',\n    PARTICIPANT_SAS_READY: 'olm.participant_sas_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated',\n    PARTICIPANT_VERIFICATION_COMPLETED: 'olm.participant_verification_completed'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._mediaKey = undefined;\n        this._mediaKeyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Returns the current participants conference ID.\n     *\n     * @returns {string}\n     */\n    get myId() {\n        return this._conf.myUserId();\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._mediaKey = key;\n        this._mediaKeyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._mediaKeyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentMediaKey(key) {\n        this._mediaKey = key;\n\n        return this._mediaKeyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Sends sacMac if channel verification waas successful.\n     *\n     */\n    markParticipantVerified(participant, isVerified) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        const pId = participant.getId();\n\n        if (!isVerified) {\n            olmData.sasVerification = undefined;\n            logger.warn(`Verification failed for participant ${pId}`);\n            this.eventEmitter.emit(\n                OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                pId,\n                false,\n                E2EEErrors.E2EE_SAS_CHANNEL_VERIFICATION_FAILED);\n\n            return;\n        }\n\n        if (!olmData.sasVerification) {\n            logger.warn(`Participant ${pId} does not have valid sasVerification`);\n            this.eventEmitter.emit(\n                OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                pId,\n                false,\n                E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n            return;\n        }\n\n        const { sas, sasMacSent } = olmData.sasVerification;\n\n        if (sas && sas.is_their_key_set() && !sasMacSent) {\n            this._sendSasMac(participant);\n\n            // Mark the MAC as sent so we don't send it multiple times.\n            olmData.sasVerification.sasMacSent = true;\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            this._idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeysReady(this._idKeys);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n    }\n\n    /**\n     * Starts the verification process for the given participant as described here\n     * https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n     *\n     *    |                                 |\n          | m.key.verification.start        |\n          |-------------------------------->|\n          |                                 |\n          |       m.key.verification.accept |\n          |<--------------------------------|\n          |                                 |\n          | m.key.verification.key          |\n          |-------------------------------->|\n          |                                 |\n          |          m.key.verification.key |\n          |<--------------------------------|\n          |                                 |\n          | m.key.verification.mac          |\n          |-------------------------------->|\n          |                                 |\n          |          m.key.verification.mac |\n          |<--------------------------------|\n          |                                 |\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @returns {Promise<void>}\n     * @private\n     */\n    startVerification(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (!olmData.session) {\n            logger.warn(`Tried to start verification with participant ${pId} but we have no session`);\n\n            return;\n        }\n\n        if (olmData.sasVerification) {\n            logger.warn(`There is already a verification in progress with participant ${pId}`);\n\n            return;\n        }\n\n        olmData.sasVerification = {\n            sas: new Olm.SAS(),\n            transactionId: uuidv4()\n        };\n\n        const startContent = {\n            transactionId: olmData.sasVerification.transactionId\n        };\n\n        olmData.sasVerification.startContent = startContent;\n        olmData.sasVerification.isInitiator = true;\n\n        const startMessage = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SAS_START,\n                data: startContent\n            }\n        };\n\n        this._sendMessage(startMessage, pId);\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeysReady(idKeys) {\n        logger.debug(`Olm id key ready: ${idKeys}`);\n\n        // Publish it in presence.\n        for (const keyType in idKeys) {\n            if (idKeys.hasOwnProperty(keyType)) {\n                const key = idKeys[keyType];\n\n                this._conf.setLocalParticipantProperty(`e2ee.idKey.${keyType}`, key);\n            }\n        }\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._mediaKey !== undefined) {\n            keyInfo.key = this._mediaKey ? base64js.fromByteArray(this._mediaKey) : false;\n            keyInfo.keyIndex = this._mediaKeyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_START: {\n            if (!olmData.session) {\n                logger.debug(`Received sas init message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-init');\n\n                return;\n            }\n\n            if (olmData.sasVerification?.sas) {\n                logger.warn(`SAS already created for participant ${pId}`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            const { transactionId } = msg.data;\n\n            const sas = new Olm.SAS();\n\n            olmData.sasVerification = {\n                sas,\n                transactionId,\n                isInitiator: false\n            };\n\n            const pubKey = olmData.sasVerification.sas.get_pubkey();\n            const commitment = this._computeCommitment(pubKey, msg.data);\n\n            /* The first phase of the verification process, the Key agreement phase\n                https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n            */\n            const acceptMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_ACCEPT,\n                    data: {\n                        transactionId,\n                        commitment\n                    }\n                }\n            };\n\n            this._sendMessage(acceptMessage, pId);\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_ACCEPT: {\n            if (!olmData.session) {\n                logger.debug(`Received sas accept message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-accept');\n\n                return;\n            }\n\n            const { commitment, transactionId } = msg.data;\n\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_ACCEPT Participant ${pId} does not have valid sasVerification`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            if (olmData.sasVerification.sasCommitment) {\n                logger.debug(`Already received sas commitment message from ${pId}!`);\n\n                this._sendError(participant, 'Already received sas commitment message from ${pId}!');\n\n                return;\n            }\n\n            olmData.sasVerification.sasCommitment = commitment;\n\n            const pubKey = olmData.sasVerification.sas.get_pubkey();\n\n            // Send KEY.\n            const keyMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_KEY,\n                    data: {\n                        key: pubKey,\n                        transactionId\n                    }\n                }\n            };\n\n            this._sendMessage(keyMessage, pId);\n\n            olmData.sasVerification.keySent = true;\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_KEY: {\n            if (!olmData.session) {\n                logger.debug(`Received sas key message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-key');\n\n                return;\n            }\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_KEY Participant ${pId} does not have valid sasVerification`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            const { isInitiator, sas, sasCommitment, startContent, keySent } = olmData.sasVerification;\n\n            if (sas.is_their_key_set()) {\n                logger.warn('SAS already has their key!');\n\n                return;\n            }\n\n            const { key: theirKey, transactionId } = msg.data;\n\n            if (sasCommitment) {\n                const commitment = this._computeCommitment(theirKey, startContent);\n\n                if (sasCommitment !== commitment) {\n                    this._sendError(participant, 'OlmAdapter commitments mismatched');\n                    this.eventEmitter.emit(\n                        OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                        pId,\n                        false,\n                        E2EEErrors.E2EE_SAS_COMMITMENT_MISMATCHED);\n                    olmData.sasVerification.free();\n\n                    return;\n                }\n            }\n\n            sas.set_their_key(theirKey);\n\n            const pubKey = sas.get_pubkey();\n\n            const myInfo = `${this.myId}|${pubKey}`;\n            const theirInfo = `${pId}|${theirKey}`;\n\n            const info = isInitiator ? `${myInfo}|${theirInfo}` : `${theirInfo}|${myInfo}`;\n\n            const sasBytes = sas.generate_bytes(info, OLM_SAS_NUM_BYTES);\n            const generatedSas = generateSas(sasBytes);\n\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_SAS_READY, pId, generatedSas);\n\n            if (keySent) {\n                return;\n            }\n\n            const keyMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_KEY,\n                    data: {\n                        key: pubKey,\n                        transactionId\n                    }\n                }\n            };\n\n            this._sendMessage(keyMessage, pId);\n\n            olmData.sasVerification.keySent = true;\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_MAC: {\n            if (!olmData.session) {\n                logger.debug(`Received sas mac message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-mac');\n\n                return;\n            }\n\n            const { keys, mac, transactionId } = msg.data;\n\n            if (!mac || !keys) {\n                logger.warn('Invalid SAS MAC message');\n\n                return;\n            }\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_MAC Participant ${pId} does not have valid sasVerification`);\n\n                return;\n            }\n\n            const sas = olmData.sasVerification.sas;\n\n            // Verify the received MACs.\n            const baseInfo = `${OLM_KEY_VERIFICATION_MAC_INFO}${pId}${this.myId}${transactionId}`;\n            const keysMac = sas.calculate_mac(\n                Object.keys(mac).sort().join(','), // eslint-disable-line newline-per-chained-call\n                baseInfo + OLM_KEY_VERIFICATION_MAC_KEY_IDS\n            );\n\n            if (keysMac !== keys) {\n                logger.error('SAS verification error: keys MAC mismatch');\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_KEYS_MAC_MISMATCH);\n\n                return;\n            }\n\n            if (!olmData.ed25519) {\n                logger.warn('SAS verification error: Missing ed25519 key');\n\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_MISSING_KEY);\n\n                return;\n            }\n\n            for (const [ keyInfo, computedMac ] of Object.entries(mac)) {\n                const ourComputedMac = sas.calculate_mac(\n                    olmData.ed25519,\n                    baseInfo + keyInfo\n                );\n\n                if (computedMac !== ourComputedMac) {\n                    logger.error('SAS verification error: MAC mismatch');\n                    this.eventEmitter.emit(\n                        OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                        pId,\n                        false,\n                        E2EEErrors.E2EE_SAS_MAC_MISMATCH);\n\n                    return;\n                }\n            }\n\n            logger.info(`SAS MAC verified for participant ${pId}`);\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED, pId, true);\n\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        const participantId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const uuid = uuidv4();\n\n                    const d = new Deferred();\n\n                    d.setRejectTimeout(REQ_TIMEOUT);\n                    d.catch(() => {\n                        this._reqs.delete(uuid);\n                        olmData.pendingSessionUuid = undefined;\n                    });\n                    this._reqs.set(uuid, d);\n\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        case 'e2ee.idKey.ed25519':\n            olmData.ed25519 = newValue;\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_SAS_AVAILABLE, participantId);\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKeys.curve25519,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n\n    /**\n     * Builds and sends the SAS MAC message to the given participant.\n     * The second phase of the verification process, the Key verification phase\n        https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n     */\n    _sendSasMac(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n        const { sas, transactionId } = olmData.sasVerification;\n\n        // Calculate and send MAC with the keys to be verified.\n        const mac = {};\n        const keyList = [];\n        const baseInfo = `${OLM_KEY_VERIFICATION_MAC_INFO}${this.myId}${pId}${transactionId}`;\n\n        const deviceKeyId = `ed25519:${pId}`;\n\n        mac[deviceKeyId] = sas.calculate_mac(\n            this._idKeys.ed25519,\n            baseInfo + deviceKeyId);\n        keyList.push(deviceKeyId);\n\n        const keys = sas.calculate_mac(\n            keyList.sort().join(','),\n            baseInfo + OLM_KEY_VERIFICATION_MAC_KEY_IDS\n        );\n\n        const macMessage = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SAS_MAC,\n                data: {\n                    keys,\n                    mac,\n                    transactionId\n                }\n            }\n        };\n\n        this._sendMessage(macMessage, pId);\n    }\n\n    /**\n     * Computes the commitment.\n     */\n    _computeCommitment(pubKey, data) {\n        const olmUtil = new Olm.Utility();\n        const commitment = olmUtil.sha256(pubKey + JSON.stringify(data));\n\n        olmUtil.free();\n\n        return commitment;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_SAS_READY,\n            this._onParticipantSasReady.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_SAS_AVAILABLE,\n            this._onParticipantSasAvailable.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_VERIFICATION_COMPLETED,\n            this._onParticipantVerificationCompleted.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * Returns the sasVerficiation object.\n     *\n     * @returns {Object}\n     */\n    get sasVerification() {\n        return this._olmAdapter;\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentMediaKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Handles the SAS ready event.\n     *\n     * @param {string} pId - The participant ID.\n     * @param {Uint8Array} sas - The bytes from sas.generate_bytes..\n     * @private\n     */\n    _onParticipantSasReady(pId, sas) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_READY, pId, sas);\n    }\n\n    /**\n     * Handles the sas available event.\n     *\n     * @param {string} pId - The participant ID.\n     * @private\n     */\n    _onParticipantSasAvailable(pId) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_AVAILABLE, pId);\n    }\n\n\n    /**\n     * Handles the SAS completed event.\n     *\n     * @param {string} pId - The participant ID.\n     * @param {boolean} success - Wheter the verification was succesfull.\n     * @private\n     */\n    _onParticipantVerificationCompleted(pId, success, message) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_COMPLETED, pId, success, message);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {Promise<ArrayBuffer>} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {Promise<CryptoKey>} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n\n    /**\n     * Starts the verification process of the participant\n     *\n     * @param {Participant} - participant to be verified.\n     * @returns {void}\n     */\n    startVerification(participant) {\n        this._keyHandler.sasVerification?.startVerification(participant);\n    }\n\n    /**\n     * Marks the channel as verified\n     *\n     * @param {Participant} - participant to be verified.\n     * @param {boolean} isVerified - whether the verification was succesfull.\n     * @returns {void}\n     */\n    markParticipantVerified(participant, isVerified) {\n        this._keyHandler.sasVerification?.markParticipantVerified(participant, isVerified);\n    }\n}\n","/* eslint-disable */\n\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n/* global define */\n\n/* Some functions and variables have been stripped for use with Strophe */\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (24 - len % 32);\n    x[((len + 64 >> 9) << 4) + 15] = len;\n\n    var w = new Array(80);\n    var a =  1732584193;\n    var b = -271733879;\n    var c = -1732584194;\n    var d =  271733878;\n    var e = -1009589776;\n\n    var i, j, t, olda, oldb, oldc, oldd, olde;\n    for (i = 0; i < x.length; i += 16) {\n        olda = a;\n        oldb = b;\n        oldc = c;\n        oldd = d;\n        olde = e;\n\n        for (j = 0; j < 80; j++) {\n            if (j < 16) {\n                w[j] = x[i + j];\n            } else {\n                w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n            }\n\n            t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n                         safe_add(safe_add(e, w[j]), sha1_kt(j)));\n            e = d;\n            d = c;\n            c = rol(b, 30);\n            b = a;\n            a = t;\n        }\n\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n        e = safe_add(e, olde);\n    }\n    return [a, b, c, d, e];\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft (t, b, c, d) {\n    if (t < 20) { return (b & c) | ((~b) & d); }\n    if (t < 40) { return b ^ c ^ d; }\n    if (t < 60) { return (b & c) | (b & d) | (c & d); }\n    return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t) {\n    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 : (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data\n */\nfunction core_hmac_sha1(key, data) {\n    var bkey = str2binb(key);\n    if (bkey.length > 16) {\n        bkey = core_sha1(bkey, key.length * 8);\n    }\n\n    var ipad = new Array(16), opad = new Array(16);\n    for (var i = 0; i < 16; i++) {\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\n    }\n\n    var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n    return core_sha1(opad.concat(hash), 512 + 160);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y) {\n    var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n}\n\n/*\n * Convert an 8-bit or 16-bit string to an array of big-endian words\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\n */\nfunction str2binb(str) {\n    var bin = [];\n    var mask = 255;\n    for (var i = 0; i < str.length * 8; i += 8) {\n        bin[i>>5] |= (str.charCodeAt(i / 8) & mask) << (24 - i%32);\n    }\n    return bin;\n}\n\n/*\n * Convert an array of big-endian words to a base-64 string\n */\nfunction binb2b64 (binarray) {\n    var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var str = \"\";\n    var triplet, j;\n    for (var i = 0; i < binarray.length * 4; i += 3) {\n        triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16) |\n                  (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 ) |\n                  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\n\n        for (j = 0; j < 4; j++) {\n            if (i * 8 + j * 6 > binarray.length * 32) { str += \"=\"; }\n            else { str += tab.charAt((triplet >> 6*(3-j)) & 0x3F); }\n        }\n    }\n    return str;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2str(bin) {\n    var str = \"\";\n    var mask = 255;\n    for (var i = 0; i < bin.length * 32; i += 8) {\n        str += String.fromCharCode((bin[i>>5] >>> (24 - i%32)) & mask);\n    }\n    return str;\n}\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nconst SHA1 = {\n    b64_hmac_sha1:  function (key, data){ return binb2b64(core_hmac_sha1(key, data)); },\n    b64_sha1:       function (s) { return binb2b64(core_sha1(str2binb(s),s.length * 8)); },\n    binb2str:       binb2str,\n    core_hmac_sha1: core_hmac_sha1,\n    str_hmac_sha1:  function (key, data){ return binb2str(core_hmac_sha1(key, data)); },\n    str_sha1:       function (s) { return binb2str(core_sha1(str2binb(s),s.length * 8)); },\n};\nexport { SHA1 as default };\n","import $ from 'jquery';\nimport { Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\nimport sha1 from './sha1';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return sha1.b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    NETWORK_INFO_EVENT,\n    default as NetworkInfo\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {Object} - handler for the connection.\n     */\n    addHandler(...args) {\n        return this._stropheConn.addHandler(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.deleteHandler}\n     *\n     * @returns {void}\n     */\n    deleteHandler(...args) {\n        this._stropheConn.deleteHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!(streamManagement.isSupported && streamManagement.isSupported())) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            logger.error(`Trying to send stanza while not connected. Status:${this._status} Proto:${\n                this.isUsingWebSocket ? this._stropheConn?._proto?.socket?.readyState : 'bosh'\n            }`);\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum JitsiTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            const filteredPayload = this._filterUpdatePayload(payload);\n\n            this._rooms = filteredPayload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, filteredPayload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Filters the hidden participants from the payload.\n     *\n     * @param {Object} payload - The payload of the update message.\n     * @return {Object} - The filtered payload.\n     */\n    _filterUpdatePayload(payload) {\n        const hiddenDomain = this.room.options.hiddenDomain;\n        const { rooms } = payload;\n        const filteredRooms = {};\n\n        Object.entries(rooms).forEach(([ key, room ]) => {\n            const { participants = {} } = room;\n            const filteredParticipants = {};\n\n            Object.entries(participants).forEach(([ k, participant ]) => {\n                if (Strophe.getDomainFromJid(participant.jid) !== hiddenDomain) {\n                    filteredParticipants[k] = participant;\n                }\n            });\n\n            filteredRooms[key] = {\n                ...room,\n                participants: filteredParticipants\n            };\n        });\n\n        return {\n            ...payload,\n            rooms: filteredRooms\n        };\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $msg } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport { JITSI_MEET_MUC_TYPE } from './xmpp';\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling room metadata.\n */\nexport default class RoomMetadata {\n    room: any;\n    _metadata: any;\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n\n        this._metadata = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Sets metadata for the given key.\n     *\n     * @param {string} key - key under which the metadata will be stored.\n     * @param {object} data - data to be stored.\n     */\n    setMetadata(key, data) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot set room metadata - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            key,\n            data\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Gets the stored metadata (all of it).\n     *\n     * @returns The stored metadata.\n     */\n    getMetadata() {\n        return this._metadata;\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.roomMetadataComponentAddress;\n    }\n\n    /**\n     * Handles a message with metadata updates.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        const { metadata } = payload;\n\n        if (!metadata || isEqual(this._metadata, metadata)) {\n            return;\n        }\n\n        this._metadata = metadata;\n        this.room.eventEmitter.emit(XMPPEvents.ROOM_METADATA_UPDATED, metadata);\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        message[JITSI_MEET_MUC_TYPE] = 'room_metadata';\n\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('room_metadata', {\n            room: this.room.roomjid,\n            xmlns: 'http://jitsi.org/jitmeet'\n        }, JSON.stringify(message)).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* eslint-disable newline-per-chained-call */\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n    const maxTimeout = 120000;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return Math.min(timeout * step, maxTimeout);\n    };\n}\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n    this.options = options;\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n\n    // Whether SIP gateway (jigasi) support is enabled. TODO: use presence so it can be changed based on jigasi\n    // availability.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = xmpp.connection;\n\n    // The JID to which conference-iq requests are sent over XMPP.\n    this.targetJid = this.options.hosts?.focus;\n\n    // If not specified default to 'focus.domain'\n    if (!this.targetJid) {\n        this.targetJid = `focus.${this.options.hosts?.domain}`;\n    }\n\n    this.targetUrl = this.options.conferenceRequestUrl;\n\n    // Whether to send conference requests over HTTP or XMPP\n    this.mode = this.targetUrl ? 'http' : 'xmpp';\n    logger.info(`Using ${this.mode} for conference requests.`);\n\n    // The set of JIDs known to belong to jicofo. Populated from configuration\n    // and responses from conference requests.\n    this.focusUserJids = new Set();\n\n    if (options.focusUserJid) {\n        this.focusUserJids.add(options.focusUserJid);\n    }\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(`Ignoring sessionId from different origin: ${event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\nModerator.prototype.isFocusJid = function(jid) {\n    if (!jid) {\n        return false;\n    }\n\n    for (const focusJid of this.focusUserJids) {\n        // jid may be a full JID, and focusUserJids may be bare JIDs\n        if (jid.indexOf(`${focusJid}/`) === 0) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\n/**\n * Create a conference request based on the configured options and saved Settings.\n *\n * A conference request has the following format:\n * {\n *   room: \"room@example.com\",\n *   sessionId: \"foo\", // optional\n *   machineUdi: \"bar\", // optional\n *   identity: \"baz\", // optional\n *   properties: { } // map string to string\n * }\n *\n * It can be encoded in either JSON or and IQ.\n *\n * @returns the created conference request.\n */\nModerator.prototype._createConferenceRequest = function() {\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const config = this.options;\n    const properties = {};\n\n    if (config.startAudioMuted !== undefined) {\n        properties.startAudioMuted = config.startAudioMuted;\n    }\n    if (config.startVideoMuted !== undefined) {\n        properties.startVideoMuted = config.startVideoMuted;\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = config?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        properties.rtcstatsEnabled = false;\n    }\n\n    const conferenceRequest = {\n        properties,\n        machineUid: Settings.machineId,\n        room: this.roomName\n    };\n\n    if (sessionId) {\n        conferenceRequest.sessionId = sessionId;\n    }\n\n    return conferenceRequest;\n};\n\n/**\n * Create a conference request and encode it as an IQ.\n */\nModerator.prototype._createConferenceIq = function() {\n    const conferenceRequest = this._createConferenceRequest();\n\n    // Generate create conference IQ\n    const elem = $iq({ to: this.targetJid,\n        type: 'set' });\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': conferenceRequest.machineUid\n    });\n\n    if (conferenceRequest.sessionId) {\n        elem.attrs({ 'session-id': conferenceRequest.sessionId });\n    }\n\n    for (const k in conferenceRequest.properties) {\n        if (conferenceRequest.properties.hasOwnProperty(k)) {\n            elem.c(\n                'property', {\n                    name: k,\n                    value: conferenceRequest.properties[k]\n                }).up();\n        }\n    }\n    if (FeatureFlags.isJoinAsVisitorSupported()) {\n        elem.c('property', {\n            name: 'visitors-version',\n            value: 1 }).up();\n    }\n\n    return elem;\n};\n\nModerator.prototype._parseConferenceIq = function(resultIq) {\n    const conferenceRequest = { properties: {} };\n\n    conferenceRequest.focusJid = $(resultIq).find('conference').attr('focusjid');\n    conferenceRequest.sessionId = $(resultIq).find('conference').attr('session-id');\n    conferenceRequest.identity = $(resultIq).find('>conference').attr('identity');\n    conferenceRequest.ready = $(resultIq).find('conference').attr('ready') === 'true';\n    conferenceRequest.vnode = $(resultIq).find('conference').attr('vnode');\n\n    if ($(resultIq).find('>conference>property[name=\\'authentication\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.authentication = 'true';\n    }\n\n    if ($(resultIq).find('>conference>property[name=\\'externalAuth\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.externalAuth = 'true';\n    }\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find('>conference>property[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.sipGatewayEnabled = 'true';\n    }\n\n    return conferenceRequest;\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.sendConferenceRequest = function() {\n    return new Promise(resolve => {\n        if (this.mode === 'xmpp') {\n            logger.info(`Sending conference request over XMPP to ${this.targetJid}`);\n\n            this.connection.sendIQ(\n                this._createConferenceIq(),\n                result => this._handleIqSuccess(result, resolve),\n                error => this._handleIqError(error, resolve));\n\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for Strophe to\n            // decide to send our IQ.\n            this.connection.flush();\n        } else {\n            logger.info(`Sending conference request over HTTP to ${this.targetUrl}`);\n            fetch(this.targetUrl, {\n                method: 'POST',\n                body: JSON.stringify(this._createConferenceRequest()),\n                headers: { 'Content-Type': 'application/json' }\n            })\n            .then(response => {\n                if (!response.ok) {\n                    response.text().then(text => {\n                        logger.warn(`Received HTTP ${response.status} ${response.statusText}. Body: ${text}`);\n                        const sessionError = response.status === 400 && text.indexOf('400 invalid-session') > 0;\n                        const notAuthorized = response.status === 403;\n\n                        this._handleError(sessionError, notAuthorized, resolve);\n                    })\n                    .catch(error => {\n                        logger.warn(`Error: ${error}`);\n                        this._handleError();\n                    });\n\n                    // _handleError has either scheduled a retry or fired an event indicating failure.\n                    return;\n                }\n                response.json().then(resultJson => {\n                    this._handleSuccess(resultJson, resolve);\n                });\n            })\n            .catch(error => {\n                logger.warn(`Error: ${error}`);\n                this._handleError();\n            });\n        }\n    });\n};\n\nModerator.prototype._handleSuccess = function(conferenceRequest, callback) {\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    if (conferenceRequest.focusJid) {\n        logger.info(`Adding focus JID: ${conferenceRequest.focusJid}`);\n        this.focusUserJids.add(conferenceRequest.focusJid);\n    } else {\n        logger.warn('Conference request response contained no focusJid.');\n    }\n\n    const authenticationEnabled = conferenceRequest.properties.authentication === 'true';\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = conferenceRequest.properties.externalAuth === 'true';\n    logger.info(`External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled && conferenceRequest.sessionId) {\n        logger.info(`Received sessionId: ${conferenceRequest.sessionId}`);\n        Settings.sessionId = conferenceRequest.sessionId;\n    }\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED, authenticationEnabled, conferenceRequest.identity);\n\n    this.sipGatewayEnabled = conferenceRequest.properties.sipGatewayEnabled;\n    logger.info(`Sip gateway enabled: ${this.sipGatewayEnabled}`);\n\n    if (conferenceRequest.ready) {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // we want to ignore redirects when this is jibri (record/live-stream or a sip jibri)\n        if (conferenceRequest.vnode && !this.options.iAmRecorder && !this.options.iAmSipGateway) {\n            logger.warn(`Redirected to: ${conferenceRequest.vnode} with focusJid ${conferenceRequest.focusJid} }`);\n\n            this.eventEmitter.emit(XMPPEvents.REDIRECTED, conferenceRequest.vnode, conferenceRequest.focusJid);\n\n            return;\n        }\n\n        logger.info('Conference-request successful, ready to join the MUC.');\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        // This was a successful response, but the \"ready\" flag is not set. Retry after a timeout.\n        logger.info(`Not ready yet, will retry in ${waitMs} ms.`);\n        window.setTimeout(\n            () => this.sendConferenceRequest().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype._handleError = function(sessionError, notAuthorized, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    if (sessionError) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n\n    // Not authorized to create new room\n    if (notAuthorized) {\n        logger.warn('Unauthorized to start the conference');\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n\n    const waitMs = this.getNextErrorTimeout();\n\n    if (sessionError && waitMs < 60000) {\n        // If the session is invalid, retry a limited number of times and then fire an error.\n        logger.info(`Invalid session, will retry after ${waitMs} ms.`);\n        this.getNextTimeout(true);\n        window.setTimeout(() => this.sendConferenceRequest().then(callback), waitMs);\n    } else {\n        const errmsg = 'Failed to get a successful response, giving up.';\n        const error = new Error(errmsg);\n\n        logger.error(errmsg, error);\n        GlobalOnErrorHandler.callErrorHandler(error);\n\n        // This is a \"fatal\" error and the user of the lib should handle it accordingly.\n        // TODO: change the event name to something accurate.\n        this.eventEmitter.emit(XMPPEvents.FOCUS_DISCONNECTED);\n    }\n};\n\n/**\n * Invoked by {@link #sendConferenecRequest} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that {@link sendConferenceRequest} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._handleIqError = function(error, callback) {\n\n    // The reservation system only works over XMPP. Handle the error separately.\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    const invalidSession\n        = Boolean($(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length);\n\n    // Not authorized to create new room\n    const notAuthorized = $(error).find('>error>not-authorized').length > 0;\n\n    if (notAuthorized && Strophe.getDomainFromJid(error.getAttribute('to')) !== this.options.hosts.anonymousdomain) {\n        // FIXME \"is external\" should come either from the focus or\n        // config.js\n        this.externalAuthEnabled = true;\n    }\n\n    this._handleError(invalidSession, notAuthorized, callback);\n};\n\n/**\n * Invoked by {@link #sendConferenecRequest} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that {@link #sendConferenecRequest} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._handleIqSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    const conferenceRequest = this._parseConferenceIq(result);\n\n    this._handleSuccess(conferenceRequest, callback);\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this._createConferenceIq(),\n            result => {\n                const sessionId = $(result).find('conference').attr('session-id');\n\n                if (sessionId) {\n                    logger.info(`Received sessionId:  ${sessionId}`);\n                    Settings.sessionId = sessionId;\n                } else {\n                    logger.warn('Response did not contain a session-id');\n                }\n\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first').prop('tagName'),\n                message: $(errorIq).find('iq>error>text').text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.targetJid,\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.targetJid,\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport RoomMetadata from './RoomMetadata';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n * Process nodes to extract data needed for MUC_JOINED and MUC_MEMBER_JOINED events.\n *\n */\nfunction extractIdentityInformation(node, hiddenFromRecorderFeatureEnabled) {\n    const identity = {};\n    const userInfo = node.children.find(c => c.tagName === 'user');\n\n    if (userInfo) {\n        identity.user = {};\n        const tags = [ 'id', 'name', 'avatar' ];\n\n        if (hiddenFromRecorderFeatureEnabled) {\n            tags.push('hidden-from-recorder');\n        }\n\n        for (const tag of tags) {\n            const child\n                = userInfo.children.find(c => c.tagName === tag);\n\n            if (child) {\n                identity.user[tag] = child.value;\n            }\n        }\n    }\n    const groupInfo = node.children.find(c => c.tagName === 'group');\n\n    if (groupInfo) {\n        identity.group = groupInfo.value;\n    }\n\n    return identity;\n}\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, xmpp, options) {\n        super();\n        this.xmpp = xmpp;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joining MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, xmpp.options);\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.roomMetadata = new RoomMetadata(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            // there is no point of sending conference iq when in visitor mode\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.sendConferenceRequest();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave(reason) {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({\n            to: this.myroomjid,\n            type: 'unavailable'\n        });\n\n        if (reason) {\n            pres.c('status').t(reason).up();\n        }\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n            const roomMetadataEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_jitsimetadata\"]>value');\n            const roomMetadataText = roomMetadataEl?.text();\n\n            if (roomMetadataText) {\n                try {\n                    this.roomMetadata._handleMessages(JSON.parse(roomMetadataText));\n                } catch (e) {\n                    logger.warn('Failed to set room metadata', e);\n                }\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established, only if needed\n        if (status === XmppConnection.Status.CONNECTED && this.presenceUpdateTime > this.presenceSyncTime) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus = this.moderator.isFocusJid(jid);\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        const isTranscriber = pres.getElementsByTagName('nick');\n\n        if (isTranscriber[0] && isTranscriber[0].innerHTML.toLowerCase() === \"transcriber\") {\n              member.isHiddenDomain = true;\n        }\n        \n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node, this.options.hiddenFromRecorderFeatureEnabled);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                delete this.lastPresences[jid];\n                if (!member.isFocus) {\n                    this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n                }\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            const reasonSelect = $(pres).find('>status');\n            const member = this.members[from];\n            let reason;\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            delete this.members[from];\n            delete this.lastPresences[from];\n\n            // In this case we *do* fire MUC_MEMBER_LEFT for the focus?\n            this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, from, reason);\n            if (member?.isFocus) {\n                logger.info('Focus has left the room - leaving conference');\n                this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                const nickEl = $(msg).find('>nick');\n                let nick;\n\n                if (nickEl.length > 0) {\n                    nick = nickEl.text();\n                }\n\n                // we will fire explicitly that this is a guest(isGuest:true) to the conference\n                // informing that this is probably a message from a guest to the conference (visitor)\n                // a message with explicit name set\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                    from, txt, this.myroomjid, stamp, nick, Boolean(nick));\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': Strophe.getBareJidFromJid(m.jid)\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     * Redirected back.\n     * @param iq The received iq.\n     */\n    onVisitorIQ(iq) {\n        const visitors = $(iq).find('>visitors[xmlns=\"jitsi:visitors\"]');\n        const response = $(iq).find('promotion-response');\n\n        if (visitors.length && response.length\n            && String(response.attr('allow')).toLowerCase() === 'true') {\n            logger.warn('Redirected back to main room.');\n\n            this.eventEmitter.emit(\n                XMPPEvents.REDIRECTED, undefined, visitors.attr('focusjid'), response.attr('username'));\n        }\n    }\n\n    /**\n     * Obtains the info about given media advertised (in legacy format) in the MUC presence of the participant\n     * identified by the given endpoint JID. This is for mantining interop with endpoints that do not support\n     * source-name signaling (Jigasi and very old mobile clients).\n     *\n     * @param {string} endpointId the endpoint ID mapped to the participant which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence info or <tt>null</tt> either if there\n     * is no presence available or if the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * @returns {RoomMetadata}\n     */\n    getMetadataHandler() {\n        return this.roomMetadata;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave(reason) {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n        this.roomMetadata.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            if (this.joined) {\n                timeout = setTimeout(() => onMucLeft(true), 5000);\n\n                this.clean();\n                this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n                this.doLeave(reason);\n            } else {\n                // we are clearing up, and we haven't joined the room\n                // there is no point of sending presence unavailable and check for timeout\n                // let's just clean\n                this.connection.emuc.doLeave(this.roomjid);\n                this.clean();\n            }\n        }));\n\n        return Promise.allSettled(promises);\n    }\n\n    /**\n     * Ends the conference for all participants.\n     */\n    end() {\n        if (this.breakoutRooms.isBreakoutRoom()) {\n            logger.warn('Cannot end conference: this is a breakout room.');\n\n            return;\n        }\n\n        // Send the end conference message.\n        const msg = $msg({ to: this.xmpp.endConferenceComponentAddress });\n\n        msg.c('end_conference').up();\n\n        this.xmpp.connection.send(msg);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onVisitors.bind(this),\n            'jitsi:visitors', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n\n    /**\n     * A visitor IQ is received, pass it to the room.\n     * @param iq The received iq.\n     * @returns {boolean}\n     */\n    onVisitors(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        room?.onVisitorIQ(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: sourceCompactJson.n\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     * @param {Object} options - Optional parameters.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure, options = {}) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingResolution, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources:\n                        options.desktopSharingSources || desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    minWidth: desktopSharingResolution?.width?.min,\n                                    minHeight: desktopSharingResolution?.height?.min,\n                                    maxWidth: desktopSharingResolution?.width?.max ?? window.screen.width,\n                                    maxHeight: desktopSharingResolution?.height?.max ?? window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const audio = this._getAudioConstraints();\n        let video = {};\n        const { desktopSharingFrameRate } = this.options;\n\n        if (typeof desktopSharingFrameRate === 'object') {\n            video.frameRate = desktopSharingFrameRate;\n        }\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia on any of the\n        // browsers. getDisplayMedia will fail with an error \"invalid constraints\" in this case.\n        video.frameRate && delete video.frameRate.min;\n\n        if (browser.isChromiumBased()) {\n            // Allow users to seamlessly switch which tab they are sharing without having to select the tab again.\n            browser.isVersionGreaterThan(106) && (video.surfaceSwitching = 'include');\n\n            // Set bogus resolution constraints to work around\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1056311 for low fps screenshare. Capturing SS at\n            // very high resolutions restricts the framerate. Therefore, skip this hack when capture fps > 5 fps.\n            if (!(desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE)) {\n                video.height = 99999;\n                video.width = 99999;\n            }\n        }\n\n        if (Object.keys(video).length === 0) {\n            video = true;\n        }\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n\n    /**\n     * Parse the \"videoType\" attribute encoded in a set of SSRC attributes (e.g.\n     * \"a=ssrc:1234 videoType:desktop\")\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseVideoTypeLine(ssrcLines) {\n        const s = ' videoType:';\n        const videoTypeLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(s) > 0);\n\n        return videoTypeLine?.substring(videoTypeLine.indexOf(s) + s.length);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        } else {\n            logger.error(`No matching RTP payload type found for ${codecName}, failed to set preferred codecs`);\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","import $ from 'jquery';\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {MediaType} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'video' && typeof this.initialLastN === 'number') {\n            elem.c('initial-last-n',\n                { xmlns: 'jitsi:colibri2',\n                    value: this.initialLastN }).up();\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n                    const videoType = SDPUtil.parseVideoTypeLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: sourceName,\n                        videoType,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:', this.session);\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=extmap-allow-mixed', this.session)) {\n                elem.c('extmap-allow-mixed', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0'\n                });\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join(';');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n    if (desc.find('>extmap-allow-mixed[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]').length > 0) {\n        sdp += 'a=extmap-allow-mixed\\r\\n';\n    }\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n            const videoType = SDPUtil.parseVideoTypeLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: sourceName,\n                videoType,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callbacks\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.map(fileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(results);\n *     }\n * });\n *\n * // Using Promises\n * async.map(fileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now an array of the file size in bytes for each file, e.g.\n *     // [ 1000, 2000, 3000]\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.map(fileList, getFileSizeInBytes);\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * //Using Callbacks\n * async.auto({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     if (err) {\n *         console.log('err = ', err);\n *     }\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * });\n *\n * //Using Promises\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }).then(results => {\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * }).catch(err => {\n *     console.log('err = ', err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.auto({\n *             get_data: function(callback) {\n *                 // async code to get some data\n *                 callback(null, 'data', 'converted to array');\n *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n *                 // once there is some data and the directory exists,\n *                 // write the data to a file in the directory\n *                 callback(null, 'filename');\n *             }],\n *             email_link: ['write_file', function(results, callback) {\n *                 // once the file is written let's email a link to it...\n *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *             }]\n *         });\n *         console.log('results = ', results);\n *         // results = {\n *         //     get_data: ['data', 'converted to array']\n *         //     make_folder; 'folder',\n *         //     write_file: 'filename'\n *         //     email_link: { file: 'filename', email: 'user@example.com' }\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\n\nfunction stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n        if (string[index] === '/' && string[index+1] === '/') {\n            // inline comment\n            let endIndex = string.indexOf('\\n', index);\n            index = (endIndex === -1) ? string.length : endIndex;\n        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n            // block comment\n            let endIndex = string.indexOf('*/', index);\n            if (endIndex !== -1) {\n                index = endIndex + 2;\n                endBlockComment = string.indexOf('*/', index);\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        } else {\n            stripped += string[index];\n            index++;\n        }\n    }\n    return stripped;\n}\n\nfunction parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n *\n * // asynchronous function that computes the file size in bytes\n * // file size is added to the memoized value, then returned\n * function getFileSizeInBytes(memo, file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, memo + stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.reduce(fileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // 6000\n *     // which is the sum of the file sizes of the three files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * let directoryList = ['dir1','dir2','dir3'];\n * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n *\n * // Using callbacks\n * async.concat(directoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *    }\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *        // [ Error: ENOENT: no such file or directory ]\n *        // since dir4 does not exist\n *    } else {\n *        console.log(results);\n *    }\n * });\n *\n * // Using Promises\n * async.concat(directoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n * }).catch(err => {\n *      console.log(err);\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n * }).catch(err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4 does not exist\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.concat(directoryList, fs.readdir);\n *         console.log(results);\n *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *     } catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n *         console.log(results);\n *     } catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4 does not exist\n *     }\n * }\n *\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // dir1/file1.txt\n *        // result now equals the first file in the list that exists\n *    }\n *);\n *\n * // Using Promises\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n * .then(result => {\n *     console.log(result);\n *     // dir1/file1.txt\n *     // result now equals the first file in the list that exists\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n *         console.log(result);\n *         // dir1/file1.txt\n *         // result now equals the file in the list that exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        /* istanbul ignore else */\n        if (typeof console === 'object') {\n            /* istanbul ignore else */\n            if (err) {\n                /* istanbul ignore else */\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) { /* istanbul ignore else */\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.every(fileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * });\n *\n * async.every(withMissingFileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * });\n *\n * // Using Promises\n * async.every(fileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.every(withMissingFileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.every(fileList, fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.every(withMissingFileList, fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since NOT every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.filter(files, fileExists, function(err, results) {\n *    if(err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *        // results is now an array of the existing files\n *    }\n * });\n *\n * // Using Promises\n * async.filter(files, fileExists)\n * .then(results => {\n *     console.log(results);\n *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *     // results is now an array of the existing files\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.filter(files, fileExists);\n *         console.log(results);\n *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *         // results is now an array of the existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const files = ['dir1/file1.txt','dir2','dir4']\n *\n * // asynchronous function that detects file type as none, file, or directory\n * function detectFile(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(null, 'none');\n *         }\n *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n *     });\n * }\n *\n * //Using callbacks\n * async.groupBy(files, detectFile, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *\t       console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n * });\n *\n * // Using Promises\n * async.groupBy(files, detectFile)\n * .then( result => {\n *     console.log(result);\n *     // {\n *     //     file: [ 'dir1/file1.txt' ],\n *     //     none: [ 'dir4' ],\n *     //     directory: [ 'dir2']\n *     // }\n *     // result is object containing the files grouped by type\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.groupBy(files, detectFile);\n *         console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whose\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file3.txt'\n * };\n *\n * const withMissingFileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file4.txt'\n * };\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, key, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n * });\n *\n * // Error handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.mapValues(fileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // result is now a map of file size in bytes for each file, e.g.\n *     // {\n *     //     f1: 1000,\n *     //     f2: 2000,\n *     //     f3: 3000\n *     // }\n * }).catch (err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch (err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/* istanbul ignore file */\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n *\n * //Using Callbacks\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.parallel([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two'] even though\n *         // the second function had a shorter timeout.\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n    var processingScheduled = false;\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.reject(fileList, fileExists, function(err, results) {\n *    // [ 'dir3/file6.txt' ]\n *    // results now equals an array of the non-existing files\n * });\n *\n * // Using Promises\n * async.reject(fileList, fileExists)\n * .then( results => {\n *     console.log(results);\n *     // [ 'dir3/file6.txt' ]\n *     // results now equals an array of the non-existing files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.reject(fileList, fileExists);\n *         console.log(results);\n *         // [ 'dir3/file6.txt' ]\n *         // results now equals an array of the non-existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // true\n *        // result is true since some file in the list exists\n *    }\n *);\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // false\n *        // result is false since none of the files exists\n *    }\n *);\n *\n * // Using Promises\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since some file in the list exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since none of the files exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since some file in the list exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since none of the files exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * // bigfile.txt is a file that is 251100 bytes in size\n * // mediumfile.txt is a file that is 11000 bytes in size\n * // smallfile.txt is a file that is 121 bytes in size\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) return callback(getFileSizeErr);\n *         callback(null, fileSize);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // descending order\n * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) {\n *             return callback(getFileSizeErr);\n *         }\n *         callback(null, fileSize * -1);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n *         }\n *     }\n * );\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *             // [ Error: ENOENT: no such file or directory ]\n *         } else {\n *             console.log(results);\n *         }\n *     }\n * );\n *\n * // Using Promises\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now the original array of files sorted by\n *     // file size (ascending by default), e.g.\n *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *         // results is now the original array of files sorted by\n *         // file size (ascending by default), e.g.\n *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * // Error handling\n * async () => {\n *     try {\n *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","import { getLogger } from '@jitsi/logger';\nimport { queue } from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * Pauses the execution of the tasks on the queue.\n     */\n    pause() {\n        this._queue.pause();\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Resumes the execution of the tasks on the queue.\n     */\n    resume() {\n        this._queue.resume();\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals video max frame heights for its local sources.\n     */\n    REMOTE_SOURCE_CONSTRAINTS_CHANGED = 'media_session.REMOTE_SOURCE_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build, $iq, Strophe } from 'strophe.js';\n\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * Add \"source\" element as a child of \"description\" element.\n * @param {Object} description The \"description\" element to add to.\n * @param {Object} s Contains properties of the source being added.\n * @param {Number} ssrc_ The SSRC.\n * @param {String} msid The \"msid\" attribute.\n */\nfunction _addSourceElement(description, s, ssrc_, msid) {\n\n    description.c('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: ssrc_,\n        name: s.source\n    })\n        .c('parameter', {\n            name: 'msid',\n            value: msid\n        })\n        .up()\n        .c('ssrc-info', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            owner: s.owner\n        })\n        .up()\n        .up();\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * video test ?(ask George).\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the source-name and max frame height value of the 'content-modify' IQ when source-name signaling\n     * is enabled.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Object|null}\n     */\n    static parseSourceMaxFrameHeight(jingleContents) {\n        const receiverConstraints = [];\n        const sourceFrameHeightSel = jingleContents.find('>content[name=\"video\"]>source-frame-height');\n        let maxHeight, sourceName;\n\n        if (sourceFrameHeightSel.length) {\n            sourceFrameHeightSel.each((_, source) => {\n                sourceName = source.getAttribute('sourceName');\n                maxHeight = source.getAttribute('maxHeight');\n                receiverConstraints.push({\n                    maxHeight,\n                    sourceName\n                });\n            });\n\n            return receiverConstraints;\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Receiver constraints (max height) set by the application per remote source. Will be used for p2p connection.\n         *\n         * @type {Map<string, number>}\n         */\n        this._sourceReceiverConstraints = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * Number of remote video sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteVideoSources = 0;\n\n        /**\n         * Number of remote audio sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteAudioSources = 0;\n\n        /**\n         * Remote preference for the receive video max frame heights when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>|undefined}\n         */\n        this.remoteSourceMaxFrameHeights = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection after the session is established.\n         * The queue is paused until the first offer/answer cycle is complete. Only track or codec related\n         * operations which necessitate a renegotiation cycle need to be pushed to the modification queue.\n         * These tasks will be executed after the session has been established.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n        this.modificationQueue.pause();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.codecSettings = options.codecSettings;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan = browser.supportsUnifiedPlan();\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n        } else {\n            // H264 scalability is not supported on jvb, so simulcast needs to be disabled when H264 is preferred.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast || options.videoQuality?.preferredCodec === CodecMimeType.H264;\n\n            // Do not send lower spatial layers for low fps screenshare and enable them only for high fps screenshare.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            if (this.isP2P) {\n                this.sendIceCandidate(candidate);\n            }\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator\n                            && (browser.isChromiumBased() || browser.isReactNative())))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Remote preference for receive video max frame heights when source-name signaling is enabled.\n     *\n     * @returns {Map<string, number>|undefined}\n     */\n    getRemoteSourcesRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteSourceMaxFrameHeights;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (ssrcElement.hasAttribute('name')) {\n                const sourceName = ssrcElement.getAttribute('name');\n\n                this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n            }\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner?.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send 'session-accept' in result.\n     *\n     * @param jingleOffer jQuery selector pointing to the jingle element of the offer IQ\n     * @param success callback called when we accept incoming session successfully and receive RESULT packet to\n     * 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept the incoming offer. 'error' argument\n     * can be used to log some details about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes. We allow the localTracks to optionally be passed in so that the addition of the\n     * local tracks and the processing of the initial offer can all be done atomically. We want to make sure that any\n     * other operations which originate in the XMPP Jingle messages related with this session to be executed with an\n     * assumption that the initial offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    // Start processing tasks on the modification queue.\n                    logger.debug('Resuming the modification queue after session is established!');\n                    this.modificationQueue.resume();\n\n                    success();\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n\n                    // The first video track is added to the peerconnection and signaled as part of the session-accept.\n                    // Add secondary video tracks (that were already added to conference) to the peerconnection here.\n                    // This will happen when someone shares a secondary source to a two people call, the other user\n                    // leaves and joins the call again, a new peerconnection is created for p2p/jvb connection. At this\n                    // point, there are 2 video tracks which need to be signaled to the remote peer.\n                    const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n                    videoTracks.length && videoTracks.splice(0, 1);\n                    if (FeatureFlags.isMultiStreamSendSupportEnabled() && videoTracks.length) {\n                        this.addTracks(videoTracks);\n                    }\n                },\n                error => {\n                    failure(error);\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        logger.debug(`${this} Executing invite task`);\n\n        const addTracks = [];\n\n        for (const track of localTracks) {\n            addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n        }\n\n        Promise.all(addTracks)\n            .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n            .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n            .then(() => {\n                this.peerconnection.processLocalSdpForTransceiverInfo(localTracks);\n\n                // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                // the transformation chain.\n                this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n            })\n            .then(() => {\n                logger.debug(`${this} invite executed - OK`);\n            })\n            .catch(error => {\n                logger.error(`${this} invite error`, error);\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer as the remote description.\n     *\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        logger.debug(`${this} Executing setAnswer task`);\n\n        const newRemoteSdp = this._processNewJingleOfferIq(jingleAnswer);\n        const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n        const remoteDescription = new RTCSessionDescription({\n            type: 'answer',\n            sdp: newRemoteSdp.raw\n        });\n\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                if (this.state === JingleSessionState.PENDING) {\n                    this.state = JingleSessionState.ACTIVE;\n\n                    // Start processing tasks on the modification queue.\n                    logger.debug('Resuming the modification queue after session is established!');\n                    this.modificationQueue.resume();\n                    const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this.sendContentModify();\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                }\n            })\n            .then(() => {\n                logger.debug(`${this} setAnswer task done`);\n            })\n            .catch(error => {\n                logger.error(`${this} setAnswer task failed: ${error}`);\n            });\n    }\n\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at converting Strophe Jingle IQ into\n     * remote offer SDP. Once converted, setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     *\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we fail at any point during setRD,\n     * createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes (for the local track addition to be an atomic operation together with the\n     * offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        logger.debug(`${this} Executing setOfferAnswerCycle task`);\n\n        const addTracks = [];\n        const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n        const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n        let tracks = localTracks;\n\n        // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n        // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n        // renegotiation.\n        if (FeatureFlags.isMultiStreamSendSupportEnabled() && videoTracks.length > 1) {\n            tracks = [ ...audioTracks, videoTracks[0] ];\n        }\n        for (const track of tracks) {\n            addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n        }\n        const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n        const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n        const bridgeSession = $(jingleOfferAnswerIq).find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]');\n        const bridgeSessionId = bridgeSession.attr('id');\n\n        if (bridgeSessionId !== this._bridgeSessionId) {\n            this._bridgeSessionId = bridgeSessionId;\n        }\n        const remoteDescription = new RTCSessionDescription({\n            type: 'offer',\n            sdp: newRemoteSdp.raw\n        });\n\n        Promise.all(addTracks)\n            .then(() => this._responderRenegotiate(remoteDescription))\n            .then(() => {\n                this.peerconnection.processLocalSdpForTransceiverInfo(tracks);\n                if (this.state === JingleSessionState.PENDING) {\n                    this.state = JingleSessionState.ACTIVE;\n\n                    // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                    // adjust the video media direction only in the local SDP and the Jingle contents direction\n                    // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                    // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                    // interested in receiving video content. Changing media direction in the remote SDP will mess\n                    // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                    // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                    if (this.isP2P\n                        && (!this._localVideoActive || this._sourceReceiverConstraints)) {\n                        this.sendContentModify();\n                    }\n                }\n\n                // Old local SDP will be available when we're setting answer for the first time, but not when offer\n                // and it's fine since we're generating an answer now it will contain all our SSRCs.\n                if (oldLocalSdp) {\n                    const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSdp);\n                }\n            })\n            .then(() => {\n                logger.debug(`${this} setOfferAnswerCycle task done`);\n                success();\n            })\n            .catch(error => {\n                logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                failure(error);\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setVideoCodecs: preferred=${preferred}, disabled=${disabled}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        const workFunction = finishedCallback => {\n            // First set an offer with a rejected 'data' section\n            this.setOfferAnswerCycle(\n                jingleOfferElem,\n                () => {\n                    // Now set the original offer(with the 'data' section)\n                    this.setOfferAnswerCycle(\n                        originalOffer,\n                        () => {\n                            const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            if (typeof this.options.channelLastN === 'number' && this.options.channelLastN >= 0) {\n                                localSDP.initialLastN = this.options.channelLastN;\n                            }\n\n                            this.sendTransportAccept(localSDP, success, failure);\n\n                            this.room.eventEmitter.emit(\n                                XMPPEvents.ICE_RESTART_SUCCESS,\n                                this,\n                                originalOffer);\n\n                            finishedCallback();\n                        }, error => finishedCallback(error)\n                    );\n                }, error => finishedCallback(error)\n            );\n        };\n\n        logger.debug(`${this} Queued ICE restart task`);\n\n        // Queue and execute\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} ICE restart task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} ICE restart task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        if (typeof this.options.channelLastN === 'number' && this.options.channelLastN >= 0) {\n            localSDP.initialLastN = this.options.channelLastN;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const senders = this._localVideoActive ? 'both' : 'none';\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof this._sourceReceiverConstraints !== 'undefined') {\n            this._sourceReceiverConstraints.forEach((maxHeight, sourceName) => {\n                sessionModify\n                    .c('source-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                    .attrs({\n                        sourceName,\n                        maxHeight\n                    });\n\n                sessionModify.up();\n                logger.info(`${this} sending content-modify for source-name: ${sourceName}, maxHeight: ${maxHeight}`);\n            });\n        }\n\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote p2p peer.\n     *\n     * @param {Map<string, number>} sourceReceiverConstraints - The receiver constraints per source.\n     */\n    setReceiverVideoConstraint(sourceReceiverConstraints) {\n        logger.info(`${this} setReceiverVideoConstraint - constraints: ${JSON.stringify(sourceReceiverConstraints)}`);\n        this._sourceReceiverConstraints = sourceReceiverConstraints;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        if (FeatureFlags.isSsrcRewritingSupported() && this.peerconnection) {\n            this.peerconnection.getRemoteTracks().forEach(track => {\n                this.room.eventEmitter.emit(JitsiTrackEvents.TRACK_REMOVED, track);\n            });\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            let midFound = false;\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n                midFound = true;\n            });\n\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\n            // in the current remote description. Add a new m-line for this newly signaled source.\n            if (!midFound && this.isP2P) {\n                addSsrcInfo[name] = lines;\n            }\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Processes the source map message received from the bridge and creates a new remote track for newly signaled\n     * SSRCs or updates the source-name and owner on the remote track for an existing SSRC.\n     *\n     * @param {Object} message - The source map message.\n     * @param {string} mediaType - The media type, 'audio' or 'video'.\n     * @returns {void}\n     */\n    processSourceMap(message, mediaType) {\n        const newSsrcs = [];\n\n        for (const src of message.mappedSources) {\n            // eslint-disable-next-line prefer-const\n            let { owner, source, ssrc, videoType } = src;\n            const isNewSsrc = this.peerconnection.addRemoteSsrc(ssrc, source);\n            let lookupSsrc = ssrc;\n\n            if (isNewSsrc) {\n                newSsrcs.push(src);\n\n                // Check if there is an old mapping for the given source and clear the owner on the associated track.\n                const oldSsrc = this.peerconnection.remoteSources.get(source);\n\n                if (oldSsrc) {\n                    lookupSsrc = oldSsrc;\n                    owner = undefined;\n                    source = undefined;\n                }\n            }\n            const track = this.peerconnection.getTrackBySSRC(lookupSsrc);\n\n            if (track) {\n                logger.debug(`Existing SSRC ${ssrc}: new owner=${owner}, source-name=${source}`);\n\n                // Update the SSRC owner.\n                this._signalingLayer.setSSRCOwner(ssrc, owner);\n\n                // Update the track with all the relevant info.\n                track.setSourceName(source);\n                track.setOwner(owner);\n                if (mediaType === MediaType.VIDEO) {\n                    const type = videoType === 'CAMERA' ? VideoType.CAMERA : VideoType.DESKTOP;\n\n                    track._setVideoType(type);\n                }\n\n                // Update the muted state on the track since the presence for this track could have been received\n                // before the updated source map is received on the bridge channel.\n                const peerMediaInfo = this._signalingLayer.getPeerMediaInfo(owner, mediaType, source);\n\n                peerMediaInfo && this.peerconnection._sourceMutedChanged(source, peerMediaInfo.muted);\n            }\n        }\n\n        // Add the new SSRCs to the remote description by generating a source message.\n        if (newSsrcs.length) {\n            let node = $build('content', {\n                xmlns: 'urn:xmpp:jingle:1',\n                name: mediaType\n            }).c('description', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: mediaType\n            });\n\n            for (const src of newSsrcs) {\n                const { rtx, ssrc, source } = src;\n                let msid;\n\n                if (mediaType === MediaType.VIDEO) {\n                    const idx = ++this.numRemoteVideoSources;\n\n                    msid = `remote-video-${idx} remote-video-${idx}`;\n\n                    if (rtx !== '-1') {\n                        _addSourceElement(node, src, rtx, msid);\n                        node.c('ssrc-group', {\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                            semantics: 'FID'\n                        })\n                            .c('source', {\n                                xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                                ssrc\n                            })\n                            .up()\n                            .c('source', {\n                                xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                                ssrc: rtx\n                            })\n                            .up()\n                            .up();\n                    }\n                } else {\n                    const idx = ++this.numRemoteAudioSources;\n\n                    msid = `remote-audio-${idx} remote-audio-${idx}`;\n                }\n                _addSourceElement(node, src, ssrc, msid);\n                this.peerconnection.remoteSources.set(source, ssrc);\n            }\n            node = node.up();\n            this._addOrRemoveRemoteStream(true /* add */, node.node);\n        }\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n\n            // Always initiate a sRD->cA->sLD cycle when a remote source is added or removed irrespective of whether\n            // the local endpoint is an initiator or responder. Fixes bugs on Chromium where decoders are not created\n            // when sLD->cO->sRD cycle is initiated for p2p cases when remote sources are received.\n            this._responderRenegotiate(remoteDescription).then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n        let ssrcs;\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            ssrcs = lines.map(line => Number(line.split('a=ssrc:')[1]?.split(' ')[0]));\n\n            if (this.usesUnifiedPlan) {\n                let mid;\n\n                lines.forEach(line => {\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n\n                // Reject the m-line so that the browser removes the associated transceiver from the list of available\n                // transceivers. This will prevent the client from trying to re-use these inactive transceivers when\n                // additional video sources are added to the peerconnection.\n                if (mid > -1 && !this.isP2P && FeatureFlags.isMultiStreamSendSupportEnabled()) {\n                    const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\n\n                    remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\n                }\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n\n        // Update the ssrc owners list.\n        ssrcs?.length && this._signalingLayer.removeSSRCOwners(ssrcs);\n\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\n        // the remote p2p peer when multi-stream support is enabled.\n        if (addSsrcInfo.length > remoteSdp.media.length\n            && this.isP2P\n            && this.usesUnifiedPlan) {\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            remoteSdp = new SDP(remoteSdp.raw);\n        }\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!FeatureFlags.isMultiStreamSendSupportEnabled()\n            || !localTracks?.length\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const oldLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n            const recvOnlyTransceiver = this.peerconnection.peerconnection.getTransceivers()\n                    .find(t => t.receiver.track.kind === MediaType.VIDEO\n                        && t.direction === MediaDirection.RECVONLY\n                        && t.currentDirection === MediaDirection.RECVONLY);\n\n            // Add transceivers by adding a new mline in the remote description for each track. Do not create a new\n            // m-line if a recv-only transceiver exists in the p2p case. The new track will be attached to the\n            // existing one in that case.\n            for (const track of localTracks) {\n                if (!this.isP2P || !recvOnlyTransceiver) {\n                    remoteSdp.addMlineForNewLocalSource(track.getType());\n                }\n            }\n\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: remoteSdp.raw\n            });\n\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\n            this._responderRenegotiate(remoteDescription)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => {\n                    const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                    // Signal the new sources to the peer.\n                    this.notifyMySSRCUpdate(oldLocalSDP, newLocalSDP);\n                    finishedCallback();\n                })\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     *\n     * @param {boolean} active - <tt>true</tt> to enable media transfer or <tt>false</tt> to suspend media transmission\n     * @returns {Promise}\n     */\n    setMediaTransferActive(active) {\n        return this.peerconnection.tpcUtils.setMediaTransferActive(active)\n            .then(() => {\n                this.peerconnection.audioTransferActive = active;\n                this.peerconnection.videoTransferActive = active;\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                        const remoteDescription = new RTCSessionDescription({\n                            type: 'offer',\n                            sdp: remoteSdp\n                        });\n\n                        // Always initiate a sRD->cA->sLD cycle since renegotiation fails in the following scenario.\n                        // In a p2p call when channelLastN=0, the direction on the video tranceiver is set to\n                        // 'inactive'. At this point, if the user unmutes, the track is replaced on the video sender.\n                        // If a cO->sLD->sRD is triggered, the browser adds a third m-line which isn't expected and\n                        // possibly is a bug. All renegotiations fail as a result. However, the browser does not add a\n                        // third m-line in the answer it generates and renegotiation succeeds.\n                        promise = this._responderRenegotiate(remoteDescription).then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        // Set the source name of the new track.\n                        if (oldTrack\n                            && newTrack\n                            && oldTrack.isVideoTrack()) {\n                            newTrack.setSourceName(oldTrack.getSourceName());\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to the peerconnection associated with this session.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is added back to this session and\n     * renegotiation succeeds (if its warranted). Will be rejected with a <tt>string</tt> that provides some error\n     * details in case something goes wrong.\n     */\n    addTrackToPc(track) {\n        return this._addRemoveTrack(false /* add */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackFromPc(track) {\n        return this._addRemoveTrack(true /* remove */, track);\n    }\n\n    /**\n     * See {@link addTrackToPc} and {@link removeTrackFromPc}.\n     * @param {boolean} isRemove <tt>true</tt> for \"remove\" operation or <tt>false</tt> for \"add\" operation.\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrack(isRemove, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isRemove ? 'removeTrack' : 'addTrack';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(`Error:  tried ${operationName} track with no active peer connection`);\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isRemove\n                    ? tpc.removeTrackFromPc(track)\n                    : tpc.addTrackToPc(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends video media transfer over the p2p peer connection.\n     *\n     * @param {boolean} videoActive <tt>true</tt> to enable video media transfer or <tt>false</tt> to suspend video\n     * media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once the operation is done. It will be rejected with\n     * an error description as a string in case anything goes wrong.\n     */\n    setP2pVideoTransferActive(videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject('Can not modify video transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive);\n\n            // Always initiate a renegotiation cycle for p2p connection when the media direction is changed.\n            this._renegotiate()\n                .then(() => finishedCallback())\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. It checks if the sourceMaxFrameHeight (as requested by\n     * the p2p peer) or the senders attribute of the video content has changed and modifies the local video sources\n     * accordingly.\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders = JingleSessionPC.parseVideoSenders(jingleContents);\n        const sourceMaxFrameHeights = JingleSessionPC.parseSourceMaxFrameHeight(jingleContents);\n\n        if (sourceMaxFrameHeights) {\n            this.remoteSourceMaxFrameHeights = sourceMaxFrameHeights;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED, this, sourceMaxFrameHeights);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(`${this} - failed to parse video \"senders\" attribute in \"content-modify\" action`);\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded() && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust the media direction.\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries to apply it for\n     * {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of Jingle video content element advertised\n     * by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of the underlying peerconnection and renegotiation\n     * is required for the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n\n            return this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive);\n        }\n\n        return false;\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            logger.debug(`Received ${action} from ${fromJid}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        if (!this.options.deploymentInfo) {\n            this.options.deploymentInfo = {};\n        }\n\n        // Cache of components used for certain features.\n        this._components = [];\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        // $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n        //     this.disconnect(ev).catch(() => {\n        //         // ignore errors in order to not brake the unload.\n        //     });\n        // });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        logger.debug('Source-name signaling is enabled');\n        this.caps.addFeature('http://jitsi.org/source-name');\n\n        logger.debug('Receiving multiple video streams is enabled');\n        this.caps.addFeature('http://jitsi.org/receive-multiple-video-streams');\n\n        // Advertise support for ssrc-rewriting.\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            this.caps.addFeature('http://jitsi.org/ssrc-rewriting-1');\n        }\n\n        // Use \"-1\" as a version that we can bump later. This should match\n        // the version added in moderator.js, this one here is mostly defined\n        // for keeping stats, since it is not made available to jocofo at\n        // the time of the initial conference-request.\n        if (FeatureFlags.isJoinAsVisitorSupported()) {\n            this.caps.addFeature('http://jitsi.org/visitors-1');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n                this._components.push(this.avModerationComponentAddress);\n            }\n\n            if (identity.type === 'end_conference') {\n                this.endConferenceComponentAddress = identity.name;\n                this._components.push(this.endConferenceComponentAddress);\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n                this._components.push(this.speakerStatsComponentAddress);\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n                this._components.push(this.conferenceDurationComponentAddress);\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'release') {\n                this.options.deploymentInfo.backendRelease = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n                this._components.push(this.breakoutRoomsComponentAddress);\n            }\n\n            if (identity.type === 'room_metadata') {\n                this.roomMetadataComponentAddress = identity.name;\n                this._components.push(this.roomMetadataComponentAddress);\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this._components.length > 0) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                    resolve();\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {boolean} silence - Whether the dominant speaker is silent or not.\n     */\n    sendDominantSpeakerEvent(roomJid, silence) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            silence })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face landmarks to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceLandmarksEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceLandmarks', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            faceExpression: payload.faceExpression,\n            timestamp: payload.timestamp,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this._components.includes(from)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'room_metadata') {\n            this.eventEmitter.emit(XMPPEvents.ROOM_METADATA_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            // Let's push to analytics any updates that may have come from the backend\n            Statistics.analytics.addPermanentProperties({ ...logObject });\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Send a new conference IQ.\n                        this.room.moderator.allocateConferenceFocus();\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n        this.enforcePreferredCodec = options.enforcePreferredCodec;\n\n        // VP8 cannot be disabled since it the default codec.\n        this.p2pDisabledCodec = options.p2pDisabledCodec !== CodecMimeType.VP8\n            && this._isCodecSupported(options.p2pDisabledCodec)\n            && options.p2pDisabledCodec;\n        this.jvbDisabledCodec = options.jvbDisabledCodec !== CodecMimeType.VP8\n            && this._isCodecSupported(options.jvbDisabledCodec)\n            && options.jvbDisabledCodec;\n\n        // Determine the preferred codecs.\n        this.p2pPreferredCodec = this._isCodecSupported(options.p2pPreferredCodec)\n            && options.p2pPreferredCodec !== options.p2pDisabledCodec\n            ? options.p2pPreferredCodec\n            : CodecMimeType.VP8;\n        this.jvbPreferredCodec = this._isCodecSupported(options.jvbPreferredCodec)\n            && options.jvbPreferredCodec !== options.jvbDisabledCodec\n            ? options.jvbPreferredCodec\n            : CodecMimeType.VP8;\n\n        logger.debug(`Codec preferences for the conference are JVB: preferred=${this.jvbPreferredCodec},`\n            + `disabled=${this.jvbDisabledCodec} P2P: preferred=${this.p2pPreferredCodec},`\n            + `disabled=${this.p2pDisabledCodec}`);\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._selectPreferredCodec(session));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        if (!preferredCodec) {\n            return false;\n        }\n\n        if (preferredCodec === CodecMimeType.VP9 && !this.enforcePreferredCodec && !browser.supportsVP9()) {\n            return false;\n        }\n\n        // Skip the check on FF because it does not support the getCapabilities API.\n        // It is safe to assume that Firefox supports all the codecs supported by Chrome.\n        if (browser.isFirefox()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred/disabled codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     */\n    _selectPreferredCodec(mediaSession) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n\n        if (!session) {\n            return;\n        }\n        const preferredCodec = session.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = session.isP2P ? this.p2pDisabledCodec : this.jvbDisabledCodec;\n        const currentCodec = session?.peerconnection.getConfiguredVideoCodec();\n        let selectedCodec = preferredCodec ?? currentCodec;\n\n        if (!this.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n            const remoteCodecs = remoteParticipants?.map(remote => {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n\n                return peerMediaInfo?.codecType;\n            });\n\n            const nonPreferredCodecs = remoteCodecs.filter(codec => codec !== selectedCodec && codec !== disabledCodec);\n\n            // Find the fallback codec when there are endpoints in the call that don't have the same preferred codec\n            // set.\n            if (nonPreferredCodecs.length) {\n                // Always prefer VP8 as that is the default codec supported on all client types.\n                selectedCodec = nonPreferredCodecs.find(codec => codec === CodecMimeType.VP8)\n                    ?? nonPreferredCodecs.find(codec => this._isCodecSupported(codec));\n            }\n        }\n        if (selectedCodec !== currentCodec || !session?.peerconnection.isVideoCodecDisabled(disabledCodec)) {\n            session.setVideoCodecs(selectedCodec, disabledCodec);\n        }\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     * @param {JitsiConference} conference the conference instance.\n     */\n    constructor(peerconnection, wsUrl, emitter, conference) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // The conference that uses this bridge channel.\n        this._conference = conference;\n\n        // Whether the channel is connected or not. It will start as undefined\n        // for the first connection attempt. Then transition to either true or false.\n        this._connected = undefined;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            const isConnecting = this._channel && (this._channel.readyState === 'connecting'\n                    || this._channel.readyState === WebSocket.CONNECTING);\n\n            // Should not spawn new websockets while one is already trying to connect.\n            if (isConnecting) {\n                // Timeout is still required as there is flag `_areRetriesEnabled` that\n                // blocks new retrying cycles until any channel opens in current cycle.\n                this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n\n                return;\n            }\n\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'SourceVideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            this._connected = true;\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [], silence } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers, silence);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'ForwardedSources': {\n                const forwardedSources = obj.forwardedSources;\n\n                logger.info(`New forwarded sources: ${forwardedSources}`);\n                emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (typeof obj.sourceName === 'string' && typeof obj.maxHeight === 'number') {\n                    logger.info(`SenderSourceConstraints: ${obj.sourceName} - ${obj.maxHeight}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, obj);\n                } else {\n                    logger.error(`Invalid SenderSourceConstraints: ${obj.sourceName} - ${obj.maxHeight}`);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            case 'VideoSourcesMap': {\n                logger.info(`Received VideoSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.VIDEO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            case 'AudioSourcesMap': {\n                logger.info(`Received AudioSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.AUDIO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.debug(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (channel !== this._channel) {\n                logger.debug('Skip close handler, channel instance is not equal to stored one');\n\n                return;\n            }\n\n            // When the JVB closes the connection gracefully due to the participant being alone in the meeting it uses\n            // code 1001. However, the same code is also used by Cloudflare when it terminates the ws. Therefore, check\n            // for the number of remote participants in the call and abort retries only when the endpoint is the only\n            // endpoint in the call.\n            const isGracefulClose = this._closedFromClient\n                || (event.code === 1001 && this._conference.getParticipantCount() === 1);\n\n            if (!isGracefulClose) {\n                const { code, reason } = event;\n\n                logger.error(`Channel closed: ${code} ${reason}`);\n\n                if (this._mode === 'websocket') {\n                    this._retryWebSocketConnection(event);\n\n                    // We only want to send this event the first time the failure happens.\n                    if (this._connected !== false) {\n                        emitter.emit(RTCEvents.DATA_CHANNEL_CLOSED, {\n                            code,\n                            reason\n                        });\n                    }\n                }\n            }\n\n            this._connected = false;\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio', {direction: 'recvonly'});\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video', {direction: 'recvonly'});\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nexport function shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      let desc = arguments[0] || {};\n      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {\n        return nativeSetLocalDescription.apply(this, arguments);\n      }\n      // The remaining steps should technically happen when SLD comes off the\n      // RTCPeerConnection's operations chain (not ahead of going on it), but\n      // this is too difficult to shim. Instead, this shim only covers the\n      // common case where the operations chain is empty. This is imperfect, but\n      // should cover many cases. Rationale: Even if we can't reduce the glare\n      // window to zero on imperfect implementations, there's value in tapping\n      // into the perfect negotiation pattern that several browsers support.\n      desc = {type: desc.type, sdp: desc.sdp};\n      if (!desc.type) {\n        switch (this.signalingState) {\n          case 'stable':\n          case 'have-local-offer':\n          case 'have-remote-pranswer':\n            desc.type = 'offer';\n            break;\n          default:\n            desc.type = 'answer';\n            break;\n        }\n      }\n      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {\n        return nativeSetLocalDescription.apply(this, [desc]);\n      }\n      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n      return func.apply(this)\n        .then(d => nativeSetLocalDescription.apply(this, [d]));\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\nimport 'webrtc-adapter';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (!browser.isReactNative()) {\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n        }\n\n        this.pcConstraints = {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @param {Object} options - Optional parameters.\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia(options) {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                },\n                options);\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @param {Array<string>} options.desktopSharingSources - The types of sources (\"screen\", \"window\", etc)\n     * from which the user can select what to share.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia({ desktopSharingSources });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        return this.getStreamId();\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the source name of the track.\n     * @returns {String|undefined}\n     */\n    getSourceName() { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    detach(container) {\n        if (!container) {\n            return;\n        }\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n    \n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n        return true;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n\n    /**\n     * Assigns the source name to a track.\n     * @param {String} name - The name to be assigned to the track.\n     * @returns {void}\n     */\n    setSourceName(name) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED, this),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType ?? displaySurface;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackToPc(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackFromPc(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSendSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In React Native we mute the camera by setting track.enabled but that doesn't\n        // work for screen-share tracks, so do the remove-as-mute for those.\n        const doesVideoMuteByStreamRemove\n            = browser.isReactNative() ? this.videoType === VideoType.DESKTOP : browser.doesVideoMuteByStreamRemove();\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSendSupportEnabled())\n                || !doesVideoMuteByStreamRemove) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                const streamInfo = streamsInfo.find(info => info.track.kind === this.getType());\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    async dispose() {\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            await this.setEffect();\n        }\n\n        if (this.conference) {\n            await this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        return conference._removeLocalTrackFromPc(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference._addLocalTrackToPc(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                const bLine = clonedeep(mLine);\n\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    // Copy the msid attribute to each ssrc.\n                    bLine.sources.forEach(ssrc => {\n                        ssrc.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(bLine.sources);\n                }\n                if (typeof bLine.ssrcGroups !== 'undefined' && Array.isArray(bLine.ssrcGroups)) {\n                    media[type].ssrcGroups = (media[type].ssrcGroups || []).concat(bLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when presence for a source is received.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {string} endpointId - The endpoint id.\n     * @param {boolean} muted - The new muted state.\n     * @param {string} videoType - The video type of the source.\n     */\n    SOURCE_UPDATED = 'signaling.sourceUpdated',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_UPDATED = SignalingEvents.SOURCE_UPDATED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.lastIndexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * Extracts source index (zero based) from a given source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name, eg. endpointA-v0.\n * @returns {number}\n */\nexport function getSourceIndexFromSourceName(sourceName) {\n    const nameParts = sourceName.split('-');\n    const trackIdx = Number(nameParts[nameParts.length - 1].substring(1));\n\n    if (Number.isNaN(trackIdx)) {\n        throw new Error(`Failed to parse track idx for source name: ${sourceName}`);\n    }\n\n    return trackIdx;\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Removes the association between a given SSRC and its current owner so that it can re-used when the SSRC gets\n     * remapped to another source from a different endpoint.\n     * @param {number} ssrc a list of SSRCs.\n     */\n    removeSSRCOwners(ssrcList) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Removes the SSRCs associated with a given endpoint from the SSRC owners.\n     *\n     * @param {string} id endpoint id of the participant leaving the call.\n     * @returns {void}\n     */\n    updateSsrcOwnersOnLeave(id) { // eslint-disable-line no-unused-vars\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n        this.audioSourcesToMsidMap = new Map();\n        this.videoSourcesToMsidMap = new Map();\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Updates or adds a 'msid' attribute in the format '<endpoint_id>-<mediaType>-<trackIndex>-<tpcId>'\n     * example - d8ff91-video-0-1\n     * All other attributes like 'cname', 'label' and 'mslabel' are removed since these are not processed by Jicofo.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const mediaDirection = mediaSection.mLine?.direction;\n        const msidLine = mediaSection.mLine?.msid;\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const streamId = `${this.localEndpointId}-${mediaType}`;\n        const trackId = msidLine && msidLine.split(' ')[1];\n\n        // Always overwrite msid since we want the msid to be in this format even if the browser generates one.\n        for (const source of sources) {\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n            // Update the msid if the 'msid' attribute exists.\n            if (msid) {\n                const streamAndTrackIDs = msid.value.split(' ');\n                const trackID = streamAndTrackIDs[1];\n\n                this._updateSourcesToMsidMap(mediaType, streamId, trackID);\n\n                // Update the msid.\n                const storedStreamId = mediaType === MediaType.VIDEO\n                    ? this.videoSourcesToMsidMap.get(trackID)\n                    : this.audioSourcesToMsidMap.get(trackID);\n\n                msid.value = this._generateMsidAttribute(mediaType, trackID, storedStreamId);\n\n            // Generate the msid attribute using the 'trackId' from the msid line from the media description. Only\n            // descriptions that have the direction set to 'sendonly' or 'sendrecv' will have the 'a=msid' line.\n            } else if (trackId) {\n                this._updateSourcesToMsidMap(mediaType, streamId, trackId);\n\n                const storedStreamId = mediaType === MediaType.VIDEO\n                    ? this.videoSourcesToMsidMap.get(trackId)\n                    : this.audioSourcesToMsidMap.get(trackId);\n                const generatedMsid = this._generateMsidAttribute(mediaType, trackId, storedStreamId);\n\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'msid',\n                    value: generatedMsid\n                });\n            }\n        }\n\n        // Ignore the 'cname', 'label' and 'mslabel' attributes and only have the 'msid' attribute.\n        mediaSection.ssrcs = mediaSection.ssrcs.filter(ssrc => ssrc.attribute === 'msid');\n\n        // On FF when the user has started muted create answer will generate a recv only SSRC. We don't want to signal\n        // this SSRC in order to reduce the load of the xmpp server for large calls. Therefore the SSRC needs to be\n        // removed from the SDP.\n        //\n        // For all other use cases (when the user has had media but then the user has stopped it) we want to keep the\n        // receive only SSRCs in the SDP. Otherwise source-remove will be triggered and the next time the user add a\n        // track we will reuse the SSRCs and send source-add with the same SSRCs. This is problematic because of issues\n        // on Chrome and FF (https://bugzilla.mozilla.org/show_bug.cgi?id=1768729) when removing and then adding the\n        // same SSRC in the remote sdp the remote track is not rendered.\n        if (browser.isFirefox()\n            && (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE)\n            && (\n                (mediaType === MediaType.VIDEO && !this.tpc._hasHadVideoTrack)\n                || (mediaType === MediaType.AUDIO && !this.tpc._hasHadAudioTrack)\n            )\n        ) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n        }\n    }\n\n    /**\n     * Updates the MSID map.\n     *\n     * @param {string} mediaType The media type.\n     * @param {string} streamId The stream id.\n     * @param {string} trackId The track id.\n     * @returns {void}\n     */\n    _updateSourcesToMsidMap(mediaType, streamId, trackId) {\n        if (mediaType === MediaType.VIDEO) {\n            if (!this.videoSourcesToMsidMap.has(trackId)) {\n                const generatedStreamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\n\n                this.videoSourcesToMsidMap.set(trackId, generatedStreamId);\n            }\n        } else if (!this.audioSourcesToMsidMap.has(trackId)) {\n            const generatedStreamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\n\n            this.audioSourcesToMsidMap.set(trackId, generatedStreamId);\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSendSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        // Plan-b clients generate new SSRCs and trackIds whenever tracks are removed and added back to the\n        // peerconnection, therefore local track based map for msids needs to be reset after every transformation.\n        if (!this.tpc._usesUnifiedPlan) {\n            this.audioSourcesToMsidMap.clear();\n            this.videoSourcesToMsidMap.clear();\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid').value;\n            const streamId = msid.split(' ')[0];\n\n            // Example stream id: d8ff91-video-8-1\n            // In the example above 8 is the track index\n            const trackIndexParts = streamId.split('-');\n            const trackIndex = trackIndexParts[trackIndexParts.length - 2];\n            const sourceName = getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex);\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: sourceName\n                });\n            }\n\n            if (mediaType === MediaType.VIDEO) {\n                const videoType = this.tpc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                    ?.getVideoType();\n\n                if (videoType) {\n                    // Inject videoType as a=ssrc:1234 videoType:desktop.\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'videoType',\n                        value: videoType\n                    });\n                }\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { SdpTransformWrap, parseSecondarySSRC } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    SdpTransformWrap,\n    parsePrimarySSRC,\n    parseSecondarySSRC\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiConference from '../../types/hand-crafted/JitsiConference';\nimport JitsiRemoteTrack from '../../types/hand-crafted/modules/RTC/JitsiRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType,\n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: JitsiConference;\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: JitsiConference, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            // It's common for the event listeners to access the JitsiRemoteTrack. Thus pass it as a parameter here.\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, this.track, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set track RTC muted for: ${sourceName} after the timeout of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track created: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this._disposeTrackStreamingStatus();\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Update the properties when the track is remapped to another source.\n     *\n     * @param {string} owner The endpoint ID of the new owner.\n     */\n    setOwner(owner) {\n        this.ownerEndpointId = owner;\n        this.emit(JitsiTrackEvents.TRACK_OWNER_CHANGED, owner);\n    }\n\n    /**\n     * Sets the name of the source associated with the remtoe track.\n     *\n     * @param {string} name - The source name to be associated with the track.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n\n        // In some edge cases, both browser 'unmute' and bridge's forwarded sources events are received before a\n        // LargeVideoUpdate is scheduled for auto-pinning a new screenshare track. If there are no layout changes and\n        // no further track events are received for the SS track, a black tile will be displayed for screenshare on\n        // stage. Fire a TRACK_STREAMING_STATUS_CHANGED event if the media is already being received for the remote\n        // track to prevent this from happening.\n        !this._trackStreamingStatusImpl.isVideoTrackFrozen()\n            && this.rtc.eventEmitter.emit(\n                JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED,\n                this,\n                this._trackStreamingStatus);\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: {${this._getStatus()}}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE,\n            ssHigh: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        this.encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this._getVideoStreamEncodings(localTrack.getVideoType());\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: this.pc.videoTransferActive,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: this.pc.audioTransferActive } ];\n    }\n\n    /**\n     * The startup configuration for the stream encodings that are applicable to\n     * the video stream when a new sender is created on the peerconnection. The initial\n     * config takes into account the differences in browser's simulcast implementation.\n     *\n     * Encoding parameters:\n     * active - determine the on/off state of a particular encoding.\n     * maxBitrate - max. bitrate value to be applied to that particular encoding\n     *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n     * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n     * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n     *  original resolution of the captured video.\n     *\n     *  @param {VideoType} videoType\n     */\n    _getVideoStreamEncodings(videoType) {\n        const maxVideoBitrate = videoType === VideoType.DESKTOP && this.encodingBitrates.ssHigh\n            ? this.encodingBitrates.ssHigh : this.encodingBitrates.high;\n\n        return [\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: browser.isFirefox() ? maxVideoBitrate : this.encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: this.encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: browser.isFirefox() ? this.encodingBitrates.low : maxVideoBitrate,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const videoStreamEncodings = this._getVideoStreamEncodings(localVideoTrack.getVideoType());\n        const encodingsState = videoStreamEncodings\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && videoStreamEncodings[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (localVideoTrack.getVideoType() === VideoType.DESKTOP\n                && this.pc._capScreenshareBitrate\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && videoStreamEncodings[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const lowFpsScreenshare = localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && this.pc._capScreenshareBitrate\n            && !browser.isWebKitBased();\n        const encodingsBitrates = this._getVideoStreamEncodings(localVideoTrack.getVideoType())\n        .map(encoding => {\n            const bitrate = lowFpsScreenshare\n                ? desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Returns the max resolution that the client is configured to encode for a given local video track. The actual\n     * send resolution might be downscaled based on cpu and bandwidth constraints.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack - The local video track.\n     * @returns {number} The max encoded resolution for the given video track.\n     */\n    getConfiguredEncodeResolution(localVideoTrack) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const videoSender = this.pc.findSenderForTrack(localVideoTrack.getTrack());\n        let maxHeight = 0;\n\n        if (!videoSender) {\n            return maxHeight;\n        }\n        const parameters = videoSender.getParameters();\n\n        if (!parameters?.encodings?.length) {\n            return maxHeight;\n        }\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings[encoding].active) {\n                const scaleResolutionDownBy\n                    = this.pc.isSimulcastOn()\n                        ? this._getVideoStreamEncodings(localVideoTrack.getVideoType())[encoding].scaleResolutionDownBy\n                        : parameters.encodings[encoding].scaleResolutionDownBy;\n\n                maxHeight = Math.max(maxHeight, height / scaleResolutionDownBy);\n            }\n        }\n\n        return maxHeight;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const localTracks = this.pc.getLocalTracks(mediaType);\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSendSupportEnabled()\n            && localTracks?.length\n            && !oldTrack\n            && newTrack\n            && !localTracks.find(t => t === newTrack);\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n\n                // Re-use any existing recvonly transceiver (if available) for p2p case.\n                && ((this.pc.isP2P && t.currentDirection === MediaDirection.RECVONLY)\n                    || (t.currentDirection === MediaDirection.INACTIVE && !t.stopped)));\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = getSourceIndexFromSourceName(sourceName);\n\n                if (this.pc.isP2P) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType)[trackIndex];\n                } else if (oldTrack) {\n                    const transceiverMid = this.pc._localTrackTransceiverMids.get(oldTrack.rtcId);\n\n                    transceiver = this.pc.peerconnection.getTransceivers().find(t => t.mid === transceiverMid);\n                } else if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                            .filter(t => t.receiver.track.kind === mediaType\n                                && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n        if (!transceiver) {\n            return Promise.reject(\n                new Error(`Replace track failed - no transceiver for old: ${oldTrack}, new: ${newTrack}`));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n        const promise = transceiver.sender.setParameters(parameters);\n\n        if (mediaType === MediaType.VIDEO) {\n            return this.pc._updateVideoSenderParameters(promise);\n        }\n\n        return promise;\n    }\n\n    /**\n     * Resumes or suspends media on the peerconnection by setting the active state on RTCRtpEncodingParameters\n     * associated with all the senders that have a track attached to it.\n     *\n     * @param {boolean} enable - whether media needs to be enabled or suspended.\n     * @returns {Promise} - A promise that is resolved when the change is succesful on all the senders, rejected\n     * otherwise.\n     */\n    setMediaTransferActive(enable) {\n        logger.info(`${this.pc} ${enable ? 'Resuming' : 'Suspending'} media transfer.`);\n\n        const senders = this.pc.peerconnection.getSenders().filter(s => Boolean(s.track));\n        const promises = [];\n\n        for (const sender of senders) {\n            const parameters = sender.getParameters();\n\n            if (parameters?.encodings?.length) {\n                for (const encoding of parameters.encodings) {\n                    encoding.active = enable;\n                }\n            }\n            const setActivePromise = sender.setParameters(parameters);\n\n            if (sender.track.kind === MediaType.VIDEO) {\n                promises.push(this.pc._updateVideoSenderParameters(setActivePromise));\n            } else {\n                promises.push(setActivePromise);\n            }\n        }\n\n        return Promise.allSettled(promises)\n            .then(settledResult => {\n                const errors = settledResult\n                    .filter(result => result.status === 'rejected')\n                    .map(result => result.reason);\n\n                if (errors.length) {\n                    return Promise.reject(new Error('Failed to change encodings on the RTCRtpSenders'\n                        + `${errors.join(' ')}`));\n                }\n\n                return Promise.resolve();\n            });\n    }\n\n    /**\n     * Enables/disables video media transmission on the peer connection. When disabled the SDP video media direction in\n     * the local SDP will be adjusted to 'inactive' which means that no data will be sent nor accepted, but the\n     * connection should be kept alive. This is used for setting lastn=0 on p2p connection.\n     *\n     * @param {boolean} active - true to enable media transmission or false to disable.\n     * @returns {void}\n     */\n    setVideoTransferActive(active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === MediaType.VIDEO);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} video media transfer.`);\n        transceivers.forEach(transceiver => {\n            const localTrackMids = Array.from(this.pc._localTrackTransceiverMids);\n            const direction = active\n                ? localTrackMids.find(mids => mids[1] === transceiver.mid)\n                    ? MediaDirection.SENDRECV : MediaDirection.RECVONLY\n                : MediaDirection.INACTIVE;\n\n            logger.debug(`Setting direction to ${direction} on mid=${transceiver.mid}`);\n            transceiver.direction = direction;\n        });\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(localVideoTrack, parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            const videoStreamEncodings = this._getVideoStreamEncodings(localVideoTrack.getVideoType());\n\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = videoStreamEncodings[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The set of remote SSRCs seen so far.\n     * Distinguishes new SSRCs from those that have been remapped.\n     * @type {Set<number>}\n     */\n    this.remoteSSRCs = new Set();\n\n    /**\n     * Mapping of source-names and their associated SSRCs that have been signaled by the JVB.\n     * @type {Map<string, number>}\n     */\n    this.remoteSources = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCPeerConnection(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if low fps screenshare is desired.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Codec preferences set for the peerconnection through config.js.\n     */\n    this.codecSettings = this.options.codecSettings;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    // We currently need these flags only for FF and that's why we are updating them only for unified plan.\n    if (this._usesUnifiedPlan) {\n        /**\n         * Indicates whether an audio track has ever been added to the peer connection.\n         */\n        this._hasHadAudioTrack = false;\n\n        /**\n         * Indicates whether a video track has ever been added to the peer connection.\n         */\n        this._hasHadVideoTrack = false;\n    }\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    /**\n     * Holds the RTCRtpTransceiver mids that the local tracks are attached to, mapped per their\n     * {@link JitsiLocalTrack.rtcId}.\n     * @type {Map<string, string>}\n     */\n    this._localTrackTransceiverMids = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    this._lastVideoSenderUpdatePromise = Promise.resolve();\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the MID of the m-line associated with the local desktop track (if it exists).\n *\n * @returns {Number|null}\n */\nTraceablePeerConnection.prototype._getDesktopTrackMid = function() {\n    const desktopTrack = this.getLocalVideoTracks().find(track => track.getVideoType() === VideoType.DESKTOP);\n\n    if (desktopTrack) {\n        return Number(this._localTrackTransceiverMids.get(desktopTrack.rtcId));\n    }\n\n    return null;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.debug(`Remote track not found for source=${sourceName}, mute update failed!`);\n        }\n\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Checks if the browser is currently doing true simulcast where in three different media streams are being sent to the\n * bridge. Currently this happens only when VP8 is the selected codec.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.doesTrueSimulcast = function() {\n    return this.isSimulcastOn() && this.getConfiguredVideoCodec() === CodecMimeType.VP8;\n};\n\n/**\n * Returns the SSRCs associated with a given local video track.\n *\n * @param {JitsiLocalTrack} localTrack\n * @returns\n */\nTraceablePeerConnection.prototype.getLocalVideoSSRCs = function(localTrack) {\n    const ssrcs = [];\n\n    if (!localTrack || !localTrack.isVideoTrack()) {\n        return ssrcs;\n    }\n\n    const ssrcGroup = this.isSimulcastOn() ? 'SIM' : 'FID';\n\n    return this.localSSRCs.get(localTrack.rtcId)?.groups?.find(group => group.semantics === ssrcGroup)?.ssrcs || ssrcs;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {Array<JitsiLocalTrack>} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = stream.id;\n\n    // Do not create remote tracks for 'mixed' JVB SSRCs (used by JVB for RTCP termination).\n    if (!RTC.isUserStreamById(streamId)) {\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = stream.id;\n    const mediaType = track.kind;\n\n    // Do not create remote tracks for 'mixed' JVB SSRCs (used by JVB for RTCP termination).\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        return;\n    }\n    logger.info(`${this} Received track event for remote stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`MediaType undefined for remote track, stream id: ${streamId}, track creation failed!`));\n\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLine;\n\n    // In unified plan mode, find the matching mline using 'mid' or the 'msid' attr of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver?.mid) {\n            const mid = transceiver.mid;\n\n            mediaLine = remoteSDP.media.find(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLine = remoteSDP.media.find(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid === 'string' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLine = remoteSDP.media.find(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLine) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`Matching media line not found in remote SDP for remote stream[id=${streamId},type=${mediaType}],`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLine, 'a=ssrc:');\n\n    ssrcLines = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`\n            + 'track creation failed!'));\n\n        return;\n    }\n\n    const sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n\n    // Assume default presence state for remote source. Presence can be received after source signaling. This shouldn't\n    // prevent the endpoint from creating a remote track for the source.\n    let muted = true;\n    let videoType = mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined; // 'camera' by default\n\n    if (peerMediaInfo) {\n        muted = peerMediaInfo.muted;\n        videoType = peerMediaInfo.videoType; // can be undefined\n    } else {\n        logger.info(`${this}: no source-info available for ${ownerEndpointId}:${sourceName}, assuming default state`);\n    }\n\n    this._createRemoteTrack(ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${ssrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${stream.id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = stream.id;\n    const trackId = track?.id;\n\n    // Ignore stream removed events for JVB \"mixed\" sources (used for RTCP termination).\n    if (!RTC.isUserStreamById(streamId)) {\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    logger.info(`${this} Removing remote track stream[id=${toBeRemoved.getStreamId()},`\n        + `trackId=${toBeRemoved.getTrackId()}]`);\n\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n\n    if (!participantId && FeatureFlags.isSsrcRewritingSupported()) {\n        return;\n    }\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unified-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    if (this._usesUnifiedPlan) {\n        media = media.filter(mline => mline.direction === MediaDirection.SENDONLY\n            || mline.direction === MediaDirection.SENDRECV);\n    } else {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    let index = 0;\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined' && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n\n            const simGroup = mLine.ssrcGroups.find(group => group.semantics === 'SIM');\n\n            // Add a SIM group if its missing in the description (happens on Firefox).\n            if (!simGroup) {\n                const groupSsrcs = mLine.ssrcGroups.map(group => group.ssrcs[0]);\n\n                groupsMap.get(groupSsrcs[0]).push({\n                    semantics: 'SIM',\n                    ssrcs: groupSsrcs\n                });\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? `${mLine.type}-${index}` : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n\n        // Currently multi-stream is supported for video only.\n        mLine.type === MediaType.VIDEO && index++;\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs but no ssrc-groups on Firefox. Unfortunately, Jicofo\n * will complain if it sees ssrcs with matching msids but no ssrc-group, so a ssrc-group line is injected to make\n * Jicofo happy.\n *\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to contain an inject ssrc-group for simulcast.\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast = function(desc) {\n    const sdp = transform.parse(desc.sdp);\n    const video = sdp.media.find(mline => mline.type === 'video');\n\n    // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n    video.ssrcGroups = video.ssrcGroups || [];\n    const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n    if (video.simulcast || video.simulcast_03) {\n        const ssrcs = [];\n\n        if (fidGroups && fidGroups.length) {\n            fidGroups.forEach(group => {\n                ssrcs.push(group.ssrcs.split(' ')[0]);\n            });\n        } else {\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n        }\n        if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n            // Group already exists, no need to do anything\n            return desc;\n        }\n\n        // Add a SIM group for every 3 FID groups.\n        for (let i = 0; i < ssrcs.length; i += 3) {\n            const simSsrcs = ssrcs.slice(i, i + 3);\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: simSsrcs.join(' ')\n            });\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(sdp)\n    });\n};\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecSettings) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media.filter(m => m.type === this.codecSettings.mediaType);\n\n    if (!mLines.length) {\n        return description;\n    }\n\n    for (const mLine of mLines) {\n        if (this.codecSettings.disabled) {\n            SDPUtil.stripCodec(mLine, this.codecSettings.disabled);\n        }\n\n        if (this.codecSettings.preferred) {\n            SDPUtil.preferCodec(mLine, this.codecSettings.preferred);\n\n            // Strip the high profile H264 codecs on mobile clients for p2p connection. High profile codecs give better\n            // quality at the expense of higher load which we do not want on mobile clients. Jicofo offers only the\n            // baseline code for the jvb connection and therefore this is not needed for jvb connection.\n            // TODO - add check for mobile browsers once js-utils provides that check.\n            if (this.codecSettings.preferred === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n                SDPUtil.stripCodec(mLine, this.codecSettings.preferred, true /* high profile */);\n            }\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the track to be added to the pc.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackToPc = function(track) {\n    logger.info(`${this} Adding track=${track} to PC`);\n\n    if (!this._assertTrackBelongs('addTrackToPc', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} to PC - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => {\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Checks if the client has negotiated not to receive video encoded using the given codec, i.e., the codec has been\n * removed from the local description.\n */\nTraceablePeerConnection.prototype.isVideoCodecDisabled = function(codec) {\n    const sdp = this.peerconnection.localDescription?.sdp;\n\n    if (!sdp) {\n        return false;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n\n    return !mLine.rtp.find(r => r.codec === codec);\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec, disabledCodec) {\n    if (!this.codecSettings) {\n        return;\n    }\n    preferredCodec && (this.codecSettings.preferred = preferredCodec);\n    disabledCodec && (this.codecSettings.disabled = disabledCodec);\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackFromPc}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Processes the local description SDP and caches the mids of the mlines associated with the given tracks.\n *\n * @param {Array<JitsiLocalTrack>} localTracks - local tracks that are added to the peerconnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.processLocalSdpForTransceiverInfo = function(localTracks) {\n    const localSdp = this.peerconnection.localDescription?.sdp;\n\n    if (!localSdp) {\n        return;\n    }\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const tracks = localTracks.filter(t => t.getType() === mediaType);\n        const parsedSdp = transform.parse(localSdp);\n        const mLines = parsedSdp.media.filter(mline => mline.type === mediaType);\n\n        tracks.forEach((track, idx) => {\n            if (!this._localTrackTransceiverMids.has(track.rtcId)) {\n                this._localTrackTransceiverMids.set(track.rtcId, mLines[idx].mid.toString());\n            }\n        });\n    });\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n            .then(transceiver => {\n                if (oldTrack) {\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this._localTrackTransceiverMids.delete(oldTrack.rtcId);\n                }\n\n                if (newTrack) {\n                    if (newTrack.isAudioTrack()) {\n                        this._hasHadAudioTrack = true;\n                    } else {\n                        this._hasHadVideoTrack = true;\n                    }\n                    this._localTrackTransceiverMids.set(newTrack.rtcId, transceiver?.mid?.toString());\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n                }\n\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\n                // renegotiation is triggered as a result of this.\n                if (oldTrack && newTrack) {\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                    if (oldTrackSSRC) {\n                        this.localSSRCs.delete(oldTrack.rtcId);\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    }\n                }\n\n                if (transceiver) {\n                    // In the scenario where we remove the oldTrack (oldTrack is not null and newTrack is null) on FF\n                    // if we change the direction to RECVONLY, create answer will generate SDP with only 1 receive\n                    // only ssrc instead of keeping all 6 ssrcs that we currently have. Stopping the screen sharing\n                    // and then starting it again will trigger 2 rounds of source-remove and source-add replacing\n                    // the 6 ssrcs for the screen sharing with 1 receive only ssrc and then removing the receive\n                    // only ssrc and adding the same 6 ssrcs. On the remote participant's side the same ssrcs will\n                    // be reused on a new m-line and if the remote participant is FF due to\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1768729 the video stream won't be rendered.\n                    // That's why we need keep the direction to SENDRECV for FF.\n                    //\n                    // NOTE: If we return back to the approach of not removing the track for FF and instead using the\n                    // enabled property for mute or stopping screensharing we may need to change the direction to\n                    // RECVONLY if FF still sends the media even though the enabled flag is set to false.\n                    transceiver.direction\n                        = newTrack || browser.isFirefox() ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                return configureEncodingsPromise.then(() => this.isP2P);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track from the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} localTrack the local track to be removed.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackFromPc = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrack', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrack', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} from PC`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrack - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const localSources = this.getLocalTracks(mediaType).length;\n        const remoteSources = this.getRemoteTracks(null, mediaType).length;\n\n        media.forEach((mLine, idx) => {\n            if (localSources && localSources === remoteSources) {\n                mLine.direction = MediaDirection.SENDRECV;\n            } else if (!localSources && !remoteSources) {\n                mLine.direction = MediaDirection.INACTIVE;\n            } else if (!localSources) {\n                mLine.direction = MediaDirection.SENDONLY;\n            } else if (!remoteSources) {\n                mLine.direction = MediaDirection.RECVONLY;\n\n            // When there are 2 local sources and 1 remote source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'recvonly'.\n            } else if (localSources > remoteSources) {\n                mLine.direction = idx ? MediaDirection.RECVONLY : MediaDirection.SENDRECV;\n\n            // When there are 2 remote sources and 1 local source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'sendonly'.\n            } else {\n                mLine.direction = idx ? MediaDirection.SENDONLY : MediaDirection.SENDRECV;\n            }\n        });\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.enableOpusDtx && !audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            // On Firefox, the OpusDtx enablement has no effect\n            if (!browser.isFirefox() && audioQuality?.enableOpusDtx) {\n                fmtpConfig.usedtx = 1;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Munges the SDP to set all directions to inactive and drop all ssrc and ssrc-groups.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeInactive = function(description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        mLine.direction = MediaDirection.INACTIVE;\n        mLine.ssrcs = undefined;\n        mLine.ssrcGroups = undefined;\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n/**\n * Sets the max bitrates on the video m-lines when VP9 is the selected codec.\n *\n * @param {RTCSessionDescription} description - The local description that needs to be munged.\n * @param {boolean} isLocalSdp - Whether the max bitrate (via b=AS line in SDP) is set on local SDP.\n * @returns RTCSessionDescription\n */\nTraceablePeerConnection.prototype._setVp9MaxBitrates = function(description, isLocalSdp = false) {\n    if (!this.codecSettings) {\n        return description;\n    }\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Find all the m-lines associated with the local sources.\n    const direction = isLocalSdp ? MediaDirection.RECVONLY : MediaDirection.SENDONLY;\n    const mLines = parsedSdp.media.filter(m => m.type === MediaType.VIDEO && m.direction !== direction);\n\n    for (const mLine of mLines) {\n        if (this.codecSettings.preferred === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const ssHdBitrate = bitrates.ssHigh ? bitrates.ssHigh : HD_BITRATE;\n            const mid = mLine.mid;\n            const isSharingScreen = FeatureFlags.isMultiStreamSendSupportEnabled()\n                ? mid === this._getDesktopTrackMid()\n                : this._isSharingScreen();\n            const limit = Math.floor((isSharingScreen ? ssHdBitrate : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    // If media is suspended on the peerconnection, make sure that media stays disabled. The default 'active' state for\n    // the encodings after the source is added to the peerconnection is 'true', so it needs to be explicitly disabled\n    // after the source is added.\n    if (!(this.videoTransferActive && this.audioTransferActive)) {\n        return this.tpcUtils.setMediaTransferActive(false);\n    }\n\n    if (localVideoTrack) {\n        return this.setSenderVideoConstraints(\n            this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n            localVideoTrack);\n    }\n    const promises = [];\n\n    for (const track of this.getLocalVideoTracks()) {\n        promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n    }\n\n    return Promise.allSettled(promises);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    localDescription = this._mungeCodecOrder(localDescription);\n    localDescription = this._setVp9MaxBitrates(localDescription, true);\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n        }\n        if (this.isSimulcastOn()) {\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    remoteDescription = this._setVp9MaxBitrates(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n    if (!localVideoTrack) {\n        throw new Error('Local video track is missing');\n    }\n    const sourceName = localVideoTrack.getSourceName();\n\n    // Ignore sender constraints if the media on the peerconnection is suspended (jvb conn when p2p is currently active)\n    // or if the video track is muted.\n    if (!this.videoTransferActive || localVideoTrack.isMuted()) {\n        this._senderMaxHeights.set(sourceName, frameHeight);\n\n        return Promise.resolve();\n    }\n\n    const configuredResolution = this.tpcUtils.getConfiguredEncodeResolution(localVideoTrack);\n\n    // Ignore sender constraints if the client is already sending video of the requested resolution. Note that for\n    // screensharing sources, the max resolution will be the height of the window being captured irrespective of the\n    // height being requested by the peer.\n    if ((localVideoTrack.getVideoType() === VideoType.CAMERA && configuredResolution === frameHeight)\n        || (localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && frameHeight > 0\n            && configuredResolution === localVideoTrack.getTrack()?.getSettings()?.height)) {\n        return Promise.resolve();\n    }\n\n    this._senderMaxHeights.set(sourceName, frameHeight);\n\n    return this._updateVideoSenderParameters(this._updateVideoSenderEncodings(frameHeight, localVideoTrack));\n};\n\n/**\n * Returns a wrapped-up promise so that the setParameters() call on the RTCRtpSender for video sources are chained.\n * This is needed on Chrome as it resets the transaction id after executing setParameters() and can affect the next on\n * the fly updates if they are not chained.\n * https://chromium.googlesource.com/external/webrtc/+/master/pc/rtp_sender.cc#340\n * @param {Promise} promise - The promise that needs to be chained.\n * @returns {Promise}\n */\nTraceablePeerConnection.prototype._updateVideoSenderParameters = function(promise) {\n    const nextPromise = this._lastVideoSenderUpdatePromise\n        .finally(() => promise);\n\n    this._lastVideoSenderUpdatePromise = nextPromise;\n\n    return nextPromise;\n};\n\n/**\n * Configures the video stream with resolution / degradation / maximum bitrates\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype._updateVideoSenderEncodings = function(frameHeight, localVideoTrack) {\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    const isSharingLowFpsScreen = localVideoTrack.getVideoType() === VideoType.DESKTOP && this._capScreenshareBitrate;\n\n    // Set the degradation preference.\n    const preference = isSharingLowFpsScreen\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || isSharingLowFpsScreen\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(localVideoTrack, parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils._getVideoStreamEncodings(localVideoTrack.getVideoType())\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        } else {\n            parameters.encodings[0].maxBitrate = undefined;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan)) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences && this.codecSettings) {\n        const { mediaType } = this.codecSettings;\n        const transceivers = this.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver?.track?.kind === mediaType);\n\n        if (transceivers.length) {\n            let capabilities = RTCRtpReceiver.getCapabilities(mediaType)?.codecs;\n            const disabledCodecMimeType = this.codecSettings?.disabled;\n            const preferredCodecMimeType = this.codecSettings?.preferred;\n\n            if (capabilities && disabledCodecMimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${mediaType}/${disabledCodecMimeType}`);\n            }\n\n            if (capabilities && preferredCodecMimeType) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${mediaType}/${preferredCodecMimeType}` ? -1 : 1;\n                });\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased() && mediaType === MediaType.VIDEO) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            // Apply codec preference to all the transceivers associated with the given media type.\n            for (const transceiver of transceivers) {\n                transceiver.setCodecPreferences(capabilities);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceName = track.getSourceName();\n        const sourceIndex = getSourceIndexFromSourceName(sourceName);\n        const sourceIdentifier = this._usesUnifiedPlan\n            ? `${track.getType()}-${sourceIndex}`\n            : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\n/**\n * Track the SSRCs seen so far.\n * @param {number} ssrc - SSRC.\n * @return {boolean} - Whether this is a new SSRC.\n */\nTraceablePeerConnection.prototype.addRemoteSsrc = function(ssrc) {\n    const existing = this.remoteSSRCs.has(ssrc);\n\n    if (!existing) {\n        this.remoteSSRCs.add(ssrc);\n    }\n\n    return !existing;\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {Array=} options.devices The devices that will be requested.\n     * @param {string=} options.resolution Resolution constraints.\n     * @param {string=} options.cameraDeviceId\n     * @param {string=} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter, this.conference);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add forwarded sources change listener.\n        this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n        const timestamp = Date.now();\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=`\n            + `${enteringForwardedSources} at ${timestamp}`);\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            timestamp);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        // TODO: remove this.\n        const supportsSdpSemantics = browser.isChromiumBased() && !options.usesUnifiedPlan;\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO)\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(stream.id);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high' },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high' },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard' },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard' },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low' },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low' }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        if (!this._options.config.disableLocalStats) {\n            // Listen to local statistics events originating from the RTC module and update the _localStats field.\n            conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n        }\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            track.on(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                audioLevel => {\n                    this._handleNoAudioInputDetection(audioLevel);\n                }\n            );\n            track.on(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel => {\n                    this._handleNoAudioInputDetection(audioLevel);\n                    this._handleAudioInputStateChange(audioLevel);\n                }\n            );\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { DETECTOR_STATE_CHANGE, VAD_SCORE_PUBLISHED } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_NOISY_DEVICE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_TALK_WHILE_MUTED } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                JitsiE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return SariskaMediaTransport.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        const blob = new Blob([\"importScripts('https://sdk.sariska.io/flacEncodeWorker.min.js');\"], {\"type\": 'application/javascript'});\n        const url = window.URL || window.webkitURL;\n        const blobUrl = url.createObjectURL(blob);\n        this._encoder = new Worker(blobUrl);\n        URL.revokeObjectURL(blobUrl);\n    }\n}","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime() {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\n// type SessionEvent = {\n\n//     /**\n//      * The type of the event.\n//      * Should be one of the values in {@code SessionEventType}.\n//      */\n//     type: string,\n\n//     /**\n//      * The timestamp of the event.\n//      */\n//     timestamp: number\n// };\n\n/**\n * Representation of the metadata of a segment.\n */\n// type SegmentInfo = {\n\n//     /**\n//      * The length of gap before this segment, in milliseconds.\n//      * mull if unknown.\n//      */\n//     gapBefore?: ?number,\n\n//     /**\n//      * The duration of this segment, in milliseconds.\n//      * null if unknown or the segment is not finished.\n//      */\n//     duration?: ?number,\n\n//     /**\n//      * The start time, in milliseconds.\n//      */\n//     start?: ?number,\n\n//     /**\n//      * The end time, in milliseconds.\n//      * null if unknown, the segment is not finished, or the recording is\n//      * interrupted (e.g. browser reload).\n//      */\n//     end?: ?number\n// };\n\n/**\n * Representation of metadata of a local recording session.\n */\n// type SessionInfo = {\n\n//     /**\n//      * The session token.\n//      */\n//     sessionToken: string,\n\n//     /**\n//      * The start time of the session.\n//      */\n//     start: ?number,\n\n//     /**\n//      * The recording format.\n//      */\n//     format: string,\n\n//     /**\n//      * Array of segments in the session.\n//      */\n//     segments: SegmentInfo[]\n// }\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken, format) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(){\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken) {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events) {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\n// type RecordingStats = {\n\n//     /**\n//      * Current local recording session token used by the participant.\n//      */\n//     currentSessionToken: number,\n\n//     /**\n//      * Whether local recording is engaged on the participant's device.\n//      */\n//     isRecording: boolean,\n\n//     /**\n//      * Total recorded bytes. (Reserved for future use.)\n//      */\n//     recordedBytes: number,\n\n//     /**\n//      * Total recording duration. (Reserved for future use.)\n//      */\n//     recordedLength: number\n// }\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats() {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return Promise.resolve();\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","/* global TransformStream */\nimport { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\n// Flag to set on receivers to avoid setting up the lite mode\n// more than once.\nconst kJitsiLiteMode = Symbol('kJitsiLiteMode');\n\nconst logger = getLogger(__filename);\n\n/**\n * This module implements a discard-all insertable stream.  Use to reduce decoder CPU load for testing.\n */\nexport class LiteModeContext {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which lite mode is to be enabled.\n     */\n    constructor(conference) {\n        this.enabled = FeatureFlags.isRunInLiteModeEnabled();\n        if (!this.enabled) {\n            return;\n        }\n\n        conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupLiteModeForTrack(tpc, track));\n    }\n\n    /**\n     * Setup Lite Mode for a track.\n     *\n     * @private\n     */\n    _setupLiteModeForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (!receiver) {\n            logger.warn(`Could not set up lite mode for ${track}: receiver not found in: ${tpc}`);\n\n            return;\n        }\n\n        if (receiver[kJitsiLiteMode]) {\n            return;\n        }\n        receiver[kJitsiLiteMode] = true;\n\n        const receiverStreams = receiver.createEncodedStreams();\n\n        const transformStream = new TransformStream({\n            transform: () => {\n                // Don't call controller.enqueue(encodedFrame), and so drop everything\n            }\n        });\n\n        receiverStreams.readable.pipeThrough(transformStream).pipeTo(receiverStreams.writable);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT = 2160;\nconst LASTN_UNLIMITED = -1;\nconst ASSUMED_BANDWIDTH_BPS = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     * @param {Object} options - The instance options:\n     * - lastN: Number of videos to be requested from the bridge.\n     * - assumedBandwidthBps: Number of bps to be requested from the bridge.\n     */\n    constructor(options) {\n        const { lastN, assumedBandwidthBps } = options;\n\n        // The number of videos requested from the bridge.\n        this._lastN = lastN ?? LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge/peer.\n        this._maxFrameHeight = MAX_HEIGHT;\n\n        // The number representing the assumed count of bps the local client should receive from the bridge.\n        this._assumedBandwidthBps = assumedBandwidthBps ?? ASSUMED_BANDWIDTH_BPS;\n\n        this._receiverVideoConstraints = {\n            assumedBandwidthBps: this._assumedBandwidthBps,\n            constraints: {},\n            defaultConstraints: { 'maxHeight': this._maxFrameHeight },\n            lastN: this._lastN\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel or to the remote peer.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.assumedBandwidthBps = this._assumedBandwidthBps;\n        this._receiverVideoConstraints.lastN = this._lastN;\n        if (Object.keys(this._receiverVideoConstraints.constraints)?.length) {\n            /* eslint-disable no-unused-vars */\n            for (const [ key, value ] of Object.entries(this._receiverVideoConstraints.constraints)) {\n                value.maxHeight = this._maxFrameHeight;\n            }\n        } else {\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n\n    /**\n     * Updates the assumed bandwidth bps of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} assumedBandwidthBps\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateAssumedBandwidthBps(assumedBandwidthBps) {\n        const changed = this._assumedBandwidthBps !== assumedBandwidthBps;\n\n        if (changed) {\n            this._assumedBandwidthBps = assumedBandwidthBps;\n            logger.debug(`Updating receive assumedBandwidthBps: ${assumedBandwidthBps}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT;\n\n        /**\n         * The map that holds the max frame height requested per remote source for p2p connection.\n         *\n         * @type Map<string, number>\n         */\n        this._sourceReceiverConstraints = new Map();\n\n        /**\n         * The number of bps requested from the bridge.\n         */\n        this._assumedBandwidthBps = ASSUMED_BANDWIDTH_BPS;\n\n        // The default receiver video constraints.\n        this._receiverVideoConstraints = new ReceiverVideoConstraints({\n            lastN: this._lastN,\n            assumedBandwidthBps: this._assumedBandwidthBps\n        });\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Returns a map of all the remote source names and the corresponding max frame heights.\n     *\n     * @param {JingleSessionPC} mediaSession - the media session.\n     * @param {number} maxFrameHeight - the height to be requested for remote sources.\n     * @returns\n     */\n    _getDefaultSourceReceiverConstraints(mediaSession, maxFrameHeight) {\n        const height = maxFrameHeight ?? MAX_HEIGHT;\n        const remoteVideoTracks = mediaSession.peerconnection?.getRemoteTracks(null, MediaType.VIDEO) || [];\n        const receiverConstraints = new Map();\n\n        for (const track of remoteVideoTracks) {\n            receiverConstraints.set(track.getSourceName(), height);\n        }\n\n        return receiverConstraints;\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P) {\n            mediaSession.setReceiverVideoConstraint(this._getDefaultSourceReceiverConstraints(mediaSession));\n        } else {\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Sets the assumed bandwidth bps the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} assumedBandwidthBps - the new value.\n     * @returns {void}\n     */\n    setAssumedBandwidthBps(assumedBandwidthBps) {\n        if (this._receiverVideoConstraints.updateAssumedBandwidthBps(assumedBandwidthBps)) {\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._receiverVideoConstraints.updateLastN(value)) {\n                this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P) {\n                session.setReceiverVideoConstraint(this._getDefaultSourceReceiverConstraints(session, maxFrameHeight));\n            } else if (this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight)) {\n                this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!constraints) {\n            return;\n        }\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n\n        if (isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._assumedBandwidthBps = constraints.assumedBandwidthBps ?? this._assumedBandwidthBps;\n            this._lastN = constraints.lastN ?? this._lastN;\n\n            // Send the contraints on the bridge channel.\n            this._rtc.setReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (!p2pSession) {\n                return;\n            }\n\n            const mappedConstraints = Array.from(Object.entries(constraints.constraints))\n                .map(constraint => {\n                    constraint[1] = constraint[1].maxHeight;\n\n                    return constraint;\n                });\n\n            this._sourceReceiverConstraints = new Map(mappedConstraints);\n\n            // Send the receiver constraints to the peer through a \"content-modify\" message.\n            p2pSession.setReceiverVideoConstraint(this._sourceReceiverConstraints);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        for (const track of this._rtc.getLocalVideoTracks()) {\n            const sourceName = track.getSourceName();\n\n            sourceName && this._propagateSendMaxFrameHeight(sourceName);\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED,\n            (session, sourceConstraints) => {\n                session === this._conference.getActiveMediaSession()\n                    && sourceConstraints.forEach(constraint => this._onSenderConstraintsReceived(constraint));\n            });\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        const { maxHeight, sourceName } = videoConstraints;\n        const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n        for (const track of localVideoTracks) {\n            // Propagate the sender constraint only if it has changed.\n            if (track.getSourceName() === sourceName\n                && this._sourceSenderConstraints.get(sourceName) !== maxHeight) {\n                this._sourceSenderConstraints.set(\n                    sourceName,\n                    maxHeight === -1\n                        ? Math.min(MAX_LOCAL_RESOLUTION, this._preferredSendMaxFrameHeight)\n                        : maxHeight);\n                logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                this._propagateSendMaxFrameHeight(sourceName);\n            }\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName) {\n        if (!sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName) {\n        if (!sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? this._sourceSenderConstraints.get(sourceName)\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n        const promises = [];\n\n        for (const sourceName of this._sourceSenderConstraints.keys()) {\n            promises.push(this._propagateSendMaxFrameHeight(sourceName));\n        }\n\n        return Promise.allSettled(promises);\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n        this._jibriJid = null;\n        this._statusFromJicofo = '';\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        // If _status is not set fallback to the status reported by jicofo.\n        if (this._status) {\n            return this._status;\n        }\n\n        return this._statusFromJicofo;\n    }\n\n    /**\n     * @returns {string|undefined} the JID of jibri associated with this session.\n     */\n    getJibriJid() {\n        return this._jibriJid;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Set the session status reported by jicofo. If a jibri is present in the room,\n     * the status is always 'on'. Otherwise, we fallback to the status reported by jicofo.\n     *\n     * @param {string} status\n     */\n    setStatusFromJicofo(status) {\n        this._statusFromJicofo = status;\n    }\n\n    /**\n     * Set the JID of the jibri associated with this session.\n     *\n     * @param {*} jibriJid\n     */\n    setJibriJid(jibriJid) {\n        this._jibriJid = jibriJid;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        try {\n            appData = JSON.parse(appData)|| {};\n        } catch(e) {\n            appData = {};\n        }\n        \n        appData[\"base_url\"] = appData[\"base_url\"] ? appData[\"base_url\"] : `${window.location.origin}${window.location.pathname}`;\n        appData[\"token\"] =  this._connection.emuc.xmpp.token;\n        \n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this.onMemberLeft = this.onMemberLeft.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.MUC_MEMBER_LEFT, this.onMemberLeft);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Find a session with a specific jibri JID.\n     *\n     * @param {string} jibriJid the JID to search for.\n     * @returns\n     */\n    getSessionByJibriJid(jibriJid) {\n        let s;\n\n        Object.values(this._sessions).forEach(session => {\n            if (session.getJibriJid() === jibriJid) {\n                s = session;\n            }\n        });\n\n        return s;\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Handle a participant leaving the room.\n     * @param {string} jid the JID of the participant that left.\n     */\n    onMemberLeft(jid) {\n        const session = this.getSessionByJibriJid(jid);\n\n        if (session) {\n\n            const prevStatus = session.getStatus();\n\n            // Setting to ''\n            session.setStatus('');\n            session.setJibriJid(null);\n\n            if (session.getStatus() !== prevStatus) {\n                this._emitSessionUpdate(session);\n            }\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatusFromJicofo(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, 'on', mode);\n        }\n\n        // When a jibri is present the status is always 'on';\n        session.setStatus('on');\n        session.setJibriJid(presence.getAttribute('from'));\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiConference} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue === 'undefined') {\n            return;\n        }\n\n        if (typeof nextValue !== 'number') {\n            logger.error(`${this.name} - invalid value for idx: ${this.count}`, nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\n\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face-landmarks';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                (participant, { type, faceLandmarks }) => {\n                    if (type === FACE_LANDMARK_MESSAGE_TYPE) {\n                        this._onFaceLandmarkAdd(participant.getId(), faceLandmarks);\n                    }\n                });\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new dominant speaker.\n     * @param {Array[string]} previous - The array with previous speakers.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId, previous, silence) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true, silence);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data) {\n            savedUser.addFaceLandmarks(data);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                    = newStats[userId].totalDominantSpeakerTime;\n\n                if (Array.isArray(newStats[userId].faceLandmarks)) {\n                    speakerStatsToUpdate.setFaceLandmarks(newStats[userId].faceLandmarks);\n                }\n            }\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const appData = {};\n        appData[\"baseUrl\"] =  window.location.origin;\n        appData[\"token\"] =  this.chatRoom.connection.emuc.xmpp.token\n\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        // Add handlers for 'audiomuted', 'videomuted' and 'videoType' fields in presence in order to support interop\n        // with very old versions of mobile clients and jigasi that do not support source-name signaling.\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n        room.addPresenceListener('videoType', this._videoTypeHandler);\n\n        // Add handlers for presence in the new format.\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                let sourceChanged = false;\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    sourceChanged = true;\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n                    sourceChanged = true;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n\n                if (sourceChanged && FeatureFlags.isSsrcRewritingSupported()) {\n                    this.eventEmitter.emit(\n                        SignalingEvents.SOURCE_UPDATED,\n                        sourceName,\n                        mucNick,\n                        newMutedState,\n                        newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            for (const [ key, value ] of this.ssrcOwners.entries()) {\n                if (value === endpointId) {\n                    delete this._sourceNames[key];\n                }\n            }\n        };\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Logs a debug or error message to console depending on whether SSRC rewriting is enabled or not.\n     * Owner changes are permitted only when SSRC rewriting is enabled.\n     *\n     * @param {string} message - The message to be logged.\n     * @returns {void}\n     */\n    _logOwnerChangedMessage(message) {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.debug(message);\n        } else {\n            logger.error(message);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.warn('Requested peer media info, before room was set');\n        };\n\n        const lastPresence = this.chatRoom?.getLastPresence(owner);\n\n        if (!lastPresence) {\n            logger.warn(`getPeerMediaInfo - no presence stored for: ${owner}`);\n\n            return;\n        }\n        if (!this._doesEndpointSendNewSourceInfo(owner)) {\n            return legacyGetPeerMediaInfo();\n        }\n\n        if (sourceName) {\n            return this.getPeerSourceInfo(owner, sourceName);\n        }\n\n        const mediaInfo = {\n            muted: true\n        };\n\n        if (mediaType === MediaType.VIDEO) {\n            mediaInfo.videoType = undefined;\n            const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n            if (codecTypeNode.length > 0) {\n                mediaInfo.codecType = codecTypeNode[0].value;\n            }\n        }\n\n        return mediaInfo;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaType = getMediaTypeFromSourceName(sourceName);\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    removeSSRCOwners(ssrcList) {\n        if (!ssrcList?.length) {\n            return;\n        }\n\n        for (const ssrc of ssrcList) {\n            this.ssrcOwners.delete(ssrc);\n        }\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            this._sourceInfoHandler\n                && oldChatRoom.removePresenceListener(SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n            this._memberLeftHandler\n                && oldChatRoom.removeEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n        }\n        if (room) {\n            this._bindChatRoomEventHandlers(room);\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            this._logOwnerChangedMessage(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            this._logOwnerChangedMessage(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateSsrcOwnersOnLeave(id) {\n        const ssrcs = Array.from(this.ssrcOwners)\n            .filter(entry => entry[1] === id)\n            .map(entry => entry[0]);\n\n        if (!ssrcs?.length) {\n            return;\n        }\n\n        this.removeSSRCOwners(ssrcs);\n    }\n\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling from './modules/connectivity/IceFailedHandling';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { RecordingController } from './modules/local-recording';\nimport { LiteModeContext } from './modules/litemode/LiteModeContext';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { SignalingEvents } from './service/RTC/SignalingEvents';\nimport { getMediaTypeFromSourceName, getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nwindow.APP = {\n    conference: {\n    }\n};\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Checks if a given string is a valid video codec mime type.\n *\n * @param {string} codec the codec string that needs to be validated.\n * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n * @private\n */\nfunction _getCodecMimeType(codec) {\n    if (typeof codec === 'string') {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return null;\n}\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n\n    /**\n     * List of all the participants in the conference.\n     * @type {Map<string, JitsiParticipant>};\n     */\n    this.participants = new Map();\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    if (FeatureFlags.isRunInLiteModeEnabled()) {\n        logger.info('Lite mode enabled');\n\n        this._liteModeContext = new LiteModeContext(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n\n\n    this.handleSubtitles();\n\n    if (options.config.enableLocalRecording) {\n        this.recordingController = new RecordingController();\n        this.recordingController.registerEvents(this);\n    }\n\n    if (options.config.enableAnalytics) {\n        this.enableAnalytics();\n    }\n\n    if (options.config.iAmRecorder) {\n        this.removeCommand('userinfo');\n        this.sendCommand(\n            'userinfo',\n            {\n                attributes: {\n                    xmlns: 'http://jitsi.org/jitmeet/userinfo',\n                    robot: true\n                }\n            });\n    }\n\n    const self = this;\n\n    window.APP = {\n        conference: {\n            _room: this,\n            get membersCount() {\n                return self.getParticipantsWithoutHidden().length + 1;\n            },\n            getStats() {\n                return self.connectionQuality.getStats();\n            },\n            getConnectionState() {\n                return self.getConnectionState();\n            }\n        }\n    };\n\n    this.localTracksDuration = new LocalTracksDuration(this);\n    this.sessions = {};\n    this.user = options.user;\n    this._firefoxP2pEnabled = browser.isVersionGreaterThan(109)\n        && (this.options.config.testing?.enableFirefoxP2p ?? true);\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid) {\n    return Strophe.getNodeFromJid(jid);\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    const codecSettings = {\n        jvbDisabledCodec: _getCodecMimeType(config.videoQuality?.disabledCodec),\n        p2pDisabledCodec: _getCodecMimeType(config.p2p?.disabledCodec),\n        enforcePreferredCodec: config.videoQuality?.enforcePreferredCodec,\n        jvbPreferredCodec: _getCodecMimeType(config.videoQuality?.preferredCodec),\n        p2pPreferredCodec: _getCodecMimeType(config.p2p?.preferredCodec)\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n    this._signalingLayer.on(\n        SignalingEvents.SOURCE_UPDATED,\n        (sourceName, endpointId, muted, videoType) => {\n            const participant = this.participants.get(endpointId);\n            const mediaType = getMediaTypeFromSourceName(sourceName);\n\n            if (participant) {\n                participant._setSources(mediaType, muted, sourceName, videoType);\n                this.eventEmitter.emit(JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED, participant);\n            }\n        });\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        this._registerRtcListeners(this.rtc);\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection && !config.disableAudioLevels && LocalStatsCollector.isLocalStatsSupported()) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @param reason {string|undefined} The reason for leaving the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function(reason) {\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave(reason);\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns <tt>true</tt> if end conference support is enabled in the backend.\n *\n * @returns {boolean} whether end conference is supported in the backend.\n */\nJitsiConference.prototype.isEndConferenceSupported = function() {\n    return Boolean(this.room && this.room.xmpp.endConferenceComponentAddress);\n};\n\n/**\n * Ends the conference.\n */\nJitsiConference.prototype.end = function() {\n    if (!this.isEndConferenceSupported()) {\n        logger.warn('Cannot end conference: is not supported.');\n\n        return;\n    }\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    this.room.end();\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    localtrack && this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        if (name) {\n            this.room.addOrReplaceInPresence(nickKey, {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: name\n            }) && this.room.sendPresence();\n        } else if (this.room.getFromPresence(nickKey)) {\n            this.room.removeFromPresence(nickKey);\n            this.room.sendPresence();\n        }\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (!track) {\n        return;\n    }\n    if (track.isAudioTrack() && this.options.config.startAudioMuted) {\n        track.mute();\n    }\n    if (track.isVideoTrack() && this.options.config.startVideoMuted) {\n        track.mute();\n    }\n\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        // Currently, only adding multiple video streams of different video types is supported.\n        // TODO - remove this limitation once issues with jitsi-meet trying to add multiple camera streams is fixed.\n        if (FeatureFlags.isMultiStreamSendSupportEnabled()\n            && mediaType === MediaType.VIDEO\n            && !localTracks.find(t => t.getVideoType() === track.getVideoType())) {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            track.setSourceName(sourceName);\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track)\n        .then(() => {\n            // Presence needs to be sent here for desktop track since we need the presence to reach the remote peer\n            // before signaling so that a fake participant tile is created for screenshare. Otherwise, presence will\n            // only be sent after a session-accept or source-add is ack'ed.\n            if (track.getVideoType() === VideoType.DESKTOP && FeatureFlags.isMultiStreamSendSupportEnabled()) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n        });\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants.get(actorId);\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants.get(actorId);\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation.\n    // In React Native we mute the camera by setting track.enabled but that doesn't\n    // work for screen-share tracks, so do the remove-as-mute for those.\n    const doesVideoMuteByStreamRemove\n        = browser.isReactNative() ? track.videoType === VideoType.DESKTOP : browser.doesVideoMuteByStreamRemove();\n\n    if (track.isVideoTrack() && !doesVideoMuteByStreamRemove) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!(this.isStartAudioMuted() || this.startMutedPolicy.audio)\n                    || browser.isWebKitBased()\n                    || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted() && !this.startMutedPolicy.video) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const mediaType = oldTrack?.getType() || newTrack?.getType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSendSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n\n    if (newTrack) {\n        const sourceName = oldTrack\n            ? oldTrack.getSourceName()\n            : getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            if (oldTrackBelongsToConference && !oldTrack.isMuted() && !newTrack) {\n                oldTrack._sendMuteStatus(true);\n            }\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n            this._updateRoomPresence(this.getActiveMediaSession());\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (!newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Suspend media on the inactive media session since it gets automatically enabled for a newly added source.\n    if (this.isP2PActive()) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to add the underlying MediaStream to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be added to the pc.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._addLocalTrackToPc = function(track) {\n    const addPromises = [];\n\n    if (this.jvbJingleSession) {\n        addPromises.push(this.jvbJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addPromises.push(this.p2pJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addPromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to remove the underlying MediaStream from the\n * RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._removeLocalTrackFromPc = function(track) {\n    const removePromises = [];\n\n    if (this.jvbJingleSession) {\n        removePromises.push(this.jvbJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removePromises.push(this.p2pJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setP2pVideoTransferActive(isVideoActive)\n            .catch(error => {\n                logger.error(`Failed to adjust video transfer status (${isVideoActive})`, error);\n            });\n    }\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Array.from(this.participants.values());\n};\n\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\n JitsiConference.prototype.getParticipantsWithoutHidden = function() {\n    let participants = this.getParticipants().filter(participant => !participant._hidden);\n\n    participants = participants.filter(participant => !participant?._properties?.features_jigasi);\n\n    return participants;\n};\n\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants.get(id);\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    // Set remote tracks on the participant if source signaling was received before presence.\n    const remoteTracks = this.isP2PActive()\n        ? this.p2pJingleSession?.peerconnection.getRemoteTracks(id) ?? []\n        : this.jvbJingleSession?.peerconnection.getRemoteTracks(id) ?? [];\n\n    for (const track of remoteTracks) {\n        participant._tracks.push(track);\n    }\n\n    this.participants.set(id, participant);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid, reason) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Update the SSRC owners list.\n        session._signalingLayer.updateSsrcOwnersOnLeave(id);\n        if (!FeatureFlags.isSsrcRewritingSupported()) {\n            // Remove the ssrcs from the remote description and renegotiate.\n            session.removeRemoteStreamsOnLeave(id);\n        }\n    }\n\n    tracksToBeRemoved.forEach(track => {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            track.setSourceName(null);\n            track.setOwner(null);\n        } else {\n            // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n        }\n    });\n\n    const participant = this.participants.get(id);\n\n    if (participant) {\n        this.participants.delete(id);\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant, reason);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants.get(actorId);\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave().finally(() => this.xmpp.disconnect());\n\n        return;\n    }\n\n    const kickedParticipant = this.participants.get(kickedParticipantId);\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    // Add track to JitsiParticipant.\n    if (participant) {\n        participant._tracks.push(track);\n    } else {\n        logger.info(`Source signaling received before presence for ${id}`);\n    }\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const usesUnifiedPlan = browser.supportsUnifiedPlan();\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (usesUnifiedPlan !== peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || (browser.isFirefox() && !this._firefoxP2pEnabled)) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                codecSettings: {\n                    mediaType: MediaType.VIDEO,\n                    preferred: this.codecSelection.jvbPreferredCodec,\n                    disabled: this.codecSelection.jvbDisabledCodec\n                },\n                enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    const ignoreDomain = this.connection?.options?.bridgeChannel?.ignoreDomain;\n    const preferSctp = this.connection?.options?.bridgeChannel?.preferSctp ?? false;\n    const sctpOffered = $(offerIq).find('>content[name=\"data\"]')\n        .first().length === 1;\n    let wsUrl = null;\n\n    logger.info(`SCTP: offered=${sctpOffered}, prefered=${preferSctp}`);\n\n    if (!(sctpOffered && preferSctp)) {\n        $(offerIq).find('>content>transport>web-socket')\n            .toArray()\n            .map(e => e.getAttribute('url'))\n            .forEach(url => {\n                if (!wsUrl && (!ignoreDomain || ignoreDomain !== new URL(url).hostname)) {\n                    wsUrl = url;\n                    logger.info(`Using colibri-ws url ${url}`);\n                } else if (!wsUrl) {\n                    logger.info(`Ignoring colibri-ws url with domain ${ignoreDomain}`);\n                }\n            });\n\n        if (!wsUrl) {\n            const firstWsUrl = $(offerIq).find('>content>transport>web-socket')\n                .first();\n\n            if (firstWsUrl.length === 1) {\n                wsUrl = firstWsUrl[0].getAttribute('url');\n                logger.info(`Falling back to ${wsUrl}`);\n            }\n        }\n    }\n\n    if (wsUrl && !(sctpOffered && preferSctp)) {\n        // If the offer contains a websocket and we don't prefer SCTP use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else if (sctpOffered) {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else {\n        logger.warn('Neither SCTP nor a websocket is available. Will not initialize bridge channel.');\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options?.errorMsg) {\n        logger.warn(options.errorMsg);\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    return this.room?.moderator?.isSipGatewayEnabled() ?? false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n\n    // Do not apply the startMutedPolicy locally on the moderator, the moderator should join with available local\n    // sources and the policy needs to be applied only on users that join the call after.\n    // this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            codecSettings: {\n                mediaType: MediaType.VIDEO,\n                preferred: this.codecSelection.p2pPreferredCodec,\n                disabled: this.codecSelection.p2pDisabledCodec\n            },\n            enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants.get(remoteID);\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        // There will be orphan (with no owner) tracks when ssrc-rewriting is enabled and all of them need to be addded\n        // back to the conference.\n        if (FeatureFlags.isSsrcRewritingSupported() || this.participants.has(track.ownerEndpointId)) {\n            logger.info(`Adding remote ${logName} track: ${track}`);\n            this.onRemoteTrackAdded(track);\n        }\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    this.setDisplayName(`${this.getLocalUser() && this.getLocalUser().name}(${this.options.connection.options.ownerId})`);\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true)\n        .then(() => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        })\n        .catch(error => {\n            logger.error('Failed to resume media transfer over the JVB connection:', error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession.setP2pVideoTransferActive(isVideoActive)\n            .catch(error => {\n                logger.error(`Failed to sync up P2P video transfer status (${isVideoActive}), ${error}`);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            codecSettings: {\n                mediaType: MediaType.VIDEO,\n                preferred: this.codecSelection.p2pPreferredCodec,\n                disabled: this.codecSelection.p2pDisabledCodec\n            },\n            enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants.get(remoteID);\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false)\n        .then(() => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        })\n        .catch(error => {\n            logger.error('Failed to suspend media transfer over the JVB connection:', error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || (browser.isFirefox() && !this._firefoxP2pEnabled)\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = jingleSession.peerconnection.getLocalTracks();\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceLandmarksEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the following format. The message updates\n * the fields that are present and leaves the rest unchanged on the bridge. Therefore, any field that is not applicable\n * anymore should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedSources': ['A', 'B', 'C'],\n *      'onStageSources': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n * Where A, B and C are source-names of the remote tracks that are being requested from the bridge.\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the assumed bandwidth bps for the video that is requested from the bridge.\n *\n * @param {Number} assumedBandwidthBps - The bandwidth value expressed in bits per second.\n */\nJitsiConference.prototype.setAssumedBandwidthBps = function(assumedBandwidthBps) {\n    this.receiveVideoController.setAssumedBandwidthBps(assumedBandwidthBps);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Starts the participant verification process.\n *\n * @param {string} participantId The participant which will be marked as verified.\n * @returns {void}\n */\nJitsiConference.prototype.startVerification = function(participantId) {\n    const participant = this.getParticipantById(participantId);\n\n    if (!participant) {\n        return;\n    }\n\n    this._e2eEncryption.startVerification(participant);\n};\n\n/**\n * Marks the given participant as verified. After this is done, MAC verification will\n * be performed and an event will be emitted with the result.\n *\n * @param {string} participantId The participant which will be marked as verified.\n * @param {boolean} isVerified - whether the verification was succesfull.\n * @returns {void}\n */\nJitsiConference.prototype.markParticipantVerified = function(participantId, isVerified) {\n    const participant = this.getParticipantById(participantId);\n\n    if (!participant) {\n        return;\n    }\n\n    this._e2eEncryption.markParticipantVerified(participant, isVerified);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n\n/**\n * Gets the local user when joined\n */\n JitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.terminate = function() {\n    this.sendCommand('terminate', {});\n};\n\n\nJitsiConference.prototype.handleSubtitles = function() {\n\n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty('translation_language');\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage.final = json.text;\n                newTranscriptMessage.participantName = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                    newTranscriptMessage = pastMessage;\n                } else {\n                    newTranscriptMessage.participantName = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage.final = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage.stable = text;\n                    newTranscriptMessage.unstable = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage.unstable = text;\n                }\n\n            }\n\n            let finalText = '';\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n\n                finalText = stable + unstable;\n            }\n            const fellowParticipantName =  this.participants[json?.participant?.id]?._identity?.user?.name ||  this?.getLocalUser()?.name;\n            this.eventEmitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, json?.participant?.id, fellowParticipantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n};\n\n// enable analytics\nJitsiConference.prototype.enableAnalytics = function() {\n    this.statistics.addAnalyticsEventListener((eventName, payload) => {\n        let name = '', body = {};\n\n        if (typeof eventName === 'string') {\n            name = eventName;\n            body = payload;\n        } else if (typeof eventName === 'object') {\n            name = eventName.name;\n            body = eventName;\n        }\n\n        const finalPaylaod = {\n            name,\n            action: body.action ? body.action : '',\n            actionSubject: body.actionSubject ? body.actionSubject : '',\n            source: body.source ? body.source : '',\n            attributes: JSON.stringify(payload)\n        };\n\n        this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, finalPaylaod);\n    });\n};\n\nJitsiConference.prototype.startLocalRecording = function(format = 'ogg') {\n    this.recordingController.startRecording(format);\n};\n\nJitsiConference.prototype.stopLocalRecording = function() {\n    this.recordingController.stopRecording();\n};\n\nJitsiConference.prototype.switchFormat = function() {\n    this.recordingController.switchFormat(format);\n};\n\nJitsiConference.prototype.setMuted = function(muted) {\n    this.recordingController.setMuted(muted);\n};\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n    this.recordingController.setMicDevice(micDeviceId);\n};\n\nJitsiConference.prototype.startSIPVideoCall = function(sipAddress, displayName) {\n    if (this.sessions[sipAddress]) {\n        return;\n    }\n    const session = this.createVideoSIPGWSession(sipAddress, displayName);\n\n    this.sessions[sipAddress] = session;\n    session.start();\n};\n\nJitsiConference.prototype.stopSIPVideoCall = function(sipAddress) {\n    if (!this.sessions[sipAddress]) {\n        return;\n    }\n    this.sessions[sipAddress].stop();\n    delete this.sessions[sipAddress];\n};\n/**\n * Returns the metadata handler object.\n *\n * @returns {Object} the room metadata handler.\n */\nJitsiConference.prototype.getMetadataHandler = function() {\n    return this.room?.getMetadataHandler();\n};\n","import Bourne from '@hapi/bourne';\n\n/**\n * A list if keys to ignore when parsing.\n * @type {string[]}\n */\n\nconst blacklist = [ '__proto__', 'constructor', 'prototype' ];\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {URL} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\n\nexport function parseURLParams(dontParse = true) {\n    const paramStr = location.search ? location.search : location.hash;\n    const params = {};\n    const paramParts = paramStr && paramStr.substr(1)\n        .split('&') || []; // Detect and ignore hash params for hash routers.\n\n    if (location.hash && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key || blacklist.includes(key.split('.')[0])) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value)\n                    .replace(/\\\\&/, '&');\n                value = decoded === 'undefined' ? undefined : Bourne.parse(decoded);\n            }\n        } catch (e) {\n            console.log(`Failed to parse URL parameter value: ${String(value)}`);\n            return;\n        }\n\n        params[key] = value;\n    });\n    return params;\n}\n\n\nexport function syncWithURL(conferenceConfig) {\n    const params = parseURLParams();\n    Object.keys(params)\n        .forEach(param => {\n            const key = param.replace('config.', '');\n            switch (key) {\n            case 'analytics.disabled':\n                conferenceConfig.analytics.disabled = params[param];\n                break;\n            case 'startWithAudioMuted':\n                conferenceConfig.startAudioMuted = params[param];\n                break;\n            case 'startWithVideoMuted':\n                conferenceConfig.startVideoMuted = params[param];\n                break;\n            case 'p2p.enabled':\n                conferenceConfig.p2p.enabled = params[param];\n                break;\n            default:\n                conferenceConfig[key] = params[param];\n            }\n        });\n    console.log(\"conferenceConfig\",conferenceConfig);    \n    return conferenceConfig;\n}\n\n\n\n\n\n\n\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: false,\n    flags: {\n        sendMultipleVideoStreams: true,\n        sourceNameSignaling: true,\n        enableJoinAsVisitor: true,\n    }\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const devConnectionConfig = {\n    hosts: {\n        domain: 'dev.sariska.io',\n        muc: 'muc.dev.sariska.io'\n    },\n    serviceUrl: 'wss://api.dev.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const conferenceConfig = {\n    enableLocalRecording: true,\n    enableVirtualBackground: false,\n    enableNoiseCancellation: false,\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true,\n    enableNoisyMicDetection: true,\n    createVADProcessor: true,\n    openBridgeChannel: 'websocket',\n    //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n    hiddenDomain: \"recorder.sariska.io\",\n    // startAudioMuted\n    // startVideoMuted\n    enableLayerSuspension: true, // - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping: {\n        pingInterval: -1 // analyticsInterval: 60000,\n    },\n    analytics: {\n        disabled: false\n        // rtcstatsEnabled: true,\n\n        // In order to enable rtcstats one needs to provide a endpoint url.\n        // rtcstatsEndpoint: wss://rtcstats-server-pilot.jitsi.net/,\n\n        // The interval at which rtcstats will poll getStats, defaults to 1000ms.\n        // If the value is set to 0 getStats won't be polled and the rtcstats client\n        // will only send data related to RTCPeerConnection events.\n        // rtcstatsPolIInterval: 1000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { syncWithURL } from \"./modules/util/parseURLParams\";\nimport { connectionConfig, conferenceConfig, devConnectionConfig } from './config';\nexport const DISCO_JIBRI_FEATURE = 'http://jitsi.org/protocol/jibri';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, roomName, isDev) {\n    let options;\n    const jwt = this.parseJwt(token);\n    this.name = roomName;\n    this.user = jwt.context.user;\n    options = isDev ? {...devConnectionConfig} : {...connectionConfig};\n    options.serviceUrl = `${options.serviceUrl}?room=${roomName}`;\n    this.options = options;\n    options.ownerId = jwt.context.group;\n    this.xmpp = new XMPP(options, token);\n    this.token = token;\n    this.isDev = isDev;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (e) {\n      return null;\n    }\n  };\n  \n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    const usernameOverride = jitsiLocalStorage.getItem('xmpp_username_override');\n    const passwordOverride = jitsiLocalStorage.getItem('xmpp_password_override');\n  \n    if (usernameOverride && usernameOverride.length > 0) {\n      options.id = usernameOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    if (passwordOverride && passwordOverride.length > 0) {\n      options.password = passwordOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = { ...conferenceConfig,\n        ...options\n    };\n    options = syncWithURL(options);\n    const name = this.name;\n    if (this.isDev) {\n        options = {...options, hiddenDomain: \"recorder.dev.sariska.io\"}\n    }\n    \n    if (options.iAmRecorder) {\n        this.addFeature(DISCO_JIBRI_FEATURE);\n    }\n\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(\n            (browser.isFirefox() && browser.isVersionLessThan('101'))\n            || browser.isIosBrowser()\n        );\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n\n                    Statistics.startLocalStats(track, track.setAudioLevel.bind(track));\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Custom semi-mock implementation for the Proxy connection service.\n */\nexport default class CustomSignalingLayer extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams.\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        return {};\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    removeSSRCOwners(ssrcList) {\n        if (!ssrcList?.length) {\n            return;\n        }\n\n        for (const ssrc of ssrcList) {\n            this.ssrcOwners.delete(ssrc);\n        }\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        this.chatRoom = room;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateSsrcOwnersOnLeave(id) {\n        const ssrcs = Array.from(this.ssrcOwners)\n            .filter(entry => entry[1] === id)\n            .map(entry => entry[0]);\n\n        if (!ssrcs?.length) {\n            return;\n        }\n\n        this.removeSSRCOwners(ssrcs);\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport CustomSignalingLayer from './CustomSignalingLayer';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addEventListener: () => { /* no op */ },\n            addPresenceListener: () => { /* no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            removeEventListener: () => { /* no op */ },\n            removePresenceListener: () => { /* no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new CustomSignalingLayer();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        localTracks.forEach((localTrack, localTrackIndex) => {\n            const localSourceNameTrack = getSourceNameForJitsiTrack('peer', localTrack.getType(), localTrackIndex);\n\n            localTrack.setSourceName(localSourceNameTrack);\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL,\n    timerWorkerScript\n} from './TimeWorker';\n\n/**\n * Represents a modified MediaStream that adds video as pip on a desktop stream.\n * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n * desktop stream.\n */\nexport default class JitsiStreamPresenterEffect {\n    /**\n     * Represents a modified MediaStream that adds a camera track at the\n     * bottom right corner of the desktop track using a HTML canvas.\n     * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n     * video stream.\n     *\n     * @param {MediaStream} videoStream - The video stream which is user for\n     * creating the canvas.\n     */\n    constructor(videoStream) {\n        const videoDiv = document.createElement('div');\n        const firstVideoTrack = videoStream.getVideoTracks()[0];\n        const { height, width, frameRate } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n\n        this._desktopElement = document.createElement('video');\n        this._videoElement = document.createElement('video');\n        videoDiv.appendChild(this._videoElement);\n        videoDiv.appendChild(this._desktopElement);\n        if (document.body !== null) {\n            document.body.appendChild(videoDiv);\n        }\n\n        // Set the video element properties\n        this._frameRate = parseInt(frameRate, 10);\n        this._videoElement.width = parseInt(width, 10);\n        this._videoElement.height = parseInt(height, 10);\n        this._videoElement.autoplay = true;\n        this._videoElement.srcObject = videoStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._videoElement.play();\n\n        // set the style attribute of the div to make it invisible\n        videoDiv.style.display = 'none';\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onVideoFrameTimer = this._onVideoFrameTimer.bind(this);\n    }\n\n    /**\n     * EventHandler onmessage for the videoFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onVideoFrameTimer(response) {\n        if (response.data.id === INTERVAL_TIMEOUT) {\n            this._renderVideo();\n        }\n    }\n\n    /**\n     * Loop function to render the video frame input and draw presenter effect.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderVideo() {\n        // adjust the canvas width/height on every frame incase the window has been resized.\n        const [ track ] = this._desktopStream.getVideoTracks();\n        const { height, width } = track.getSettings() ?? track.getConstraints();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._ctx.drawImage(this._desktopElement, 0, 0, this._canvas.width, this._canvas.height);\n        this._ctx.drawImage(this._videoElement, this._canvas.width - this._videoElement.width, this._canvas.height\n            - this._videoElement.height, this._videoElement.width, this._videoElement.height);\n\n        // draw a border around the video element.\n        this._ctx.beginPath();\n        this._ctx.lineWidth = 2;\n        this._ctx.strokeStyle = '#A9A9A9'; // dark grey\n        this._ctx.rect(this._canvas.width - this._videoElement.width, this._canvas.height - this._videoElement.height,\n            this._videoElement.width, this._videoElement.height);\n        this._ctx.stroke();\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the\n     * specified track, false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'desktop';\n    }\n\n    /**\n     * Starts loop to capture video frame and render presenter effect.\n     *\n     * @param {MediaStream} desktopStream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(desktopStream) {\n        const firstVideoTrack = desktopStream.getVideoTracks()[0];\n        const { height, width } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        // set the desktop element properties.\n        this._desktopStream = desktopStream;\n        this._desktopElement.width = parseInt(width, 10);\n        this._desktopElement.height = parseInt(height, 10);\n        this._desktopElement.autoplay = true;\n        this._desktopElement.srcObject = desktopStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._desktopElement.play();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._videoFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Presenter effect worker' });\n        this._videoFrameTimerWorker.onmessage = this._onVideoFrameTimer;\n        this._videoFrameTimerWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: 1000 / this._frameRate\n        });\n\n        return this._canvas.captureStream(this._frameRate);\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._videoFrameTimerWorker.postMessage({\n            id: CLEAR_INTERVAL\n        });\n        this._videoFrameTimerWorker.terminate();\n    }\n\n}\n","\nvar Module = (function() {\n  var _scriptDir = \"https://sdk.sariska.io/\";\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\nnull;var Module=typeof Module!==\"undefined\"?Module:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":1,\"maximum\":1+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5340496,DYNAMICTOP_PTR=97456;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile=\"rnnoise.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap,\"memory\":wasmMemory,\"table\":wasmTable};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"c\"]).apply(null,arguments)};var _rnnoise_init=Module[\"_rnnoise_init\"]=function(){return(_rnnoise_init=Module[\"_rnnoise_init\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _rnnoise_create=Module[\"_rnnoise_create\"]=function(){return(_rnnoise_create=Module[\"_rnnoise_create\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _rnnoise_destroy=Module[\"_rnnoise_destroy\"]=function(){return(_rnnoise_destroy=Module[\"_rnnoise_destroy\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=function(){return(_rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport rnnoiseWasmInit from 'rnnoise-wasm';\n\nimport RnnoiseProcessor from './RnnoiseProcessor';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream, videoType) {\n        return new Promise((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model, options) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport createTFLiteModule from './tflite';\nimport createTFLiteSIMDModule from './tflite-simd';\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @param {Function} dispatch - The Redux dispatch function.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground, dispatch) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n    let wasmCheck;\n\n    // Checks if WebAssembly feature is supported or enabled by/in the browser.\n    // Conditional import of wasm-check package is done to prevent\n    // the browser from crashing when the user opens the app.\n\n    try {\n        wasmCheck = require('wasm-check');\n        if (wasmCheck?.feature?.simd) {\n            tflite = await createTFLiteSIMDModule();\n        } else {\n            tflite = await createTFLiteModule();\n        }\n    } catch (err) {\n        return;\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}","/**\n * @type Class\n */\nimport Logger from '@jitsi/logger';\nimport { getLogger } from '@jitsi/logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\nimport {initSDKConfig} from './config';\nimport * as createAnalyticsEvent from './modules/util/createAnalyticsEvent';\n\nconst logger = getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes: any = {};\n\n    attributes['audio_requested'] = options.devices.includes('audio');\n    attributes['video_requested'] = options.devices.includes('video');\n    attributes['screen_sharing_requested'] = options.devices.includes('desktop');\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\ninterface ICreateLocalTrackOptions {\n    cameraDeviceId?: string;\n    devices?: any[];\n    firePermissionPromptIsShownEvent?: boolean;\n    fireSlowPromiseEvent?: boolean;\n    micDeviceId?: string;\n    resolution?: string;\n}\n\ninterface IJitsiMeetJSOptions {\n    enableAnalyticsLogging?: boolean;\n    enableWindowOnErrorHandler?: boolean;\n    externalStorage?: Storage;\n    flags?: {\n        runInLiteMode?: boolean;\n        ssrcRewritingEnabled?: boolean;\n    }\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code SariskaMediaTransport}).\n */\nexport default {\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        createPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices as unknown,\n    analytics: Statistics.analytics as unknown,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options: IJitsiMeetJSOptions = {}) {\n        let newOptions = {...initSDKConfig, ...options};\n        Settings.init(newOptions.externalStorage);\n        Statistics.init(newOptions);\n        const flags = newOptions.flags || {};\n\n        // Configure the feature flags.\n        FeatureFlags.init(flags);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options: ICreateLocalTrackOptions = {}, oldfirePermissionPromptIsShownEvent) {\n        if (window.location.href.indexOf(\"iAmRecorder\") >= 0) {\n            return [];\n         }\n\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            // @ts-ignore\n            JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN, browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (this.isCollectingLocalStats()) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(track,\n                                track.setAudioLevel.bind(track));\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline, networkType, details}) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline, networkType, details\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n};\n","// @flow\n\nimport JitsiStreamPresenterEffect from './JitsiStreamPresenterEffect';\n\n/**\n * Creates a new instance of JitsiStreamPresenterEffect.\n *\n * @param {MediaStream} stream - The video stream which will be used for\n * creating the presenter effect.\n * @returns {Promise<JitsiStreamPresenterEffect>}\n */\nexport function createPresenterEffect(stream) {\n    if (!MediaStreamTrack.prototype.getSettings\n        && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('JitsiStreamPresenterEffect not supported!'));\n    }\n\n    return Promise.resolve(new JitsiStreamPresenterEffect(stream));\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","export function createNetworkInfoEvent({ isOnline, networkType, details }) {\n    const attributes = { isOnline };\n\n    // Do no include optional stuff or Amplitude handler will log warnings.\n    networkType && (attributes.networkType = networkType);\n    details && (attributes.details = details);\n\n    return {\n        action: 'network.info',\n        attributes\n    };\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nconst sariskaMediaTransport = require('./SariskaMediaTransport').default;\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\nmodule.exports = _mergeNamespaceAndModule(sariskaMediaTransport);\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._isDominantSpeaker = false;\n        this._isSilent = false;\n        this._hasLeft = false;\n        this._faceLandmarks = [];\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._isDominantSpeaker;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} isNowDominantSpeaker - If true, the user will be accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker, silence) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker && !silence) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker()) {\n            if (!isNowDominantSpeaker) {\n                if (!this._isSilent) {\n                    const now = Date.now();\n                    const timeElapsed = now - this._dominantSpeakerStart;\n\n                    this.totalDominantSpeakerTime += timeElapsed;\n                    this._dominantSpeakerStart = 0;\n                }\n            } else if (this._isSilent && !silence) {\n                this._dominantSpeakerStart = Date.now();\n            } else if (!this._isSilent && silence) {\n                const now = Date.now();\n                const timeElapsed = now - this._dominantSpeakerStart;\n\n                this.totalDominantSpeakerTime += timeElapsed;\n                this._dominantSpeakerStart = 0;\n            }\n        }\n\n        this._isDominantSpeaker = isNowDominantSpeaker;\n        this._isSilent = silence;\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker() && !this._isSilent) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the face landmarks of the user.\n     *\n     * @returns {Object}\n     */\n    getFaceLandmarks() {\n        return this._faceLandmarks;\n    }\n\n    /**\n     * Sets the face landmarks of the user.\n     *\n     * @param {Object} faceLandmarks - object with face expressions.\n     * @returns {void}\n     */\n    setFaceLandmarks(faceLandmarks) {\n        this._faceLandmarks = faceLandmarks;\n    }\n\n    /**\n     * Adds new face landmarks to speaker stats.\n     *\n     * @param  {string} faceExpression\n     * @param {number} duration\n     */\n    addFaceLandmarks(faceLandmarks) {\n        this._faceLandmarks.push(faceLandmarks);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","var createTFLiteSIMDModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,s={};for(o in a)a.hasOwnProperty(o)&&(s[o]=a[o]);var u,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!u&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||k(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in s)s.hasOwnProperty(o)&&(a[o]=s[o]);s=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&k(\"no native wasm support detected\");var _=!1;var A,I,M,E,R=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function S(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&R)return R.decode(e.subarray(n,a));for(var o=\"\";n<a;){var s=e[n++];if(128&s){var u=63&e[n++];if(192!=(224&s)){var i=63&e[n++];if((s=224==(240&s)?(15&s)<<12|u<<6|i:(7&s)<<18|u<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(s);else{var c=s-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&s)<<6|u)}else o+=String.fromCharCode(s)}return o}function O(e){A=e,a.HEAP8=I=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=E=new Int32Array(e),a.HEAPU8=M=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var C,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,D=null,L=null;function k(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function U(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var j=\"data:application/octet-stream;base64,\";function F(e){return U(e,j)}var q=\"file://\";function B(e){return U(e,q)}var N,G=\"https://sdk.sariska.io/tflite-simd.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){k(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?C.get(t)():C.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}F(G)||(G=G),N=u?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return E[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),O(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(S(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,E[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?S(M,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){k()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return E[n>>2]=t/1e3|0,E[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){M.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=M.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;E[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)I[n++>>0]=e.charCodeAt(r);t||(I[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();E[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),E[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var s=E[n+8*o>>2],u=E[n+(8*o+4)>>2],i=0;i<u;i++)Z.printChar(e,M[s+i]);a+=u}return E[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,O((v=a.asm.q).buffer),C=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),L)){var n=L;L=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),k(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||F(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(L=function e(){$||ae(),$||(L=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteSIMDModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteSIMDModule}):\"object\"==typeof exports&&(exports.createTFLiteSIMDModule=createTFLiteSIMDModule);","var createTFLiteModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,u={};for(o in a)a.hasOwnProperty(o)&&(u[o]=a[o]);var s,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,s=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!s&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||U(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in u)u.hasOwnProperty(o)&&(a[o]=u[o]);u=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&U(\"no native wasm support detected\");var _=!1;var A,E,R,I,M=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function O(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&M)return M.decode(e.subarray(n,a));for(var o=\"\";n<a;){var u=e[n++];if(128&u){var s=63&e[n++];if(192!=(224&u)){var i=63&e[n++];if((u=224==(240&u)?(15&u)<<12|s<<6|i:(7&u)<<18|s<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(u);else{var c=u-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&u)<<6|s)}else o+=String.fromCharCode(u)}return o}function C(e){A=e,a.HEAP8=E=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=I=new Int32Array(e),a.HEAPU8=R=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var S,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,L=null,k=null;function U(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function j(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var F=\"data:application/octet-stream;base64,\";function D(e){return j(e,F)}var q=\"file://\";function B(e){return j(e,q)}var N,G=\"https://sdk.sariska.io/tflite.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){U(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?S.get(t)():S.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}D(G)||(G=G),N=s?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return I[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),C(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(O(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,I[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?O(R,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){U()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return I[n>>2]=t/1e3|0,I[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){R.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=R.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;I[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)E[n++>>0]=e.charCodeAt(r);t||(E[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();I[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),I[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var u=I[n+8*o>>2],s=I[n+(8*o+4)>>2],i=0;i<s;i++)Z.printChar(e,R[u+i]);a+=s}return I[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,C((v=a.asm.q).buffer),S=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==L&&(clearInterval(L),L=null),k)){var n=k;k=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),U(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||D(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(k=function e(){$||ae(),$||(k=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteModule}):\"object\"==typeof exports&&(exports.createTFLiteModule=createTFLiteModule);","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {boolean} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! jQuery v3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector | (c) OpenJS Foundation and other contributors | jquery.org/license */\n!function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(g,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,a=y.toString,l=a.call(Object),m={},b=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},w=g.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function C(e,t,n){var r,i,o=(n=n||w).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector\",E=function(e,t){return new E.fn.init(e,t)};function d(e){var t=!!e&&\"length\"in e&&e.length,n=T(e);return!b(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:f,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\"boolean\"==typeof a&&(l=a,a=arguments[s]||{},s++),\"object\"==typeof a||b(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],\"__proto__\"!==t&&a!==r&&(l&&r&&(E.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||E.isPlainObject(n)?n:{},i=!1,a[t]=E.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:\"jQuery\"+(f+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==o.call(e))&&(!(t=r(e))||\"function\"==typeof(n=y.call(t,\"constructor\")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){C(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?E.merge(n,\"string\"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return v(a)},guid:1,support:m}),\"function\"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(e,t){n[\"[object \"+t+\"]\"]=t.toLowerCase()});var p=function(n){var e,p,x,o,i,h,f,g,w,u,l,C,T,a,E,v,s,c,y,A=\"sizzle\"+1*new Date,d=n.document,N=0,r=0,m=ue(),b=ue(),S=ue(),k=ue(),D=function(e,t){return e===t&&(l=!0),0},L={}.hasOwnProperty,t=[],j=t.pop,q=t.push,O=t.push,P=t.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},I=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",R=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",B=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",M=\"\\\\[\"+R+\"*(\"+B+\")(?:\"+R+\"*([*^$|!~]?=)\"+R+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+B+\"))|)\"+R+\"*\\\\]\",W=\":(\"+B+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+M+\")*)|.*)\\\\)|)\",F=new RegExp(R+\"+\",\"g\"),$=new RegExp(\"^\"+R+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+R+\"+$\",\"g\"),z=new RegExp(\"^\"+R+\"*,\"+R+\"*\"),_=new RegExp(\"^\"+R+\"*([>+~]|\"+R+\")\"+R+\"*\"),U=new RegExp(R+\"|>\"),V=new RegExp(W),X=new RegExp(\"^\"+B+\"$\"),Q={ID:new RegExp(\"^#(\"+B+\")\"),CLASS:new RegExp(\"^\\\\.(\"+B+\")\"),TAG:new RegExp(\"^(\"+B+\"|[*])\"),ATTR:new RegExp(\"^\"+M),PSEUDO:new RegExp(\"^\"+W),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+R+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+R+\"*(?:([+-]|)\"+R+\"*(\\\\d+)|))\"+R+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+I+\")$\",\"i\"),needsContext:new RegExp(\"^\"+R+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+R+\"*((?:-\\\\d)?\\\\d*)\"+R+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,K=/^h\\d$/i,J=/^[^{]+\\{\\s*\\[native \\w/,Z=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ee=/[+~]/,te=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),ne=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,ie=function(e,t){return t?\"\\0\"===e?\"\\ufffd\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e},oe=function(){C()},ae=xe(function(e){return!0===e.disabled&&\"fieldset\"===e.nodeName.toLowerCase()},{dir:\"parentNode\",next:\"legend\"});try{O.apply(t=P.call(d.childNodes),d.childNodes),t[d.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){q.apply(e,P.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],\"string\"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&(C(e),e=e||T,E)){if(11!==d&&(u=Z.exec(t)))if(i=u[1]){if(9===d){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return O.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&p.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!k[t+\" \"]&&(!v||!v.test(t))&&(1!==d||\"object\"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===d&&(U.test(t)||_.test(t))){(f=ee.test(t)&&ye(e.parentNode)||e)===e&&p.scope||((s=e.getAttribute(\"id\"))?s=s.replace(re,ie):e.setAttribute(\"id\",s=A)),o=(l=h(t)).length;while(o--)l[o]=(s?\"#\"+s:\":scope\")+\" \"+be(l[o]);c=l.join(\",\")}try{return O.apply(n,f.querySelectorAll(c)),n}catch(e){k(t,!0)}finally{s===A&&e.removeAttribute(\"id\")}}}return g(t.replace($,\"$1\"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+\" \")>x.cacheLength&&delete e[r.shift()],e[t+\" \"]=n}}function le(e){return e[A]=!0,e}function ce(e){var t=T.createElement(\"fieldset\");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split(\"|\"),r=n.length;while(r--)x.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return\"input\"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return(\"input\"===t||\"button\"===t)&&e.type===n}}function ge(t){return function(e){return\"form\"in e?e.parentNode&&!1===e.disabled?\"label\"in e?\"label\"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:\"label\"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&\"undefined\"!=typeof e.getElementsByTagName&&e}for(e in p=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||\"HTML\")},C=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:d;return r!=T&&9===r.nodeType&&r.documentElement&&(a=(T=r).documentElement,E=!i(T),d!=T&&(n=T.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener(\"unload\",oe,!1):n.attachEvent&&n.attachEvent(\"onunload\",oe)),p.scope=ce(function(e){return a.appendChild(e).appendChild(T.createElement(\"div\")),\"undefined\"!=typeof e.querySelectorAll&&!e.querySelectorAll(\":scope fieldset div\").length}),p.attributes=ce(function(e){return e.className=\"i\",!e.getAttribute(\"className\")}),p.getElementsByTagName=ce(function(e){return e.appendChild(T.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),p.getElementsByClassName=J.test(T.getElementsByClassName),p.getById=ce(function(e){return a.appendChild(e).id=A,!T.getElementsByName||!T.getElementsByName(A).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute(\"id\")===t}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t=\"undefined\"!=typeof e.getAttributeNode&&e.getAttributeNode(\"id\");return t&&t.value===n}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return\"undefined\"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(\"undefined\"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(p.qsa=J.test(T.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML=\"<a id='\"+A+\"'></a><select id='\"+A+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",e.querySelectorAll(\"[msallowcapture^='']\").length&&v.push(\"[*^$]=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\"[selected]\").length||v.push(\"\\\\[\"+R+\"*(?:value|\"+I+\")\"),e.querySelectorAll(\"[id~=\"+A+\"-]\").length||v.push(\"~=\"),(t=T.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||v.push(\"\\\\[\"+R+\"*name\"+R+\"*=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":checked\").length||v.push(\":checked\"),e.querySelectorAll(\"a#\"+A+\"+*\").length||v.push(\".#.+[+~]\"),e.querySelectorAll(\"\\\\\\f\"),v.push(\"[\\\\r\\\\n\\\\f]\")}),ce(function(e){e.innerHTML=\"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";var t=T.createElement(\"input\");t.setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),e.querySelectorAll(\"[name=d]\").length&&v.push(\"name\"+R+\"*[*^$|!~]?=\"),2!==e.querySelectorAll(\":enabled\").length&&v.push(\":enabled\",\":disabled\"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&v.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),v.push(\",.*:\")})),(p.matchesSelector=J.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=c.call(e,\"*\"),c.call(e,\"[s!='']:x\"),s.push(\"!=\",W)}),v=v.length&&new RegExp(v.join(\"|\")),s=s.length&&new RegExp(s.join(\"|\")),t=J.test(a.compareDocumentPosition),y=t||J.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e==T||e.ownerDocument==d&&y(d,e)?-1:t==T||t.ownerDocument==d&&y(d,t)?1:u?H(u,e)-H(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==T?-1:t==T?1:i?-1:o?1:u?H(u,e)-H(u,t):0;if(i===o)return de(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?de(a[r],s[r]):a[r]==d?-1:s[r]==d?1:0}),T},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(C(e),p.matchesSelector&&E&&!k[t+\" \"]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){k(t,!0)}return 0<se(t,T,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=T&&C(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=T&&C(e);var n=x.attrHandle[t.toLowerCase()],r=n&&L.call(x.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:p.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+\"\").replace(re,ie)},se.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!p.detectDuplicates,u=!p.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(x=se.selectors={cacheLength:50,createPseudo:le,match:Q,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||\"\").replace(te,ne),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=m[e+\" \"];return t||(t=new RegExp(\"(^|\"+R+\")\"+e+\"(\"+R+\"|$)\"))&&m(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||\"undefined\"!=typeof e.getAttribute&&e.getAttribute(\"class\")||\"\")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?\"!=\"===r:!r||(t+=\"\",\"=\"===r?t===i:\"!=\"===r?t!==i:\"^=\"===r?i&&0===t.indexOf(i):\"*=\"===r?i&&-1<t.indexOf(i):\"$=\"===r?i&&t.slice(-i.length)===i:\"~=\"===r?-1<(\" \"+t.replace(F,\" \")+\" \").indexOf(i):\"|=\"===r&&(t===i||t.slice(0,i.length+1)===i+\"-\"))}},CHILD:function(h,e,t,g,v){var y=\"nth\"!==h.slice(0,3),m=\"last\"!==h.slice(-4),b=\"of-type\"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?\"nextSibling\":\"previousSibling\",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,p=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(b?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l=\"only\"===h&&!u&&\"nextSibling\"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&d){p=(s=(r=(i=(o=(a=c)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if(1===a.nodeType&&++p&&a===e){i[h]=[N,s,p];break}}else if(d&&(p=s=(r=(i=(o=(a=e)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1]),!1===p)while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if((b?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++p&&(d&&((i=(o=a[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[N,p]),a===e))break;return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||se.error(\"unsupported pseudo: \"+e);return a[A]?a(o):1<a.length?(t=[e,e,\"\",o],x.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=H(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace($,\"$1\"));return s[A]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return X.test(n||\"\")||se.error(\"unsupported lang: \"+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute(\"xml:lang\")||e.getAttribute(\"lang\"))return(t=t.toLowerCase())===n||0===t.indexOf(n+\"-\")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function me(){}function be(e){for(var t=0,n=e.length,r=\"\";t<n;t++)r+=e[t].value;return r}function xe(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&\"parentNode\"===c,d=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[N,d];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[A]||(e[A]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===N&&r[1]===d)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Ce(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(p,h,g,v,y,e){return v&&!v[A]&&(v=Te(v)),y&&!y[A]&&(y=Te(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||\"*\",n.nodeType?[n]:n,[]),f=!p||!e&&h?c:Ce(c,s,p,n,r),d=g?y||(e?p:l||v)?[]:t:f;if(g&&g(f,d,n,r),v){i=Ce(d,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(d[u[o]]=!(f[u[o]]=a))}if(e){if(y||p){if(y){i=[],o=d.length;while(o--)(a=d[o])&&i.push(f[o]=a);y(null,d=[],i,r)}o=d.length;while(o--)(a=d[o])&&-1<(i=y?H(e,a):s[o])&&(e[i]=!(t[i]=a))}}else d=Ce(d===t?d.splice(l,d.length):d),y?y(null,t,d,r):O.apply(t,d)})}function Ee(e){for(var i,t,n,r=e.length,o=x.relative[e[0].type],a=o||x.relative[\" \"],s=o?1:0,u=xe(function(e){return e===i},a,!0),l=xe(function(e){return-1<H(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=x.relative[e[s].type])c=[xe(we(c),t)];else{if((t=x.filter[e[s].type].apply(null,e[s].matches))[A]){for(n=++s;n<r;n++)if(x.relative[e[n].type])break;return Te(1<s&&we(c),1<s&&be(e.slice(0,s-1).concat({value:\" \"===e[s-2].type?\"*\":\"\"})).replace($,\"$1\"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&be(e))}c.push(t)}return we(c)}return me.prototype=x.filters=x.pseudos,x.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=b[e+\" \"];if(l)return t?0:l.slice(0);a=e,s=[],u=x.preFilter;while(a){for(o in n&&!(r=z.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=_.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace($,\" \")}),a=a.slice(n.length)),x.filter)!(r=Q[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):b(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,b,r,i=[],o=[],a=S[e+\" \"];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[A]?i.push(a):o.push(a);(a=S(e,(v=o,m=0<(y=i).length,b=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l=\"0\",c=e&&[],f=[],d=w,p=e||b&&x.find.TAG(\"*\",i),h=N+=null==d?1:Math.random()||.1,g=p.length;for(i&&(w=t==T||t||i);l!==g&&null!=(o=p[l]);l++){if(b&&o){a=0,t||o.ownerDocument==T||(C(o),n=!E);while(s=v[a++])if(s(o,t||T,n)){r.push(o);break}i&&(N=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=j.call(r));f=Ce(f)}O.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(N=h,w=d),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l=\"function\"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&\"ID\"===(a=o[0]).type&&9===t.nodeType&&E&&x.relative[o[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=Q.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],x.relative[s=a.type])break;if((u=x.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&be(o)))return O.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},p.sortStable=A.split(\"\").sort(D).join(\"\")===A,p.detectDuplicates=!!l,C(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(T.createElement(\"fieldset\"))}),ce(function(e){return e.innerHTML=\"<a href='#'></a>\",\"#\"===e.firstChild.getAttribute(\"href\")})||fe(\"type|href|height|width\",function(e,t,n){if(!n)return e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML=\"<input/>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")})||fe(\"value\",function(e,t,n){if(!n&&\"input\"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute(\"disabled\")})||fe(I,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(g);E.find=p,E.expr=p.selectors,E.expr[\":\"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;var h=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&E(e).is(n))break;r.push(e)}return r},A=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=E.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var k=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function D(e,n,r){return b(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?E.grep(e,function(e){return e===n!==r}):\"string\"!=typeof n?E.grep(e,function(e){return-1<i.call(n,e)!==r}):E.filter(n,e,r)}E.filter=function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(\"string\"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,i[t],n);return 1<r?E.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,\"string\"==typeof e&&N.test(e)?E(e):e||[],!1).length}});var L,j=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(E.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||L,\"string\"==typeof e){if(!(r=\"<\"===e[0]&&\">\"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),k.test(r[1])&&E.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=w.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,L=E(w);var q=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a=\"string\"!=typeof e&&E(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?E.uniqueSort(o):o)},index:function(e){return e?\"string\"==typeof e?i.call(E(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,\"parentNode\")},parentsUntil:function(e,t,n){return h(e,\"parentNode\",n)},next:function(e){return P(e,\"nextSibling\")},prev:function(e){return P(e,\"previousSibling\")},nextAll:function(e){return h(e,\"nextSibling\")},prevAll:function(e){return h(e,\"previousSibling\")},nextUntil:function(e,t,n){return h(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return h(e,\"previousSibling\",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(S(e,\"template\")&&(e=e.content||e),E.merge([],e.childNodes))}},function(r,i){E.fn[r]=function(e,t){var n=E.map(this,i,e);return\"Until\"!==r.slice(-5)&&(t=e),t&&\"string\"==typeof t&&(n=E.filter(t,n)),1<this.length&&(O[r]||E.uniqueSort(n),q.test(r)&&n.reverse()),this.pushStack(n)}});var H=/[^\\x20\\t\\r\\n\\f]+/g;function I(e){return e}function R(e){throw e}function B(e,t,n,r){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(r){var e,n;r=\"string\"==typeof r?(e=r,n={},E.each(e.match(H)||[],function(e,t){n[t]=!0}),n):E.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:\"\")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){E.each(e,function(e,t){b(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&\"string\"!==T(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return E.each(arguments,function(e,t){var n;while(-1<(n=E.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<E.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t=\"\",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=\"\"),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},E.extend({Deferred:function(e){var o=[[\"notify\",\"progress\",E.Callbacks(\"memory\"),E.Callbacks(\"memory\"),2],[\"resolve\",\"done\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),1,\"rejected\"]],i=\"pending\",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},\"catch\":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return E.Deferred(function(r){E.each(o,function(e,t){var n=b(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+\"With\"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError(\"Thenable self-resolution\");t=e&&(\"object\"==typeof e||\"function\"==typeof e)&&e.then,b(t)?s?t.call(e,l(u,o,I,s),l(u,o,R,s)):(u++,t.call(e,l(u,o,I,s),l(u,o,R,s),l(u,o,I,o.notifyWith))):(a!==I&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==R&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),g.setTimeout(t))}}return E.Deferred(function(e){o[0][3].add(l(0,e,b(r)?r:I,e.notifyWith)),o[1][3].add(l(0,e,b(t)?t:I)),o[2][3].add(l(0,e,b(n)?n:R))}).promise()},promise:function(e){return null!=e?E.extend(e,a):a}},s={};return E.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+\"With\"](this===s?void 0:this,arguments),this},s[t[0]+\"With\"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=E.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(B(e,o.done(a(t)).resolve,o.reject,!n),\"pending\"===o.state()||b(i[t]&&i[t].then)))return o.then();while(t--)B(i[t],a(t),o.reject);return o.promise()}});var M=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){g.console&&g.console.warn&&e&&M.test(e.name)&&g.console.warn(\"jQuery.Deferred exception: \"+e.message,e.stack,t)},E.readyException=function(e){g.setTimeout(function(){throw e})};var W=E.Deferred();function F(){w.removeEventListener(\"DOMContentLoaded\",F),g.removeEventListener(\"load\",F),E.ready()}E.fn.ready=function(e){return W.then(e)[\"catch\"](function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||W.resolveWith(w,[E])}}),E.ready.then=W.then,\"complete\"===w.readyState||\"loading\"!==w.readyState&&!w.documentElement.doScroll?g.setTimeout(E.ready):(w.addEventListener(\"DOMContentLoaded\",F),g.addEventListener(\"load\",F));var $=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if(\"object\"===T(n))for(s in i=!0,n)$(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,b(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(E(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,_=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function V(e){return e.replace(z,\"ms-\").replace(_,U)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=E.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if(\"string\"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(H)||[]).length;while(n--)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var Y=new Q,G=new Q,K=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,J=/[A-Z]/g;function Z(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r=\"data-\"+t.replace(J,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(r))){try{n=\"true\"===(i=n)||\"false\"!==i&&(\"null\"===i?null:i===+i+\"\"?+i:K.test(i)?JSON.parse(i):i)}catch(e){}G.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return G.hasData(e)||Y.hasData(e)},data:function(e,t,n){return G.access(e,t,n)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=G.get(o),1===o.nodeType&&!Y.get(o,\"hasDataAttrs\"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf(\"data-\")&&(r=V(r.slice(5)),Z(o,r,i[r]));Y.set(o,\"hasDataAttrs\",!0)}return i}return\"object\"==typeof n?this.each(function(){G.set(this,n)}):$(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=G.get(o,n))?t:void 0!==(t=Z(o,n))?t:void 0;this.each(function(){G.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){G.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=E.queue(e,t),r=n.length,i=n.shift(),o=E._queueHooks(e,t);\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,function(){E.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return Y.get(e,n)||Y.access(e,n,{empty:E.Callbacks(\"once memory\").add(function(){Y.remove(e,[t+\"queue\",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return\"string\"!=typeof t&&(n=t,t=\"fx\",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),\"fx\"===t&&\"inprogress\"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=E.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";while(a--)(n=Y.get(o[a],e+\"queueHooks\"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ee=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,te=new RegExp(\"^(?:([+-])=|)(\"+ee+\")([a-z%]*)$\",\"i\"),ne=[\"Top\",\"Right\",\"Bottom\",\"Left\"],re=w.documentElement,ie=function(e){return E.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&ie(e)&&\"none\"===E.css(e,\"display\")};var se={};function ue(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?(\"none\"===n&&(l[c]=Y.get(r,\"display\")||null,l[c]||(r.style.display=\"\")),\"\"===r.style.display&&ae(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=se[s])||(o=a.body.appendChild(a.createElement(s)),u=E.css(o,\"display\"),o.parentNode.removeChild(o),\"none\"===u&&(u=\"block\"),se[s]=u)))):\"none\"!==n&&(l[c]=\"none\",Y.set(r,\"display\",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}E.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var le,ce,fe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,pe=/^$|^module$|\\/(?:java|ecma)script/i;le=w.createDocumentFragment().appendChild(w.createElement(\"div\")),(ce=w.createElement(\"input\")).setAttribute(\"type\",\"radio\"),ce.setAttribute(\"checked\",\"checked\"),ce.setAttribute(\"name\",\"t\"),le.appendChild(ce),m.checkClone=le.cloneNode(!0).cloneNode(!0).lastChild.checked,le.innerHTML=\"<textarea>x</textarea>\",m.noCloneChecked=!!le.cloneNode(!0).lastChild.defaultValue,le.innerHTML=\"<option></option>\",m.option=!!le.lastChild;var he={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function ge(e,t){var n;return n=\"undefined\"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):\"undefined\"!=typeof e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&S(e,t)?E.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],\"globalEval\",!t||Y.get(t[n],\"globalEval\"))}he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td,m.option||(he.optgroup=he.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var ye=/<|&#?\\w+;/;function me(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if(\"object\"===T(o))E.merge(d,o.nodeType?[o]:o);else if(ye.test(o)){a=a||f.appendChild(t.createElement(\"div\")),s=(de.exec(o)||[\"\",\"\"])[1].toLowerCase(),u=he[s]||he._default,a.innerHTML=u[1]+E.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;E.merge(d,a.childNodes),(a=f.firstChild).textContent=\"\"}else d.push(t.createTextNode(o));f.textContent=\"\",p=0;while(o=d[p++])if(r&&-1<E.inArray(o,r))i&&i.push(o);else if(l=ie(o),a=ge(f.appendChild(o),\"script\"),l&&ve(a),n){c=0;while(o=a[c++])pe.test(o.type||\"\")&&n.push(o)}return f}var be=/^([^.]*)(?:\\.(.+)|)/;function xe(){return!0}function we(){return!1}function Ce(e,t){return e===function(){try{return w.activeElement}catch(e){}}()==(\"focus\"===t)}function Te(e,t,n,r,i,o){var a,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&(\"string\"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=we;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,i,r,n)})}function Ee(e,i,o){o?(Y.set(e,i,!1),E.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(E.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(Y.set(this,i,{value:E.event.trigger(E.extend(r[0],E.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&E.event.add(e,i,xe)}E.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.get(t);if(X(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&E.find.matchesSelector(re,i),n.guid||(n.guid=E.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return\"undefined\"!=typeof E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||\"\").match(H)||[\"\"]).length;while(l--)p=g=(s=be.exec(e[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p&&(f=E.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},c=E.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:h.join(\".\")},o),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),E.event.global[p]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.hasData(e)&&Y.get(e);if(v&&(u=v.events)){l=(t=(t||\"\").match(H)||[\"\"]).length;while(l--)if(p=g=(s=be.exec(t[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p){f=E.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),a=o=d.length;while(o--)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||E.removeEvent(e,p,v.handle),delete u[p])}else for(p in u)E.event.remove(e,p+t[l],n,r,!0);E.isEmptyObject(u)&&Y.remove(e,\"handle events\")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=E.event.fix(e),l=(Y.get(this,\"events\")||Object.create(null))[u.type]||[],c=E.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=E.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((E.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!(\"click\"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(\"click\"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+\" \"]&&(a[i]=r.needsContext?-1<E(i,this).index(l):E.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\",xe),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Y.get(t,\"click\")||S(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:we,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:we,isPropagationStopped:we,isImmediatePropagationStopped:we,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,\"char\":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:\"focusin\",blur:\"focusout\"},function(t,e){E.event.special[t]={setup:function(){return Ee(this,t,Ce),!1},trigger:function(){return Ee(this,t),!0},_default:function(e){return Y.get(e.target,t)},delegateType:e}}),E.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(e,i){E.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),E.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=we),this.each(function(){E.event.remove(this,e,n,t)})}});var Ae=/<script|<style|<link/i,Ne=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Se=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function ke(e,t){return S(e,\"table\")&&S(11!==t.nodeType?t:t.firstChild,\"tr\")&&E(e).children(\"tbody\")[0]||e}function De(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function Le(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function je(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(i in Y.remove(t,\"handle events\"),s)for(n=0,r=s[i].length;n<r;n++)E.event.add(t,i,s[i][n]);G.hasData(e)&&(o=G.access(e),a=E.extend({},o),G.set(t,a))}}function qe(n,r,i,o){r=v(r);var e,t,a,s,u,l,c=0,f=n.length,d=f-1,p=r[0],h=b(p);if(h||1<f&&\"string\"==typeof p&&!m.checkClone&&Ne.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),qe(t,r,i,o)});if(f&&(t=(e=me(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=E.map(ge(e,\"script\"),De)).length;c<f;c++)u=e,c!==d&&(u=E.clone(u,!0,!0),s&&E.merge(a,ge(u,\"script\"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,E.map(a,Le),c=0;c<s;c++)u=a[c],pe.test(u.type||\"\")&&!Y.access(u,\"globalEval\")&&E.contains(l,u)&&(u.src&&\"module\"!==(u.type||\"\").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute(\"nonce\")},l):C(u.textContent.replace(Se,\"\"),u,l))}return n}function Oe(e,t,n){for(var r,i=t?E.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||E.cleanData(ge(r)),r.parentNode&&(n&&ie(r)&&ve(ge(r,\"script\")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=ie(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=ge(c),r=0,i=(o=ge(e)).length;r<i;r++)s=o[r],u=a[r],void 0,\"input\"===(l=u.nodeName.toLowerCase())&&fe.test(s.type)?u.checked=s.checked:\"input\"!==l&&\"textarea\"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(c),r=0,i=o.length;r<i;r++)je(o[r],a[r]);else je(e,c);return 0<(a=ge(c,\"script\")).length&&ve(a,!f&&ge(e,\"script\")),c},cleanData:function(e){for(var t,n,r,i=E.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[G.expando]&&(n[G.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return $(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return qe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ke(this,e).appendChild(e)})},prepend:function(){return qe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ke(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!Ae.test(e)&&!he[(de.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return qe(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ge(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,a){E.fn[e]=function(e){for(var t,n=[],r=E(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),E(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var Pe=new RegExp(\"^(\"+ee+\")(?!px)[a-z%]+$\",\"i\"),He=/^--/,Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=g),t.getComputedStyle(e)},Re=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Be=new RegExp(ne.join(\"|\"),\"i\"),Me=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",We=new RegExp(\"^\"+Me+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+Me+\"+$\",\"g\");function Fe(e,t,n){var r,i,o,a,s=He.test(t),u=e.style;return(n=n||Ie(e))&&(a=n.getPropertyValue(t)||n[t],s&&(a=a.replace(We,\"$1\")),\"\"!==a||ie(e)||(a=E.style(e,t)),!m.pixelBoxStyles()&&Pe.test(a)&&Be.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+\"\":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",re.appendChild(u).appendChild(l);var e=g.getComputedStyle(l);n=\"1%\"!==e.top,s=12===t(e.marginLeft),l.style.right=\"60%\",o=36===t(e.right),r=36===t(e.width),l.style.position=\"absolute\",i=12===t(l.offsetWidth/3),re.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=w.createElement(\"div\"),l=w.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",m.clearCloneStyle=\"content-box\"===l.style.backgroundClip,E.extend(m,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=w.createElement(\"table\"),t=w.createElement(\"tr\"),n=w.createElement(\"div\"),e.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",t.style.cssText=\"border:1px solid\",t.style.height=\"1px\",n.style.height=\"9px\",n.style.display=\"block\",re.appendChild(e).appendChild(t).appendChild(n),r=g.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,re.removeChild(e)),a}}))}();var ze=[\"Webkit\",\"Moz\",\"ms\"],_e=w.createElement(\"div\").style,Ue={};function Ve(e){var t=E.cssProps[e]||Ue[e];return t||(e in _e?e:Ue[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=ze.length;while(n--)if((e=ze[n]+t)in _e)return e}(e)||e)}var Xe,Qe,Ye=/^(none|table(?!-c[ea]).+)/,Ge={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Ke={letterSpacing:\"0\",fontWeight:\"400\"};function Je(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||\"px\"):t}function Ze(e,t,n,r,i,o){var a=\"width\"===t?1:0,s=0,u=0;if(n===(r?\"border\":\"content\"))return 0;for(;a<4;a+=2)\"margin\"===n&&(u+=E.css(e,n+ne[a],!0,i)),r?(\"content\"===n&&(u-=E.css(e,\"padding\"+ne[a],!0,i)),\"margin\"!==n&&(u-=E.css(e,\"border\"+ne[a]+\"Width\",!0,i))):(u+=E.css(e,\"padding\"+ne[a],!0,i),\"padding\"!==n?u+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i):s+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function et(e,t,n){var r=Ie(e),i=(!m.boxSizingReliable()||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,r),o=i,a=Fe(e,t,r),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if(Pe.test(a)){if(!n)return a;a=\"auto\"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&S(e,\"tr\")||\"auto\"===a||!parseFloat(a)&&\"inline\"===E.css(e,\"display\",!1,r))&&e.getClientRects().length&&(i=\"border-box\"===E.css(e,\"boxSizing\",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+Ze(e,t,n||(i?\"border\":\"content\"),o,r,a)+\"px\"}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=He.test(t),l=e.style;if(u||(t=Ve(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&\"get\"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];\"string\"===(o=typeof n)&&(i=te.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return E.css(e,t,\"\")},u=s(),l=n&&n[3]||(E.cssNumber[t]?\"\":\"px\"),c=e.nodeType&&(E.cssNumber[t]||\"px\"!==l&&+u)&&te.exec(E.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)E.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,E.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}(e,t,i),o=\"number\"),null!=n&&n==n&&(\"number\"!==o||u||(n+=i&&i[3]||(E.cssNumber[s]?\"\":\"px\")),m.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(l[t]=\"inherit\"),a&&\"set\"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return He.test(t)||(t=Ve(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&\"get\"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),\"normal\"===i&&t in Ke&&(i=Ke[t]),\"\"===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),E.each([\"height\",\"width\"],function(e,u){E.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(E.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,u,n):Re(e,Ge,function(){return et(e,u,n)})},set:function(e,t,n){var r,i=Ie(e),o=!m.scrollboxSize()&&\"absolute\"===i.position,a=(o||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,i),s=n?Ze(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e[\"offset\"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-Ze(e,u,\"border\",!1,i)-.5)),s&&(r=te.exec(t))&&\"px\"!==(r[3]||\"px\")&&(e.style[u]=t,t=E.css(e,u)),Je(0,t,s)}}}),E.cssHooks.marginLeft=$e(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,\"marginLeft\"))||e.getBoundingClientRect().left-Re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+\"px\"}),E.each({margin:\"\",padding:\"\",border:\"Width\"},function(i,o){E.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r=\"string\"==typeof e?e.split(\" \"):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},\"margin\"!==i&&(E.cssHooks[i+o].set=Je)}),E.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ie(e),i=t.length;a<i;a++)o[t[a]]=E.css(e,t[a],!1,r);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),E.fn.delay=function(r,e){return r=E.fx&&E.fx.speeds[r]||r,e=e||\"fx\",this.queue(e,function(e,t){var n=g.setTimeout(e,r);t.stop=function(){g.clearTimeout(n)}})},Xe=w.createElement(\"input\"),Qe=w.createElement(\"select\").appendChild(w.createElement(\"option\")),Xe.type=\"checkbox\",m.checkOn=\"\"!==Xe.value,m.optSelected=Qe.selected,(Xe=w.createElement(\"input\")).value=\"t\",Xe.type=\"radio\",m.radioValue=\"t\"===Xe.value;var tt,nt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return $(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return\"undefined\"==typeof e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(i=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?tt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+\"\"),n):i&&\"get\"in i&&null!==(r=i.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&\"radio\"===t&&S(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),tt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\\w+/g),function(e,t){var a=nt[t]||E.find.attr;nt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=nt[o],nt[o]=r,r=null!=a(e,t,n)?o:null,nt[o]=i),r}});var rt=/^(?:input|select|textarea|button)$/i,it=/^(?:a|area)$/i;function ot(e){return(e.match(H)||[]).join(\" \")}function at(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function st(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(H)||[]}E.fn.extend({prop:function(e,t){return $(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,i=E.propHooks[t]),void 0!==n?i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,\"tabindex\");return t?parseInt(t,10):rt.test(e.nodeName)||it.test(e.nodeName)&&e.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),m.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).addClass(t.call(this,e,at(this)))}):(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++)i=e[o],n.indexOf(\" \"+i+\" \")<0&&(n+=i+\" \");a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).removeClass(t.call(this,e,at(this)))}):arguments.length?(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(\" \"+i+\" \"))n=n.replace(\" \"+i+\" \",\" \")}a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this:this.attr(\"class\",\"\")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s=\"string\"===a||Array.isArray(t);return b(t)?this.each(function(e){E(this).toggleClass(t.call(this,e,at(this),n),n)}):\"boolean\"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=st(t),this.each(function(){if(s)for(o=E(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&\"boolean\"!==a||((r=at(this))&&Y.set(this,\"__className__\",r),this.setAttribute&&this.setAttribute(\"class\",r||!1===t?\"\":Y.get(this,\"__className__\")||\"\"))}))},hasClass:function(e){var t,n,r=0;t=\" \"+e+\" \";while(n=this[r++])if(1===n.nodeType&&-1<(\" \"+ot(at(n))+\" \").indexOf(t))return!0;return!1}});var ut=/\\r/g;E.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,E(this).val()):n)?t=\"\":\"number\"==typeof t?t+=\"\":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?\"\":e+\"\"})),(r=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&\"set\"in r&&void 0!==r.set(this,t,\"value\")||(this.value=t))})):t?(r=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&\"get\"in r&&void 0!==(e=r.get(t,\"value\"))?e:\"string\"==typeof(e=t.value)?e.replace(ut,\"\"):null==e?\"\":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,\"value\");return null!=t?t:ot(E.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a=\"select-one\"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,\"optgroup\"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=E.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<E.inArray(E.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each([\"radio\",\"checkbox\"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},m.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})}),m.focusin=\"onfocusin\"in g;var lt=/^(?:focusinfocus|focusoutblur)$/,ct=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,d=[n||w],p=y.call(e,\"type\")?e.type:e,h=y.call(e,\"namespace\")?e.namespace.split(\".\"):[];if(o=f=a=n=n||w,3!==n.nodeType&&8!==n.nodeType&&!lt.test(p+E.event.triggered)&&(-1<p.indexOf(\".\")&&(p=(h=p.split(\".\")).shift(),h.sort()),u=p.indexOf(\":\")<0&&\"on\"+p,(e=e[E.expando]?e:new E.Event(p,\"object\"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join(\".\"),e.rnamespace=e.namespace?new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||p,lt.test(s+p)||(o=o.parentNode);o;o=o.parentNode)d.push(o),a=o;a===(n.ownerDocument||w)&&d.push(a.defaultView||a.parentWindow||g)}i=0;while((o=d[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||p,(l=(Y.get(o,\"events\")||Object.create(null))[e.type]&&Y.get(o,\"handle\"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&X(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!X(n)||u&&b(n[p])&&!x(n)&&((a=n[u])&&(n[u]=null),E.event.triggered=p,e.isPropagationStopped()&&f.addEventListener(p,ct),n[p](),e.isPropagationStopped()&&f.removeEventListener(p,ct),E.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),m.focusin||E.each({focus:\"focusin\",blur:\"focusout\"},function(n,r){var i=function(e){E.event.simulate(r,e.target,E.event.fix(e))};E.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}}),E.parseXML=function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{t=(new g.DOMParser).parseFromString(e,\"text/xml\")}catch(e){}return n=t&&t.getElementsByTagName(\"parsererror\")[0],t&&!n||E.error(\"Invalid XML: \"+(n?E.map(n.childNodes,function(e){return e.textContent}).join(\"\\n\"):e)),t};var ft,dt=/\\[\\]$/,pt=/\\r?\\n/g,ht=/^(?:submit|button|image|reset|file)$/i,gt=/^(?:input|select|textarea|keygen)/i;function vt(n,e,r,i){var t;if(Array.isArray(e))E.each(e,function(e,t){r||dt.test(n)?i(n,t):vt(n+\"[\"+(\"object\"==typeof t&&null!=t?e:\"\")+\"]\",t,r,i)});else if(r||\"object\"!==T(e))i(n,e);else for(t in e)vt(n+\"[\"+t+\"]\",e[t],r,i)}E.param=function(e,t){var n,r=[],i=function(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)vt(n,e[n],t,i);return r.join(\"&\")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,\"elements\");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(\":disabled\")&&gt.test(this.nodeName)&&!ht.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(pt,\"\\r\\n\")}}):{name:t.name,value:n.replace(pt,\"\\r\\n\")}}).get()}}),E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not(\"body\").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},m.createHTMLDocument=((ft=w.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===ft.childNodes.length),E.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=w.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=w.location.href,t.head.appendChild(r)):t=w),o=!n&&[],(i=k.exec(e))?[t.createElement(i[1])]:(i=me([e],t,o),o&&o.length&&E(o).remove(),E.merge([],i.childNodes)));var r,i,o},E.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=E.css(e,\"position\"),c=E(e),f={};\"static\"===l&&(e.style.position=\"relative\"),s=c.offset(),o=E.css(e,\"top\"),u=E.css(e,\"left\"),(\"absolute\"===l||\"fixed\"===l)&&-1<(o+u).indexOf(\"auto\")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),\"using\"in t?t.using.call(e,f):c.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if(\"fixed\"===E.css(r,\"position\"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&\"static\"===E.css(e,\"position\"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=E(e).offset()).top+=E.css(e,\"borderTopWidth\",!0),i.left+=E.css(e,\"borderLeftWidth\",!0))}return{top:t.top-i.top-E.css(r,\"marginTop\",!0),left:t.left-i.left-E.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&\"static\"===E.css(e,\"position\"))e=e.offsetParent;return e||re})}}),E.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,i){var o=\"pageYOffset\"===i;E.fn[t]=function(e){return $(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),E.each([\"top\",\"left\"],function(e,n){E.cssHooks[n]=$e(m.pixelPosition,function(e,t){if(t)return t=Fe(e,n),Pe.test(t)?E(e).position()[n]+\"px\":t})}),E.each({Height:\"height\",Width:\"width\"},function(a,s){E.each({padding:\"inner\"+a,content:s,\"\":\"outer\"+a},function(r,o){E.fn[o]=function(e,t){var n=arguments.length&&(r||\"boolean\"!=typeof e),i=r||(!0===e||!0===t?\"margin\":\"border\");return $(this,function(e,t,n){var r;return x(e)?0===o.indexOf(\"outer\")?e[\"inner\"+a]:e.document.documentElement[\"client\"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body[\"scroll\"+a],r[\"scroll\"+a],e.body[\"offset\"+a],r[\"offset\"+a],r[\"client\"+a])):void 0===n?E.css(e,t,i):E.style(e,t,n,i)},s,n?e:void 0,n)}})}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var yt=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;E.proxy=function(e,t){var n,r,i;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||E.guid++,i},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=S,E.isFunction=b,E.isWindow=x,E.camelCase=V,E.type=T,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?\"\":(e+\"\").replace(yt,\"$1\")},\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return E});var mt=g.jQuery,bt=g.$;return E.noConflict=function(e){return g.$===E&&(g.$=bt),e&&g.jQuery===E&&(g.jQuery=mt),E},\"undefined\"==typeof e&&(g.jQuery=g.$=E),E});\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff output\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substring(2, 12);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substring(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substring(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n    attributes: parts.slice(2).join(' '),\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri +\n      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +\n      '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substring(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substring(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substring(7, sp), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substring(sp + 1, colon);\n    parts.value = line.substring(colon + 1);\n  } else {\n    parts.attribute = line.substring(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substring(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substring(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substring(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substring(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substring(12),\n    password: pwd.substring(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  description.profile = mline[2];\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')\n    .map(SDPUtils.parseRtcpFb);\n  description.codecs.forEach(codec => {\n    wildcardRtcpFb.forEach(fb=> {\n      const duplicate = codec.rtcpFeedback.find(existingFeedback => {\n        return existingFeedback.type === fb.type &&\n          existingFeedback.parameter === fb.parameter;\n      });\n      if (!duplicate) {\n        codec.rtcpFeedback.push(fb);\n      }\n    });\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substring(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substring(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substring(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substring(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substring(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 22);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substring(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substring(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substring(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substring(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n            typeof define === 'function' && define.amd ? define(['exports'], factory) :\n            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.strophe = {}));\n})(this, (function (exports) { 'use strict';\n\n            var global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {};\n\n            /*\n             * This module provides uniform\n             * Shims APIs and globals that are not present in all JS environments,\n             * the most common example for Strophe being browser APIs like WebSocket\n             * and DOM that don't exist under nodejs.\n             *\n             * Usually these will be supplied in nodejs by conditionally requiring a\n             * NPM module that provides a compatible implementation.\n             */\n\n            /* global global */\n\n            /**\n             * WHATWG WebSockets API\n             * https://www.w3.org/TR/websockets/\n             *\n             * Interface to use the web socket protocol\n             *\n             * Used implementations:\n             * - supported browsers: built-in in WebSocket global\n             *   https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#Browser_compatibility\n             * - nodejs: use standard-compliant 'ws' module\n             *   https://www.npmjs.com/package/ws\n             */\n            function getWebSocketImplementation() {\n              let WebSocketImplementation = global$1.WebSocket;\n\n              if (typeof WebSocketImplementation === 'undefined') {\n                try {\n                  WebSocketImplementation = require('ws');\n                } catch (err) {\n                  throw new Error('You must install the \"ws\" package to use Strophe in nodejs.');\n                }\n              }\n\n              return WebSocketImplementation;\n            }\n\n            const WebSocket = getWebSocketImplementation();\n            /**\n             * DOMParser\n             * https://w3c.github.io/DOM-Parsing/#the-domparser-interface\n             *\n             * Interface to parse XML strings into Document objects\n             *\n             * Used implementations:\n             * - supported browsers: built-in in DOMParser global\n             *   https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility\n             * - nodejs: use '@xmldom/xmldom' module\n             *   https://www.npmjs.com/package/@xmldom/xmldom\n             */\n\n            function getDOMParserImplementation() {\n              let DOMParserImplementation = global$1.DOMParser;\n\n              if (typeof DOMParserImplementation === 'undefined') {\n                try {\n                  DOMParserImplementation = require('@xmldom/xmldom').DOMParser;\n                } catch (err) {\n                  throw new Error('You must install the \"@xmldom/xmldom\" package to use Strophe in nodejs.');\n                }\n              }\n\n              return DOMParserImplementation;\n            }\n\n            const DOMParser = getDOMParserImplementation();\n            /**\n             *  Gets IE xml doc object. Used by getDummyXMLDocument shim.\n             *\n             *  Returns:\n             *    A Microsoft XML DOM Object\n             *  See Also:\n             *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n             */\n\n            function _getIEXmlDom() {\n              const docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n              for (let d = 0; d < docStrings.length; d++) {\n                try {\n                  // eslint-disable-next-line no-undef\n                  const doc = new ActiveXObject(docStrings[d]);\n                  return doc;\n                } catch (e) {// Try next one\n                }\n              }\n            }\n            /**\n             * Creates a dummy XML DOM document to serve as an element and text node generator.\n             *\n             * Used implementations:\n             *  - IE < 10: avoid using createDocument() due to a memory leak, use ie-specific\n             *    workaround\n             *  - other supported browsers: use document's createDocument\n             *  - nodejs: use '@xmldom/xmldom'\n             */\n\n\n            function getDummyXMLDOMDocument() {\n              // nodejs\n              if (typeof document === 'undefined') {\n                try {\n                  const DOMImplementation = require('@xmldom/xmldom').DOMImplementation;\n\n                  return new DOMImplementation().createDocument('jabber:client', 'strophe', null);\n                } catch (err) {\n                  throw new Error('You must install the \"@xmldom/xmldom\" package to use Strophe in nodejs.');\n                }\n              } // IE < 10\n\n\n              if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                const doc = _getIEXmlDom();\n\n                doc.appendChild(doc.createElement('strophe'));\n                return doc;\n              } // All other supported browsers\n\n\n              return document.implementation.createDocument('jabber:client', 'strophe', null);\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            const safe_add$1 = function (x, y) {\n              const lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            const bit_rol = function (num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            const str2binl = function (str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              const bin = [];\n\n              for (let i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            const binl2str = function (bin) {\n              let str = \"\";\n\n              for (let i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            const binl2hex = function (binarray) {\n              const hex_tab = \"0123456789abcdef\";\n              let str = \"\";\n\n              for (let i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            const md5_cmn = function (q, a, b, x, s, t) {\n              return safe_add$1(bit_rol(safe_add$1(safe_add$1(a, q), safe_add$1(x, t)), s), b);\n            };\n\n            const md5_ff = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            const md5_gg = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            const md5_hh = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            const md5_ii = function (a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            const core_md5 = function (x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              let a = 1732584193;\n              let b = -271733879;\n              let c = -1732584194;\n              let d = 271733878;\n              let olda, oldb, oldc, oldd;\n\n              for (let i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            const MD5 = {\n              hexdigest: function (s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function (s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /** Class: Strophe.SASLMechanism\n             *\n             *  Encapsulates an SASL authentication mechanism.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      SCRAM-SHA-1 - 60\n             *      PLAIN       - 50\n             *      OAUTHBEARER - 40\n             *      X-OAUTH2    - 30\n             *      ANONYMOUS   - 20\n             *      EXTERNAL    - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n            class SASLMechanism {\n              /**\n               * PrivateConstructor: Strophe.SASLMechanism\n               * SASL auth mechanism abstraction.\n               *\n               *  Parameters:\n               *    (String) name - SASL Mechanism name.\n               *    (Boolean) isClientFirst - If client should send response first without challenge.\n               *    (Number) priority - Priority.\n               *\n               *  Returns:\n               *    A new Strophe.SASLMechanism object.\n               */\n              constructor(name, isClientFirst, priority) {\n                /** PrivateVariable: mechname\n                 *  Mechanism name.\n                 */\n                this.mechname = name;\n                /** PrivateVariable: isClientFirst\n                 *  If client sends response without initial server challenge.\n                 */\n\n                this.isClientFirst = isClientFirst;\n                /** Variable: priority\n                 *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n                 *  Users may override this to prioritize mechanisms differently.\n                 *\n                 *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n                 *\n                 *  > Strophe.SASLPlain.priority = Strophe.SASLSHA1.priority;\n                 *\n                 *  See <SASL mechanisms> for a list of available mechanisms.\n                 *\n                 */\n\n                this.priority = priority;\n              }\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n\n\n              test() {\n                // eslint-disable-line class-methods-use-this\n                return true;\n              }\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n\n\n              onStart(connection) {\n                this._connection = connection;\n              }\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge.\n               *\n               *  By deafult, if the client is expected to send data first (isClientFirst === true),\n               *  this method is called with `challenge` as null on the first call,\n               *  unless `clientChallenge` is overridden in the relevant subclass.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n\n\n              onChallenge(connection, challenge) {\n                // eslint-disable-line\n                throw new Error(\"You should implement challenge handling!\");\n              }\n              /** PrivateFunction: clientChallenge\n               *  Called by the protocol implementation if the client is expected to send\n               *  data first in the authentication exchange (i.e. isClientFirst === true).\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n\n\n              clientChallenge(connection) {\n                if (!this.isClientFirst) {\n                  throw new Error(\"clientChallenge should not be called if isClientFirst is false!\");\n                }\n\n                return this.onChallenge(connection);\n              }\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n\n\n              onFailure() {\n                this._connection = null;\n              }\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n\n\n              onSuccess() {\n                this._connection = null;\n              }\n\n            }\n\n            class SASLAnonymous extends SASLMechanism {\n              /** PrivateConstructor: SASLAnonymous\n               *  SASL ANONYMOUS authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ANONYMOUS';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid === null;\n              }\n\n            }\n\n            class SASLExternal extends SASLMechanism {\n              /** PrivateConstructor: SASLExternal\n               *  SASL EXTERNAL authentication.\n               *\n               *  The EXTERNAL mechanism allows a client to request the server to use\n               *  credentials established by means external to the mechanism to\n               *  authenticate the client. The external means may be, for instance,\n               *  TLS services.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'EXTERNAL';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n                super(mechname, isClientFirst, priority);\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n\n                /** According to XEP-178, an authzid SHOULD NOT be presented when the\n                 * authcid contained or implied in the client certificate is the JID (i.e.\n                 * authzid) with which the user wants to log in as.\n                 *\n                 * To NOT send the authzid, the user should therefore set the authcid equal\n                 * to the JID when instantiating a new Strophe.Connection object.\n                 */\n                return connection.authcid === connection.authzid ? '' : connection.authzid;\n              }\n\n            }\n\n            const utils = {\n              utf16to8: function (str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function (cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (const cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    let expires = '';\n                    let domain = '';\n                    let path = '';\n                    const cookieObj = cookies[cookieName];\n                    const isObj = typeof cookieObj === \"object\";\n                    const cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            class SASLOAuthBearer extends SASLMechanism {\n              /** PrivateConstructor: SASLOAuthBearer\n               *  SASL OAuth Bearer authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'OAUTHBEARER';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 40;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.pass !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                let auth_str = 'n,';\n\n                if (connection.authcid !== null) {\n                  auth_str = auth_str + 'a=' + connection.authzid;\n                }\n\n                auth_str = auth_str + ',';\n                auth_str = auth_str + \"\\u0001\";\n                auth_str = auth_str + 'auth=Bearer ';\n                auth_str = auth_str + connection.pass;\n                auth_str = auth_str + \"\\u0001\";\n                auth_str = auth_str + \"\\u0001\";\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            class SASLPlain extends SASLMechanism {\n              /** PrivateConstructor: SASLPlain\n               *  SASL PLAIN authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'PLAIN';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                const {\n                  authcid,\n                  authzid,\n                  domain,\n                  pass\n                } = connection;\n\n                if (!domain) {\n                  throw new Error(\"SASLPlain onChallenge: domain is not defined!\");\n                } // Only include authzid if it differs from authcid.\n                // See: https://tools.ietf.org/html/rfc6120#section-6.3.8\n\n\n                let auth_str = authzid !== `${authcid}@${domain}` ? authzid : '';\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + authcid;\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + pass;\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n                e = safe_add(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            const SHA1 = {\n              b64_hmac_sha1: function (key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function (s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function (key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function (s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            class SASLSHA1 extends SASLMechanism {\n              /** PrivateConstructor: SASLSHA1\n               *  SASL SCRAM SHA 1 authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'SCRAM-SHA-1';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid !== null;\n              }\n\n              onChallenge(connection, challenge) {\n                // eslint-disable-line class-methods-use-this\n                let nonce, salt, iter, Hi, U, U_old, i, k;\n                let responseText = \"c=biws,\";\n                let authMessage = `${connection._sasl_data[\"client-first-message-bare\"]},${challenge},`;\n                const cnonce = connection._sasl_data.cnonce;\n                const attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  const matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.slice(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                const pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                const clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                const serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                const clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              }\n\n              clientChallenge(connection, test_cnonce) {\n                // eslint-disable-line class-methods-use-this\n                const cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n                let auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n                auth_str += \",r=\";\n                auth_str += cnonce;\n                connection._sasl_data.cnonce = cnonce;\n                connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n                auth_str = \"n,,\" + auth_str;\n                return auth_str;\n              }\n\n            }\n\n            class SASLXOAuth2 extends SASLMechanism {\n              /** PrivateConstructor: SASLXOAuth2\n               *  SASL X-OAuth2 authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'X-OAUTH2';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.pass !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                let auth_str = '\\u0000';\n\n                if (connection.authcid !== null) {\n                  auth_str = auth_str + connection.authzid;\n                }\n\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + connection.pass;\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            /**\n             * Implementation of atob() according to the HTML and Infra specs, except that\n             * instead of throwing INVALID_CHARACTER_ERR we return null.\n             */\n\n            function atob$2(data) {\n              if (arguments.length === 0) {\n                throw new TypeError(\"1 argument required, but only 0 present.\");\n              } // Web IDL requires DOMStrings to just be converted using ECMAScript\n              // ToString, which in our case amounts to using a template literal.\n\n\n              data = `${data}`; // \"Remove all ASCII whitespace from data.\"\n\n              data = data.replace(/[ \\t\\n\\f\\r]/g, \"\"); // \"If data's length divides by 4 leaving no remainder, then: if data ends\n              // with one or two U+003D (=) code points, then remove them from data.\"\n\n              if (data.length % 4 === 0) {\n                data = data.replace(/==?$/, \"\");\n              } // \"If data's length divides by 4 leaving a remainder of 1, then return\n              // failure.\"\n              //\n              // \"If data contains a code point that is not one of\n              //\n              // U+002B (+)\n              // U+002F (/)\n              // ASCII alphanumeric\n              //\n              // then return failure.\"\n\n\n              if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n                return null;\n              } // \"Let output be an empty byte sequence.\"\n\n\n              let output = \"\"; // \"Let buffer be an empty buffer that can have bits appended to it.\"\n              //\n              // We append bits via left-shift and or.  accumulatedBits is used to track\n              // when we've gotten to 24 bits.\n\n              let buffer = 0;\n              let accumulatedBits = 0; // \"Let position be a position variable for data, initially pointing at the\n              // start of data.\"\n              //\n              // \"While position does not point past the end of data:\"\n\n              for (let i = 0; i < data.length; i++) {\n                // \"Find the code point pointed to by position in the second column of\n                // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n                // the first cell of the same row.\n                //\n                // \"Append to buffer the six bits corresponding to n, most significant bit\n                // first.\"\n                //\n                // atobLookup() implements the table from RFC 4648.\n                buffer <<= 6;\n                buffer |= atobLookup(data[i]);\n                accumulatedBits += 6; // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n                // big-endian numbers. Append three bytes with values equal to those\n                // numbers to output, in the same order, and then empty buffer.\"\n\n                if (accumulatedBits === 24) {\n                  output += String.fromCharCode((buffer & 0xff0000) >> 16);\n                  output += String.fromCharCode((buffer & 0xff00) >> 8);\n                  output += String.fromCharCode(buffer & 0xff);\n                  buffer = accumulatedBits = 0;\n                } // \"Advance position by 1.\"\n\n              } // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n              // 12 bits, then discard the last four and interpret the remaining eight as\n              // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n              // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n              // the one or two bytes with values equal to those one or two numbers to\n              // output, in the same order.\"\n\n\n              if (accumulatedBits === 12) {\n                buffer >>= 4;\n                output += String.fromCharCode(buffer);\n              } else if (accumulatedBits === 18) {\n                buffer >>= 2;\n                output += String.fromCharCode((buffer & 0xff00) >> 8);\n                output += String.fromCharCode(buffer & 0xff);\n              } // \"Return output.\"\n\n\n              return output;\n            }\n            /**\n             * A lookup table for atob(), which converts an ASCII character to the\n             * corresponding six-bit number.\n             */\n\n\n            const keystr$1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n            function atobLookup(chr) {\n              const index = keystr$1.indexOf(chr); // Throw exception if character is not in the lookup string; should not be hit in tests\n\n              return index < 0 ? undefined : index;\n            }\n\n            var atob_1 = atob$2;\n\n            /**\n             * btoa() as defined by the HTML and Infra specs, which mostly just references\n             * RFC 4648.\n             */\n\n            function btoa$2(s) {\n              if (arguments.length === 0) {\n                throw new TypeError(\"1 argument required, but only 0 present.\");\n              }\n\n              let i; // String conversion as required by Web IDL.\n\n              s = `${s}`; // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n              // data contains any character whose code point is greater than U+00FF.\"\n\n              for (i = 0; i < s.length; i++) {\n                if (s.charCodeAt(i) > 255) {\n                  return null;\n                }\n              }\n\n              let out = \"\";\n\n              for (i = 0; i < s.length; i += 3) {\n                const groupsOfSix = [undefined, undefined, undefined, undefined];\n                groupsOfSix[0] = s.charCodeAt(i) >> 2;\n                groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n\n                if (s.length > i + 1) {\n                  groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n                  groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n                }\n\n                if (s.length > i + 2) {\n                  groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n                  groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n                }\n\n                for (let j = 0; j < groupsOfSix.length; j++) {\n                  if (typeof groupsOfSix[j] === \"undefined\") {\n                    out += \"=\";\n                  } else {\n                    out += btoaLookup(groupsOfSix[j]);\n                  }\n                }\n              }\n\n              return out;\n            }\n            /**\n             * Lookup table for btoa(), which converts a six-bit number into the\n             * corresponding ASCII character.\n             */\n\n\n            const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n            function btoaLookup(index) {\n              if (index >= 0 && index < 64) {\n                return keystr[index];\n              } // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n\n\n              return undefined;\n            }\n\n            var btoa_1 = btoa$2;\n\n            const atob$1 = atob_1;\n\n            const btoa$1 = btoa_1;\n\n            var abab = {\n              atob: atob$1,\n              btoa: btoa$1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2018, OGG, LLC\n            */\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n            const Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"1.5.0\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag(tag) {\n                  for (let i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n\n                validCSS(style) {\n                  for (let i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11,\n                ATTACHFAIL: 12\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild(elem, elemName, func) {\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  const childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = getDummyXMLDOMDocument();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                const node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (let a = 1; a < arguments.length; a++) {\n                  const arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (typeof arg === \"object\" && typeof arg.sort === \"function\") {\n                    for (let i = 0; i < arg.length; i++) {\n                      const attr = arg[i];\n\n                      if (typeof attr === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (typeof arg === \"object\") {\n                    for (const k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode(html) {\n                let node; //ensure text is escaped\n\n                if (DOMParser) {\n                  const parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                let str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement(elem) {\n                let el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (let i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml(elem) {\n                let el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  const tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        const attribute = Strophe.XHTML.attributes[tag][i];\n                        let value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && typeof value === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          const css = [];\n                          const cssAttrs = value.split(';');\n\n                          for (let j = 0; j < cssAttrs.length; j++) {\n                            const attr = cssAttrs[j].split(':');\n                            const cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              const cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (let i = 0; i < elem.childNodes.length; i++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (let i = 0; i < elem.childNodes.length; i++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid(jid) {\n                const bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  const parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                const s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log(level, msg) {\n                if (level === this.LogLevel.FATAL) {\n                  var _console;\n\n                  (_console = console) === null || _console === void 0 ? void 0 : _console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                const names = [...Array(elem.attributes.length).keys()].map(i => elem.attributes[i].nodeName);\n                names.sort();\n                let result = names.reduce((a, n) => `${a} ${n}=\"${Strophe.xmlescape(elem.attributes.getNamedItem(n).value)}\"`, `<${elem.nodeName}`);\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    const child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = class Builder {\n              constructor(name, attrs) {\n                // Set correct namespace for jabber:client elements\n                if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                  if (attrs && !attrs.xmlns) {\n                    attrs.xmlns = Strophe.NS.CLIENT;\n                  } else if (!attrs) {\n                    attrs = {\n                      xmlns: Strophe.NS.CLIENT\n                    };\n                  }\n                } // Holds the tree being built.\n\n\n                this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n                this.node = this.nodeTree;\n              }\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n\n\n              tree() {\n                return this.nodeTree;\n              }\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n\n\n              toString() {\n                return Strophe.serialize(this.nodeTree);\n              }\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n\n\n              up() {\n                this.node = this.node.parentNode;\n                return this;\n              }\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n\n\n              root() {\n                this.node = this.nodeTree;\n                return this;\n              }\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              attrs(moreattrs) {\n                for (const k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              }\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              c(name, attrs, text) {\n                const child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              }\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              cnode(elem) {\n                let impNode;\n                const xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                const newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              }\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              t(text) {\n                const child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              }\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              h(html) {\n                const fragment = Strophe.xmlGenerator().createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                const xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace(elem) {\n                let elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch(elem) {\n                let nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, elem => {\n                    if (this.getNamespace(elem) === this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch(elem) {\n                let from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                const elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run(elem) {\n                let result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            Strophe.TimedHandler = class TimedHandler {\n              /** PrivateConstructor: Strophe.TimedHandler\n               *  Create and initialize a new Strophe.TimedHandler object.\n               *\n               *  Parameters:\n               *    (Integer) period - The number of milliseconds to wait before the\n               *      handler is called.\n               *    (Function) handler - The callback to run when the handler fires.  This\n               *      function should take no arguments.\n               *\n               *  Returns:\n               *    A new Strophe.TimedHandler object.\n               */\n              constructor(period, handler) {\n                this.period = period;\n                this.handler = handler;\n                this.lastCalled = new Date().getTime();\n                this.user = true;\n              }\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n\n\n              run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              }\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n\n\n              reset() {\n                this.lastCalled = new Date().getTime();\n              }\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n\n\n              toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL SCRAM-SHA-1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA-1 - 60\n             *      PLAIN       - 50\n             *      OAUTHBEARER - 40\n             *      X-OAUTH2    - 30\n             *      ANONYMOUS   - 20\n             *      EXTERNAL    - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  protocol:\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  worker:\n             *\n             *  Set this option to URL from where the shared worker script should be loaded.\n             *\n             *  To run the websocket connection inside a shared worker.\n             *  This allows you to share a single websocket-based connection between\n             *  multiple Strophe.Connection instances, for example one per browser tab.\n             *\n             *  The script to use is the one in `src/shared-connection-worker.js`.\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = class Connection {\n              constructor(service, options) {\n                // The service URL\n                this.service = service; // Configuration options\n\n                this.options = options || {};\n                this.setProtocol();\n                /* The connected JID. */\n\n                this.jid = \"\";\n                /* the JIDs domain */\n\n                this.domain = null;\n                /* stream:features */\n\n                this.features = null; // SASL\n\n                this._sasl_data = {};\n                this.do_bind = false;\n                this.do_session = false;\n                this.mechanisms = {}; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.protocolErrorHandlers = {\n                  'HTTP': {},\n                  'websocket': {}\n                };\n                this._idleTimeout = null;\n                this._disconnectTimeout = null;\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.do_authentication = true;\n                this.paused = false;\n                this.restored = false;\n                this._data = [];\n                this._uniqueId = 0;\n                this._sasl_success_handler = null;\n                this._sasl_failure_handler = null;\n                this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n                this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n                this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n                utils.addCookies(this.options.cookies);\n                this.registerSASLMechanisms(this.options.mechanisms); // A client must always respond to incoming IQ \"set\" and \"get\" stanzas.\n                // See https://datatracker.ietf.org/doc/html/rfc6120#section-8.2.3\n                //\n                // This is a fallback handler which gets called when no other handler\n                // was called for a received IQ \"set\" or \"get\".\n\n                this.iqFallbackHandler = new Strophe.Handler(iq => this.send($iq({\n                  type: 'error',\n                  id: iq.getAttribute('id')\n                }).c('error', {\n                  'type': 'cancel'\n                }).c('service-unavailable', {\n                  'xmlns': Strophe.NS.STANZAS\n                })), null, 'iq', ['get', 'set']); // initialize plugins\n\n                for (const k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    const F = function () {};\n\n                    F.prototype = Strophe._connectionPlugins[k];\n                    this[k] = new F();\n                    this[k].init(this);\n                  }\n                }\n              }\n              /** Function: setProtocol\n               *  Select protocal based on this.options or this.service\n               */\n\n\n              setProtocol() {\n                const proto = this.options.protocol || \"\";\n\n                if (this.options.worker) {\n                  this._proto = new Strophe.WorkerWebsocket(this);\n                } else if (this.service.indexOf(\"ws:\") === 0 || this.service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                  this._proto = new Strophe.Websocket(this);\n                } else {\n                  this._proto = new Strophe.Bosh(this);\n                }\n              }\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n\n\n              reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              }\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n\n\n              pause() {\n                this.paused = true;\n              }\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n\n\n              resume() {\n                this.paused = false;\n              }\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n\n\n              getUniqueId(suffix) {\n                // eslint-disable-line class-methods-use-this\n                const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  const r = Math.random() * 16 | 0,\n                        v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              }\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n\n\n              addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              }\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should NOT be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               *     (Integer) disconnection_timeout - The optional disconnection timeout\n               *      in milliseconds before _doDisconnect will be called.\n               */\n\n\n              connect(jid, pass, callback, wait, hold, route, authcid) {\n                let disconnection_timeout = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 3000;\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false;\n                this.disconnection_timeout = disconnection_timeout; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              }\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto._attach) {\n                  return this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error('The \"attach\" method is not available for your connection protocol');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              }\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              }\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n\n\n              _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              }\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n\n\n              xmlInput(elem) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n\n\n              xmlOutput(elem) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n\n\n              rawInput(data) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n\n\n              rawOutput(data) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n\n\n              nextValidRid(rid) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n\n\n              send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (let i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              }\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n\n\n              flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              }\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n\n\n              sendPresence(elem, callback, errback, timeout) {\n                let timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                let id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  const handler = this.addHandler(stanza => {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      this.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, () => {\n                      // get rid of normal handler\n                      this.deleteHandler(handler); // call errback on timeout with null stanza\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              }\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n\n\n              sendIQ(elem, callback, errback, timeout) {\n                let timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                let id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  const handler = this.addHandler(stanza => {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      this.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    const iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      const error = new Error(`Got bad IQ type of ${iqtype}`);\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, () => {\n                      // get rid of normal handler\n                      this.deleteHandler(handler); // call errback on timeout with null stanza\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              }\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n\n\n              _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  const error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              }\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n              }\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n\n\n              addTimedHandler(period, handler) {\n                const thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              }\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n\n\n              deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              }\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n\n\n              addHandler(handler, ns, name, type, id, from, options) {\n                const hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              }\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n\n\n              deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                const i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              }\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n\n\n              registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(m => this.registerSASLMechanism(m));\n              }\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n\n\n              registerSASLMechanism(Mechanism) {\n                const mechanism = new Mechanism();\n                this.mechanisms[mechanism.mechname] = mechanism;\n              }\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n\n\n              disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                if (reason) {\n                  Strophe.warn(\"Disconnect was called because: \" + reason);\n                } else {\n                  Strophe.info(\"Disconnect was called\");\n                }\n\n                if (this.connected) {\n                  let pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(this.disconnection_timeout, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              }\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n\n\n              _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (const k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    const plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(`${k} plugin caused an exception changing status: ${err}`);\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(`User connection callback caused an exception: ${e}`);\n                  }\n                }\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n\n\n              _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              }\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n\n\n              _dataRecv(req, raw) {\n                const elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  const hand = this.removeHandlers.pop();\n                  const i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                const type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  let cond = elem.getAttribute(\"condition\");\n                  const conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, child => {\n                  const matches = [];\n                  this.handlers = this.handlers.reduce((handlers, handler) => {\n                    try {\n                      if (handler.isMatch(child) && (this.authenticated || !handler.user)) {\n                        if (handler.run(child)) {\n                          handlers.push(handler);\n                        }\n\n                        matches.push(handler);\n                      } else {\n                        handlers.push(handler);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n\n                    return handlers;\n                  }, []); // If no handler was fired for an incoming IQ with type=\"set\",\n                  // then we return an IQ error stanza with service-unavailable.\n\n                  if (!matches.length && this.iqFallbackHandler.isMatch(child)) {\n                    this.iqFallbackHandler.run(child);\n                  }\n                });\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n\n\n              _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                let bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                const conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                let hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                const matched = Array.from(bodyWrap.getElementsByTagName(\"mechanism\")).map(m => this.mechanisms[m.textContent]).filter(m => m);\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              }\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n\n\n              sortMechanismsByPriority(mechanisms) {\n                // eslint-disable-line class-methods-use-this\n                // Sorting mechanisms according to priority.\n                for (let i = 0; i < mechanisms.length - 1; ++i) {\n                  let higher = i;\n\n                  for (let j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].priority > mechanisms[higher].priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    const swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              }\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n\n\n              authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              }\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n\n\n              _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                let mechanism_found = false;\n\n                for (let i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = mechanisms[i];\n\n                  this._sasl_mechanism.onStart(this);\n\n                  const request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.mechname\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    const response = this._sasl_mechanism.clientChallenge(this);\n\n                    request_auth_exchange.t(abab.btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              }\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n\n\n              _sasl_challenge_cb(elem) {\n                const challenge = abab.atob(Strophe.getText(elem));\n\n                const response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                const stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(abab.btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              }\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n\n\n              _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              }\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onLegacyAuthIQResult(elem) {\n                // eslint-disable-line no-unused-vars\n                // build plaintext auth iq\n                const iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              }\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _sasl_success_cb(elem) {\n                if (this._sasl_data[\"server-signature\"]) {\n                  let serverSignature;\n                  const success = abab.atob(Strophe.getText(elem));\n                  const attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  const matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                const streamfeature_handlers = [];\n\n                const wrapper = (handlers, elem) => {\n                  while (handlers.length) {\n                    this.deleteHandler(handlers.pop());\n                  }\n\n                  this._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              }\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  const child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              }\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n\n\n              bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, `Strophe.Connection.prototype.bind called but \"do_bind\" is false`);\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                const resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              }\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  const conflict = elem.getElementsByTagName(\"conflict\");\n                  let condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                const bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  const jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.authenticated = true;\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              }\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n\n\n              _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(`Strophe.Connection.prototype._establishSession ` + `called but apparently ${Strophe.NS.SESSION} wasn't advertised by the server`);\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              }\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this.authenticated = false;\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              }\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              }\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              }\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n\n\n              _addSysTimedHandler(period, handler) {\n                const thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              }\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n\n\n              _addSysHandler(handler, ns, name, type, id) {\n                const hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n\n\n              _onIdle() {\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  const thand = this.removeTimeds.pop();\n                  const i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                const now = new Date().getTime();\n                const newList = [];\n\n                for (let i = 0; i < this.timedHandlers.length; i++) {\n                  const thand = this.timedHandlers[i];\n\n                  if (this.authenticated || !thand.user) {\n                    const since = thand.lastCalled + thand.period;\n\n                    if (since - now <= 0) {\n                      if (thand.run()) {\n                        newList.push(thand);\n                      }\n                    } else {\n                      newList.push(thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n                }\n              }\n\n            };\n            Strophe.SASLMechanism = SASLMechanism;\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous   - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain       - SASL PLAIN authentication.\n             *  Strophe.SASLSHA1        - SASL SCRAM-SHA-1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal    - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2     - SASL X-OAuth2 authentication\n             */\n\n            Strophe.SASLAnonymous = SASLAnonymous;\n            Strophe.SASLPlain = SASLPlain;\n            Strophe.SASLSHA1 = SASLSHA1;\n            Strophe.SASLOAuthBearer = SASLOAuthBearer;\n            Strophe.SASLExternal = SASLExternal;\n            Strophe.SASLXOAuth2 = SASLXOAuth2;\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            Strophe.Request = class Request {\n              /** PrivateConstructor: Strophe.Request\n               *  Create and initialize a new Strophe.Request object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data to be sent in the request.\n               *    (Function) func - The function that will be called when the\n               *      XMLHttpRequest readyState changes.\n               *    (Integer) rid - The BOSH rid attribute associated with this request.\n               *    (Integer) sends - The number of times this same request has been sent.\n               */\n              constructor(elem, func, rid, sends) {\n                this.id = ++Strophe._requestId;\n                this.xmlData = elem;\n                this.data = Strophe.serialize(elem); // save original function in case we need to make a new request\n                // from this one.\n\n                this.origFunc = func;\n                this.func = func;\n                this.rid = rid;\n                this.date = NaN;\n                this.sends = sends || 0;\n                this.abort = false;\n                this.dead = null;\n\n                this.age = function () {\n                  if (!this.date) {\n                    return 0;\n                  }\n\n                  const now = new Date();\n                  return (now - this.date) / 1000;\n                };\n\n                this.timeDead = function () {\n                  if (!this.dead) {\n                    return 0;\n                  }\n\n                  const now = new Date();\n                  return (now - this.dead) / 1000;\n                };\n\n                this.xhr = this._newXHR();\n              }\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n\n\n              getResponse() {\n                let node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe.error(\"invalid response received\");\n                    Strophe.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe.error(\"responseXML: \" + Strophe.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe.error(\"responseText: \" + this.xhr.responseText);\n                    const error = new Error();\n                    error.name = Strophe.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              }\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n\n\n              _newXHR() {\n                let xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe.Bosh = class Bosh {\n              constructor(connection) {\n                this._conn = connection;\n                /* request id for body tags */\n\n                this.rid = Math.floor(Math.random() * 4294967295);\n                /* The current session ID. */\n\n                this.sid = null; // default BOSH values\n\n                this.hold = 1;\n                this.wait = 60;\n                this.window = 5;\n                this.errors = 0;\n                this.inactivity = null;\n                this.lastResponseHeaders = null;\n                this._requests = [];\n              }\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n\n\n              _buildBody() {\n                const bodyWrap = $build('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              }\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n\n\n              _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              }\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n\n\n              _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                const body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                const _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);\n              }\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              _restore(jid, callback, wait, hold, wind) {\n                const session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe.getBareJidFromJid(session.jid) === Strophe.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe.getNodeFromJid(jid) === null && Strophe.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              }\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _connect_cb(bodyWrap) {\n                const typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  let cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe.error(\"BOSH-Connection failed: \" + cond);\n                  const conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                const wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                const hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                const wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                const inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              }\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n\n\n              _disconnect(pres) {\n                this._sendTerminate(pres);\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n\n\n              _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              }\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n\n\n              _emptyQueue() {\n                return this._requests.length === 0;\n              }\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n\n\n              _callProtocolErrorHandlers(req) {\n                const reqStatus = Bosh._getRequestStatus(req);\n\n                const err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              }\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n\n\n              _hitError(reqStatus) {\n                this.errors++;\n                Strophe.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              }\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n\n\n              _no_auth_received(callback) {\n                Strophe.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                const body = this._buildBody();\n\n                this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n\n\n              _onDisconnectTimeout() {\n                this._abortAllRequests();\n              }\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n\n\n              _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  const req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n\n\n              _onIdle() {\n                const data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  const body = this._buildBody();\n\n                  for (let i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  const time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {\n                    Strophe.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              }\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n\n\n              static _getRequestStatus(req, def) {\n                let reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              }\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n\n\n              _onRequestStateChange(func, req) {\n                Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                const reqStatus = Bosh._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this._conn.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                const reqIs0 = this._requests[0] === req;\n                const reqIs1 = this._requests[1] === req;\n                const valid_request = reqStatus > 0 && reqStatus < 500;\n                const too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"giving-up\");\n                }\n              }\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n\n\n              _processRequest(i) {\n                let req = this._requests[i];\n\n                const reqStatus = Bosh._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                const time_elapsed = req.age();\n                const primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait);\n                const secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait);\n                const server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe.error(`Request ${this._requests[i].id} timed out (secondary), restarting`);\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    const content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  const sendFunc = () => {\n                    req.date = new Date();\n\n                    if (this._conn.options.customHeaders) {\n                      const headers = this._conn.options.customHeaders;\n\n                      for (const header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    const backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              }\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n\n\n              _removeRequest(req) {\n                Strophe.debug(\"removing request\");\n\n                for (let i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n\n\n              _restartRequest(i) {\n                const req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              }\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n\n\n              _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              }\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n\n\n              _sendTerminate(pres) {\n                Strophe.debug(\"_sendTerminate was called\");\n\n                const body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                const req = new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n\n\n              _send() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(() => this._conn._onIdle(), 100);\n              }\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              }\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n\n\n              _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n\n            };\n            /** Variable: strip\n             *\n             *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n             *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n             *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n             *\n             *  > Strophe.Bosh.prototype.strip = \"body\";\n             *\n             *  This will enable stripping of the body tag in both\n             *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n             */\n\n            Strophe.Bosh.prototype.strip = null;\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            Strophe.Websocket = class Websocket {\n              /** PrivateConstructor: Strophe.Websocket\n               *  Create and initialize a Strophe.WebSocket object.\n               *  Currently only sets the connection Object.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n               *\n               *  Returns:\n               *    A new Strophe.WebSocket object.\n               */\n              constructor(connection) {\n                this._conn = connection;\n                this.strip = \"wrapper\";\n                const service = connection.service;\n\n                if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                  // If the service is not an absolute URL, assume it is a path and put the absolute\n                  // URL together from options, current URL and the path.\n                  let new_service = \"\";\n\n                  if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                    new_service += \"ws\";\n                  } else {\n                    new_service += \"wss\";\n                  }\n\n                  new_service += \"://\" + window.location.host;\n\n                  if (service.indexOf(\"/\") !== 0) {\n                    new_service += window.location.pathname + service;\n                  } else {\n                    new_service += service;\n                  }\n\n                  connection.service = new_service;\n                }\n              }\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n\n\n              _buildStream() {\n                return $build(\"open\", {\n                  \"xmlns\": Strophe.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              }\n              /** PrivateFunction: _checkStreamError\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n\n\n              _checkStreamError(bodyWrap, connectstatus) {\n                let errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                const error = errors[0];\n                let condition = \"\";\n                let text = \"\";\n                const ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (let i = 0; i < error.childNodes.length; i++) {\n                  const e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                let errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              }\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n\n\n              _reset() {\n                // eslint-disable-line class-methods-use-this\n                return;\n              }\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n\n\n              _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket();\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n\n                this.socket.onopen = () => this._onOpen();\n\n                this.socket.onerror = e => this._onError(e);\n\n                this.socket.onclose = e => this._onClose(e); // Gets replaced with this._onMessage once _onInitialMessage is called\n\n\n                this.socket.onmessage = message => this._onInitialMessage(message);\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _connect_cb(bodyWrap) {\n                const error = this._checkStreamError(bodyWrap, Strophe.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe.Status.CONNFAIL;\n                }\n              }\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n\n\n              _handleStreamStart(message) {\n                let error = false; // Check for errors in the <open /> tag\n\n                const ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                const ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              }\n              /** PrivateFunction: _onInitialMessage\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n\n\n              _onInitialMessage(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  const data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  const streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  const parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  const see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    const service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    const isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  this._replaceMessageHandler();\n\n                  const string = this._streamWrap(message.data);\n\n                  const elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              }\n              /** PrivateFunction: _replaceMessageHandler\n               *\n               * Called by _onInitialMessage in order to replace itself with the general message handler.\n               * This method is overridden by Strophe.WorkerWebsocket, which manages a\n               * websocket connection via a service worker and doesn't have direct access\n               * to the socket.\n               */\n\n\n              _replaceMessageHandler() {\n                this.socket.onmessage = m => this._onMessage(m);\n              }\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n\n\n              _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  const close = $build(\"close\", {\n                    \"xmlns\": Strophe.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  const closeString = Strophe.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                setTimeout(() => this._conn._doDisconnect(), 0);\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n\n\n              _doDisconnect() {\n                Strophe.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              }\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n\n\n              _streamWrap(stanza) {\n                // eslint-disable-line class-methods-use-this\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              }\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n\n\n              _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              }\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n\n\n              _emptyQueue() {\n                // eslint-disable-line class-methods-use-this\n                return true;\n              }\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               */\n\n\n              _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe.debug(\"Websocket closed\");\n                }\n              }\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n\n\n              _no_auth_received(callback) {\n                Strophe.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n\n\n              _onDisconnectTimeout() {} // eslint-disable-line class-methods-use-this\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n\n\n              _abortAllRequests() {} // eslint-disable-line class-methods-use-this\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n\n\n              _onError(error) {\n                Strophe.error(\"Websocket error \" + JSON.stringify(error));\n\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n\n\n              _onIdle() {\n                const data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (let i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      let stanza;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      const rawStanza = Strophe.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              }\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n\n\n              _onMessage(message) {\n                let elem; // check for closing stream\n\n                const close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  const data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._checkStreamError(elem, Strophe.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              }\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n\n\n              _onOpen() {\n                Strophe.debug(\"Websocket open\");\n\n                const start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                const startString = Strophe.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              }\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n\n\n              _reqToData(stanza) {\n                // eslint-disable-line class-methods-use-this\n                return stanza;\n              }\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n\n\n              _send() {\n                this._conn.flush();\n              }\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2020, JC Brand\n            */\n            const lmap = {};\n            lmap['debug'] = Strophe.LogLevel.DEBUG;\n            lmap['info'] = Strophe.LogLevel.INFO;\n            lmap['warn'] = Strophe.LogLevel.WARN;\n            lmap['error'] = Strophe.LogLevel.ERROR;\n            lmap['fatal'] = Strophe.LogLevel.FATAL;\n            /** Class: Strophe.WorkerWebsocket\n             *  _Private_ helper class that handles a websocket connection inside a shared worker.\n             */\n\n            Strophe.WorkerWebsocket = class WorkerWebsocket extends Strophe.Websocket {\n              /** PrivateConstructor: Strophe.WorkerWebsocket\n               *  Create and initialize a Strophe.WorkerWebsocket object.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - The Strophe.Connection\n               *\n               *  Returns:\n               *    A new Strophe.WorkerWebsocket object.\n               */\n              constructor(connection) {\n                super(connection);\n                this._conn = connection;\n                this.worker = new SharedWorker(this._conn.options.worker, 'Strophe XMPP Connection');\n\n                this.worker.onerror = e => {\n                  var _console;\n\n                  (_console = console) === null || _console === void 0 ? void 0 : _console.error(e);\n                  Strophe.log(Strophe.LogLevel.ERROR, `Shared Worker Error: ${e}`);\n                };\n              }\n\n              get socket() {\n                return {\n                  'send': str => this.worker.port.postMessage(['send', str])\n                };\n              }\n\n              _connect() {\n                this._messageHandler = m => this._onInitialMessage(m);\n\n                this.worker.port.start();\n\n                this.worker.port.onmessage = ev => this._onWorkerMessage(ev);\n\n                this.worker.port.postMessage(['_connect', this._conn.service, this._conn.jid]);\n              }\n\n              _attach(callback) {\n                this._messageHandler = m => this._onMessage(m);\n\n                this._conn.connect_callback = callback;\n                this.worker.port.start();\n\n                this.worker.port.onmessage = ev => this._onWorkerMessage(ev);\n\n                this.worker.port.postMessage(['_attach', this._conn.service]);\n              }\n\n              _attachCallback(status, jid) {\n                if (status === Strophe.Status.ATTACHED) {\n                  this._conn.jid = jid;\n                  this._conn.authenticated = true;\n                  this._conn.connected = true;\n                  this._conn.restored = true;\n\n                  this._conn._changeConnectStatus(Strophe.Status.ATTACHED);\n                } else if (status === Strophe.Status.ATTACHFAIL) {\n                  this._conn.authenticated = false;\n                  this._conn.connected = false;\n                  this._conn.restored = false;\n\n                  this._conn._changeConnectStatus(Strophe.Status.ATTACHFAIL);\n                }\n              }\n\n              _disconnect(readyState, pres) {\n                pres && this._conn.send(pres);\n                const close = $build(\"close\", {\n                  \"xmlns\": Strophe.NS.FRAMING\n                });\n\n                this._conn.xmlOutput(close.tree());\n\n                const closeString = Strophe.serialize(close);\n\n                this._conn.rawOutput(closeString);\n\n                this.worker.port.postMessage(['send', closeString]);\n\n                this._conn._doDisconnect();\n              }\n\n              _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe.debug(\"Websocket closed\");\n                }\n              }\n\n              _closeSocket() {\n                this.worker.port.postMessage(['_closeSocket']);\n              }\n              /** PrivateFunction: _replaceMessageHandler\n               *\n               * Called by _onInitialMessage in order to replace itself with the general message handler.\n               * This method is overridden by Strophe.WorkerWebsocket, which manages a\n               * websocket connection via a service worker and doesn't have direct access\n               * to the socket.\n               */\n\n\n              _replaceMessageHandler() {\n                this._messageHandler = m => this._onMessage(m);\n              }\n              /** PrivateFunction: _onWorkerMessage\n               * _Private_ function that handles messages received from the service worker\n               */\n\n\n              _onWorkerMessage(ev) {\n                const {\n                  data\n                } = ev;\n                const method_name = data[0];\n\n                if (method_name === '_onMessage') {\n                  this._messageHandler(data[1]);\n                } else if (method_name in this) {\n                  try {\n                    this[method_name].apply(this, ev.data.slice(1));\n                  } catch (e) {\n                    Strophe.log(Strophe.LogLevel.ERROR, e);\n                  }\n                } else if (method_name === 'log') {\n                  const level = data[1];\n                  const msg = data[2];\n                  Strophe.log(lmap[level], msg);\n                } else {\n                  Strophe.log(Strophe.LogLevel.ERROR, `Found unhandled service worker message: ${data}`);\n                }\n              }\n\n            };\n\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n            global$1.Strophe = core.Strophe;\n            const {\n              b64_sha1\n            } = SHA1;\n\n            exports.$build = $build;\n            exports.$iq = $iq;\n            exports.$msg = $msg;\n            exports.$pres = $pres;\n            exports.Strophe = Strophe;\n            exports.b64_sha1 = b64_sha1;\n\n            Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const h of (this._resumeState.handlers || [])\n\t\t\t\t\t.concat(this._resumeState.addHandlers || [])) {\n\t\t\t\tthis._c._addSysHandler(h.handler, h.ns, h.name, h.type, h.id);\n\t\t\t}\n\t\t\tfor (const h of (this._resumeState.timedHandlers || [])\n\t\t\t\t\t.concat(this._resumeState.addTimeds)) {\n\t\t\t\tthis._c.addTimedHandler(h.period, h.handler);\n\t\t\t}\n\t\t\tfor (const h of (this._resumeState.removeTimeds || [])\n\t\t\t\t\t.concat(this._resumeState.removeHandlers || [])) {\n\t\t\t\tthis._c.deleteTimedHandler(h);\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && (\n\t\t\t(elem.firstElementChild && elem.firstElementChild.tagName)\n\t\t\t|| (elem.firstChild && elem.firstChild.tagName));\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";function e(e,n){if(!r)return!1;const u=e.buffer;let i=l.get(u);if(null==i){if((i=t.validate(u))&&n)try{new t.Instance(new t.Module(u)).exports[0]()}catch(e){i=!1}l.set(u,i)}return i}const t=this.WebAssembly||globalThis.WebAssembly,r=\"object\"==typeof t,n=e=>void 0!==e,u=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),i=(...e)=>Uint32Array.of(1836278016,1,...e),s=(...e)=>i(1610679297,33751040,...e,40239360,259),o=(...e)=>u(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),a=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),g=(...e)=>a(...e,2842,4096,28164,28001,357,260,256,560,259,0),l=new WeakMap,f=i(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=u(5,3,1,4,1,0,8,4,110,97,109,101,2,1,0),y=a(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),b=i(1610679297,33751040,134873089,100664833,185276736),m=u(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),p=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),A=g(3082,2561,17152,0,0,252),d=g(2058,1537,16640,49152),U=s(101318657,301990913,268438272,1835101700,17039717),h=o(5,4,1,3,1,1,10,7,1,5,0,254,3,0),x=s(84344833,6357249,17369600,4259847,186257917,1845758464),v=o(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>r&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return r&&n(t.instantiateStreaming)},feature:{get bigInt(){return e(f,!0)},get bulk(){return e(y)},get exceptions(){return e(b)},get memory64(){return e(c)},get mutableGlobal(){return e(m)},get multiValue(){return e(p)},get saturateConversions(){return e(A)},get signExtensions(){return e(d)},get tailCall(){return e(U)},get threads(){return e(h)},get simd(){return e(x)},get references(){return e(v)},get typeReflection(){return r&&n(t.Memory.type)},get funcReferences(){return r&&n(t.Function)}}};","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * AV1 codec mime type.\n     */\n    AV1: 'av1',\n\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    DATA_CHANNEL_CLOSED = 'rtc.data_channel_closed',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed',\n\n    /**\n     * Designates an event indicating that some received video SSRCs will now map to\n     * new remote sources.\n     */\n    VIDEO_SSRCS_REMAPPED = 'rtc.video_ssrcs_remapped',\n\n    /**\n     * Designates an event indicating that some received audio SSRCs will now map to\n     * new remote sources.\n     */\n    AUDIO_SSRCS_REMAPPED = 'rtc.audio_ssrcs_remapped'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const DATA_CHANNEL_CLOSED = RTCEvents.DATA_CHANNEL_CLOSED;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\nexport const VIDEO_SSRCS_REMAPPED = RTCEvents.VIDEO_SSRCS_REMAPPED;\nexport const AUDIO_SSRCS_REMAPPED = RTCEvents.AUDIO_SSRCS_REMAPPED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    /**\n     * The conference was redirected to a visitor node.\n     */\n    REDIRECTED = 'xmpp.redirected',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_EVENT = 'xmpp.room-metadata.event',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_UPDATED = 'xmpp.room-metadata.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWStatusConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWStateConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","JitsiConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","REDIRECTED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DATA_CHANNEL_CLOSED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","E2EE_VERIFICATION_AVAILABLE","E2EE_VERIFICATION_READY","E2EE_VERIFICATION_COMPLETED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","PARTICIPANT_SOURCE_UPDATED","LAST_N_ENDPOINTS_CHANGED","FORWARDED_SOURCES_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","SUBTITLES_RECEIVED","ANALYTICS_EVENT_RECEIVED","TRACK_UPDATED","METADATA_UPDATED","JitsiTrackEvents","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","TRACK_OWNER_CHANGED","CALLSTATS_SCRIPT_URL","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","error","options","devices","name","this","gum","constraints","Array","isArray","slice","undefined","message","join","constraintName","constraint","video","indexOf","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","Error","stack","prototype","Object","create","constructor","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","action","attributes","source","type","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","arguments","length","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","match","version","_detectNWJS","_detectReactNative","product","BrowserDetection","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","i","getBrowserName","getBrowserVersion","Number","parseInt","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","EventEmitter","key","value","super","defineProperty","enumerable","configurable","writable","clear","_storage","keys","getItem","keyName","setItem","keyValue","removeItem","n","serialize","JSON","stringify","JitsiLocalStorage","window","localStorage","_localStorageDisabled","ignore","console","warn","isLocalStorageDisabled","emit","dontEmitChangedEvent","localStorageContent","jitsiLocalStorage","logger","getLogger","info","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","platform","Boolean","test","isEngine","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","matches","isSupported","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","addEventListener","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsTrackBasedStats","supportsVP9","usesSdpMungingForSimulcast","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","stream","ReadableStream","postMessage","supportsAudioRed","codecs","some","codec","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","process","versions","chromium","ua","reset","disposed","analyticsHandlers","Set","cache","permanentProperties","conferenceName","addPermanentProperties","browser","dispose","size","forEach","handler","setAnalyticsHandlers","handlers","_setUserProperties","event","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","push","splice","e","require","wrtcFuncNames","reportType","_fabrics","CallStats","static","msg","backend","log","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","values","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","data","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","ssrc","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","_len","theArguments","_key","apply","GlobalOnErrorHandler","debugMethods","_len2","_key2","originalReportError","_len3","args","_key3","call","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","devicesData","_reportEvent","conferenceID","overall","comment","Promise","resolve","reject","sendUserFeedback","status","reason","mute","tpc","remoteUserID","add","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","start","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","context","LocalStatsCollector","interval","callback","intervalId","intervalMilis","audioLevel","analyser","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","reduce","a","b","filterPositiveValues","filter","isLocalStatsSupported","resume","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","array","Uint8Array","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","stop","_this$analyser","_this$source","clearInterval","disconnect","_window","disconnectAudioContext","async","close","connectAudioContext","suspend","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","emitter","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","list","entries","getEntries","task","Math","max","duration","observer","observe","buffered","startTime","Date","now","longTasksIntervalId","_lastTimeStamp","rate","StatisticsEvents","stopObserver","MediaType","init","flags","_flags$enableJoinAsVi","_runInLiteMode","runInLiteMode","_ssrcRewriting","ssrcRewritingEnabled","_joinAsVisitor","enableJoinAsVisitor","isMultiStreamSendSupportEnabled","isRunInLiteModeEnabled","isSsrcRewritingSupported","isJoinAsVisitorSupported","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","bandwidth","packetLoss","transport","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","Map","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","errorCallback","callErrorHandler","startAudioLevelStats","audioLevels","getAudioLevels","hasOwnProperty","getStats","then","result","processAudioLevelReport","catch","processStats","processStatsReport","lastTotalAudioUploadBytes","lastTotalAudioDownloadytes","lastTotalVideoUploadBytes","lastTotalVideoDownloadBytes","calculateBytesPerSecond","totalAudioOutboundBytes","totalAudioInboundBytes","totalVideoOutboundBytes","totalVideoInboundBytes","stat","bytesSent","bytesReceived","audioUpload","audioDownload","videoUpload","videoDownload","audio","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","track","getTrackBySSRC","isAudioTrack","FeatureFlags","sourceName","getSourceName","width","height","codecDesc","participantId","getParticipantId","userResolutions","userFramerates","userCodecs","total","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","v","isNaN","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","timestamp","bitrateKbps","byteSentStats","nominated","state","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","get","remoteCandidateId","localUsedCandidate","localCandidateId","ip","address","port","localip","protocol","conferenceStatsTransport","t","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","id","set","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","codecId","codecShortType","split","kind","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getSsrcByTrackId","trackIdentifier","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getLocalSSRC","AUDIO","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","disableThirdPartyRequests","callStatsApplicationLogsDisabled","ScriptUtil","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","analyticsEventEmitter","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","localStat","LocalStats","stopLocalStats","getOriginalStream","addAudioLevelListener","listener","on","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","removeAllListeners","startCallStats","has","endsWith","roomName","lastIndexOf","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","silence","sendActiveDeviceListEvent","globalSet","userId","sendGetUserMediaFailed","err","formatJitsiTrackErrorForCallStats","sendLog","m","globalSubSet","next","csPerStats","sendApplicationLog","sendFeedback","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","addAnalyticsEventListener","removeAnalyticsEventListener","JitsiConferenceEventManager","xmppListeners","session","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","EventEmitterForwarder","addListener","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","getParticipantById","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","forward","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","leave","_onConferenceRestarted","_onIceConnectionFailed","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","node","setProperty","tagName","substring","onMemberKicked","bind","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","role","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","nick","isGuest","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","dominantSpeakerIsSilent","roomjid","performance","ev","getMediaSessions","processSourceMap","ufrag","isVideoTrack","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","config","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","find","p","getJid","enabled","setupStatisticsListeners","level","setAudioLevel","startSilent","onByteSentStatsReceived","JitsiParticipant","displayName","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_properties","_identity","_isReplacing","_isReplaced","_features","_sources","_isMediaTypeMuted","getTracks","_setSources","_sourceByMediaType","sourceByMediaType","sourceInfo","getBotType","_botType","getConference","getConnectionJid","_connectionJid","getDisplayName","getFeatures","getId","getProperty","getRole","getSources","getStatsID","getTracksByMediaType","hasFeature","feature","isAudioMuted","isHidden","isHiddenFromRecorder","_this$_identity","_this$_identity$user","user","isVideoMuted","setBotType","newBotType","setConnectionJid","newJid","newFeatures","setIsReplaced","newIsReplaced","setIsReplacing","newIsReplacing","oldValue","setRole","newRole","supportsDTMF","JitsiConnectionEvents","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","JitsiConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","_this","promise","clearRejectTimeout","clearTimeout","_timeout","setRejectTimeout","ms","setTimeout","Listenable","removeEventListener","off","kJitsiE2EE","Symbol","E2EEcontext","sharedKey","baseUrl","ljm","document","querySelector","idx","src","workerUrl","workerBlob","Blob","URL","createObjectURL","_worker","Worker","onerror","operation","cleanup","cleanupAll","handleReceiver","receiver","transform","receiverStreams","readableStream","readable","writableStream","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","index","v4","E2EEErrors","emojiMapping","sasGenerators","decimal","sasBytes","emoji","map","num","REQ_TIMEOUT","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","OLM_KEY_VERIFICATION_MAC_INFO","OLM_KEY_VERIFICATION_MAC_KEY_IDS","kOlmData","OlmAdapterEvents","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_SAS_AVAILABLE","PARTICIPANT_SAS_READY","PARTICIPANT_KEY_UPDATED","PARTICIPANT_VERIFICATION_COMPLETED","OlmAdapter","_conf","_init","_mediaKey","_mediaKeyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","myId","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","d","_sendMessage","updateCurrentMediaKey","clearParticipantSession","free","clearAllParticipantsSessions","markParticipantVerified","isVerified","sasVerification","E2EE_SAS_CHANNEL_VERIFICATION_FAILED","E2EE_SAS_INVALID_SAS_VERIFICATION","sas","sasMacSent","is_their_key_set","_sendSasMac","_olmAccount","Account","_idKeys","parse","identity_keys","get_library_version","_onIdKeysReady","startVerification","SAS","transactionId","startContent","isInitiator","startMessage","idKeys","keyType","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","body","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","_olmData$sasVerificat","pubKey","get_pubkey","commitment","_computeCommitment","acceptMessage","sasCommitment","keyMessage","keySent","theirKey","E2EE_SAS_COMMITMENT_MISMATCHED","set_their_key","myInfo","theirInfo","generatedSas","method","generateSas","generate_bytes","mac","baseInfo","calculate_mac","sort","E2EE_SAS_KEYS_MAC_MISMATCH","ed25519","E2EE_SAS_MISSING_KEY","computedMac","E2EE_SAS_MAC_MISMATCH","newValue","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","curve25519","mark_keys_as_published","keyList","deviceKeyId","macMessage","olmUtil","Utility","sha256","events","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantSasReady","_onParticipantSasAvailable","_onParticipantVerificationCompleted","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","crypto","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","hash","ArrayBuffer","ratchet","getRandomValues","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","_this$_keyHandler$sas","_this$_keyHandler$sas2","sha1_ft","c","sha1_kt","safe_add","x","y","lsw","rol","cnt","SHA1","s","binarray","triplet","j","str","charAt","binb2b64","len","olda","oldb","oldc","oldd","olde","w","core_sha1","bin","charCodeAt","str2binb","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","each","_","el","getAttribute","category","Caps","connection","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","f","addOrReplaceInPresence","getFeaturesAndIdentities","timeout","_getDiscoInfo","response","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","accumulatedValue","tmp","sortedFeatures","sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","_ref","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","min","retry","minDelay","base","floor","random","pow","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","url","service","search","pattern","oldToken","replace","toString","cancel","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","includes","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","shift","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","readyState","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_this$_options$pingOp","_maybeStartWSKeepAlive","plugin","addHandler","deleteHandler","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_this$_options$pingOp2","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","flush","enable","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","send","stanza","_this$_stropheConn","_this$_stropheConn$_p","_this$_stropheConn$_p2","elem","errback","_ref2","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","obj","removed","media","approved","whitelists","newWhitelists","oldList","newList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","filteredPayload","_filterUpdatePayload","hiddenDomain","filteredRooms","participants","filteredParticipants","k","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","isHiddenDomain","botType","members","getBreakoutRooms","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","RoomMetadata","_metadata","setMetadata","getMetadata","roomMetadataComponentAddress","metadata","_callStatsUserName","_machineId","externalStorage","callStatsUserName","username","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","sessionId","substr","createExpBackoffTimer","step","count","Moderator","_this$options$hosts","_this$options$hosts2","origin","location","Settings","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","targetJid","hosts","focus","targetUrl","conferenceRequestUrl","mode","focusUserJids","focusUserJid","attachEvent","isFocusJid","focusJid","isExternalAuthEnabled","isSipGatewayEnabled","_createConferenceRequest","_config$analytics$rtc","_config$analytics","rtcstatsEnabled","conferenceRequest","machineUid","_createConferenceIq","_parseConferenceIq","resultIq","attr","ready","vnode","authentication","externalAuth","sendConferenceRequest","_handleIqSuccess","_handleIqError","ok","resultJson","_handleSuccess","text","statusText","sessionError","notAuthorized","_handleError","authenticationEnabled","IDENTITY_UPDATED","iAmRecorder","iAmSipGateway","waitMs","reservationErr","errorCode","errorTextNode","errorMsg","invalidSession","anonymousdomain","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","parser","packet2JSON","xmlElement","nodes","child","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","extractIdentityInformation","hiddenFromRecorderFeatureEnabled","userInfo","tags","tag","groupInfo","group","ChatRoom","password","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","roomMetadata","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","roomMetadataEl","roomMetadataText","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","getElementsByTagName","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","isTranscriber","innerHTML","toLowerCase","fromHiddenDomain","presence","xEl","remove","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","nickEl","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","onVisitorIQ","visitors","String","getMediaPresenceInfo","endpointId","mutedNode","codecTypeNode","videoTypeNode","codecType","getMemberRole","peerJid","getLastPresence","mucNick","dial","rayo","hangup","getLobby","getAVModeration","getMetadataHandler","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","_this$lobby","onMucLeft","doReject","end","endConferenceComponentAddress","MucConnectionPlugin","onVisitors","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","$build","_createSsrcGroupExtension","ssrcGroupCompactJson","semantics","_getOrCreateRtpDescription","jingle","description","content","appendChild","expandSourcesFromJson","jsonMessageXml","_json","sources","audioRtpDescription","videoRtpDescription","ssrcMap","ssrcs","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","_videoSources$i","_audioSources$i","MediaDirection","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingResolution","desktopSharingSources","streamId","streamType","_desktopSharingFrameR","_desktopSharingFrameR2","_desktopSharingResolu","_desktopSharingResolu2","_desktopSharingResolu3","_desktopSharingResolu4","_desktopSharingResolu5","_desktopSharingResolu6","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","surfaceSwitching","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","findLine","parseICEUfrag","parseICEPwd","line","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","parseMLine","parts","proto","pop","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","priority","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseVideoTypeLine","videoTypeLine","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcInfo","numGroups","ssrcGroups","primarySsrc","fidGroup","simGroup","generateSsrc","RandomUtil","getSsrcAttribute","mLine","attributeName","ssrcLine","attribute","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","rtp","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","fmtp","item","rtxApts","rtxPts","keepPts","INACTIVE","rtcpFb","SDP","mediaI","raw","arrayEquals","array1","array2","l","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","mid","clonedeep","RECVONLY","msid","concat","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","initialLastN","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","senders","SENDRECV","transportToJingle","sctpport","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fb","hasAttribute","fromJingle","contents","jingle2media","sctp","payloadType","setAttribute","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","_value","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","fallback","fn","wrap","defer","setImmediate$1","handlePromise","invokeCallback","isAsync","toStringTag","wrapAsync","asyncFn","func","awaitify","arity","cbArgs","applyEach","eachfn","fns","callArgs","that","cb","_asyncMap","arr","iteratee","results","counter","_iteratee","iterCb","isArrayLike","breakLoop","once","wrapper","callFn","assign","onlyOnce","asyncEachOfLimit","generator","limit","done","canceled","awaiting","running","replenish","iterDone","iterateeCallback","handleError","eachOfLimit","RangeError","asyncIterator","isAsyncIterable","nextElem","coll","createArrayIterator","okeys","iterator","getIterator","createES2015Iterator","createIterator","looping","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","eachOfSeries$1","DLL","head","tail","removeLink","prev","empty","insertAfter","newNode","insertBefore","setInitial","toArray","cur","testFn","curr","dll","queue","worker","concurrency","numRunning","workersList","drain","saturated","unsaturated","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","rej","promiseCallback","q","started","_tasks","_createCB","tasks","buffer","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","paused","datum","pushAsync","kill","unshiftAsync","pause","defineProperties","memo","mapLimit$1","concatLimit$1","val","mapResults","_createTester","check","getResult","testResult","testPassed","consoleFunc","resultArgs","_withoutIndex","bool","_fn","_test","truth","eachLimit$2","eachSeries$1","filterArray","truthValues","filterGeneric","_filter","sync","innerArgs","ensureAsync","newObj","taskCb","TypeError","criteria","comparator","left","right","rest","taskIndex","nextTask","AsyncQueue","_queue","_processQueueTasks","items","_stopped","finishedCallback","shutdown","JingleSessionState","PENDING","ACTIVE","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","MediaSessionEvents","IQ_TIMEOUT","_addSourceElement","ssrc_","JingleSessionPC","jingleContents","videoContents","receiverConstraints","sourceFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_sourceReceiverConstraints","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","numRemoteVideoSources","numRemoteAudioSources","remoteSourceMaxFrameHeights","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","disableRtx","_options$videoQuality","_options$desktopShari","_options$desktopShari2","gatherStats","maxstats","capScreenshareBitrate","codecSettings","enableInsertableStreams","videoQuality","forceTurnRelay","usesUnifiedPlan","disableSimulcast","preferredCodec","H264","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","getRemoteSourcesRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","candidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","videoTracks","addTracks","addTrack","all","createOffer","offerSdp","setLocalDescription","processLocalSdpForTransceiverInfo","sendSessionInitiate","setAnswer","jingleAnswer","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","RTCSessionDescription","setRemoteDescription","newLocalSdp","sendContentModify","jingleOfferAnswerIq","audioTracks","tracks","bridgeSessionId","_responderRenegotiate","setVideoCodecs","preferred","disabled","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","channelLastN","accept","responder","sessionModify","setReceiverVideoConstraint","sourceReceiverConstraints","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","maxFrameHeight","jitsiLocalTrack","getLocalVideoTracks","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","getRemoteTracks","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","newSsrcs","mappedSources","lookupSsrc","addRemoteSsrc","oldSsrc","remoteSources","setSourceName","setOwner","_setVideoType","peerMediaInfo","getPeerMediaInfo","_sourceMutedChanged","rtx","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","remoteSdp","_ssrcs","_line$split$","findIndex","_SDPUtil$parseMLine","desiredDirection","getDesiredMediaDirection","removeSSRCOwners","_SDPUtil$parseMLine2","optionalRemoteSdp","_initiatorRenegotiate","createAnswer","answer","offer","replaceTracks","oldLocalSDP","recvOnlyTransceiver","getTransceivers","currentDirection","replaceTrack","setMediaTransferActive","active","tpcUtils","audioTransferActive","videoTransferActive","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackToPc","_addRemoveTrack","configureSenderVideoEncodings","removeTrackFromPc","isRemove","setP2pVideoTransferActive","videoActive","logVideoStr","isSessionActive","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","sourceMaxFrameHeights","parseSourceMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","errResponse","errorElSel","code","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","_audioVideoSsrcs","audioVideoSsrcs","logMessage","endpoint","startMuted","_$$find","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","href","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","XMPP","token","disconnectInProgress","authenticatedUser","deploymentInfo","_components","trace","errStatusCapture","exec","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","caps","initFeaturesList","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","_ref3","region","backendRelease","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","trim","header","sendFaceLandmarksEvent","faceExpression","jsonString","users","created_timestamp","force","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","allocateConferenceFocus","authenticationError","connectionError","CodecSelection","enforcePreferredCodec","p2pDisabledCodec","_isCodecSupported","jvbDisabledCodec","p2pPreferredCodec","jvbPreferredCodec","_selectPreferredCodec","mediaSession","disabledCodec","currentCodec","selectedCodec","remoteParticipants","nonPreferredCodecs","remote","_nonPreferredCodecs$f","isVideoCodecDisabled","getPreferredCodec","BridgeChannel","wsUrl","_channel","_connected","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","CONNECTING","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendReceiverVideoConstraintsMessage","sendSourceVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","isActive","forwardedSources","onclose","getParticipantCount","jsonObject","logDisabled_","deprecationWarnings_","extractVersion","uastring","expr","pos","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","nativeEventName","wrappedCallback","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","isObject","compactObject","accumulator","isObj","isEmptyObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","trackId","logging","utils","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","r","ideal","exact","oldname_","prefix","toUpperCase","oc","mix","advanced","shimConstraints_","remap","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","dev","label","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","webkitGetUserMedia","origGetUserMedia","getAudioTracks","getVideoTracks","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","MediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","getReceivers","Event","transceiver","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","origRemoveTrack","removeTrack","origAddStream","addStream","origRemoveStream","removeStream","origGetSenders","shimGetStats","origGetStats","selector","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","names","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","RegExp","oldStream","nativeMethod","methodObj","origSetLocalDescription","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","target","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","scaleResolutionDownBy","maxFramerate","getParameters","encodings","setParameters","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","successCallback","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConstraints","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","SDPUtils","augmentedCandidate","toJSON","usernameFragment","shimMaxMessageSize","_sctp","sections","mediaSection","sctpInDescription","getRemoteFirefoxVersion","canSendMMS","remoteIsFirefox","canSendMaxMessageSize","getCanSendMaxMessageSize","remoteMMS","maxMessageSize","getMaxMessageSize","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","byteLength","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimParameterlessSetLocalDescription","nativeSetLocalDescription","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","adapter","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","createElement","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","_options$audioQuality","origAttachMediaStream","attachMediaStream","element","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","screenObtainer","isDeviceListAvailable","ds","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_attachTTFMTracker","container","_maybeFireTrackAttached","_onTrackAttach","_onTrackDetach","_setHandler","_unregisterHandlers","videoTrack","RTCUtils","detach","getStreamId","getMSID","getTrackId","getTrack","getTrackLabel","getUsageLabel","getVideoType","isLocalAudioTrack","isWebRTCTrackMuted","newAudioLevel","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackToPc","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","_removeLocalTrackFromPc","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","streamInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","_this$track$getSettin","_this$track","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","unmute","opts","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","every","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","current","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","sessionVersion","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_UPDATED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","getSourceIndexFromSourceName","nameParts","SignalingLayer","getPeerSourceInfo","getSSRCOwner","getTrackSourceName","ssrcList","setTrackMuteStatus","setTrackVideoType","updateSsrcOwnersOnLeave","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","transformer","_transformer$selectMe","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","ssrcCache","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","_mediaSection$mLine","_mediaSection$mLine2","_mediaSection$mLine3","_mediaSection$mLine4","_mediaSection$mLine4$","mediaDirection","trackID","_updateSourcesToMsidMap","storedStreamId","generatedMsid","_hasHadVideoTrack","_hasHadAudioTrack","generatedStreamId","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","_transformer$selectMe2","audioMLine","_injectSourceNames","videoMlines","_usesUnifiedPlan","_mediaSection$mLine5","_mediaSection$mLine5$","_mediaSection$mLine6","nameExists","trackIndexParts","trackIndex","_this$tpc$getLocalVid","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","primarySsrcMsid","primarySsrcCname","cname","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","clearSsrcCache","setSsrcCache","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","_sdpTransformer$selec","newPrimarySsrc","SdpSimulcast","_ssrcCache","numOfLayers","_fillSsrcsFromCache","cachedSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","addAssociatedAttributes","simSsrcs","simSsrc","_generateSsrc","_mLine$ssrcs","_mLine$ssrcs$find","_mLine$ssrcGroups","_mLine$ssrcs2","mungeLocalDescription","_media$ssrcs","_media$ssrcGroups$len","_media$ssrcGroups","_media$ssrcs$","simulcastSsrcs","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","isRestoringTimedout","isVideoTrackFrozen","INTERRUPTED","RESTORING","restoringTimer","rtcMutedTimestamp","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","_getVideoFrozenTimeout","isP2PActive","_onP2PStatus","figureOutStreamingStatus","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onForwardedSourcesChanged","onForwardedSourcesChanged","_onLastNValueChanged","clearRtcMutedTimestamp","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","newStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldStreamingStatus","streamingStatus","nowMs","startedMs","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","rTimer","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","listenerCount","_initTrackStreamingStatus","_disposeTrackStreamingStatus","REMOTE_TRACK_MUTE","REMOTE_TRACK_UNMUTE","setMute","getSSRC","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","_this$pc$options","_this$pc$options$vide","_this$videoBitrates$V","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","ssHigh","videoBitrates","encodingBitrates","VP8","_getStreamEncodings","localTrack","_getVideoStreamEncodings","maxBitrate","maxVideoBitrate","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","_t$sender","_t$sender$track","_t$receiver","_t$receiver$track","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","videoStreamEncodings","encoding","_videoStreamEncodings","_capScreenshareBitrate","calculateEncodingsBitrates","_this$pc$options2","_this$pc$options2$vid","desktopShareBitrate","desktopBitrate","lowFpsScreenshare","getConfiguredEncodeResolution","_parameters$encodings","videoSender","parameters","_newTrack$getType","_newTrack$getTrack","isNewLocalSource","stopped","_newTrack$getSourceNa","transceiverMid","_localTrackTransceiverMids","setEncodings","_transceiver$sender","_parameters$encodings2","_updateVideoSenderParameters","_parameters$encodings3","setActivePromise","settledResult","errors","transceivers","localTrackMids","updateEncodingsResolution","TraceablePeerConnection","_dtmfSender","_dtmfTonesQueue","remoteTracks","_addedStreams","localSSRCs","remoteSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","statsinterval","_usesTransceiverCodecPreferences","interop","Simulcast","explodeRemoteSimulcast","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","time","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","_lastVideoSenderUpdatePromise","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_getDesktopTrackMid","desktopTrack","_getReceiversByEndpointIds","endpoints","remoteTrackIds","_remote$track","getSynchronizationSources","doesTrueSimulcast","getLocalVideoSSRCs","_this$localSSRCs$get","_this$localSSRCs$get$","_this$localSSRCs$get$2","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","remoteTrack","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLine","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","jitsiTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_userTracksByMediaTyp","_extractSSRCMap","groupsMap","groupSSRCs","groupSsrcs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","isSharingLowFpsScreen","_isSharingScreen","_mungeCodecOrder","mLines","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","_this$peerconnection$","defaultCodec","_this$peerconnection$2","lowFps","findSenderByKind","_this$peerconnection$3","localSdp","_transceiver$mid","oldTrackSSRC","_ensureSimulcastGroupIsLast","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","_transformer$selectMe3","_transformer$selectMe4","modifiedDirection","desiredAudioDirection","desiredVideoDirection","localSources","_mungeOpus","enableOpusDtx","opusMaxAverageBitrate","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","usedtx","mungedConfig","_mungeInactive","_initializeDtlsTransport","onstatechange","_setVp9MaxBitrates","isLocalSdp","VP9","bitrates","hdBitrate","ssHdBitrate","isSharingScreen","currentDescription","mungeRemoteDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","write","normalizePlanB","_localVideoTrack$getT","_localVideoTrack$getT2","configuredResolution","_updateVideoSenderEncodings","nextPromise","preference","degradationPreference","encodingsEnabledState","maxBitrates","_this$options","_this$options$videoQu","_this$options2","_this$options2$videoQ","scaleFactor","_this$getTargetVideoB","_this$tpcUtils$_getVi","_this$tpcUtils$_getVi2","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","_RTCRtpReceiver$getCa","_this$codecSettings","_this$codecSettings2","capabilities","disabledCodecMimeType","preferredCodecMimeType","ULPFEC","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIndex","sourceIdentifier","newSSRCNum","oldSSRCNum","existing","activeStreams","_this$encodingsEnable","currNumSsrcs","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","metaData","peerConnections","_lastN","_forwardedSources","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldForwardedSources","setReceiverVideoConstraints","sendSourceVideoType","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","ConnectionQualityEvents","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","startBitrate","ConnectionQuality","_this$_options$config","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","disableLocalStats","_updateLocalStats","_maybeUpdateUnmuteTime","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","DESKTOP","activeTPC","getActivePeerConnection","_this$_options$config2","_this$_options$config3","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioLevel","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","numRequestsWithResponses","totalNumRequests","JitsiE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","RecordingAdapter","exportRecordedData","setMicDevice","_getAudioStream","SariskaMediaTransport","OggAdapter","_defineProperty","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","format","shouldEnable","_stream","MediaRecorder","ondataavailable","_saveMediaData","AbstractAudioContextAdapter","_sampleRate","_replaceMic","newSource","WavAdapter","_wavBuffers","_wavLength","_data","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","view","DataView","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","setUint8","output","offset","inputBuffers","input","sampleCount","bufferCount","o","setInt16","floatTo16BitPCM","string","lng","FlacAdapter","_onWorkerMessage","_encoder","_stopPromiseResolver","command","promiseInitWorker","_loadWebWorker","_initWorkerPromiseResolver","bps","buf","blob","blobUrl","webkitURL","revokeObjectURL","highPrecisionTime","timing","navigationStart","SessionEventType","freeze","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","LOCAL_STORAGE_KEY","sessionManager","_loadMetadata","dataStr","dataObject","Bourne","_sessionsMetadata","_saveMetadata","createSession","sessionToken","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","beginSegment","getCurrentSegmentIndex","endSegment","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","currentEvent","COMMAND_START","COMMAND_STOP","COMMAND_PING","PROPERTY_STATS","RECORDING_FORMATS","ControllerState","IDLE","STARTING","RECORDING","STOPPING","FAILED","RecordingController","registerEvents","getParticipantsStats","_onStartCommand","_onStopCommand","_onPingCommand","_doStartRecording","_doStopRecording","_updateStats","_switchToNewSession","_registered","addCommandListener","sendCommandOnce","onStateChanged","delegate","_onStateChanged","onNotify","_onNotify","onWarning","_onWarning","startRecording","switchFormat","removeCommand","sendCommand","_getRandomToken","_format","stopRecording","_currentSessionToken","downloadRecordedData","_adapters","fileName","base64Url","style","click","removeChild","downloadBlob","_micDeviceId","_state","_isMuted","newFormat","getLocalStats","currentSessionToken","isRecording","recordedBytes","recordedLength","recordingStats","isSelf","localId","_changeState","messageKey","messageParams","_createRecordingAdapter","kJitsiLiteMode","LiteModeContext","_setupLiteModeForTrack","transformStream","TransformStream","pipeThrough","pipeTo","MAX_HEIGHT","ReceiverVideoConstraints","assumedBandwidthBps","_maxFrameHeight","_assumedBandwidthBps","defaultConstraints","_Object$keys","updateAssumedBandwidthBps","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","videoConstraints","ReceiveVideoController","_config$startLastN","_rtc","startLastN","_getDefaultSourceReceiverConstraints","_mediaSession$peercon","remoteVideoTracks","setAssumedBandwidthBps","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","_constraints$assumedB","_constraints$lastN","p2pSession","mappedConstraints","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","sourceConstraints","getActiveMediaSession","_this$_conference$get","sendMaxFrameHeight","_selectSendMaxFrameHeight","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_jibriJid","_statusFromJicofo","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getJibriJid","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setStatusFromJicofo","setJibriJid","jibriJid","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","pathname","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","faceLandmarks","_onFaceLandmarkAdd","oldDominantSpeaker","newDominantSpeaker","setDominantSpeaker","savedUser","markAsHasLeft","newName","setDisplayName","addFaceLandmarks","newStats","speakerStatsToUpdate","newParticipant","totalDominantSpeakerTime","setFaceLandmarks","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","instantiateTrackRecorder","updateNames","originalStream","dataEvent","recorderToRemove","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","TranscriptionService","recordingResult","verify","formatResponse","audioBlob","SphinxService","AbstractTranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","XMLHttpRequest","onreadystatechange","DONE","responseText","open","setRequestHeader","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","processVersions","mucResource","getComponentVersion","componentName","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_bindChatRoomEventHandlers","emitAudioMutedEvent","_audioMuteHandler","_doesEndpointSendNewSourceInfo","emitVideoMutedEvent","_videoMuteHandler","emitVideoTypeEvent","_videoTypeHandler","_sourceInfoHandler","sourceInfoJSON","emitEventsFromHere","endpointSourceState","_sourceInfoJSON$sourc","sourceChanged","newMutedState","oldSourceState","newVideoType","newSourceNames","_memberLeftHandler","_this$chatRoom","_logOwnerChangedMessage","_this$chatRoom2","lastPresence","legacyGetPeerMediaInfo","mediaInfo","_this$_remoteSourceSt","setChatRoom","oldChatRoom","existingOwner","existingName","entry","INITIAL_STATE","localTracksDuration","startedTime","camera","desktop","FINAL_STATE","calculateLocalTrackDuration","newDuration","LocalTracksDuration","newLocalTracksDuration","createLocalTracksDurationEvent","APP","_getCodecMimeType","JitsiConference","_this$connection","_this$options$config$","_this$options$config$2","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","getSessionByJibriJid","_handleFocusPresence","_handleJibriPresence","prevStatus","_emitSessionUpdate","_addSession","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_liteModeContext","_audioSenderLimitReached","_videoSenderLimitReached","handleSubtitles","enableLocalRecording","recordingController","enableAnalytics","robot","_room","membersCount","getParticipantsWithoutHidden","_firefoxP2pEnabled","enableFirefoxP2p","resourceCreator","_config$videoQuality","_config$p2p","_config$videoQuality2","_config$videoQuality3","_config$p2p2","_config$e2eping","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","isEndConferenceSupported","localtrack","BridgeVideoType","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","removeCommandListener","sendTextMessage","sendPrivateTextMessage","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","_this$getLocalTracks","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","_this$getLocalTracks2","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_this$getLocalTracks3","_suspendMediaTransferForJvbConnection","_setNewVideoType","videoTypeChanged","presenceChanged","addPromises","removePromises","lock","unlock","isInteger","isVideoActive","_participant$_propert","features_jigasi","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_this$p2pJingleSessio","_this$p2pJingleSessio2","_this$jvbJingleSessio","_this$jvbJingleSessio2","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_this$connection2","_this$connection2$opt","_this$connection2$opt2","_this$connection$opti","_this$connection3","_this$connection3$opt","_this$connection3$opt2","ignoreDomain","bridgeChannel","preferSctp","sctpOffered","first","firstWsUrl","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","isSIPCallingSupported","_this$room$moderator$","_this$room","_this$room$moderator","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","_this$getActivePeerCo","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","getLocalUser","ownerId","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","_this$room2","pastMessage","JSON_TYPE_TRANSCRIPTION_RESULT","JSON_TYPE_TRANSLATION_RESULT","translationLanguage","_this$participants$js","_this$participants$js2","_this$participants$js3","_json$participant","_this$getLocalUser","_json$participant2","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","final","transcript","is_interim","stability","stable","unstable","finalText","fellowParticipantName","finalPaylaod","startLocalRecording","stopLocalRecording","startSIPVideoCall","stopSIPVideoCall","_this$room3","blacklist","initSDKConfig","sendMultipleVideoStreams","sourceNameSignaling","connectionConfig","clientNode","devConnectionConfig","conferenceConfig","enableVirtualBackground","enableNoiseCancellation","openBridgeChannel","enableLayerSuspension","JitsiConnection","isDev","jwt","parseJwt","errType","createConnectionFailedEvent","errorType","errorMessage","ANALYTICS_CONNECTION_DISCONNECTED","atob","usernameOverride","passwordOverride","setToken","initJitsiConference","dontParse","paramStr","paramParts","firstParam","part","param","decoded","parseURLParams","syncWithURL","getLogs","JitsiMediaDevicesEvents","DEVICE_LIST_CHANGED","PERMISSIONS_CHANGED","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","CustomSignalingLayer","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","timerWorkerScript","JitsiStreamPresenterEffect","_firstVideoTrack$getS","videoDiv","firstVideoTrack","_canvas","_ctx","getContext","_desktopElement","_videoElement","_frameRate","autoplay","play","display","_onVideoFrameTimer","_renderVideo","_track$getSettings","_desktopStream","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","_firstVideoTrack$getS2","_videoFrameTimerWorker","captureStream","_scriptDir","Module","readyPromiseResolve","moduleOverrides","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","arguments_","importScripts","readBinary","scriptDirectory","currentScript","xhr","responseType","wasmBinary","wasmMemory","out","WebAssembly","HEAPU8","HEAP32","wasmTable","Table","ABORT","updateGlobalBufferAndViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float64Array","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","arg","Memory","DYNAMICTOP_PTR","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","abort","RuntimeError","isDataURI","filename","path","wasmBinaryFile","getBinary","emscripten_realloc_buffer","grow","___wasm_call_ctors","calledRun","asmLibraryArg","dest","copyWithin","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","receiveInstance","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","binary","instantiate","instantiateStreaming","instantiateAsync","createWasm","run","doRun","postRun","preRun","runCaller","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_context","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","HEAPF32","_convertTo16BitPCM","f32Array","_rnnoise_destroy","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","_handleWorkerAction","_initScreenshotCapture","_streamWorker","_desktopTrack$getSett","_streamHeight","_streamWidth","storedCanvasContext","getImageData","_storedImageData","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","_this$_options","_this$_options$virtua","_this$_options$virtua2","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","_this$_options2","_this$_options2$virtu","_this$_options2$virtu2","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","ImageData","onloadeddata","segmentationDimensions","getAnalyticsAttributesFromOptions","video_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","localTrackIndex","localSourceNameTrack","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","createPresenterEffect","createRnnoiseProcessor","rnnoiseWasmInit","mod","createScreenshotCaptureEffect","createVirtualBackgroundEffect","dispatch","tflite","wasmCheck","_wasmCheck","_wasmCheck$feature","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","arrayBuffer","_loadModel","constants","recording","BUSY","ERROR","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errorTypes","logLevels","Logger","JitsiMediaDevices","newOptions","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","setLogLevel","setLogLevelById","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","isCollectingLocalStats","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","lineno","colno","setNetworkInfo","createAnalyticsEvent","hint","contentHint","precallTest","util","AuthUtil","sariskaMediaTransport","_mergeNamespaceAndModule","isLocalStats","_userId","_isLocalStats","_dominantSpeakerStart","_isDominantSpeaker","_isSilent","_hasLeft","_faceLandmarks","getUserId","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","getFaceLandmarks","u","onload","readbuffer","read","scriptArgs","quit","print","printErr","g","h","thisProgram","noExitRuntime","A","I","M","E","R","TextDecoder","S","subarray","decode","fromCharCode","O","HEAP8","HEAP16","HEAPU16","HEAPU32","HEAPF64","INITIAL_MEMORY","C","T","P","H","ne","W","D","L","onAbort","U","F","B","preloadedImages","preloadedAudios","N","G","z","X","J","K","hrtime","dateNow","Q","V","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Z","mappings","printChar","varargs","getStr","get64","ee","onExit","re","hardwareConcurrency","asm","monitorRunDependencies","instantiateWasm","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","___errno_location","ae","onRuntimeInitialized","preInit","getTokenAuthUrl","urlPattern","roleUpgrade","srcEvent","Function","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","currentExecutingScript","loadScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","parentNode","generateUsername","internals","firstOptions","reviver","protoAction","scan","SyntaxError","__proto__","safeParse","ignoreError","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","_flush","_reschedulePublishInterval","reschedule","isReady","cachedQueue","storeLogs","consoleTransport","globalTransports","addGlobalTransport","removeGlobalTransport","transportIdx","globalOptions","callerInfo","disableCallerInfo","fileLocation","column","getCallerInfo","transports","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","grammar","reg","subtype","sessionConfig","raddr","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","writer","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","_fillInSourceDataFromCache","newSimSsrcs","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","_restoreSimulcast","enableConferenceFlag","order","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","getParser","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","is","versionName","vendor","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","thrownErr","near","far","ReflectOwnKeys","Reflect","ReflectApply","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","_addListener","warning","newListener","warned","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","copy","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","prependOnceListener","position","originalListener","spliceOne","rawListeners","eventNames","flat","nodeType","nonce","noModule","jquery","pushStack","prevObject","eq","last","even","grep","odd","extend","isPlainObject","expando","noop","globalEval","makeArray","inArray","guid","support","ue","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","needsContext","Y","oe","xe","dir","childNodes","se","ownerDocument","getElementById","getElementsByClassName","qsa","ye","scope","be","querySelectorAll","removeAttribute","cacheLength","le","ce","fe","attrHandle","de","nextSibling","pe","he","ge","isDisabled","ve","isXML","namespaceURI","documentElement","setDocument","defaultView","top","className","createComment","getById","getElementsByName","getAttributeNode","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","contains","sortDetached","specified","escape","uniqueSort","detectDuplicates","sortStable","getText","firstChild","nodeValue","selectors","createPseudo","relative","preFilter","lastChild","uniqueID","pseudos","setFilters","not","lang","activeElement","hasFocus","tabIndex","checked","selected","selectedIndex","parent","button","lt","gt","nth","radio","checkbox","file","image","we","Ce","Te","Ee","filters","tokenize","compile","select","defaultValue","unique","isXMLDoc","escapeSelector","parseHTML","closest","prevAll","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","siblings","contentDocument","fail","Callbacks","stopOnFalse","memory","fireWith","fire","always","pipe","progress","notify","notifyWith","resolveWith","exceptionHook","stackTrace","rejectWith","getStackHook","when","readyException","readyWait","doScroll","uid","access","hasData","removeData","_removeData","dequeue","_queueHooks","clearQueue","composed","getRootNode","css","show","hide","toggle","createDocumentFragment","checkClone","cloneNode","noCloneChecked","option","thead","col","tr","td","_default","tbody","tfoot","colgroup","caption","th","optgroup","htmlPrefilter","createTextNode","namespace","isTrigger","special","delegateType","stopPropagation","stopImmediatePropagation","preventDefault","global","handle","triggered","bindType","origType","delegateCount","teardown","removeEvent","fix","delegateTarget","preDispatch","isPropagationStopped","currentTarget","isImmediatePropagationStopped","rnamespace","handleObj","postDispatch","addProp","originalEvent","load","noBubble","beforeunload","returnValue","isDefaultPrevented","defaultPrevented","relatedTarget","timeStamp","isSimulated","altKey","bubbles","cancelable","changedTouches","ctrlKey","detail","eventPhase","metaKey","pageX","pageY","shiftKey","charCode","keyCode","buttons","clientX","clientY","offsetX","offsetY","pointerId","pointerType","screenX","screenY","targetTouches","toElement","touches","which","blur","mouseenter","mouseleave","pointerenter","pointerleave","one","Ae","Ne","Se","ke","De","Le","je","qe","html","_evalUrl","Oe","cleanData","append","after","replaceWith","replaceChild","appendTo","prependTo","replaceAll","Pe","He","Ie","opener","getComputedStyle","Re","Be","Me","We","Fe","getPropertyValue","pixelBoxStyles","$e","cssText","marginLeft","offsetWidth","backgroundClip","clearCloneStyle","boxSizingReliable","pixelPosition","reliableMarginLeft","scrollboxSize","reliableTrDimensions","borderTopWidth","borderBottomWidth","offsetHeight","ze","_e","Ue","Ve","cssProps","Xe","Qe","Ye","Ge","visibility","Ke","letterSpacing","fontWeight","Je","Ze","ceil","et","getClientRects","cssHooks","opacity","cssNumber","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","orphans","widows","zIndex","zoom","isFinite","getBoundingClientRect","margin","padding","border","expand","fx","speeds","checkOn","optSelected","radioValue","tt","nt","removeAttr","attrHooks","rt","it","ot","at","st","removeProp","propFix","propHooks","addClass","removeClass","toggleClass","hasClass","ut","valHooks","focusin","ct","parentWindow","simulate","triggerHandler","parseXML","ft","dt","ht","vt","encodeURIComponent","serializeArray","wrapAll","firstElementChild","wrapInner","visible","createHTMLDocument","implementation","setOffset","using","pageYOffset","pageXOffset","offsetParent","scrollLeft","scrollTop","scrollTo","Height","Width","unbind","undelegate","hover","yt","proxy","holdReady","parseJSON","isFunction","isWindow","camelCase","isNumeric","mt","jQuery","bt","noConflict","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","nodeWrap","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","initAccum","isHostObject","mapToArray","overArg","setToArray","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","assocIndexOf","baseClone","isDeep","isFull","customizer","isArr","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","getMapData","getValue","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","thisArg","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","remainingWait","debounced","isInvoking","leadingEdge","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","arrayTag","asyncTag","errorTag","nullTag","proxyTag","undefinedTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","delta","colorDelta","abs","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","localCName","generateIdentifier","splitLines","splitSections","getDescription","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","writeCandidate","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","algorithm","getDtlsParameters","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","headerExtensions","fecMechanisms","rtcp","profile","rtpmapline","fmtps","wildcardRtcpFb","existingFeedback","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","fec","mechanism","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","sctpPort","sctpMapLines","writeSctpDescription","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","netType","addressType","isValidSDP","global$1","WebSocketImplementation","getWebSocketImplementation","DOMParserImplementation","getDOMParserImplementation","getDummyXMLDOMDocument","createDocument","documentMode","doc","docStrings","ActiveXObject","_getIEXmlDom","safe_add$1","str2binl","md5_cmn","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","MD5","hexdigest","hex_tab","binl2hex","binl2str","SASLMechanism","isClientFirst","mechname","onStart","onChallenge","challenge","clientChallenge","cookies","cookieName","expires","cookieObj","cookieValue","unescape","cookie","core_hmac_sha1","bkey","ipad","opad","binb2str","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","keystr$1","atobLookup","chr","keystr","btoaLookup","abab","accumulatedBits","btoa","groupsOfSix","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","validTag","validAttribute","validCSS","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ATTACHFAIL","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNode","isTagEqual","_xmlGenerator","xmlGenerator","xmlTextNode","xmlescape","xmlunescape","xmlHtmlNode","loadXML","copyElement","createHtml","cssAttrs","cssName","cssValue","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","fatal","sourceURL","lineNumber","_console","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","impNode","xmlGen","importNode","newElem","fragment","xhtml","ns","matchBare","matchBareFromJid","Handler","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","nsMatch","isMatch","elem_type","TimedHandler","period","lastCalled","Connection","setProtocol","_sasl_data","do_bind","do_session","mechanisms","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","iqFallbackHandler","WorkerWebsocket","Websocket","Bosh","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","disconnection_timeout","authzid","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","xmlOutput","nextValidRid","_queueData","timeoutHandler","deleteTimedHandler","addTimedHandler","iqtype","_sendRestart","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","Mechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","statusChanged","_dataRecv","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_connect_cb","_callback","bodyWrap","hasFeatures","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","request_auth_exchange","_onLegacyAuthIQResult","_auth2_cb","serverSignature","attribMatch","streamfeature_handlers","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","auth_str","iter","Hi","U_old","authMessage","cnonce","clientKey","serverKey","clientSignature","test_cnonce","core","Request","sends","xmlData","origFunc","date","NaN","dead","age","timeDead","_newXHR","getResponse","responseXML","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","reqIs0","reqIs1","valid_request","too_many_retries","_removeRequest","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","new_service","host","_buildStream","_checkStreamError","connectstatus","errorString","_onOpen","_onInitialMessage","_handleStreamStart","streamStart","parsedMessage","see_uri","_replaceMessageHandler","_streamWrap","CLOSED","closeString","rawStanza","startString","lmap","SharedWorker","_messageHandler","_attachCallback","method_name","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","_buildIQResult","query_attrs","iqresult","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_connectionStatus","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","byteToHex","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","tl","tmh","_md","hashfunc","generateUUID","stringToBytes","uuidToBytes","DNS","rnds","_sha","validate","Instance","globalThis","of","_len4","_key4","_len5","_key5","_len6","_key6","supportStreaming","bigInt","bulk","exceptions","memory64","mutableGlobal","multiValue","saturateConversions","signExtensions","tailCall","threads","references","typeReflection","funcReferences","CAMERA","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","AV1","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_REMOVED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","VIDEO_SSRCS_REMAPPED","AUDIO_SSRCS_REMAPPED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","nmd","paths","__webpack_exports__"],"sourceRoot":""}