{"version":3,"file":"sariska-media-transport.min.js","mappings":"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","sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/./JitsiConferenceErrors.ts","webpack://SariskaMediaTransport/./JitsiConferenceEvents.ts","webpack://SariskaMediaTransport/./JitsiTrackEvents.ts","webpack://SariskaMediaTransport/./modules/statistics/constants.js","webpack://SariskaMediaTransport/./JitsiTrackErrors.ts","webpack://SariskaMediaTransport/./JitsiTrackError.js","webpack://SariskaMediaTransport/./service/statistics/AnalyticsEvents.ts","webpack://SariskaMediaTransport/./service/statistics/Events.ts","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./modules/browser/index.js","webpack://SariskaMediaTransport/./modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./modules/util/MathUtil.js","webpack://SariskaMediaTransport/./modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./service/RTC/MediaType.ts","webpack://SariskaMediaTransport/./modules/flags/FeatureFlags.js","webpack://SariskaMediaTransport/./modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./modules/statistics/statistics.js","webpack://SariskaMediaTransport/./JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./JitsiParticipant.js","webpack://SariskaMediaTransport/./JitsiConnectionEvents.ts","webpack://SariskaMediaTransport/./JitsiConnectionErrors.ts","webpack://SariskaMediaTransport/./modules/util/Deferred.js","webpack://SariskaMediaTransport/./modules/util/Listenable.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./modules/e2ee/KeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://SariskaMediaTransport/./node_modules/uuid/wrapper.mjs","webpack://SariskaMediaTransport/./modules/e2ee/E2EEErrors.ts","webpack://SariskaMediaTransport/./modules/e2ee/SAS.js","webpack://SariskaMediaTransport/./modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./modules/e2ee/ManagedKeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./modules/xmpp/sha1.js","webpack://SariskaMediaTransport/./modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-stream-management/src/strophe.stream-management.js","webpack://SariskaMediaTransport/./modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./modules/util/Retry.js","webpack://SariskaMediaTransport/./modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/./JitsiTranscriptionStatus.ts","webpack://SariskaMediaTransport/./modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./modules/xmpp/BreakoutRooms.js","webpack://SariskaMediaTransport/./modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./modules/xmpp/RoomMetadata.ts","webpack://SariskaMediaTransport/./modules/settings/Settings.js","webpack://SariskaMediaTransport/./modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleHelperFunctions.js","webpack://SariskaMediaTransport/./service/RTC/MediaDirection.ts","webpack://SariskaMediaTransport/./modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./modules/sdp/SDP.js","webpack://SariskaMediaTransport/./modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./node_modules/async/dist/async.mjs","webpack://SariskaMediaTransport/./modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionState.ts","webpack://SariskaMediaTransport/./modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./modules/xmpp/MediaSessionEvents.ts","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://SariskaMediaTransport/./service/RTC/SignalingEvents.ts","webpack://SariskaMediaTransport/./service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./modules/sdp/SdpSimulcast.ts","webpack://SariskaMediaTransport/./modules/connectivity/TrackStreamingStatus.ts","webpack://SariskaMediaTransport/./modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./modules/RTC/RTC.js","webpack://SariskaMediaTransport/./service/connectivity/ConnectionQualityEvents.ts","webpack://SariskaMediaTransport/./modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./modules/detection/DetectionEvents.ts","webpack://SariskaMediaTransport/./modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./service/e2eping/E2ePingEvents.ts","webpack://SariskaMediaTransport/./modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./modules/litemode/LiteModeContext.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./modules/transcription/trackRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/word.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://SariskaMediaTransport/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./JitsiConference.js","webpack://SariskaMediaTransport/./modules/util/parseURLParams.js","webpack://SariskaMediaTransport/./config/index.js","webpack://SariskaMediaTransport/./JitsiConnection.js","webpack://SariskaMediaTransport/./JitsiMediaDevicesEvents.ts","webpack://SariskaMediaTransport/./JitsiMediaDevices.js","webpack://SariskaMediaTransport/./modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./modules/proxyconnection/CustomSignalingLayer.js","webpack://SariskaMediaTransport/./modules/proxyconnection/constants.ts","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/JitsiStreamPresenterEffect.js","webpack://SariskaMediaTransport/./node_modules/rnnoise-wasm/dist/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./SariskaMediaTransport.ts","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./modules/util/createAnalyticsEvent.js","webpack://SariskaMediaTransport/./index.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite-simd.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite.js","webpack://SariskaMediaTransport/./modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/Logger.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./node_modules/jquery/dist/jquery.slim.min.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/../src/strophe.disco.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/index.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/md5-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/rng-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/sha1-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v1.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v3.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v35.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v4.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v5.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./service/RTC/BridgeVideoType.js","webpack://SariskaMediaTransport/./service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./service/RTC/RTCEvents.ts","webpack://SariskaMediaTransport/./service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./service/RTC/VideoType.ts","webpack://SariskaMediaTransport/./service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./service/statistics/constants.ts","webpack://SariskaMediaTransport/./service/xmpp/XMPPEvents.ts","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/webpack/runtime/amd options","webpack://SariskaMediaTransport/webpack/runtime/compat get default export","webpack://SariskaMediaTransport/webpack/runtime/define property getters","webpack://SariskaMediaTransport/webpack/runtime/global","webpack://SariskaMediaTransport/webpack/runtime/hasOwnProperty shorthand","webpack://SariskaMediaTransport/webpack/runtime/make namespace object","webpack://SariskaMediaTransport/webpack/runtime/node module decorator","webpack://SariskaMediaTransport/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(self, () => {\nreturn ","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * The conference is redirected to a visitor node.\n     */\n    REDIRECTED = 'conference.redirected',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const REDIRECTED = JitsiConferenceErrors.REDIRECTED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum JitsiConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A connection to the video bridge's data channel has been closed.\n     * This event is only emitted in \n     */\n    DATA_CHANNEL_CLOSED = 'conference.dataChannelClosed',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates the state of sources attached to a given remote participant has changed.\n     */\n    PARTICIPANT_SOURCE_UPDATED = 'conference.participant_source_updated',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated',\n\n    SUBTITLES_RECEIVED = 'conference.subtitles.received',\n\n    ANALYTICS_EVENT_RECEIVED = 'analytics.event.received',\n\n    TRACK_UPDATED = 'conference.track.updated',\n\n    /**\n     * Event fired when the conference metadata is updated.\n     */\n    METADATA_UPDATED = 'conference.metadata.updated',\n\n    E2EE_VERIFICATION_AVAILABLE = 'conference.e2ee.verification.available',\n\n    E2EE_VERIFICATION_READY = 'conference.e2ee.verification.ready',\n\n    E2EE_VERIFICATION_COMPLETED = 'conference.e2ee.verification.completed'\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DATA_CHANNEL_CLOSED = JitsiConferenceEvents.DATA_CHANNEL_CLOSED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const E2EE_VERIFICATION_AVAILABLE = JitsiConferenceEvents.E2EE_VERIFICATION_AVAILABLE;\nexport const E2EE_VERIFICATION_READY = JitsiConferenceEvents.E2EE_VERIFICATION_READY;\nexport const E2EE_VERIFICATION_COMPLETED = JitsiConferenceEvents.E2EE_VERIFICATION_COMPLETED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const PARTICIPANT_SOURCE_UPDATED = JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = JitsiConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\nexport const SUBTITLES_RECEIVED = JitsiConferenceEvents.SUBTITLES_RECEIVED;\nexport const ANALYTICS_EVENT_RECEIVED = JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED;\nexport const TRACK_UPDATED = JitsiConferenceEvents.TRACK_UPDATED;\nexport const METADATA_UPDATED = JitsiConferenceEvents.METADATA_UPDATED;\n","export enum JitsiTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed',\n\n    /**\n     * An SSRC has been remapped. The track is now associated with a new participant.\n     */\n    TRACK_OWNER_CHANGED = 'track.owner_changed',\n\n    /**\n     * A track is being removed. Fired when a session terminates for tracks\n     * that persist in ssrc-rewriting mode.\n     */\n    TRACK_REMOVED = 'track.removed',\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\nexport const TRACK_OWNER_CHANGED = JitsiTrackEvents.TRACK_OWNER_CHANGED;\nexport const TRACK_REMOVED = JitsiTrackEvents.TRACK_REMOVED;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\nexport const CHROME = 'chrome';\nexport const OPERA = 'opera';\nexport const FIREFOX = 'firefox';\nexport const INTERNET_EXPLORER = 'iexplorer';\nexport const SAFARI = 'safari';\nexport const NWJS = 'nwjs';\nexport const ELECTRON = 'electron';\nexport const REACT_NATIVE = 'react-native';\nexport const UNKNOWN = 'unknown';","import Bowser from 'bowser';\nimport { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN } from './browsers';\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\n\nconst bowserNameToJitsiName = {\n  'Chrome': CHROME,\n  'Chromium': CHROME,\n  'Opera': OPERA,\n  'Firefox': FIREFOX,\n  'Internet Explorer': INTERNET_EXPLORER,\n  'Safari': SAFARI\n};\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\n\nfunction _detectChromiumBased() {\n  const userAgent = navigator.userAgent;\n  const browserInfo = {\n    name: UNKNOWN,\n    version: undefined\n  };\n\n  if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n    // Edge is currenly supported only on desktop and android.\n    if (userAgent.match(/Edg(A?)/)) {\n      // Compare the underlying chromium version.\n      const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n      if (Number.parseInt(version, 10) > 72) {\n        browserInfo.name = CHROME;\n        browserInfo.version = version;\n      }\n    } else {\n      browserInfo.name = CHROME;\n      browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n    }\n  }\n\n  return browserInfo;\n}\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\n\n\nfunction _detectElectron() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/Electron/)) {\n    const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n    return {\n      name: ELECTRON,\n      version\n    };\n  }\n}\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\n\n\nfunction _detectNWJS() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/JitsiMeetNW/)) {\n    const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n    return {\n      name: NWJS,\n      version\n    };\n  }\n}\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\n\n\nfunction _detectReactNative() {\n  const match = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n  let version; // If we're remote debugging a React Native app, it may be treated as\n  // Chrome. Check navigator.product as well and always return some version\n  // even if we can't get the real one.\n\n  if (match || navigator.product === 'ReactNative') {\n    let name;\n\n    if (match && match.length > 2) {\n      name = match[1];\n      version = match[2];\n    }\n\n    name || (name = 'react-native');\n    version || (version = 'unknown');\n    return {\n      name: REACT_NATIVE,\n      version\n    };\n  }\n}\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\n\n\nfunction _detect(bowser) {\n  let browserInfo;\n  const detectors = [_detectReactNative, _detectElectron, _detectNWJS]; // Try all browser detectors\n\n  for (let i = 0; i < detectors.length; i++) {\n    browserInfo = detectors[i]();\n\n    if (browserInfo) {\n      return browserInfo;\n    }\n  }\n\n  const name = bowser.getBrowserName();\n\n  if (name in bowserNameToJitsiName) {\n    return {\n      name: bowserNameToJitsiName[name],\n      version: bowser.getBrowserVersion()\n    };\n  } // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n\n\n  browserInfo = _detectChromiumBased();\n\n  if (browserInfo) {\n    return browserInfo;\n  }\n\n  return {\n    name: UNKNOWN,\n    version: undefined\n  };\n}\n/**\n * Implements browser detection.\n */\n\n\nexport default class BrowserDetection {\n  /**\n   * Creates new BrowserDetection instance.\n   *\n   * @param {Object} [browserInfo] - Information about the browser.\n   * @param {string} browserInfo.name - The name of the browser.\n   * @param {string} browserInfo.version - The version of the browser.\n   */\n  constructor(browserInfo) {\n    let name, version;\n    this._bowser = Bowser.getParser(navigator.userAgent);\n\n    if (typeof browserInfo === 'undefined') {\n      const detectedBrowserInfo = _detect(this._bowser);\n\n      name = detectedBrowserInfo.name;\n      version = detectedBrowserInfo.version;\n    } else if (browserInfo.name in bowserNameToJitsiName) {\n      name = bowserNameToJitsiName[browserInfo.name];\n      version = browserInfo.version;\n    } else {\n      name = UNKNOWN;\n      version = undefined;\n    }\n\n    this._name = name;\n    this._version = version;\n  }\n  /**\n   * Gets current browser name.\n   * @returns {string}\n   */\n\n\n  getName() {\n    return this._name;\n  }\n  /**\n   * Checks if current browser is Chrome.\n   * @returns {boolean}\n   */\n\n\n  isChrome() {\n    return this._name === CHROME;\n  }\n  /**\n   * Checks if current browser is Opera.\n   * @returns {boolean}\n   */\n\n\n  isOpera() {\n    return this._name === OPERA;\n  }\n  /**\n   * Checks if current browser is Firefox.\n   * @returns {boolean}\n   */\n\n\n  isFirefox() {\n    return this._name === FIREFOX;\n  }\n  /**\n   * Checks if current browser is Internet Explorer.\n   * @returns {boolean}\n   */\n\n\n  isIExplorer() {\n    return this._name === INTERNET_EXPLORER;\n  }\n  /**\n   * Checks if current browser is Safari.\n   * @returns {boolean}\n   */\n\n\n  isSafari() {\n    return this._name === SAFARI;\n  }\n  /**\n   * Checks if current environment is NWJS.\n   * @returns {boolean}\n   */\n\n\n  isNWJS() {\n    return this._name === NWJS;\n  }\n  /**\n   * Checks if current environment is Electron.\n   * @returns {boolean}\n   */\n\n\n  isElectron() {\n    return this._name === ELECTRON;\n  }\n  /**\n   * Checks if current environment is React Native.\n   * @returns {boolean}\n   */\n\n\n  isReactNative() {\n    return this._name === REACT_NATIVE;\n  }\n  /**\n   * Returns the version of the current browser.\n   * @returns {string}\n   */\n\n\n  getVersion() {\n    return this._version;\n  }\n  /**\n   * Check if the parsed browser matches the passed condition.\n   *\n   * @param {Object} checkTree - It's one or two layered object, which can include a\n   * platform or an OS on the first layer and should have browsers specs on the\n   * bottom layer.\n   * Eg. { chrome: '>71.1.0' }\n   *     { windows: { chrome: '<70.2' } }\n   * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n   * conditions, false if not and undefined when the browser is not defined in the\n   * checktree object or when the current browser's version is unknown.\n   * @private\n   */\n\n\n  _checkCondition(checkTree) {\n    if (this._version) {\n      return this._bowser.satisfies(checkTree);\n    }\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * greater than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionGreaterThan(version) {\n    return this._checkCondition({\n      [this._name]: `>${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * lower than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionLessThan(version) {\n    return this._checkCondition({\n      [this._name]: `<${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * equal to the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   * A loose-equality operator is used here so that it matches the sub-versions as well.\n   */\n\n\n  isVersionEqualTo(version) {\n    return this._checkCondition({\n      [this._name]: `~${version}`\n    });\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\n/**\n * Dummy implementation of Storage interface.\n */\n\nclass DummyLocalStorage extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_storage\", {});\n  }\n\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._storage = {};\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return Object.keys(this._storage).length;\n  }\n  /**\n   * Will return that key's value associated to the passed key name.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {*} - The key value.\n   */\n\n\n  getItem(keyName) {\n    return this._storage[keyName];\n  }\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   *\n   * @param {string} keyName - The key name.\n   * @param {*} keyValue - The key value.\n   * @returns {void}\n   */\n\n\n  setItem(keyName, keyValue) {\n    this._storage[keyName] = keyValue;\n  }\n  /**\n   * When passed a key name, will remove that key from the storage.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {void}\n   */\n\n\n  removeItem(keyName) {\n    delete this._storage[keyName];\n  }\n  /**\n   * When passed a number n, this method will return the name of the nth key in the storage.\n   *\n   * @param {number} idx - The index of the key.\n   * @returns {string} - The nth key name.\n   */\n\n\n  key(n) {\n    const keys = Object.keys(this._storage);\n\n    if (keys.length <= n) {\n      return undefined;\n    }\n\n    return keys[n];\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    return JSON.stringify(this._storage);\n  }\n\n}\n/**\n * Wrapper class for browser's local storage object.\n */\n\n\nclass JitsiLocalStorage extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Storage} storage browser's local storage object.\n   */\n  constructor() {\n    super();\n\n    try {\n      this._storage = window.localStorage;\n      this._localStorageDisabled = false;\n    } catch (ignore) {// localStorage throws an exception.\n    }\n\n    if (!this._storage) {\n      // Handles the case when window.localStorage is undefined or throws an exception.\n      console.warn('Local storage is disabled.');\n      this._storage = new DummyLocalStorage();\n      this._localStorageDisabled = true;\n    }\n  }\n  /**\n   * Returns true if window.localStorage is disabled and false otherwise.\n   *\n   * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n   */\n\n\n  isLocalStorageDisabled() {\n    return this._localStorageDisabled;\n  }\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._storage.clear();\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return this._storage.length;\n  }\n  /**\n   * Returns that passed key's value.\n   * @param {string} keyName the name of the key you want to retrieve\n   * the value of.\n   * @returns {String|null} the value of the key. If the key does not exist,\n   * null is returned.\n   */\n\n\n  getItem(keyName) {\n    return this._storage.getItem(keyName);\n  }\n  /**\n   * Adds a key to the storage, or update key's value if it already exists.\n   * @param {string} keyName - the name of the key you want to create/update.\n   * @param {string} keyValue - the value you want to give the key you are\n   * creating/updating.\n   * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n   */\n\n\n  setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n    this._storage.setItem(keyName, keyValue);\n\n    if (!dontEmitChangedEvent) {\n      this.emit('changed');\n    }\n  }\n  /**\n   * Remove a key from the storage.\n   * @param {string} keyName the name of the key you want to remove.\n   */\n\n\n  removeItem(keyName) {\n    this._storage.removeItem(keyName);\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater\n   * than or equal to the number of key/value pairs in the object.\n   *\n   * @param {number} i - The index of the key in the list.\n   * @returns {string}\n   */\n\n\n  key(i) {\n    return this._storage.key(i);\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    if (this.isLocalStorageDisabled()) {\n      return this._storage.serialize();\n    }\n\n    const length = this._storage.length;\n    const localStorageContent = {};\n\n    for (let i = 0; i < length; i++) {\n      const key = this._storage.key(i);\n\n      localStorageContent[key] = this._storage.getItem(key);\n    }\n\n    return JSON.stringify(localStorageContent);\n  }\n\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(`This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if the browser supports track based statistics for the local video track. Otherwise,\n     * track resolution and framerate will be calculated based on the 'outbound-rtp' statistics.\n     * @returns {boolean}\n     */\n    supportsTrackBasedStats() {\n        return this.isChromiumBased() && this.isVersionLessThan(112);\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        // We do not want to enable unified plan on Electron clients that have Chromium version < 96 because of\n        // performance and screensharing issues.\n        return !(this.isElectron() && (this._getChromiumBasedVersion() < 96));\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/**\n * @type Class\n */\nimport { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n/**\n * The audio context.\n * @type {AudioContext}\n */\nlet context = null;\n\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n    this.source = null;\n    this.analyser = null;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    context.resume();\n    this.analyser = context.createAnalyser();\n\n    this.analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    this.analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    this.source = context.createMediaStreamSource(this.stream);\n\n    this.source.connect(this.analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(this.analyser.frequencyBinCount);\n\n            this.analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n\n    this.analyser?.disconnect();\n    this.analyser = null;\n    this.source?.disconnect();\n    this.source = null;\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(window?.AudioContext);\n};\n\n/**\n * Disconnects the audio context.\n */\nLocalStatsCollector.disconnectAudioContext = async function() {\n    if (context) {\n        logger.info('Disconnecting audio context');\n        await context.close();\n        context = null;\n    }\n};\n\n/**\n * Connects the audio context.\n */\nLocalStatsCollector.connectAudioContext = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    logger.info('Connecting audio context');\n    context = new AudioContext();\n\n    context.suspend();\n};\n\n/**\n * Initialize the audio context on startup.\n */\nLocalStatsCollector.connectAudioContext();\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","\nimport browser from '../browser';\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {object} flags - The feature flags.\n     * @param {boolean=} flags.runInLiteMode - Enables lite mode for testing to disable media decoding.\n     * @param {boolean=} flags.ssrcRewritingEnabled - Use SSRC rewriting. Requires sourceNameSignaling to be enabled.\n     * @param {boolean=} flags.enableJoinAsVisitor - Enable joining as a visitor.\n     */\n    init(flags) {\n        this._runInLiteMode = Boolean(flags.runInLiteMode);\n        this._ssrcRewriting = Boolean(flags.ssrcRewritingEnabled);\n        this._joinAsVisitor = Boolean(flags.enableJoinAsVisitor ?? true);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSendSupportEnabled() {\n        return browser.supportsUnifiedPlan();\n    }\n\n    /**\n     * Checks if the run in lite mode is enabled.\n     * This will cause any media to be received and not decoded. (Insertable streams are used to discard\n     * all media before it is decoded). This can be used for various test scenarios.\n     *\n     * @returns {boolean}\n     */\n    isRunInLiteModeEnabled() {\n        return this._runInLiteMode && browser.supportsInsertableStreams();\n    }\n\n    /**\n     * Checks if the clients supports re-writing of the SSRCs on the media streams by the bridge.\n     * @returns {boolean}\n     */\n    isSsrcRewritingSupported() {\n        return this._ssrcRewriting;\n    }\n\n    /**\n     * Checks if the clients supports joining as a visitor.\n     * @returns {boolean}\n     */\n    isJoinAsVisitorSupported() {\n        return this._joinAsVisitor;\n    }\n}\n\nexport default new FeatureFlags();\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats && browser.supportsReceiverStats()) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                for (const ssrc in audioLevels) {\n                    if (audioLevels.hasOwnProperty(ssrc)) {\n                        // Use a scaling factor of 2.5 to report the same audio levels that getStats reports.\n                        const audioLevel = audioLevels[ssrc] * 2.5;\n\n                        this.eventEmitter.emit(\n                            StatisticsEvents.AUDIO_LEVEL,\n                            this.peerconnection,\n                            Number.parseInt(ssrc, 10),\n                            audioLevel,\n                            false /* isLocal */);\n                    }\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        ssrcStats.resetBitrate();\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let audioCodec;\n        let videoCodec;\n\n        if (track.isAudioTrack()) {\n            audioBitrateDownload += ssrcStats.bitrate.download;\n            audioBitrateUpload += ssrcStats.bitrate.upload;\n            audioCodec = ssrcStats.codec;\n        } else {\n            videoBitrateDownload += ssrcStats.bitrate.download;\n            videoBitrateUpload += ssrcStats.bitrate.upload;\n            videoCodec = ssrcStats.codec;\n        }\n\n        const participantId = track.getParticipantId();\n\n        if (!participantId) {\n            // All tracks in ssrc-rewriting mode need not have a participant associated with it.\n            if (!FeatureFlags.isSsrcRewritingSupported()) {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n            continue; // eslint-disable-line no-continue\n        }\n\n        const userCodecs = codecs[participantId] ?? { };\n\n        userCodecs[ssrc] = {\n            audio: audioCodec,\n            video: videoCodec\n        };\n\n        codecs[participantId] = userCodecs;\n        const { resolution } = ssrcStats;\n\n        if (!track.isVideoTrack()\n            || isNaN(resolution?.height)\n            || isNaN(resolution?.width)\n            || resolution.height === -1\n            || resolution.width === -1) {\n            continue; // eslint-disable-line no-continue\n        }\n        const userResolutions = resolutions[participantId] || {};\n\n        // If simulcast (VP8) is used, there will be 3 \"outbound-rtp\" streams with different resolutions and 3\n        // different SSRCs. Based on the requested resolution and the current cpu and available bandwidth\n        // values, some of the streams might get suspended. Therefore the actual send resolution needs to be\n        // calculated based on the outbound-rtp streams that are currently active for the simulcast case.\n        // However for the SVC case, there will be only 1 \"outbound-rtp\" stream which will have the correct\n        // send resolution width and height.\n        if (track.isLocal() && !browser.supportsTrackBasedStats() && this.peerconnection.doesTrueSimulcast()) {\n            const localSsrcs = this.peerconnection.getLocalVideoSSRCs(track);\n\n            for (const localSsrc of localSsrcs) {\n                const ssrcResolution = this.ssrc2stats.get(localSsrc)?.resolution;\n\n                // The code processes resolution stats only for 'outbound-rtp' streams that are currently active.\n                if (ssrcResolution?.height && ssrcResolution?.width) {\n                    resolution.height = Math.max(resolution.height, ssrcResolution.height);\n                    resolution.width = Math.max(resolution.width, ssrcResolution.width);\n                }\n            }\n        }\n\n        userResolutions[ssrc] = resolution;\n        resolutions[participantId] = userResolutions;\n\n        if (ssrcStats.framerate > 0) {\n            const userFramerates = framerates[participantId] || {};\n\n            userFramerates[ssrc] = ssrcStats.framerate;\n            framerates[participantId] = userFramerates;\n        }\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Calculates the frames per second rate between before and now using a supplied field name and its value in stats.\n * @param {RTCOutboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCOutboundRtpStreamStats|RTCSentRtpStreamStats} before the previous stats\n * @param {string} fieldName the field to use for calculations.\n * @returns {number} the calculated frame rate between now and before.\n */\nStatsCollector.prototype._calculateFps = function(now, before, fieldName) {\n    const timeMs = now.timestamp - before.timestamp;\n    let frameRate = 0;\n\n    if (timeMs > 0 && now[fieldName]) {\n        const numberOfFramesSinceBefore = now[fieldName] - before[fieldName];\n\n        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n    }\n\n    return frameRate;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        const before = this.previousStatsReport ? this.previousStatsReport.get(now.id) : null;\n\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            if (before) {\n                const packetsBefore = this.getNonNegativeValue(before[key]);\n                const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n                const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n                const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n                const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n                ssrcStats.setLoss({\n                    packetsTotal: packetsDiff + packetsLostDiff,\n                    packetsLost: packetsLostDiff,\n                    isDownloadStream\n                });\n            }\n\n            let resolution;\n\n            // Process the stats for 'inbound-rtp' streams always and 'outbound-rtp' only if the browser is\n            // Chromium based and version 112 and later since 'track' based stats are no longer available there\n            // for calculating send resolution and frame rate.\n            if (typeof now.frameHeight !== 'undefined' && typeof now.frameWidth !== 'undefined') {\n                // Assume the stream is active if the field is missing in the stats(Firefox)\n                const isStreamActive = now.active ?? true;\n\n                if (now.type === 'inbound-rtp' || (!browser.supportsTrackBasedStats() && isStreamActive)) {\n                    resolution = {\n                        height: now.frameHeight,\n                        width: now.frameWidth\n                    };\n                }\n            }\n            ssrcStats.setResolution(resolution);\n\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate && before) {\n                frameRate = this._calculateFps(now, before, 'framesSent');\n            }\n\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (now.type === 'inbound-rtp' && before) {\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else if (before) {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Continue to use the 'track' based stats for Firefox and Safari and older versions of Chromium.\n        } else if (browser.supportsTrackBasedStats()\n            && now.type === 'track'\n            && now.kind === MediaType.VIDEO\n            && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getSsrcByTrackId(now.trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate && before) {\n                frameRate = this._calculateFps(now, before, 'framesSent');\n            }\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    if (Object.keys(byteSentStats).length) {\n        this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    }\n\n    this._processAndEmitReport();\n};\n","/**\n * @type Class\n */\nimport EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\nStatistics.analyticsEventEmitter = new EventEmitter();\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(track, callback) {\n    if (browser.isIosBrowser()) {\n        // On iOS browsers audio is lost if the audio input device is in use by another app\n        // https://bugs.webkit.org/show_bug.cgi?id=233473\n        // The culprit was using the AudioContext, so now we close the AudioContext during\n        // the track being muted, and re-instantiate it afterwards.\n        track.addEventListener(\n        JitsiTrackEvents.NO_DATA_FROM_SOURCE,\n\n        /**\n         * Closes AudioContext on no audio data, and enables it on data received again.\n         *\n         * @param {boolean} value - Whether we receive audio data or not.\n         */\n        async value => {\n            if (value) {\n                for (const localStat of Statistics.localStats) {\n                    localStat.stop();\n                }\n\n                await LocalStats.disconnectAudioContext();\n            } else {\n                LocalStats.connectAudioContext();\n                for (const localStat of Statistics.localStats) {\n                    localStat.start();\n                }\n            }\n        });\n    }\n\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    track.addEventListener(\n        JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n        () => {\n            Statistics.stopLocalStats(track);\n        });\n\n    const stream = track.getOriginalStream();\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(track) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    const stream = track.getOriginalStream();\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n    let confID = this.options.confID;\n\n    // confID - domain/tenant/roomName\n    // roomName - meeting name or breakout room ID\n    // For breakout rooms we change the conference ID used for callstats to use\n    // the room ID instead of the meeting name\n    if (!confID.endsWith(this.options.roomName)) {\n        confID = `${this.options.confID.slice(0, this.options.confID.lastIndexOf('/'))}/${this.options.roomName}`;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n * @param {boolean} silence - Whether the dominant speaker is silent or not.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid, silence) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid, silence);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\n\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n    Statistics.analyticsEventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, eventName, properties);\n};\n\n\nStatistics.prototype.addAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.on(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\nStatistics.prototype.removeAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.removeListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\n\n\n\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    chatRoom.addListener(JitsiTrackEvents.TRACK_REMOVED, track => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n    chatRoom.addListener(XMPPEvents.ROOM_MAX_USERS_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.REDIRECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.REDIRECTED);\n    chatRoom.addListener(XMPPEvents.REDIRECTED,\n        () => conference.leave().catch(e => logger.log('Error leaving on redirected', e)));\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n    chatRoom.addListener(XMPPEvents.MUC_DESTROYED, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts, nick, isGuest) => {\n            const id = Strophe.getResourceFromJid(jid);\n            if (txt.indexOf(\"Transcript\") !== -1 || txt.indexOf(\"Fellow Jitser\") !== -1) {\n                return;\n            }\n          \n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts, nick, isGuest);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        // Ignore the strartmuted policy if the presence is received from self. The moderator should join with\n        // available local sources and the policy needs to be applied only on users that join the call after.\n        if (conference.myUserId() === from) {\n            return;\n        }\n        const participant = conference.getParticipantById(from);\n\n        if (!participant || !participant.isModerator()) {\n            return;\n        }\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n\n    // Room metadata.\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_METADATA_UPDATED,\n        JitsiConferenceEvents.METADATA_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous, silence) => {\n            if ((conference.lastDominantSpeaker !== dominant || conference.dominantSpeakerIsSilent !== silence)\n                    && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.dominantSpeakerIsSilent = silence;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous, silence);\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid, silence);\n                }\n                if (conference.lastDominantSpeaker !== dominant) {\n                    if (previous && previous.length) {\n                        const speakerList = previous.slice(0);\n\n                        // Add the dominant speaker to the top of the list (exclude self).\n                        if (conference.myUserId !== dominant) {\n                            speakerList.splice(0, 0, dominant);\n                        }\n\n                        // Trim the list to the top 5 speakers only.\n                        if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                            speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                        }\n                        conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                    }\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_CLOSED, ev => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_CLOSED, ev);\n    });\n\n    rtc.addListener(RTCEvents.VIDEO_SSRCS_REMAPPED, msg => {\n        for (const session of this.conference.getMediaSessions()) {\n            session.processSourceMap(msg, MediaType.VIDEO);\n        }\n    });\n\n    rtc.addListener(RTCEvents.AUDIO_SSRCS_REMAPPED, msg => {\n        for (const session of this.conference.getMediaSessions()) {\n            session.processSourceMap(msg, MediaType.AUDIO);\n        }\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            if (audioMuted) {\n                conference.isMutedByFocus = true;\n            }\n\n            if (videoMuted) {\n                conference.isVideoMutedByFocus = true;\n            }\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n\n        /**\n         * Remote sources associated with the participant in the following format.\n         * Map<mediaType, Map<sourceName, sourceInfo>>\n         *\n         * mediaType - 'audio' or 'video'.\n         * sourceName - name of the remote source.\n         * sourceInfo: {\n         *   muted: boolean;\n         *   videoType: string;\n         * }\n         */\n        this._sources = new Map();\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and which belong to this\n     * JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified mediaType and which belong to this\n     * JitsiParticipant are muted; otherwise, false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * Sets source info.\n     * @param {MediaType} mediaType The media type, 'audio' or 'video'.\n     * @param {boolean} muted The new muted state.\n     * @param {string} sourceName The name of the source.\n     * @param {string} videoType The video type of the source.\n     * @returns {void}\n     */\n    _setSources(mediaType, muted, sourceName, videoType) {\n        let sourceByMediaType = this._sources.get(mediaType);\n        const sourceInfo = {\n            muted,\n            videoType\n        };\n\n        if (sourceByMediaType?.size) {\n            sourceByMediaType.set(sourceName, sourceInfo);\n\n            return;\n        }\n\n        sourceByMediaType = new Map();\n        sourceByMediaType.set(sourceName, sourceInfo);\n        this._sources.set(mediaType, sourceByMediaType);\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid() {\n        return this._connectionJid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Returns the sources associated with this participant.\n     * @returns Map<string, Map<string, Object>>\n     */\n    getSources() {\n        return this._sources;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return this._identity?.user?.['hidden-from-recorder'] === 'true';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid) {\n        this._connectionJid = newJid;\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = JitsiConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        this._enabling && await this._enabling;\n\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","export enum E2EEErrors {\n    E2EE_SAS_KEYS_MAC_MISMATCH = 'e2ee.sas.keys-mac-mismatch',\n    E2EE_SAS_MAC_MISMATCH = 'e2ee.sas.mac-mismatch',\n    E2EE_SAS_MISSING_KEY =  'e2ee.sas.missing-key',\n    E2EE_SAS_COMMITMENT_MISMATCHED =  'e2ee.sas.commitment-mismatched',\n    E2EE_SAS_CHANNEL_VERIFICATION_FAILED = 'e2ee.sas.channel-verification-failed',\n    E2EE_SAS_INVALID_SAS_VERIFICATION =  'e2ee.sas.invalid-sas-verification',\n}\n","/* eslint-disable no-bitwise */\n/* eslint-disable no-mixed-operators */\n\n/**\n * Generates a SAS composed of decimal numbers.\n * Borrowed from the Matrix JS SDK.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns Array<number>\n */\nfunction generateDecimalSas(sasBytes) {\n    /**\n     *      +--------+--------+--------+--------+--------+\n     *      | Byte 0 | Byte 1 | Byte 2 | Byte 3 | Byte 4 |\n     *      +--------+--------+--------+--------+--------+\n     * bits: 87654321 87654321 87654321 87654321 87654321\n     *       \\____________/\\_____________/\\____________/\n     *         1st number    2nd number     3rd number\n     */\n    return [\n        (sasBytes[0] << 5 | sasBytes[1] >> 3) + 1000,\n        ((sasBytes[1] & 0x7) << 10 | sasBytes[2] << 2 | sasBytes[3] >> 6) + 1000,\n        ((sasBytes[3] & 0x3f) << 7 | sasBytes[4] >> 1) + 1000\n    ];\n}\n\nconst emojiMapping = [\n    [ '🐶', 'dog' ],\n    [ '🐱', 'cat' ],\n    [ '🦁', 'lion' ],\n    [ '🐎', 'horse' ],\n    [ '🦄', 'unicorn' ],\n    [ '🐷', 'pig' ],\n    [ '🐘', 'elephant' ],\n    [ '🐰', 'rabbit' ],\n    [ '🐼', 'panda' ],\n    [ '🐓', 'rooster' ],\n    [ '🐧', 'penguin' ],\n    [ '🐢', 'turtle' ],\n    [ '🐟', 'fish' ],\n    [ '🐙', 'octopus' ],\n    [ '🦋', 'butterfly' ],\n    [ '🌷', 'flower' ],\n    [ '🌳', 'tree' ],\n    [ '🌵', 'cactus' ],\n    [ '🍄', 'mushroom' ],\n    [ '🌏', 'globe' ],\n    [ '🌙', 'moon' ],\n    [ '☁️', 'cloud' ],\n    [ '🔥', 'fire' ],\n    [ '🍌', 'banana' ],\n    [ '🍎', 'apple' ],\n    [ '🍓', 'strawberry' ],\n    [ '🌽', 'corn' ],\n    [ '🍕', 'pizza' ],\n    [ '🎂', 'cake' ],\n    [ '❤️', 'heart' ],\n    [ '🙂', 'smiley' ],\n    [ '🤖', 'robot' ],\n    [ '🎩', 'hat' ],\n    [ '👓', 'glasses' ],\n    [ '🔧', 'spanner' ],\n    [ '🎅', 'santa' ],\n    [ '👍', 'thumbs up' ],\n    [ '☂️', 'umbrella' ],\n    [ '⌛', 'hourglass' ],\n    [ '⏰', 'clock' ],\n    [ '🎁', 'gift' ],\n    [ '💡', 'light bulb' ],\n    [ '📕', 'book' ],\n    [ '✏️', 'pencil' ],\n    [ '📎', 'paperclip' ],\n    [ '✂️', 'scissors' ],\n    [ '🔒', 'lock' ],\n    [ '🔑', 'key' ],\n    [ '🔨', 'hammer' ],\n    [ '☎️', 'telephone' ],\n    [ '🏁', 'flag' ],\n    [ '🚂', 'train' ],\n    [ '🚲', 'bicycle' ],\n    [ '✈️', 'aeroplane' ],\n    [ '🚀', 'rocket' ],\n    [ '🏆', 'trophy' ],\n    [ '⚽', 'ball' ],\n    [ '🎸', 'guitar' ],\n    [ '🎺', 'trumpet' ],\n    [ '🔔', 'bell' ],\n    [ '⚓️', 'anchor' ],\n    [ '🎧', 'headphones' ],\n    [ '📁', 'folder' ],\n    [ '📌', 'pin' ]\n];\n\n/**\n * Generates a SAS composed of defimal numbers.\n * Borrowed from the Matrix JS SDK.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns Array<number>\n */\nfunction generateEmojiSas(sasBytes) {\n    // Just like base64.\n    const emojis = [\n        sasBytes[0] >> 2,\n        (sasBytes[0] & 0x3) << 4 | sasBytes[1] >> 4,\n        (sasBytes[1] & 0xf) << 2 | sasBytes[2] >> 6,\n        sasBytes[2] & 0x3f,\n        sasBytes[3] >> 2,\n        (sasBytes[3] & 0x3) << 4 | sasBytes[4] >> 4,\n        (sasBytes[4] & 0xf) << 2 | sasBytes[5] >> 6\n    ];\n\n    return emojis.map(num => emojiMapping[num]);\n}\n\nconst sasGenerators = {\n    decimal: generateDecimalSas,\n    emoji: generateEmojiSas\n};\n\n/**\n * Generates multiple SAS for the given bytes.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns {object}\n */\nexport function generateSas(sasBytes) {\n    const sas = {};\n\n    for (const method in sasGenerators) {\n        if (sasGenerators.hasOwnProperty(method)) {\n            sas[method] = sasGenerators[method](sasBytes);\n        }\n    }\n\n    return sas;\n}\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nimport { E2EEErrors } from './E2EEErrors';\nimport { generateSas } from './SAS';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init',\n    SAS_START: 'sas-start',\n    SAS_ACCEPT: 'sas-accept',\n    SAS_KEY: 'sas-key',\n    SAS_MAC: 'sas-mac'\n};\n\nconst OLM_SAS_NUM_BYTES = 6;\nconst OLM_KEY_VERIFICATION_MAC_INFO = 'Jitsi-KEY_VERIFICATION_MAC';\nconst OLM_KEY_VERIFICATION_MAC_KEY_IDS = 'Jitsi-KEY_IDS';\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_SAS_AVAILABLE: 'olm.participant_sas_available',\n    PARTICIPANT_SAS_READY: 'olm.participant_sas_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated',\n    PARTICIPANT_VERIFICATION_COMPLETED: 'olm.participant_verification_completed'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._mediaKey = undefined;\n        this._mediaKeyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Returns the current participants conference ID.\n     *\n     * @returns {string}\n     */\n    get myId() {\n        return this._conf.myUserId();\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._mediaKey = key;\n        this._mediaKeyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._mediaKeyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentMediaKey(key) {\n        this._mediaKey = key;\n\n        return this._mediaKeyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Sends sacMac if channel verification waas successful.\n     *\n     */\n    markParticipantVerified(participant, isVerified) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        const pId = participant.getId();\n\n        if (!isVerified) {\n            olmData.sasVerification = undefined;\n            logger.warn(`Verification failed for participant ${pId}`);\n            this.eventEmitter.emit(\n                OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                pId,\n                false,\n                E2EEErrors.E2EE_SAS_CHANNEL_VERIFICATION_FAILED);\n\n            return;\n        }\n\n        if (!olmData.sasVerification) {\n            logger.warn(`Participant ${pId} does not have valid sasVerification`);\n            this.eventEmitter.emit(\n                OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                pId,\n                false,\n                E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n            return;\n        }\n\n        const { sas, sasMacSent } = olmData.sasVerification;\n\n        if (sas && sas.is_their_key_set() && !sasMacSent) {\n            this._sendSasMac(participant);\n\n            // Mark the MAC as sent so we don't send it multiple times.\n            olmData.sasVerification.sasMacSent = true;\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            this._idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeysReady(this._idKeys);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n    }\n\n    /**\n     * Starts the verification process for the given participant as described here\n     * https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n     *\n     *    |                                 |\n          | m.key.verification.start        |\n          |-------------------------------->|\n          |                                 |\n          |       m.key.verification.accept |\n          |<--------------------------------|\n          |                                 |\n          | m.key.verification.key          |\n          |-------------------------------->|\n          |                                 |\n          |          m.key.verification.key |\n          |<--------------------------------|\n          |                                 |\n          | m.key.verification.mac          |\n          |-------------------------------->|\n          |                                 |\n          |          m.key.verification.mac |\n          |<--------------------------------|\n          |                                 |\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @returns {Promise<void>}\n     * @private\n     */\n    startVerification(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (!olmData.session) {\n            logger.warn(`Tried to start verification with participant ${pId} but we have no session`);\n\n            return;\n        }\n\n        if (olmData.sasVerification) {\n            logger.warn(`There is already a verification in progress with participant ${pId}`);\n\n            return;\n        }\n\n        olmData.sasVerification = {\n            sas: new Olm.SAS(),\n            transactionId: uuidv4()\n        };\n\n        const startContent = {\n            transactionId: olmData.sasVerification.transactionId\n        };\n\n        olmData.sasVerification.startContent = startContent;\n        olmData.sasVerification.isInitiator = true;\n\n        const startMessage = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SAS_START,\n                data: startContent\n            }\n        };\n\n        this._sendMessage(startMessage, pId);\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeysReady(idKeys) {\n        logger.debug(`Olm id key ready: ${idKeys}`);\n\n        // Publish it in presence.\n        for (const keyType in idKeys) {\n            if (idKeys.hasOwnProperty(keyType)) {\n                const key = idKeys[keyType];\n\n                this._conf.setLocalParticipantProperty(`e2ee.idKey.${keyType}`, key);\n            }\n        }\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._mediaKey !== undefined) {\n            keyInfo.key = this._mediaKey ? base64js.fromByteArray(this._mediaKey) : false;\n            keyInfo.keyIndex = this._mediaKeyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_START: {\n            if (!olmData.session) {\n                logger.debug(`Received sas init message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-init');\n\n                return;\n            }\n\n            if (olmData.sasVerification?.sas) {\n                logger.warn(`SAS already created for participant ${pId}`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            const { transactionId } = msg.data;\n\n            const sas = new Olm.SAS();\n\n            olmData.sasVerification = {\n                sas,\n                transactionId,\n                isInitiator: false\n            };\n\n            const pubKey = olmData.sasVerification.sas.get_pubkey();\n            const commitment = this._computeCommitment(pubKey, msg.data);\n\n            /* The first phase of the verification process, the Key agreement phase\n                https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n            */\n            const acceptMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_ACCEPT,\n                    data: {\n                        transactionId,\n                        commitment\n                    }\n                }\n            };\n\n            this._sendMessage(acceptMessage, pId);\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_ACCEPT: {\n            if (!olmData.session) {\n                logger.debug(`Received sas accept message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-accept');\n\n                return;\n            }\n\n            const { commitment, transactionId } = msg.data;\n\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_ACCEPT Participant ${pId} does not have valid sasVerification`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            if (olmData.sasVerification.sasCommitment) {\n                logger.debug(`Already received sas commitment message from ${pId}!`);\n\n                this._sendError(participant, 'Already received sas commitment message from ${pId}!');\n\n                return;\n            }\n\n            olmData.sasVerification.sasCommitment = commitment;\n\n            const pubKey = olmData.sasVerification.sas.get_pubkey();\n\n            // Send KEY.\n            const keyMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_KEY,\n                    data: {\n                        key: pubKey,\n                        transactionId\n                    }\n                }\n            };\n\n            this._sendMessage(keyMessage, pId);\n\n            olmData.sasVerification.keySent = true;\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_KEY: {\n            if (!olmData.session) {\n                logger.debug(`Received sas key message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-key');\n\n                return;\n            }\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_KEY Participant ${pId} does not have valid sasVerification`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            const { isInitiator, sas, sasCommitment, startContent, keySent } = olmData.sasVerification;\n\n            if (sas.is_their_key_set()) {\n                logger.warn('SAS already has their key!');\n\n                return;\n            }\n\n            const { key: theirKey, transactionId } = msg.data;\n\n            if (sasCommitment) {\n                const commitment = this._computeCommitment(theirKey, startContent);\n\n                if (sasCommitment !== commitment) {\n                    this._sendError(participant, 'OlmAdapter commitments mismatched');\n                    this.eventEmitter.emit(\n                        OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                        pId,\n                        false,\n                        E2EEErrors.E2EE_SAS_COMMITMENT_MISMATCHED);\n                    olmData.sasVerification.free();\n\n                    return;\n                }\n            }\n\n            sas.set_their_key(theirKey);\n\n            const pubKey = sas.get_pubkey();\n\n            const myInfo = `${this.myId}|${pubKey}`;\n            const theirInfo = `${pId}|${theirKey}`;\n\n            const info = isInitiator ? `${myInfo}|${theirInfo}` : `${theirInfo}|${myInfo}`;\n\n            const sasBytes = sas.generate_bytes(info, OLM_SAS_NUM_BYTES);\n            const generatedSas = generateSas(sasBytes);\n\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_SAS_READY, pId, generatedSas);\n\n            if (keySent) {\n                return;\n            }\n\n            const keyMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_KEY,\n                    data: {\n                        key: pubKey,\n                        transactionId\n                    }\n                }\n            };\n\n            this._sendMessage(keyMessage, pId);\n\n            olmData.sasVerification.keySent = true;\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_MAC: {\n            if (!olmData.session) {\n                logger.debug(`Received sas mac message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-mac');\n\n                return;\n            }\n\n            const { keys, mac, transactionId } = msg.data;\n\n            if (!mac || !keys) {\n                logger.warn('Invalid SAS MAC message');\n\n                return;\n            }\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_MAC Participant ${pId} does not have valid sasVerification`);\n\n                return;\n            }\n\n            const sas = olmData.sasVerification.sas;\n\n            // Verify the received MACs.\n            const baseInfo = `${OLM_KEY_VERIFICATION_MAC_INFO}${pId}${this.myId}${transactionId}`;\n            const keysMac = sas.calculate_mac(\n                Object.keys(mac).sort().join(','), // eslint-disable-line newline-per-chained-call\n                baseInfo + OLM_KEY_VERIFICATION_MAC_KEY_IDS\n            );\n\n            if (keysMac !== keys) {\n                logger.error('SAS verification error: keys MAC mismatch');\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_KEYS_MAC_MISMATCH);\n\n                return;\n            }\n\n            if (!olmData.ed25519) {\n                logger.warn('SAS verification error: Missing ed25519 key');\n\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_MISSING_KEY);\n\n                return;\n            }\n\n            for (const [ keyInfo, computedMac ] of Object.entries(mac)) {\n                const ourComputedMac = sas.calculate_mac(\n                    olmData.ed25519,\n                    baseInfo + keyInfo\n                );\n\n                if (computedMac !== ourComputedMac) {\n                    logger.error('SAS verification error: MAC mismatch');\n                    this.eventEmitter.emit(\n                        OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                        pId,\n                        false,\n                        E2EEErrors.E2EE_SAS_MAC_MISMATCH);\n\n                    return;\n                }\n            }\n\n            logger.info(`SAS MAC verified for participant ${pId}`);\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED, pId, true);\n\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        const participantId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const uuid = uuidv4();\n\n                    const d = new Deferred();\n\n                    d.setRejectTimeout(REQ_TIMEOUT);\n                    d.catch(() => {\n                        this._reqs.delete(uuid);\n                        olmData.pendingSessionUuid = undefined;\n                    });\n                    this._reqs.set(uuid, d);\n\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        case 'e2ee.idKey.ed25519':\n            olmData.ed25519 = newValue;\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_SAS_AVAILABLE, participantId);\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKeys.curve25519,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n\n    /**\n     * Builds and sends the SAS MAC message to the given participant.\n     * The second phase of the verification process, the Key verification phase\n        https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n     */\n    _sendSasMac(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n        const { sas, transactionId } = olmData.sasVerification;\n\n        // Calculate and send MAC with the keys to be verified.\n        const mac = {};\n        const keyList = [];\n        const baseInfo = `${OLM_KEY_VERIFICATION_MAC_INFO}${this.myId}${pId}${transactionId}`;\n\n        const deviceKeyId = `ed25519:${pId}`;\n\n        mac[deviceKeyId] = sas.calculate_mac(\n            this._idKeys.ed25519,\n            baseInfo + deviceKeyId);\n        keyList.push(deviceKeyId);\n\n        const keys = sas.calculate_mac(\n            keyList.sort().join(','),\n            baseInfo + OLM_KEY_VERIFICATION_MAC_KEY_IDS\n        );\n\n        const macMessage = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SAS_MAC,\n                data: {\n                    keys,\n                    mac,\n                    transactionId\n                }\n            }\n        };\n\n        this._sendMessage(macMessage, pId);\n    }\n\n    /**\n     * Computes the commitment.\n     */\n    _computeCommitment(pubKey, data) {\n        const olmUtil = new Olm.Utility();\n        const commitment = olmUtil.sha256(pubKey + JSON.stringify(data));\n\n        olmUtil.free();\n\n        return commitment;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_SAS_READY,\n            this._onParticipantSasReady.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_SAS_AVAILABLE,\n            this._onParticipantSasAvailable.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_VERIFICATION_COMPLETED,\n            this._onParticipantVerificationCompleted.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * Returns the sasVerficiation object.\n     *\n     * @returns {Object}\n     */\n    get sasVerification() {\n        return this._olmAdapter;\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentMediaKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Handles the SAS ready event.\n     *\n     * @param {string} pId - The participant ID.\n     * @param {Uint8Array} sas - The bytes from sas.generate_bytes..\n     * @private\n     */\n    _onParticipantSasReady(pId, sas) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_READY, pId, sas);\n    }\n\n    /**\n     * Handles the sas available event.\n     *\n     * @param {string} pId - The participant ID.\n     * @private\n     */\n    _onParticipantSasAvailable(pId) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_AVAILABLE, pId);\n    }\n\n\n    /**\n     * Handles the SAS completed event.\n     *\n     * @param {string} pId - The participant ID.\n     * @param {boolean} success - Wheter the verification was succesfull.\n     * @private\n     */\n    _onParticipantVerificationCompleted(pId, success, message) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_COMPLETED, pId, success, message);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {Promise<ArrayBuffer>} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {Promise<CryptoKey>} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n\n    /**\n     * Starts the verification process of the participant\n     *\n     * @param {Participant} - participant to be verified.\n     * @returns {void}\n     */\n    startVerification(participant) {\n        this._keyHandler.sasVerification?.startVerification(participant);\n    }\n\n    /**\n     * Marks the channel as verified\n     *\n     * @param {Participant} - participant to be verified.\n     * @param {boolean} isVerified - whether the verification was succesfull.\n     * @returns {void}\n     */\n    markParticipantVerified(participant, isVerified) {\n        this._keyHandler.sasVerification?.markParticipantVerified(participant, isVerified);\n    }\n}\n","/* eslint-disable */\n\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n/* global define */\n\n/* Some functions and variables have been stripped for use with Strophe */\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (24 - len % 32);\n    x[((len + 64 >> 9) << 4) + 15] = len;\n\n    var w = new Array(80);\n    var a =  1732584193;\n    var b = -271733879;\n    var c = -1732584194;\n    var d =  271733878;\n    var e = -1009589776;\n\n    var i, j, t, olda, oldb, oldc, oldd, olde;\n    for (i = 0; i < x.length; i += 16) {\n        olda = a;\n        oldb = b;\n        oldc = c;\n        oldd = d;\n        olde = e;\n\n        for (j = 0; j < 80; j++) {\n            if (j < 16) {\n                w[j] = x[i + j];\n            } else {\n                w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n            }\n\n            t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n                         safe_add(safe_add(e, w[j]), sha1_kt(j)));\n            e = d;\n            d = c;\n            c = rol(b, 30);\n            b = a;\n            a = t;\n        }\n\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n        e = safe_add(e, olde);\n    }\n    return [a, b, c, d, e];\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft (t, b, c, d) {\n    if (t < 20) { return (b & c) | ((~b) & d); }\n    if (t < 40) { return b ^ c ^ d; }\n    if (t < 60) { return (b & c) | (b & d) | (c & d); }\n    return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t) {\n    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 : (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data\n */\nfunction core_hmac_sha1(key, data) {\n    var bkey = str2binb(key);\n    if (bkey.length > 16) {\n        bkey = core_sha1(bkey, key.length * 8);\n    }\n\n    var ipad = new Array(16), opad = new Array(16);\n    for (var i = 0; i < 16; i++) {\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\n    }\n\n    var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n    return core_sha1(opad.concat(hash), 512 + 160);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y) {\n    var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n}\n\n/*\n * Convert an 8-bit or 16-bit string to an array of big-endian words\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\n */\nfunction str2binb(str) {\n    var bin = [];\n    var mask = 255;\n    for (var i = 0; i < str.length * 8; i += 8) {\n        bin[i>>5] |= (str.charCodeAt(i / 8) & mask) << (24 - i%32);\n    }\n    return bin;\n}\n\n/*\n * Convert an array of big-endian words to a base-64 string\n */\nfunction binb2b64 (binarray) {\n    var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var str = \"\";\n    var triplet, j;\n    for (var i = 0; i < binarray.length * 4; i += 3) {\n        triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16) |\n                  (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 ) |\n                  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\n\n        for (j = 0; j < 4; j++) {\n            if (i * 8 + j * 6 > binarray.length * 32) { str += \"=\"; }\n            else { str += tab.charAt((triplet >> 6*(3-j)) & 0x3F); }\n        }\n    }\n    return str;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2str(bin) {\n    var str = \"\";\n    var mask = 255;\n    for (var i = 0; i < bin.length * 32; i += 8) {\n        str += String.fromCharCode((bin[i>>5] >>> (24 - i%32)) & mask);\n    }\n    return str;\n}\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nconst SHA1 = {\n    b64_hmac_sha1:  function (key, data){ return binb2b64(core_hmac_sha1(key, data)); },\n    b64_sha1:       function (s) { return binb2b64(core_sha1(str2binb(s),s.length * 8)); },\n    binb2str:       binb2str,\n    core_hmac_sha1: core_hmac_sha1,\n    str_hmac_sha1:  function (key, data){ return binb2str(core_hmac_sha1(key, data)); },\n    str_sha1:       function (s) { return binb2str(core_sha1(str2binb(s),s.length * 8)); },\n};\nexport { SHA1 as default };\n","import $ from 'jquery';\nimport { Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\nimport sha1 from './sha1';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return sha1.b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream mangemament ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nimport { $build, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: true,\n\n\t/**\n\t* @property {Boolean} returnWholeStanza: Set to true to return the acknowledged stanzas, otherwise only return its ID.\n\t*/\n\treturnWholeStanza: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\tclearAcknowledgedStanzaListener() {\n\t\tthis._acknowledgedStanzaListeners= [];\n\t},\n\tenable: function() {\n\t\tthis._c.send($build('enable', {xmlns: this._NS, resume: false}));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tif (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED) {\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function (elem) {\n\t  // elem is a HTMLElement with iq, presence or message as root element\n\t  var child;\n\t  for (var i = 0; i < elem.children.length; i++) {\n\t\tchild = elem.children[i];\n\t\t// this if will never be true because iq, presence and message\n\t\t// are never child elements, they are root elements\n\t\tif (Strophe.isTagEqual(child, 'iq') ||\n\t\t  Strophe.isTagEqual(child, 'presence') ||\n\t\t  Strophe.isTagEqual(child, 'message')) {\n\t\t  this._increaseSentStanzasCounter(child);\n\t\t}\n\t  }\n\n\t  return this._originalXMLOutput.call(this._c, elem);\n\t},\n\t/*xmlOutput: function(elem) {\n\t\tvar child;\n\t\tfor (var i = 0; i < elem.children.length; i++) {\n\t\t\tchild = elem.children[i];\n\t\t\tif (Strophe.isTagEqual(child, 'iq') ||\n\t\t\tStrophe.isTagEqual(child, 'presence') ||\n\t\t\tStrophe.isTagEqual(child, 'message')) {\n\t\t\t\tthis._increaseSentStanzasCounter(child);\n\t\t\t}\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},*/\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'enabled') && elem.getAttribute('xmlns') === this._NS) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\tthis._c.resume();\n\t\t}\n\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\tif (Strophe.isTagEqual(elem, 'a')) {\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\t\t\tthis._serverProcesssedStanzasCounter = handledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tconsole.warn('Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._unacknowledgedStanzas.push(this.returnWholeStanza ? elem : elem.getAttribute('id'));\n\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError(msg) {\n\t\tconsole.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    NETWORK_INFO_EVENT,\n    default as NetworkInfo\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {Object} - handler for the connection.\n     */\n    addHandler(...args) {\n        return this._stropheConn.addHandler(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.deleteHandler}\n     *\n     * @returns {void}\n     */\n    deleteHandler(...args) {\n        this._stropheConn.deleteHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            logger.error(`Trying to send stanza while not connected. Status:${this._status} Proto:${\n                this.isUsingWebSocket ? this._stropheConn?._proto?.socket?.readyState : 'bosh'\n            }`);\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum JitsiTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            const filteredPayload = this._filterUpdatePayload(payload);\n\n            this._rooms = filteredPayload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, filteredPayload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Filters the hidden participants from the payload.\n     *\n     * @param {Object} payload - The payload of the update message.\n     * @return {Object} - The filtered payload.\n     */\n    _filterUpdatePayload(payload) {\n        const hiddenDomain = this.room.options.hiddenDomain;\n        const { rooms } = payload;\n        const filteredRooms = {};\n\n        Object.entries(rooms).forEach(([ key, room ]) => {\n            const { participants = {} } = room;\n            const filteredParticipants = {};\n\n            Object.entries(participants).forEach(([ k, participant ]) => {\n                if (Strophe.getDomainFromJid(participant.jid) !== hiddenDomain) {\n                    filteredParticipants[k] = participant;\n                }\n            });\n\n            filteredRooms[key] = {\n                ...room,\n                participants: filteredParticipants\n            };\n        });\n\n        return {\n            ...payload,\n            rooms: filteredRooms\n        };\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $msg } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport { JITSI_MEET_MUC_TYPE } from './xmpp';\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling room metadata.\n */\nexport default class RoomMetadata {\n    room: any;\n    _metadata: any;\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n\n        this._metadata = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Sets metadata for the given key.\n     *\n     * @param {string} key - key under which the metadata will be stored.\n     * @param {object} data - data to be stored.\n     */\n    setMetadata(key, data) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot set room metadata - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            key,\n            data\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Gets the stored metadata (all of it).\n     *\n     * @returns The stored metadata.\n     */\n    getMetadata() {\n        return this._metadata;\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.roomMetadataComponentAddress;\n    }\n\n    /**\n     * Handles a message with metadata updates.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        const { metadata } = payload;\n\n        if (!metadata || isEqual(this._metadata, metadata)) {\n            return;\n        }\n\n        this._metadata = metadata;\n        this.room.eventEmitter.emit(XMPPEvents.ROOM_METADATA_UPDATED, metadata);\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        message[JITSI_MEET_MUC_TYPE] = 'room_metadata';\n\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('room_metadata', {\n            room: this.room.roomjid,\n            xmlns: 'http://jitsi.org/jitmeet'\n        }, JSON.stringify(message)).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* eslint-disable newline-per-chained-call */\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n    const maxTimeout = 120000;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return Math.min(timeout * step, maxTimeout);\n    };\n}\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n    this.options = options;\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n\n    // Whether SIP gateway (jigasi) support is enabled. TODO: use presence so it can be changed based on jigasi\n    // availability.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = xmpp.connection;\n\n    // The JID to which conference-iq requests are sent over XMPP.\n    this.targetJid = this.options.hosts?.focus;\n\n    // If not specified default to 'focus.domain'\n    if (!this.targetJid) {\n        this.targetJid = `focus.${this.options.hosts?.domain}`;\n    }\n\n    this.targetUrl = this.options.conferenceRequestUrl;\n\n    // Whether to send conference requests over HTTP or XMPP\n    this.mode = this.targetUrl ? 'http' : 'xmpp';\n    logger.info(`Using ${this.mode} for conference requests.`);\n\n    // The set of JIDs known to belong to jicofo. Populated from configuration\n    // and responses from conference requests.\n    this.focusUserJids = new Set();\n\n    if (options.focusUserJid) {\n        this.focusUserJids.add(options.focusUserJid);\n    }\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(`Ignoring sessionId from different origin: ${event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\nModerator.prototype.isFocusJid = function(jid) {\n    if (!jid) {\n        return false;\n    }\n\n    for (const focusJid of this.focusUserJids) {\n        // jid may be a full JID, and focusUserJids may be bare JIDs\n        if (jid.indexOf(`${focusJid}/`) === 0) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\n/**\n * Create a conference request based on the configured options and saved Settings.\n *\n * A conference request has the following format:\n * {\n *   room: \"room@example.com\",\n *   sessionId: \"foo\", // optional\n *   machineUdi: \"bar\", // optional\n *   identity: \"baz\", // optional\n *   properties: { } // map string to string\n * }\n *\n * It can be encoded in either JSON or and IQ.\n *\n * @returns the created conference request.\n */\nModerator.prototype._createConferenceRequest = function() {\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const config = this.options;\n    const properties = {};\n\n    if (config.startAudioMuted !== undefined) {\n        properties.startAudioMuted = config.startAudioMuted;\n    }\n    if (config.startVideoMuted !== undefined) {\n        properties.startVideoMuted = config.startVideoMuted;\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = config?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        properties.rtcstatsEnabled = false;\n    }\n\n    const conferenceRequest = {\n        properties,\n        machineUid: Settings.machineId,\n        room: this.roomName\n    };\n\n    if (sessionId) {\n        conferenceRequest.sessionId = sessionId;\n    }\n\n    return conferenceRequest;\n};\n\n/**\n * Create a conference request and encode it as an IQ.\n */\nModerator.prototype._createConferenceIq = function() {\n    const conferenceRequest = this._createConferenceRequest();\n\n    // Generate create conference IQ\n    const elem = $iq({ to: this.targetJid,\n        type: 'set' });\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': conferenceRequest.machineUid\n    });\n\n    if (conferenceRequest.sessionId) {\n        elem.attrs({ 'session-id': conferenceRequest.sessionId });\n    }\n\n    for (const k in conferenceRequest.properties) {\n        if (conferenceRequest.properties.hasOwnProperty(k)) {\n            elem.c(\n                'property', {\n                    name: k,\n                    value: conferenceRequest.properties[k]\n                }).up();\n        }\n    }\n    if (FeatureFlags.isJoinAsVisitorSupported()) {\n        elem.c('property', {\n            name: 'visitors-version',\n            value: 1 }).up();\n    }\n\n    return elem;\n};\n\nModerator.prototype._parseConferenceIq = function(resultIq) {\n    const conferenceRequest = { properties: {} };\n\n    conferenceRequest.focusJid = $(resultIq).find('conference').attr('focusjid');\n    conferenceRequest.sessionId = $(resultIq).find('conference').attr('session-id');\n    conferenceRequest.identity = $(resultIq).find('>conference').attr('identity');\n    conferenceRequest.ready = $(resultIq).find('conference').attr('ready') === 'true';\n    conferenceRequest.vnode = $(resultIq).find('conference').attr('vnode');\n\n    if ($(resultIq).find('>conference>property[name=\\'authentication\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.authentication = 'true';\n    }\n\n    if ($(resultIq).find('>conference>property[name=\\'externalAuth\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.externalAuth = 'true';\n    }\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find('>conference>property[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.sipGatewayEnabled = 'true';\n    }\n\n    return conferenceRequest;\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.sendConferenceRequest = function() {\n    return new Promise(resolve => {\n        if (this.mode === 'xmpp') {\n            logger.info(`Sending conference request over XMPP to ${this.targetJid}`);\n\n            this.connection.sendIQ(\n                this._createConferenceIq(),\n                result => this._handleIqSuccess(result, resolve),\n                error => this._handleIqError(error, resolve));\n\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for Strophe to\n            // decide to send our IQ.\n            this.connection.flush();\n        } else {\n            logger.info(`Sending conference request over HTTP to ${this.targetUrl}`);\n            fetch(this.targetUrl, {\n                method: 'POST',\n                body: JSON.stringify(this._createConferenceRequest()),\n                headers: { 'Content-Type': 'application/json' }\n            })\n            .then(response => {\n                if (!response.ok) {\n                    response.text().then(text => {\n                        logger.warn(`Received HTTP ${response.status} ${response.statusText}. Body: ${text}`);\n                        const sessionError = response.status === 400 && text.indexOf('400 invalid-session') > 0;\n                        const notAuthorized = response.status === 403;\n\n                        this._handleError(sessionError, notAuthorized, resolve);\n                    })\n                    .catch(error => {\n                        logger.warn(`Error: ${error}`);\n                        this._handleError();\n                    });\n\n                    // _handleError has either scheduled a retry or fired an event indicating failure.\n                    return;\n                }\n                response.json().then(resultJson => {\n                    this._handleSuccess(resultJson, resolve);\n                });\n            })\n            .catch(error => {\n                logger.warn(`Error: ${error}`);\n                this._handleError();\n            });\n        }\n    });\n};\n\nModerator.prototype._handleSuccess = function(conferenceRequest, callback) {\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    if (conferenceRequest.focusJid) {\n        logger.info(`Adding focus JID: ${conferenceRequest.focusJid}`);\n        this.focusUserJids.add(conferenceRequest.focusJid);\n    } else {\n        logger.warn('Conference request response contained no focusJid.');\n    }\n\n    const authenticationEnabled = conferenceRequest.properties.authentication === 'true';\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = conferenceRequest.properties.externalAuth === 'true';\n    logger.info(`External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled && conferenceRequest.sessionId) {\n        logger.info(`Received sessionId: ${conferenceRequest.sessionId}`);\n        Settings.sessionId = conferenceRequest.sessionId;\n    }\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED, authenticationEnabled, conferenceRequest.identity);\n\n    this.sipGatewayEnabled = conferenceRequest.properties.sipGatewayEnabled;\n    logger.info(`Sip gateway enabled: ${this.sipGatewayEnabled}`);\n\n    if (conferenceRequest.ready) {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // we want to ignore redirects when this is jibri (record/live-stream or a sip jibri)\n        if (conferenceRequest.vnode && !this.options.iAmRecorder && !this.options.iAmSipGateway) {\n            logger.warn(`Redirected to: ${conferenceRequest.vnode} with focusJid ${conferenceRequest.focusJid} }`);\n\n            this.eventEmitter.emit(XMPPEvents.REDIRECTED, conferenceRequest.vnode, conferenceRequest.focusJid);\n\n            return;\n        }\n\n        logger.info('Conference-request successful, ready to join the MUC.');\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        // This was a successful response, but the \"ready\" flag is not set. Retry after a timeout.\n        logger.info(`Not ready yet, will retry in ${waitMs} ms.`);\n        window.setTimeout(\n            () => this.sendConferenceRequest().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype._handleError = function(sessionError, notAuthorized, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    if (sessionError) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n\n    // Not authorized to create new room\n    if (notAuthorized) {\n        logger.warn('Unauthorized to start the conference');\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n\n    const waitMs = this.getNextErrorTimeout();\n\n    if (sessionError && waitMs < 60000) {\n        // If the session is invalid, retry a limited number of times and then fire an error.\n        logger.info(`Invalid session, will retry after ${waitMs} ms.`);\n        this.getNextTimeout(true);\n        window.setTimeout(() => this.sendConferenceRequest().then(callback), waitMs);\n    } else {\n        const errmsg = 'Failed to get a successful response, giving up.';\n        const error = new Error(errmsg);\n\n        logger.error(errmsg, error);\n        GlobalOnErrorHandler.callErrorHandler(error);\n\n        // This is a \"fatal\" error and the user of the lib should handle it accordingly.\n        // TODO: change the event name to something accurate.\n        this.eventEmitter.emit(XMPPEvents.FOCUS_DISCONNECTED);\n    }\n};\n\n/**\n * Invoked by {@link #sendConferenecRequest} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that {@link sendConferenceRequest} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._handleIqError = function(error, callback) {\n\n    // The reservation system only works over XMPP. Handle the error separately.\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    const invalidSession\n        = Boolean($(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length);\n\n    // Not authorized to create new room\n    const notAuthorized = $(error).find('>error>not-authorized').length > 0;\n\n    if (notAuthorized && Strophe.getDomainFromJid(error.getAttribute('to')) !== this.options.hosts.anonymousdomain) {\n        // FIXME \"is external\" should come either from the focus or\n        // config.js\n        this.externalAuthEnabled = true;\n    }\n\n    this._handleError(invalidSession, notAuthorized, callback);\n};\n\n/**\n * Invoked by {@link #sendConferenecRequest} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that {@link #sendConferenecRequest} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._handleIqSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    const conferenceRequest = this._parseConferenceIq(result);\n\n    this._handleSuccess(conferenceRequest, callback);\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this._createConferenceIq(),\n            result => {\n                const sessionId = $(result).find('conference').attr('session-id');\n\n                if (sessionId) {\n                    logger.info(`Received sessionId:  ${sessionId}`);\n                    Settings.sessionId = sessionId;\n                } else {\n                    logger.warn('Response did not contain a session-id');\n                }\n\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first').prop('tagName'),\n                message: $(errorIq).find('iq>error>text').text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.targetJid,\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.targetJid,\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport RoomMetadata from './RoomMetadata';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n * Process nodes to extract data needed for MUC_JOINED and MUC_MEMBER_JOINED events.\n *\n */\nfunction extractIdentityInformation(node, hiddenFromRecorderFeatureEnabled) {\n    const identity = {};\n    const userInfo = node.children.find(c => c.tagName === 'user');\n\n    if (userInfo) {\n        identity.user = {};\n        const tags = [ 'id', 'name', 'avatar' ];\n\n        if (hiddenFromRecorderFeatureEnabled) {\n            tags.push('hidden-from-recorder');\n        }\n\n        for (const tag of tags) {\n            const child\n                = userInfo.children.find(c => c.tagName === tag);\n\n            if (child) {\n                identity.user[tag] = child.value;\n            }\n        }\n    }\n    const groupInfo = node.children.find(c => c.tagName === 'group');\n\n    if (groupInfo) {\n        identity.group = groupInfo.value;\n    }\n\n    return identity;\n}\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, xmpp, options) {\n        super();\n        this.xmpp = xmpp;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joining MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, xmpp.options);\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.roomMetadata = new RoomMetadata(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            // there is no point of sending conference iq when in visitor mode\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.sendConferenceRequest();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave(reason) {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({\n            to: this.myroomjid,\n            type: 'unavailable'\n        });\n\n        if (reason) {\n            pres.c('status').t(reason).up();\n        }\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n            const roomMetadataEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_jitsimetadata\"]>value');\n            const roomMetadataText = roomMetadataEl?.text();\n\n            if (roomMetadataText) {\n                try {\n                    this.roomMetadata._handleMessages(JSON.parse(roomMetadataText));\n                } catch (e) {\n                    logger.warn('Failed to set room metadata', e);\n                }\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established, only if needed\n        if (status === XmppConnection.Status.CONNECTED && this.presenceUpdateTime > this.presenceSyncTime) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus = this.moderator.isFocusJid(jid);\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        const isTranscriber = pres.getElementsByTagName('nick');\n\n        if (isTranscriber[0] && isTranscriber[0].innerHTML.toLowerCase() === \"transcriber\") {\n              member.isHiddenDomain = true;\n        }\n        \n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node, this.options.hiddenFromRecorderFeatureEnabled);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                delete this.lastPresences[jid];\n                if (!member.isFocus) {\n                    this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n                }\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            const reasonSelect = $(pres).find('>status');\n            const member = this.members[from];\n            let reason;\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            delete this.members[from];\n            delete this.lastPresences[from];\n\n            // In this case we *do* fire MUC_MEMBER_LEFT for the focus?\n            this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, from, reason);\n            if (member?.isFocus) {\n                logger.info('Focus has left the room - leaving conference');\n                this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                const nickEl = $(msg).find('>nick');\n                let nick;\n\n                if (nickEl.length > 0) {\n                    nick = nickEl.text();\n                }\n\n                // we will fire explicitly that this is a guest(isGuest:true) to the conference\n                // informing that this is probably a message from a guest to the conference (visitor)\n                // a message with explicit name set\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                    from, txt, this.myroomjid, stamp, nick, Boolean(nick));\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': Strophe.getBareJidFromJid(m.jid)\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     * Redirected back.\n     * @param iq The received iq.\n     */\n    onVisitorIQ(iq) {\n        const visitors = $(iq).find('>visitors[xmlns=\"jitsi:visitors\"]');\n        const response = $(iq).find('promotion-response');\n\n        if (visitors.length && response.length\n            && String(response.attr('allow')).toLowerCase() === 'true') {\n            logger.warn('Redirected back to main room.');\n\n            this.eventEmitter.emit(\n                XMPPEvents.REDIRECTED, undefined, visitors.attr('focusjid'), response.attr('username'));\n        }\n    }\n\n    /**\n     * Obtains the info about given media advertised (in legacy format) in the MUC presence of the participant\n     * identified by the given endpoint JID. This is for mantining interop with endpoints that do not support\n     * source-name signaling (Jigasi and very old mobile clients).\n     *\n     * @param {string} endpointId the endpoint ID mapped to the participant which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence info or <tt>null</tt> either if there\n     * is no presence available or if the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * @returns {RoomMetadata}\n     */\n    getMetadataHandler() {\n        return this.roomMetadata;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave(reason) {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n        this.roomMetadata.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            if (this.joined) {\n                timeout = setTimeout(() => onMucLeft(true), 5000);\n\n                this.clean();\n                this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n                this.doLeave(reason);\n            } else {\n                // we are clearing up, and we haven't joined the room\n                // there is no point of sending presence unavailable and check for timeout\n                // let's just clean\n                this.connection.emuc.doLeave(this.roomjid);\n                this.clean();\n            }\n        }));\n\n        return Promise.allSettled(promises);\n    }\n\n    /**\n     * Ends the conference for all participants.\n     */\n    end() {\n        if (this.breakoutRooms.isBreakoutRoom()) {\n            logger.warn('Cannot end conference: this is a breakout room.');\n\n            return;\n        }\n\n        // Send the end conference message.\n        const msg = $msg({ to: this.xmpp.endConferenceComponentAddress });\n\n        msg.c('end_conference').up();\n\n        this.xmpp.connection.send(msg);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onVisitors.bind(this),\n            'jitsi:visitors', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n\n    /**\n     * A visitor IQ is received, pass it to the room.\n     * @param iq The received iq.\n     * @returns {boolean}\n     */\n    onVisitors(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        room?.onVisitorIQ(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: sourceCompactJson.n\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     * @param {Object} options - Optional parameters.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure, options = {}) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingResolution, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources:\n                        options.desktopSharingSources || desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    minWidth: desktopSharingResolution?.width?.min,\n                                    minHeight: desktopSharingResolution?.height?.min,\n                                    maxWidth: desktopSharingResolution?.width?.max ?? window.screen.width,\n                                    maxHeight: desktopSharingResolution?.height?.max ?? window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const audio = this._getAudioConstraints();\n        let video = {};\n        const { desktopSharingFrameRate } = this.options;\n\n        if (typeof desktopSharingFrameRate === 'object') {\n            video.frameRate = desktopSharingFrameRate;\n        }\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia on any of the\n        // browsers. getDisplayMedia will fail with an error \"invalid constraints\" in this case.\n        video.frameRate && delete video.frameRate.min;\n\n        if (browser.isChromiumBased()) {\n            // Allow users to seamlessly switch which tab they are sharing without having to select the tab again.\n            browser.isVersionGreaterThan(106) && (video.surfaceSwitching = 'include');\n\n            // Set bogus resolution constraints to work around\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1056311 for low fps screenshare. Capturing SS at\n            // very high resolutions restricts the framerate. Therefore, skip this hack when capture fps > 5 fps.\n            if (!(desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE)) {\n                video.height = 99999;\n                video.width = 99999;\n            }\n        }\n\n        if (Object.keys(video).length === 0) {\n            video = true;\n        }\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n\n    /**\n     * Parse the \"videoType\" attribute encoded in a set of SSRC attributes (e.g.\n     * \"a=ssrc:1234 videoType:desktop\")\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseVideoTypeLine(ssrcLines) {\n        const s = ' videoType:';\n        const videoTypeLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(s) > 0);\n\n        return videoTypeLine?.substring(videoTypeLine.indexOf(s) + s.length);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        } else {\n            logger.error(`No matching RTP payload type found for ${codecName}, failed to set preferred codecs`);\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","import $ from 'jquery';\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {MediaType} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'video' && typeof this.initialLastN === 'number') {\n            elem.c('initial-last-n',\n                { xmlns: 'jitsi:colibri2',\n                    value: this.initialLastN }).up();\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n                    const videoType = SDPUtil.parseVideoTypeLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: sourceName,\n                        videoType,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:', this.session);\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=extmap-allow-mixed', this.session)) {\n                elem.c('extmap-allow-mixed', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0'\n                });\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join(';');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n    if (desc.find('>extmap-allow-mixed[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]').length > 0) {\n        sdp += 'a=extmap-allow-mixed\\r\\n';\n    }\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n            const videoType = SDPUtil.parseVideoTypeLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: sourceName,\n                videoType,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callbacks\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.map(fileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(results);\n *     }\n * });\n *\n * // Using Promises\n * async.map(fileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now an array of the file size in bytes for each file, e.g.\n *     // [ 1000, 2000, 3000]\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.map(fileList, getFileSizeInBytes);\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * //Using Callbacks\n * async.auto({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     if (err) {\n *         console.log('err = ', err);\n *     }\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * });\n *\n * //Using Promises\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }).then(results => {\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * }).catch(err => {\n *     console.log('err = ', err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.auto({\n *             get_data: function(callback) {\n *                 // async code to get some data\n *                 callback(null, 'data', 'converted to array');\n *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n *                 // once there is some data and the directory exists,\n *                 // write the data to a file in the directory\n *                 callback(null, 'filename');\n *             }],\n *             email_link: ['write_file', function(results, callback) {\n *                 // once the file is written let's email a link to it...\n *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *             }]\n *         });\n *         console.log('results = ', results);\n *         // results = {\n *         //     get_data: ['data', 'converted to array']\n *         //     make_folder; 'folder',\n *         //     write_file: 'filename'\n *         //     email_link: { file: 'filename', email: 'user@example.com' }\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\n\nfunction stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n        if (string[index] === '/' && string[index+1] === '/') {\n            // inline comment\n            let endIndex = string.indexOf('\\n', index);\n            index = (endIndex === -1) ? string.length : endIndex;\n        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n            // block comment\n            let endIndex = string.indexOf('*/', index);\n            if (endIndex !== -1) {\n                index = endIndex + 2;\n                endBlockComment = string.indexOf('*/', index);\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        } else {\n            stripped += string[index];\n            index++;\n        }\n    }\n    return stripped;\n}\n\nfunction parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n *\n * // asynchronous function that computes the file size in bytes\n * // file size is added to the memoized value, then returned\n * function getFileSizeInBytes(memo, file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, memo + stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.reduce(fileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // 6000\n *     // which is the sum of the file sizes of the three files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * let directoryList = ['dir1','dir2','dir3'];\n * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n *\n * // Using callbacks\n * async.concat(directoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *    }\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *        // [ Error: ENOENT: no such file or directory ]\n *        // since dir4 does not exist\n *    } else {\n *        console.log(results);\n *    }\n * });\n *\n * // Using Promises\n * async.concat(directoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n * }).catch(err => {\n *      console.log(err);\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n * }).catch(err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4 does not exist\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.concat(directoryList, fs.readdir);\n *         console.log(results);\n *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *     } catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n *         console.log(results);\n *     } catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4 does not exist\n *     }\n * }\n *\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // dir1/file1.txt\n *        // result now equals the first file in the list that exists\n *    }\n *);\n *\n * // Using Promises\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n * .then(result => {\n *     console.log(result);\n *     // dir1/file1.txt\n *     // result now equals the first file in the list that exists\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n *         console.log(result);\n *         // dir1/file1.txt\n *         // result now equals the file in the list that exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        /* istanbul ignore else */\n        if (typeof console === 'object') {\n            /* istanbul ignore else */\n            if (err) {\n                /* istanbul ignore else */\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) { /* istanbul ignore else */\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.every(fileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * });\n *\n * async.every(withMissingFileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * });\n *\n * // Using Promises\n * async.every(fileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.every(withMissingFileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.every(fileList, fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.every(withMissingFileList, fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since NOT every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.filter(files, fileExists, function(err, results) {\n *    if(err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *        // results is now an array of the existing files\n *    }\n * });\n *\n * // Using Promises\n * async.filter(files, fileExists)\n * .then(results => {\n *     console.log(results);\n *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *     // results is now an array of the existing files\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.filter(files, fileExists);\n *         console.log(results);\n *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *         // results is now an array of the existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const files = ['dir1/file1.txt','dir2','dir4']\n *\n * // asynchronous function that detects file type as none, file, or directory\n * function detectFile(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(null, 'none');\n *         }\n *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n *     });\n * }\n *\n * //Using callbacks\n * async.groupBy(files, detectFile, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *\t       console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n * });\n *\n * // Using Promises\n * async.groupBy(files, detectFile)\n * .then( result => {\n *     console.log(result);\n *     // {\n *     //     file: [ 'dir1/file1.txt' ],\n *     //     none: [ 'dir4' ],\n *     //     directory: [ 'dir2']\n *     // }\n *     // result is object containing the files grouped by type\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.groupBy(files, detectFile);\n *         console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whose\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file3.txt'\n * };\n *\n * const withMissingFileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file4.txt'\n * };\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, key, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n * });\n *\n * // Error handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.mapValues(fileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // result is now a map of file size in bytes for each file, e.g.\n *     // {\n *     //     f1: 1000,\n *     //     f2: 2000,\n *     //     f3: 3000\n *     // }\n * }).catch (err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch (err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/* istanbul ignore file */\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n *\n * //Using Callbacks\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.parallel([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two'] even though\n *         // the second function had a shorter timeout.\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n    var processingScheduled = false;\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.reject(fileList, fileExists, function(err, results) {\n *    // [ 'dir3/file6.txt' ]\n *    // results now equals an array of the non-existing files\n * });\n *\n * // Using Promises\n * async.reject(fileList, fileExists)\n * .then( results => {\n *     console.log(results);\n *     // [ 'dir3/file6.txt' ]\n *     // results now equals an array of the non-existing files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.reject(fileList, fileExists);\n *         console.log(results);\n *         // [ 'dir3/file6.txt' ]\n *         // results now equals an array of the non-existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // true\n *        // result is true since some file in the list exists\n *    }\n *);\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // false\n *        // result is false since none of the files exists\n *    }\n *);\n *\n * // Using Promises\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since some file in the list exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since none of the files exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since some file in the list exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since none of the files exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * // bigfile.txt is a file that is 251100 bytes in size\n * // mediumfile.txt is a file that is 11000 bytes in size\n * // smallfile.txt is a file that is 121 bytes in size\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) return callback(getFileSizeErr);\n *         callback(null, fileSize);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // descending order\n * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) {\n *             return callback(getFileSizeErr);\n *         }\n *         callback(null, fileSize * -1);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n *         }\n *     }\n * );\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *             // [ Error: ENOENT: no such file or directory ]\n *         } else {\n *             console.log(results);\n *         }\n *     }\n * );\n *\n * // Using Promises\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now the original array of files sorted by\n *     // file size (ascending by default), e.g.\n *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *         // results is now the original array of files sorted by\n *         // file size (ascending by default), e.g.\n *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * // Error handling\n * async () => {\n *     try {\n *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","import { getLogger } from '@jitsi/logger';\nimport { queue } from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * Pauses the execution of the tasks on the queue.\n     */\n    pause() {\n        this._queue.pause();\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Resumes the execution of the tasks on the queue.\n     */\n    resume() {\n        this._queue.resume();\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals video max frame heights for its local sources.\n     */\n    REMOTE_SOURCE_CONSTRAINTS_CHANGED = 'media_session.REMOTE_SOURCE_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build, $iq, Strophe } from 'strophe.js';\n\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * Add \"source\" element as a child of \"description\" element.\n * @param {Object} description The \"description\" element to add to.\n * @param {Object} s Contains properties of the source being added.\n * @param {Number} ssrc_ The SSRC.\n * @param {String} msid The \"msid\" attribute.\n */\nfunction _addSourceElement(description, s, ssrc_, msid) {\n\n    description.c('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: ssrc_,\n        name: s.source\n    })\n        .c('parameter', {\n            name: 'msid',\n            value: msid\n        })\n        .up()\n        .c('ssrc-info', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            owner: s.owner\n        })\n        .up()\n        .up();\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * video test ?(ask George).\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the source-name and max frame height value of the 'content-modify' IQ when source-name signaling\n     * is enabled.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Object|null}\n     */\n    static parseSourceMaxFrameHeight(jingleContents) {\n        const receiverConstraints = [];\n        const sourceFrameHeightSel = jingleContents.find('>content[name=\"video\"]>source-frame-height');\n        let maxHeight, sourceName;\n\n        if (sourceFrameHeightSel.length) {\n            sourceFrameHeightSel.each((_, source) => {\n                sourceName = source.getAttribute('sourceName');\n                maxHeight = source.getAttribute('maxHeight');\n                receiverConstraints.push({\n                    maxHeight,\n                    sourceName\n                });\n            });\n\n            return receiverConstraints;\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Receiver constraints (max height) set by the application per remote source. Will be used for p2p connection.\n         *\n         * @type {Map<string, number>}\n         */\n        this._sourceReceiverConstraints = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * Number of remote video sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteVideoSources = 0;\n\n        /**\n         * Number of remote audio sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteAudioSources = 0;\n\n        /**\n         * Remote preference for the receive video max frame heights when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>|undefined}\n         */\n        this.remoteSourceMaxFrameHeights = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection after the session is established.\n         * The queue is paused until the first offer/answer cycle is complete. Only track or codec related\n         * operations which necessitate a renegotiation cycle need to be pushed to the modification queue.\n         * These tasks will be executed after the session has been established.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n        this.modificationQueue.pause();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.codecSettings = options.codecSettings;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan = browser.supportsUnifiedPlan();\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n        } else {\n            // H264 scalability is not supported on jvb, so simulcast needs to be disabled when H264 is preferred.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast || options.videoQuality?.preferredCodec === CodecMimeType.H264;\n\n            // Do not send lower spatial layers for low fps screenshare and enable them only for high fps screenshare.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            if (this.isP2P) {\n                this.sendIceCandidate(candidate);\n            }\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator\n                            && (browser.isChromiumBased() || browser.isReactNative())))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Remote preference for receive video max frame heights when source-name signaling is enabled.\n     *\n     * @returns {Map<string, number>|undefined}\n     */\n    getRemoteSourcesRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteSourceMaxFrameHeights;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (ssrcElement.hasAttribute('name')) {\n                const sourceName = ssrcElement.getAttribute('name');\n\n                this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n            }\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner?.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send 'session-accept' in result.\n     *\n     * @param jingleOffer jQuery selector pointing to the jingle element of the offer IQ\n     * @param success callback called when we accept incoming session successfully and receive RESULT packet to\n     * 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept the incoming offer. 'error' argument\n     * can be used to log some details about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes. We allow the localTracks to optionally be passed in so that the addition of the\n     * local tracks and the processing of the initial offer can all be done atomically. We want to make sure that any\n     * other operations which originate in the XMPP Jingle messages related with this session to be executed with an\n     * assumption that the initial offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    // Start processing tasks on the modification queue.\n                    logger.debug('Resuming the modification queue after session is established!');\n                    this.modificationQueue.resume();\n\n                    success();\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n\n                    // The first video track is added to the peerconnection and signaled as part of the session-accept.\n                    // Add secondary video tracks (that were already added to conference) to the peerconnection here.\n                    // This will happen when someone shares a secondary source to a two people call, the other user\n                    // leaves and joins the call again, a new peerconnection is created for p2p/jvb connection. At this\n                    // point, there are 2 video tracks which need to be signaled to the remote peer.\n                    const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n                    videoTracks.length && videoTracks.splice(0, 1);\n                    if (FeatureFlags.isMultiStreamSendSupportEnabled() && videoTracks.length) {\n                        this.addTracks(videoTracks);\n                    }\n                },\n                error => {\n                    failure(error);\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        logger.debug(`${this} Executing invite task`);\n\n        const addTracks = [];\n\n        for (const track of localTracks) {\n            addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n        }\n\n        Promise.all(addTracks)\n            .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n            .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n            .then(() => {\n                this.peerconnection.processLocalSdpForTransceiverInfo(localTracks);\n\n                // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                // the transformation chain.\n                this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n            })\n            .then(() => {\n                logger.debug(`${this} invite executed - OK`);\n            })\n            .catch(error => {\n                logger.error(`${this} invite error`, error);\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer as the remote description.\n     *\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        logger.debug(`${this} Executing setAnswer task`);\n\n        const newRemoteSdp = this._processNewJingleOfferIq(jingleAnswer);\n        const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n        const remoteDescription = new RTCSessionDescription({\n            type: 'answer',\n            sdp: newRemoteSdp.raw\n        });\n\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                if (this.state === JingleSessionState.PENDING) {\n                    this.state = JingleSessionState.ACTIVE;\n\n                    // Start processing tasks on the modification queue.\n                    logger.debug('Resuming the modification queue after session is established!');\n                    this.modificationQueue.resume();\n                    const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this.sendContentModify();\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                }\n            })\n            .then(() => {\n                logger.debug(`${this} setAnswer task done`);\n            })\n            .catch(error => {\n                logger.error(`${this} setAnswer task failed: ${error}`);\n            });\n    }\n\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at converting Strophe Jingle IQ into\n     * remote offer SDP. Once converted, setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     *\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we fail at any point during setRD,\n     * createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes (for the local track addition to be an atomic operation together with the\n     * offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        logger.debug(`${this} Executing setOfferAnswerCycle task`);\n\n        const addTracks = [];\n        const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n        const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n        let tracks = localTracks;\n\n        // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n        // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n        // renegotiation.\n        if (FeatureFlags.isMultiStreamSendSupportEnabled() && videoTracks.length > 1) {\n            tracks = [ ...audioTracks, videoTracks[0] ];\n        }\n        for (const track of tracks) {\n            addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n        }\n        const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n        const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n        const bridgeSession = $(jingleOfferAnswerIq).find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]');\n        const bridgeSessionId = bridgeSession.attr('id');\n\n        if (bridgeSessionId !== this._bridgeSessionId) {\n            this._bridgeSessionId = bridgeSessionId;\n        }\n        const remoteDescription = new RTCSessionDescription({\n            type: 'offer',\n            sdp: newRemoteSdp.raw\n        });\n\n        Promise.all(addTracks)\n            .then(() => this._responderRenegotiate(remoteDescription))\n            .then(() => {\n                this.peerconnection.processLocalSdpForTransceiverInfo(tracks);\n                if (this.state === JingleSessionState.PENDING) {\n                    this.state = JingleSessionState.ACTIVE;\n\n                    // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                    // adjust the video media direction only in the local SDP and the Jingle contents direction\n                    // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                    // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                    // interested in receiving video content. Changing media direction in the remote SDP will mess\n                    // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                    // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                    if (this.isP2P\n                        && (!this._localVideoActive || this._sourceReceiverConstraints)) {\n                        this.sendContentModify();\n                    }\n                }\n\n                // Old local SDP will be available when we're setting answer for the first time, but not when offer\n                // and it's fine since we're generating an answer now it will contain all our SSRCs.\n                if (oldLocalSdp) {\n                    const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSdp);\n                }\n            })\n            .then(() => {\n                logger.debug(`${this} setOfferAnswerCycle task done`);\n                success();\n            })\n            .catch(error => {\n                logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                failure(error);\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setVideoCodecs: preferred=${preferred}, disabled=${disabled}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        const workFunction = finishedCallback => {\n            // First set an offer with a rejected 'data' section\n            this.setOfferAnswerCycle(\n                jingleOfferElem,\n                () => {\n                    // Now set the original offer(with the 'data' section)\n                    this.setOfferAnswerCycle(\n                        originalOffer,\n                        () => {\n                            const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            if (typeof this.options.channelLastN === 'number' && this.options.channelLastN >= 0) {\n                                localSDP.initialLastN = this.options.channelLastN;\n                            }\n\n                            this.sendTransportAccept(localSDP, success, failure);\n\n                            this.room.eventEmitter.emit(\n                                XMPPEvents.ICE_RESTART_SUCCESS,\n                                this,\n                                originalOffer);\n\n                            finishedCallback();\n                        }, error => finishedCallback(error)\n                    );\n                }, error => finishedCallback(error)\n            );\n        };\n\n        logger.debug(`${this} Queued ICE restart task`);\n\n        // Queue and execute\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} ICE restart task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} ICE restart task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        if (typeof this.options.channelLastN === 'number' && this.options.channelLastN >= 0) {\n            localSDP.initialLastN = this.options.channelLastN;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const senders = this._localVideoActive ? 'both' : 'none';\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof this._sourceReceiverConstraints !== 'undefined') {\n            this._sourceReceiverConstraints.forEach((maxHeight, sourceName) => {\n                sessionModify\n                    .c('source-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                    .attrs({\n                        sourceName,\n                        maxHeight\n                    });\n\n                sessionModify.up();\n                logger.info(`${this} sending content-modify for source-name: ${sourceName}, maxHeight: ${maxHeight}`);\n            });\n        }\n\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote p2p peer.\n     *\n     * @param {Map<string, number>} sourceReceiverConstraints - The receiver constraints per source.\n     */\n    setReceiverVideoConstraint(sourceReceiverConstraints) {\n        logger.info(`${this} setReceiverVideoConstraint - constraints: ${JSON.stringify(sourceReceiverConstraints)}`);\n        this._sourceReceiverConstraints = sourceReceiverConstraints;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        if (FeatureFlags.isSsrcRewritingSupported() && this.peerconnection) {\n            this.peerconnection.getRemoteTracks().forEach(track => {\n                this.room.eventEmitter.emit(JitsiTrackEvents.TRACK_REMOVED, track);\n            });\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            let midFound = false;\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n                midFound = true;\n            });\n\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\n            // in the current remote description. Add a new m-line for this newly signaled source.\n            if (!midFound && this.isP2P) {\n                addSsrcInfo[name] = lines;\n            }\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Processes the source map message received from the bridge and creates a new remote track for newly signaled\n     * SSRCs or updates the source-name and owner on the remote track for an existing SSRC.\n     *\n     * @param {Object} message - The source map message.\n     * @param {string} mediaType - The media type, 'audio' or 'video'.\n     * @returns {void}\n     */\n    processSourceMap(message, mediaType) {\n        const newSources = [];\n\n        for (const src of message.mappedSources) {\n            if (this.peerconnection.addRemoteSsrc(src.ssrc)) {\n                newSources.push(src);\n            } else {\n                const { owner, source, ssrc, videoType } = src;\n                const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n                if (track) {\n                    logger.debug(`Existing SSRC ${ssrc}: new owner=${owner}, source-name=${source}`);\n\n                    // Update the SSRC owner.\n                    this._signalingLayer.setSSRCOwner(ssrc, owner);\n\n                    // Update the track with all the relevant info.\n                    track.setSourceName(source);\n                    track.setOwner(owner);\n                    if (mediaType === MediaType.VIDEO) {\n                        const type = videoType === 'CAMERA' ? VideoType.CAMERA : VideoType.DESKTOP;\n\n                        track._setVideoType(type);\n                    }\n\n                    // Update the muted state on the track since the presence for this track could have been received\n                    // before the updated source map is received on the bridge channel.\n                    const peerMediaInfo = this._signalingLayer.getPeerMediaInfo(owner, mediaType, source);\n\n                    peerMediaInfo && this.peerconnection._sourceMutedChanged(source, peerMediaInfo.muted);\n                } else {\n                    logger.error(`Remote track attached to a remote SSRC=${ssrc} not found`);\n                }\n            }\n        }\n\n        // Add the new SSRCs to the remote description by generating a source message.\n        if (newSources.length) {\n            let node = $build('content', {\n                xmlns: 'urn:xmpp:jingle:1',\n                name: mediaType\n            }).c('description', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: mediaType\n            });\n\n            for (const src of newSources) {\n                const { rtx, ssrc } = src;\n                let msid;\n\n                if (mediaType === MediaType.VIDEO) {\n                    const idx = ++this.numRemoteVideoSources;\n\n                    msid = `remote-video-${idx} remote-video-${idx}`;\n\n                    if (rtx !== '-1') {\n                        _addSourceElement(node, src, rtx, msid);\n                        node.c('ssrc-group', {\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                            semantics: 'FID'\n                        })\n                            .c('source', {\n                                xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                                ssrc\n                            })\n                            .up()\n                            .c('source', {\n                                xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                                ssrc: rtx\n                            })\n                            .up()\n                            .up();\n                    }\n                } else {\n                    const idx = ++this.numRemoteAudioSources;\n\n                    msid = `remote-audio-${idx} remote-audio-${idx}`;\n                }\n                _addSourceElement(node, src, ssrc, msid);\n            }\n            node = node.up();\n            this._addOrRemoveRemoteStream(true /* add */, node.node);\n        }\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n\n            // Always initiate a sRD->cA->sLD cycle when a remote source is added or removed irrespective of whether\n            // the local endpoint is an initiator or responder. Fixes bugs on Chromium where decoders are not created\n            // when sLD->cO->sRD cycle is initiated for p2p cases when remote sources are received.\n            this._responderRenegotiate(remoteDescription).then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n        let ssrcs;\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            ssrcs = lines.map(line => Number(line.split('a=ssrc:')[1]?.split(' ')[0]));\n\n            if (this.usesUnifiedPlan) {\n                let mid;\n\n                lines.forEach(line => {\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n\n                // Reject the m-line so that the browser removes the associated transceiver from the list of available\n                // transceivers. This will prevent the client from trying to re-use these inactive transceivers when\n                // additional video sources are added to the peerconnection.\n                if (mid > -1 && !this.isP2P && FeatureFlags.isMultiStreamSendSupportEnabled()) {\n                    const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\n\n                    remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\n                }\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n\n        // Update the ssrc owners list.\n        ssrcs?.length && this._signalingLayer.removeSSRCOwners(ssrcs);\n\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\n        // the remote p2p peer when multi-stream support is enabled.\n        if (addSsrcInfo.length > remoteSdp.media.length\n            && this.isP2P\n            && this.usesUnifiedPlan) {\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            remoteSdp = new SDP(remoteSdp.raw);\n        }\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!FeatureFlags.isMultiStreamSendSupportEnabled()\n            || !localTracks?.length\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const oldLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n            const recvOnlyTransceiver = this.peerconnection.peerconnection.getTransceivers()\n                    .find(t => t.receiver.track.kind === MediaType.VIDEO\n                        && t.direction === MediaDirection.RECVONLY\n                        && t.currentDirection === MediaDirection.RECVONLY);\n\n            // Add transceivers by adding a new mline in the remote description for each track. Do not create a new\n            // m-line if a recv-only transceiver exists in the p2p case. The new track will be attached to the\n            // existing one in that case.\n            for (const track of localTracks) {\n                if (!this.isP2P || !recvOnlyTransceiver) {\n                    remoteSdp.addMlineForNewLocalSource(track.getType());\n                }\n            }\n\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: remoteSdp.raw\n            });\n\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\n            this._responderRenegotiate(remoteDescription)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => {\n                    const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                    // Signal the new sources to the peer.\n                    this.notifyMySSRCUpdate(oldLocalSDP, newLocalSDP);\n                    finishedCallback();\n                })\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     *\n     * @param {boolean} active - <tt>true</tt> to enable media transfer or <tt>false</tt> to suspend media transmission\n     * @returns {Promise}\n     */\n    setMediaTransferActive(active) {\n        return this.peerconnection.tpcUtils.setMediaTransferActive(active)\n            .then(() => {\n                this.peerconnection.audioTransferActive = active;\n                this.peerconnection.videoTransferActive = active;\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                        const remoteDescription = new RTCSessionDescription({\n                            type: 'offer',\n                            sdp: remoteSdp\n                        });\n\n                        // Always initiate a sRD->cA->sLD cycle since renegotiation fails in the following scenario.\n                        // In a p2p call when channelLastN=0, the direction on the video tranceiver is set to\n                        // 'inactive'. At this point, if the user unmutes, the track is replaced on the video sender.\n                        // If a cO->sLD->sRD is triggered, the browser adds a third m-line which isn't expected and\n                        // possibly is a bug. All renegotiations fail as a result. However, the browser does not add a\n                        // third m-line in the answer it generates and renegotiation succeeds.\n                        promise = this._responderRenegotiate(remoteDescription).then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        // Set the source name of the new track.\n                        if (oldTrack\n                            && newTrack\n                            && oldTrack.isVideoTrack()) {\n                            newTrack.setSourceName(oldTrack.getSourceName());\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to the peerconnection associated with this session.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is added back to this session and\n     * renegotiation succeeds (if its warranted). Will be rejected with a <tt>string</tt> that provides some error\n     * details in case something goes wrong.\n     */\n    addTrackToPc(track) {\n        return this._addRemoveTrack(false /* add */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackFromPc(track) {\n        return this._addRemoveTrack(true /* remove */, track);\n    }\n\n    /**\n     * See {@link addTrackToPc} and {@link removeTrackFromPc}.\n     * @param {boolean} isRemove <tt>true</tt> for \"remove\" operation or <tt>false</tt> for \"add\" operation.\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrack(isRemove, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isRemove ? 'removeTrack' : 'addTrack';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(`Error:  tried ${operationName} track with no active peer connection`);\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isRemove\n                    ? tpc.removeTrackFromPc(track)\n                    : tpc.addTrackToPc(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends video media transfer over the p2p peer connection.\n     *\n     * @param {boolean} videoActive <tt>true</tt> to enable video media transfer or <tt>false</tt> to suspend video\n     * media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once the operation is done. It will be rejected with\n     * an error description as a string in case anything goes wrong.\n     */\n    setP2pVideoTransferActive(videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject('Can not modify video transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive);\n\n            // Always initiate a renegotiation cycle for p2p connection when the media direction is changed.\n            this._renegotiate()\n                .then(() => finishedCallback())\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. It checks if the sourceMaxFrameHeight (as requested by\n     * the p2p peer) or the senders attribute of the video content has changed and modifies the local video sources\n     * accordingly.\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders = JingleSessionPC.parseVideoSenders(jingleContents);\n        const sourceMaxFrameHeights = JingleSessionPC.parseSourceMaxFrameHeight(jingleContents);\n\n        if (sourceMaxFrameHeights) {\n            this.remoteSourceMaxFrameHeights = sourceMaxFrameHeights;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED, this, sourceMaxFrameHeights);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(`${this} - failed to parse video \"senders\" attribute in \"content-modify\" action`);\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded() && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust the media direction.\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries to apply it for\n     * {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of Jingle video content element advertised\n     * by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of the underlying peerconnection and renegotiation\n     * is required for the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n\n            return this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive);\n        }\n\n        return false;\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            logger.debug(`Received ${action} from ${fromJid}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        if (!this.options.deploymentInfo) {\n            this.options.deploymentInfo = {};\n        }\n\n        // Cache of components used for certain features.\n        this._components = [];\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        // $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n        //     this.disconnect(ev).catch(() => {\n        //         // ignore errors in order to not brake the unload.\n        //     });\n        // });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        logger.debug('Source-name signaling is enabled');\n        this.caps.addFeature('http://jitsi.org/source-name');\n\n        logger.debug('Receiving multiple video streams is enabled');\n        this.caps.addFeature('http://jitsi.org/receive-multiple-video-streams');\n\n        // Advertise support for ssrc-rewriting.\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            this.caps.addFeature('http://jitsi.org/ssrc-rewriting-1');\n        }\n\n        // Use \"-1\" as a version that we can bump later. This should match\n        // the version added in moderator.js, this one here is mostly defined\n        // for keeping stats, since it is not made available to jocofo at\n        // the time of the initial conference-request.\n        if (FeatureFlags.isJoinAsVisitorSupported()) {\n            this.caps.addFeature('http://jitsi.org/visitors-1');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n                this._components.push(this.avModerationComponentAddress);\n            }\n\n            if (identity.type === 'end_conference') {\n                this.endConferenceComponentAddress = identity.name;\n                this._components.push(this.endConferenceComponentAddress);\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n                this._components.push(this.speakerStatsComponentAddress);\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n                this._components.push(this.conferenceDurationComponentAddress);\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'release') {\n                this.options.deploymentInfo.backendRelease = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n                this._components.push(this.breakoutRoomsComponentAddress);\n            }\n\n            if (identity.type === 'room_metadata') {\n                this.roomMetadataComponentAddress = identity.name;\n                this._components.push(this.roomMetadataComponentAddress);\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this._components.length > 0) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                    resolve();\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {boolean} silence - Whether the dominant speaker is silent or not.\n     */\n    sendDominantSpeakerEvent(roomJid, silence) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            silence })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face landmarks to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceLandmarksEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceLandmarks', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            faceExpression: payload.faceExpression,\n            timestamp: payload.timestamp,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this._components.includes(from)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'room_metadata') {\n            this.eventEmitter.emit(XMPPEvents.ROOM_METADATA_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            // Let's push to analytics any updates that may have come from the backend\n            Statistics.analytics.addPermanentProperties({ ...logObject });\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Send a new conference IQ.\n                        this.room.moderator.allocateConferenceFocus();\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n        this.enforcePreferredCodec = options.enforcePreferredCodec;\n\n        // VP8 cannot be disabled since it the default codec.\n        this.p2pDisabledCodec = options.p2pDisabledCodec !== CodecMimeType.VP8\n            && this._isCodecSupported(options.p2pDisabledCodec)\n            && options.p2pDisabledCodec;\n        this.jvbDisabledCodec = options.jvbDisabledCodec !== CodecMimeType.VP8\n            && this._isCodecSupported(options.jvbDisabledCodec)\n            && options.jvbDisabledCodec;\n\n        // Determine the preferred codecs.\n        this.p2pPreferredCodec = this._isCodecSupported(options.p2pPreferredCodec)\n            && options.p2pPreferredCodec !== options.p2pDisabledCodec\n            ? options.p2pPreferredCodec\n            : CodecMimeType.VP8;\n        this.jvbPreferredCodec = this._isCodecSupported(options.jvbPreferredCodec)\n            && options.jvbPreferredCodec !== options.jvbDisabledCodec\n            ? options.jvbPreferredCodec\n            : CodecMimeType.VP8;\n\n        logger.debug(`Codec preferences for the conference are JVB: preferred=${this.jvbPreferredCodec},`\n            + `disabled=${this.jvbDisabledCodec} P2P: preferred=${this.p2pPreferredCodec},`\n            + `disabled=${this.p2pDisabledCodec}`);\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._selectPreferredCodec(session));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        if (!preferredCodec) {\n            return false;\n        }\n\n        if (preferredCodec === CodecMimeType.VP9 && !this.enforcePreferredCodec && !browser.supportsVP9()) {\n            return false;\n        }\n\n        // Skip the check on FF because it does not support the getCapabilities API.\n        // It is safe to assume that Firefox supports all the codecs supported by Chrome.\n        if (browser.isFirefox()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred/disabled codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     */\n    _selectPreferredCodec(mediaSession) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n\n        if (!session) {\n            return;\n        }\n        const preferredCodec = session.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = session.isP2P ? this.p2pDisabledCodec : this.jvbDisabledCodec;\n        const currentCodec = session?.peerconnection.getConfiguredVideoCodec();\n        let selectedCodec = preferredCodec ?? currentCodec;\n\n        if (!this.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n            const remoteCodecs = remoteParticipants?.map(remote => {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n\n                return peerMediaInfo?.codecType;\n            });\n\n            const nonPreferredCodecs = remoteCodecs.filter(codec => codec !== selectedCodec && codec !== disabledCodec);\n\n            // Find the fallback codec when there are endpoints in the call that don't have the same preferred codec\n            // set.\n            if (nonPreferredCodecs.length) {\n                // Always prefer VP8 as that is the default codec supported on all client types.\n                selectedCodec = nonPreferredCodecs.find(codec => codec === CodecMimeType.VP8)\n                    ?? nonPreferredCodecs.find(codec => this._isCodecSupported(codec));\n            }\n        }\n        if (selectedCodec !== currentCodec || !session?.peerconnection.isVideoCodecDisabled(disabledCodec)) {\n            session.setVideoCodecs(selectedCodec, disabledCodec);\n        }\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     * @param {JitsiConference} conference the conference instance.\n     */\n    constructor(peerconnection, wsUrl, emitter, conference) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // The conference that uses this bridge channel.\n        this._conference = conference;\n\n        // Whether the channel is connected or not. It will start as undefined\n        // for the first connection attempt. Then transition to either true or false.\n        this._connected = undefined;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            const isConnecting = this._channel && (this._channel.readyState === 'connecting'\n                    || this._channel.readyState === WebSocket.CONNECTING);\n\n            // Should not spawn new websockets while one is already trying to connect.\n            if (isConnecting) {\n                // Timeout is still required as there is flag `_areRetriesEnabled` that\n                // blocks new retrying cycles until any channel opens in current cycle.\n                this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n\n                return;\n            }\n\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'SourceVideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            this._connected = true;\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [], silence } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers, silence);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'ForwardedSources': {\n                const forwardedSources = obj.forwardedSources;\n\n                logger.info(`New forwarded sources: ${forwardedSources}`);\n                emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (typeof obj.sourceName === 'string' && typeof obj.maxHeight === 'number') {\n                    logger.info(`SenderSourceConstraints: ${obj.sourceName} - ${obj.maxHeight}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, obj);\n                } else {\n                    logger.error(`Invalid SenderSourceConstraints: ${obj.sourceName} - ${obj.maxHeight}`);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            case 'VideoSourcesMap': {\n                logger.info(`Received VideoSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.VIDEO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            case 'AudioSourcesMap': {\n                logger.info(`Received AudioSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.AUDIO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.debug(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (channel !== this._channel) {\n                logger.debug('Skip close handler, channel instance is not equal to stored one');\n\n                return;\n            }\n\n            // When the JVB closes the connection gracefully due to the participant being alone in the meeting it uses\n            // code 1001. However, the same code is also used by Cloudflare when it terminates the ws. Therefore, check\n            // for the number of remote participants in the call and abort retries only when the endpoint is the only\n            // endpoint in the call.\n            const isGracefulClose = this._closedFromClient\n                || (event.code === 1001 && this._conference.getParticipantCount() === 1);\n\n            if (!isGracefulClose) {\n                const { code, reason } = event;\n\n                logger.error(`Channel closed: ${code} ${reason}`);\n\n                if (this._mode === 'websocket') {\n                    this._retryWebSocketConnection(event);\n\n                    // We only want to send this event the first time the failure happens.\n                    if (this._connected !== false) {\n                        emitter.emit(RTCEvents.DATA_CHANNEL_CLOSED, {\n                            code,\n                            reason\n                        });\n                    }\n                }\n            }\n\n            this._connected = false;\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio', {direction: 'recvonly'});\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video', {direction: 'recvonly'});\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nexport function shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      let desc = arguments[0] || {};\n      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {\n        return nativeSetLocalDescription.apply(this, arguments);\n      }\n      // The remaining steps should technically happen when SLD comes off the\n      // RTCPeerConnection's operations chain (not ahead of going on it), but\n      // this is too difficult to shim. Instead, this shim only covers the\n      // common case where the operations chain is empty. This is imperfect, but\n      // should cover many cases. Rationale: Even if we can't reduce the glare\n      // window to zero on imperfect implementations, there's value in tapping\n      // into the perfect negotiation pattern that several browsers support.\n      desc = {type: desc.type, sdp: desc.sdp};\n      if (!desc.type) {\n        switch (this.signalingState) {\n          case 'stable':\n          case 'have-local-offer':\n          case 'have-remote-pranswer':\n            desc.type = 'offer';\n            break;\n          default:\n            desc.type = 'answer';\n            break;\n        }\n      }\n      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {\n        return nativeSetLocalDescription.apply(this, [desc]);\n      }\n      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n      return func.apply(this)\n        .then(d => nativeSetLocalDescription.apply(this, [d]));\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\nimport 'webrtc-adapter';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (!browser.isReactNative()) {\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n        }\n\n        this.pcConstraints = {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @param {Object} options - Optional parameters.\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia(options) {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                },\n                options);\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @param {Array<string>} options.desktopSharingSources - The types of sources (\"screen\", \"window\", etc)\n     * from which the user can select what to share.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia({ desktopSharingSources });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        return this.getStreamId();\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the source name of the track.\n     * @returns {String|undefined}\n     */\n    getSourceName() { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    detach(container) {\n        if (!container) {\n            return;\n        }\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n    \n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n        return true;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n\n    /**\n     * Assigns the source name to a track.\n     * @param {String} name - The name to be assigned to the track.\n     * @returns {void}\n     */\n    setSourceName(name) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED, this),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType ?? displaySurface;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackToPc(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackFromPc(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSendSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In React Native we mute the camera by setting track.enabled but that doesn't\n        // work for screen-share tracks, so do the remove-as-mute for those.\n        const doesVideoMuteByStreamRemove\n            = browser.isReactNative() ? this.videoType === VideoType.DESKTOP : browser.doesVideoMuteByStreamRemove();\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSendSupportEnabled())\n                || !doesVideoMuteByStreamRemove) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                const streamInfo = streamsInfo.find(info => info.track.kind === this.getType());\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    async dispose() {\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            await this.setEffect();\n        }\n\n        if (this.conference) {\n            await this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        return conference._removeLocalTrackFromPc(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference._addLocalTrackToPc(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                const bLine = clonedeep(mLine);\n\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    // Copy the msid attribute to each ssrc.\n                    bLine.sources.forEach(ssrc => {\n                        ssrc.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(bLine.sources);\n                }\n                if (typeof bLine.ssrcGroups !== 'undefined' && Array.isArray(bLine.ssrcGroups)) {\n                    media[type].ssrcGroups = (media[type].ssrcGroups || []).concat(bLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when presence for a source is received.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {string} endpointId - The endpoint id.\n     * @param {boolean} muted - The new muted state.\n     * @param {string} videoType - The video type of the source.\n     */\n    SOURCE_UPDATED = 'signaling.sourceUpdated',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_UPDATED = SignalingEvents.SOURCE_UPDATED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.lastIndexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * Extracts source index (zero based) from a given source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name, eg. endpointA-v0.\n * @returns {number}\n */\nexport function getSourceIndexFromSourceName(sourceName) {\n    const nameParts = sourceName.split('-');\n    const trackIdx = Number(nameParts[nameParts.length - 1].substring(1));\n\n    if (Number.isNaN(trackIdx)) {\n        throw new Error(`Failed to parse track idx for source name: ${sourceName}`);\n    }\n\n    return trackIdx;\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Removes the association between a given SSRC and its current owner so that it can re-used when the SSRC gets\n     * remapped to another source from a different endpoint.\n     * @param {number} ssrc a list of SSRCs.\n     */\n    removeSSRCOwners(ssrcList) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Removes the SSRCs associated with a given endpoint from the SSRC owners.\n     *\n     * @param {string} id endpoint id of the participant leaving the call.\n     * @returns {void}\n     */\n    updateSsrcOwnersOnLeave(id) { // eslint-disable-line no-unused-vars\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n        this.audioSourcesToMsidMap = new Map();\n        this.videoSourcesToMsidMap = new Map();\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Updates or adds a 'msid' attribute in the format '<endpoint_id>-<mediaType>-<trackIndex>-<tpcId>'\n     * example - d8ff91-video-0-1\n     * All other attributes like 'cname', 'label' and 'mslabel' are removed since these are not processed by Jicofo.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const mediaDirection = mediaSection.mLine?.direction;\n        const msidLine = mediaSection.mLine?.msid;\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const streamId = `${this.localEndpointId}-${mediaType}`;\n        const trackId = msidLine && msidLine.split(' ')[1];\n\n        // Always overwrite msid since we want the msid to be in this format even if the browser generates one.\n        for (const source of sources) {\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n            // Update the msid if the 'msid' attribute exists.\n            if (msid) {\n                const streamAndTrackIDs = msid.value.split(' ');\n                const trackID = streamAndTrackIDs[1];\n\n                this._updateSourcesToMsidMap(mediaType, streamId, trackID);\n\n                // Update the msid.\n                const storedStreamId = mediaType === MediaType.VIDEO\n                    ? this.videoSourcesToMsidMap.get(trackID)\n                    : this.audioSourcesToMsidMap.get(trackID);\n\n                msid.value = this._generateMsidAttribute(mediaType, trackID, storedStreamId);\n\n            // Generate the msid attribute using the 'trackId' from the msid line from the media description. Only\n            // descriptions that have the direction set to 'sendonly' or 'sendrecv' will have the 'a=msid' line.\n            } else if (trackId) {\n                this._updateSourcesToMsidMap(mediaType, streamId, trackId);\n\n                const storedStreamId = mediaType === MediaType.VIDEO\n                    ? this.videoSourcesToMsidMap.get(trackId)\n                    : this.audioSourcesToMsidMap.get(trackId);\n                const generatedMsid = this._generateMsidAttribute(mediaType, trackId, storedStreamId);\n\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'msid',\n                    value: generatedMsid\n                });\n            }\n        }\n\n        // Ignore the 'cname', 'label' and 'mslabel' attributes and only have the 'msid' attribute.\n        mediaSection.ssrcs = mediaSection.ssrcs.filter(ssrc => ssrc.attribute === 'msid');\n\n        // On FF when the user has started muted create answer will generate a recv only SSRC. We don't want to signal\n        // this SSRC in order to reduce the load of the xmpp server for large calls. Therefore the SSRC needs to be\n        // removed from the SDP.\n        //\n        // For all other use cases (when the user has had media but then the user has stopped it) we want to keep the\n        // receive only SSRCs in the SDP. Otherwise source-remove will be triggered and the next time the user add a\n        // track we will reuse the SSRCs and send source-add with the same SSRCs. This is problematic because of issues\n        // on Chrome and FF (https://bugzilla.mozilla.org/show_bug.cgi?id=1768729) when removing and then adding the\n        // same SSRC in the remote sdp the remote track is not rendered.\n        if (browser.isFirefox()\n            && (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE)\n            && (\n                (mediaType === MediaType.VIDEO && !this.tpc._hasHadVideoTrack)\n                || (mediaType === MediaType.AUDIO && !this.tpc._hasHadAudioTrack)\n            )\n        ) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n        }\n    }\n\n    /**\n     * Updates the MSID map.\n     *\n     * @param {string} mediaType The media type.\n     * @param {string} streamId The stream id.\n     * @param {string} trackId The track id.\n     * @returns {void}\n     */\n    _updateSourcesToMsidMap(mediaType, streamId, trackId) {\n        if (mediaType === MediaType.VIDEO) {\n            if (!this.videoSourcesToMsidMap.has(trackId)) {\n                const generatedStreamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\n\n                this.videoSourcesToMsidMap.set(trackId, generatedStreamId);\n            }\n        } else if (!this.audioSourcesToMsidMap.has(trackId)) {\n            const generatedStreamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\n\n            this.audioSourcesToMsidMap.set(trackId, generatedStreamId);\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSendSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        // Plan-b clients generate new SSRCs and trackIds whenever tracks are removed and added back to the\n        // peerconnection, therefore local track based map for msids needs to be reset after every transformation.\n        if (!this.tpc._usesUnifiedPlan) {\n            this.audioSourcesToMsidMap.clear();\n            this.videoSourcesToMsidMap.clear();\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid').value;\n            const streamId = msid.split(' ')[0];\n\n            // Example stream id: d8ff91-video-8-1\n            // In the example above 8 is the track index\n            const trackIndexParts = streamId.split('-');\n            const trackIndex = trackIndexParts[trackIndexParts.length - 2];\n            const sourceName = getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex);\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: sourceName\n                });\n            }\n\n            if (mediaType === MediaType.VIDEO) {\n                const videoType = this.tpc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                    ?.getVideoType();\n\n                if (videoType) {\n                    // Inject videoType as a=ssrc:1234 videoType:desktop.\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'videoType',\n                        value: videoType\n                    });\n                }\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { SdpTransformWrap, parseSecondarySSRC } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    SdpTransformWrap,\n    parsePrimarySSRC,\n    parseSecondarySSRC\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiConference from '../../types/hand-crafted/JitsiConference';\nimport JitsiRemoteTrack from '../../types/hand-crafted/modules/RTC/JitsiRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType,\n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: JitsiConference;\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: JitsiConference, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            // It's common for the event listeners to access the JitsiRemoteTrack. Thus pass it as a parameter here.\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, this.track, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set track RTC muted for: ${sourceName} after the timeout of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track created: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this._disposeTrackStreamingStatus();\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Update the properties when the track is remapped to another source.\n     *\n     * @param {string} owner The endpoint ID of the new owner.\n     */\n    setOwner(owner) {\n        this.ownerEndpointId = owner;\n        this.emit(JitsiTrackEvents.TRACK_OWNER_CHANGED, owner);\n    }\n\n    /**\n     * Sets the name of the source associated with the remtoe track.\n     *\n     * @param {string} name - The source name to be associated with the track.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n\n        // In some edge cases, both browser 'unmute' and bridge's forwarded sources events are received before a\n        // LargeVideoUpdate is scheduled for auto-pinning a new screenshare track. If there are no layout changes and\n        // no further track events are received for the SS track, a black tile will be displayed for screenshare on\n        // stage. Fire a TRACK_STREAMING_STATUS_CHANGED event if the media is already being received for the remote\n        // track to prevent this from happening.\n        !this._trackStreamingStatusImpl.isVideoTrackFrozen()\n            && this.rtc.eventEmitter.emit(\n                JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED,\n                this,\n                this._trackStreamingStatus);\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: {${this._getStatus()}}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE,\n            ssHigh: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        this.encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this._getVideoStreamEncodings(localTrack.getVideoType());\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: this.pc.videoTransferActive,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: this.pc.audioTransferActive } ];\n    }\n\n    /**\n     * The startup configuration for the stream encodings that are applicable to\n     * the video stream when a new sender is created on the peerconnection. The initial\n     * config takes into account the differences in browser's simulcast implementation.\n     *\n     * Encoding parameters:\n     * active - determine the on/off state of a particular encoding.\n     * maxBitrate - max. bitrate value to be applied to that particular encoding\n     *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n     * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n     * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n     *  original resolution of the captured video.\n     *\n     *  @param {VideoType} videoType\n     */\n    _getVideoStreamEncodings(videoType) {\n        const maxVideoBitrate = videoType === VideoType.DESKTOP && this.encodingBitrates.ssHigh\n            ? this.encodingBitrates.ssHigh : this.encodingBitrates.high;\n\n        return [\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: browser.isFirefox() ? maxVideoBitrate : this.encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: this.encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: browser.isFirefox() ? this.encodingBitrates.low : maxVideoBitrate,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const videoStreamEncodings = this._getVideoStreamEncodings(localVideoTrack.getVideoType());\n        const encodingsState = videoStreamEncodings\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && videoStreamEncodings[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (localVideoTrack.getVideoType() === VideoType.DESKTOP\n                && this.pc._capScreenshareBitrate\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && videoStreamEncodings[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const lowFpsScreenshare = localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && this.pc._capScreenshareBitrate\n            && !browser.isWebKitBased();\n        const encodingsBitrates = this._getVideoStreamEncodings(localVideoTrack.getVideoType())\n        .map(encoding => {\n            const bitrate = lowFpsScreenshare\n                ? desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Returns the max resolution that the client is configured to encode for a given local video track. The actual\n     * send resolution might be downscaled based on cpu and bandwidth constraints.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack - The local video track.\n     * @returns {number} The max encoded resolution for the given video track.\n     */\n    getConfiguredEncodeResolution(localVideoTrack) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const videoSender = this.pc.findSenderForTrack(localVideoTrack.getTrack());\n        let maxHeight = 0;\n\n        if (!videoSender) {\n            return maxHeight;\n        }\n        const parameters = videoSender.getParameters();\n\n        if (!parameters?.encodings?.length) {\n            return maxHeight;\n        }\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings[encoding].active) {\n                const scaleResolutionDownBy\n                    = this.pc.isSimulcastOn()\n                        ? this._getVideoStreamEncodings(localVideoTrack.getVideoType())[encoding].scaleResolutionDownBy\n                        : parameters.encodings[encoding].scaleResolutionDownBy;\n\n                maxHeight = Math.max(maxHeight, height / scaleResolutionDownBy);\n            }\n        }\n\n        return maxHeight;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const localTracks = this.pc.getLocalTracks(mediaType);\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSendSupportEnabled()\n            && localTracks?.length\n            && !oldTrack\n            && newTrack\n            && !localTracks.find(t => t === newTrack);\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n\n                // Re-use any existing recvonly transceiver (if available) for p2p case.\n                && ((this.pc.isP2P && t.currentDirection === MediaDirection.RECVONLY)\n                    || (t.currentDirection === MediaDirection.INACTIVE && !t.stopped)));\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = getSourceIndexFromSourceName(sourceName);\n\n                if (this.pc.isP2P) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType)[trackIndex];\n                } else if (oldTrack) {\n                    const transceiverMid = this.pc._localTrackTransceiverMids.get(oldTrack.rtcId);\n\n                    transceiver = this.pc.peerconnection.getTransceivers().find(t => t.mid === transceiverMid);\n                } else if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                            .filter(t => t.receiver.track.kind === mediaType\n                                && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n        if (!transceiver) {\n            return Promise.reject(\n                new Error(`Replace track failed - no transceiver for old: ${oldTrack}, new: ${newTrack}`));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n        const promise = transceiver.sender.setParameters(parameters);\n\n        if (mediaType === MediaType.VIDEO) {\n            return this.pc._updateVideoSenderParameters(promise);\n        }\n\n        return promise;\n    }\n\n    /**\n     * Resumes or suspends media on the peerconnection by setting the active state on RTCRtpEncodingParameters\n     * associated with all the senders that have a track attached to it.\n     *\n     * @param {boolean} enable - whether media needs to be enabled or suspended.\n     * @returns {Promise} - A promise that is resolved when the change is succesful on all the senders, rejected\n     * otherwise.\n     */\n    setMediaTransferActive(enable) {\n        logger.info(`${this.pc} ${enable ? 'Resuming' : 'Suspending'} media transfer.`);\n\n        const senders = this.pc.peerconnection.getSenders().filter(s => Boolean(s.track));\n        const promises = [];\n\n        for (const sender of senders) {\n            const parameters = sender.getParameters();\n\n            if (parameters?.encodings?.length) {\n                for (const encoding of parameters.encodings) {\n                    encoding.active = enable;\n                }\n            }\n            const setActivePromise = sender.setParameters(parameters);\n\n            if (sender.track.kind === MediaType.VIDEO) {\n                promises.push(this.pc._updateVideoSenderParameters(setActivePromise));\n            } else {\n                promises.push(setActivePromise);\n            }\n        }\n\n        return Promise.allSettled(promises)\n            .then(settledResult => {\n                const errors = settledResult\n                    .filter(result => result.status === 'rejected')\n                    .map(result => result.reason);\n\n                if (errors.length) {\n                    return Promise.reject(new Error('Failed to change encodings on the RTCRtpSenders'\n                        + `${errors.join(' ')}`));\n                }\n\n                return Promise.resolve();\n            });\n    }\n\n    /**\n     * Enables/disables video media transmission on the peer connection. When disabled the SDP video media direction in\n     * the local SDP will be adjusted to 'inactive' which means that no data will be sent nor accepted, but the\n     * connection should be kept alive. This is used for setting lastn=0 on p2p connection.\n     *\n     * @param {boolean} active - true to enable media transmission or false to disable.\n     * @returns {void}\n     */\n    setVideoTransferActive(active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === MediaType.VIDEO);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} video media transfer.`);\n        transceivers.forEach(transceiver => {\n            const localTrackMids = Array.from(this.pc._localTrackTransceiverMids);\n            const direction = active\n                ? localTrackMids.find(mids => mids[1] === transceiver.mid)\n                    ? MediaDirection.SENDRECV : MediaDirection.RECVONLY\n                : MediaDirection.INACTIVE;\n\n            logger.debug(`Setting direction to ${direction} on mid=${transceiver.mid}`);\n            transceiver.direction = direction;\n        });\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(localVideoTrack, parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            const videoStreamEncodings = this._getVideoStreamEncodings(localVideoTrack.getVideoType());\n\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = videoStreamEncodings[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The set of remote SSRCs seen so far.\n     * Distinguishes new SSRCs from those that have been remapped.\n     */\n    this.remoteSSRCs = new Set();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCPeerConnection(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if low fps screenshare is desired.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Codec preferences set for the peerconnection through config.js.\n     */\n    this.codecSettings = this.options.codecSettings;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    // We currently need these flags only for FF and that's why we are updating them only for unified plan.\n    if (this._usesUnifiedPlan) {\n        /**\n         * Indicates whether an audio track has ever been added to the peer connection.\n         */\n        this._hasHadAudioTrack = false;\n\n        /**\n         * Indicates whether a video track has ever been added to the peer connection.\n         */\n        this._hasHadVideoTrack = false;\n    }\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    /**\n     * Holds the RTCRtpTransceiver mids that the local tracks are attached to, mapped per their\n     * {@link JitsiLocalTrack.rtcId}.\n     * @type {Map<string, string>}\n     */\n    this._localTrackTransceiverMids = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    this._lastVideoSenderUpdatePromise = Promise.resolve();\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the MID of the m-line associated with the local desktop track (if it exists).\n *\n * @returns {Number|null}\n */\nTraceablePeerConnection.prototype._getDesktopTrackMid = function() {\n    const desktopTrack = this.getLocalVideoTracks().find(track => track.getVideoType() === VideoType.DESKTOP);\n\n    if (desktopTrack) {\n        return Number(this._localTrackTransceiverMids.get(desktopTrack.rtcId));\n    }\n\n    return null;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.debug(`Remote track not found for source=${sourceName}, mute update failed!`);\n        }\n\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Checks if the browser is currently doing true simulcast where in three different media streams are being sent to the\n * bridge. Currently this happens only when VP8 is the selected codec.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.doesTrueSimulcast = function() {\n    return this.isSimulcastOn() && this.getConfiguredVideoCodec() === CodecMimeType.VP8;\n};\n\n/**\n * Returns the SSRCs associated with a given local video track.\n *\n * @param {JitsiLocalTrack} localTrack\n * @returns\n */\nTraceablePeerConnection.prototype.getLocalVideoSSRCs = function(localTrack) {\n    const ssrcs = [];\n\n    if (!localTrack || !localTrack.isVideoTrack()) {\n        return ssrcs;\n    }\n\n    const ssrcGroup = this.isSimulcastOn() ? 'SIM' : 'FID';\n\n    return this.localSSRCs.get(localTrack.rtcId)?.groups?.find(group => group.semantics === ssrcGroup)?.ssrcs || ssrcs;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {Array<JitsiLocalTrack>} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = stream.id;\n\n    // Do not create remote tracks for 'mixed' JVB SSRCs (used by JVB for RTCP termination).\n    if (!RTC.isUserStreamById(streamId)) {\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = stream.id;\n    const mediaType = track.kind;\n\n    // Do not create remote tracks for 'mixed' JVB SSRCs (used by JVB for RTCP termination).\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        return;\n    }\n    logger.info(`${this} Received track event for remote stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`MediaType undefined for remote track, stream id: ${streamId}, track creation failed!`));\n\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLine;\n\n    // In unified plan mode, find the matching mline using 'mid' or the 'msid' attr of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver?.mid) {\n            const mid = transceiver.mid;\n\n            mediaLine = remoteSDP.media.find(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLine = remoteSDP.media.find(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid === 'string' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLine = remoteSDP.media.find(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLine) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`Matching media line not found in remote SDP for remote stream[id=${streamId},type=${mediaType}],`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLine, 'a=ssrc:');\n\n    ssrcLines = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`\n            + 'track creation failed!'));\n\n        return;\n    }\n\n    const sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n\n    // Assume default presence state for remote source. Presence can be received after source signaling. This shouldn't\n    // prevent the endpoint from creating a remote track for the source.\n    let muted = true;\n    let videoType = mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined; // 'camera' by default\n\n    if (peerMediaInfo) {\n        muted = peerMediaInfo.muted;\n        videoType = peerMediaInfo.videoType; // can be undefined\n    } else {\n        logger.info(`${this}: no source-info available for ${ownerEndpointId}:${sourceName}, assuming default state`);\n    }\n\n    this._createRemoteTrack(ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${ssrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${stream.id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = stream.id;\n    const trackId = track?.id;\n\n    // Ignore stream removed events for JVB \"mixed\" sources (used for RTCP termination).\n    if (!RTC.isUserStreamById(streamId)) {\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    logger.info(`${this} Removing remote track stream[id=${toBeRemoved.getStreamId()},`\n        + `trackId=${toBeRemoved.getTrackId()}]`);\n\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unified-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    if (this._usesUnifiedPlan) {\n        media = media.filter(mline => mline.direction === MediaDirection.SENDONLY\n            || mline.direction === MediaDirection.SENDRECV);\n    } else {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    let index = 0;\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined' && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n\n            const simGroup = mLine.ssrcGroups.find(group => group.semantics === 'SIM');\n\n            // Add a SIM group if its missing in the description (happens on Firefox).\n            if (!simGroup) {\n                const groupSsrcs = mLine.ssrcGroups.map(group => group.ssrcs[0]);\n\n                groupsMap.get(groupSsrcs[0]).push({\n                    semantics: 'SIM',\n                    ssrcs: groupSsrcs\n                });\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? `${mLine.type}-${index}` : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n\n        // Currently multi-stream is supported for video only.\n        mLine.type === MediaType.VIDEO && index++;\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs but no ssrc-groups on Firefox. Unfortunately, Jicofo\n * will complain if it sees ssrcs with matching msids but no ssrc-group, so a ssrc-group line is injected to make\n * Jicofo happy.\n *\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to contain an inject ssrc-group for simulcast.\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast = function(desc) {\n    const sdp = transform.parse(desc.sdp);\n    const video = sdp.media.find(mline => mline.type === 'video');\n\n    // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n    video.ssrcGroups = video.ssrcGroups || [];\n    const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n    if (video.simulcast || video.simulcast_03) {\n        const ssrcs = [];\n\n        if (fidGroups && fidGroups.length) {\n            fidGroups.forEach(group => {\n                ssrcs.push(group.ssrcs.split(' ')[0]);\n            });\n        } else {\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n        }\n        if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n            // Group already exists, no need to do anything\n            return desc;\n        }\n\n        // Add a SIM group for every 3 FID groups.\n        for (let i = 0; i < ssrcs.length; i += 3) {\n            const simSsrcs = ssrcs.slice(i, i + 3);\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: simSsrcs.join(' ')\n            });\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(sdp)\n    });\n};\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecSettings) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media.filter(m => m.type === this.codecSettings.mediaType);\n\n    if (!mLines.length) {\n        return description;\n    }\n\n    for (const mLine of mLines) {\n        if (this.codecSettings.disabled) {\n            SDPUtil.stripCodec(mLine, this.codecSettings.disabled);\n        }\n\n        if (this.codecSettings.preferred) {\n            SDPUtil.preferCodec(mLine, this.codecSettings.preferred);\n\n            // Strip the high profile H264 codecs on mobile clients for p2p connection. High profile codecs give better\n            // quality at the expense of higher load which we do not want on mobile clients. Jicofo offers only the\n            // baseline code for the jvb connection and therefore this is not needed for jvb connection.\n            // TODO - add check for mobile browsers once js-utils provides that check.\n            if (this.codecSettings.preferred === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n                SDPUtil.stripCodec(mLine, this.codecSettings.preferred, true /* high profile */);\n            }\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the track to be added to the pc.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackToPc = function(track) {\n    logger.info(`${this} Adding track=${track} to PC`);\n\n    if (!this._assertTrackBelongs('addTrackToPc', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} to PC - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => {\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Checks if the client has negotiated not to receive video encoded using the given codec, i.e., the codec has been\n * removed from the local description.\n */\nTraceablePeerConnection.prototype.isVideoCodecDisabled = function(codec) {\n    const sdp = this.peerconnection.localDescription?.sdp;\n\n    if (!sdp) {\n        return false;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n\n    return !mLine.rtp.find(r => r.codec === codec);\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec, disabledCodec) {\n    if (!this.codecSettings) {\n        return;\n    }\n    preferredCodec && (this.codecSettings.preferred = preferredCodec);\n    disabledCodec && (this.codecSettings.disabled = disabledCodec);\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackFromPc}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Processes the local description SDP and caches the mids of the mlines associated with the given tracks.\n *\n * @param {Array<JitsiLocalTrack>} localTracks - local tracks that are added to the peerconnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.processLocalSdpForTransceiverInfo = function(localTracks) {\n    const localSdp = this.peerconnection.localDescription?.sdp;\n\n    if (!localSdp) {\n        return;\n    }\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const tracks = localTracks.filter(t => t.getType() === mediaType);\n        const parsedSdp = transform.parse(localSdp);\n        const mLines = parsedSdp.media.filter(mline => mline.type === mediaType);\n\n        tracks.forEach((track, idx) => {\n            if (!this._localTrackTransceiverMids.has(track.rtcId)) {\n                this._localTrackTransceiverMids.set(track.rtcId, mLines[idx].mid.toString());\n            }\n        });\n    });\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n            .then(transceiver => {\n                if (oldTrack) {\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this._localTrackTransceiverMids.delete(oldTrack.rtcId);\n                }\n\n                if (newTrack) {\n                    if (newTrack.isAudioTrack()) {\n                        this._hasHadAudioTrack = true;\n                    } else {\n                        this._hasHadVideoTrack = true;\n                    }\n                    this._localTrackTransceiverMids.set(newTrack.rtcId, transceiver?.mid?.toString());\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n                }\n\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\n                // renegotiation is triggered as a result of this.\n                if (oldTrack && newTrack) {\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                    if (oldTrackSSRC) {\n                        this.localSSRCs.delete(oldTrack.rtcId);\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    }\n                }\n\n                if (transceiver) {\n                    // In the scenario where we remove the oldTrack (oldTrack is not null and newTrack is null) on FF\n                    // if we change the direction to RECVONLY, create answer will generate SDP with only 1 receive\n                    // only ssrc instead of keeping all 6 ssrcs that we currently have. Stopping the screen sharing\n                    // and then starting it again will trigger 2 rounds of source-remove and source-add replacing\n                    // the 6 ssrcs for the screen sharing with 1 receive only ssrc and then removing the receive\n                    // only ssrc and adding the same 6 ssrcs. On the remote participant's side the same ssrcs will\n                    // be reused on a new m-line and if the remote participant is FF due to\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1768729 the video stream won't be rendered.\n                    // That's why we need keep the direction to SENDRECV for FF.\n                    //\n                    // NOTE: If we return back to the approach of not removing the track for FF and instead using the\n                    // enabled property for mute or stopping screensharing we may need to change the direction to\n                    // RECVONLY if FF still sends the media even though the enabled flag is set to false.\n                    transceiver.direction\n                        = newTrack || browser.isFirefox() ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                return configureEncodingsPromise.then(() => this.isP2P);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track from the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} localTrack the local track to be removed.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackFromPc = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrack', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrack', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} from PC`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrack - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const localSources = this.getLocalTracks(mediaType).length;\n        const remoteSources = this.getRemoteTracks(null, mediaType).length;\n\n        media.forEach((mLine, idx) => {\n            if (localSources && localSources === remoteSources) {\n                mLine.direction = MediaDirection.SENDRECV;\n            } else if (!localSources && !remoteSources) {\n                mLine.direction = MediaDirection.INACTIVE;\n            } else if (!localSources) {\n                mLine.direction = MediaDirection.SENDONLY;\n            } else if (!remoteSources) {\n                mLine.direction = MediaDirection.RECVONLY;\n\n            // When there are 2 local sources and 1 remote source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'recvonly'.\n            } else if (localSources > remoteSources) {\n                mLine.direction = idx ? MediaDirection.RECVONLY : MediaDirection.SENDRECV;\n\n            // When there are 2 remote sources and 1 local source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'sendonly'.\n            } else {\n                mLine.direction = idx ? MediaDirection.SENDONLY : MediaDirection.SENDRECV;\n            }\n        });\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.enableOpusDtx && !audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            // On Firefox, the OpusDtx enablement has no effect\n            if (!browser.isFirefox() && audioQuality?.enableOpusDtx) {\n                fmtpConfig.usedtx = 1;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Munges the SDP to set all directions to inactive and drop all ssrc and ssrc-groups.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeInactive = function(description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        mLine.direction = MediaDirection.INACTIVE;\n        mLine.ssrcs = undefined;\n        mLine.ssrcGroups = undefined;\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n/**\n * Sets the max bitrates on the video m-lines when VP9 is the selected codec.\n *\n * @param {RTCSessionDescription} description - The local description that needs to be munged.\n * @param {boolean} isLocalSdp - Whether the max bitrate (via b=AS line in SDP) is set on local SDP.\n * @returns RTCSessionDescription\n */\nTraceablePeerConnection.prototype._setVp9MaxBitrates = function(description, isLocalSdp = false) {\n    if (!this.codecSettings) {\n        return description;\n    }\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Find all the m-lines associated with the local sources.\n    const direction = isLocalSdp ? MediaDirection.RECVONLY : MediaDirection.SENDONLY;\n    const mLines = parsedSdp.media.filter(m => m.type === MediaType.VIDEO && m.direction !== direction);\n\n    for (const mLine of mLines) {\n        if (this.codecSettings.preferred === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const ssHdBitrate = bitrates.ssHigh ? bitrates.ssHigh : HD_BITRATE;\n            const mid = mLine.mid;\n            const isSharingScreen = FeatureFlags.isMultiStreamSendSupportEnabled()\n                ? mid === this._getDesktopTrackMid()\n                : this._isSharingScreen();\n            const limit = Math.floor((isSharingScreen ? ssHdBitrate : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    // If media is suspended on the peerconnection, make sure that media stays disabled. The default 'active' state for\n    // the encodings after the source is added to the peerconnection is 'true', so it needs to be explicitly disabled\n    // after the source is added.\n    if (!(this.videoTransferActive && this.audioTransferActive)) {\n        return this.tpcUtils.setMediaTransferActive(false);\n    }\n\n    if (localVideoTrack) {\n        return this.setSenderVideoConstraints(\n            this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n            localVideoTrack);\n    }\n    const promises = [];\n\n    for (const track of this.getLocalVideoTracks()) {\n        promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n    }\n\n    return Promise.allSettled(promises);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    localDescription = this._mungeCodecOrder(localDescription);\n    localDescription = this._setVp9MaxBitrates(localDescription, true);\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n        }\n        if (this.isSimulcastOn()) {\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    remoteDescription = this._setVp9MaxBitrates(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n    if (!localVideoTrack) {\n        throw new Error('Local video track is missing');\n    }\n    const sourceName = localVideoTrack.getSourceName();\n\n    // Ignore sender constraints if the media on the peerconnection is suspended (jvb conn when p2p is currently active)\n    // or if the video track is muted.\n    if (!this.videoTransferActive || localVideoTrack.isMuted()) {\n        this._senderMaxHeights.set(sourceName, frameHeight);\n\n        return Promise.resolve();\n    }\n\n    const configuredResolution = this.tpcUtils.getConfiguredEncodeResolution(localVideoTrack);\n\n    // Ignore sender constraints if the client is already sending video of the requested resolution. Note that for\n    // screensharing sources, the max resolution will be the height of the window being captured irrespective of the\n    // height being requested by the peer.\n    if ((localVideoTrack.getVideoType() === VideoType.CAMERA && configuredResolution === frameHeight)\n        || (localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && frameHeight > 0\n            && configuredResolution === localVideoTrack.getTrack()?.getSettings()?.height)) {\n        return Promise.resolve();\n    }\n\n    this._senderMaxHeights.set(sourceName, frameHeight);\n\n    return this._updateVideoSenderParameters(this._updateVideoSenderEncodings(frameHeight, localVideoTrack));\n};\n\n/**\n * Returns a wrapped-up promise so that the setParameters() call on the RTCRtpSender for video sources are chained.\n * This is needed on Chrome as it resets the transaction id after executing setParameters() and can affect the next on\n * the fly updates if they are not chained.\n * https://chromium.googlesource.com/external/webrtc/+/master/pc/rtp_sender.cc#340\n * @param {Promise} promise - The promise that needs to be chained.\n * @returns {Promise}\n */\nTraceablePeerConnection.prototype._updateVideoSenderParameters = function(promise) {\n    const nextPromise = this._lastVideoSenderUpdatePromise\n        .finally(() => promise);\n\n    this._lastVideoSenderUpdatePromise = nextPromise;\n\n    return nextPromise;\n};\n\n/**\n * Configures the video stream with resolution / degradation / maximum bitrates\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype._updateVideoSenderEncodings = function(frameHeight, localVideoTrack) {\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    const isSharingLowFpsScreen = localVideoTrack.getVideoType() === VideoType.DESKTOP && this._capScreenshareBitrate;\n\n    // Set the degradation preference.\n    const preference = isSharingLowFpsScreen\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || isSharingLowFpsScreen\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(localVideoTrack, parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils._getVideoStreamEncodings(localVideoTrack.getVideoType())\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        } else {\n            parameters.encodings[0].maxBitrate = undefined;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan)) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences && this.codecSettings) {\n        const { mediaType } = this.codecSettings;\n        const transceivers = this.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver?.track?.kind === mediaType);\n\n        if (transceivers.length) {\n            let capabilities = RTCRtpReceiver.getCapabilities(mediaType)?.codecs;\n            const disabledCodecMimeType = this.codecSettings?.disabled;\n            const preferredCodecMimeType = this.codecSettings?.preferred;\n\n            if (capabilities && disabledCodecMimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${mediaType}/${disabledCodecMimeType}`);\n            }\n\n            if (capabilities && preferredCodecMimeType) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${mediaType}/${preferredCodecMimeType}` ? -1 : 1;\n                });\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased() && mediaType === MediaType.VIDEO) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            // Apply codec preference to all the transceivers associated with the given media type.\n            for (const transceiver of transceivers) {\n                transceiver.setCodecPreferences(capabilities);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceName = track.getSourceName();\n        const sourceIndex = getSourceIndexFromSourceName(sourceName);\n        const sourceIdentifier = this._usesUnifiedPlan\n            ? `${track.getType()}-${sourceIndex}`\n            : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\n/**\n * Track the SSRCs seen so far.\n * @param {number} ssrc - SSRC.\n * @return {boolean} - Whether this is a new SSRC.\n */\nTraceablePeerConnection.prototype.addRemoteSsrc = function(ssrc) {\n    const existing = this.remoteSSRCs.has(ssrc);\n\n    if (!existing) {\n        this.remoteSSRCs.add(ssrc);\n    }\n\n    return !existing;\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {Array=} options.devices The devices that will be requested.\n     * @param {string=} options.resolution Resolution constraints.\n     * @param {string=} options.cameraDeviceId\n     * @param {string=} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter, this.conference);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add forwarded sources change listener.\n        this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n        const timestamp = Date.now();\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=`\n            + `${enteringForwardedSources} at ${timestamp}`);\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            timestamp);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        // TODO: remove this.\n        const supportsSdpSemantics = browser.isChromiumBased() && !options.usesUnifiedPlan;\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO)\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(stream.id);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high' },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high' },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard' },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard' },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low' },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low' }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        if (!this._options.config.disableLocalStats) {\n            // Listen to local statistics events originating from the RTC module and update the _localStats field.\n            conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n        }\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            track.on(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                audioLevel => {\n                    this._handleNoAudioInputDetection(audioLevel);\n                }\n            );\n            track.on(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel => {\n                    this._handleNoAudioInputDetection(audioLevel);\n                    this._handleAudioInputStateChange(audioLevel);\n                }\n            );\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { DETECTOR_STATE_CHANGE, VAD_SCORE_PUBLISHED } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_NOISY_DEVICE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_TALK_WHILE_MUTED } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                JitsiE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return SariskaMediaTransport.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        const blob = new Blob([\"importScripts('https://sdk.sariska.io/flacEncodeWorker.min.js');\"], {\"type\": 'application/javascript'});\n        const url = window.URL || window.webkitURL;\n        const blobUrl = url.createObjectURL(blob);\n        this._encoder = new Worker(blobUrl);\n        URL.revokeObjectURL(blobUrl);\n    }\n}","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime() {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\n// type SessionEvent = {\n\n//     /**\n//      * The type of the event.\n//      * Should be one of the values in {@code SessionEventType}.\n//      */\n//     type: string,\n\n//     /**\n//      * The timestamp of the event.\n//      */\n//     timestamp: number\n// };\n\n/**\n * Representation of the metadata of a segment.\n */\n// type SegmentInfo = {\n\n//     /**\n//      * The length of gap before this segment, in milliseconds.\n//      * mull if unknown.\n//      */\n//     gapBefore?: ?number,\n\n//     /**\n//      * The duration of this segment, in milliseconds.\n//      * null if unknown or the segment is not finished.\n//      */\n//     duration?: ?number,\n\n//     /**\n//      * The start time, in milliseconds.\n//      */\n//     start?: ?number,\n\n//     /**\n//      * The end time, in milliseconds.\n//      * null if unknown, the segment is not finished, or the recording is\n//      * interrupted (e.g. browser reload).\n//      */\n//     end?: ?number\n// };\n\n/**\n * Representation of metadata of a local recording session.\n */\n// type SessionInfo = {\n\n//     /**\n//      * The session token.\n//      */\n//     sessionToken: string,\n\n//     /**\n//      * The start time of the session.\n//      */\n//     start: ?number,\n\n//     /**\n//      * The recording format.\n//      */\n//     format: string,\n\n//     /**\n//      * Array of segments in the session.\n//      */\n//     segments: SegmentInfo[]\n// }\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken, format) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(){\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken) {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events) {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\n// type RecordingStats = {\n\n//     /**\n//      * Current local recording session token used by the participant.\n//      */\n//     currentSessionToken: number,\n\n//     /**\n//      * Whether local recording is engaged on the participant's device.\n//      */\n//     isRecording: boolean,\n\n//     /**\n//      * Total recorded bytes. (Reserved for future use.)\n//      */\n//     recordedBytes: number,\n\n//     /**\n//      * Total recording duration. (Reserved for future use.)\n//      */\n//     recordedLength: number\n// }\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats() {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return Promise.resolve();\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","/* global TransformStream */\nimport { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\n// Flag to set on receivers to avoid setting up the lite mode\n// more than once.\nconst kJitsiLiteMode = Symbol('kJitsiLiteMode');\n\nconst logger = getLogger(__filename);\n\n/**\n * This module implements a discard-all insertable stream.  Use to reduce decoder CPU load for testing.\n */\nexport class LiteModeContext {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which lite mode is to be enabled.\n     */\n    constructor(conference) {\n        this.enabled = FeatureFlags.isRunInLiteModeEnabled();\n        if (!this.enabled) {\n            return;\n        }\n\n        conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupLiteModeForTrack(tpc, track));\n    }\n\n    /**\n     * Setup Lite Mode for a track.\n     *\n     * @private\n     */\n    _setupLiteModeForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (!receiver) {\n            logger.warn(`Could not set up lite mode for ${track}: receiver not found in: ${tpc}`);\n\n            return;\n        }\n\n        if (receiver[kJitsiLiteMode]) {\n            return;\n        }\n        receiver[kJitsiLiteMode] = true;\n\n        const receiverStreams = receiver.createEncodedStreams();\n\n        const transformStream = new TransformStream({\n            transform: () => {\n                // Don't call controller.enqueue(encodedFrame), and so drop everything\n            }\n        });\n\n        receiverStreams.readable.pipeThrough(transformStream).pipeTo(receiverStreams.writable);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT = 2160;\nconst LASTN_UNLIMITED = -1;\nconst ASSUMED_BANDWIDTH_BPS = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     * @param {Object} options - The instance options:\n     * - lastN: Number of videos to be requested from the bridge.\n     * - assumedBandwidthBps: Number of bps to be requested from the bridge.\n     */\n    constructor(options) {\n        const { lastN, assumedBandwidthBps } = options;\n\n        // The number of videos requested from the bridge.\n        this._lastN = lastN ?? LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge/peer.\n        this._maxFrameHeight = MAX_HEIGHT;\n\n        // The number representing the assumed count of bps the local client should receive from the bridge.\n        this._assumedBandwidthBps = assumedBandwidthBps ?? ASSUMED_BANDWIDTH_BPS;\n\n        this._receiverVideoConstraints = {\n            assumedBandwidthBps: this._assumedBandwidthBps,\n            constraints: {},\n            defaultConstraints: { 'maxHeight': this._maxFrameHeight },\n            lastN: this._lastN\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel or to the remote peer.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.assumedBandwidthBps = this._assumedBandwidthBps;\n        this._receiverVideoConstraints.lastN = this._lastN;\n        if (Object.keys(this._receiverVideoConstraints.constraints)?.length) {\n            /* eslint-disable no-unused-vars */\n            for (const [ key, value ] of Object.entries(this._receiverVideoConstraints.constraints)) {\n                value.maxHeight = this._maxFrameHeight;\n            }\n        } else {\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n\n    /**\n     * Updates the assumed bandwidth bps of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} assumedBandwidthBps\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateAssumedBandwidthBps(assumedBandwidthBps) {\n        const changed = this._assumedBandwidthBps !== assumedBandwidthBps;\n\n        if (changed) {\n            this._assumedBandwidthBps = assumedBandwidthBps;\n            logger.debug(`Updating receive assumedBandwidthBps: ${assumedBandwidthBps}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT;\n\n        /**\n         * The map that holds the max frame height requested per remote source for p2p connection.\n         *\n         * @type Map<string, number>\n         */\n        this._sourceReceiverConstraints = new Map();\n\n        /**\n         * The number of bps requested from the bridge.\n         */\n        this._assumedBandwidthBps = ASSUMED_BANDWIDTH_BPS;\n\n        // The default receiver video constraints.\n        this._receiverVideoConstraints = new ReceiverVideoConstraints({\n            lastN: this._lastN,\n            assumedBandwidthBps: this._assumedBandwidthBps\n        });\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Returns a map of all the remote source names and the corresponding max frame heights.\n     *\n     * @param {JingleSessionPC} mediaSession - the media session.\n     * @param {number} maxFrameHeight - the height to be requested for remote sources.\n     * @returns\n     */\n    _getDefaultSourceReceiverConstraints(mediaSession, maxFrameHeight) {\n        const height = maxFrameHeight ?? MAX_HEIGHT;\n        const remoteVideoTracks = mediaSession.peerconnection?.getRemoteTracks(null, MediaType.VIDEO) || [];\n        const receiverConstraints = new Map();\n\n        for (const track of remoteVideoTracks) {\n            receiverConstraints.set(track.getSourceName(), height);\n        }\n\n        return receiverConstraints;\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P) {\n            mediaSession.setReceiverVideoConstraint(this._getDefaultSourceReceiverConstraints(mediaSession));\n        } else {\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Sets the assumed bandwidth bps the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} assumedBandwidthBps - the new value.\n     * @returns {void}\n     */\n    setAssumedBandwidthBps(assumedBandwidthBps) {\n        if (this._receiverVideoConstraints.updateAssumedBandwidthBps(assumedBandwidthBps)) {\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._receiverVideoConstraints.updateLastN(value)) {\n                this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P) {\n                session.setReceiverVideoConstraint(this._getDefaultSourceReceiverConstraints(session, maxFrameHeight));\n            } else if (this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight)) {\n                this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!constraints) {\n            return;\n        }\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n\n        if (isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._assumedBandwidthBps = constraints.assumedBandwidthBps ?? this._assumedBandwidthBps;\n            this._lastN = constraints.lastN ?? this._lastN;\n\n            // Send the contraints on the bridge channel.\n            this._rtc.setReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (!p2pSession) {\n                return;\n            }\n\n            const mappedConstraints = Array.from(Object.entries(constraints.constraints))\n                .map(constraint => {\n                    constraint[1] = constraint[1].maxHeight;\n\n                    return constraint;\n                });\n\n            this._sourceReceiverConstraints = new Map(mappedConstraints);\n\n            // Send the receiver constraints to the peer through a \"content-modify\" message.\n            p2pSession.setReceiverVideoConstraint(this._sourceReceiverConstraints);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        for (const track of this._rtc.getLocalVideoTracks()) {\n            const sourceName = track.getSourceName();\n\n            sourceName && this._propagateSendMaxFrameHeight(sourceName);\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED,\n            (session, sourceConstraints) => {\n                session === this._conference.getActiveMediaSession()\n                    && sourceConstraints.forEach(constraint => this._onSenderConstraintsReceived(constraint));\n            });\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        const { maxHeight, sourceName } = videoConstraints;\n        const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n        for (const track of localVideoTracks) {\n            // Propagate the sender constraint only if it has changed.\n            if (track.getSourceName() === sourceName\n                && this._sourceSenderConstraints.get(sourceName) !== maxHeight) {\n                this._sourceSenderConstraints.set(\n                    sourceName,\n                    maxHeight === -1\n                        ? Math.min(MAX_LOCAL_RESOLUTION, this._preferredSendMaxFrameHeight)\n                        : maxHeight);\n                logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                this._propagateSendMaxFrameHeight(sourceName);\n            }\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName) {\n        if (!sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName) {\n        if (!sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? this._sourceSenderConstraints.get(sourceName)\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n        const promises = [];\n\n        for (const sourceName of this._sourceSenderConstraints.keys()) {\n            promises.push(this._propagateSendMaxFrameHeight(sourceName));\n        }\n\n        return Promise.allSettled(promises);\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n        this._jibriJid = null;\n        this._statusFromJicofo = '';\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        // If _status is not set fallback to the status reported by jicofo.\n        if (this._status) {\n            return this._status;\n        }\n\n        return this._statusFromJicofo;\n    }\n\n    /**\n     * @returns {string|undefined} the JID of jibri associated with this session.\n     */\n    getJibriJid() {\n        return this._jibriJid;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Set the session status reported by jicofo. If a jibri is present in the room,\n     * the status is always 'on'. Otherwise, we fallback to the status reported by jicofo.\n     *\n     * @param {string} status\n     */\n    setStatusFromJicofo(status) {\n        this._statusFromJicofo = status;\n    }\n\n    /**\n     * Set the JID of the jibri associated with this session.\n     *\n     * @param {*} jibriJid\n     */\n    setJibriJid(jibriJid) {\n        this._jibriJid = jibriJid;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        try {\n            appData = JSON.parse(appData)|| {};\n        } catch(e) {\n            appData = {};\n        }\n        \n        appData[\"base_url\"] = appData[\"base_url\"] ? appData[\"base_url\"] : `${window.location.origin}${window.location.pathname}`;\n        appData[\"token\"] =  this._connection.emuc.xmpp.token;\n        \n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this.onMemberLeft = this.onMemberLeft.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.MUC_MEMBER_LEFT, this.onMemberLeft);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Find a session with a specific jibri JID.\n     *\n     * @param {string} jibriJid the JID to search for.\n     * @returns\n     */\n    getSessionByJibriJid(jibriJid) {\n        let s;\n\n        Object.values(this._sessions).forEach(session => {\n            if (session.getJibriJid() === jibriJid) {\n                s = session;\n            }\n        });\n\n        return s;\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Handle a participant leaving the room.\n     * @param {string} jid the JID of the participant that left.\n     */\n    onMemberLeft(jid) {\n        const session = this.getSessionByJibriJid(jid);\n\n        if (session) {\n\n            const prevStatus = session.getStatus();\n\n            // Setting to ''\n            session.setStatus('');\n            session.setJibriJid(null);\n\n            if (session.getStatus() !== prevStatus) {\n                this._emitSessionUpdate(session);\n            }\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatusFromJicofo(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, 'on', mode);\n        }\n\n        // When a jibri is present the status is always 'on';\n        session.setStatus('on');\n        session.setJibriJid(presence.getAttribute('from'));\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiConference} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue === 'undefined') {\n            return;\n        }\n\n        if (typeof nextValue !== 'number') {\n            logger.error(`${this.name} - invalid value for idx: ${this.count}`, nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\n\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face-landmarks';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                (participant, { type, faceLandmarks }) => {\n                    if (type === FACE_LANDMARK_MESSAGE_TYPE) {\n                        this._onFaceLandmarkAdd(participant.getId(), faceLandmarks);\n                    }\n                });\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new dominant speaker.\n     * @param {Array[string]} previous - The array with previous speakers.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId, previous, silence) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true, silence);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data) {\n            savedUser.addFaceLandmarks(data);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                    = newStats[userId].totalDominantSpeakerTime;\n\n                if (Array.isArray(newStats[userId].faceLandmarks)) {\n                    speakerStatsToUpdate.setFaceLandmarks(newStats[userId].faceLandmarks);\n                }\n            }\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const appData = {};\n        appData[\"baseUrl\"] =  window.location.origin;\n        appData[\"token\"] =  this.chatRoom.connection.emuc.xmpp.token\n\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        // Add handlers for 'audiomuted', 'videomuted' and 'videoType' fields in presence in order to support interop\n        // with very old versions of mobile clients and jigasi that do not support source-name signaling.\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n        room.addPresenceListener('videoType', this._videoTypeHandler);\n\n        // Add handlers for presence in the new format.\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                let sourceChanged = false;\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    sourceChanged = true;\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n                    sourceChanged = true;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n\n                if (sourceChanged && FeatureFlags.isSsrcRewritingSupported()) {\n                    this.eventEmitter.emit(\n                        SignalingEvents.SOURCE_UPDATED,\n                        sourceName,\n                        mucNick,\n                        newMutedState,\n                        newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            for (const [ key, value ] of this.ssrcOwners.entries()) {\n                if (value === endpointId) {\n                    delete this._sourceNames[key];\n                }\n            }\n        };\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Logs a debug or error message to console depending on whether SSRC rewriting is enabled or not.\n     * Owner changes are permitted only when SSRC rewriting is enabled.\n     *\n     * @param {string} message - The message to be logged.\n     * @returns {void}\n     */\n    _logOwnerChangedMessage(message) {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.debug(message);\n        } else {\n            logger.error(message);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.warn('Requested peer media info, before room was set');\n        };\n\n        const lastPresence = this.chatRoom?.getLastPresence(owner);\n\n        if (!lastPresence) {\n            logger.warn(`getPeerMediaInfo - no presence stored for: ${owner}`);\n\n            return;\n        }\n        if (!this._doesEndpointSendNewSourceInfo(owner)) {\n            return legacyGetPeerMediaInfo();\n        }\n\n        if (sourceName) {\n            return this.getPeerSourceInfo(owner, sourceName);\n        }\n\n        const mediaInfo = {\n            muted: true\n        };\n\n        if (mediaType === MediaType.VIDEO) {\n            mediaInfo.videoType = undefined;\n            const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n            if (codecTypeNode.length > 0) {\n                mediaInfo.codecType = codecTypeNode[0].value;\n            }\n        }\n\n        return mediaInfo;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaType = getMediaTypeFromSourceName(sourceName);\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    removeSSRCOwners(ssrcList) {\n        if (!ssrcList?.length) {\n            return;\n        }\n\n        for (const ssrc of ssrcList) {\n            this.ssrcOwners.delete(ssrc);\n        }\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            this._sourceInfoHandler\n                && oldChatRoom.removePresenceListener(SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n            this._memberLeftHandler\n                && oldChatRoom.removeEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n        }\n        if (room) {\n            this._bindChatRoomEventHandlers(room);\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            this._logOwnerChangedMessage(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            this._logOwnerChangedMessage(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateSsrcOwnersOnLeave(id) {\n        const ssrcs = Array.from(this.ssrcOwners)\n            .filter(entry => entry[1] === id)\n            .map(entry => entry[0]);\n\n        if (!ssrcs?.length) {\n            return;\n        }\n\n        this.removeSSRCOwners(ssrcs);\n    }\n\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling from './modules/connectivity/IceFailedHandling';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { RecordingController } from './modules/local-recording';\nimport { LiteModeContext } from './modules/litemode/LiteModeContext';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { SignalingEvents } from './service/RTC/SignalingEvents';\nimport { getMediaTypeFromSourceName, getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nwindow.APP = {\n    conference: {\n    }\n};\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Checks if a given string is a valid video codec mime type.\n *\n * @param {string} codec the codec string that needs to be validated.\n * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n * @private\n */\nfunction _getCodecMimeType(codec) {\n    if (typeof codec === 'string') {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return null;\n}\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n\n    /**\n     * List of all the participants in the conference.\n     * @type {Map<string, JitsiParticipant>};\n     */\n    this.participants = new Map();\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    if (FeatureFlags.isRunInLiteModeEnabled()) {\n        logger.info('Lite mode enabled');\n\n        this._liteModeContext = new LiteModeContext(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n\n\n    this.handleSubtitles();\n\n    if (options.config.enableLocalRecording) {\n        this.recordingController = new RecordingController();\n        this.recordingController.registerEvents(this);\n    }\n\n    if (options.config.enableAnalytics) {\n        this.enableAnalytics();\n    }\n\n    if (options.config.iAmRecorder) {\n        this.removeCommand('userinfo');\n        this.sendCommand(\n            'userinfo',\n            {\n                attributes: {\n                    xmlns: 'http://jitsi.org/jitmeet/userinfo',\n                    robot: true\n                }\n            });\n    }\n\n    const self = this;\n\n    window.APP = {\n        conference: {\n            _room: this,\n            get membersCount() {\n                return self.getParticipantsWithoutHidden().length + 1;\n            },\n            getStats() {\n                return self.connectionQuality.getStats();\n            },\n            getConnectionState() {\n                return self.getConnectionState();\n            }\n        }\n    };\n\n    this.localTracksDuration = new LocalTracksDuration(this);\n    this.sessions = {};\n    this.user = options.user;\n    this._firefoxP2pEnabled = browser.isVersionGreaterThan(109)\n        && (this.options.config.testing?.enableFirefoxP2p ?? true);\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid) {\n    return Strophe.getNodeFromJid(jid);\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    const codecSettings = {\n        jvbDisabledCodec: _getCodecMimeType(config.videoQuality?.disabledCodec),\n        p2pDisabledCodec: _getCodecMimeType(config.p2p?.disabledCodec),\n        enforcePreferredCodec: config.videoQuality?.enforcePreferredCodec,\n        jvbPreferredCodec: _getCodecMimeType(config.videoQuality?.preferredCodec),\n        p2pPreferredCodec: _getCodecMimeType(config.p2p?.preferredCodec)\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n    this._signalingLayer.on(\n        SignalingEvents.SOURCE_UPDATED,\n        (sourceName, endpointId, muted, videoType) => {\n            const participant = this.participants.get(endpointId);\n            const mediaType = getMediaTypeFromSourceName(sourceName);\n\n            if (participant) {\n                participant._setSources(mediaType, muted, sourceName, videoType);\n                this.eventEmitter.emit(JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED, participant);\n            }\n        });\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        this._registerRtcListeners(this.rtc);\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection && !config.disableAudioLevels && LocalStatsCollector.isLocalStatsSupported()) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @param reason {string|undefined} The reason for leaving the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function(reason) {\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave(reason);\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns <tt>true</tt> if end conference support is enabled in the backend.\n *\n * @returns {boolean} whether end conference is supported in the backend.\n */\nJitsiConference.prototype.isEndConferenceSupported = function() {\n    return Boolean(this.room && this.room.xmpp.endConferenceComponentAddress);\n};\n\n/**\n * Ends the conference.\n */\nJitsiConference.prototype.end = function() {\n    if (!this.isEndConferenceSupported()) {\n        logger.warn('Cannot end conference: is not supported.');\n\n        return;\n    }\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    this.room.end();\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    localtrack && this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        if (name) {\n            this.room.addOrReplaceInPresence(nickKey, {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: name\n            }) && this.room.sendPresence();\n        } else if (this.room.getFromPresence(nickKey)) {\n            this.room.removeFromPresence(nickKey);\n            this.room.sendPresence();\n        }\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (!track) {\n        return;\n    }\n    if (track.isAudioTrack() && this.options.config.startAudioMuted) {\n        track.mute();\n    }\n    if (track.isVideoTrack() && this.options.config.startVideoMuted) {\n        track.mute();\n    }\n\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        // Currently, only adding multiple video streams of different video types is supported.\n        // TODO - remove this limitation once issues with jitsi-meet trying to add multiple camera streams is fixed.\n        if (FeatureFlags.isMultiStreamSendSupportEnabled()\n            && mediaType === MediaType.VIDEO\n            && !localTracks.find(t => t.getVideoType() === track.getVideoType())) {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            track.setSourceName(sourceName);\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track)\n        .then(() => {\n            // Presence needs to be sent here for desktop track since we need the presence to reach the remote peer\n            // before signaling so that a fake participant tile is created for screenshare. Otherwise, presence will\n            // only be sent after a session-accept or source-add is ack'ed.\n            if (track.getVideoType() === VideoType.DESKTOP && FeatureFlags.isMultiStreamSendSupportEnabled()) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n        });\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants.get(actorId);\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants.get(actorId);\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation.\n    // In React Native we mute the camera by setting track.enabled but that doesn't\n    // work for screen-share tracks, so do the remove-as-mute for those.\n    const doesVideoMuteByStreamRemove\n        = browser.isReactNative() ? track.videoType === VideoType.DESKTOP : browser.doesVideoMuteByStreamRemove();\n\n    if (track.isVideoTrack() && !doesVideoMuteByStreamRemove) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!(this.isStartAudioMuted() || this.startMutedPolicy.audio)\n                    || browser.isWebKitBased()\n                    || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted() && !this.startMutedPolicy.video) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const mediaType = oldTrack?.getType() || newTrack?.getType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSendSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n\n    if (newTrack) {\n        const sourceName = oldTrack\n            ? oldTrack.getSourceName()\n            : getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            if (oldTrackBelongsToConference && !oldTrack.isMuted() && !newTrack) {\n                oldTrack._sendMuteStatus(true);\n            }\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n            this._updateRoomPresence(this.getActiveMediaSession());\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (!newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Suspend media on the inactive media session since it gets automatically enabled for a newly added source.\n    if (this.isP2PActive()) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to add the underlying MediaStream to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be added to the pc.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._addLocalTrackToPc = function(track) {\n    const addPromises = [];\n\n    if (this.jvbJingleSession) {\n        addPromises.push(this.jvbJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addPromises.push(this.p2pJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addPromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to remove the underlying MediaStream from the\n * RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._removeLocalTrackFromPc = function(track) {\n    const removePromises = [];\n\n    if (this.jvbJingleSession) {\n        removePromises.push(this.jvbJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removePromises.push(this.p2pJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setP2pVideoTransferActive(isVideoActive)\n            .catch(error => {\n                logger.error(`Failed to adjust video transfer status (${isVideoActive})`, error);\n            });\n    }\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Array.from(this.participants.values());\n};\n\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\n JitsiConference.prototype.getParticipantsWithoutHidden = function() {\n    let participants = this.getParticipants().filter(participant => !participant._hidden);\n\n    participants = participants.filter(participant => !participant?._properties?.features_jigasi);\n\n    return participants;\n};\n\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants.get(id);\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    // Set remote tracks on the participant if source signaling was received before presence.\n    const remoteTracks = this.isP2PActive()\n        ? this.p2pJingleSession?.peerconnection.getRemoteTracks(id) ?? []\n        : this.jvbJingleSession?.peerconnection.getRemoteTracks(id) ?? [];\n\n    for (const track of remoteTracks) {\n        participant._tracks.push(track);\n    }\n\n    this.participants.set(id, participant);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid, reason) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Update the SSRC owners list.\n        session._signalingLayer.updateSsrcOwnersOnLeave(id);\n        if (!FeatureFlags.isSsrcRewritingSupported()) {\n            // Remove the ssrcs from the remote description and renegotiate.\n            session.removeRemoteStreamsOnLeave(id);\n        }\n    }\n\n    tracksToBeRemoved.forEach(track => {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            track.setSourceName(null);\n            track.setOwner(null);\n        } else {\n            // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n        }\n    });\n\n    const participant = this.participants.get(id);\n\n    if (participant) {\n        this.participants.delete(id);\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant, reason);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants.get(actorId);\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants.get(kickedParticipantId);\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    // Add track to JitsiParticipant.\n    if (participant) {\n        participant._tracks.push(track);\n    } else {\n        logger.info(`Source signaling received before presence for ${id}`);\n    }\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const usesUnifiedPlan = browser.supportsUnifiedPlan();\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (usesUnifiedPlan !== peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || (browser.isFirefox() && !this._firefoxP2pEnabled)) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                codecSettings: {\n                    mediaType: MediaType.VIDEO,\n                    preferred: this.codecSelection.jvbPreferredCodec,\n                    disabled: this.codecSelection.jvbDisabledCodec\n                },\n                enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    const ignoreDomain = this.connection?.options?.bridgeChannel?.ignoreDomain;\n    const preferSctp = this.connection?.options?.bridgeChannel?.preferSctp ?? false;\n    const sctpOffered = $(offerIq).find('>content[name=\"data\"]')\n        .first().length === 1;\n    let wsUrl = null;\n\n    logger.info(`SCTP: offered=${sctpOffered}, prefered=${preferSctp}`);\n\n    if (!(sctpOffered && preferSctp)) {\n        $(offerIq).find('>content>transport>web-socket')\n            .toArray()\n            .map(e => e.getAttribute('url'))\n            .forEach(url => {\n                if (!wsUrl && (!ignoreDomain || ignoreDomain !== new URL(url).hostname)) {\n                    wsUrl = url;\n                    logger.info(`Using colibri-ws url ${url}`);\n                } else if (!wsUrl) {\n                    logger.info(`Ignoring colibri-ws url with domain ${ignoreDomain}`);\n                }\n            });\n\n        if (!wsUrl) {\n            const firstWsUrl = $(offerIq).find('>content>transport>web-socket')\n                .first();\n\n            if (firstWsUrl.length === 1) {\n                wsUrl = firstWsUrl[0].getAttribute('url');\n                logger.info(`Falling back to ${wsUrl}`);\n            }\n        }\n    }\n\n    if (wsUrl && !(sctpOffered && preferSctp)) {\n        // If the offer contains a websocket and we don't prefer SCTP use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else if (sctpOffered) {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else {\n        logger.warn('Neither SCTP nor a websocket is available. Will not initialize bridge channel.');\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options?.errorMsg) {\n        logger.warn(options.errorMsg);\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    return this.room?.moderator?.isSipGatewayEnabled() ?? false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n\n    // Do not apply the startMutedPolicy locally on the moderator, the moderator should join with available local\n    // sources and the policy needs to be applied only on users that join the call after.\n    // this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            codecSettings: {\n                mediaType: MediaType.VIDEO,\n                preferred: this.codecSelection.p2pPreferredCodec,\n                disabled: this.codecSelection.p2pDisabledCodec\n            },\n            enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants.get(remoteID);\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        // There will be orphan (with no owner) tracks when ssrc-rewriting is enabled and all of them need to be addded\n        // back to the conference.\n        if (FeatureFlags.isSsrcRewritingSupported() || this.participants.has(track.ownerEndpointId)) {\n            logger.info(`Adding remote ${logName} track: ${track}`);\n            this.onRemoteTrackAdded(track);\n        }\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    this.setDisplayName(`${this.getLocalUser() && this.getLocalUser().name}(${this.options.connection.options.ownerId})`);\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true)\n        .then(() => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        })\n        .catch(error => {\n            logger.error('Failed to resume media transfer over the JVB connection:', error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession.setP2pVideoTransferActive(isVideoActive)\n            .catch(error => {\n                logger.error(`Failed to sync up P2P video transfer status (${isVideoActive}), ${error}`);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            codecSettings: {\n                mediaType: MediaType.VIDEO,\n                preferred: this.codecSelection.p2pPreferredCodec,\n                disabled: this.codecSelection.p2pDisabledCodec\n            },\n            enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants.get(remoteID);\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false)\n        .then(() => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        })\n        .catch(error => {\n            logger.error('Failed to suspend media transfer over the JVB connection:', error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || (browser.isFirefox() && !this._firefoxP2pEnabled)\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = jingleSession.peerconnection.getLocalTracks();\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceLandmarksEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the following format. The message updates\n * the fields that are present and leaves the rest unchanged on the bridge. Therefore, any field that is not applicable\n * anymore should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedSources': ['A', 'B', 'C'],\n *      'onStageSources': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n * Where A, B and C are source-names of the remote tracks that are being requested from the bridge.\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the assumed bandwidth bps for the video that is requested from the bridge.\n *\n * @param {Number} assumedBandwidthBps - The bandwidth value expressed in bits per second.\n */\nJitsiConference.prototype.setAssumedBandwidthBps = function(assumedBandwidthBps) {\n    this.receiveVideoController.setAssumedBandwidthBps(assumedBandwidthBps);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Starts the participant verification process.\n *\n * @param {string} participantId The participant which will be marked as verified.\n * @returns {void}\n */\nJitsiConference.prototype.startVerification = function(participantId) {\n    const participant = this.getParticipantById(participantId);\n\n    if (!participant) {\n        return;\n    }\n\n    this._e2eEncryption.startVerification(participant);\n};\n\n/**\n * Marks the given participant as verified. After this is done, MAC verification will\n * be performed and an event will be emitted with the result.\n *\n * @param {string} participantId The participant which will be marked as verified.\n * @param {boolean} isVerified - whether the verification was succesfull.\n * @returns {void}\n */\nJitsiConference.prototype.markParticipantVerified = function(participantId, isVerified) {\n    const participant = this.getParticipantById(participantId);\n\n    if (!participant) {\n        return;\n    }\n\n    this._e2eEncryption.markParticipantVerified(participant, isVerified);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n\n/**\n * Gets the local user when joined\n */\n JitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.terminate = function() {\n    this.sendCommand('terminate', {});\n};\n\n\nJitsiConference.prototype.handleSubtitles = function() {\n\n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty('translation_language');\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage.final = json.text;\n                newTranscriptMessage.participantName = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                    newTranscriptMessage = pastMessage;\n                } else {\n                    newTranscriptMessage.participantName = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage.final = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage.stable = text;\n                    newTranscriptMessage.unstable = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage.unstable = text;\n                }\n\n            }\n\n            let finalText = '';\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n\n                finalText = stable + unstable;\n            }\n            const fellowParticipantName =  this.participants[json?.participant?.id]?._identity?.user?.name ||  this?.getLocalUser()?.name;\n            this.eventEmitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, json?.participant?.id, fellowParticipantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n};\n\n// enable analytics\nJitsiConference.prototype.enableAnalytics = function() {\n    this.statistics.addAnalyticsEventListener((eventName, payload) => {\n        let name = '', body = {};\n\n        if (typeof eventName === 'string') {\n            name = eventName;\n            body = payload;\n        } else if (typeof eventName === 'object') {\n            name = eventName.name;\n            body = eventName;\n        }\n\n        const finalPaylaod = {\n            name,\n            action: body.action ? body.action : '',\n            actionSubject: body.actionSubject ? body.actionSubject : '',\n            source: body.source ? body.source : '',\n            attributes: JSON.stringify(payload)\n        };\n\n        this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, finalPaylaod);\n    });\n};\n\nJitsiConference.prototype.startLocalRecording = function(format = 'ogg') {\n    this.recordingController.startRecording(format);\n};\n\nJitsiConference.prototype.stopLocalRecording = function() {\n    this.recordingController.stopRecording();\n};\n\nJitsiConference.prototype.switchFormat = function() {\n    this.recordingController.switchFormat(format);\n};\n\nJitsiConference.prototype.setMuted = function(muted) {\n    this.recordingController.setMuted(muted);\n};\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n    this.recordingController.setMicDevice(micDeviceId);\n};\n\nJitsiConference.prototype.startSIPVideoCall = function(sipAddress, displayName) {\n    if (this.sessions[sipAddress]) {\n        return;\n    }\n    const session = this.createVideoSIPGWSession(sipAddress, displayName);\n\n    this.sessions[sipAddress] = session;\n    session.start();\n};\n\nJitsiConference.prototype.stopSIPVideoCall = function(sipAddress) {\n    if (!this.sessions[sipAddress]) {\n        return;\n    }\n    this.sessions[sipAddress].stop();\n    delete this.sessions[sipAddress];\n};\n/**\n * Returns the metadata handler object.\n *\n * @returns {Object} the room metadata handler.\n */\nJitsiConference.prototype.getMetadataHandler = function() {\n    return this.room?.getMetadataHandler();\n};\n","import Bourne from '@hapi/bourne';\n\n/**\n * A list if keys to ignore when parsing.\n * @type {string[]}\n */\n\nconst blacklist = [ '__proto__', 'constructor', 'prototype' ];\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {URL} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\n\nexport function parseURLParams(dontParse = true) {\n    const paramStr = location.search ? location.search : location.hash;\n    const params = {};\n    const paramParts = paramStr && paramStr.substr(1)\n        .split('&') || []; // Detect and ignore hash params for hash routers.\n\n    if (location.hash && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key || blacklist.includes(key.split('.')[0])) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value)\n                    .replace(/\\\\&/, '&');\n                value = decoded === 'undefined' ? undefined : Bourne.parse(decoded);\n            }\n        } catch (e) {\n            console.log(`Failed to parse URL parameter value: ${String(value)}`);\n            return;\n        }\n\n        params[key] = value;\n    });\n    return params;\n}\n\n\nexport function syncWithURL(conferenceConfig) {\n    const params = parseURLParams();\n    Object.keys(params)\n        .forEach(param => {\n            const key = param.replace('config.', '');\n            switch (key) {\n            case 'analytics.disabled':\n                conferenceConfig.analytics.disabled = params[param];\n                break;\n            case 'startWithAudioMuted':\n                conferenceConfig.startAudioMuted = params[param];\n                break;\n            case 'startWithVideoMuted':\n                conferenceConfig.startVideoMuted = params[param];\n                break;\n            case 'p2p.enabled':\n                conferenceConfig.p2p.enabled = params[param];\n                break;\n            default:\n                conferenceConfig[key] = params[param];\n            }\n        });\n    console.log(\"conferenceConfig\",conferenceConfig);    \n    return conferenceConfig;\n}\n\n\n\n\n\n\n\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: false,\n    flags: {\n        sendMultipleVideoStreams: true,\n        sourceNameSignaling: true,\n        enableJoinAsVisitor: true,\n    }\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const devConnectionConfig = {\n    hosts: {\n        domain: 'dev.sariska.io',\n        muc: 'muc.dev.sariska.io'\n    },\n    serviceUrl: 'wss://api.dev.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const conferenceConfig = {\n    enableLocalRecording: true,\n    enableVirtualBackground: false,\n    enableNoiseCancellation: false,\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true,\n    enableNoisyMicDetection: true,\n    createVADProcessor: true,\n    openBridgeChannel: 'websocket',\n    //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n    hiddenDomain: \"recorder.sariska.io\",\n    // startAudioMuted\n    // startVideoMuted\n    enableLayerSuspension: true, // - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping: {\n        pingInterval: -1 // analyticsInterval: 60000,\n    },\n    analytics: {\n        disabled: false\n        // rtcstatsEnabled: true,\n\n        // In order to enable rtcstats one needs to provide a endpoint url.\n        // rtcstatsEndpoint: wss://rtcstats-server-pilot.jitsi.net/,\n\n        // The interval at which rtcstats will poll getStats, defaults to 1000ms.\n        // If the value is set to 0 getStats won't be polled and the rtcstats client\n        // will only send data related to RTCPeerConnection events.\n        // rtcstatsPolIInterval: 1000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { syncWithURL } from \"./modules/util/parseURLParams\";\nimport { connectionConfig, conferenceConfig, devConnectionConfig } from './config';\nexport const DISCO_JIBRI_FEATURE = 'http://jitsi.org/protocol/jibri';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, roomName, isDev) {\n    let options;\n    const jwt = this.parseJwt(token);\n    this.name = roomName;\n    this.user = jwt.context.user;\n    options = isDev ? {...devConnectionConfig} : {...connectionConfig};\n    options.serviceUrl = `${options.serviceUrl}?room=${roomName}`;\n    this.options = options;\n    options.ownerId = jwt.context.group;\n    this.xmpp = new XMPP(options, token);\n    this.token = token;\n    this.isDev = isDev;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (e) {\n      return null;\n    }\n  };\n  \n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    const usernameOverride = jitsiLocalStorage.getItem('xmpp_username_override');\n    const passwordOverride = jitsiLocalStorage.getItem('xmpp_password_override');\n  \n    if (usernameOverride && usernameOverride.length > 0) {\n      options.id = usernameOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    if (passwordOverride && passwordOverride.length > 0) {\n      options.password = passwordOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = { ...conferenceConfig,\n        ...options\n    };\n    options = syncWithURL(options);\n    const name = this.name;\n    if (this.isDev) {\n        options = {...options, hiddenDomain: \"recorder.dev.sariska.io\"}\n    }\n    \n    if (options.iAmRecorder) {\n        this.addFeature(DISCO_JIBRI_FEATURE);\n    }\n\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(\n            (browser.isFirefox() && browser.isVersionLessThan('101'))\n            || browser.isIosBrowser()\n        );\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n\n                    Statistics.startLocalStats(track, track.setAudioLevel.bind(track));\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Custom semi-mock implementation for the Proxy connection service.\n */\nexport default class CustomSignalingLayer extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams.\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        return {};\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    removeSSRCOwners(ssrcList) {\n        if (!ssrcList?.length) {\n            return;\n        }\n\n        for (const ssrc of ssrcList) {\n            this.ssrcOwners.delete(ssrc);\n        }\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        this.chatRoom = room;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateSsrcOwnersOnLeave(id) {\n        const ssrcs = Array.from(this.ssrcOwners)\n            .filter(entry => entry[1] === id)\n            .map(entry => entry[0]);\n\n        if (!ssrcs?.length) {\n            return;\n        }\n\n        this.removeSSRCOwners(ssrcs);\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport CustomSignalingLayer from './CustomSignalingLayer';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addEventListener: () => { /* no op */ },\n            addPresenceListener: () => { /* no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            removeEventListener: () => { /* no op */ },\n            removePresenceListener: () => { /* no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new CustomSignalingLayer();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        localTracks.forEach((localTrack, localTrackIndex) => {\n            const localSourceNameTrack = getSourceNameForJitsiTrack('peer', localTrack.getType(), localTrackIndex);\n\n            localTrack.setSourceName(localSourceNameTrack);\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL,\n    timerWorkerScript\n} from './TimeWorker';\n\n/**\n * Represents a modified MediaStream that adds video as pip on a desktop stream.\n * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n * desktop stream.\n */\nexport default class JitsiStreamPresenterEffect {\n    /**\n     * Represents a modified MediaStream that adds a camera track at the\n     * bottom right corner of the desktop track using a HTML canvas.\n     * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n     * video stream.\n     *\n     * @param {MediaStream} videoStream - The video stream which is user for\n     * creating the canvas.\n     */\n    constructor(videoStream) {\n        const videoDiv = document.createElement('div');\n        const firstVideoTrack = videoStream.getVideoTracks()[0];\n        const { height, width, frameRate } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n\n        this._desktopElement = document.createElement('video');\n        this._videoElement = document.createElement('video');\n        videoDiv.appendChild(this._videoElement);\n        videoDiv.appendChild(this._desktopElement);\n        if (document.body !== null) {\n            document.body.appendChild(videoDiv);\n        }\n\n        // Set the video element properties\n        this._frameRate = parseInt(frameRate, 10);\n        this._videoElement.width = parseInt(width, 10);\n        this._videoElement.height = parseInt(height, 10);\n        this._videoElement.autoplay = true;\n        this._videoElement.srcObject = videoStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._videoElement.play();\n\n        // set the style attribute of the div to make it invisible\n        videoDiv.style.display = 'none';\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onVideoFrameTimer = this._onVideoFrameTimer.bind(this);\n    }\n\n    /**\n     * EventHandler onmessage for the videoFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onVideoFrameTimer(response) {\n        if (response.data.id === INTERVAL_TIMEOUT) {\n            this._renderVideo();\n        }\n    }\n\n    /**\n     * Loop function to render the video frame input and draw presenter effect.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderVideo() {\n        // adjust the canvas width/height on every frame incase the window has been resized.\n        const [ track ] = this._desktopStream.getVideoTracks();\n        const { height, width } = track.getSettings() ?? track.getConstraints();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._ctx.drawImage(this._desktopElement, 0, 0, this._canvas.width, this._canvas.height);\n        this._ctx.drawImage(this._videoElement, this._canvas.width - this._videoElement.width, this._canvas.height\n            - this._videoElement.height, this._videoElement.width, this._videoElement.height);\n\n        // draw a border around the video element.\n        this._ctx.beginPath();\n        this._ctx.lineWidth = 2;\n        this._ctx.strokeStyle = '#A9A9A9'; // dark grey\n        this._ctx.rect(this._canvas.width - this._videoElement.width, this._canvas.height - this._videoElement.height,\n            this._videoElement.width, this._videoElement.height);\n        this._ctx.stroke();\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the\n     * specified track, false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'desktop';\n    }\n\n    /**\n     * Starts loop to capture video frame and render presenter effect.\n     *\n     * @param {MediaStream} desktopStream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(desktopStream) {\n        const firstVideoTrack = desktopStream.getVideoTracks()[0];\n        const { height, width } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        // set the desktop element properties.\n        this._desktopStream = desktopStream;\n        this._desktopElement.width = parseInt(width, 10);\n        this._desktopElement.height = parseInt(height, 10);\n        this._desktopElement.autoplay = true;\n        this._desktopElement.srcObject = desktopStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._desktopElement.play();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._videoFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Presenter effect worker' });\n        this._videoFrameTimerWorker.onmessage = this._onVideoFrameTimer;\n        this._videoFrameTimerWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: 1000 / this._frameRate\n        });\n\n        return this._canvas.captureStream(this._frameRate);\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._videoFrameTimerWorker.postMessage({\n            id: CLEAR_INTERVAL\n        });\n        this._videoFrameTimerWorker.terminate();\n    }\n\n}\n","\nvar Module = (function() {\n  var _scriptDir = \"https://sdk.sariska.io/\";\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\nnull;var Module=typeof Module!==\"undefined\"?Module:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":1,\"maximum\":1+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5340496,DYNAMICTOP_PTR=97456;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile=\"rnnoise.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap,\"memory\":wasmMemory,\"table\":wasmTable};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"c\"]).apply(null,arguments)};var _rnnoise_init=Module[\"_rnnoise_init\"]=function(){return(_rnnoise_init=Module[\"_rnnoise_init\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _rnnoise_create=Module[\"_rnnoise_create\"]=function(){return(_rnnoise_create=Module[\"_rnnoise_create\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _rnnoise_destroy=Module[\"_rnnoise_destroy\"]=function(){return(_rnnoise_destroy=Module[\"_rnnoise_destroy\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=function(){return(_rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport rnnoiseWasmInit from 'rnnoise-wasm';\n\nimport RnnoiseProcessor from './RnnoiseProcessor';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream, videoType) {\n        return new Promise((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model, options) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport createTFLiteModule from './tflite';\nimport createTFLiteSIMDModule from './tflite-simd';\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @param {Function} dispatch - The Redux dispatch function.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground, dispatch) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n    let wasmCheck;\n\n    // Checks if WebAssembly feature is supported or enabled by/in the browser.\n    // Conditional import of wasm-check package is done to prevent\n    // the browser from crashing when the user opens the app.\n\n    try {\n        wasmCheck = require('wasm-check');\n        if (wasmCheck?.feature?.simd) {\n            tflite = await createTFLiteSIMDModule();\n        } else {\n            tflite = await createTFLiteModule();\n        }\n    } catch (err) {\n        return;\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}","/**\n * @type Class\n */\nimport Logger from '@jitsi/logger';\nimport { getLogger } from '@jitsi/logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\nimport {initSDKConfig} from './config';\nimport * as createAnalyticsEvent from './modules/util/createAnalyticsEvent';\n\nconst logger = getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes: any = {};\n\n    attributes['audio_requested'] = options.devices.includes('audio');\n    attributes['video_requested'] = options.devices.includes('video');\n    attributes['screen_sharing_requested'] = options.devices.includes('desktop');\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\ninterface ICreateLocalTrackOptions {\n    cameraDeviceId?: string;\n    devices?: any[];\n    firePermissionPromptIsShownEvent?: boolean;\n    fireSlowPromiseEvent?: boolean;\n    micDeviceId?: string;\n    resolution?: string;\n}\n\ninterface IJitsiMeetJSOptions {\n    enableAnalyticsLogging?: boolean;\n    enableWindowOnErrorHandler?: boolean;\n    externalStorage?: Storage;\n    flags?: {\n        runInLiteMode?: boolean;\n        ssrcRewritingEnabled?: boolean;\n    }\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code SariskaMediaTransport}).\n */\nexport default {\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        createPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices as unknown,\n    analytics: Statistics.analytics as unknown,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options: IJitsiMeetJSOptions = {}) {\n        let newOptions = {...initSDKConfig, ...options};\n        Settings.init(newOptions.externalStorage);\n        Statistics.init(newOptions);\n        const flags = newOptions.flags || {};\n\n        // Configure the feature flags.\n        FeatureFlags.init(flags);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options: ICreateLocalTrackOptions = {}, oldfirePermissionPromptIsShownEvent) {\n        if (window.location.href.indexOf(\"iAmRecorder\") >= 0) {\n            return [];\n         }\n\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            // @ts-ignore\n            JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN, browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (this.isCollectingLocalStats()) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(track,\n                                track.setAudioLevel.bind(track));\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline, networkType, details}) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline, networkType, details\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n};\n","// @flow\n\nimport JitsiStreamPresenterEffect from './JitsiStreamPresenterEffect';\n\n/**\n * Creates a new instance of JitsiStreamPresenterEffect.\n *\n * @param {MediaStream} stream - The video stream which will be used for\n * creating the presenter effect.\n * @returns {Promise<JitsiStreamPresenterEffect>}\n */\nexport function createPresenterEffect(stream) {\n    if (!MediaStreamTrack.prototype.getSettings\n        && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('JitsiStreamPresenterEffect not supported!'));\n    }\n\n    return Promise.resolve(new JitsiStreamPresenterEffect(stream));\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","export function createNetworkInfoEvent({ isOnline, networkType, details }) {\n    const attributes = { isOnline };\n\n    // Do no include optional stuff or Amplitude handler will log warnings.\n    networkType && (attributes.networkType = networkType);\n    details && (attributes.details = details);\n\n    return {\n        action: 'network.info',\n        attributes\n    };\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nconst sariskaMediaTransport = require('./SariskaMediaTransport').default;\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\nmodule.exports = _mergeNamespaceAndModule(sariskaMediaTransport);\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._isDominantSpeaker = false;\n        this._isSilent = false;\n        this._hasLeft = false;\n        this._faceLandmarks = [];\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._isDominantSpeaker;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} isNowDominantSpeaker - If true, the user will be accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker, silence) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker && !silence) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker()) {\n            if (!isNowDominantSpeaker) {\n                if (!this._isSilent) {\n                    const now = Date.now();\n                    const timeElapsed = now - this._dominantSpeakerStart;\n\n                    this.totalDominantSpeakerTime += timeElapsed;\n                    this._dominantSpeakerStart = 0;\n                }\n            } else if (this._isSilent && !silence) {\n                this._dominantSpeakerStart = Date.now();\n            } else if (!this._isSilent && silence) {\n                const now = Date.now();\n                const timeElapsed = now - this._dominantSpeakerStart;\n\n                this.totalDominantSpeakerTime += timeElapsed;\n                this._dominantSpeakerStart = 0;\n            }\n        }\n\n        this._isDominantSpeaker = isNowDominantSpeaker;\n        this._isSilent = silence;\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker() && !this._isSilent) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the face landmarks of the user.\n     *\n     * @returns {Object}\n     */\n    getFaceLandmarks() {\n        return this._faceLandmarks;\n    }\n\n    /**\n     * Sets the face landmarks of the user.\n     *\n     * @param {Object} faceLandmarks - object with face expressions.\n     * @returns {void}\n     */\n    setFaceLandmarks(faceLandmarks) {\n        this._faceLandmarks = faceLandmarks;\n    }\n\n    /**\n     * Adds new face landmarks to speaker stats.\n     *\n     * @param  {string} faceExpression\n     * @param {number} duration\n     */\n    addFaceLandmarks(faceLandmarks) {\n        this._faceLandmarks.push(faceLandmarks);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","var createTFLiteSIMDModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,s={};for(o in a)a.hasOwnProperty(o)&&(s[o]=a[o]);var u,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!u&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||k(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in s)s.hasOwnProperty(o)&&(a[o]=s[o]);s=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&k(\"no native wasm support detected\");var _=!1;var A,I,M,E,R=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function S(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&R)return R.decode(e.subarray(n,a));for(var o=\"\";n<a;){var s=e[n++];if(128&s){var u=63&e[n++];if(192!=(224&s)){var i=63&e[n++];if((s=224==(240&s)?(15&s)<<12|u<<6|i:(7&s)<<18|u<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(s);else{var c=s-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&s)<<6|u)}else o+=String.fromCharCode(s)}return o}function O(e){A=e,a.HEAP8=I=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=E=new Int32Array(e),a.HEAPU8=M=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var C,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,D=null,L=null;function k(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function U(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var j=\"data:application/octet-stream;base64,\";function F(e){return U(e,j)}var q=\"file://\";function B(e){return U(e,q)}var N,G=\"https://sdk.sariska.io/tflite-simd.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){k(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?C.get(t)():C.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}F(G)||(G=G),N=u?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return E[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),O(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(S(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,E[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?S(M,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){k()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return E[n>>2]=t/1e3|0,E[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){M.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=M.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;E[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)I[n++>>0]=e.charCodeAt(r);t||(I[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();E[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),E[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var s=E[n+8*o>>2],u=E[n+(8*o+4)>>2],i=0;i<u;i++)Z.printChar(e,M[s+i]);a+=u}return E[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,O((v=a.asm.q).buffer),C=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),L)){var n=L;L=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),k(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||F(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(L=function e(){$||ae(),$||(L=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteSIMDModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteSIMDModule}):\"object\"==typeof exports&&(exports.createTFLiteSIMDModule=createTFLiteSIMDModule);","var createTFLiteModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,u={};for(o in a)a.hasOwnProperty(o)&&(u[o]=a[o]);var s,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,s=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!s&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||U(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in u)u.hasOwnProperty(o)&&(a[o]=u[o]);u=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&U(\"no native wasm support detected\");var _=!1;var A,E,R,I,M=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function O(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&M)return M.decode(e.subarray(n,a));for(var o=\"\";n<a;){var u=e[n++];if(128&u){var s=63&e[n++];if(192!=(224&u)){var i=63&e[n++];if((u=224==(240&u)?(15&u)<<12|s<<6|i:(7&u)<<18|s<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(u);else{var c=u-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&u)<<6|s)}else o+=String.fromCharCode(u)}return o}function C(e){A=e,a.HEAP8=E=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=I=new Int32Array(e),a.HEAPU8=R=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var S,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,L=null,k=null;function U(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function j(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var F=\"data:application/octet-stream;base64,\";function D(e){return j(e,F)}var q=\"file://\";function B(e){return j(e,q)}var N,G=\"https://sdk.sariska.io/tflite.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){U(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?S.get(t)():S.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}D(G)||(G=G),N=s?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return I[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),C(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(O(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,I[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?O(R,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){U()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return I[n>>2]=t/1e3|0,I[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){R.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=R.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;I[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)E[n++>>0]=e.charCodeAt(r);t||(E[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();I[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),I[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var u=I[n+8*o>>2],s=I[n+(8*o+4)>>2],i=0;i<s;i++)Z.printChar(e,R[u+i]);a+=s}return I[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,C((v=a.asm.q).buffer),S=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==L&&(clearInterval(L),L=null),k)){var n=k;k=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),U(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||D(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(k=function e(){$||ae(),$||(k=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteModule}):\"object\"==typeof exports&&(exports.createTFLiteModule=createTFLiteModule);","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {boolean} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! jQuery v3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector | (c) OpenJS Foundation and other contributors | jquery.org/license */\n!function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(g,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,a=y.toString,l=a.call(Object),m={},b=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},w=g.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function C(e,t,n){var r,i,o=(n=n||w).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector\",E=function(e,t){return new E.fn.init(e,t)};function d(e){var t=!!e&&\"length\"in e&&e.length,n=T(e);return!b(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:f,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\"boolean\"==typeof a&&(l=a,a=arguments[s]||{},s++),\"object\"==typeof a||b(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],\"__proto__\"!==t&&a!==r&&(l&&r&&(E.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||E.isPlainObject(n)?n:{},i=!1,a[t]=E.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:\"jQuery\"+(f+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==o.call(e))&&(!(t=r(e))||\"function\"==typeof(n=y.call(t,\"constructor\")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){C(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?E.merge(n,\"string\"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return v(a)},guid:1,support:m}),\"function\"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(e,t){n[\"[object \"+t+\"]\"]=t.toLowerCase()});var p=function(n){var e,p,x,o,i,h,f,g,w,u,l,C,T,a,E,v,s,c,y,A=\"sizzle\"+1*new Date,d=n.document,N=0,r=0,m=ue(),b=ue(),S=ue(),k=ue(),D=function(e,t){return e===t&&(l=!0),0},L={}.hasOwnProperty,t=[],j=t.pop,q=t.push,O=t.push,P=t.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},I=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",R=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",B=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",M=\"\\\\[\"+R+\"*(\"+B+\")(?:\"+R+\"*([*^$|!~]?=)\"+R+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+B+\"))|)\"+R+\"*\\\\]\",W=\":(\"+B+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+M+\")*)|.*)\\\\)|)\",F=new RegExp(R+\"+\",\"g\"),$=new RegExp(\"^\"+R+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+R+\"+$\",\"g\"),z=new RegExp(\"^\"+R+\"*,\"+R+\"*\"),_=new RegExp(\"^\"+R+\"*([>+~]|\"+R+\")\"+R+\"*\"),U=new RegExp(R+\"|>\"),V=new RegExp(W),X=new RegExp(\"^\"+B+\"$\"),Q={ID:new RegExp(\"^#(\"+B+\")\"),CLASS:new RegExp(\"^\\\\.(\"+B+\")\"),TAG:new RegExp(\"^(\"+B+\"|[*])\"),ATTR:new RegExp(\"^\"+M),PSEUDO:new RegExp(\"^\"+W),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+R+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+R+\"*(?:([+-]|)\"+R+\"*(\\\\d+)|))\"+R+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+I+\")$\",\"i\"),needsContext:new RegExp(\"^\"+R+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+R+\"*((?:-\\\\d)?\\\\d*)\"+R+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,K=/^h\\d$/i,J=/^[^{]+\\{\\s*\\[native \\w/,Z=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ee=/[+~]/,te=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),ne=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,ie=function(e,t){return t?\"\\0\"===e?\"\\ufffd\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e},oe=function(){C()},ae=xe(function(e){return!0===e.disabled&&\"fieldset\"===e.nodeName.toLowerCase()},{dir:\"parentNode\",next:\"legend\"});try{O.apply(t=P.call(d.childNodes),d.childNodes),t[d.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){q.apply(e,P.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],\"string\"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&(C(e),e=e||T,E)){if(11!==d&&(u=Z.exec(t)))if(i=u[1]){if(9===d){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return O.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&p.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!k[t+\" \"]&&(!v||!v.test(t))&&(1!==d||\"object\"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===d&&(U.test(t)||_.test(t))){(f=ee.test(t)&&ye(e.parentNode)||e)===e&&p.scope||((s=e.getAttribute(\"id\"))?s=s.replace(re,ie):e.setAttribute(\"id\",s=A)),o=(l=h(t)).length;while(o--)l[o]=(s?\"#\"+s:\":scope\")+\" \"+be(l[o]);c=l.join(\",\")}try{return O.apply(n,f.querySelectorAll(c)),n}catch(e){k(t,!0)}finally{s===A&&e.removeAttribute(\"id\")}}}return g(t.replace($,\"$1\"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+\" \")>x.cacheLength&&delete e[r.shift()],e[t+\" \"]=n}}function le(e){return e[A]=!0,e}function ce(e){var t=T.createElement(\"fieldset\");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split(\"|\"),r=n.length;while(r--)x.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return\"input\"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return(\"input\"===t||\"button\"===t)&&e.type===n}}function ge(t){return function(e){return\"form\"in e?e.parentNode&&!1===e.disabled?\"label\"in e?\"label\"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:\"label\"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&\"undefined\"!=typeof e.getElementsByTagName&&e}for(e in p=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||\"HTML\")},C=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:d;return r!=T&&9===r.nodeType&&r.documentElement&&(a=(T=r).documentElement,E=!i(T),d!=T&&(n=T.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener(\"unload\",oe,!1):n.attachEvent&&n.attachEvent(\"onunload\",oe)),p.scope=ce(function(e){return a.appendChild(e).appendChild(T.createElement(\"div\")),\"undefined\"!=typeof e.querySelectorAll&&!e.querySelectorAll(\":scope fieldset div\").length}),p.attributes=ce(function(e){return e.className=\"i\",!e.getAttribute(\"className\")}),p.getElementsByTagName=ce(function(e){return e.appendChild(T.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),p.getElementsByClassName=J.test(T.getElementsByClassName),p.getById=ce(function(e){return a.appendChild(e).id=A,!T.getElementsByName||!T.getElementsByName(A).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute(\"id\")===t}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t=\"undefined\"!=typeof e.getAttributeNode&&e.getAttributeNode(\"id\");return t&&t.value===n}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return\"undefined\"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(\"undefined\"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(p.qsa=J.test(T.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML=\"<a id='\"+A+\"'></a><select id='\"+A+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",e.querySelectorAll(\"[msallowcapture^='']\").length&&v.push(\"[*^$]=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\"[selected]\").length||v.push(\"\\\\[\"+R+\"*(?:value|\"+I+\")\"),e.querySelectorAll(\"[id~=\"+A+\"-]\").length||v.push(\"~=\"),(t=T.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||v.push(\"\\\\[\"+R+\"*name\"+R+\"*=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":checked\").length||v.push(\":checked\"),e.querySelectorAll(\"a#\"+A+\"+*\").length||v.push(\".#.+[+~]\"),e.querySelectorAll(\"\\\\\\f\"),v.push(\"[\\\\r\\\\n\\\\f]\")}),ce(function(e){e.innerHTML=\"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";var t=T.createElement(\"input\");t.setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),e.querySelectorAll(\"[name=d]\").length&&v.push(\"name\"+R+\"*[*^$|!~]?=\"),2!==e.querySelectorAll(\":enabled\").length&&v.push(\":enabled\",\":disabled\"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&v.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),v.push(\",.*:\")})),(p.matchesSelector=J.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=c.call(e,\"*\"),c.call(e,\"[s!='']:x\"),s.push(\"!=\",W)}),v=v.length&&new RegExp(v.join(\"|\")),s=s.length&&new RegExp(s.join(\"|\")),t=J.test(a.compareDocumentPosition),y=t||J.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e==T||e.ownerDocument==d&&y(d,e)?-1:t==T||t.ownerDocument==d&&y(d,t)?1:u?H(u,e)-H(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==T?-1:t==T?1:i?-1:o?1:u?H(u,e)-H(u,t):0;if(i===o)return de(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?de(a[r],s[r]):a[r]==d?-1:s[r]==d?1:0}),T},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(C(e),p.matchesSelector&&E&&!k[t+\" \"]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){k(t,!0)}return 0<se(t,T,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=T&&C(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=T&&C(e);var n=x.attrHandle[t.toLowerCase()],r=n&&L.call(x.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:p.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+\"\").replace(re,ie)},se.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!p.detectDuplicates,u=!p.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(x=se.selectors={cacheLength:50,createPseudo:le,match:Q,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||\"\").replace(te,ne),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=m[e+\" \"];return t||(t=new RegExp(\"(^|\"+R+\")\"+e+\"(\"+R+\"|$)\"))&&m(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||\"undefined\"!=typeof e.getAttribute&&e.getAttribute(\"class\")||\"\")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?\"!=\"===r:!r||(t+=\"\",\"=\"===r?t===i:\"!=\"===r?t!==i:\"^=\"===r?i&&0===t.indexOf(i):\"*=\"===r?i&&-1<t.indexOf(i):\"$=\"===r?i&&t.slice(-i.length)===i:\"~=\"===r?-1<(\" \"+t.replace(F,\" \")+\" \").indexOf(i):\"|=\"===r&&(t===i||t.slice(0,i.length+1)===i+\"-\"))}},CHILD:function(h,e,t,g,v){var y=\"nth\"!==h.slice(0,3),m=\"last\"!==h.slice(-4),b=\"of-type\"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?\"nextSibling\":\"previousSibling\",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,p=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(b?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l=\"only\"===h&&!u&&\"nextSibling\"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&d){p=(s=(r=(i=(o=(a=c)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if(1===a.nodeType&&++p&&a===e){i[h]=[N,s,p];break}}else if(d&&(p=s=(r=(i=(o=(a=e)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1]),!1===p)while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if((b?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++p&&(d&&((i=(o=a[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[N,p]),a===e))break;return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||se.error(\"unsupported pseudo: \"+e);return a[A]?a(o):1<a.length?(t=[e,e,\"\",o],x.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=H(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace($,\"$1\"));return s[A]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return X.test(n||\"\")||se.error(\"unsupported lang: \"+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute(\"xml:lang\")||e.getAttribute(\"lang\"))return(t=t.toLowerCase())===n||0===t.indexOf(n+\"-\")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function me(){}function be(e){for(var t=0,n=e.length,r=\"\";t<n;t++)r+=e[t].value;return r}function xe(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&\"parentNode\"===c,d=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[N,d];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[A]||(e[A]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===N&&r[1]===d)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Ce(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(p,h,g,v,y,e){return v&&!v[A]&&(v=Te(v)),y&&!y[A]&&(y=Te(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||\"*\",n.nodeType?[n]:n,[]),f=!p||!e&&h?c:Ce(c,s,p,n,r),d=g?y||(e?p:l||v)?[]:t:f;if(g&&g(f,d,n,r),v){i=Ce(d,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(d[u[o]]=!(f[u[o]]=a))}if(e){if(y||p){if(y){i=[],o=d.length;while(o--)(a=d[o])&&i.push(f[o]=a);y(null,d=[],i,r)}o=d.length;while(o--)(a=d[o])&&-1<(i=y?H(e,a):s[o])&&(e[i]=!(t[i]=a))}}else d=Ce(d===t?d.splice(l,d.length):d),y?y(null,t,d,r):O.apply(t,d)})}function Ee(e){for(var i,t,n,r=e.length,o=x.relative[e[0].type],a=o||x.relative[\" \"],s=o?1:0,u=xe(function(e){return e===i},a,!0),l=xe(function(e){return-1<H(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=x.relative[e[s].type])c=[xe(we(c),t)];else{if((t=x.filter[e[s].type].apply(null,e[s].matches))[A]){for(n=++s;n<r;n++)if(x.relative[e[n].type])break;return Te(1<s&&we(c),1<s&&be(e.slice(0,s-1).concat({value:\" \"===e[s-2].type?\"*\":\"\"})).replace($,\"$1\"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&be(e))}c.push(t)}return we(c)}return me.prototype=x.filters=x.pseudos,x.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=b[e+\" \"];if(l)return t?0:l.slice(0);a=e,s=[],u=x.preFilter;while(a){for(o in n&&!(r=z.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=_.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace($,\" \")}),a=a.slice(n.length)),x.filter)!(r=Q[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):b(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,b,r,i=[],o=[],a=S[e+\" \"];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[A]?i.push(a):o.push(a);(a=S(e,(v=o,m=0<(y=i).length,b=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l=\"0\",c=e&&[],f=[],d=w,p=e||b&&x.find.TAG(\"*\",i),h=N+=null==d?1:Math.random()||.1,g=p.length;for(i&&(w=t==T||t||i);l!==g&&null!=(o=p[l]);l++){if(b&&o){a=0,t||o.ownerDocument==T||(C(o),n=!E);while(s=v[a++])if(s(o,t||T,n)){r.push(o);break}i&&(N=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=j.call(r));f=Ce(f)}O.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(N=h,w=d),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l=\"function\"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&\"ID\"===(a=o[0]).type&&9===t.nodeType&&E&&x.relative[o[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=Q.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],x.relative[s=a.type])break;if((u=x.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&be(o)))return O.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},p.sortStable=A.split(\"\").sort(D).join(\"\")===A,p.detectDuplicates=!!l,C(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(T.createElement(\"fieldset\"))}),ce(function(e){return e.innerHTML=\"<a href='#'></a>\",\"#\"===e.firstChild.getAttribute(\"href\")})||fe(\"type|href|height|width\",function(e,t,n){if(!n)return e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML=\"<input/>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")})||fe(\"value\",function(e,t,n){if(!n&&\"input\"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute(\"disabled\")})||fe(I,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(g);E.find=p,E.expr=p.selectors,E.expr[\":\"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;var h=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&E(e).is(n))break;r.push(e)}return r},A=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=E.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var k=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function D(e,n,r){return b(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?E.grep(e,function(e){return e===n!==r}):\"string\"!=typeof n?E.grep(e,function(e){return-1<i.call(n,e)!==r}):E.filter(n,e,r)}E.filter=function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(\"string\"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,i[t],n);return 1<r?E.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,\"string\"==typeof e&&N.test(e)?E(e):e||[],!1).length}});var L,j=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(E.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||L,\"string\"==typeof e){if(!(r=\"<\"===e[0]&&\">\"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),k.test(r[1])&&E.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=w.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,L=E(w);var q=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a=\"string\"!=typeof e&&E(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?E.uniqueSort(o):o)},index:function(e){return e?\"string\"==typeof e?i.call(E(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,\"parentNode\")},parentsUntil:function(e,t,n){return h(e,\"parentNode\",n)},next:function(e){return P(e,\"nextSibling\")},prev:function(e){return P(e,\"previousSibling\")},nextAll:function(e){return h(e,\"nextSibling\")},prevAll:function(e){return h(e,\"previousSibling\")},nextUntil:function(e,t,n){return h(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return h(e,\"previousSibling\",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(S(e,\"template\")&&(e=e.content||e),E.merge([],e.childNodes))}},function(r,i){E.fn[r]=function(e,t){var n=E.map(this,i,e);return\"Until\"!==r.slice(-5)&&(t=e),t&&\"string\"==typeof t&&(n=E.filter(t,n)),1<this.length&&(O[r]||E.uniqueSort(n),q.test(r)&&n.reverse()),this.pushStack(n)}});var H=/[^\\x20\\t\\r\\n\\f]+/g;function I(e){return e}function R(e){throw e}function B(e,t,n,r){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(r){var e,n;r=\"string\"==typeof r?(e=r,n={},E.each(e.match(H)||[],function(e,t){n[t]=!0}),n):E.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:\"\")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){E.each(e,function(e,t){b(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&\"string\"!==T(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return E.each(arguments,function(e,t){var n;while(-1<(n=E.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<E.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t=\"\",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=\"\"),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},E.extend({Deferred:function(e){var o=[[\"notify\",\"progress\",E.Callbacks(\"memory\"),E.Callbacks(\"memory\"),2],[\"resolve\",\"done\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),1,\"rejected\"]],i=\"pending\",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},\"catch\":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return E.Deferred(function(r){E.each(o,function(e,t){var n=b(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+\"With\"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError(\"Thenable self-resolution\");t=e&&(\"object\"==typeof e||\"function\"==typeof e)&&e.then,b(t)?s?t.call(e,l(u,o,I,s),l(u,o,R,s)):(u++,t.call(e,l(u,o,I,s),l(u,o,R,s),l(u,o,I,o.notifyWith))):(a!==I&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==R&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),g.setTimeout(t))}}return E.Deferred(function(e){o[0][3].add(l(0,e,b(r)?r:I,e.notifyWith)),o[1][3].add(l(0,e,b(t)?t:I)),o[2][3].add(l(0,e,b(n)?n:R))}).promise()},promise:function(e){return null!=e?E.extend(e,a):a}},s={};return E.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+\"With\"](this===s?void 0:this,arguments),this},s[t[0]+\"With\"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=E.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(B(e,o.done(a(t)).resolve,o.reject,!n),\"pending\"===o.state()||b(i[t]&&i[t].then)))return o.then();while(t--)B(i[t],a(t),o.reject);return o.promise()}});var M=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){g.console&&g.console.warn&&e&&M.test(e.name)&&g.console.warn(\"jQuery.Deferred exception: \"+e.message,e.stack,t)},E.readyException=function(e){g.setTimeout(function(){throw e})};var W=E.Deferred();function F(){w.removeEventListener(\"DOMContentLoaded\",F),g.removeEventListener(\"load\",F),E.ready()}E.fn.ready=function(e){return W.then(e)[\"catch\"](function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||W.resolveWith(w,[E])}}),E.ready.then=W.then,\"complete\"===w.readyState||\"loading\"!==w.readyState&&!w.documentElement.doScroll?g.setTimeout(E.ready):(w.addEventListener(\"DOMContentLoaded\",F),g.addEventListener(\"load\",F));var $=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if(\"object\"===T(n))for(s in i=!0,n)$(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,b(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(E(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,_=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function V(e){return e.replace(z,\"ms-\").replace(_,U)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=E.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if(\"string\"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(H)||[]).length;while(n--)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var Y=new Q,G=new Q,K=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,J=/[A-Z]/g;function Z(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r=\"data-\"+t.replace(J,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(r))){try{n=\"true\"===(i=n)||\"false\"!==i&&(\"null\"===i?null:i===+i+\"\"?+i:K.test(i)?JSON.parse(i):i)}catch(e){}G.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return G.hasData(e)||Y.hasData(e)},data:function(e,t,n){return G.access(e,t,n)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=G.get(o),1===o.nodeType&&!Y.get(o,\"hasDataAttrs\"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf(\"data-\")&&(r=V(r.slice(5)),Z(o,r,i[r]));Y.set(o,\"hasDataAttrs\",!0)}return i}return\"object\"==typeof n?this.each(function(){G.set(this,n)}):$(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=G.get(o,n))?t:void 0!==(t=Z(o,n))?t:void 0;this.each(function(){G.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){G.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=E.queue(e,t),r=n.length,i=n.shift(),o=E._queueHooks(e,t);\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,function(){E.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return Y.get(e,n)||Y.access(e,n,{empty:E.Callbacks(\"once memory\").add(function(){Y.remove(e,[t+\"queue\",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return\"string\"!=typeof t&&(n=t,t=\"fx\",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),\"fx\"===t&&\"inprogress\"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=E.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";while(a--)(n=Y.get(o[a],e+\"queueHooks\"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ee=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,te=new RegExp(\"^(?:([+-])=|)(\"+ee+\")([a-z%]*)$\",\"i\"),ne=[\"Top\",\"Right\",\"Bottom\",\"Left\"],re=w.documentElement,ie=function(e){return E.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&ie(e)&&\"none\"===E.css(e,\"display\")};var se={};function ue(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?(\"none\"===n&&(l[c]=Y.get(r,\"display\")||null,l[c]||(r.style.display=\"\")),\"\"===r.style.display&&ae(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=se[s])||(o=a.body.appendChild(a.createElement(s)),u=E.css(o,\"display\"),o.parentNode.removeChild(o),\"none\"===u&&(u=\"block\"),se[s]=u)))):\"none\"!==n&&(l[c]=\"none\",Y.set(r,\"display\",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}E.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var le,ce,fe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,pe=/^$|^module$|\\/(?:java|ecma)script/i;le=w.createDocumentFragment().appendChild(w.createElement(\"div\")),(ce=w.createElement(\"input\")).setAttribute(\"type\",\"radio\"),ce.setAttribute(\"checked\",\"checked\"),ce.setAttribute(\"name\",\"t\"),le.appendChild(ce),m.checkClone=le.cloneNode(!0).cloneNode(!0).lastChild.checked,le.innerHTML=\"<textarea>x</textarea>\",m.noCloneChecked=!!le.cloneNode(!0).lastChild.defaultValue,le.innerHTML=\"<option></option>\",m.option=!!le.lastChild;var he={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function ge(e,t){var n;return n=\"undefined\"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):\"undefined\"!=typeof e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&S(e,t)?E.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],\"globalEval\",!t||Y.get(t[n],\"globalEval\"))}he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td,m.option||(he.optgroup=he.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var ye=/<|&#?\\w+;/;function me(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if(\"object\"===T(o))E.merge(d,o.nodeType?[o]:o);else if(ye.test(o)){a=a||f.appendChild(t.createElement(\"div\")),s=(de.exec(o)||[\"\",\"\"])[1].toLowerCase(),u=he[s]||he._default,a.innerHTML=u[1]+E.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;E.merge(d,a.childNodes),(a=f.firstChild).textContent=\"\"}else d.push(t.createTextNode(o));f.textContent=\"\",p=0;while(o=d[p++])if(r&&-1<E.inArray(o,r))i&&i.push(o);else if(l=ie(o),a=ge(f.appendChild(o),\"script\"),l&&ve(a),n){c=0;while(o=a[c++])pe.test(o.type||\"\")&&n.push(o)}return f}var be=/^([^.]*)(?:\\.(.+)|)/;function xe(){return!0}function we(){return!1}function Ce(e,t){return e===function(){try{return w.activeElement}catch(e){}}()==(\"focus\"===t)}function Te(e,t,n,r,i,o){var a,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&(\"string\"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=we;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,i,r,n)})}function Ee(e,i,o){o?(Y.set(e,i,!1),E.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(E.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(Y.set(this,i,{value:E.event.trigger(E.extend(r[0],E.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&E.event.add(e,i,xe)}E.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.get(t);if(X(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&E.find.matchesSelector(re,i),n.guid||(n.guid=E.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return\"undefined\"!=typeof E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||\"\").match(H)||[\"\"]).length;while(l--)p=g=(s=be.exec(e[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p&&(f=E.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},c=E.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:h.join(\".\")},o),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),E.event.global[p]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.hasData(e)&&Y.get(e);if(v&&(u=v.events)){l=(t=(t||\"\").match(H)||[\"\"]).length;while(l--)if(p=g=(s=be.exec(t[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p){f=E.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),a=o=d.length;while(o--)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||E.removeEvent(e,p,v.handle),delete u[p])}else for(p in u)E.event.remove(e,p+t[l],n,r,!0);E.isEmptyObject(u)&&Y.remove(e,\"handle events\")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=E.event.fix(e),l=(Y.get(this,\"events\")||Object.create(null))[u.type]||[],c=E.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=E.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((E.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!(\"click\"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(\"click\"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+\" \"]&&(a[i]=r.needsContext?-1<E(i,this).index(l):E.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\",xe),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Y.get(t,\"click\")||S(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:we,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:we,isPropagationStopped:we,isImmediatePropagationStopped:we,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,\"char\":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:\"focusin\",blur:\"focusout\"},function(t,e){E.event.special[t]={setup:function(){return Ee(this,t,Ce),!1},trigger:function(){return Ee(this,t),!0},_default:function(e){return Y.get(e.target,t)},delegateType:e}}),E.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(e,i){E.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),E.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=we),this.each(function(){E.event.remove(this,e,n,t)})}});var Ae=/<script|<style|<link/i,Ne=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Se=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function ke(e,t){return S(e,\"table\")&&S(11!==t.nodeType?t:t.firstChild,\"tr\")&&E(e).children(\"tbody\")[0]||e}function De(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function Le(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function je(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(i in Y.remove(t,\"handle events\"),s)for(n=0,r=s[i].length;n<r;n++)E.event.add(t,i,s[i][n]);G.hasData(e)&&(o=G.access(e),a=E.extend({},o),G.set(t,a))}}function qe(n,r,i,o){r=v(r);var e,t,a,s,u,l,c=0,f=n.length,d=f-1,p=r[0],h=b(p);if(h||1<f&&\"string\"==typeof p&&!m.checkClone&&Ne.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),qe(t,r,i,o)});if(f&&(t=(e=me(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=E.map(ge(e,\"script\"),De)).length;c<f;c++)u=e,c!==d&&(u=E.clone(u,!0,!0),s&&E.merge(a,ge(u,\"script\"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,E.map(a,Le),c=0;c<s;c++)u=a[c],pe.test(u.type||\"\")&&!Y.access(u,\"globalEval\")&&E.contains(l,u)&&(u.src&&\"module\"!==(u.type||\"\").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute(\"nonce\")},l):C(u.textContent.replace(Se,\"\"),u,l))}return n}function Oe(e,t,n){for(var r,i=t?E.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||E.cleanData(ge(r)),r.parentNode&&(n&&ie(r)&&ve(ge(r,\"script\")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=ie(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=ge(c),r=0,i=(o=ge(e)).length;r<i;r++)s=o[r],u=a[r],void 0,\"input\"===(l=u.nodeName.toLowerCase())&&fe.test(s.type)?u.checked=s.checked:\"input\"!==l&&\"textarea\"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(c),r=0,i=o.length;r<i;r++)je(o[r],a[r]);else je(e,c);return 0<(a=ge(c,\"script\")).length&&ve(a,!f&&ge(e,\"script\")),c},cleanData:function(e){for(var t,n,r,i=E.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[G.expando]&&(n[G.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return $(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return qe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ke(this,e).appendChild(e)})},prepend:function(){return qe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ke(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!Ae.test(e)&&!he[(de.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return qe(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ge(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,a){E.fn[e]=function(e){for(var t,n=[],r=E(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),E(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var Pe=new RegExp(\"^(\"+ee+\")(?!px)[a-z%]+$\",\"i\"),He=/^--/,Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=g),t.getComputedStyle(e)},Re=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Be=new RegExp(ne.join(\"|\"),\"i\"),Me=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",We=new RegExp(\"^\"+Me+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+Me+\"+$\",\"g\");function Fe(e,t,n){var r,i,o,a,s=He.test(t),u=e.style;return(n=n||Ie(e))&&(a=n.getPropertyValue(t)||n[t],s&&(a=a.replace(We,\"$1\")),\"\"!==a||ie(e)||(a=E.style(e,t)),!m.pixelBoxStyles()&&Pe.test(a)&&Be.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+\"\":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",re.appendChild(u).appendChild(l);var e=g.getComputedStyle(l);n=\"1%\"!==e.top,s=12===t(e.marginLeft),l.style.right=\"60%\",o=36===t(e.right),r=36===t(e.width),l.style.position=\"absolute\",i=12===t(l.offsetWidth/3),re.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=w.createElement(\"div\"),l=w.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",m.clearCloneStyle=\"content-box\"===l.style.backgroundClip,E.extend(m,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=w.createElement(\"table\"),t=w.createElement(\"tr\"),n=w.createElement(\"div\"),e.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",t.style.cssText=\"border:1px solid\",t.style.height=\"1px\",n.style.height=\"9px\",n.style.display=\"block\",re.appendChild(e).appendChild(t).appendChild(n),r=g.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,re.removeChild(e)),a}}))}();var ze=[\"Webkit\",\"Moz\",\"ms\"],_e=w.createElement(\"div\").style,Ue={};function Ve(e){var t=E.cssProps[e]||Ue[e];return t||(e in _e?e:Ue[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=ze.length;while(n--)if((e=ze[n]+t)in _e)return e}(e)||e)}var Xe,Qe,Ye=/^(none|table(?!-c[ea]).+)/,Ge={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Ke={letterSpacing:\"0\",fontWeight:\"400\"};function Je(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||\"px\"):t}function Ze(e,t,n,r,i,o){var a=\"width\"===t?1:0,s=0,u=0;if(n===(r?\"border\":\"content\"))return 0;for(;a<4;a+=2)\"margin\"===n&&(u+=E.css(e,n+ne[a],!0,i)),r?(\"content\"===n&&(u-=E.css(e,\"padding\"+ne[a],!0,i)),\"margin\"!==n&&(u-=E.css(e,\"border\"+ne[a]+\"Width\",!0,i))):(u+=E.css(e,\"padding\"+ne[a],!0,i),\"padding\"!==n?u+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i):s+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function et(e,t,n){var r=Ie(e),i=(!m.boxSizingReliable()||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,r),o=i,a=Fe(e,t,r),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if(Pe.test(a)){if(!n)return a;a=\"auto\"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&S(e,\"tr\")||\"auto\"===a||!parseFloat(a)&&\"inline\"===E.css(e,\"display\",!1,r))&&e.getClientRects().length&&(i=\"border-box\"===E.css(e,\"boxSizing\",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+Ze(e,t,n||(i?\"border\":\"content\"),o,r,a)+\"px\"}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=He.test(t),l=e.style;if(u||(t=Ve(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&\"get\"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];\"string\"===(o=typeof n)&&(i=te.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return E.css(e,t,\"\")},u=s(),l=n&&n[3]||(E.cssNumber[t]?\"\":\"px\"),c=e.nodeType&&(E.cssNumber[t]||\"px\"!==l&&+u)&&te.exec(E.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)E.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,E.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}(e,t,i),o=\"number\"),null!=n&&n==n&&(\"number\"!==o||u||(n+=i&&i[3]||(E.cssNumber[s]?\"\":\"px\")),m.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(l[t]=\"inherit\"),a&&\"set\"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return He.test(t)||(t=Ve(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&\"get\"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),\"normal\"===i&&t in Ke&&(i=Ke[t]),\"\"===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),E.each([\"height\",\"width\"],function(e,u){E.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(E.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,u,n):Re(e,Ge,function(){return et(e,u,n)})},set:function(e,t,n){var r,i=Ie(e),o=!m.scrollboxSize()&&\"absolute\"===i.position,a=(o||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,i),s=n?Ze(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e[\"offset\"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-Ze(e,u,\"border\",!1,i)-.5)),s&&(r=te.exec(t))&&\"px\"!==(r[3]||\"px\")&&(e.style[u]=t,t=E.css(e,u)),Je(0,t,s)}}}),E.cssHooks.marginLeft=$e(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,\"marginLeft\"))||e.getBoundingClientRect().left-Re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+\"px\"}),E.each({margin:\"\",padding:\"\",border:\"Width\"},function(i,o){E.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r=\"string\"==typeof e?e.split(\" \"):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},\"margin\"!==i&&(E.cssHooks[i+o].set=Je)}),E.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ie(e),i=t.length;a<i;a++)o[t[a]]=E.css(e,t[a],!1,r);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),E.fn.delay=function(r,e){return r=E.fx&&E.fx.speeds[r]||r,e=e||\"fx\",this.queue(e,function(e,t){var n=g.setTimeout(e,r);t.stop=function(){g.clearTimeout(n)}})},Xe=w.createElement(\"input\"),Qe=w.createElement(\"select\").appendChild(w.createElement(\"option\")),Xe.type=\"checkbox\",m.checkOn=\"\"!==Xe.value,m.optSelected=Qe.selected,(Xe=w.createElement(\"input\")).value=\"t\",Xe.type=\"radio\",m.radioValue=\"t\"===Xe.value;var tt,nt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return $(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return\"undefined\"==typeof e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(i=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?tt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+\"\"),n):i&&\"get\"in i&&null!==(r=i.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&\"radio\"===t&&S(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),tt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\\w+/g),function(e,t){var a=nt[t]||E.find.attr;nt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=nt[o],nt[o]=r,r=null!=a(e,t,n)?o:null,nt[o]=i),r}});var rt=/^(?:input|select|textarea|button)$/i,it=/^(?:a|area)$/i;function ot(e){return(e.match(H)||[]).join(\" \")}function at(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function st(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(H)||[]}E.fn.extend({prop:function(e,t){return $(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,i=E.propHooks[t]),void 0!==n?i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,\"tabindex\");return t?parseInt(t,10):rt.test(e.nodeName)||it.test(e.nodeName)&&e.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),m.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).addClass(t.call(this,e,at(this)))}):(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++)i=e[o],n.indexOf(\" \"+i+\" \")<0&&(n+=i+\" \");a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).removeClass(t.call(this,e,at(this)))}):arguments.length?(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(\" \"+i+\" \"))n=n.replace(\" \"+i+\" \",\" \")}a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this:this.attr(\"class\",\"\")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s=\"string\"===a||Array.isArray(t);return b(t)?this.each(function(e){E(this).toggleClass(t.call(this,e,at(this),n),n)}):\"boolean\"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=st(t),this.each(function(){if(s)for(o=E(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&\"boolean\"!==a||((r=at(this))&&Y.set(this,\"__className__\",r),this.setAttribute&&this.setAttribute(\"class\",r||!1===t?\"\":Y.get(this,\"__className__\")||\"\"))}))},hasClass:function(e){var t,n,r=0;t=\" \"+e+\" \";while(n=this[r++])if(1===n.nodeType&&-1<(\" \"+ot(at(n))+\" \").indexOf(t))return!0;return!1}});var ut=/\\r/g;E.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,E(this).val()):n)?t=\"\":\"number\"==typeof t?t+=\"\":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?\"\":e+\"\"})),(r=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&\"set\"in r&&void 0!==r.set(this,t,\"value\")||(this.value=t))})):t?(r=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&\"get\"in r&&void 0!==(e=r.get(t,\"value\"))?e:\"string\"==typeof(e=t.value)?e.replace(ut,\"\"):null==e?\"\":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,\"value\");return null!=t?t:ot(E.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a=\"select-one\"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,\"optgroup\"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=E.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<E.inArray(E.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each([\"radio\",\"checkbox\"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},m.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})}),m.focusin=\"onfocusin\"in g;var lt=/^(?:focusinfocus|focusoutblur)$/,ct=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,d=[n||w],p=y.call(e,\"type\")?e.type:e,h=y.call(e,\"namespace\")?e.namespace.split(\".\"):[];if(o=f=a=n=n||w,3!==n.nodeType&&8!==n.nodeType&&!lt.test(p+E.event.triggered)&&(-1<p.indexOf(\".\")&&(p=(h=p.split(\".\")).shift(),h.sort()),u=p.indexOf(\":\")<0&&\"on\"+p,(e=e[E.expando]?e:new E.Event(p,\"object\"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join(\".\"),e.rnamespace=e.namespace?new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||p,lt.test(s+p)||(o=o.parentNode);o;o=o.parentNode)d.push(o),a=o;a===(n.ownerDocument||w)&&d.push(a.defaultView||a.parentWindow||g)}i=0;while((o=d[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||p,(l=(Y.get(o,\"events\")||Object.create(null))[e.type]&&Y.get(o,\"handle\"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&X(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!X(n)||u&&b(n[p])&&!x(n)&&((a=n[u])&&(n[u]=null),E.event.triggered=p,e.isPropagationStopped()&&f.addEventListener(p,ct),n[p](),e.isPropagationStopped()&&f.removeEventListener(p,ct),E.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),m.focusin||E.each({focus:\"focusin\",blur:\"focusout\"},function(n,r){var i=function(e){E.event.simulate(r,e.target,E.event.fix(e))};E.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}}),E.parseXML=function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{t=(new g.DOMParser).parseFromString(e,\"text/xml\")}catch(e){}return n=t&&t.getElementsByTagName(\"parsererror\")[0],t&&!n||E.error(\"Invalid XML: \"+(n?E.map(n.childNodes,function(e){return e.textContent}).join(\"\\n\"):e)),t};var ft,dt=/\\[\\]$/,pt=/\\r?\\n/g,ht=/^(?:submit|button|image|reset|file)$/i,gt=/^(?:input|select|textarea|keygen)/i;function vt(n,e,r,i){var t;if(Array.isArray(e))E.each(e,function(e,t){r||dt.test(n)?i(n,t):vt(n+\"[\"+(\"object\"==typeof t&&null!=t?e:\"\")+\"]\",t,r,i)});else if(r||\"object\"!==T(e))i(n,e);else for(t in e)vt(n+\"[\"+t+\"]\",e[t],r,i)}E.param=function(e,t){var n,r=[],i=function(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)vt(n,e[n],t,i);return r.join(\"&\")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,\"elements\");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(\":disabled\")&&gt.test(this.nodeName)&&!ht.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(pt,\"\\r\\n\")}}):{name:t.name,value:n.replace(pt,\"\\r\\n\")}}).get()}}),E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not(\"body\").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},m.createHTMLDocument=((ft=w.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===ft.childNodes.length),E.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=w.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=w.location.href,t.head.appendChild(r)):t=w),o=!n&&[],(i=k.exec(e))?[t.createElement(i[1])]:(i=me([e],t,o),o&&o.length&&E(o).remove(),E.merge([],i.childNodes)));var r,i,o},E.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=E.css(e,\"position\"),c=E(e),f={};\"static\"===l&&(e.style.position=\"relative\"),s=c.offset(),o=E.css(e,\"top\"),u=E.css(e,\"left\"),(\"absolute\"===l||\"fixed\"===l)&&-1<(o+u).indexOf(\"auto\")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),\"using\"in t?t.using.call(e,f):c.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if(\"fixed\"===E.css(r,\"position\"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&\"static\"===E.css(e,\"position\"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=E(e).offset()).top+=E.css(e,\"borderTopWidth\",!0),i.left+=E.css(e,\"borderLeftWidth\",!0))}return{top:t.top-i.top-E.css(r,\"marginTop\",!0),left:t.left-i.left-E.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&\"static\"===E.css(e,\"position\"))e=e.offsetParent;return e||re})}}),E.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,i){var o=\"pageYOffset\"===i;E.fn[t]=function(e){return $(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),E.each([\"top\",\"left\"],function(e,n){E.cssHooks[n]=$e(m.pixelPosition,function(e,t){if(t)return t=Fe(e,n),Pe.test(t)?E(e).position()[n]+\"px\":t})}),E.each({Height:\"height\",Width:\"width\"},function(a,s){E.each({padding:\"inner\"+a,content:s,\"\":\"outer\"+a},function(r,o){E.fn[o]=function(e,t){var n=arguments.length&&(r||\"boolean\"!=typeof e),i=r||(!0===e||!0===t?\"margin\":\"border\");return $(this,function(e,t,n){var r;return x(e)?0===o.indexOf(\"outer\")?e[\"inner\"+a]:e.document.documentElement[\"client\"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body[\"scroll\"+a],r[\"scroll\"+a],e.body[\"offset\"+a],r[\"offset\"+a],r[\"client\"+a])):void 0===n?E.css(e,t,i):E.style(e,t,n,i)},s,n?e:void 0,n)}})}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var yt=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;E.proxy=function(e,t){var n,r,i;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||E.guid++,i},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=S,E.isFunction=b,E.isWindow=x,E.camelCase=V,E.type=T,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?\"\":(e+\"\").replace(yt,\"$1\")},\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return E});var mt=g.jQuery,bt=g.$;return E.noConflict=function(e){return g.$===E&&(g.$=bt),e&&g.jQuery===E&&(g.jQuery=mt),E},\"undefined\"==typeof e&&(g.jQuery=g.$=E),E});\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff output\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n            typeof define === 'function' && define.amd ? define(['exports'], factory) :\n            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.strophe = {}));\n})(this, (function (exports) { 'use strict';\n\n            var global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {};\n\n            /*\n             * This module provides uniform\n             * Shims APIs and globals that are not present in all JS environments,\n             * the most common example for Strophe being browser APIs like WebSocket\n             * and DOM that don't exist under nodejs.\n             *\n             * Usually these will be supplied in nodejs by conditionally requiring a\n             * NPM module that provides a compatible implementation.\n             */\n\n            /* global global */\n\n            /**\n             * WHATWG WebSockets API\n             * https://www.w3.org/TR/websockets/\n             *\n             * Interface to use the web socket protocol\n             *\n             * Used implementations:\n             * - supported browsers: built-in in WebSocket global\n             *   https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#Browser_compatibility\n             * - nodejs: use standard-compliant 'ws' module\n             *   https://www.npmjs.com/package/ws\n             */\n            function getWebSocketImplementation() {\n              let WebSocketImplementation = global$1.WebSocket;\n\n              if (typeof WebSocketImplementation === 'undefined') {\n                try {\n                  WebSocketImplementation = require('ws');\n                } catch (err) {\n                  throw new Error('You must install the \"ws\" package to use Strophe in nodejs.');\n                }\n              }\n\n              return WebSocketImplementation;\n            }\n\n            const WebSocket = getWebSocketImplementation();\n            /**\n             * DOMParser\n             * https://w3c.github.io/DOM-Parsing/#the-domparser-interface\n             *\n             * Interface to parse XML strings into Document objects\n             *\n             * Used implementations:\n             * - supported browsers: built-in in DOMParser global\n             *   https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility\n             * - nodejs: use '@xmldom/xmldom' module\n             *   https://www.npmjs.com/package/@xmldom/xmldom\n             */\n\n            function getDOMParserImplementation() {\n              let DOMParserImplementation = global$1.DOMParser;\n\n              if (typeof DOMParserImplementation === 'undefined') {\n                try {\n                  DOMParserImplementation = require('@xmldom/xmldom').DOMParser;\n                } catch (err) {\n                  throw new Error('You must install the \"@xmldom/xmldom\" package to use Strophe in nodejs.');\n                }\n              }\n\n              return DOMParserImplementation;\n            }\n\n            const DOMParser = getDOMParserImplementation();\n            /**\n             *  Gets IE xml doc object. Used by getDummyXMLDocument shim.\n             *\n             *  Returns:\n             *    A Microsoft XML DOM Object\n             *  See Also:\n             *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n             */\n\n            function _getIEXmlDom() {\n              const docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n              for (let d = 0; d < docStrings.length; d++) {\n                try {\n                  // eslint-disable-next-line no-undef\n                  const doc = new ActiveXObject(docStrings[d]);\n                  return doc;\n                } catch (e) {// Try next one\n                }\n              }\n            }\n            /**\n             * Creates a dummy XML DOM document to serve as an element and text node generator.\n             *\n             * Used implementations:\n             *  - IE < 10: avoid using createDocument() due to a memory leak, use ie-specific\n             *    workaround\n             *  - other supported browsers: use document's createDocument\n             *  - nodejs: use '@xmldom/xmldom'\n             */\n\n\n            function getDummyXMLDOMDocument() {\n              // nodejs\n              if (typeof document === 'undefined') {\n                try {\n                  const DOMImplementation = require('@xmldom/xmldom').DOMImplementation;\n\n                  return new DOMImplementation().createDocument('jabber:client', 'strophe', null);\n                } catch (err) {\n                  throw new Error('You must install the \"@xmldom/xmldom\" package to use Strophe in nodejs.');\n                }\n              } // IE < 10\n\n\n              if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                const doc = _getIEXmlDom();\n\n                doc.appendChild(doc.createElement('strophe'));\n                return doc;\n              } // All other supported browsers\n\n\n              return document.implementation.createDocument('jabber:client', 'strophe', null);\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            const safe_add$1 = function (x, y) {\n              const lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            const bit_rol = function (num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            const str2binl = function (str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              const bin = [];\n\n              for (let i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            const binl2str = function (bin) {\n              let str = \"\";\n\n              for (let i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            const binl2hex = function (binarray) {\n              const hex_tab = \"0123456789abcdef\";\n              let str = \"\";\n\n              for (let i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            const md5_cmn = function (q, a, b, x, s, t) {\n              return safe_add$1(bit_rol(safe_add$1(safe_add$1(a, q), safe_add$1(x, t)), s), b);\n            };\n\n            const md5_ff = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            const md5_gg = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            const md5_hh = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            const md5_ii = function (a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            const core_md5 = function (x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              let a = 1732584193;\n              let b = -271733879;\n              let c = -1732584194;\n              let d = 271733878;\n              let olda, oldb, oldc, oldd;\n\n              for (let i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            const MD5 = {\n              hexdigest: function (s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function (s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /** Class: Strophe.SASLMechanism\n             *\n             *  Encapsulates an SASL authentication mechanism.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      SCRAM-SHA-1 - 60\n             *      PLAIN       - 50\n             *      OAUTHBEARER - 40\n             *      X-OAUTH2    - 30\n             *      ANONYMOUS   - 20\n             *      EXTERNAL    - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n            class SASLMechanism {\n              /**\n               * PrivateConstructor: Strophe.SASLMechanism\n               * SASL auth mechanism abstraction.\n               *\n               *  Parameters:\n               *    (String) name - SASL Mechanism name.\n               *    (Boolean) isClientFirst - If client should send response first without challenge.\n               *    (Number) priority - Priority.\n               *\n               *  Returns:\n               *    A new Strophe.SASLMechanism object.\n               */\n              constructor(name, isClientFirst, priority) {\n                /** PrivateVariable: mechname\n                 *  Mechanism name.\n                 */\n                this.mechname = name;\n                /** PrivateVariable: isClientFirst\n                 *  If client sends response without initial server challenge.\n                 */\n\n                this.isClientFirst = isClientFirst;\n                /** Variable: priority\n                 *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n                 *  Users may override this to prioritize mechanisms differently.\n                 *\n                 *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n                 *\n                 *  > Strophe.SASLPlain.priority = Strophe.SASLSHA1.priority;\n                 *\n                 *  See <SASL mechanisms> for a list of available mechanisms.\n                 *\n                 */\n\n                this.priority = priority;\n              }\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n\n\n              test() {\n                // eslint-disable-line class-methods-use-this\n                return true;\n              }\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n\n\n              onStart(connection) {\n                this._connection = connection;\n              }\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge.\n               *\n               *  By deafult, if the client is expected to send data first (isClientFirst === true),\n               *  this method is called with `challenge` as null on the first call,\n               *  unless `clientChallenge` is overridden in the relevant subclass.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n\n\n              onChallenge(connection, challenge) {\n                // eslint-disable-line\n                throw new Error(\"You should implement challenge handling!\");\n              }\n              /** PrivateFunction: clientChallenge\n               *  Called by the protocol implementation if the client is expected to send\n               *  data first in the authentication exchange (i.e. isClientFirst === true).\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n\n\n              clientChallenge(connection) {\n                if (!this.isClientFirst) {\n                  throw new Error(\"clientChallenge should not be called if isClientFirst is false!\");\n                }\n\n                return this.onChallenge(connection);\n              }\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n\n\n              onFailure() {\n                this._connection = null;\n              }\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n\n\n              onSuccess() {\n                this._connection = null;\n              }\n\n            }\n\n            class SASLAnonymous extends SASLMechanism {\n              /** PrivateConstructor: SASLAnonymous\n               *  SASL ANONYMOUS authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ANONYMOUS';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid === null;\n              }\n\n            }\n\n            class SASLExternal extends SASLMechanism {\n              /** PrivateConstructor: SASLExternal\n               *  SASL EXTERNAL authentication.\n               *\n               *  The EXTERNAL mechanism allows a client to request the server to use\n               *  credentials established by means external to the mechanism to\n               *  authenticate the client. The external means may be, for instance,\n               *  TLS services.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'EXTERNAL';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n                super(mechname, isClientFirst, priority);\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n\n                /** According to XEP-178, an authzid SHOULD NOT be presented when the\n                 * authcid contained or implied in the client certificate is the JID (i.e.\n                 * authzid) with which the user wants to log in as.\n                 *\n                 * To NOT send the authzid, the user should therefore set the authcid equal\n                 * to the JID when instantiating a new Strophe.Connection object.\n                 */\n                return connection.authcid === connection.authzid ? '' : connection.authzid;\n              }\n\n            }\n\n            const utils = {\n              utf16to8: function (str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function (cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (const cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    let expires = '';\n                    let domain = '';\n                    let path = '';\n                    const cookieObj = cookies[cookieName];\n                    const isObj = typeof cookieObj === \"object\";\n                    const cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            class SASLOAuthBearer extends SASLMechanism {\n              /** PrivateConstructor: SASLOAuthBearer\n               *  SASL OAuth Bearer authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'OAUTHBEARER';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 40;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.pass !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                let auth_str = 'n,';\n\n                if (connection.authcid !== null) {\n                  auth_str = auth_str + 'a=' + connection.authzid;\n                }\n\n                auth_str = auth_str + ',';\n                auth_str = auth_str + \"\\u0001\";\n                auth_str = auth_str + 'auth=Bearer ';\n                auth_str = auth_str + connection.pass;\n                auth_str = auth_str + \"\\u0001\";\n                auth_str = auth_str + \"\\u0001\";\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            class SASLPlain extends SASLMechanism {\n              /** PrivateConstructor: SASLPlain\n               *  SASL PLAIN authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'PLAIN';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                const {\n                  authcid,\n                  authzid,\n                  domain,\n                  pass\n                } = connection;\n\n                if (!domain) {\n                  throw new Error(\"SASLPlain onChallenge: domain is not defined!\");\n                } // Only include authzid if it differs from authcid.\n                // See: https://tools.ietf.org/html/rfc6120#section-6.3.8\n\n\n                let auth_str = authzid !== `${authcid}@${domain}` ? authzid : '';\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + authcid;\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + pass;\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n                e = safe_add(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            const SHA1 = {\n              b64_hmac_sha1: function (key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function (s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function (key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function (s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            class SASLSHA1 extends SASLMechanism {\n              /** PrivateConstructor: SASLSHA1\n               *  SASL SCRAM SHA 1 authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'SCRAM-SHA-1';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid !== null;\n              }\n\n              onChallenge(connection, challenge) {\n                // eslint-disable-line class-methods-use-this\n                let nonce, salt, iter, Hi, U, U_old, i, k;\n                let responseText = \"c=biws,\";\n                let authMessage = `${connection._sasl_data[\"client-first-message-bare\"]},${challenge},`;\n                const cnonce = connection._sasl_data.cnonce;\n                const attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  const matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.slice(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                const pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                const clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                const serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                const clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              }\n\n              clientChallenge(connection, test_cnonce) {\n                // eslint-disable-line class-methods-use-this\n                const cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n                let auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n                auth_str += \",r=\";\n                auth_str += cnonce;\n                connection._sasl_data.cnonce = cnonce;\n                connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n                auth_str = \"n,,\" + auth_str;\n                return auth_str;\n              }\n\n            }\n\n            class SASLXOAuth2 extends SASLMechanism {\n              /** PrivateConstructor: SASLXOAuth2\n               *  SASL X-OAuth2 authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'X-OAUTH2';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.pass !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                let auth_str = '\\u0000';\n\n                if (connection.authcid !== null) {\n                  auth_str = auth_str + connection.authzid;\n                }\n\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + connection.pass;\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            /**\n             * Implementation of atob() according to the HTML and Infra specs, except that\n             * instead of throwing INVALID_CHARACTER_ERR we return null.\n             */\n\n            function atob$2(data) {\n              if (arguments.length === 0) {\n                throw new TypeError(\"1 argument required, but only 0 present.\");\n              } // Web IDL requires DOMStrings to just be converted using ECMAScript\n              // ToString, which in our case amounts to using a template literal.\n\n\n              data = `${data}`; // \"Remove all ASCII whitespace from data.\"\n\n              data = data.replace(/[ \\t\\n\\f\\r]/g, \"\"); // \"If data's length divides by 4 leaving no remainder, then: if data ends\n              // with one or two U+003D (=) code points, then remove them from data.\"\n\n              if (data.length % 4 === 0) {\n                data = data.replace(/==?$/, \"\");\n              } // \"If data's length divides by 4 leaving a remainder of 1, then return\n              // failure.\"\n              //\n              // \"If data contains a code point that is not one of\n              //\n              // U+002B (+)\n              // U+002F (/)\n              // ASCII alphanumeric\n              //\n              // then return failure.\"\n\n\n              if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n                return null;\n              } // \"Let output be an empty byte sequence.\"\n\n\n              let output = \"\"; // \"Let buffer be an empty buffer that can have bits appended to it.\"\n              //\n              // We append bits via left-shift and or.  accumulatedBits is used to track\n              // when we've gotten to 24 bits.\n\n              let buffer = 0;\n              let accumulatedBits = 0; // \"Let position be a position variable for data, initially pointing at the\n              // start of data.\"\n              //\n              // \"While position does not point past the end of data:\"\n\n              for (let i = 0; i < data.length; i++) {\n                // \"Find the code point pointed to by position in the second column of\n                // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n                // the first cell of the same row.\n                //\n                // \"Append to buffer the six bits corresponding to n, most significant bit\n                // first.\"\n                //\n                // atobLookup() implements the table from RFC 4648.\n                buffer <<= 6;\n                buffer |= atobLookup(data[i]);\n                accumulatedBits += 6; // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n                // big-endian numbers. Append three bytes with values equal to those\n                // numbers to output, in the same order, and then empty buffer.\"\n\n                if (accumulatedBits === 24) {\n                  output += String.fromCharCode((buffer & 0xff0000) >> 16);\n                  output += String.fromCharCode((buffer & 0xff00) >> 8);\n                  output += String.fromCharCode(buffer & 0xff);\n                  buffer = accumulatedBits = 0;\n                } // \"Advance position by 1.\"\n\n              } // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n              // 12 bits, then discard the last four and interpret the remaining eight as\n              // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n              // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n              // the one or two bytes with values equal to those one or two numbers to\n              // output, in the same order.\"\n\n\n              if (accumulatedBits === 12) {\n                buffer >>= 4;\n                output += String.fromCharCode(buffer);\n              } else if (accumulatedBits === 18) {\n                buffer >>= 2;\n                output += String.fromCharCode((buffer & 0xff00) >> 8);\n                output += String.fromCharCode(buffer & 0xff);\n              } // \"Return output.\"\n\n\n              return output;\n            }\n            /**\n             * A lookup table for atob(), which converts an ASCII character to the\n             * corresponding six-bit number.\n             */\n\n\n            const keystr$1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n            function atobLookup(chr) {\n              const index = keystr$1.indexOf(chr); // Throw exception if character is not in the lookup string; should not be hit in tests\n\n              return index < 0 ? undefined : index;\n            }\n\n            var atob_1 = atob$2;\n\n            /**\n             * btoa() as defined by the HTML and Infra specs, which mostly just references\n             * RFC 4648.\n             */\n\n            function btoa$2(s) {\n              if (arguments.length === 0) {\n                throw new TypeError(\"1 argument required, but only 0 present.\");\n              }\n\n              let i; // String conversion as required by Web IDL.\n\n              s = `${s}`; // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n              // data contains any character whose code point is greater than U+00FF.\"\n\n              for (i = 0; i < s.length; i++) {\n                if (s.charCodeAt(i) > 255) {\n                  return null;\n                }\n              }\n\n              let out = \"\";\n\n              for (i = 0; i < s.length; i += 3) {\n                const groupsOfSix = [undefined, undefined, undefined, undefined];\n                groupsOfSix[0] = s.charCodeAt(i) >> 2;\n                groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n\n                if (s.length > i + 1) {\n                  groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n                  groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n                }\n\n                if (s.length > i + 2) {\n                  groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n                  groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n                }\n\n                for (let j = 0; j < groupsOfSix.length; j++) {\n                  if (typeof groupsOfSix[j] === \"undefined\") {\n                    out += \"=\";\n                  } else {\n                    out += btoaLookup(groupsOfSix[j]);\n                  }\n                }\n              }\n\n              return out;\n            }\n            /**\n             * Lookup table for btoa(), which converts a six-bit number into the\n             * corresponding ASCII character.\n             */\n\n\n            const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n            function btoaLookup(index) {\n              if (index >= 0 && index < 64) {\n                return keystr[index];\n              } // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n\n\n              return undefined;\n            }\n\n            var btoa_1 = btoa$2;\n\n            const atob$1 = atob_1;\n\n            const btoa$1 = btoa_1;\n\n            var abab = {\n              atob: atob$1,\n              btoa: btoa$1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2018, OGG, LLC\n            */\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n            const Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"1.5.0\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag(tag) {\n                  for (let i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n\n                validCSS(style) {\n                  for (let i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11,\n                ATTACHFAIL: 12\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild(elem, elemName, func) {\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  const childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = getDummyXMLDOMDocument();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                const node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (let a = 1; a < arguments.length; a++) {\n                  const arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (typeof arg === \"object\" && typeof arg.sort === \"function\") {\n                    for (let i = 0; i < arg.length; i++) {\n                      const attr = arg[i];\n\n                      if (typeof attr === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (typeof arg === \"object\") {\n                    for (const k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode(html) {\n                let node; //ensure text is escaped\n\n                if (DOMParser) {\n                  const parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                let str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement(elem) {\n                let el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (let i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml(elem) {\n                let el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  const tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        const attribute = Strophe.XHTML.attributes[tag][i];\n                        let value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && typeof value === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          const css = [];\n                          const cssAttrs = value.split(';');\n\n                          for (let j = 0; j < cssAttrs.length; j++) {\n                            const attr = cssAttrs[j].split(':');\n                            const cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              const cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (let i = 0; i < elem.childNodes.length; i++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (let i = 0; i < elem.childNodes.length; i++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid(jid) {\n                const bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  const parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                const s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log(level, msg) {\n                if (level === this.LogLevel.FATAL) {\n                  var _console;\n\n                  (_console = console) === null || _console === void 0 ? void 0 : _console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                const names = [...Array(elem.attributes.length).keys()].map(i => elem.attributes[i].nodeName);\n                names.sort();\n                let result = names.reduce((a, n) => `${a} ${n}=\"${Strophe.xmlescape(elem.attributes.getNamedItem(n).value)}\"`, `<${elem.nodeName}`);\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    const child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = class Builder {\n              constructor(name, attrs) {\n                // Set correct namespace for jabber:client elements\n                if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                  if (attrs && !attrs.xmlns) {\n                    attrs.xmlns = Strophe.NS.CLIENT;\n                  } else if (!attrs) {\n                    attrs = {\n                      xmlns: Strophe.NS.CLIENT\n                    };\n                  }\n                } // Holds the tree being built.\n\n\n                this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n                this.node = this.nodeTree;\n              }\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n\n\n              tree() {\n                return this.nodeTree;\n              }\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n\n\n              toString() {\n                return Strophe.serialize(this.nodeTree);\n              }\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n\n\n              up() {\n                this.node = this.node.parentNode;\n                return this;\n              }\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n\n\n              root() {\n                this.node = this.nodeTree;\n                return this;\n              }\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              attrs(moreattrs) {\n                for (const k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              }\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              c(name, attrs, text) {\n                const child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              }\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              cnode(elem) {\n                let impNode;\n                const xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                const newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              }\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              t(text) {\n                const child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              }\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              h(html) {\n                const fragment = Strophe.xmlGenerator().createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                const xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace(elem) {\n                let elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch(elem) {\n                let nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, elem => {\n                    if (this.getNamespace(elem) === this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch(elem) {\n                let from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                const elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run(elem) {\n                let result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            Strophe.TimedHandler = class TimedHandler {\n              /** PrivateConstructor: Strophe.TimedHandler\n               *  Create and initialize a new Strophe.TimedHandler object.\n               *\n               *  Parameters:\n               *    (Integer) period - The number of milliseconds to wait before the\n               *      handler is called.\n               *    (Function) handler - The callback to run when the handler fires.  This\n               *      function should take no arguments.\n               *\n               *  Returns:\n               *    A new Strophe.TimedHandler object.\n               */\n              constructor(period, handler) {\n                this.period = period;\n                this.handler = handler;\n                this.lastCalled = new Date().getTime();\n                this.user = true;\n              }\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n\n\n              run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              }\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n\n\n              reset() {\n                this.lastCalled = new Date().getTime();\n              }\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n\n\n              toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL SCRAM-SHA-1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA-1 - 60\n             *      PLAIN       - 50\n             *      OAUTHBEARER - 40\n             *      X-OAUTH2    - 30\n             *      ANONYMOUS   - 20\n             *      EXTERNAL    - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  protocol:\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  worker:\n             *\n             *  Set this option to URL from where the shared worker script should be loaded.\n             *\n             *  To run the websocket connection inside a shared worker.\n             *  This allows you to share a single websocket-based connection between\n             *  multiple Strophe.Connection instances, for example one per browser tab.\n             *\n             *  The script to use is the one in `src/shared-connection-worker.js`.\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = class Connection {\n              constructor(service, options) {\n                // The service URL\n                this.service = service; // Configuration options\n\n                this.options = options || {};\n                this.setProtocol();\n                /* The connected JID. */\n\n                this.jid = \"\";\n                /* the JIDs domain */\n\n                this.domain = null;\n                /* stream:features */\n\n                this.features = null; // SASL\n\n                this._sasl_data = {};\n                this.do_bind = false;\n                this.do_session = false;\n                this.mechanisms = {}; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.protocolErrorHandlers = {\n                  'HTTP': {},\n                  'websocket': {}\n                };\n                this._idleTimeout = null;\n                this._disconnectTimeout = null;\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.do_authentication = true;\n                this.paused = false;\n                this.restored = false;\n                this._data = [];\n                this._uniqueId = 0;\n                this._sasl_success_handler = null;\n                this._sasl_failure_handler = null;\n                this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n                this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n                this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n                utils.addCookies(this.options.cookies);\n                this.registerSASLMechanisms(this.options.mechanisms); // A client must always respond to incoming IQ \"set\" and \"get\" stanzas.\n                // See https://datatracker.ietf.org/doc/html/rfc6120#section-8.2.3\n                //\n                // This is a fallback handler which gets called when no other handler\n                // was called for a received IQ \"set\" or \"get\".\n\n                this.iqFallbackHandler = new Strophe.Handler(iq => this.send($iq({\n                  type: 'error',\n                  id: iq.getAttribute('id')\n                }).c('error', {\n                  'type': 'cancel'\n                }).c('service-unavailable', {\n                  'xmlns': Strophe.NS.STANZAS\n                })), null, 'iq', ['get', 'set']); // initialize plugins\n\n                for (const k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    const F = function () {};\n\n                    F.prototype = Strophe._connectionPlugins[k];\n                    this[k] = new F();\n                    this[k].init(this);\n                  }\n                }\n              }\n              /** Function: setProtocol\n               *  Select protocal based on this.options or this.service\n               */\n\n\n              setProtocol() {\n                const proto = this.options.protocol || \"\";\n\n                if (this.options.worker) {\n                  this._proto = new Strophe.WorkerWebsocket(this);\n                } else if (this.service.indexOf(\"ws:\") === 0 || this.service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                  this._proto = new Strophe.Websocket(this);\n                } else {\n                  this._proto = new Strophe.Bosh(this);\n                }\n              }\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n\n\n              reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              }\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n\n\n              pause() {\n                this.paused = true;\n              }\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n\n\n              resume() {\n                this.paused = false;\n              }\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n\n\n              getUniqueId(suffix) {\n                // eslint-disable-line class-methods-use-this\n                const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  const r = Math.random() * 16 | 0,\n                        v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              }\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n\n\n              addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              }\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should NOT be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               *     (Integer) disconnection_timeout - The optional disconnection timeout\n               *      in milliseconds before _doDisconnect will be called.\n               */\n\n\n              connect(jid, pass, callback, wait, hold, route, authcid) {\n                let disconnection_timeout = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 3000;\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false;\n                this.disconnection_timeout = disconnection_timeout; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              }\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto._attach) {\n                  return this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error('The \"attach\" method is not available for your connection protocol');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              }\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              }\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n\n\n              _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              }\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n\n\n              xmlInput(elem) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n\n\n              xmlOutput(elem) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n\n\n              rawInput(data) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n\n\n              rawOutput(data) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n\n\n              nextValidRid(rid) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n\n\n              send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (let i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              }\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n\n\n              flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              }\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n\n\n              sendPresence(elem, callback, errback, timeout) {\n                let timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                let id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  const handler = this.addHandler(stanza => {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      this.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, () => {\n                      // get rid of normal handler\n                      this.deleteHandler(handler); // call errback on timeout with null stanza\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              }\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n\n\n              sendIQ(elem, callback, errback, timeout) {\n                let timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                let id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  const handler = this.addHandler(stanza => {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      this.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    const iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      const error = new Error(`Got bad IQ type of ${iqtype}`);\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, () => {\n                      // get rid of normal handler\n                      this.deleteHandler(handler); // call errback on timeout with null stanza\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              }\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n\n\n              _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  const error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              }\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n              }\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n\n\n              addTimedHandler(period, handler) {\n                const thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              }\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n\n\n              deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              }\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n\n\n              addHandler(handler, ns, name, type, id, from, options) {\n                const hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              }\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n\n\n              deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                const i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              }\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n\n\n              registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(m => this.registerSASLMechanism(m));\n              }\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n\n\n              registerSASLMechanism(Mechanism) {\n                const mechanism = new Mechanism();\n                this.mechanisms[mechanism.mechname] = mechanism;\n              }\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n\n\n              disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                if (reason) {\n                  Strophe.warn(\"Disconnect was called because: \" + reason);\n                } else {\n                  Strophe.info(\"Disconnect was called\");\n                }\n\n                if (this.connected) {\n                  let pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(this.disconnection_timeout, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              }\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n\n\n              _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (const k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    const plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(`${k} plugin caused an exception changing status: ${err}`);\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(`User connection callback caused an exception: ${e}`);\n                  }\n                }\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n\n\n              _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              }\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n\n\n              _dataRecv(req, raw) {\n                const elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  const hand = this.removeHandlers.pop();\n                  const i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                const type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  let cond = elem.getAttribute(\"condition\");\n                  const conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, child => {\n                  const matches = [];\n                  this.handlers = this.handlers.reduce((handlers, handler) => {\n                    try {\n                      if (handler.isMatch(child) && (this.authenticated || !handler.user)) {\n                        if (handler.run(child)) {\n                          handlers.push(handler);\n                        }\n\n                        matches.push(handler);\n                      } else {\n                        handlers.push(handler);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n\n                    return handlers;\n                  }, []); // If no handler was fired for an incoming IQ with type=\"set\",\n                  // then we return an IQ error stanza with service-unavailable.\n\n                  if (!matches.length && this.iqFallbackHandler.isMatch(child)) {\n                    this.iqFallbackHandler.run(child);\n                  }\n                });\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n\n\n              _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                let bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                const conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                let hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                const matched = Array.from(bodyWrap.getElementsByTagName(\"mechanism\")).map(m => this.mechanisms[m.textContent]).filter(m => m);\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              }\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n\n\n              sortMechanismsByPriority(mechanisms) {\n                // eslint-disable-line class-methods-use-this\n                // Sorting mechanisms according to priority.\n                for (let i = 0; i < mechanisms.length - 1; ++i) {\n                  let higher = i;\n\n                  for (let j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].priority > mechanisms[higher].priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    const swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              }\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n\n\n              authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              }\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n\n\n              _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                let mechanism_found = false;\n\n                for (let i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = mechanisms[i];\n\n                  this._sasl_mechanism.onStart(this);\n\n                  const request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.mechname\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    const response = this._sasl_mechanism.clientChallenge(this);\n\n                    request_auth_exchange.t(abab.btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              }\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n\n\n              _sasl_challenge_cb(elem) {\n                const challenge = abab.atob(Strophe.getText(elem));\n\n                const response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                const stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(abab.btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              }\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n\n\n              _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              }\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onLegacyAuthIQResult(elem) {\n                // eslint-disable-line no-unused-vars\n                // build plaintext auth iq\n                const iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              }\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _sasl_success_cb(elem) {\n                if (this._sasl_data[\"server-signature\"]) {\n                  let serverSignature;\n                  const success = abab.atob(Strophe.getText(elem));\n                  const attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  const matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                const streamfeature_handlers = [];\n\n                const wrapper = (handlers, elem) => {\n                  while (handlers.length) {\n                    this.deleteHandler(handlers.pop());\n                  }\n\n                  this._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              }\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  const child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              }\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n\n\n              bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, `Strophe.Connection.prototype.bind called but \"do_bind\" is false`);\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                const resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              }\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  const conflict = elem.getElementsByTagName(\"conflict\");\n                  let condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                const bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  const jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.authenticated = true;\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              }\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n\n\n              _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(`Strophe.Connection.prototype._establishSession ` + `called but apparently ${Strophe.NS.SESSION} wasn't advertised by the server`);\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              }\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this.authenticated = false;\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              }\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              }\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              }\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n\n\n              _addSysTimedHandler(period, handler) {\n                const thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              }\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n\n\n              _addSysHandler(handler, ns, name, type, id) {\n                const hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n\n\n              _onIdle() {\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  const thand = this.removeTimeds.pop();\n                  const i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                const now = new Date().getTime();\n                const newList = [];\n\n                for (let i = 0; i < this.timedHandlers.length; i++) {\n                  const thand = this.timedHandlers[i];\n\n                  if (this.authenticated || !thand.user) {\n                    const since = thand.lastCalled + thand.period;\n\n                    if (since - now <= 0) {\n                      if (thand.run()) {\n                        newList.push(thand);\n                      }\n                    } else {\n                      newList.push(thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n                }\n              }\n\n            };\n            Strophe.SASLMechanism = SASLMechanism;\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous   - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain       - SASL PLAIN authentication.\n             *  Strophe.SASLSHA1        - SASL SCRAM-SHA-1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal    - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2     - SASL X-OAuth2 authentication\n             */\n\n            Strophe.SASLAnonymous = SASLAnonymous;\n            Strophe.SASLPlain = SASLPlain;\n            Strophe.SASLSHA1 = SASLSHA1;\n            Strophe.SASLOAuthBearer = SASLOAuthBearer;\n            Strophe.SASLExternal = SASLExternal;\n            Strophe.SASLXOAuth2 = SASLXOAuth2;\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            Strophe.Request = class Request {\n              /** PrivateConstructor: Strophe.Request\n               *  Create and initialize a new Strophe.Request object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data to be sent in the request.\n               *    (Function) func - The function that will be called when the\n               *      XMLHttpRequest readyState changes.\n               *    (Integer) rid - The BOSH rid attribute associated with this request.\n               *    (Integer) sends - The number of times this same request has been sent.\n               */\n              constructor(elem, func, rid, sends) {\n                this.id = ++Strophe._requestId;\n                this.xmlData = elem;\n                this.data = Strophe.serialize(elem); // save original function in case we need to make a new request\n                // from this one.\n\n                this.origFunc = func;\n                this.func = func;\n                this.rid = rid;\n                this.date = NaN;\n                this.sends = sends || 0;\n                this.abort = false;\n                this.dead = null;\n\n                this.age = function () {\n                  if (!this.date) {\n                    return 0;\n                  }\n\n                  const now = new Date();\n                  return (now - this.date) / 1000;\n                };\n\n                this.timeDead = function () {\n                  if (!this.dead) {\n                    return 0;\n                  }\n\n                  const now = new Date();\n                  return (now - this.dead) / 1000;\n                };\n\n                this.xhr = this._newXHR();\n              }\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n\n\n              getResponse() {\n                let node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe.error(\"invalid response received\");\n                    Strophe.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe.error(\"responseXML: \" + Strophe.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe.error(\"responseText: \" + this.xhr.responseText);\n                    const error = new Error();\n                    error.name = Strophe.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              }\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n\n\n              _newXHR() {\n                let xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe.Bosh = class Bosh {\n              constructor(connection) {\n                this._conn = connection;\n                /* request id for body tags */\n\n                this.rid = Math.floor(Math.random() * 4294967295);\n                /* The current session ID. */\n\n                this.sid = null; // default BOSH values\n\n                this.hold = 1;\n                this.wait = 60;\n                this.window = 5;\n                this.errors = 0;\n                this.inactivity = null;\n                this.lastResponseHeaders = null;\n                this._requests = [];\n              }\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n\n\n              _buildBody() {\n                const bodyWrap = $build('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              }\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n\n\n              _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              }\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n\n\n              _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                const body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                const _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);\n              }\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              _restore(jid, callback, wait, hold, wind) {\n                const session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe.getBareJidFromJid(session.jid) === Strophe.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe.getNodeFromJid(jid) === null && Strophe.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              }\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _connect_cb(bodyWrap) {\n                const typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  let cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe.error(\"BOSH-Connection failed: \" + cond);\n                  const conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                const wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                const hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                const wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                const inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              }\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n\n\n              _disconnect(pres) {\n                this._sendTerminate(pres);\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n\n\n              _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              }\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n\n\n              _emptyQueue() {\n                return this._requests.length === 0;\n              }\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n\n\n              _callProtocolErrorHandlers(req) {\n                const reqStatus = Bosh._getRequestStatus(req);\n\n                const err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              }\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n\n\n              _hitError(reqStatus) {\n                this.errors++;\n                Strophe.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              }\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n\n\n              _no_auth_received(callback) {\n                Strophe.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                const body = this._buildBody();\n\n                this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n\n\n              _onDisconnectTimeout() {\n                this._abortAllRequests();\n              }\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n\n\n              _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  const req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n\n\n              _onIdle() {\n                const data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  const body = this._buildBody();\n\n                  for (let i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  const time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {\n                    Strophe.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              }\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n\n\n              static _getRequestStatus(req, def) {\n                let reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              }\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n\n\n              _onRequestStateChange(func, req) {\n                Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                const reqStatus = Bosh._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this._conn.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                const reqIs0 = this._requests[0] === req;\n                const reqIs1 = this._requests[1] === req;\n                const valid_request = reqStatus > 0 && reqStatus < 500;\n                const too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"giving-up\");\n                }\n              }\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n\n\n              _processRequest(i) {\n                let req = this._requests[i];\n\n                const reqStatus = Bosh._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                const time_elapsed = req.age();\n                const primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait);\n                const secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait);\n                const server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe.error(`Request ${this._requests[i].id} timed out (secondary), restarting`);\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    const content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  const sendFunc = () => {\n                    req.date = new Date();\n\n                    if (this._conn.options.customHeaders) {\n                      const headers = this._conn.options.customHeaders;\n\n                      for (const header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    const backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              }\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n\n\n              _removeRequest(req) {\n                Strophe.debug(\"removing request\");\n\n                for (let i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n\n\n              _restartRequest(i) {\n                const req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              }\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n\n\n              _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              }\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n\n\n              _sendTerminate(pres) {\n                Strophe.debug(\"_sendTerminate was called\");\n\n                const body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                const req = new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n\n\n              _send() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(() => this._conn._onIdle(), 100);\n              }\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              }\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n\n\n              _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n\n            };\n            /** Variable: strip\n             *\n             *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n             *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n             *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n             *\n             *  > Strophe.Bosh.prototype.strip = \"body\";\n             *\n             *  This will enable stripping of the body tag in both\n             *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n             */\n\n            Strophe.Bosh.prototype.strip = null;\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            Strophe.Websocket = class Websocket {\n              /** PrivateConstructor: Strophe.Websocket\n               *  Create and initialize a Strophe.WebSocket object.\n               *  Currently only sets the connection Object.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n               *\n               *  Returns:\n               *    A new Strophe.WebSocket object.\n               */\n              constructor(connection) {\n                this._conn = connection;\n                this.strip = \"wrapper\";\n                const service = connection.service;\n\n                if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                  // If the service is not an absolute URL, assume it is a path and put the absolute\n                  // URL together from options, current URL and the path.\n                  let new_service = \"\";\n\n                  if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                    new_service += \"ws\";\n                  } else {\n                    new_service += \"wss\";\n                  }\n\n                  new_service += \"://\" + window.location.host;\n\n                  if (service.indexOf(\"/\") !== 0) {\n                    new_service += window.location.pathname + service;\n                  } else {\n                    new_service += service;\n                  }\n\n                  connection.service = new_service;\n                }\n              }\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n\n\n              _buildStream() {\n                return $build(\"open\", {\n                  \"xmlns\": Strophe.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              }\n              /** PrivateFunction: _checkStreamError\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n\n\n              _checkStreamError(bodyWrap, connectstatus) {\n                let errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                const error = errors[0];\n                let condition = \"\";\n                let text = \"\";\n                const ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (let i = 0; i < error.childNodes.length; i++) {\n                  const e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                let errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              }\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n\n\n              _reset() {\n                // eslint-disable-line class-methods-use-this\n                return;\n              }\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n\n\n              _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket();\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n\n                this.socket.onopen = () => this._onOpen();\n\n                this.socket.onerror = e => this._onError(e);\n\n                this.socket.onclose = e => this._onClose(e); // Gets replaced with this._onMessage once _onInitialMessage is called\n\n\n                this.socket.onmessage = message => this._onInitialMessage(message);\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _connect_cb(bodyWrap) {\n                const error = this._checkStreamError(bodyWrap, Strophe.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe.Status.CONNFAIL;\n                }\n              }\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n\n\n              _handleStreamStart(message) {\n                let error = false; // Check for errors in the <open /> tag\n\n                const ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                const ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              }\n              /** PrivateFunction: _onInitialMessage\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n\n\n              _onInitialMessage(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  const data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  const streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  const parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  const see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    const service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    const isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  this._replaceMessageHandler();\n\n                  const string = this._streamWrap(message.data);\n\n                  const elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              }\n              /** PrivateFunction: _replaceMessageHandler\n               *\n               * Called by _onInitialMessage in order to replace itself with the general message handler.\n               * This method is overridden by Strophe.WorkerWebsocket, which manages a\n               * websocket connection via a service worker and doesn't have direct access\n               * to the socket.\n               */\n\n\n              _replaceMessageHandler() {\n                this.socket.onmessage = m => this._onMessage(m);\n              }\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n\n\n              _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  const close = $build(\"close\", {\n                    \"xmlns\": Strophe.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  const closeString = Strophe.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                setTimeout(() => this._conn._doDisconnect(), 0);\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n\n\n              _doDisconnect() {\n                Strophe.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              }\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n\n\n              _streamWrap(stanza) {\n                // eslint-disable-line class-methods-use-this\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              }\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n\n\n              _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              }\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n\n\n              _emptyQueue() {\n                // eslint-disable-line class-methods-use-this\n                return true;\n              }\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               */\n\n\n              _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe.debug(\"Websocket closed\");\n                }\n              }\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n\n\n              _no_auth_received(callback) {\n                Strophe.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n\n\n              _onDisconnectTimeout() {} // eslint-disable-line class-methods-use-this\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n\n\n              _abortAllRequests() {} // eslint-disable-line class-methods-use-this\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n\n\n              _onError(error) {\n                Strophe.error(\"Websocket error \" + JSON.stringify(error));\n\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n\n\n              _onIdle() {\n                const data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (let i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      let stanza;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      const rawStanza = Strophe.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              }\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n\n\n              _onMessage(message) {\n                let elem; // check for closing stream\n\n                const close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  const data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._checkStreamError(elem, Strophe.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              }\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n\n\n              _onOpen() {\n                Strophe.debug(\"Websocket open\");\n\n                const start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                const startString = Strophe.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              }\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n\n\n              _reqToData(stanza) {\n                // eslint-disable-line class-methods-use-this\n                return stanza;\n              }\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n\n\n              _send() {\n                this._conn.flush();\n              }\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2020, JC Brand\n            */\n            const lmap = {};\n            lmap['debug'] = Strophe.LogLevel.DEBUG;\n            lmap['info'] = Strophe.LogLevel.INFO;\n            lmap['warn'] = Strophe.LogLevel.WARN;\n            lmap['error'] = Strophe.LogLevel.ERROR;\n            lmap['fatal'] = Strophe.LogLevel.FATAL;\n            /** Class: Strophe.WorkerWebsocket\n             *  _Private_ helper class that handles a websocket connection inside a shared worker.\n             */\n\n            Strophe.WorkerWebsocket = class WorkerWebsocket extends Strophe.Websocket {\n              /** PrivateConstructor: Strophe.WorkerWebsocket\n               *  Create and initialize a Strophe.WorkerWebsocket object.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - The Strophe.Connection\n               *\n               *  Returns:\n               *    A new Strophe.WorkerWebsocket object.\n               */\n              constructor(connection) {\n                super(connection);\n                this._conn = connection;\n                this.worker = new SharedWorker(this._conn.options.worker, 'Strophe XMPP Connection');\n\n                this.worker.onerror = e => {\n                  var _console;\n\n                  (_console = console) === null || _console === void 0 ? void 0 : _console.error(e);\n                  Strophe.log(Strophe.LogLevel.ERROR, `Shared Worker Error: ${e}`);\n                };\n              }\n\n              get socket() {\n                return {\n                  'send': str => this.worker.port.postMessage(['send', str])\n                };\n              }\n\n              _connect() {\n                this._messageHandler = m => this._onInitialMessage(m);\n\n                this.worker.port.start();\n\n                this.worker.port.onmessage = ev => this._onWorkerMessage(ev);\n\n                this.worker.port.postMessage(['_connect', this._conn.service, this._conn.jid]);\n              }\n\n              _attach(callback) {\n                this._messageHandler = m => this._onMessage(m);\n\n                this._conn.connect_callback = callback;\n                this.worker.port.start();\n\n                this.worker.port.onmessage = ev => this._onWorkerMessage(ev);\n\n                this.worker.port.postMessage(['_attach', this._conn.service]);\n              }\n\n              _attachCallback(status, jid) {\n                if (status === Strophe.Status.ATTACHED) {\n                  this._conn.jid = jid;\n                  this._conn.authenticated = true;\n                  this._conn.connected = true;\n                  this._conn.restored = true;\n\n                  this._conn._changeConnectStatus(Strophe.Status.ATTACHED);\n                } else if (status === Strophe.Status.ATTACHFAIL) {\n                  this._conn.authenticated = false;\n                  this._conn.connected = false;\n                  this._conn.restored = false;\n\n                  this._conn._changeConnectStatus(Strophe.Status.ATTACHFAIL);\n                }\n              }\n\n              _disconnect(readyState, pres) {\n                pres && this._conn.send(pres);\n                const close = $build(\"close\", {\n                  \"xmlns\": Strophe.NS.FRAMING\n                });\n\n                this._conn.xmlOutput(close.tree());\n\n                const closeString = Strophe.serialize(close);\n\n                this._conn.rawOutput(closeString);\n\n                this.worker.port.postMessage(['send', closeString]);\n\n                this._conn._doDisconnect();\n              }\n\n              _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe.debug(\"Websocket closed\");\n                }\n              }\n\n              _closeSocket() {\n                this.worker.port.postMessage(['_closeSocket']);\n              }\n              /** PrivateFunction: _replaceMessageHandler\n               *\n               * Called by _onInitialMessage in order to replace itself with the general message handler.\n               * This method is overridden by Strophe.WorkerWebsocket, which manages a\n               * websocket connection via a service worker and doesn't have direct access\n               * to the socket.\n               */\n\n\n              _replaceMessageHandler() {\n                this._messageHandler = m => this._onMessage(m);\n              }\n              /** PrivateFunction: _onWorkerMessage\n               * _Private_ function that handles messages received from the service worker\n               */\n\n\n              _onWorkerMessage(ev) {\n                const {\n                  data\n                } = ev;\n                const method_name = data[0];\n\n                if (method_name === '_onMessage') {\n                  this._messageHandler(data[1]);\n                } else if (method_name in this) {\n                  try {\n                    this[method_name].apply(this, ev.data.slice(1));\n                  } catch (e) {\n                    Strophe.log(Strophe.LogLevel.ERROR, e);\n                  }\n                } else if (method_name === 'log') {\n                  const level = data[1];\n                  const msg = data[2];\n                  Strophe.log(lmap[level], msg);\n                } else {\n                  Strophe.log(Strophe.LogLevel.ERROR, `Found unhandled service worker message: ${data}`);\n                }\n              }\n\n            };\n\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n            global$1.Strophe = core.Strophe;\n            const {\n              b64_sha1\n            } = SHA1;\n\n            exports.$build = $build;\n            exports.$iq = $iq;\n            exports.$msg = $msg;\n            exports.$pres = $pres;\n            exports.Strophe = Strophe;\n            exports.b64_sha1 = b64_sha1;\n\n            Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";function e(e,n){if(!r)return!1;const u=e.buffer;let i=l.get(u);if(null==i){if((i=t.validate(u))&&n)try{new t.Instance(new t.Module(u)).exports[0]()}catch(e){i=!1}l.set(u,i)}return i}const t=globalThis.WebAssembly,r=\"object\"==typeof t,n=e=>void 0!==e,u=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),i=(...e)=>Uint32Array.of(1836278016,1,...e),o=(...e)=>i(1610679297,33751040,...e,40239360,259),a=(...e)=>u(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),s=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),g=(...e)=>s(...e,2842,4096,28164,28001,357,260,256,560,259,0),l=new WeakMap,f=i(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=u(5,3,1,4,1,0,8,4,110,97,109,101,2,1,0),y=s(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),p=i(1610679297,33751040,134873089,100664833,185276736),m=u(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),b=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),d=g(3082,2561,17152,0,0,252),A=g(2058,1537,16640,49152),U=o(101318657,301990913,268438272,1835101700,17039717),x=a(5,4,1,3,1,1,10,7,1,5,0,254,3,0),h=o(84344833,6357249,17369600,4259847,186257917,1845758464),v=a(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>r&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return r&&n(t.instantiateStreaming)},feature:{get bigInt(){return e(f,!0)},get bulk(){return e(y)},get exceptions(){return e(p)},get memory64(){return e(c)},get mutableGlobal(){return e(m)},get multiValue(){return e(b)},get saturateConversions(){return e(d)},get signExtensions(){return e(A)},get tailCall(){return e(U)},get threads(){return e(x)},get simd(){return e(h)},get references(){return e(v)},get typeReflection(){return r&&n(t.Memory.type)},get funcReferences(){return r&&n(t.Function)}}};","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * AV1 codec mime type.\n     */\n    AV1: 'av1',\n\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    DATA_CHANNEL_CLOSED = 'rtc.data_channel_closed',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed',\n\n    /**\n     * Designates an event indicating that some received video SSRCs will now map to\n     * new remote sources.\n     */\n    VIDEO_SSRCS_REMAPPED = 'rtc.video_ssrcs_remapped',\n\n    /**\n     * Designates an event indicating that some received audio SSRCs will now map to\n     * new remote sources.\n     */\n    AUDIO_SSRCS_REMAPPED = 'rtc.audio_ssrcs_remapped'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const DATA_CHANNEL_CLOSED = RTCEvents.DATA_CHANNEL_CLOSED;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\nexport const VIDEO_SSRCS_REMAPPED = RTCEvents.VIDEO_SSRCS_REMAPPED;\nexport const AUDIO_SSRCS_REMAPPED = RTCEvents.AUDIO_SSRCS_REMAPPED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    /**\n     * The conference was redirected to a visitor node.\n     */\n    REDIRECTED = 'xmpp.redirected',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_EVENT = 'xmpp.room-metadata.event',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_UPDATED = 'xmpp.room-metadata.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWStatusConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWStateConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","JitsiConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","REDIRECTED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DATA_CHANNEL_CLOSED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","E2EE_VERIFICATION_AVAILABLE","E2EE_VERIFICATION_READY","E2EE_VERIFICATION_COMPLETED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","PARTICIPANT_SOURCE_UPDATED","LAST_N_ENDPOINTS_CHANGED","FORWARDED_SOURCES_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","SUBTITLES_RECEIVED","ANALYTICS_EVENT_RECEIVED","TRACK_UPDATED","METADATA_UPDATED","JitsiTrackEvents","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","TRACK_OWNER_CHANGED","CALLSTATS_SCRIPT_URL","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","error","options","devices","name","this","gum","constraints","Array","isArray","slice","undefined","message","join","constraintName","constraint","video","indexOf","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","Error","stack","prototype","Object","create","constructor","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","action","attributes","source","type","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","match","version","_detectNWJS","_detectReactNative","product","length","DummyLocalStorage","EventEmitter","key","value","super","defineProperty","enumerable","configurable","writable","clear","_storage","keys","getItem","keyName","setItem","keyValue","removeItem","n","serialize","JSON","stringify","JitsiLocalStorage","window","localStorage","_localStorageDisabled","ignore","console","warn","isLocalStorageDisabled","emit","dontEmitChangedEvent","i","localStorageContent","jitsiLocalStorage","logger","getLogger","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","getBrowserName","getBrowserVersion","Number","parseInt","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","info","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","platform","Boolean","test","isEngine","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","matches","isSupported","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","addEventListener","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsTrackBasedStats","supportsVP9","usesSdpMungingForSimulcast","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","stream","ReadableStream","postMessage","supportsAudioRed","codecs","some","codec","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","process","versions","chromium","ua","reset","disposed","analyticsHandlers","Set","cache","permanentProperties","conferenceName","addPermanentProperties","browser","dispose","size","forEach","handler","setAnalyticsHandlers","handlers","_setUserProperties","event","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","push","splice","e","require","wrtcFuncNames","reportType","_fabrics","CallStats","msg","backend","log","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","values","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","data","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","ssrc","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","apply","GlobalOnErrorHandler","debugMethods","originalReportError","args","call","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","devicesData","_reportEvent","conferenceID","overall","comment","Promise","resolve","reject","sendUserFeedback","status","reason","mute","tpc","remoteUserID","add","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","start","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","context","LocalStatsCollector","interval","callback","intervalId","intervalMilis","audioLevel","analyser","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","reduce","a","b","filterPositiveValues","filter","isLocalStatsSupported","resume","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","array","Uint8Array","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","stop","clearInterval","disconnect","disconnectAudioContext","async","close","connectAudioContext","suspend","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","emitter","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","list","entries","getEntries","task","Math","max","duration","observer","observe","buffered","startTime","Date","now","longTasksIntervalId","_lastTimeStamp","rate","StatisticsEvents","stopObserver","MediaType","init","flags","_runInLiteMode","runInLiteMode","_ssrcRewriting","ssrcRewritingEnabled","_joinAsVisitor","enableJoinAsVisitor","isMultiStreamSendSupportEnabled","isRunInLiteModeEnabled","isSsrcRewritingSupported","isJoinAsVisitorSupported","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","bandwidth","packetLoss","transport","StatsCollector","audioLevelsInterval","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","Map","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","errorCallback","callErrorHandler","startAudioLevelStats","audioLevels","getAudioLevels","hasOwnProperty","processStats","getStats","then","result","processStatsReport","catch","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","track","getTrackBySSRC","audioCodec","videoCodec","isAudioTrack","participantId","getParticipantId","FeatureFlags","userCodecs","audio","isVideoTrack","isNaN","height","width","userResolutions","doesTrueSimulcast","localSsrcs","getLocalVideoSSRCs","localSsrc","ssrcResolution","get","userFramerates","total","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","v","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","timestamp","bitrateKbps","_calculateFps","frameRate","byteSentStats","id","nominated","state","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","ip","address","port","localip","protocol","conferenceStatsTransport","t","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","set","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","isStreamActive","active","framesPerSecond","bytesSent","codecId","codecShortType","split","kind","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getSsrcByTrackId","trackIdentifier","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","disableThirdPartyRequests","callStatsApplicationLogsDisabled","ScriptUtil","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","analyticsEventEmitter","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","localStat","LocalStats","stopLocalStats","getOriginalStream","addAudioLevelListener","listener","on","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","removeAllListeners","startCallStats","has","endsWith","roomName","lastIndexOf","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","silence","sendActiveDeviceListEvent","globalSet","userId","sendGetUserMediaFailed","err","formatJitsiTrackErrorForCallStats","sendLog","m","globalSubSet","next","csPerStats","sendApplicationLog","sendFeedback","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","addAnalyticsEventListener","removeAnalyticsEventListener","JitsiConferenceEventManager","xmppListeners","session","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","EventEmitterForwarder","addListener","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","getParticipantById","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","AUDIO","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","forward","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","leave","_onConferenceRestarted","_onIceConnectionFailed","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","node","setProperty","tagName","substring","onMemberKicked","bind","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","role","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","nick","isGuest","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","dominantSpeakerIsSilent","roomjid","performance","ev","getMediaSessions","processSourceMap","ufrag","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","config","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","find","p","getJid","enabled","setupStatisticsListeners","level","setAudioLevel","startSilent","getLocalSSRC","onByteSentStatsReceived","JitsiParticipant","displayName","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_properties","_identity","_isReplacing","_isReplaced","_features","_sources","_isMediaTypeMuted","getTracks","_setSources","sourceName","sourceByMediaType","sourceInfo","getBotType","_botType","getConference","getConnectionJid","_connectionJid","getDisplayName","getFeatures","getId","getProperty","getRole","getSources","getStatsID","getTracksByMediaType","hasFeature","feature","isAudioMuted","isHidden","isHiddenFromRecorder","user","isVideoMuted","setBotType","newBotType","setConnectionJid","newJid","newFeatures","setIsReplaced","newIsReplaced","setIsReplacing","newIsReplacing","oldValue","setRole","newRole","supportsDTMF","JitsiConnectionEvents","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","JitsiConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","promise","clearRejectTimeout","clearTimeout","_timeout","setRejectTimeout","ms","setTimeout","Listenable","removeEventListener","off","kJitsiE2EE","Symbol","E2EEcontext","sharedKey","baseUrl","ljm","document","querySelector","idx","src","workerUrl","workerBlob","Blob","URL","createObjectURL","_worker","Worker","onerror","operation","cleanup","cleanupAll","handleReceiver","receiver","transform","receiverStreams","readableStream","readable","writableStream","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","index","v4","E2EEErrors","emojiMapping","sasGenerators","decimal","sasBytes","emoji","map","num","REQ_TIMEOUT","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","OLM_KEY_VERIFICATION_MAC_KEY_IDS","kOlmData","OlmAdapterEvents","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_SAS_AVAILABLE","PARTICIPANT_SAS_READY","PARTICIPANT_KEY_UPDATED","PARTICIPANT_VERIFICATION_COMPLETED","OlmAdapter","_conf","_init","_mediaKey","_mediaKeyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","myId","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","d","_sendMessage","updateCurrentMediaKey","clearParticipantSession","free","clearAllParticipantsSessions","markParticipantVerified","isVerified","sasVerification","E2EE_SAS_CHANNEL_VERIFICATION_FAILED","E2EE_SAS_INVALID_SAS_VERIFICATION","sas","sasMacSent","is_their_key_set","_sendSasMac","_olmAccount","Account","_idKeys","parse","identity_keys","get_library_version","_onIdKeysReady","startVerification","SAS","transactionId","startContent","isInitiator","startMessage","idKeys","keyType","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","body","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","pubKey","get_pubkey","commitment","_computeCommitment","acceptMessage","sasCommitment","keyMessage","keySent","theirKey","E2EE_SAS_COMMITMENT_MISMATCHED","set_their_key","myInfo","theirInfo","generatedSas","method","generateSas","generate_bytes","mac","baseInfo","calculate_mac","sort","E2EE_SAS_KEYS_MAC_MISMATCH","ed25519","E2EE_SAS_MISSING_KEY","computedMac","E2EE_SAS_MAC_MISMATCH","newValue","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","curve25519","mark_keys_as_published","keyList","deviceKeyId","macMessage","olmUtil","Utility","sha256","events","ManagedKeyHandler","_key","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantSasReady","_onParticipantSasAvailable","_onParticipantVerificationCompleted","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","crypto","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","hash","ArrayBuffer","ratchet","getRandomValues","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","sha1_ft","c","sha1_kt","safe_add","x","y","lsw","rol","cnt","SHA1","s","binarray","triplet","j","str","charAt","binb2b64","len","olda","oldb","oldc","oldd","olde","w","core_sha1","bin","charCodeAt","str2binb","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","each","_","el","getAttribute","category","Caps","connection","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","f","addOrReplaceInPresence","getFeaturesAndIdentities","timeout","_getDiscoInfo","response","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","accumulatedValue","tmp","sortedFeatures","sha1","generateSha","_identities","logging","returnWholeStanza","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","clearAcknowledgedStanzaListener","enable","send","$build","flush","pause","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","conn","xmlOutput","statusChanged","deleteHandler","addHandler","_handleServerRequestHandler","_incomingStanzaHandler","elem","child","_increaseSentStanzasCounter","_increaseReceivedStanzasCounter","_answerProcessedStanzas","handledCount","_handleAcknowledgedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","stanza","shift","h","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","min","retry","minDelay","base","floor","random","pow","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","url","service","search","pattern","oldToken","replace","toString","cancel","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","includes","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","readyState","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_maybeStartWSKeepAlive","plugin","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","errback","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","obj","removed","media","approved","whitelists","newWhitelists","oldList","newList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","filteredPayload","_filterUpdatePayload","hiddenDomain","filteredRooms","participants","filteredParticipants","k","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","isHiddenDomain","botType","members","getBreakoutRooms","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","RoomMetadata","_metadata","setMetadata","getMetadata","roomMetadataComponentAddress","metadata","_callStatsUserName","_machineId","externalStorage","callStatsUserName","username","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","sessionId","substr","createExpBackoffTimer","step","count","Moderator","origin","location","Settings","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","targetJid","hosts","focus","targetUrl","conferenceRequestUrl","mode","focusUserJids","focusUserJid","attachEvent","isFocusJid","focusJid","isExternalAuthEnabled","isSipGatewayEnabled","_createConferenceRequest","rtcstatsEnabled","conferenceRequest","machineUid","_createConferenceIq","_parseConferenceIq","resultIq","attr","ready","vnode","authentication","externalAuth","sendConferenceRequest","_handleIqSuccess","_handleIqError","ok","resultJson","_handleSuccess","text","statusText","sessionError","notAuthorized","_handleError","authenticationEnabled","IDENTITY_UPDATED","iAmRecorder","iAmSipGateway","waitMs","reservationErr","errorCode","errorTextNode","errorMsg","invalidSession","anonymousdomain","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","parser","packet2JSON","xmlElement","nodes","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","extractIdentityInformation","hiddenFromRecorderFeatureEnabled","userInfo","tags","tag","groupInfo","group","ChatRoom","password","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","roomMetadata","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","roomMetadataEl","roomMetadataText","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","getElementsByTagName","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","isTranscriber","innerHTML","toLowerCase","fromHiddenDomain","presence","xEl","remove","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","nickEl","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","onVisitorIQ","visitors","String","getMediaPresenceInfo","endpointId","mutedNode","codecTypeNode","videoTypeNode","codecType","getMemberRole","peerJid","getLastPresence","mucNick","dial","rayo","hangup","getLobby","getAVModeration","getMetadataHandler","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","end","endConferenceComponentAddress","MucConnectionPlugin","onVisitors","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","_createSsrcGroupExtension","ssrcGroupCompactJson","semantics","_getOrCreateRtpDescription","jingle","description","content","appendChild","expandSourcesFromJson","jsonMessageXml","sources","audioRtpDescription","videoRtpDescription","ssrcMap","ssrcs","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","MediaDirection","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingResolution","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","surfaceSwitching","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","findLine","parseICEUfrag","parseICEPwd","line","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","parseMLine","parts","proto","pop","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","priority","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseVideoTypeLine","videoTypeLine","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcInfo","numGroups","ssrcGroups","primarySsrc","fidGroup","simGroup","generateSsrc","RandomUtil","getSsrcAttribute","mLine","attributeName","ssrcLine","attribute","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","rtp","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","fmtp","item","rtxApts","rtxPts","keepPts","INACTIVE","rtcpFb","SDP","mediaI","raw","arrayEquals","array1","array2","l","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","mid","clonedeep","RECVONLY","msid","concat","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","initialLastN","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","senders","SENDRECV","transportToJingle","sctpport","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fb","hasAttribute","fromJingle","contents","jingle2media","sctp","payloadType","setAttribute","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","fallback","fn","wrap","defer","setImmediate$1","handlePromise","invokeCallback","isAsync","toStringTag","wrapAsync","asyncFn","func","awaitify","arity","cbArgs","applyEach","eachfn","fns","callArgs","that","cb","_asyncMap","arr","iteratee","results","counter","_iteratee","iterCb","isArrayLike","breakLoop","once","wrapper","callFn","assign","onlyOnce","asyncEachOfLimit","generator","limit","done","canceled","awaiting","running","replenish","iterDone","iterateeCallback","handleError","eachOfLimit","RangeError","asyncIterator","isAsyncIterable","nextElem","coll","createArrayIterator","okeys","iterator","getIterator","createES2015Iterator","createIterator","looping","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","eachOfSeries$1","DLL","head","tail","removeLink","prev","empty","insertAfter","newNode","insertBefore","setInitial","toArray","cur","testFn","curr","dll","queue","worker","concurrency","numRunning","workersList","drain","saturated","unsaturated","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","rej","promiseCallback","q","started","_tasks","_createCB","tasks","buffer","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","paused","datum","pushAsync","kill","unshiftAsync","defineProperties","memo","mapLimit$1","concatLimit$1","val","mapResults","_createTester","check","getResult","testResult","testPassed","consoleFunc","resultArgs","_withoutIndex","bool","_fn","_test","truth","eachLimit$2","eachSeries$1","filterArray","truthValues","filterGeneric","_filter","sync","innerArgs","ensureAsync","newObj","taskCb","TypeError","criteria","comparator","left","right","rest","taskIndex","nextTask","AsyncQueue","_queue","_processQueueTasks","items","_stopped","finishedCallback","shutdown","JingleSessionState","PENDING","ACTIVE","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","MediaSessionEvents","IQ_TIMEOUT","_addSourceElement","ssrc_","JingleSessionPC","jingleContents","videoContents","receiverConstraints","sourceFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_sourceReceiverConstraints","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","numRemoteVideoSources","numRemoteAudioSources","remoteSourceMaxFrameHeights","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","disableRtx","gatherStats","maxstats","capScreenshareBitrate","codecSettings","enableInsertableStreams","videoQuality","forceTurnRelay","usesUnifiedPlan","disableSimulcast","preferredCodec","H264","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","getRemoteSourcesRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","candidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","videoTracks","addTracks","addTrack","all","createOffer","offerSdp","setLocalDescription","processLocalSdpForTransceiverInfo","sendSessionInitiate","setAnswer","jingleAnswer","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","RTCSessionDescription","setRemoteDescription","newLocalSdp","sendContentModify","jingleOfferAnswerIq","audioTracks","tracks","bridgeSessionId","_responderRenegotiate","setVideoCodecs","preferred","disabled","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","channelLastN","accept","responder","sessionModify","setReceiverVideoConstraint","sourceReceiverConstraints","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","maxFrameHeight","jitsiLocalTrack","getLocalVideoTracks","getSourceName","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","getRemoteTracks","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","newSources","mappedSources","addRemoteSsrc","setSourceName","setOwner","_setVideoType","peerMediaInfo","getPeerMediaInfo","_sourceMutedChanged","rtx","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","remoteSdp","findIndex","desiredDirection","getDesiredMediaDirection","removeSSRCOwners","optionalRemoteSdp","_initiatorRenegotiate","createAnswer","answer","offer","replaceTracks","oldLocalSDP","recvOnlyTransceiver","getTransceivers","currentDirection","replaceTrack","setMediaTransferActive","tpcUtils","audioTransferActive","videoTransferActive","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackToPc","_addRemoveTrack","configureSenderVideoEncodings","removeTrackFromPc","isRemove","setP2pVideoTransferActive","videoActive","logVideoStr","isSessionActive","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","sourceMaxFrameHeights","parseSourceMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","errResponse","errorElSel","code","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","href","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","XMPP","token","disconnectInProgress","authenticatedUser","deploymentInfo","_components","trace","errStatusCapture","exec","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","caps","initFeaturesList","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","backendRelease","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","trim","header","sendFaceLandmarksEvent","faceExpression","jsonString","users","created_timestamp","force","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","allocateConferenceFocus","authenticationError","connectionError","CodecSelection","enforcePreferredCodec","p2pDisabledCodec","_isCodecSupported","jvbDisabledCodec","p2pPreferredCodec","jvbPreferredCodec","_selectPreferredCodec","mediaSession","disabledCodec","currentCodec","selectedCodec","remoteParticipants","nonPreferredCodecs","remote","isVideoCodecDisabled","getPreferredCodec","BridgeChannel","wsUrl","_channel","_connected","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","CONNECTING","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendReceiverVideoConstraintsMessage","sendSourceVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","isActive","forwardedSources","onclose","getParticipantCount","jsonObject","logDisabled_","deprecationWarnings_","extractVersion","uastring","expr","pos","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","nativeEventName","arguments","wrappedCallback","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","RTCIceGatherer","isObject","compactObject","accumulator","isObj","isEmptyObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","trackId","utils","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","r","ideal","exact","oldname_","prefix","toUpperCase","oc","mix","advanced","shimConstraints_","remap","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","dev","label","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","getAudioTracks","getVideoTracks","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","MediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","getReceivers","Event","transceiver","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","origRemoveTrack","removeTrack","origAddStream","addStream","origRemoveStream","removeStream","origGetSenders","shimGetStats","origGetStats","selector","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","names","stat","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","RegExp","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","fixNegotiationNeeded","target","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","scaleResolutionDownBy","maxFramerate","getParameters","encodings","setParameters","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","successCallback","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConstraints","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","SDPUtils","augmentedCandidate","toJSON","usernameFragment","shimMaxMessageSize","_sctp","sctpInDescription","sections","mediaSection","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","maxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","byteLength","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimParameterlessSetLocalDescription","nativeSetLocalDescription","shimChrome","shimFirefox","shimSafari","adapter","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","createElement","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","attachMediaStream","element","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","screenObtainer","isDeviceListAvailable","ds","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_attachTTFMTracker","container","_maybeFireTrackAttached","_onTrackAttach","_onTrackDetach","_setHandler","_unregisterHandlers","videoTrack","RTCUtils","detach","getStreamId","getMSID","getTrackId","getTrack","getTrackLabel","getUsageLabel","getVideoType","isLocalAudioTrack","isWebRTCTrackMuted","newAudioLevel","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackToPc","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","_removeLocalTrackFromPc","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","streamInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","unmute","opts","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","every","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","current","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","sessionVersion","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_UPDATED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","getSourceIndexFromSourceName","nameParts","SignalingLayer","getPeerSourceInfo","getSSRCOwner","getTrackSourceName","ssrcList","setTrackMuteStatus","setTrackVideoType","updateSsrcOwnersOnLeave","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","ssrcCache","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","mediaDirection","trackID","_updateSourcesToMsidMap","storedStreamId","generatedMsid","_hasHadVideoTrack","_hasHadAudioTrack","generatedStreamId","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","videoMlines","_usesUnifiedPlan","nameExists","trackIndexParts","trackIndex","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","primarySsrcMsid","primarySsrcCname","cname","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","clearSsrcCache","setSsrcCache","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","numOfLayers","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","addAssociatedAttributes","simSsrcs","simSsrc","_generateSsrc","mungeLocalDescription","simulcastSsrcs","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","isRestoringTimedout","isVideoTrackFrozen","INTERRUPTED","RESTORING","restoringTimer","rtcMutedTimestamp","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","_getVideoFrozenTimeout","isP2PActive","_onP2PStatus","figureOutStreamingStatus","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onForwardedSourcesChanged","onForwardedSourcesChanged","_onLastNValueChanged","clearRtcMutedTimestamp","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","newStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldStreamingStatus","streamingStatus","nowMs","startedMs","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","rTimer","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","listenerCount","_initTrackStreamingStatus","_disposeTrackStreamingStatus","REMOTE_TRACK_MUTE","REMOTE_TRACK_UNMUTE","setMute","getSSRC","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","ssHigh","videoBitrates","encodingBitrates","VP8","_getStreamEncodings","localTrack","_getVideoStreamEncodings","maxBitrate","maxVideoBitrate","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","videoStreamEncodings","encoding","_capScreenshareBitrate","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","lowFpsScreenshare","getConfiguredEncodeResolution","videoSender","parameters","isNewLocalSource","stopped","transceiverMid","_localTrackTransceiverMids","setEncodings","_updateVideoSenderParameters","setActivePromise","settledResult","errors","transceivers","localTrackMids","updateEncodingsResolution","TraceablePeerConnection","_dtmfSender","_dtmfTonesQueue","remoteTracks","_addedStreams","localSSRCs","remoteSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","statsinterval","_usesTransceiverCodecPreferences","interop","Simulcast","explodeRemoteSimulcast","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","time","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","_lastVideoSenderUpdatePromise","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getDesktopTrackMid","desktopTrack","_getReceiversByEndpointIds","endpoints","remoteTrackIds","audioReceivers","getSynchronizationSources","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","remoteTrack","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLine","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","jitsiTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","groupSsrcs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","isSharingLowFpsScreen","_isSharingScreen","_mungeCodecOrder","mLines","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","localSdp","oldTrackSSRC","_ensureSimulcastGroupIsLast","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","localSources","remoteSources","_mungeOpus","enableOpusDtx","opusMaxAverageBitrate","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","usedtx","mungedConfig","_mungeInactive","_initializeDtlsTransport","onstatechange","_setVp9MaxBitrates","isLocalSdp","VP9","bitrates","hdBitrate","ssHdBitrate","isSharingScreen","currentDescription","mungeRemoteDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","write","normalizePlanB","configuredResolution","_updateVideoSenderEncodings","nextPromise","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","disabledCodecMimeType","preferredCodecMimeType","ULPFEC","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIndex","sourceIdentifier","newSSRCNum","oldSSRCNum","existing","getActiveSimulcastStreams","activeStreams","currNumSsrcs","ConnectionQualityEvents","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_forwardedSources","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldForwardedSources","setReceiverVideoConstraints","sendSourceVideoType","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","startBitrate","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","disableLocalStats","_updateLocalStats","_maybeUpdateUnmuteTime","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","DESKTOP","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioLevel","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","numRequestsWithResponses","totalNumRequests","JitsiE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","RecordingAdapter","exportRecordedData","setMicDevice","_getAudioStream","SariskaMediaTransport","OggAdapter","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","format","shouldEnable","_stream","MediaRecorder","ondataavailable","_saveMediaData","AbstractAudioContextAdapter","_sampleRate","_replaceMic","newSource","WavAdapter","_wavBuffers","_wavLength","_data","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","view","DataView","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","setUint8","output","offset","inputBuffers","input","sampleCount","bufferCount","o","setInt16","floatTo16BitPCM","string","lng","FlacAdapter","_onWorkerMessage","_encoder","_stopPromiseResolver","command","promiseInitWorker","_loadWebWorker","_initWorkerPromiseResolver","bps","buf","blob","blobUrl","webkitURL","revokeObjectURL","highPrecisionTime","timing","navigationStart","SessionEventType","freeze","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","LOCAL_STORAGE_KEY","sessionManager","_loadMetadata","dataStr","dataObject","Bourne","_sessionsMetadata","_saveMetadata","createSession","sessionToken","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","beginSegment","getCurrentSegmentIndex","endSegment","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","currentEvent","COMMAND_START","COMMAND_STOP","COMMAND_PING","PROPERTY_STATS","RECORDING_FORMATS","ControllerState","IDLE","STARTING","RECORDING","STOPPING","FAILED","RecordingController","registerEvents","getParticipantsStats","_onStartCommand","_onStopCommand","_onPingCommand","_doStartRecording","_doStopRecording","_updateStats","_switchToNewSession","_registered","addCommandListener","sendCommandOnce","onStateChanged","delegate","_onStateChanged","onNotify","_onNotify","onWarning","_onWarning","startRecording","switchFormat","removeCommand","sendCommand","_getRandomToken","_format","stopRecording","_currentSessionToken","downloadRecordedData","_adapters","fileName","base64Url","style","click","removeChild","downloadBlob","_micDeviceId","_state","_isMuted","newFormat","getLocalStats","currentSessionToken","isRecording","recordedBytes","recordedLength","recordingStats","isSelf","localId","_changeState","messageKey","messageParams","_createRecordingAdapter","kJitsiLiteMode","LiteModeContext","_setupLiteModeForTrack","transformStream","TransformStream","pipeThrough","pipeTo","MAX_HEIGHT","ReceiverVideoConstraints","assumedBandwidthBps","_maxFrameHeight","_assumedBandwidthBps","defaultConstraints","updateAssumedBandwidthBps","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","videoConstraints","ReceiveVideoController","_rtc","startLastN","_getDefaultSourceReceiverConstraints","remoteVideoTracks","setAssumedBandwidthBps","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","p2pSession","mappedConstraints","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","sourceConstraints","getActiveMediaSession","sendMaxFrameHeight","_selectSendMaxFrameHeight","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_jibriJid","_statusFromJicofo","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getJibriJid","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setStatusFromJicofo","setJibriJid","jibriJid","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","pathname","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","faceLandmarks","_onFaceLandmarkAdd","oldDominantSpeaker","newDominantSpeaker","setDominantSpeaker","savedUser","markAsHasLeft","newName","setDisplayName","addFaceLandmarks","newStats","speakerStatsToUpdate","newParticipant","totalDominantSpeakerTime","setFaceLandmarks","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","instantiateTrackRecorder","updateNames","originalStream","dataEvent","recorderToRemove","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","SphinxService","recordingResult","verify","formatResponse","audioBlob","sphinxURL","toReturn","getURL","audioFileBlob","XMLHttpRequest","onreadystatechange","DONE","responseText","open","setRequestHeader","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","processVersions","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_bindChatRoomEventHandlers","emitAudioMutedEvent","_audioMuteHandler","_doesEndpointSendNewSourceInfo","emitVideoMutedEvent","_videoMuteHandler","emitVideoTypeEvent","_videoTypeHandler","_sourceInfoHandler","sourceInfoJSON","emitEventsFromHere","endpointSourceState","sourceChanged","newMutedState","oldSourceState","newVideoType","newSourceNames","_memberLeftHandler","_logOwnerChangedMessage","lastPresence","legacyGetPeerMediaInfo","mediaInfo","setChatRoom","oldChatRoom","existingOwner","existingName","entry","INITIAL_STATE","localTracksDuration","startedTime","camera","desktop","FINAL_STATE","calculateLocalTrackDuration","newDuration","LocalTracksDuration","newLocalTracksDuration","createLocalTracksDurationEvent","APP","_getCodecMimeType","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","getSessionByJibriJid","_handleFocusPresence","_handleJibriPresence","prevStatus","_emitSessionUpdate","_addSession","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_liteModeContext","_audioSenderLimitReached","_videoSenderLimitReached","handleSubtitles","enableLocalRecording","recordingController","enableAnalytics","robot","_room","membersCount","getParticipantsWithoutHidden","_firefoxP2pEnabled","enableFirefoxP2p","resourceCreator","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","isEndConferenceSupported","localtrack","BridgeVideoType","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","removeCommandListener","sendTextMessage","sendPrivateTextMessage","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_suspendMediaTransferForJvbConnection","_setNewVideoType","videoTypeChanged","presenceChanged","addPromises","removePromises","lock","unlock","isInteger","isVideoActive","features_jigasi","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","ignoreDomain","bridgeChannel","preferSctp","sctpOffered","first","firstWsUrl","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","isSIPCallingSupported","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","getLocalUser","ownerId","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","pastMessage","JSON_TYPE_TRANSCRIPTION_RESULT","JSON_TYPE_TRANSLATION_RESULT","translationLanguage","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","final","transcript","is_interim","stability","stable","unstable","finalText","fellowParticipantName","finalPaylaod","startLocalRecording","stopLocalRecording","startSIPVideoCall","stopSIPVideoCall","blacklist","syncWithURL","conferenceConfig","dontParse","paramStr","paramParts","firstParam","part","param","decoded","parseURLParams","initSDKConfig","sendMultipleVideoStreams","sourceNameSignaling","connectionConfig","clientNode","devConnectionConfig","enableVirtualBackground","enableNoiseCancellation","openBridgeChannel","enableLayerSuspension","DISCO_JIBRI_FEATURE","JitsiConnection","isDev","jwt","parseJwt","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","JitsiMediaDevicesEvents","atob","usernameOverride","passwordOverride","setToken","initJitsiConference","getLogs","DEVICE_LIST_CHANGED","PERMISSIONS_CHANGED","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","CustomSignalingLayer","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","timerWorkerScript","JitsiStreamPresenterEffect","videoDiv","firstVideoTrack","_canvas","_ctx","getContext","_desktopElement","_videoElement","_frameRate","autoplay","play","display","_onVideoFrameTimer","_renderVideo","_desktopStream","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","_videoFrameTimerWorker","captureStream","Module","readyPromiseResolve","moduleOverrides","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","arguments_","importScripts","readBinary","scriptDirectory","currentScript","xhr","responseType","wasmBinary","wasmMemory","out","WebAssembly","HEAPU8","HEAP32","wasmTable","Table","ABORT","updateGlobalBufferAndViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float64Array","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","arg","Memory","DYNAMICTOP_PTR","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","abort","RuntimeError","isDataURI","filename","path","wasmBinaryFile","getBinary","emscripten_realloc_buffer","grow","___wasm_call_ctors","calledRun","asmLibraryArg","dest","copyWithin","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","receiveInstance","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","binary","instantiate","instantiateStreaming","instantiateAsync","createWasm","run","doRun","postRun","preRun","runCaller","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_context","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","HEAPF32","_convertTo16BitPCM","f32Array","_rnnoise_destroy","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","_handleWorkerAction","_initScreenshotCapture","_streamWorker","_streamHeight","_streamWidth","storedCanvasContext","getImageData","_storedImageData","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","ImageData","onloadeddata","segmentationDimensions","getAnalyticsAttributesFromOptions","video_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","localTrackIndex","localSourceNameTrack","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","createPresenterEffect","createRnnoiseProcessor","rnnoiseWasmInit","mod","createScreenshotCaptureEffect","createVirtualBackgroundEffect","dispatch","tflite","wasmCheck","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","arrayBuffer","_loadModel","constants","recording","BUSY","ERROR","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errorTypes","logLevels","Logger","JitsiMediaDevices","newOptions","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","setLogLevel","setLogLevelById","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","isCollectingLocalStats","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","lineno","colno","setNetworkInfo","createAnalyticsEvent","hint","contentHint","precallTest","util","AuthUtil","sariskaMediaTransport","_mergeNamespaceAndModule","isLocalStats","_userId","_isLocalStats","_dominantSpeakerStart","_isDominantSpeaker","_isSilent","_hasLeft","_faceLandmarks","getUserId","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","getFaceLandmarks","u","onload","readbuffer","read","scriptArgs","quit","print","printErr","g","thisProgram","noExitRuntime","A","I","M","E","R","TextDecoder","S","subarray","decode","fromCharCode","O","HEAP8","HEAP16","HEAPU16","HEAPU32","HEAPF64","INITIAL_MEMORY","C","T","P","H","ne","W","D","L","onAbort","U","preloadedImages","preloadedAudios","F","B","N","G","z","X","hrtime","dateNow","Y","J","K","Q","V","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Z","mappings","printChar","varargs","getStr","get64","ee","onExit","re","hardwareConcurrency","asm","monitorRunDependencies","instantiateWasm","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","___errno_location","ae","onRuntimeInitialized","preInit","getTokenAuthUrl","urlPattern","roleUpgrade","srcEvent","Function","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","currentExecutingScript","loadScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","parentNode","generateUsername","internals","firstOptions","reviver","protoAction","scan","SyntaxError","__proto__","safeParse","ignoreError","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","reschedule","isReady","cachedQueue","storeLogs","consoleTransport","globalTransports","addGlobalTransport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","transports","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","grammar","reg","subtype","sessionConfig","raddr","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","writer","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","_restoreSimulcast","enableConferenceFlag","order","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","getParser","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","is","versionName","vendor","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","thrownErr","near","far","ReflectOwnKeys","Reflect","ReflectApply","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","_addListener","warning","newListener","warned","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","copy","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","prependOnceListener","position","originalListener","spliceOne","rawListeners","eventNames","flat","nodeType","nonce","noModule","jquery","pushStack","prevObject","eq","last","even","grep","odd","extend","isPlainObject","expando","noop","globalEval","makeArray","inArray","guid","support","ue","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","needsContext","oe","xe","dir","childNodes","se","ownerDocument","getElementById","getElementsByClassName","qsa","ye","scope","be","querySelectorAll","removeAttribute","cacheLength","le","ce","fe","attrHandle","de","nextSibling","pe","he","ge","isDisabled","ve","isXML","namespaceURI","documentElement","setDocument","defaultView","top","className","createComment","getById","getElementsByName","getAttributeNode","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","contains","sortDetached","specified","escape","uniqueSort","detectDuplicates","sortStable","getText","firstChild","nodeValue","selectors","createPseudo","relative","preFilter","lastChild","uniqueID","pseudos","setFilters","not","lang","activeElement","hasFocus","tabIndex","checked","selected","selectedIndex","parent","button","lt","gt","nth","radio","checkbox","file","image","we","Ce","Te","Ee","filters","tokenize","compile","select","defaultValue","unique","isXMLDoc","escapeSelector","parseHTML","closest","prevAll","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","siblings","contentDocument","fail","Callbacks","stopOnFalse","memory","fireWith","fire","always","pipe","progress","notify","notifyWith","resolveWith","exceptionHook","stackTrace","rejectWith","getStackHook","when","readyException","readyWait","doScroll","uid","access","hasData","removeData","_removeData","dequeue","_queueHooks","clearQueue","composed","getRootNode","css","show","hide","toggle","createDocumentFragment","checkClone","cloneNode","noCloneChecked","option","thead","col","tr","td","_default","tbody","tfoot","colgroup","caption","th","optgroup","htmlPrefilter","createTextNode","namespace","isTrigger","special","delegateType","stopPropagation","stopImmediatePropagation","preventDefault","global","handle","triggered","bindType","origType","delegateCount","teardown","removeEvent","fix","delegateTarget","preDispatch","isPropagationStopped","currentTarget","isImmediatePropagationStopped","rnamespace","handleObj","postDispatch","addProp","originalEvent","load","noBubble","beforeunload","returnValue","isDefaultPrevented","defaultPrevented","relatedTarget","timeStamp","isSimulated","altKey","bubbles","cancelable","changedTouches","ctrlKey","detail","eventPhase","metaKey","pageX","pageY","shiftKey","charCode","keyCode","buttons","clientX","clientY","offsetX","offsetY","pointerId","pointerType","screenX","screenY","targetTouches","toElement","touches","which","blur","mouseenter","mouseleave","pointerenter","pointerleave","one","Ae","Ne","Se","ke","De","Le","je","qe","html","_evalUrl","Oe","cleanData","append","after","replaceWith","replaceChild","appendTo","prependTo","replaceAll","Pe","He","Ie","opener","getComputedStyle","Re","Be","Me","We","Fe","getPropertyValue","pixelBoxStyles","$e","cssText","marginLeft","offsetWidth","backgroundClip","clearCloneStyle","boxSizingReliable","pixelPosition","reliableMarginLeft","scrollboxSize","reliableTrDimensions","borderTopWidth","borderBottomWidth","offsetHeight","ze","_e","Ue","Ve","cssProps","Xe","Qe","Ye","Ge","visibility","Ke","letterSpacing","fontWeight","Je","Ze","ceil","et","getClientRects","cssHooks","opacity","cssNumber","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","orphans","widows","zIndex","zoom","isFinite","getBoundingClientRect","margin","padding","border","expand","fx","speeds","checkOn","optSelected","radioValue","tt","nt","removeAttr","attrHooks","rt","it","ot","at","st","removeProp","propFix","propHooks","addClass","removeClass","toggleClass","hasClass","ut","valHooks","focusin","ct","parentWindow","simulate","triggerHandler","parseXML","ft","dt","ht","vt","encodeURIComponent","serializeArray","wrapAll","firstElementChild","wrapInner","visible","createHTMLDocument","implementation","setOffset","using","pageYOffset","pageXOffset","offsetParent","scrollLeft","scrollTop","scrollTo","Height","Width","unbind","undelegate","hover","yt","proxy","holdReady","parseJSON","isFunction","isWindow","camelCase","isNumeric","mt","jQuery","bt","noConflict","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","nodeWrap","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","initAccum","isHostObject","mapToArray","overArg","setToArray","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","assocIndexOf","baseClone","isDeep","isFull","customizer","isArr","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","getMapData","getValue","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","colorDelta","abs","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","localCName","generateIdentifier","splitLines","splitSections","getDescription","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","writeCandidate","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","algorithm","getDtlsParameters","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","fec","mechanism","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","sctpPort","sctpMapLines","writeSctpDescription","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","netType","addressType","isValidSDP","global$1","WebSocketImplementation","getWebSocketImplementation","DOMParserImplementation","getDOMParserImplementation","getDummyXMLDOMDocument","createDocument","documentMode","doc","docStrings","ActiveXObject","_getIEXmlDom","safe_add$1","str2binl","md5_cmn","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","MD5","hexdigest","hex_tab","binl2hex","binl2str","SASLMechanism","isClientFirst","mechname","onStart","onChallenge","challenge","clientChallenge","cookies","cookieName","expires","cookieObj","cookieValue","unescape","cookie","core_hmac_sha1","bkey","ipad","opad","binb2str","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","atobLookup","chr","btoaLookup","abab","accumulatedBits","btoa","groupsOfSix","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","validTag","validAttribute","validCSS","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ATTACHFAIL","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNode","isTagEqual","_xmlGenerator","xmlGenerator","xmlTextNode","xmlescape","xmlunescape","xmlHtmlNode","loadXML","copyElement","createHtml","cssAttrs","cssName","cssValue","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","fatal","sourceURL","lineNumber","_console","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","impNode","xmlGen","importNode","newElem","fragment","xhtml","ns","matchBare","matchBareFromJid","Handler","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","nsMatch","isMatch","elem_type","TimedHandler","period","lastCalled","Connection","setProtocol","_sasl_data","do_bind","do_session","mechanisms","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","iqFallbackHandler","WorkerWebsocket","Websocket","Bosh","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","disconnection_timeout","authzid","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","nextValidRid","_queueData","timeoutHandler","deleteTimedHandler","addTimedHandler","iqtype","_sendRestart","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","Mechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","_dataRecv","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_connect_cb","_callback","bodyWrap","hasFeatures","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","request_auth_exchange","_onLegacyAuthIQResult","_auth2_cb","serverSignature","attribMatch","streamfeature_handlers","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","auth_str","iter","Hi","U_old","authMessage","cnonce","clientKey","serverKey","clientSignature","test_cnonce","core","Request","sends","xmlData","origFunc","date","NaN","dead","age","timeDead","_newXHR","getResponse","responseXML","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","reqIs0","reqIs1","valid_request","too_many_retries","_removeRequest","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","new_service","host","_buildStream","_checkStreamError","connectstatus","errorString","_onOpen","_onInitialMessage","_handleStreamStart","streamStart","parsedMessage","see_uri","_replaceMessageHandler","_streamWrap","CLOSED","closeString","rawStanza","startString","lmap","SharedWorker","_messageHandler","_attachCallback","method_name","_items","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","_buildIQResult","query_attrs","iqresult","byteToHex","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","tl","tmh","_md","hashfunc","generateUUID","stringToBytes","uuidToBytes","DNS","rnds","_sha","validate","Instance","globalThis","of","supportStreaming","bigInt","bulk","exceptions","memory64","mutableGlobal","multiValue","saturateConversions","signExtensions","tailCall","threads","references","typeReflection","funcReferences","CAMERA","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","AV1","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_REMOVED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","VIDEO_SSRCS_REMAPPED","AUDIO_SSRCS_REMAPPED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","nmd","paths","__webpack_exports__"],"sourceRoot":""}